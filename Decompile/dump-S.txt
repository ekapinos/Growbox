
Growbox.cpp.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__dtors_end>
uint8_t EEPROMClass::read(int address)
{
	return eeprom_read_byte((unsigned char *) address);
}

void EEPROMClass::write(int address, uint8_t value)
       4:	0c 94 85 04 	jmp	0x90a	; 0x90a <__bad_interrupt>
    total += 2; /* Add two bytes for the memory block's header  */
    total += (int) current->sz;
  }

  return total;
}
       8:	0c 94 85 04 	jmp	0x90a	; 0x90a <__bad_interrupt>
   
int month(){
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
       c:	0c 94 85 04 	jmp	0x90a	; 0x90a <__bad_interrupt>
TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
  for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
     free(id);   // ensure  all Alarms are cleared and available for allocation  
}
      10:	0c 94 85 04 	jmp	0x90a	; 0x90a <__bad_interrupt>
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
  txBufferLength = 0;
}
      14:	0c 94 85 04 	jmp	0x90a	; 0x90a <__bad_interrupt>
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
}
      18:	0c 94 85 04 	jmp	0x90a	; 0x90a <__bad_interrupt>
    exists = false;
    return false;
  }
  exists = true;
  return true;
}
      1c:	0c 94 85 04 	jmp	0x90a	; 0x90a <__bad_interrupt>
void OneWire::depower()
{
	noInterrupts();
	DIRECT_MODE_INPUT(baseReg, bitmask);
	interrupts();
}
      20:	0c 94 85 04 	jmp	0x90a	; 0x90a <__bad_interrupt>
  devices = 0;
  parasite = false;
  bitResolution = 9;
  waitForConversion = true;
  checkForConversion = true;
}
      24:	0c 94 85 04 	jmp	0x90a	; 0x90a <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      28:	0c 94 85 04 	jmp	0x90a	; 0x90a <__bad_interrupt>
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
      2c:	0c 94 85 04 	jmp	0x90a	; 0x90a <__bad_interrupt>
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
      30:	0c 94 85 04 	jmp	0x90a	; 0x90a <__bad_interrupt>
	return operator[](loc);
}

void String::setCharAt(unsigned int loc, char c) 
{
	if (loc < len) buffer[loc] = c;
      34:	0c 94 85 04 	jmp	0x90a	; 0x90a <__bad_interrupt>
      38:	0c 94 85 04 	jmp	0x90a	; 0x90a <__bad_interrupt>
      3c:	0c 94 85 04 	jmp	0x90a	; 0x90a <__bad_interrupt>
      40:	0c 94 c9 31 	jmp	0x6392	; 0x6392 <__vector_16>
      44:	0c 94 85 04 	jmp	0x90a	; 0x90a <__bad_interrupt>
      48:	0c 94 a3 33 	jmp	0x6746	; 0x6746 <__vector_18>
      4c:	0c 94 f1 33 	jmp	0x67e2	; 0x67e2 <__vector_19>
      50:	0c 94 85 04 	jmp	0x90a	; 0x90a <__bad_interrupt>
      54:	0c 94 85 04 	jmp	0x90a	; 0x90a <__bad_interrupt>
      58:	0c 94 85 04 	jmp	0x90a	; 0x90a <__bad_interrupt>
      5c:	0c 94 85 04 	jmp	0x90a	; 0x90a <__bad_interrupt>
      60:	0c 94 ce 28 	jmp	0x519c	; 0x519c <__vector_24>
      64:	0c 94 85 04 	jmp	0x90a	; 0x90a <__bad_interrupt>

00000068 <_ZL7S_table>:
      68:	74 61 62 6c 65 00                                   table.

0000006e <_ZL4S_tr>:
      6e:	74 72 00                                            tr.

00000071 <_ZL4S_td>:
      71:	74 64 00                                            td.

00000074 <_ZL4S_0x>:
      74:	30 78 00                                            0x.

00000077 <_ZL18S_WIFI_RESPONSE_OK>:
      77:	4f 4b 00                                            OK.

0000007a <_ZL6S_CRLF>:
      7a:	0d 0a 00                                            ...

0000007d <_ZL21S_WIFI_RESPONSE_ERROR>:
      7d:	45 52 52 4f 52 00                                   ERROR.

00000083 <_ZL7S_empty>:
	...

00000084 <_ZL6S_Next>:
      84:	20 3e 20 00                                          > .

00000088 <_ZZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperiE3__c_1>:
      88:	45 72 72 6f 72 20 00                                Error .

0000008f <_ZZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperiE3__c_0>:
      8f:	20 28 72 65 62 6f 6f 74 29 00                        (reboot).

00000099 <_ZZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperiE3__c>:
      99:	4e 6f 20 72 65 73 70 6f 6e 73 65 00                 No response.

000000a5 <_ZL6S_WIFI>:
      a5:	57 49 46 49 3e 20 00                                WIFI> .

000000ac <_ZZN13GB_PrintDirty16printWithoutCRLFERK6StringE3__c_0>:
      ac:	5c 6e 00                                            \n.

000000af <_ZZN13GB_PrintDirty16printWithoutCRLFERK6StringE3__c>:
      af:	5c 72 00                                            \r.

000000b2 <_ZZN15GB_SerialHelper18sendWifiFrameStartEhjE3__c>:
      b2:	61 74 2b 73 65 6e 64 5f 64 61 74 61 3d 00           at+send_data=.

000000c0 <_ZL13S_Free_memory>:
      c0:	46 72 65 65 20 6d 65 6d 6f 72 79 3a 20 00           Free memory: .

000000ce <_ZL7S_bytes>:
      ce:	20 62 79 74 65 73 00                                 bytes.

000000d5 <_ZZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhhE3__c_0>:
      d5:	4e 4f 54 20 53 54 4f 52 45 44 20 00                 NOT STORED .

000000e1 <_ZZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhhE3__c>:
      e1:	4c 4f 47 3e 20 00                                   LOG> .

000000e7 <_ZZN9GB_Logger18getLogRecordSuffixERK9LogRecordE3__c_0>:
      e7:	5d 20 43 00                                         ] C.

000000eb <_ZZN9GB_Logger18getLogRecordSuffixERK9LogRecordE3__c>:
      eb:	20 5b 00                                             [.

000000ee <_ZL24S_WIFI_RESPONSE_WELLCOME>:
      ee:	57 65 6c 63 6f 6d 65 20 74 6f 20 52 41 4b 34 31     Welcome to RAK41
      fe:	30 0d 0a 00                                         0...

00000102 <_ZL9S_enabled>:
     102:	20 65 6e 61 62 6c 65 64 00                           enabled.

0000010b <_ZL10S_disabled>:
     10b:	20 64 69 73 61 62 6c 65 64 00                        disabled.

00000115 <_ZL11S_connected>:
     115:	20 63 6f 6e 6e 65 63 74 65 64 00                     connected.

00000120 <_ZL14S_disconnected>:
     120:	20 64 69 73 63 6f 6e 6e 65 63 74 65 64 00            disconnected.

0000012e <_ZZN15GB_SerialHelper11checkSerialEhhE3__c_3>:
     12e:	53 65 72 69 61 6c 20 57 69 2d 46 69 3a 00           Serial Wi-Fi:.

0000013c <_ZZN15GB_SerialHelper11checkSerialEhhE3__c_2>:
     13c:	53 65 72 69 61 6c 20 6d 6f 6e 69 74 6f 72 3a 20     Serial monitor: 
	...

0000014d <_ZZN15GB_SerialHelper11checkSerialEhhE3__c_1>:
     14d:	4e 6f 74 20 63 6f 72 72 65 63 74 20 77 65 6c 6c     Not correct well
     15d:	63 6f 6d 65 20 6d 65 73 73 61 67 65 3a 20 00        come message: .

0000016c <_ZZN15GB_SerialHelper11checkSerialEhhE3__c_0>:
     16c:	61 74 2b 72 65 73 65 74 3d 30 00                    at+reset=0.

00000177 <_ZZN15GB_SerialHelper11checkSerialEhhE3__c>:
     177:	52 65 73 74 61 72 74 69 6e 67 2e 2e 2e 00           Restarting....

00000185 <_ZZN15GB_SerialHelper9startWifiEvE3__c_1>:
     185:	53 74 61 72 74 20 66 61 69 6c 65 64 00              Start failed.

00000192 <_ZZN15GB_SerialHelper9startWifiEvE3__c_0>:
     192:	53 74 61 72 74 65 64 00                             Started.

0000019a <_ZZN15GB_SerialHelper9startWifiEvE3__c>:
     19a:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

000001a6 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_7>:
     1a6:	61 74 2b 6c 74 63 70 3d 38 30 00                    at+ltcp=80.

000001b1 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_6>:
     1b1:	61 74 2b 61 70 3d 47 72 6f 77 62 6f 78 2c 31 00     at+ap=Growbox,1.

000001c1 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_5>:
     1c1:	61 74 2b 69 70 64 68 63 70 3d 31 00                 at+ipdhcp=1.

000001cd <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_4>:
     1cd:	61 74 2b 69 70 73 74 61 74 69 63 3d 31 39 32 2e     at+ipstatic=192.
     1dd:	31 36 38 2e 30 2e 31 2c 32 35 35 2e 32 35 35 2e     168.0.1,255.255.
     1ed:	30 2e 30 2c 30 2e 30 2e 30 2e 30 2c 30 2c 30 00     0.0,0.0.0.0,0,0.

000001fd <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_3>:
     1fd:	61 74 2b 70 73 6b 3d 69 6e 67 6f 64 77 65 74 72     at+psk=ingodwetr
     20d:	75 73 74 00                                         ust.

00000211 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_2>:
     211:	61 74 2b 69 70 64 68 63 70 3d 30 00                 at+ipdhcp=0.

0000021d <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_1>:
     21d:	61 74 2b 63 6f 6e 6e 65 63 74 3d 00                 at+connect=.

00000229 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_0>:
     229:	61 74 2b 70 73 6b 3d 00                             at+psk=.

00000231 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c>:
     231:	61 74 2b 73 63 61 6e 3d 30 00                       at+scan=0.

0000023b <_ZL13S_Temperature>:
     23b:	54 65 6d 70 65 72 61 74 75 72 65 00                 Temperature.

00000247 <_ZL5S_url>:
     247:	2f 00                                               /.

00000249 <_ZL9S_url_log>:
     249:	2f 6c 6f 67 00                                      /log.

0000024e <_ZL10S_url_conf>:
     24e:	2f 63 6f 6e 66 00                                   /conf.

00000254 <_ZL13S_url_storage>:
     254:	2f 73 74 6f 72 61 67 65 00                          /storage.

0000025d <_ZZ11serialEventvE3__c>:
     25d:	53 65 6e 64 20 72 65 73 70 6f 6e 63 65 20 65 72     Send responce er
     26d:	72 6f 72 00                                         ror.

00000271 <_ZL11S_WIFI_GET_>:
     271:	47 45 54 20 2f 00                                   GET /.

00000277 <_ZL12S_WIFI_POST_>:
     277:	50 4f 53 54 20 2f 00                                POST /.

0000027e <_ZL10S_CRLFCRLF>:
     27e:	0d 0a 0d 0a 00                                      .....

00000283 <_ZZN15GB_SerialHelper17handleSerialEventER6StringRhS1_E3__c>:
     283:	61 74 2b 72 65 63 76 5f 64 61 74 61 3d 00           at+recv_data=.

00000291 <_ZZN15GB_SerialHelper16sendHTTPRedirectERKhPK19__FlashStringHelperE3__c>:
     291:	48 54 54 50 2f 31 2e 31 20 32 30 30 20 4f 4b 20     HTTP/1.1 200 OK 
     2a1:	28 33 30 33 20 64 6f 65 73 6e 27 74 20 77 6f 72     (303 doesn't wor
     2b1:	6b 20 6f 6e 20 52 41 4b 20 34 31 30 29 0d 0a 72     k on RAK 410)..r
     2c1:	65 66 72 65 73 68 3a 20 30 3b 20 75 72 6c 3d 00     efresh: 0; url=.

000002d1 <_ZZN15GB_SerialHelper23sendWifiCloseConnectionEhE3__c>:
     2d1:	61 74 2b 63 6c 73 3d 00                             at+cls=.

000002d9 <_ZZN15GB_SerialHelper17sendHttpOK_HeaderEhE3__c>:
     2d9:	48 54 54 50 2f 31 2e 31 20 32 30 30 20 4f 4b 0d     HTTP/1.1 200 OK.
     2e9:	0a 43 6f 6e 6e 65 63 74 69 6f 6e 3a 20 63 6c 6f     .Connection: clo
     2f9:	73 65 0d 0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65     se..Content-Type
     309:	3a 20 74 65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 00     : text/html.....

00000319 <_ZL6S_html>:
     319:	68 74 6d 6c 00                                      html.

0000031e <_ZL4S_hr>:
     31e:	68 72 00                                            hr.

00000321 <_ZL5S_pre>:
     321:	70 72 65 00                                         pre.

00000325 <_ZZL24generateHttpResponsePageRK6StringE3__c_3>:
     325:	53 74 6f 72 61 67 65 20 64 75 6d 70 00              Storage dump.

00000332 <_ZZL24generateHttpResponsePageRK6StringE3__c_2>:
     332:	43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 00           Configuration.

00000340 <_ZZL24generateHttpResponsePageRK6StringE3__c_1>:
     340:	44 61 69 6c 79 20 6c 6f 67 00                       Daily log.

0000034a <_ZZL24generateHttpResponsePageRK6StringE3__c_0>:
     34a:	53 74 61 74 75 73 00                                Status.

00000351 <_ZZL24generateHttpResponsePageRK6StringE3__c>:
     351:	47 72 6f 77 62 6f 78 00                             Growbox.

00000359 <_ZZL13sendTagButtonPKcPK19__FlashStringHelperE3__c_1>:
     359:	22 2f 3e 00                                         "/>.

0000035d <_ZZL13sendTagButtonPKcPK19__FlashStringHelperE3__c_0>:
     35d:	27 22 20 76 61 6c 75 65 3d 22 00                    '" value=".

00000368 <_ZZL13sendTagButtonPKcPK19__FlashStringHelperE3__c>:
     368:	3c 69 6e 70 75 74 20 74 79 70 65 3d 22 62 75 74     <input type="but
     378:	74 6f 6e 22 20 6f 6e 63 6c 69 63 6b 3d 22 64 6f     ton" onclick="do
     388:	63 75 6d 65 6e 74 2e 6c 6f 63 61 74 69 6f 6e 3d     cument.location=
     398:	27 00                                               '.

0000039a <_ZZL14sendBootStatusvE3__c_3>:
     39a:	2c 20 6f 76 65 72 66 6c 6f 77 00                    , overflow.

000003a5 <_ZZL14sendBootStatusvE3__c_2>:
     3a5:	2c 20 72 65 63 6f 72 64 73 20 00                    , records .

000003b0 <_ZZL14sendBootStatusvE3__c_1>:
     3b0:	0d 0a 4c 6f 67 67 65 72 3a 00                       ..Logger:.

000003ba <_ZZL14sendBootStatusvE3__c_0>:
     3ba:	2c 20 66 69 72 73 74 20 73 74 61 72 74 75 70 3a     , first startup:
     3ca:	20 00                                                .

000003cc <_ZZL14sendBootStatusvE3__c>:
     3cc:	43 6f 6e 74 72 6f 6c 6c 65 72 3a 20 73 74 61 72     Controller: star
     3dc:	74 75 70 3a 20 00                                   tup: .

000003e2 <_ZZL14sendTimeStatusvE3__c_5>:
     3e2:	3a 30 30 5d 0d 0a 00                                :00]...

000003e9 <_ZZL14sendTimeStatusvE3__c_4>:
     3e9:	3a 30 30 5d 2c 20 64 6f 77 6e 20 74 69 6d 65 20     :00], down time 
     3f9:	5b 00                                               [.

000003fb <_ZZL14sendTimeStatusvE3__c_3>:
     3fb:	2c 20 75 70 20 74 69 6d 65 20 5b 00                 , up time [.

00000407 <_ZZL14sendTimeStatusvE3__c_2>:
     407:	20 6d 6f 64 65 2c 20 74 69 6d 65 20 00               mode, time .

00000414 <_ZZL14sendTimeStatusvE3__c_1>:
     414:	4e 49 47 48 54 00                                   NIGHT.

0000041a <_ZZL14sendTimeStatusvE3__c_0>:
     41a:	44 41 59 00                                         DAY.

0000041e <_ZZL14sendTimeStatusvE3__c>:
     41e:	43 6c 6f 63 6b 3a 20 00                             Clock: .

00000426 <_ZL11S_PlusMinus>:
     426:	2b 2f 2d 00                                         +/-.

0000042a <_ZZL21sendTemperatureStatusvE3__c_4>:
     42a:	2c 20 63 72 69 74 69 63 61 6c 20 00                 , critical .

00000436 <_ZZL21sendTemperatureStatusvE3__c_3>:
     436:	2c 20 6e 69 67 68 74 20 00                          , night .

0000043f <_ZZL21sendTemperatureStatusvE3__c_2>:
     43f:	29 2c 20 64 61 79 20 00                             ), day .

00000447 <_ZZL21sendTemperatureStatusvE3__c_1>:
     447:	20 28 63 6f 75 6e 74 20 00                           (count .

00000450 <_ZZL21sendTemperatureStatusvE3__c_0>:
     450:	2c 20 6e 65 78 74 20 00                             , next .

00000458 <_ZZL21sendTemperatureStatusvE3__c>:
     458:	3a 20 63 75 72 72 65 6e 74 20 00                    : current .

00000463 <_ZL4S___>:
     463:	20 20 00                                              .

00000466 <_ZZL30printSendConfigurationControlsvE3__c_1>:
     466:	3c 2f 66 6f 72 6d 3e 00                             </form>.

0000046e <_ZZL30printSendConfigurationControlsvE3__c_0>:
     46e:	3c 69 6e 70 75 74 20 74 79 70 65 3d 22 73 75 62     <input type="sub
     47e:	6d 69 74 22 20 76 61 6c 75 65 3d 22 53 75 62 6d     mit" value="Subm
     48e:	69 74 22 3e 00                                      it">.

00000493 <_ZZL30printSendConfigurationControlsvE3__c>:
     493:	3c 66 6f 72 6d 20 61 63 74 69 6f 6e 3d 22 2f 22     <form action="/"
     4a3:	20 6d 65 74 68 6f 64 3d 22 70 6f 73 74 22 3e 00      method="post">.

000004b3 <_ZZL16printSendFullLoghhhE3__c>:
     4b3:	4c 6f 67 20 65 6d 70 74 79 00                       Log empty.

000004bd <_ZZN9GB_Logger23getLogRecordDescriptionER9LogRecordE3__c_1>:
     4bd:	55 6e 6b 6e 6f 77 6e 00                             Unknown.

000004c5 <_ZZN9GB_Logger23getLogRecordDescriptionER9LogRecordE3__c_0>:
     4c5:	55 6e 6b 6e 6f 77 6e 20 65 72 72 6f 72 00           Unknown error.

000004d3 <_ZZN9GB_Logger23getLogRecordDescriptionER9LogRecordE3__c>:
     4d3:	55 6e 6b 6e 6f 77 6e 20 65 76 65 6e 74 00           Unknown event.

000004e1 <_ZZN15GB_SerialHelper16sendHttpNotFoundEhE3__c>:
     4e1:	48 54 54 50 2f 31 2e 31 20 34 30 34 20 4e 6f 74     HTTP/1.1 404 Not
     4f1:	20 46 6f 75 6e 64 0d 0a 43 6f 6e 6e 65 63 74 69      Found..Connecti
     501:	6f 6e 3a 20 63 6c 6f 73 65 0d 0a 0d 0a 00           on: close.....

0000050f <_ZZ5setupE3__c_9>:
     50f:	66 6c 61 74 36 35 72 6f 75 74 65 72 00              flat65router.

0000051c <_ZZ5setupE3__c_8>:
     51c:	48 65 6c 6c 00                                      Hell.

00000521 <_ZZ5setupE3__c_7>:
     521:	47 72 6f 77 62 6f 78 20 73 75 63 63 65 73 73 66     Growbox successf
     531:	75 6c 6c 79 20 73 74 61 72 74 65 64 00              ully started.

0000053e <_ZZ5setupE3__c_6>:
     53e:	73 74 6f 72 61 67 65 00                             storage.

00000546 <_ZZ5setupE3__c_5>:
     546:	74 65 72 6d 6f 6d 65 74 65 72 00                    termometer.

00000551 <_ZZ5setupE3__c_4>:
     551:	63 6c 6f 63 6b 00                                   clock.

00000557 <_ZZ5setupE3__c_1>:
     557:	6e 6f 74 20 61 6c 6c 20 45 76 65 6e 74 73 20 69     not all Events i
     567:	6e 69 74 69 61 6c 69 7a 65 64 00                    nitialized.

00000572 <_ZZ5setupE3__c_0>:
     572:	6e 6f 74 20 61 6c 6c 20 45 72 72 6f 72 73 20 69     not all Errors i
     582:	6e 69 74 69 61 6c 69 7a 65 64 00                    nitialized.

0000058d <_ZZ5setupE3__c>:
     58d:	73 6f 66 74 77 61 72 65 20 63 6f 6e 66 69 67 75     software configu
     59d:	72 61 74 69 6f 6e 00                                ration.

000005a4 <_ZZL21printFatalErrorOnBootPK19__FlashStringHelperE3__c>:
     5a4:	46 61 74 61 6c 20 65 72 72 6f 72 3a 20 00           Fatal error: .

000005b2 <_ZZL17printStatusOnBootPK19__FlashStringHelperE3__c_0>:
     5b2:	2e 2e 2e 00                                         ....

000005b6 <_ZZL17printStatusOnBootPK19__FlashStringHelperE3__c>:
     5b6:	43 68 65 63 6b 69 6e 67 20 00                       Checking .

000005c0 <_ZZ15initLoggerModelvE3__c_14>:
     5c0:	55 6e 6b 6e 6f 77 6e 20 73 65 72 69 61 6c 20 63     Unknown serial c
     5d0:	6f 6d 6d 61 6e 64 00                                ommand.

000005d7 <_ZZ15initLoggerModelvE3__c_13>:
     5d7:	46 41 4e 20 74 75 72 6e 65 64 20 4f 4e 20 4d 41     FAN turned ON MA
     5e7:	58 20 73 70 65 65 64 00                             X speed.

000005ef <_ZZ15initLoggerModelvE3__c_12>:
     5ef:	46 41 4e 20 74 75 72 6e 65 64 20 4f 4e 20 4d 49     FAN turned ON MI
     5ff:	4e 20 73 70 65 65 64 00                             N speed.

00000607 <_ZZ15initLoggerModelvE3__c_11>:
     607:	46 41 4e 20 74 75 72 6e 65 64 20 4f 46 46 00        FAN turned OFF.

00000616 <_ZZ15initLoggerModelvE3__c_10>:
     616:	4c 49 47 48 54 20 74 75 72 6e 65 64 20 4f 4e 00     LIGHT turned ON.

00000626 <_ZZ15initLoggerModelvE3__c_9>:
     626:	4c 49 47 48 54 20 74 75 72 6e 65 64 20 4f 46 46     LIGHT turned OFF
	...

00000637 <_ZZ15initLoggerModelvE3__c_8>:
     637:	47 72 6f 77 62 6f 78 20 73 77 69 74 63 68 65 64     Growbox switched
     647:	20 74 6f 20 4e 49 47 48 54 20 6d 6f 64 65 00         to NIGHT mode.

00000656 <_ZZ15initLoggerModelvE3__c_7>:
     656:	47 72 6f 77 62 6f 78 20 73 77 69 74 63 68 65 64     Growbox switched
     666:	20 74 6f 20 44 41 59 20 6d 6f 64 65 00               to DAY mode.

00000673 <_ZZ15initLoggerModelvE3__c_6>:
     673:	52 45 53 54 41 52 54 45 44 00                       RESTARTED.

0000067d <_ZZ15initLoggerModelvE3__c_5>:
     67d:	46 49 52 53 54 20 53 54 41 52 54 55 50 00           FIRST STARTUP.

0000068b <_ZZ15initLoggerModelvE3__c_4>:
     68b:	45 72 72 6f 72 3a 20 4d 65 6d 6f 72 79 20 72 65     Error: Memory re
     69b:	6d 61 69 6e 65 64 20 6c 65 73 73 20 32 30 30 20     mained less 200 
     6ab:	62 79 74 65 73 00                                   bytes.

000006b1 <_ZZ15initLoggerModelvE3__c_3>:
     6b1:	45 72 72 6f 72 3a 20 54 65 72 6d 6f 6d 65 74 65     Error: Termomete
     6c1:	72 20 72 65 74 75 72 6e 65 64 20 43 52 49 54 49     r returned CRITI
     6d1:	43 41 4c 20 76 61 6c 75 65 00                       CAL value.

000006db <_ZZ15initLoggerModelvE3__c_2>:
     6db:	45 72 72 6f 72 3a 20 54 65 72 6d 6f 6d 65 74 65     Error: Termomete
     6eb:	72 20 72 65 74 75 72 6e 65 64 20 5a 45 52 4f 20     r returned ZERO 
     6fb:	76 61 6c 75 65 00                                   value.

00000701 <_ZZ15initLoggerModelvE3__c_1>:
     701:	45 72 72 6f 72 3a 20 54 65 72 6d 6f 6d 65 74 65     Error: Termomete
     711:	72 20 64 69 73 63 6f 6e 6e 65 63 74 65 64 00        r disconnected.

00000720 <_ZZ15initLoggerModelvE3__c_0>:
     720:	45 72 72 6f 72 3a 20 54 69 6d 65 72 20 6e 65 65     Error: Timer nee
     730:	64 73 20 73 79 6e 63 00                             ds sync.

00000738 <_ZZ15initLoggerModelvE3__c>:
     738:	45 72 72 6f 72 3a 20 54 69 6d 65 72 20 6e 6f 74     Error: Timer not
     748:	20 73 65 74 00                                       set.

0000074d <_ZL11dscrc_table>:
     74d:	00 5e bc e2 61 3f dd 83 c2 9c 7e 20 a3 fd 1f 41     .^..a?....~ ...A
     75d:	9d c3 21 7f fc a2 40 1e 5f 01 e3 bd 3e 60 82 dc     ..!...@._...>`..
     76d:	23 7d 9f c1 42 1c fe a0 e1 bf 5d 03 80 de 3c 62     #}..B.....]...<b
     77d:	be e0 02 5c df 81 63 3d 7c 22 c0 9e 1d 43 a1 ff     ...\..c=|"...C..
     78d:	46 18 fa a4 27 79 9b c5 84 da 38 66 e5 bb 59 07     F...'y....8f..Y.
     79d:	db 85 67 39 ba e4 06 58 19 47 a5 fb 78 26 c4 9a     ..g9...X.G..x&..
     7ad:	65 3b d9 87 04 5a b8 e6 a7 f9 1b 45 c6 98 7a 24     e;...Z.....E..z$
     7bd:	f8 a6 44 1a 99 c7 25 7b 3a 64 86 d8 5b 05 e7 b9     ..D...%{:d..[...
     7cd:	8c d2 30 6e ed b3 51 0f 4e 10 f2 ac 2f 71 93 cd     ..0n..Q.N.../q..
     7dd:	11 4f ad f3 70 2e cc 92 d3 8d 6f 31 b2 ec 0e 50     .O..p.....o1...P
     7ed:	af f1 13 4d ce 90 72 2c 6d 33 d1 8f 0c 52 b0 ee     ...M..r,m3...R..
     7fd:	32 6c 8e d0 53 0d ef b1 f0 ae 4c 12 91 cf 2d 73     2l..S.....L...-s
     80d:	ca 94 76 28 ab f5 17 49 08 56 b4 ea 69 37 d5 8b     ..v(...I.V..i7..
     81d:	57 09 eb b5 36 68 8a d4 95 cb 29 77 f4 aa 48 16     W...6h....)w..H.
     82d:	e9 b7 55 0b 88 d6 34 6a 2b 75 97 c9 4a 14 f6 a8     ..U...4j+u..J...
     83d:	74 2a c8 96 15 4b a9 f7 b6 e8 0a 54 d7 89 6b 35     t*...K.....T..k5

0000084d <port_to_mode_PGM>:
     84d:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000857 <port_to_output_PGM>:
     857:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000861 <port_to_input_PGM>:
     861:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000086b <digital_pin_to_port_PGM>:
     86b:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     87b:	03 03 03 03                                         ....

0000087f <digital_pin_to_bit_mask_PGM>:
     87f:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     88f:	04 08 10 20                                         ... 

00000893 <digital_pin_to_timer_PGM>:
     893:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     8a3:	00 00 00 00 00                                      .....

000008a8 <__ctors_start>:
     8a8:	00 05       	cpc	r16, r0
     8aa:	99 1f       	adc	r25, r25
     8ac:	6b 20       	and	r6, r11
     8ae:	72 20       	and	r7, r2
     8b0:	e6 23       	and	r30, r22
     8b2:	6a 27       	eor	r22, r26
     8b4:	3e 2b       	or	r19, r30
     8b6:	c5 35       	cpi	r28, 0x55	; 85

000008b8 <__ctors_end>:
     8b8:	64 20       	and	r6, r4

000008ba <__dtors_end>:
     8ba:	11 24       	eor	r1, r1
     8bc:	1f be       	out	0x3f, r1	; 63
     8be:	cf ef       	ldi	r28, 0xFF	; 255
     8c0:	d8 e0       	ldi	r29, 0x08	; 8
     8c2:	de bf       	out	0x3e, r29	; 62
     8c4:	cd bf       	out	0x3d, r28	; 61

000008c6 <__do_copy_data>:
     8c6:	11 e0       	ldi	r17, 0x01	; 1
     8c8:	a0 e0       	ldi	r26, 0x00	; 0
     8ca:	b1 e0       	ldi	r27, 0x01	; 1
     8cc:	e6 e2       	ldi	r30, 0x26	; 38
     8ce:	fc e7       	ldi	r31, 0x7C	; 124
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <.do_copy_data_start>

000008d2 <.do_copy_data_loop>:
     8d2:	05 90       	lpm	r0, Z+
     8d4:	0d 92       	st	X+, r0

000008d6 <.do_copy_data_start>:
     8d6:	ac 33       	cpi	r26, 0x3C	; 60
     8d8:	b1 07       	cpc	r27, r17
     8da:	d9 f7       	brne	.-10     	; 0x8d2 <.do_copy_data_loop>

000008dc <__do_clear_bss>:
     8dc:	13 e0       	ldi	r17, 0x03	; 3
     8de:	ac e3       	ldi	r26, 0x3C	; 60
     8e0:	b1 e0       	ldi	r27, 0x01	; 1
     8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <.do_clear_bss_start>

000008e4 <.do_clear_bss_loop>:
     8e4:	1d 92       	st	X+, r1

000008e6 <.do_clear_bss_start>:
     8e6:	af 3d       	cpi	r26, 0xDF	; 223
     8e8:	b1 07       	cpc	r27, r17
     8ea:	e1 f7       	brne	.-8      	; 0x8e4 <.do_clear_bss_loop>

000008ec <__do_global_ctors>:
     8ec:	18 e0       	ldi	r17, 0x08	; 8
     8ee:	c8 eb       	ldi	r28, 0xB8	; 184
     8f0:	d8 e0       	ldi	r29, 0x08	; 8
     8f2:	04 c0       	rjmp	.+8      	; 0x8fc <.do_global_ctors_start>

000008f4 <.do_global_ctors_loop>:
     8f4:	22 97       	sbiw	r28, 0x02	; 2
     8f6:	fe 01       	movw	r30, r28
     8f8:	0e 94 fa 3d 	call	0x7bf4	; 0x7bf4 <__tablejump__>

000008fc <.do_global_ctors_start>:
     8fc:	c8 3a       	cpi	r28, 0xA8	; 168
     8fe:	d1 07       	cpc	r29, r17
     900:	c9 f7       	brne	.-14     	; 0x8f4 <.do_global_ctors_loop>
     902:	0e 94 1b 36 	call	0x6c36	; 0x6c36 <main>
     906:	0c 94 06 3e 	jmp	0x7c0c	; 0x7c0c <__do_global_dtors>

0000090a <__bad_interrupt>:
     90a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000090e <strlen_P>:
     90e:	fc 01       	movw	r30, r24
     910:	05 90       	lpm	r0, Z+
     912:	00 20       	and	r0, r0
     914:	e9 f7       	brne	.-6      	; 0x910 <strlen_P+0x2>
     916:	80 95       	com	r24
     918:	90 95       	com	r25
     91a:	8e 0f       	add	r24, r30
     91c:	9f 1f       	adc	r25, r31
     91e:	08 95       	ret

00000920 <strncmp_P>:
     920:	fb 01       	movw	r30, r22
     922:	dc 01       	movw	r26, r24
     924:	41 50       	subi	r20, 0x01	; 1
     926:	50 40       	sbci	r21, 0x00	; 0
     928:	30 f0       	brcs	.+12     	; 0x936 <strncmp_P+0x16>
     92a:	8d 91       	ld	r24, X+
     92c:	05 90       	lpm	r0, Z+
     92e:	80 19       	sub	r24, r0
     930:	19 f4       	brne	.+6      	; 0x938 <strncmp_P+0x18>
     932:	00 20       	and	r0, r0
     934:	b9 f7       	brne	.-18     	; 0x924 <strncmp_P+0x4>
     936:	88 1b       	sub	r24, r24
     938:	99 0b       	sbc	r25, r25
     93a:	08 95       	ret

0000093c <memcpy>:
     93c:	fb 01       	movw	r30, r22
     93e:	dc 01       	movw	r26, r24
     940:	02 c0       	rjmp	.+4      	; 0x946 <memcpy+0xa>
     942:	01 90       	ld	r0, Z+
     944:	0d 92       	st	X+, r0
     946:	41 50       	subi	r20, 0x01	; 1
     948:	50 40       	sbci	r21, 0x00	; 0
     94a:	d8 f7       	brcc	.-10     	; 0x942 <memcpy+0x6>
     94c:	08 95       	ret

0000094e <strchr>:
     94e:	fc 01       	movw	r30, r24
     950:	81 91       	ld	r24, Z+
     952:	86 17       	cp	r24, r22
     954:	21 f0       	breq	.+8      	; 0x95e <strchr+0x10>
     956:	88 23       	and	r24, r24
     958:	d9 f7       	brne	.-10     	; 0x950 <strchr+0x2>
     95a:	99 27       	eor	r25, r25
     95c:	08 95       	ret
     95e:	31 97       	sbiw	r30, 0x01	; 1
     960:	cf 01       	movw	r24, r30
     962:	08 95       	ret

00000964 <strcpy>:
     964:	fb 01       	movw	r30, r22
     966:	dc 01       	movw	r26, r24
     968:	01 90       	ld	r0, Z+
     96a:	0d 92       	st	X+, r0
     96c:	00 20       	and	r0, r0
     96e:	e1 f7       	brne	.-8      	; 0x968 <strcpy+0x4>
     970:	08 95       	ret

00000972 <itoa>:
     972:	fb 01       	movw	r30, r22
     974:	9f 01       	movw	r18, r30
     976:	e8 94       	clt
     978:	42 30       	cpi	r20, 0x02	; 2
     97a:	c4 f0       	brlt	.+48     	; 0x9ac <itoa+0x3a>
     97c:	45 32       	cpi	r20, 0x25	; 37
     97e:	b4 f4       	brge	.+44     	; 0x9ac <itoa+0x3a>
     980:	4a 30       	cpi	r20, 0x0A	; 10
     982:	29 f4       	brne	.+10     	; 0x98e <itoa+0x1c>
     984:	97 fb       	bst	r25, 7
     986:	1e f4       	brtc	.+6      	; 0x98e <itoa+0x1c>
     988:	90 95       	com	r25
     98a:	81 95       	neg	r24
     98c:	9f 4f       	sbci	r25, 0xFF	; 255
     98e:	64 2f       	mov	r22, r20
     990:	77 27       	eor	r23, r23
     992:	0e 94 af 3d 	call	0x7b5e	; 0x7b5e <__udivmodhi4>
     996:	80 5d       	subi	r24, 0xD0	; 208
     998:	8a 33       	cpi	r24, 0x3A	; 58
     99a:	0c f0       	brlt	.+2      	; 0x99e <itoa+0x2c>
     99c:	89 5d       	subi	r24, 0xD9	; 217
     99e:	81 93       	st	Z+, r24
     9a0:	cb 01       	movw	r24, r22
     9a2:	00 97       	sbiw	r24, 0x00	; 0
     9a4:	a1 f7       	brne	.-24     	; 0x98e <itoa+0x1c>
     9a6:	16 f4       	brtc	.+4      	; 0x9ac <itoa+0x3a>
     9a8:	5d e2       	ldi	r21, 0x2D	; 45
     9aa:	51 93       	st	Z+, r21
     9ac:	10 82       	st	Z, r1
     9ae:	c9 01       	movw	r24, r18
     9b0:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <strrev>

000009b4 <utoa>:
     9b4:	fb 01       	movw	r30, r22
     9b6:	9f 01       	movw	r18, r30
     9b8:	42 30       	cpi	r20, 0x02	; 2
     9ba:	74 f0       	brlt	.+28     	; 0x9d8 <utoa+0x24>
     9bc:	45 32       	cpi	r20, 0x25	; 37
     9be:	64 f4       	brge	.+24     	; 0x9d8 <utoa+0x24>
     9c0:	64 2f       	mov	r22, r20
     9c2:	77 27       	eor	r23, r23
     9c4:	0e 94 af 3d 	call	0x7b5e	; 0x7b5e <__udivmodhi4>
     9c8:	80 5d       	subi	r24, 0xD0	; 208
     9ca:	8a 33       	cpi	r24, 0x3A	; 58
     9cc:	0c f0       	brlt	.+2      	; 0x9d0 <utoa+0x1c>
     9ce:	89 5d       	subi	r24, 0xD9	; 217
     9d0:	81 93       	st	Z+, r24
     9d2:	cb 01       	movw	r24, r22
     9d4:	00 97       	sbiw	r24, 0x00	; 0
     9d6:	a1 f7       	brne	.-24     	; 0x9c0 <utoa+0xc>
     9d8:	10 82       	st	Z, r1
     9da:	c9 01       	movw	r24, r18
     9dc:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <strrev>

000009e0 <strrev>:
     9e0:	dc 01       	movw	r26, r24
     9e2:	fc 01       	movw	r30, r24
     9e4:	67 2f       	mov	r22, r23
     9e6:	71 91       	ld	r23, Z+
     9e8:	77 23       	and	r23, r23
     9ea:	e1 f7       	brne	.-8      	; 0x9e4 <strrev+0x4>
     9ec:	32 97       	sbiw	r30, 0x02	; 2
     9ee:	04 c0       	rjmp	.+8      	; 0x9f8 <strrev+0x18>
     9f0:	7c 91       	ld	r23, X
     9f2:	6d 93       	st	X+, r22
     9f4:	70 83       	st	Z, r23
     9f6:	62 91       	ld	r22, -Z
     9f8:	ae 17       	cp	r26, r30
     9fa:	bf 07       	cpc	r27, r31
     9fc:	c8 f3       	brcs	.-14     	; 0x9f0 <strrev+0x10>
     9fe:	08 95       	ret

00000a00 <_GLOBAL__I_g_oneWirePin>:
#include "Global.h"

// Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)
OneWire g_oneWirePin(ONE_WIRE_PIN);
     a00:	8c e3       	ldi	r24, 0x3C	; 60
     a02:	91 e0       	ldi	r25, 0x01	; 1
     a04:	68 e0       	ldi	r22, 0x08	; 8
     a06:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <_ZN7OneWireC1Eh>

boolean g_isGrowboxStarted = false;
     a0a:	08 95       	ret

00000a0c <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord>:
    out += ' '; 
    return out;
  }

  static const __FlashStringHelper* getLogRecordDescription(LogRecord &logRecord) {
    byte data = (logRecord.data & B00111111);   
     a0c:	fc 01       	movw	r30, r24
     a0e:	24 81       	ldd	r18, Z+4	; 0x04
     a10:	42 2f       	mov	r20, r18
     a12:	4f 73       	andi	r20, 0x3F	; 63

    return out;
  }

  static boolean isEvent(const LogRecord &logRecord){
    return (logRecord.data & B11000000) == B00000000;
     a14:	82 2f       	mov	r24, r18
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	80 7c       	andi	r24, 0xC0	; 192
     a1a:	90 70       	andi	r25, 0x00	; 0
    return out;
  }

  static const __FlashStringHelper* getLogRecordDescription(LogRecord &logRecord) {
    byte data = (logRecord.data & B00111111);   
    if (isEvent(logRecord)){
     a1c:	00 97       	sbiw	r24, 0x00	; 0
     a1e:	91 f4       	brne	.+36     	; 0xa44 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x38>
  static Event* findByIndex(byte index){
    //Serial.print("search ev: ");    
    //Serial.println(index);
    // Serial.print("lastAddedEvent ev: ");
    //Serial.println(lastAddedEvent->description);
    Event* currentItemPtr = lastAddedEvent;
     a20:	e0 91 50 01 	lds	r30, 0x0150
     a24:	f0 91 51 01 	lds	r31, 0x0151
     a28:	07 c0       	rjmp	.+14     	; 0xa38 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x2c>
    while (currentItemPtr != 0){
      //Serial.println(currentItemPtr->description);
      if (currentItemPtr->index == index) {
     a2a:	82 81       	ldd	r24, Z+2	; 0x02
     a2c:	84 17       	cp	r24, r20
     a2e:	39 f0       	breq	.+14     	; 0xa3e <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x32>
        return currentItemPtr;
      }
      currentItemPtr = (Event*)currentItemPtr->nextEvent;
     a30:	80 81       	ld	r24, Z
     a32:	91 81       	ldd	r25, Z+1	; 0x01
     a34:	9c 01       	movw	r18, r24
     a36:	f9 01       	movw	r30, r18
    //Serial.print("search ev: ");    
    //Serial.println(index);
    // Serial.print("lastAddedEvent ev: ");
    //Serial.println(lastAddedEvent->description);
    Event* currentItemPtr = lastAddedEvent;
    while (currentItemPtr != 0){
     a38:	30 97       	sbiw	r30, 0x00	; 0
     a3a:	b9 f7       	brne	.-18     	; 0xa2a <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x1e>
     a3c:	29 c0       	rjmp	.+82     	; 0xa90 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x84>
      Event* foundItemPtr = Event::findByIndex(data);
      if (foundItemPtr == 0){
        return F("Unknown event");
      } 
      else {
        return foundItemPtr->description;
     a3e:	23 81       	ldd	r18, Z+3	; 0x03
     a40:	34 81       	ldd	r19, Z+4	; 0x04
     a42:	24 c0       	rjmp	.+72     	; 0xa8c <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x80>
      }
    } 
    else if (isTemperature(logRecord)){
     a44:	80 3c       	cpi	r24, 0xC0	; 192
     a46:	91 05       	cpc	r25, r1
     a48:	19 f4       	brne	.+6      	; 0xa50 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x44>
      return FS(S_Temperature);
     a4a:	2b e3       	ldi	r18, 0x3B	; 59
     a4c:	32 e0       	ldi	r19, 0x02	; 2
     a4e:	1e c0       	rjmp	.+60     	; 0xa8c <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x80>
    } 
    else if (isError(logRecord)){    
     a50:	80 34       	cpi	r24, 0x40	; 64
     a52:	91 05       	cpc	r25, r1
     a54:	c9 f4       	brne	.+50     	; 0xa88 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x7c>
      byte sequence = (data & B00001111); 
     a56:	52 2f       	mov	r21, r18
     a58:	5f 70       	andi	r21, 0x0F	; 15
      byte sequenceSize = (data & B00110000)>>4; 
     a5a:	42 95       	swap	r20
     a5c:	4f 70       	andi	r20, 0x0F	; 15
    this->sequenceSize = sequenceSize;
    this->description = description;
  }
  
  static Error* findByIndex(byte sequence, byte sequenceSize){
    Error* currentItemPtr = lastAddedItem;
     a5e:	e0 91 4e 01 	lds	r30, 0x014E
     a62:	f0 91 4f 01 	lds	r31, 0x014F
     a66:	0a c0       	rjmp	.+20     	; 0xa7c <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x70>
    while (currentItemPtr != 0){
      if (currentItemPtr->sequence == sequence && currentItemPtr->sequenceSize == sequenceSize) {
     a68:	82 81       	ldd	r24, Z+2	; 0x02
     a6a:	85 17       	cp	r24, r21
     a6c:	19 f4       	brne	.+6      	; 0xa74 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x68>
     a6e:	83 81       	ldd	r24, Z+3	; 0x03
     a70:	84 17       	cp	r24, r20
     a72:	39 f0       	breq	.+14     	; 0xa82 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x76>
        return currentItemPtr;
      }
      currentItemPtr = (Error*)currentItemPtr->nextError;
     a74:	80 81       	ld	r24, Z
     a76:	91 81       	ldd	r25, Z+1	; 0x01
     a78:	9c 01       	movw	r18, r24
     a7a:	f9 01       	movw	r30, r18
    this->description = description;
  }
  
  static Error* findByIndex(byte sequence, byte sequenceSize){
    Error* currentItemPtr = lastAddedItem;
    while (currentItemPtr != 0){
     a7c:	30 97       	sbiw	r30, 0x00	; 0
     a7e:	a1 f7       	brne	.-24     	; 0xa68 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x5c>
     a80:	0a c0       	rjmp	.+20     	; 0xa96 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x8a>
      Error* foundItemPtr = Error::findByIndex(sequence, sequenceSize);
      if (foundItemPtr == 0){
        return F("Unknown error");
      } 
      else {
        return foundItemPtr->description;
     a82:	24 81       	ldd	r18, Z+4	; 0x04
     a84:	35 81       	ldd	r19, Z+5	; 0x05
     a86:	02 c0       	rjmp	.+4      	; 0xa8c <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x80>
      }
    } 
    else {
      return F("Unknown");
     a88:	2d eb       	ldi	r18, 0xBD	; 189
     a8a:	34 e0       	ldi	r19, 0x04	; 4
    }
  }
     a8c:	c9 01       	movw	r24, r18
     a8e:	08 95       	ret
  static const __FlashStringHelper* getLogRecordDescription(LogRecord &logRecord) {
    byte data = (logRecord.data & B00111111);   
    if (isEvent(logRecord)){
      Event* foundItemPtr = Event::findByIndex(data);
      if (foundItemPtr == 0){
        return F("Unknown event");
     a90:	23 ed       	ldi	r18, 0xD3	; 211
     a92:	34 e0       	ldi	r19, 0x04	; 4
     a94:	fb cf       	rjmp	.-10     	; 0xa8c <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x80>
    else if (isError(logRecord)){    
      byte sequence = (data & B00001111); 
      byte sequenceSize = (data & B00110000)>>4; 
      Error* foundItemPtr = Error::findByIndex(sequence, sequenceSize);
      if (foundItemPtr == 0){
        return F("Unknown error");
     a96:	25 ec       	ldi	r18, 0xC5	; 197
     a98:	34 e0       	ldi	r19, 0x04	; 4
     a9a:	f8 cf       	rjmp	.-16     	; 0xa8c <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x80>

00000a9c <_ZN10GB_Storage5writeEjPKvh>:
    else {
      return 0xFF;
    }
  }

  static void write(word address, const void* data, const byte sizeofData) {
     a9c:	af 92       	push	r10
     a9e:	bf 92       	push	r11
     aa0:	df 92       	push	r13
     aa2:	ef 92       	push	r14
     aa4:	ff 92       	push	r15
     aa6:	0f 93       	push	r16
     aa8:	1f 93       	push	r17
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	ec 01       	movw	r28, r24
     ab0:	5b 01       	movw	r10, r22
     ab2:	00 e0       	ldi	r16, 0x00	; 0
     ab4:	10 e0       	ldi	r17, 0x00	; 0
    for (word c = 0; c < sizeofData; c++){
     ab6:	e4 2e       	mov	r14, r20
     ab8:	ff 24       	eor	r15, r15
     aba:	2a c0       	rjmp	.+84     	; 0xb10 <_ZN10GB_Storage5writeEjPKvh+0x74>
      byte value = ((byte*)data)[c];
     abc:	f5 01       	movw	r30, r10
     abe:	e0 0f       	add	r30, r16
     ac0:	f1 1f       	adc	r31, r17
     ac2:	d0 80       	ld	r13, Z
      return true;
    return false;
  }

  static void write(const word address, const byte data) {
    if (address >= CAPACITY){
     ac4:	80 e1       	ldi	r24, 0x10	; 16
     ac6:	c0 30       	cpi	r28, 0x00	; 0
     ac8:	d8 07       	cpc	r29, r24
     aca:	f8 f4       	brcc	.+62     	; 0xb0a <_ZN10GB_Storage5writeEjPKvh+0x6e>
      return;
    }
    Wire.beginTransmission(AT24C32);
     acc:	8c ea       	ldi	r24, 0xAC	; 172
     ace:	92 e0       	ldi	r25, 0x02	; 2
     ad0:	60 e5       	ldi	r22, 0x50	; 80
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	0e 94 30 27 	call	0x4e60	; 0x4e60 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((byte)(address >> 8)); // MSB
     ad8:	8c ea       	ldi	r24, 0xAC	; 172
     ada:	92 e0       	ldi	r25, 0x02	; 2
     adc:	6d 2f       	mov	r22, r29
     ade:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <_ZN7TwoWire5writeEh>
    Wire.write((byte)(address & 0xFF)); // LSB
     ae2:	8c ea       	ldi	r24, 0xAC	; 172
     ae4:	92 e0       	ldi	r25, 0x02	; 2
     ae6:	6c 2f       	mov	r22, r28
     ae8:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <_ZN7TwoWire5writeEh>
    Wire.write(data);
     aec:	8c ea       	ldi	r24, 0xAC	; 172
     aee:	92 e0       	ldi	r25, 0x02	; 2
     af0:	6d 2d       	mov	r22, r13
     af2:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <_ZN7TwoWire5writeEh>
    Wire.endTransmission();  
     af6:	8c ea       	ldi	r24, 0xAC	; 172
     af8:	92 e0       	ldi	r25, 0x02	; 2
     afa:	0e 94 f5 27 	call	0x4fea	; 0x4fea <_ZN7TwoWire15endTransmissionEv>
    delay(10);  // http://www.hobbytronics.co.uk/arduino-external-eeprom
     afe:	6a e0       	ldi	r22, 0x0A	; 10
     b00:	70 e0       	ldi	r23, 0x00	; 0
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	0e 94 1f 32 	call	0x643e	; 0x643e <delay>
      return 0xFF;
    }
  }

  static void write(word address, const void* data, const byte sizeofData) {
    for (word c = 0; c < sizeofData; c++){
     b0a:	0f 5f       	subi	r16, 0xFF	; 255
     b0c:	1f 4f       	sbci	r17, 0xFF	; 255
     b0e:	21 96       	adiw	r28, 0x01	; 1
     b10:	0e 15       	cp	r16, r14
     b12:	1f 05       	cpc	r17, r15
     b14:	98 f2       	brcs	.-90     	; 0xabc <_ZN10GB_Storage5writeEjPKvh+0x20>
      byte value = ((byte*)data)[c];
      write(address + c, value);
    }
  }
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	1f 91       	pop	r17
     b1c:	0f 91       	pop	r16
     b1e:	ff 90       	pop	r15
     b20:	ef 90       	pop	r14
     b22:	df 90       	pop	r13
     b24:	bf 90       	pop	r11
     b26:	af 90       	pop	r10
     b28:	08 95       	ret

00000b2a <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord>:

  /////////////////////////////////////////////////////////////////////
  //                            LOG RECORDS                          //
  /////////////////////////////////////////////////////////////////////

  static boolean storeLogRecord(LogRecord &logRecord){ 
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	ec 01       	movw	r28, r24
    boolean storeLog = g_isGrowboxStarted && isBootRecordCorrect() && bootRecord.boolPreferencies.isLoggerEnabled && GB_Storage::isPresent(); // TODO check in another places
     b30:	80 91 4a 01 	lds	r24, 0x014A
     b34:	88 23       	and	r24, r24
     b36:	09 f4       	brne	.+2      	; 0xb3a <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0x10>
     b38:	52 c0       	rjmp	.+164    	; 0xbde <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb4>
  }

private :

  static boolean isBootRecordCorrect(){ // TODO rename it
    return (bootRecord.first_magic == MAGIC_NUMBER) && (bootRecord.last_magic == MAGIC_NUMBER);
     b3a:	80 91 c1 01 	lds	r24, 0x01C1
     b3e:	90 91 c2 01 	lds	r25, 0x01C2
     b42:	85 55       	subi	r24, 0x55	; 85
     b44:	9a 4a       	sbci	r25, 0xAA	; 170
     b46:	09 f0       	breq	.+2      	; 0xb4a <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0x20>
     b48:	4a c0       	rjmp	.+148    	; 0xbde <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb4>
     b4a:	80 91 df 01 	lds	r24, 0x01DF
     b4e:	90 91 e0 01 	lds	r25, 0x01E0
     b52:	85 55       	subi	r24, 0x55	; 85
     b54:	9a 4a       	sbci	r25, 0xAA	; 170
     b56:	09 f0       	breq	.+2      	; 0xb5a <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0x30>
     b58:	42 c0       	rjmp	.+132    	; 0xbde <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb4>
  /////////////////////////////////////////////////////////////////////
  //                            LOG RECORDS                          //
  /////////////////////////////////////////////////////////////////////

  static boolean storeLogRecord(LogRecord &logRecord){ 
    boolean storeLog = g_isGrowboxStarted && isBootRecordCorrect() && bootRecord.boolPreferencies.isLoggerEnabled && GB_Storage::isPresent(); // TODO check in another places
     b5a:	80 91 cd 01 	lds	r24, 0x01CD
     b5e:	86 95       	lsr	r24
     b60:	83 70       	andi	r24, 0x03	; 3
     b62:	e9 f1       	breq	.+122    	; 0xbde <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb4>
  static const int AT24C32 = 0x50; // External EEPROM I2C address
public:
  static const word CAPACITY = 0x1000; // 4K byte = 32K bit

  static boolean isPresent(void) {     // check if the device is present
    Wire.beginTransmission(AT24C32);
     b64:	8c ea       	ldi	r24, 0xAC	; 172
     b66:	92 e0       	ldi	r25, 0x02	; 2
     b68:	60 e5       	ldi	r22, 0x50	; 80
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	0e 94 30 27 	call	0x4e60	; 0x4e60 <_ZN7TwoWire17beginTransmissionEi>
    if (Wire.endTransmission() == 0)
     b70:	8c ea       	ldi	r24, 0xAC	; 172
     b72:	92 e0       	ldi	r25, 0x02	; 2
     b74:	0e 94 f5 27 	call	0x4fea	; 0x4fea <_ZN7TwoWire15endTransmissionEv>
     b78:	88 23       	and	r24, r24
     b7a:	89 f5       	brne	.+98     	; 0xbde <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb4>
    if (!storeLog){
      return false;
    }
    GB_Storage::write(bootRecord.nextLogRecordAddress, &logRecord, sizeof(LogRecord));
     b7c:	80 91 cb 01 	lds	r24, 0x01CB
     b80:	90 91 cc 01 	lds	r25, 0x01CC
     b84:	be 01       	movw	r22, r28
     b86:	45 e0       	ldi	r20, 0x05	; 5
     b88:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_ZN10GB_Storage5writeEjPKvh>
  static boolean isBootRecordCorrect(){ // TODO rename it
    return (bootRecord.first_magic == MAGIC_NUMBER) && (bootRecord.last_magic == MAGIC_NUMBER);
  }

  static void increaseLogPointer(){
    bootRecord.nextLogRecordAddress += sizeof(LogRecord); 
     b8c:	80 91 cb 01 	lds	r24, 0x01CB
     b90:	90 91 cc 01 	lds	r25, 0x01CC
     b94:	05 96       	adiw	r24, 0x05	; 5
     b96:	90 93 cc 01 	sts	0x01CC, r25
     b9a:	80 93 cb 01 	sts	0x01CB, r24
    if (bootRecord.nextLogRecordAddress >= (sizeof(BootRecord) + LOG_RECORD_OVERFLOW_OFFSET)){
     b9e:	8c 5f       	subi	r24, 0xFC	; 252
     ba0:	9f 40       	sbci	r25, 0x0F	; 15
     ba2:	a0 f0       	brcs	.+40     	; 0xbcc <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xa2>
      bootRecord.nextLogRecordAddress = sizeof(BootRecord);
     ba4:	80 e2       	ldi	r24, 0x20	; 32
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	90 93 cc 01 	sts	0x01CC, r25
     bac:	80 93 cb 01 	sts	0x01CB, r24
      if (!bootRecord.boolPreferencies.isLogOverflow){
     bb0:	80 91 cd 01 	lds	r24, 0x01CD
     bb4:	80 fd       	sbrc	r24, 0
     bb6:	0a c0       	rjmp	.+20     	; 0xbcc <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xa2>
        bootRecord.boolPreferencies.isLogOverflow = true;
     bb8:	81 60       	ori	r24, 0x01	; 1
     bba:	80 93 cd 01 	sts	0x01CD, r24
        GB_Storage::write(OFFSETOF(BootRecord, boolPreferencies), &(bootRecord.boolPreferencies), sizeof(bootRecord.boolPreferencies)); 
     bbe:	8c e0       	ldi	r24, 0x0C	; 12
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	6d ec       	ldi	r22, 0xCD	; 205
     bc4:	71 e0       	ldi	r23, 0x01	; 1
     bc6:	41 e0       	ldi	r20, 0x01	; 1
     bc8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_ZN10GB_Storage5writeEjPKvh>
      }
    }
    GB_Storage::write(OFFSETOF(BootRecord, nextLogRecordAddress), &(bootRecord.nextLogRecordAddress), sizeof(bootRecord.nextLogRecordAddress)); 
     bcc:	8a e0       	ldi	r24, 0x0A	; 10
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	6b ec       	ldi	r22, 0xCB	; 203
     bd2:	71 e0       	ldi	r23, 0x01	; 1
     bd4:	42 e0       	ldi	r20, 0x02	; 2
     bd6:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_ZN10GB_Storage5writeEjPKvh>
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	01 c0       	rjmp	.+2      	; 0xbe0 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb6>
    if (!storeLog){
      return false;
    }
    GB_Storage::write(bootRecord.nextLogRecordAddress, &logRecord, sizeof(LogRecord));
    increaseLogPointer();
    return true;
     bde:	80 e0       	ldi	r24, 0x00	; 0
  }
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	08 95       	ret

00000be6 <_ZN10GB_Storage4readEj>:
    Wire.write(data);
    Wire.endTransmission();  
    delay(10);  // http://www.hobbytronics.co.uk/arduino-external-eeprom
  }

  static byte read(word address) {
     be6:	0f 93       	push	r16
     be8:	1f 93       	push	r17
     bea:	8c 01       	movw	r16, r24
    Wire.beginTransmission(AT24C32);
     bec:	8c ea       	ldi	r24, 0xAC	; 172
     bee:	92 e0       	ldi	r25, 0x02	; 2
     bf0:	60 e5       	ldi	r22, 0x50	; 80
     bf2:	70 e0       	ldi	r23, 0x00	; 0
     bf4:	0e 94 30 27 	call	0x4e60	; 0x4e60 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((byte)(address >> 8)); // MSB
     bf8:	8c ea       	ldi	r24, 0xAC	; 172
     bfa:	92 e0       	ldi	r25, 0x02	; 2
     bfc:	61 2f       	mov	r22, r17
     bfe:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <_ZN7TwoWire5writeEh>
    Wire.write((byte)(address & 0xFF)); // LSB
     c02:	8c ea       	ldi	r24, 0xAC	; 172
     c04:	92 e0       	ldi	r25, 0x02	; 2
     c06:	60 2f       	mov	r22, r16
     c08:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <_ZN7TwoWire5writeEh>
    Wire.endTransmission();
     c0c:	8c ea       	ldi	r24, 0xAC	; 172
     c0e:	92 e0       	ldi	r25, 0x02	; 2
     c10:	0e 94 f5 27 	call	0x4fea	; 0x4fea <_ZN7TwoWire15endTransmissionEv>
    delay(10);  // http://www.hobbytronics.co.uk/arduino-external-eeprom
     c14:	6a e0       	ldi	r22, 0x0A	; 10
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	0e 94 1f 32 	call	0x643e	; 0x643e <delay>
    Wire.requestFrom(AT24C32, 1);
     c20:	8c ea       	ldi	r24, 0xAC	; 172
     c22:	92 e0       	ldi	r25, 0x02	; 2
     c24:	60 e5       	ldi	r22, 0x50	; 80
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	41 e0       	ldi	r20, 0x01	; 1
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	0e 94 06 28 	call	0x500c	; 0x500c <_ZN7TwoWire11requestFromEii>
    if (Wire.available()) {
     c30:	8c ea       	ldi	r24, 0xAC	; 172
     c32:	92 e0       	ldi	r25, 0x02	; 2
     c34:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <_ZN7TwoWire9availableEv>
     c38:	89 2b       	or	r24, r25
     c3a:	11 f4       	brne	.+4      	; 0xc40 <_ZN10GB_Storage4readEj+0x5a>
     c3c:	8f ef       	ldi	r24, 0xFF	; 255
     c3e:	04 c0       	rjmp	.+8      	; 0xc48 <_ZN10GB_Storage4readEj+0x62>
      return Wire.read();
     c40:	8c ea       	ldi	r24, 0xAC	; 172
     c42:	92 e0       	ldi	r25, 0x02	; 2
     c44:	0e 94 43 27 	call	0x4e86	; 0x4e86 <_ZN7TwoWire4readEv>
    } 
    else {
      return 0xFF;
    }
  }
     c48:	1f 91       	pop	r17
     c4a:	0f 91       	pop	r16
     c4c:	08 95       	ret

00000c4e <_ZL17flashStringCharAtPKcih>:

static int flashStringLength(const char PROGMEM* pstr){ 
  return strlen_P(pstr);
}

static char flashStringCharAt(const char PROGMEM* pstr, int index, boolean checkOverflow = true){ 
     c4e:	0f 93       	push	r16
     c50:	1f 93       	push	r17
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	ec 01       	movw	r28, r24
     c58:	8b 01       	movw	r16, r22
  if (checkOverflow){
     c5a:	44 23       	and	r20, r20
     c5c:	39 f0       	breq	.+14     	; 0xc6c <_ZL17flashStringCharAtPKcih+0x1e>
  /////////////////////////////////////////////////////////////////////
  //                         FALASH STRINGS                          //
  /////////////////////////////////////////////////////////////////////

static int flashStringLength(const char PROGMEM* pstr){ 
  return strlen_P(pstr);
     c5e:	0e 94 87 04 	call	0x90e	; 0x90e <strlen_P>
}

static char flashStringCharAt(const char PROGMEM* pstr, int index, boolean checkOverflow = true){ 
  if (checkOverflow){
    if (index >= flashStringLength(pstr)){
     c62:	08 17       	cp	r16, r24
     c64:	19 07       	cpc	r17, r25
     c66:	14 f0       	brlt	.+4      	; 0xc6c <_ZL17flashStringCharAtPKcih+0x1e>
     c68:	8f ef       	ldi	r24, 0xFF	; 255
     c6a:	04 c0       	rjmp	.+8      	; 0xc74 <_ZL17flashStringCharAtPKcih+0x26>
      return 0xFF; 
    }
  }
  return pgm_read_byte(pstr+index);
     c6c:	c0 0f       	add	r28, r16
     c6e:	d1 1f       	adc	r29, r17
     c70:	fe 01       	movw	r30, r28
     c72:	84 91       	lpm	r24, Z+
}
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	08 95       	ret

00000c7e <_ZL15flashStringLoadPKc>:
    }
  }
  return true; 
}

static String flashStringLoad(const char PROGMEM* pstr){
     c7e:	cf 92       	push	r12
     c80:	df 92       	push	r13
     c82:	ef 92       	push	r14
     c84:	ff 92       	push	r15
     c86:	0f 93       	push	r16
     c88:	1f 93       	push	r17
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	f8 2e       	mov	r15, r24
     c90:	e9 2e       	mov	r14, r25
     c92:	6b 01       	movw	r12, r22
  /////////////////////////////////////////////////////////////////////
  //                         FALASH STRINGS                          //
  /////////////////////////////////////////////////////////////////////

static int flashStringLength(const char PROGMEM* pstr){ 
  return strlen_P(pstr);
     c94:	cb 01       	movw	r24, r22
     c96:	0e 94 87 04 	call	0x90e	; 0x90e <strlen_P>
     c9a:	18 2f       	mov	r17, r24
     c9c:	09 2f       	mov	r16, r25
     c9e:	c8 2f       	mov	r28, r24
     ca0:	d9 2f       	mov	r29, r25
}

static String flashStringLoad(const char PROGMEM* pstr){
  int length = flashStringLength(pstr);

  String str;
     ca2:	8f 2d       	mov	r24, r15
     ca4:	9e 2d       	mov	r25, r14
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	71 e0       	ldi	r23, 0x01	; 1
     caa:	0e 94 95 39 	call	0x732a	; 0x732a <_ZN6StringC1EPKc>
  str.reserve(length);
     cae:	8f 2d       	mov	r24, r15
     cb0:	9e 2d       	mov	r25, r14
     cb2:	61 2f       	mov	r22, r17
     cb4:	70 2f       	mov	r23, r16
     cb6:	0e 94 5d 38 	call	0x70ba	; 0x70ba <_ZN6String7reserveEj>
     cba:	00 e0       	ldi	r16, 0x00	; 0
     cbc:	10 e0       	ldi	r17, 0x00	; 0
     cbe:	0c c0       	rjmp	.+24     	; 0xcd8 <_ZL15flashStringLoadPKc+0x5a>
  for (int i = 0; i< length; i++){
    str += flashStringCharAt(pstr, i, false);
     cc0:	c6 01       	movw	r24, r12
     cc2:	b8 01       	movw	r22, r16
     cc4:	40 e0       	ldi	r20, 0x00	; 0
     cc6:	0e 94 27 06 	call	0xc4e	; 0xc4e <_ZL17flashStringCharAtPKcih>
     cca:	68 2f       	mov	r22, r24
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
     ccc:	8f 2d       	mov	r24, r15
     cce:	9e 2d       	mov	r25, r14
     cd0:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN6String6concatEc>
static String flashStringLoad(const char PROGMEM* pstr){
  int length = flashStringLength(pstr);

  String str;
  str.reserve(length);
  for (int i = 0; i< length; i++){
     cd4:	0f 5f       	subi	r16, 0xFF	; 255
     cd6:	1f 4f       	sbci	r17, 0xFF	; 255
     cd8:	0c 17       	cp	r16, r28
     cda:	1d 07       	cpc	r17, r29
     cdc:	8c f3       	brlt	.-30     	; 0xcc0 <_ZL15flashStringLoadPKc+0x42>
    str += flashStringCharAt(pstr, i, false);
  }
  return str; 
}
     cde:	8f 2d       	mov	r24, r15
     ce0:	9e 2d       	mov	r25, r14
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	1f 91       	pop	r17
     ce8:	0f 91       	pop	r16
     cea:	ff 90       	pop	r15
     cec:	ef 90       	pop	r14
     cee:	df 90       	pop	r13
     cf0:	cf 90       	pop	r12
     cf2:	08 95       	ret

00000cf4 <_ZN13GB_PrintDirty6getHEXEhh>:
    }
    out += number;
    return out.substring(out.length()-numberOfDigits);
  }

  static String getHEX(byte number, boolean addPrefix = false){
     cf4:	bf 92       	push	r11
     cf6:	cf 92       	push	r12
     cf8:	df 92       	push	r13
     cfa:	ef 92       	push	r14
     cfc:	ff 92       	push	r15
     cfe:	0f 93       	push	r16
     d00:	1f 93       	push	r17
     d02:	df 93       	push	r29
     d04:	cf 93       	push	r28
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
     d0a:	6c 97       	sbiw	r28, 0x1c	; 28
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	cd bf       	out	0x3d, r28	; 61
     d16:	d8 2e       	mov	r13, r24
     d18:	c9 2e       	mov	r12, r25
     d1a:	16 2f       	mov	r17, r22
     d1c:	b4 2e       	mov	r11, r20
    String out(number, HEX);
     d1e:	40 e1       	ldi	r20, 0x10	; 16
     d20:	0e 94 c8 39 	call	0x7390	; 0x7390 <_ZN6StringC1Ehh>
    out.toUpperCase();
     d24:	8d 2d       	mov	r24, r13
     d26:	9c 2d       	mov	r25, r12
     d28:	0e 94 11 38 	call	0x7022	; 0x7022 <_ZN6String11toUpperCaseEv>
    if(number < 0x10){
     d2c:	10 31       	cpi	r17, 0x10	; 16
     d2e:	f8 f4       	brcc	.+62     	; 0xd6e <_ZN13GB_PrintDirty6getHEXEhh+0x7a>
      out = String('0') + out;
     d30:	7e 01       	movw	r14, r28
     d32:	08 94       	sec
     d34:	e1 1c       	adc	r14, r1
     d36:	f1 1c       	adc	r15, r1
     d38:	c7 01       	movw	r24, r14
     d3a:	60 e3       	ldi	r22, 0x30	; 48
     d3c:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <_ZN6StringC1Ec>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
     d40:	8e 01       	movw	r16, r28
     d42:	08 5f       	subi	r16, 0xF8	; 248
     d44:	1f 4f       	sbci	r17, 0xFF	; 255
     d46:	c8 01       	movw	r24, r16
     d48:	b7 01       	movw	r22, r14
     d4a:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <_ZN6StringC2ERKS_>
     d4e:	c8 01       	movw	r24, r16
     d50:	6d 2d       	mov	r22, r13
     d52:	7c 2d       	mov	r23, r12
     d54:	0e 94 5e 39 	call	0x72bc	; 0x72bc <_ZplRK15StringSumHelperRK6String>
     d58:	bc 01       	movw	r22, r24
     d5a:	8d 2d       	mov	r24, r13
     d5c:	9c 2d       	mov	r25, r12
     d5e:	0e 94 66 3a 	call	0x74cc	; 0x74cc <_ZN6StringaSERKS_>
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
{
     d62:	c8 01       	movw	r24, r16
     d64:	0e 94 8e 3a 	call	0x751c	; 0x751c <_ZN6StringD2Ev>
     d68:	c7 01       	movw	r24, r14
     d6a:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
    }
    if (addPrefix){
     d6e:	bb 20       	and	r11, r11
     d70:	09 f1       	breq	.+66     	; 0xdb4 <_ZN13GB_PrintDirty6getHEXEhh+0xc0>
      out = flashStringLoad(S_0x) + out;
     d72:	8f e0       	ldi	r24, 0x0F	; 15
     d74:	e8 2e       	mov	r14, r24
     d76:	f1 2c       	mov	r15, r1
     d78:	ec 0e       	add	r14, r28
     d7a:	fd 1e       	adc	r15, r29
     d7c:	c7 01       	movw	r24, r14
     d7e:	64 e7       	ldi	r22, 0x74	; 116
     d80:	70 e0       	ldi	r23, 0x00	; 0
     d82:	0e 94 3f 06 	call	0xc7e	; 0xc7e <_ZL15flashStringLoadPKc>
public:
	StringSumHelper(const String &s) : String(s) {}
     d86:	8e 01       	movw	r16, r28
     d88:	0a 5e       	subi	r16, 0xEA	; 234
     d8a:	1f 4f       	sbci	r17, 0xFF	; 255
     d8c:	c8 01       	movw	r24, r16
     d8e:	b7 01       	movw	r22, r14
     d90:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <_ZN6StringC2ERKS_>
     d94:	c8 01       	movw	r24, r16
     d96:	6d 2d       	mov	r22, r13
     d98:	7c 2d       	mov	r23, r12
     d9a:	0e 94 5e 39 	call	0x72bc	; 0x72bc <_ZplRK15StringSumHelperRK6String>
     d9e:	bc 01       	movw	r22, r24
     da0:	8d 2d       	mov	r24, r13
     da2:	9c 2d       	mov	r25, r12
     da4:	0e 94 66 3a 	call	0x74cc	; 0x74cc <_ZN6StringaSERKS_>
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
{
     da8:	c8 01       	movw	r24, r16
     daa:	0e 94 8e 3a 	call	0x751c	; 0x751c <_ZN6StringD2Ev>
     dae:	c7 01       	movw	r24, r14
     db0:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
    }
    return out;
  }
     db4:	8d 2d       	mov	r24, r13
     db6:	9c 2d       	mov	r25, r12
     db8:	6c 96       	adiw	r28, 0x1c	; 28
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	cd bf       	out	0x3d, r28	; 61
     dc4:	cf 91       	pop	r28
     dc6:	df 91       	pop	r29
     dc8:	1f 91       	pop	r17
     dca:	0f 91       	pop	r16
     dcc:	ff 90       	pop	r15
     dce:	ef 90       	pop	r14
     dd0:	df 90       	pop	r13
     dd2:	cf 90       	pop	r12
     dd4:	bf 90       	pop	r11
     dd6:	08 95       	ret

00000dd8 <_ZL21flashStringStartsWithRK6StringPKc>:
    return false;
  }
  return (strncmp_P(cstr, pstr, cstr_length) == 0); // check this method
}

static boolean flashStringStartsWith(const String &str, const char PROGMEM* pstr){ 
     dd8:	af 92       	push	r10
     dda:	bf 92       	push	r11
     ddc:	cf 92       	push	r12
     dde:	df 92       	push	r13
     de0:	ef 92       	push	r14
     de2:	ff 92       	push	r15
     de4:	1f 93       	push	r17
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	5c 01       	movw	r10, r24
     dec:	6b 01       	movw	r12, r22
  /////////////////////////////////////////////////////////////////////
  //                         FALASH STRINGS                          //
  /////////////////////////////////////////////////////////////////////

static int flashStringLength(const char PROGMEM* pstr){ 
  return strlen_P(pstr);
     dee:	cb 01       	movw	r24, r22
     df0:	0e 94 87 04 	call	0x90e	; 0x90e <strlen_P>
     df4:	7c 01       	movw	r14, r24
  return (strncmp_P(cstr, pstr, cstr_length) == 0); // check this method
}

static boolean flashStringStartsWith(const String &str, const char PROGMEM* pstr){ 
  int length = flashStringLength(pstr);
  if (length > str.length()) {
     df6:	f5 01       	movw	r30, r10
     df8:	84 81       	ldd	r24, Z+4	; 0x04
     dfa:	95 81       	ldd	r25, Z+5	; 0x05
     dfc:	8e 15       	cp	r24, r14
     dfe:	9f 05       	cpc	r25, r15
     e00:	a8 f0       	brcs	.+42     	; 0xe2c <_ZL21flashStringStartsWithRK6StringPKc+0x54>
     e02:	c0 e0       	ldi	r28, 0x00	; 0
     e04:	d0 e0       	ldi	r29, 0x00	; 0
     e06:	0d c0       	rjmp	.+26     	; 0xe22 <_ZL21flashStringStartsWithRK6StringPKc+0x4a>
    return false; 
  }
  for (int i = 0; i < length; i++){
    if (flashStringCharAt(pstr, i, false) != str[i]){
     e08:	c6 01       	movw	r24, r12
     e0a:	be 01       	movw	r22, r28
     e0c:	40 e0       	ldi	r20, 0x00	; 0
     e0e:	0e 94 27 06 	call	0xc4e	; 0xc4e <_ZL17flashStringCharAtPKcih>
     e12:	18 2f       	mov	r17, r24
     e14:	c5 01       	movw	r24, r10
     e16:	be 01       	movw	r22, r28
     e18:	0e 94 00 38 	call	0x7000	; 0x7000 <_ZNK6StringixEj>
     e1c:	18 17       	cp	r17, r24
     e1e:	31 f4       	brne	.+12     	; 0xe2c <_ZL21flashStringStartsWithRK6StringPKc+0x54>
static boolean flashStringStartsWith(const String &str, const char PROGMEM* pstr){ 
  int length = flashStringLength(pstr);
  if (length > str.length()) {
    return false; 
  }
  for (int i = 0; i < length; i++){
     e20:	21 96       	adiw	r28, 0x01	; 1
     e22:	ce 15       	cp	r28, r14
     e24:	df 05       	cpc	r29, r15
     e26:	84 f3       	brlt	.-32     	; 0xe08 <_ZL21flashStringStartsWithRK6StringPKc+0x30>
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	01 c0       	rjmp	.+2      	; 0xe2e <_ZL21flashStringStartsWithRK6StringPKc+0x56>
     e2c:	80 e0       	ldi	r24, 0x00	; 0
    if (flashStringCharAt(pstr, i, false) != str[i]){
      return false;
    }
  }
  return true; 
}
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	1f 91       	pop	r17
     e34:	ff 90       	pop	r15
     e36:	ef 90       	pop	r14
     e38:	df 90       	pop	r13
     e3a:	cf 90       	pop	r12
     e3c:	bf 90       	pop	r11
     e3e:	af 90       	pop	r10
     e40:	08 95       	ret

00000e42 <_ZL19flashStringEndsWithRK6StringPKc>:
    }
  }
  return true; 
}

static boolean flashStringEndsWith(const String &str, const char PROGMEM* pstr){ 
     e42:	8f 92       	push	r8
     e44:	9f 92       	push	r9
     e46:	af 92       	push	r10
     e48:	bf 92       	push	r11
     e4a:	cf 92       	push	r12
     e4c:	df 92       	push	r13
     e4e:	ef 92       	push	r14
     e50:	ff 92       	push	r15
     e52:	1f 93       	push	r17
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	5c 01       	movw	r10, r24
     e5a:	6b 01       	movw	r12, r22
  /////////////////////////////////////////////////////////////////////
  //                         FALASH STRINGS                          //
  /////////////////////////////////////////////////////////////////////

static int flashStringLength(const char PROGMEM* pstr){ 
  return strlen_P(pstr);
     e5c:	cb 01       	movw	r24, r22
     e5e:	0e 94 87 04 	call	0x90e	; 0x90e <strlen_P>
     e62:	7c 01       	movw	r14, r24
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
     e64:	f5 01       	movw	r30, r10
     e66:	84 81       	ldd	r24, Z+4	; 0x04
     e68:	95 81       	ldd	r25, Z+5	; 0x05
  return true; 
}

static boolean flashStringEndsWith(const String &str, const char PROGMEM* pstr){ 
  int length = flashStringLength(pstr);
  if (length > str.length()) {
     e6a:	8e 15       	cp	r24, r14
     e6c:	9f 05       	cpc	r25, r15
     e6e:	d0 f0       	brcs	.+52     	; 0xea4 <_ZL19flashStringEndsWithRK6StringPKc+0x62>
    return false; 
  }
  int strOffset = str.length() - length;
     e70:	4c 01       	movw	r8, r24
     e72:	8e 18       	sub	r8, r14
     e74:	9f 08       	sbc	r9, r15
     e76:	c0 e0       	ldi	r28, 0x00	; 0
     e78:	d0 e0       	ldi	r29, 0x00	; 0
     e7a:	0f c0       	rjmp	.+30     	; 0xe9a <_ZL19flashStringEndsWithRK6StringPKc+0x58>
  for (int i = 0; i < length; i++){
    if (flashStringCharAt(pstr, i, false) != str[strOffset+i]){
     e7c:	c6 01       	movw	r24, r12
     e7e:	be 01       	movw	r22, r28
     e80:	40 e0       	ldi	r20, 0x00	; 0
     e82:	0e 94 27 06 	call	0xc4e	; 0xc4e <_ZL17flashStringCharAtPKcih>
     e86:	18 2f       	mov	r17, r24
     e88:	be 01       	movw	r22, r28
     e8a:	68 0d       	add	r22, r8
     e8c:	79 1d       	adc	r23, r9
     e8e:	c5 01       	movw	r24, r10
     e90:	0e 94 00 38 	call	0x7000	; 0x7000 <_ZNK6StringixEj>
     e94:	18 17       	cp	r17, r24
     e96:	31 f4       	brne	.+12     	; 0xea4 <_ZL19flashStringEndsWithRK6StringPKc+0x62>
  int length = flashStringLength(pstr);
  if (length > str.length()) {
    return false; 
  }
  int strOffset = str.length() - length;
  for (int i = 0; i < length; i++){
     e98:	21 96       	adiw	r28, 0x01	; 1
     e9a:	ce 15       	cp	r28, r14
     e9c:	df 05       	cpc	r29, r15
     e9e:	74 f3       	brlt	.-36     	; 0xe7c <_ZL19flashStringEndsWithRK6StringPKc+0x3a>
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	01 c0       	rjmp	.+2      	; 0xea6 <_ZL19flashStringEndsWithRK6StringPKc+0x64>
     ea4:	80 e0       	ldi	r24, 0x00	; 0
    if (flashStringCharAt(pstr, i, false) != str[strOffset+i]){
      return false;
    }
  }
  return true; 
}
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	1f 91       	pop	r17
     eac:	ff 90       	pop	r15
     eae:	ef 90       	pop	r14
     eb0:	df 90       	pop	r13
     eb2:	cf 90       	pop	r12
     eb4:	bf 90       	pop	r11
     eb6:	af 90       	pop	r10
     eb8:	9f 90       	pop	r9
     eba:	8f 90       	pop	r8
     ebc:	08 95       	ret

00000ebe <_ZL17flashStringEqualsRK6StringPKc>:
    }
  }
  return pgm_read_byte(pstr+index);
}

static boolean flashStringEquals(const String &str, const char PROGMEM* pstr){ 
     ebe:	af 92       	push	r10
     ec0:	bf 92       	push	r11
     ec2:	cf 92       	push	r12
     ec4:	df 92       	push	r13
     ec6:	ef 92       	push	r14
     ec8:	ff 92       	push	r15
     eca:	1f 93       	push	r17
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	5c 01       	movw	r10, r24
     ed2:	6b 01       	movw	r12, r22
  /////////////////////////////////////////////////////////////////////
  //                         FALASH STRINGS                          //
  /////////////////////////////////////////////////////////////////////

static int flashStringLength(const char PROGMEM* pstr){ 
  return strlen_P(pstr);
     ed4:	cb 01       	movw	r24, r22
     ed6:	0e 94 87 04 	call	0x90e	; 0x90e <strlen_P>
     eda:	7c 01       	movw	r14, r24
  return pgm_read_byte(pstr+index);
}

static boolean flashStringEquals(const String &str, const char PROGMEM* pstr){ 
  int length = flashStringLength(pstr);
  if (length != str.length()) {
     edc:	f5 01       	movw	r30, r10
     ede:	84 81       	ldd	r24, Z+4	; 0x04
     ee0:	95 81       	ldd	r25, Z+5	; 0x05
     ee2:	e8 16       	cp	r14, r24
     ee4:	f9 06       	cpc	r15, r25
     ee6:	a9 f4       	brne	.+42     	; 0xf12 <_ZL17flashStringEqualsRK6StringPKc+0x54>
     ee8:	c0 e0       	ldi	r28, 0x00	; 0
     eea:	d0 e0       	ldi	r29, 0x00	; 0
     eec:	0d c0       	rjmp	.+26     	; 0xf08 <_ZL17flashStringEqualsRK6StringPKc+0x4a>
    return false; 
  }
  for (int i = 0; i < length; i++){
    if (flashStringCharAt(pstr, i, false) != str[i]){
     eee:	c6 01       	movw	r24, r12
     ef0:	be 01       	movw	r22, r28
     ef2:	40 e0       	ldi	r20, 0x00	; 0
     ef4:	0e 94 27 06 	call	0xc4e	; 0xc4e <_ZL17flashStringCharAtPKcih>
     ef8:	18 2f       	mov	r17, r24
     efa:	c5 01       	movw	r24, r10
     efc:	be 01       	movw	r22, r28
     efe:	0e 94 00 38 	call	0x7000	; 0x7000 <_ZNK6StringixEj>
     f02:	18 17       	cp	r17, r24
     f04:	31 f4       	brne	.+12     	; 0xf12 <_ZL17flashStringEqualsRK6StringPKc+0x54>
static boolean flashStringEquals(const String &str, const char PROGMEM* pstr){ 
  int length = flashStringLength(pstr);
  if (length != str.length()) {
    return false; 
  }
  for (int i = 0; i < length; i++){
     f06:	21 96       	adiw	r28, 0x01	; 1
     f08:	ce 15       	cp	r28, r14
     f0a:	df 05       	cpc	r29, r15
     f0c:	84 f3       	brlt	.-32     	; 0xeee <_ZL17flashStringEqualsRK6StringPKc+0x30>
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	01 c0       	rjmp	.+2      	; 0xf14 <_ZL17flashStringEqualsRK6StringPKc+0x56>
     f12:	80 e0       	ldi	r24, 0x00	; 0
    if (flashStringCharAt(pstr, i, false) != str[i]){
      return false;
    }
  }
  return true;
}
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	1f 91       	pop	r17
     f1a:	ff 90       	pop	r15
     f1c:	ef 90       	pop	r14
     f1e:	df 90       	pop	r13
     f20:	cf 90       	pop	r12
     f22:	bf 90       	pop	r11
     f24:	af 90       	pop	r10
     f26:	08 95       	ret

00000f28 <_ZN13GB_PrintDirty8printHEXERK6String>:
    out += getFixedDigitsString(tmYearToCalendar(tm.Year), 4); 
    out += ']';
    return out;
  } 

  static void printHEX(const String &input){   
     f28:	cf 92       	push	r12
     f2a:	df 92       	push	r13
     f2c:	ef 92       	push	r14
     f2e:	ff 92       	push	r15
     f30:	0f 93       	push	r16
     f32:	1f 93       	push	r17
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	27 97       	sbiw	r28, 0x07	; 7
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	de bf       	out	0x3e, r29	; 62
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	cd bf       	out	0x3d, r28	; 61
     f48:	7c 01       	movw	r14, r24
     f4a:	00 e0       	ldi	r16, 0x00	; 0
     f4c:	10 e0       	ldi	r17, 0x00	; 0
    for(int i = 0; i<input.length(); i++){
      byte c = input[i];
      Serial.print(getHEX(c, 2));
     f4e:	6e 01       	movw	r12, r28
     f50:	08 94       	sec
     f52:	c1 1c       	adc	r12, r1
     f54:	d1 1c       	adc	r13, r1
     f56:	1e c0       	rjmp	.+60     	; 0xf94 <_ZN13GB_PrintDirty8printHEXERK6String+0x6c>
    return out;
  } 

  static void printHEX(const String &input){   
    for(int i = 0; i<input.length(); i++){
      byte c = input[i];
     f58:	c7 01       	movw	r24, r14
     f5a:	b8 01       	movw	r22, r16
     f5c:	0e 94 00 38 	call	0x7000	; 0x7000 <_ZNK6StringixEj>
     f60:	68 2f       	mov	r22, r24
      Serial.print(getHEX(c, 2));
     f62:	c6 01       	movw	r24, r12
     f64:	42 e0       	ldi	r20, 0x02	; 2
     f66:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN13GB_PrintDirty6getHEXEhh>
     f6a:	88 eb       	ldi	r24, 0xB8	; 184
     f6c:	93 e0       	ldi	r25, 0x03	; 3
     f6e:	b6 01       	movw	r22, r12
     f70:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <_ZN5Print5printERK6String>
     f74:	c6 01       	movw	r24, r12
     f76:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
      if ((i+1)<input.length()) {
     f7a:	0f 5f       	subi	r16, 0xFF	; 255
     f7c:	1f 4f       	sbci	r17, 0xFF	; 255
     f7e:	f7 01       	movw	r30, r14
     f80:	84 81       	ldd	r24, Z+4	; 0x04
     f82:	95 81       	ldd	r25, Z+5	; 0x05
     f84:	08 17       	cp	r16, r24
     f86:	19 07       	cpc	r17, r25
     f88:	28 f4       	brcc	.+10     	; 0xf94 <_ZN13GB_PrintDirty8printHEXERK6String+0x6c>
        Serial.print(' '); 
     f8a:	88 eb       	ldi	r24, 0xB8	; 184
     f8c:	93 e0       	ldi	r25, 0x03	; 3
     f8e:	60 e2       	ldi	r22, 0x20	; 32
     f90:	0e 94 77 36 	call	0x6cee	; 0x6cee <_ZN5Print5printEc>
    out += ']';
    return out;
  } 

  static void printHEX(const String &input){   
    for(int i = 0; i<input.length(); i++){
     f94:	f7 01       	movw	r30, r14
     f96:	84 81       	ldd	r24, Z+4	; 0x04
     f98:	95 81       	ldd	r25, Z+5	; 0x05
     f9a:	08 17       	cp	r16, r24
     f9c:	19 07       	cpc	r17, r25
     f9e:	e0 f2       	brcs	.-72     	; 0xf58 <_ZN13GB_PrintDirty8printHEXERK6String+0x30>
      Serial.print(getHEX(c, 2));
      if ((i+1)<input.length()) {
        Serial.print(' '); 
      }
    }
  }  
     fa0:	27 96       	adiw	r28, 0x07	; 7
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	f8 94       	cli
     fa6:	de bf       	out	0x3e, r29	; 62
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	cd bf       	out	0x3d, r28	; 61
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	1f 91       	pop	r17
     fb2:	0f 91       	pop	r16
     fb4:	ff 90       	pop	r15
     fb6:	ef 90       	pop	r14
     fb8:	df 90       	pop	r13
     fba:	cf 90       	pop	r12
     fbc:	08 95       	ret

00000fbe <_ZN13GB_PrintDirty16printWithoutCRLFERK6String>:

  static void printWithoutCRLF(const String &input){   
     fbe:	0f 93       	push	r16
     fc0:	1f 93       	push	r17
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	8c 01       	movw	r16, r24
     fc8:	c0 e0       	ldi	r28, 0x00	; 0
     fca:	d0 e0       	ldi	r29, 0x00	; 0
     fcc:	22 c0       	rjmp	.+68     	; 0x1012 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x54>
    for (int i = 0; i<input.length(); i++){
      if (input[i] == '\r'){
     fce:	c8 01       	movw	r24, r16
     fd0:	be 01       	movw	r22, r28
     fd2:	0e 94 00 38 	call	0x7000	; 0x7000 <_ZNK6StringixEj>
     fd6:	8d 30       	cpi	r24, 0x0D	; 13
     fd8:	29 f4       	brne	.+10     	; 0xfe4 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x26>
        Serial.print(F("\\r"));
     fda:	88 eb       	ldi	r24, 0xB8	; 184
     fdc:	93 e0       	ldi	r25, 0x03	; 3
     fde:	6f ea       	ldi	r22, 0xAF	; 175
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	0a c0       	rjmp	.+20     	; 0xff8 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x3a>
      } 
      else if (input[i] == '\n'){
     fe4:	c8 01       	movw	r24, r16
     fe6:	be 01       	movw	r22, r28
     fe8:	0e 94 00 38 	call	0x7000	; 0x7000 <_ZNK6StringixEj>
     fec:	8a 30       	cpi	r24, 0x0A	; 10
     fee:	39 f4       	brne	.+14     	; 0xffe <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x40>
        Serial.print(F("\\n"));
     ff0:	88 eb       	ldi	r24, 0xB8	; 184
     ff2:	93 e0       	ldi	r25, 0x03	; 3
     ff4:	6c ea       	ldi	r22, 0xAC	; 172
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZN5Print5printEPK19__FlashStringHelper>
     ffc:	09 c0       	rjmp	.+18     	; 0x1010 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x52>
      } 
      else {
        Serial.print(input[i]);
     ffe:	c8 01       	movw	r24, r16
    1000:	be 01       	movw	r22, r28
    1002:	0e 94 00 38 	call	0x7000	; 0x7000 <_ZNK6StringixEj>
    1006:	68 2f       	mov	r22, r24
    1008:	88 eb       	ldi	r24, 0xB8	; 184
    100a:	93 e0       	ldi	r25, 0x03	; 3
    100c:	0e 94 77 36 	call	0x6cee	; 0x6cee <_ZN5Print5printEc>
      }
    }
  }  

  static void printWithoutCRLF(const String &input){   
    for (int i = 0; i<input.length(); i++){
    1010:	21 96       	adiw	r28, 0x01	; 1
    1012:	f8 01       	movw	r30, r16
    1014:	84 81       	ldd	r24, Z+4	; 0x04
    1016:	95 81       	ldd	r25, Z+5	; 0x05
    1018:	c8 17       	cp	r28, r24
    101a:	d9 07       	cpc	r29, r25
    101c:	c0 f2       	brcs	.-80     	; 0xfce <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x10>
      } 
      else {
        Serial.print(input[i]);
      }
    }
  }
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	08 95       	ret

00001028 <_ZL21printFatalErrorOnBootPK19__FlashStringHelper>:
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	ec 01       	movw	r28, r24
    102e:	80 91 ae 01 	lds	r24, 0x01AE
    1032:	88 23       	and	r24, r24
    1034:	59 f0       	breq	.+22     	; 0x104c <_ZL21printFatalErrorOnBootPK19__FlashStringHelper+0x24>
    1036:	88 eb       	ldi	r24, 0xB8	; 184
    1038:	93 e0       	ldi	r25, 0x03	; 3
    103a:	64 ea       	ldi	r22, 0xA4	; 164
    103c:	75 e0       	ldi	r23, 0x05	; 5
    103e:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZN5Print5printEPK19__FlashStringHelper>
    1042:	88 eb       	ldi	r24, 0xB8	; 184
    1044:	93 e0       	ldi	r25, 0x03	; 3
    1046:	be 01       	movw	r22, r28
    1048:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <_ZN5Print7printlnEPK19__FlashStringHelper>
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	08 95       	ret

00001052 <_ZL17printStatusOnBootPK19__FlashStringHelper>:
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	ec 01       	movw	r28, r24
    1058:	80 91 ae 01 	lds	r24, 0x01AE
    105c:	88 23       	and	r24, r24
    105e:	89 f0       	breq	.+34     	; 0x1082 <_ZL17printStatusOnBootPK19__FlashStringHelper+0x30>
    1060:	88 eb       	ldi	r24, 0xB8	; 184
    1062:	93 e0       	ldi	r25, 0x03	; 3
    1064:	66 eb       	ldi	r22, 0xB6	; 182
    1066:	75 e0       	ldi	r23, 0x05	; 5
    1068:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZN5Print5printEPK19__FlashStringHelper>
    106c:	88 eb       	ldi	r24, 0xB8	; 184
    106e:	93 e0       	ldi	r25, 0x03	; 3
    1070:	be 01       	movw	r22, r28
    1072:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZN5Print5printEPK19__FlashStringHelper>
    1076:	88 eb       	ldi	r24, 0xB8	; 184
    1078:	93 e0       	ldi	r25, 0x03	; 3
    107a:	62 eb       	ldi	r22, 0xB2	; 178
    107c:	75 e0       	ldi	r23, 0x05	; 5
    107e:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <_ZN5Print7printlnEPK19__FlashStringHelper>
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	08 95       	ret

00001088 <_ZN15GB_SerialHelper17cleanSerialBufferEv>:
      }      
    }
  }

  static void cleanSerialBuffer(){
    delay(10);
    1088:	6a e0       	ldi	r22, 0x0A	; 10
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	0e 94 1f 32 	call	0x643e	; 0x643e <delay>
    1094:	04 c0       	rjmp	.+8      	; 0x109e <_ZN15GB_SerialHelper17cleanSerialBufferEv+0x16>
    while (Serial.available()){
      Serial.read();
    1096:	88 eb       	ldi	r24, 0xB8	; 184
    1098:	93 e0       	ldi	r25, 0x03	; 3
    109a:	0e 94 4a 35 	call	0x6a94	; 0x6a94 <_ZN14HardwareSerial4readEv>
    }
  }

  static void cleanSerialBuffer(){
    delay(10);
    while (Serial.available()){
    109e:	88 eb       	ldi	r24, 0xB8	; 184
    10a0:	93 e0       	ldi	r25, 0x03	; 3
    10a2:	0e 94 19 35 	call	0x6a32	; 0x6a32 <_ZN14HardwareSerial9availableEv>
    10a6:	89 2b       	or	r24, r25
    10a8:	b1 f7       	brne	.-20     	; 0x1096 <_ZN15GB_SerialHelper17cleanSerialBufferEv+0xe>
      Serial.read();
    }
  }
    10aa:	08 95       	ret

000010ac <_ZN15GB_SerialHelper13printDirtyEndEv>:
  static /*volatile*/ boolean useSerialMonitor;
  static /*volatile*/ boolean useSerialWifi;


  static void printDirtyEnd(){
    if (useSerialWifi) {
    10ac:	80 91 af 01 	lds	r24, 0x01AF
    10b0:	88 23       	and	r24, r24
    10b2:	11 f0       	breq	.+4      	; 0x10b8 <_ZN15GB_SerialHelper13printDirtyEndEv+0xc>
      cleanSerialBuffer();
    10b4:	0e 94 44 08 	call	0x1088	; 0x1088 <_ZN15GB_SerialHelper17cleanSerialBufferEv>
    10b8:	08 95       	ret

000010ba <_ZN15GB_SerialHelper15showWifiMessageEPK19__FlashStringHelperh>:
    sendWifiCloseConnection(wifiPortDescriptor);
  }

private:

  static void showWifiMessage(const __FlashStringHelper* str, boolean newLine = true){ //TODO 
    10ba:	1f 93       	push	r17
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    10c0:	ec 01       	movw	r28, r24
    10c2:	16 2f       	mov	r17, r22
    if (useSerialMonitor){
    10c4:	80 91 ae 01 	lds	r24, 0x01AE
    10c8:	88 23       	and	r24, r24
    10ca:	99 f0       	breq	.+38     	; 0x10f2 <_ZN15GB_SerialHelper15showWifiMessageEPK19__FlashStringHelperh+0x38>
      Serial.print(FS(S_WIFI));
    10cc:	88 eb       	ldi	r24, 0xB8	; 184
    10ce:	93 e0       	ldi	r25, 0x03	; 3
    10d0:	65 ea       	ldi	r22, 0xA5	; 165
    10d2:	70 e0       	ldi	r23, 0x00	; 0
    10d4:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(str);
    10d8:	88 eb       	ldi	r24, 0xB8	; 184
    10da:	93 e0       	ldi	r25, 0x03	; 3
    10dc:	be 01       	movw	r22, r28
    10de:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZN5Print5printEPK19__FlashStringHelper>
      if (newLine){  
    10e2:	11 23       	and	r17, r17
    10e4:	31 f0       	breq	.+12     	; 0x10f2 <_ZN15GB_SerialHelper15showWifiMessageEPK19__FlashStringHelperh+0x38>
        Serial.println();
    10e6:	88 eb       	ldi	r24, 0xB8	; 184
    10e8:	93 e0       	ldi	r25, 0x03	; 3
    10ea:	0e 94 7f 36 	call	0x6cfe	; 0x6cfe <_ZN5Print7printlnEv>
        printDirtyEnd();        
    10ee:	0e 94 56 08 	call	0x10ac	; 0x10ac <_ZN15GB_SerialHelper13printDirtyEndEv>
      }      
    }
  }
    10f2:	df 91       	pop	r29
    10f4:	cf 91       	pop	r28
    10f6:	1f 91       	pop	r17
    10f8:	08 95       	ret

000010fa <_ZL16Serial_timedReadPc>:

  static const unsigned long Stream_timeout = 1000; // Like in Stram.h

  // WARNING! This is adapted copy of Stream.h, Serial.h, and HardwareSerial.h
  // functionality
  static boolean Serial_timedRead(char* c){
    10fa:	ef 92       	push	r14
    10fc:	ff 92       	push	r15
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	ec 01       	movw	r28, r24
    unsigned long _startMillis = millis();
    1108:	0e 94 11 32 	call	0x6422	; 0x6422 <millis>
    110c:	7b 01       	movw	r14, r22
    110e:	8c 01       	movw	r16, r24
    unsigned long _currentMillis;
    do {
      if (Serial.available()){
    1110:	88 eb       	ldi	r24, 0xB8	; 184
    1112:	93 e0       	ldi	r25, 0x03	; 3
    1114:	0e 94 19 35 	call	0x6a32	; 0x6a32 <_ZN14HardwareSerial9availableEv>
    1118:	89 2b       	or	r24, r25
    111a:	39 f0       	breq	.+14     	; 0x112a <_ZL16Serial_timedReadPc+0x30>
        *c = (char) Serial.read();
    111c:	88 eb       	ldi	r24, 0xB8	; 184
    111e:	93 e0       	ldi	r25, 0x03	; 3
    1120:	0e 94 4a 35 	call	0x6a94	; 0x6a94 <_ZN14HardwareSerial4readEv>
    1124:	88 83       	st	Y, r24
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	15 c0       	rjmp	.+42     	; 0x1154 <_ZL16Serial_timedReadPc+0x5a>
        return true;   
      }
      _currentMillis = millis();
    112a:	0e 94 11 32 	call	0x6422	; 0x6422 <millis>
    112e:	9b 01       	movw	r18, r22
    1130:	ac 01       	movw	r20, r24
  // WARNING! This is adapted copy of Stream.h, Serial.h, and HardwareSerial.h
  // functionality
  static boolean Serial_timedRead(char* c){
    unsigned long _startMillis = millis();
    unsigned long _currentMillis;
    do {
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	8e 19       	sub	r24, r14
    1138:	9f 09       	sbc	r25, r15
    113a:	a0 0b       	sbc	r26, r16
    113c:	b1 0b       	sbc	r27, r17
    113e:	88 5e       	subi	r24, 0xE8	; 232
    1140:	93 40       	sbci	r25, 0x03	; 3
    1142:	a0 40       	sbci	r26, 0x00	; 0
    1144:	b0 40       	sbci	r27, 0x00	; 0
    1146:	20 f3       	brcs	.-56     	; 0x1110 <_ZL16Serial_timedReadPc+0x16>
    1148:	2e 15       	cp	r18, r14
    114a:	3f 05       	cpc	r19, r15
    114c:	40 07       	cpc	r20, r16
    114e:	51 07       	cpc	r21, r17
    1150:	f8 f2       	brcs	.-66     	; 0x1110 <_ZL16Serial_timedReadPc+0x16>
    1152:	80 e0       	ldi	r24, 0x00	; 0
    } 
    while(((_currentMillis - _startMillis) < Stream_timeout) || (_currentMillis < _startMillis));  // Overflow check 
    //while((_currentMillis - _startMillis) < Stream_timeout); 
    //while(millis() - _startMillis < Stream_timeout); 
    return false;     // false indicates timeout
  }
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	1f 91       	pop	r17
    115a:	0f 91       	pop	r16
    115c:	ff 90       	pop	r15
    115e:	ef 90       	pop	r14
    1160:	08 95       	ret

00001162 <_ZL22Serial_readStringUntilR6StringjPKc>:
      } 
    }
    return count;
  }  

  static size_t Serial_readStringUntil(String& str, size_t length, const char PROGMEM* pstr){      
    1162:	8f 92       	push	r8
    1164:	9f 92       	push	r9
    1166:	af 92       	push	r10
    1168:	bf 92       	push	r11
    116a:	cf 92       	push	r12
    116c:	df 92       	push	r13
    116e:	ef 92       	push	r14
    1170:	ff 92       	push	r15
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	0f 92       	push	r0
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	7c 01       	movw	r14, r24
    1182:	5b 01       	movw	r10, r22
    1184:	6a 01       	movw	r12, r20
    1186:	00 e0       	ldi	r16, 0x00	; 0
    1188:	10 e0       	ldi	r17, 0x00	; 0
    char c;
    size_t count = 0;
    while (count < length) {
      if (!Serial_timedRead(&c)){
    118a:	4e 01       	movw	r8, r28
    118c:	08 94       	sec
    118e:	81 1c       	adc	r8, r1
    1190:	91 1c       	adc	r9, r1
    1192:	11 c0       	rjmp	.+34     	; 0x11b6 <_ZL22Serial_readStringUntilR6StringjPKc+0x54>
    1194:	c4 01       	movw	r24, r8
    1196:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_ZL16Serial_timedReadPc>
    119a:	88 23       	and	r24, r24
    119c:	79 f0       	breq	.+30     	; 0x11bc <_ZL22Serial_readStringUntilR6StringjPKc+0x5a>
        break;
      }
      count++;
    119e:	0f 5f       	subi	r16, 0xFF	; 255
    11a0:	1f 4f       	sbci	r17, 0xFF	; 255
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    11a2:	c7 01       	movw	r24, r14
    11a4:	69 81       	ldd	r22, Y+1	; 0x01
    11a6:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN6String6concatEc>
      str +=c;
      if (flashStringEndsWith(str, pstr)){
    11aa:	c7 01       	movw	r24, r14
    11ac:	b6 01       	movw	r22, r12
    11ae:	0e 94 21 07 	call	0xe42	; 0xe42 <_ZL19flashStringEndsWithRK6StringPKc>
    11b2:	88 23       	and	r24, r24
    11b4:	19 f4       	brne	.+6      	; 0x11bc <_ZL22Serial_readStringUntilR6StringjPKc+0x5a>
  }  

  static size_t Serial_readStringUntil(String& str, size_t length, const char PROGMEM* pstr){      
    char c;
    size_t count = 0;
    while (count < length) {
    11b6:	0a 15       	cp	r16, r10
    11b8:	1b 05       	cpc	r17, r11
    11ba:	60 f3       	brcs	.-40     	; 0x1194 <_ZL22Serial_readStringUntilR6StringjPKc+0x32>
      if (flashStringEndsWith(str, pstr)){
        break;
      } 
    }
    return count;
  } 
    11bc:	c8 01       	movw	r24, r16
    11be:	0f 90       	pop	r0
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	ff 90       	pop	r15
    11ca:	ef 90       	pop	r14
    11cc:	df 90       	pop	r13
    11ce:	cf 90       	pop	r12
    11d0:	bf 90       	pop	r11
    11d2:	af 90       	pop	r10
    11d4:	9f 90       	pop	r9
    11d6:	8f 90       	pop	r8
    11d8:	08 95       	ret

000011da <_ZL16Serial_skipBytesj>:
      count++;
    }
    return count;
  }

  static size_t Serial_skipBytes(size_t length) {
    11da:	cf 92       	push	r12
    11dc:	df 92       	push	r13
    11de:	ef 92       	push	r14
    11e0:	ff 92       	push	r15
    11e2:	0f 93       	push	r16
    11e4:	1f 93       	push	r17
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	0f 92       	push	r0
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	7c 01       	movw	r14, r24
    11f2:	00 e0       	ldi	r16, 0x00	; 0
    11f4:	10 e0       	ldi	r17, 0x00	; 0
    char c;
    size_t count = 0;
    while (count < length) {
      if (!Serial_timedRead(&c)){
    11f6:	6e 01       	movw	r12, r28
    11f8:	08 94       	sec
    11fa:	c1 1c       	adc	r12, r1
    11fc:	d1 1c       	adc	r13, r1
    11fe:	07 c0       	rjmp	.+14     	; 0x120e <_ZL16Serial_skipBytesj+0x34>
    1200:	c6 01       	movw	r24, r12
    1202:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_ZL16Serial_timedReadPc>
    1206:	88 23       	and	r24, r24
    1208:	29 f0       	breq	.+10     	; 0x1214 <_ZL16Serial_skipBytesj+0x3a>
        break;
      }
      count++;
    120a:	0f 5f       	subi	r16, 0xFF	; 255
    120c:	1f 4f       	sbci	r17, 0xFF	; 255
  }

  static size_t Serial_skipBytes(size_t length) {
    char c;
    size_t count = 0;
    while (count < length) {
    120e:	0e 15       	cp	r16, r14
    1210:	1f 05       	cpc	r17, r15
    1212:	b0 f3       	brcs	.-20     	; 0x1200 <_ZL16Serial_skipBytesj+0x26>
        break;
      }
      count++;
    }
    return count;
  }
    1214:	c8 01       	movw	r24, r16
    1216:	0f 90       	pop	r0
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	1f 91       	pop	r17
    121e:	0f 91       	pop	r16
    1220:	ff 90       	pop	r15
    1222:	ef 90       	pop	r14
    1224:	df 90       	pop	r13
    1226:	cf 90       	pop	r12
    1228:	08 95       	ret

0000122a <_ZL17Serial_readStringR6Stringj>:
      } 
    }
    return count;
  } 

  static size_t Serial_readString(String& str, size_t length){
    122a:	8f 92       	push	r8
    122c:	9f 92       	push	r9
    122e:	af 92       	push	r10
    1230:	bf 92       	push	r11
    1232:	cf 92       	push	r12
    1234:	df 92       	push	r13
    1236:	ef 92       	push	r14
    1238:	ff 92       	push	r15
    123a:	0f 93       	push	r16
    123c:	1f 93       	push	r17
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	6c 01       	movw	r12, r24
    1248:	8b 01       	movw	r16, r22
    str.reserve(str.length() + count);
    for (size_t i = 0; i < count; i++) {
      str += buffer[i];  
    }
    return count;
  }
    124a:	8d b6       	in	r8, 0x3d	; 61
    124c:	9e b6       	in	r9, 0x3e	; 62
    }
    return count;
  } 

  static size_t Serial_readString(String& str, size_t length){
    char buffer[length];
    124e:	8d b7       	in	r24, 0x3d	; 61
    1250:	9e b7       	in	r25, 0x3e	; 62
    1252:	86 1b       	sub	r24, r22
    1254:	97 0b       	sbc	r25, r23
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	9e bf       	out	0x3e, r25	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	8d bf       	out	0x3d, r24	; 61
    1260:	ad b6       	in	r10, 0x3d	; 61
    1262:	be b6       	in	r11, 0x3e	; 62
    1264:	08 94       	sec
    1266:	a1 1c       	adc	r10, r1
    1268:	b1 1c       	adc	r11, r1
    size_t count = Serial_readBytes(buffer, length);
    126a:	ee 24       	eor	r14, r14
    126c:	ff 24       	eor	r15, r15
    126e:	07 c0       	rjmp	.+14     	; 0x127e <_ZL17Serial_readStringR6Stringj+0x54>
  }

  static size_t Serial_readBytes(char *buffer, size_t length) {
    size_t count = 0;
    while (count < length) {
      if (!Serial_timedRead(buffer)){
    1270:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_ZL16Serial_timedReadPc>
    1274:	88 23       	and	r24, r24
    1276:	49 f0       	breq	.+18     	; 0x128a <_ZL17Serial_readStringR6Stringj+0x60>
        break;
      }
      buffer++;
      count++;
    1278:	08 94       	sec
    127a:	e1 1c       	adc	r14, r1
    127c:	f1 1c       	adc	r15, r1
    127e:	c5 01       	movw	r24, r10
    1280:	8e 0d       	add	r24, r14
    1282:	9f 1d       	adc	r25, r15
    return false;     // false indicates timeout
  }

  static size_t Serial_readBytes(char *buffer, size_t length) {
    size_t count = 0;
    while (count < length) {
    1284:	e0 16       	cp	r14, r16
    1286:	f1 06       	cpc	r15, r17
    1288:	98 f3       	brcs	.-26     	; 0x1270 <_ZL17Serial_readStringR6Stringj+0x46>
  } 

  static size_t Serial_readString(String& str, size_t length){
    char buffer[length];
    size_t count = Serial_readBytes(buffer, length);
    str.reserve(str.length() + count);
    128a:	f6 01       	movw	r30, r12
    128c:	64 81       	ldd	r22, Z+4	; 0x04
    128e:	75 81       	ldd	r23, Z+5	; 0x05
    1290:	6e 0d       	add	r22, r14
    1292:	7f 1d       	adc	r23, r15
    1294:	c6 01       	movw	r24, r12
    1296:	0e 94 5d 38 	call	0x70ba	; 0x70ba <_ZN6String7reserveEj>
    129a:	00 e0       	ldi	r16, 0x00	; 0
    129c:	10 e0       	ldi	r17, 0x00	; 0
    129e:	09 c0       	rjmp	.+18     	; 0x12b2 <_ZL17Serial_readStringR6Stringj+0x88>
    12a0:	f5 01       	movw	r30, r10
    12a2:	e0 0f       	add	r30, r16
    12a4:	f1 1f       	adc	r31, r17
    12a6:	c6 01       	movw	r24, r12
    12a8:	60 81       	ld	r22, Z
    12aa:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN6String6concatEc>
    for (size_t i = 0; i < count; i++) {
    12ae:	0f 5f       	subi	r16, 0xFF	; 255
    12b0:	1f 4f       	sbci	r17, 0xFF	; 255
    12b2:	0e 15       	cp	r16, r14
    12b4:	1f 05       	cpc	r17, r15
    12b6:	a0 f3       	brcs	.-24     	; 0x12a0 <_ZL17Serial_readStringR6Stringj+0x76>
      str += buffer[i];  
    }
    return count;
  }
    12b8:	c7 01       	movw	r24, r14
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	9e be       	out	0x3e, r9	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	8d be       	out	0x3d, r8	; 61
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	1f 91       	pop	r17
    12ca:	0f 91       	pop	r16
    12cc:	ff 90       	pop	r15
    12ce:	ef 90       	pop	r14
    12d0:	df 90       	pop	r13
    12d2:	cf 90       	pop	r12
    12d4:	bf 90       	pop	r11
    12d6:	af 90       	pop	r10
    12d8:	9f 90       	pop	r9
    12da:	8f 90       	pop	r8
    12dc:	08 95       	ret

000012de <_ZL17Serial_readStringR6String>:

  static size_t Serial_readString(String& str){
    12de:	0f 93       	push	r16
    12e0:	1f 93       	push	r17
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	8c 01       	movw	r16, r24

    size_t maxFrameLenght = 100; 
    size_t countInFrame = Serial_readString(str, maxFrameLenght);
    12e8:	64 e6       	ldi	r22, 0x64	; 100
    12ea:	70 e0       	ldi	r23, 0x00	; 0
    12ec:	0e 94 15 09 	call	0x122a	; 0x122a <_ZL17Serial_readStringR6Stringj>
    12f0:	ec 01       	movw	r28, r24
    12f2:	07 c0       	rjmp	.+14     	; 0x1302 <_ZL17Serial_readStringR6String+0x24>

    size_t count = countInFrame; 

    while (countInFrame == maxFrameLenght){
      countInFrame = Serial_readString(str, maxFrameLenght); 
    12f4:	c8 01       	movw	r24, r16
    12f6:	64 e6       	ldi	r22, 0x64	; 100
    12f8:	70 e0       	ldi	r23, 0x00	; 0
    12fa:	0e 94 15 09 	call	0x122a	; 0x122a <_ZL17Serial_readStringR6Stringj>
      count += countInFrame;
    12fe:	c8 0f       	add	r28, r24
    1300:	d9 1f       	adc	r29, r25
    size_t maxFrameLenght = 100; 
    size_t countInFrame = Serial_readString(str, maxFrameLenght);

    size_t count = countInFrame; 

    while (countInFrame == maxFrameLenght){
    1302:	84 36       	cpi	r24, 0x64	; 100
    1304:	91 05       	cpc	r25, r1
    1306:	b1 f3       	breq	.-20     	; 0x12f4 <_ZL17Serial_readStringR6String+0x16>
      countInFrame = Serial_readString(str, maxFrameLenght); 
      count += countInFrame;
    }
    return count;
  }
    1308:	ce 01       	movw	r24, r28
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	1f 91       	pop	r17
    1310:	0f 91       	pop	r16
    1312:	08 95       	ret

00001314 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperi>:
    }

    return false;
  }

  static String wifiExecuteRawCommand(const __FlashStringHelper* command, int maxResponseDeleay){
    1314:	6f 92       	push	r6
    1316:	7f 92       	push	r7
    1318:	8f 92       	push	r8
    131a:	9f 92       	push	r9
    131c:	af 92       	push	r10
    131e:	bf 92       	push	r11
    1320:	cf 92       	push	r12
    1322:	df 92       	push	r13
    1324:	ef 92       	push	r14
    1326:	ff 92       	push	r15
    1328:	0f 93       	push	r16
    132a:	1f 93       	push	r17
    132c:	cf 93       	push	r28
    132e:	df 93       	push	r29
    1330:	98 2e       	mov	r9, r24
    1332:	89 2e       	mov	r8, r25
    1334:	eb 01       	movw	r28, r22
    1336:	3a 01       	movw	r6, r20

    cleanSerialBuffer();
    1338:	0e 94 44 08 	call	0x1088	; 0x1088 <_ZN15GB_SerialHelper17cleanSerialBufferEv>

    if (command == 0){
    133c:	20 97       	sbiw	r28, 0x00	; 0
    133e:	29 f4       	brne	.+10     	; 0x134a <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperi+0x36>
      Serial.println();
    1340:	88 eb       	ldi	r24, 0xB8	; 184
    1342:	93 e0       	ldi	r25, 0x03	; 3
    1344:	0e 94 7f 36 	call	0x6cfe	; 0x6cfe <_ZN5Print7printlnEv>
    1348:	05 c0       	rjmp	.+10     	; 0x1354 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperi+0x40>
    } 
    else {
      Serial.println(command);
    134a:	88 eb       	ldi	r24, 0xB8	; 184
    134c:	93 e0       	ldi	r25, 0x03	; 3
    134e:	be 01       	movw	r22, r28
    1350:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <_ZN5Print7printlnEPK19__FlashStringHelper>
    }

    String input;
    1354:	89 2d       	mov	r24, r9
    1356:	98 2d       	mov	r25, r8
    1358:	60 e0       	ldi	r22, 0x00	; 0
    135a:	71 e0       	ldi	r23, 0x01	; 1
    135c:	0e 94 95 39 	call	0x732a	; 0x732a <_ZN6StringC1EPKc>
    input.reserve(10);
    1360:	89 2d       	mov	r24, r9
    1362:	98 2d       	mov	r25, r8
    1364:	6a e0       	ldi	r22, 0x0A	; 10
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	0e 94 5d 38 	call	0x70ba	; 0x70ba <_ZN6String7reserveEj>
    unsigned long start = millis();
    136c:	0e 94 11 32 	call	0x6422	; 0x6422 <millis>
    1370:	5b 01       	movw	r10, r22
    1372:	6c 01       	movw	r12, r24
    while(millis() - start <= maxResponseDeleay){
    1374:	73 01       	movw	r14, r6
    1376:	00 27       	eor	r16, r16
    1378:	f7 fc       	sbrc	r15, 7
    137a:	00 95       	com	r16
    137c:	10 2f       	mov	r17, r16
    137e:	0a c0       	rjmp	.+20     	; 0x1394 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperi+0x80>
      if (Serial.available()){
    1380:	88 eb       	ldi	r24, 0xB8	; 184
    1382:	93 e0       	ldi	r25, 0x03	; 3
    1384:	0e 94 19 35 	call	0x6a32	; 0x6a32 <_ZN14HardwareSerial9availableEv>
    1388:	89 2b       	or	r24, r25
    138a:	21 f0       	breq	.+8      	; 0x1394 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperi+0x80>
        //input += (char) Serial.read(); 
        //input += Serial.readString(); // WARNING! Problems with command at+ipdhcp=0, it returns bytes with minus sign, Error in Serial library
        Serial_readString(input);
    138c:	89 2d       	mov	r24, r9
    138e:	98 2d       	mov	r25, r8
    1390:	0e 94 6f 09 	call	0x12de	; 0x12de <_ZL17Serial_readStringR6String>
    }

    String input;
    input.reserve(10);
    unsigned long start = millis();
    while(millis() - start <= maxResponseDeleay){
    1394:	0e 94 11 32 	call	0x6422	; 0x6422 <millis>
    1398:	6a 19       	sub	r22, r10
    139a:	7b 09       	sbc	r23, r11
    139c:	8c 09       	sbc	r24, r12
    139e:	9d 09       	sbc	r25, r13
    13a0:	e6 16       	cp	r14, r22
    13a2:	f7 06       	cpc	r15, r23
    13a4:	08 07       	cpc	r16, r24
    13a6:	19 07       	cpc	r17, r25
    13a8:	58 f7       	brcc	.-42     	; 0x1380 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperi+0x6c>
        //input += Serial.readString(); // WARNING! Problems with command at+ipdhcp=0, it returns bytes with minus sign, Error in Serial library
        Serial_readString(input);
      }
    }
    return input;
  }
    13aa:	89 2d       	mov	r24, r9
    13ac:	98 2d       	mov	r25, r8
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	ff 90       	pop	r15
    13b8:	ef 90       	pop	r14
    13ba:	df 90       	pop	r13
    13bc:	cf 90       	pop	r12
    13be:	bf 90       	pop	r11
    13c0:	af 90       	pop	r10
    13c2:	9f 90       	pop	r9
    13c4:	8f 90       	pop	r8
    13c6:	7f 90       	pop	r7
    13c8:	6f 90       	pop	r6
    13ca:	08 95       	ret

000013cc <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>:
    }

    return true;
  }

  static boolean wifiExecuteCommand(const __FlashStringHelper* command = 0, int maxResponseDeleay = WIFI_RESPONSE_DEFAULT_DELAY){   
    13cc:	ff 92       	push	r15
    13ce:	0f 93       	push	r16
    13d0:	1f 93       	push	r17
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	2e 97       	sbiw	r28, 0x0e	; 14
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	f8 94       	cli
    13e0:	de bf       	out	0x3e, r29	; 62
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	cd bf       	out	0x3d, r28	; 61
    13e6:	9c 01       	movw	r18, r24
    13e8:	ab 01       	movw	r20, r22
    String input = wifiExecuteRawCommand(command, maxResponseDeleay);
    13ea:	8e 01       	movw	r16, r28
    13ec:	0f 5f       	subi	r16, 0xFF	; 255
    13ee:	1f 4f       	sbci	r17, 0xFF	; 255
    13f0:	c8 01       	movw	r24, r16
    13f2:	b9 01       	movw	r22, r18
    13f4:	0e 94 8a 09 	call	0x1314	; 0x1314 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperi>
    if (input.length() == 0){
    13f8:	8d 81       	ldd	r24, Y+5	; 0x05
    13fa:	9e 81       	ldd	r25, Y+6	; 0x06
    13fc:	89 2b       	or	r24, r25
    13fe:	e9 f4       	brne	.+58     	; 0x143a <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x6e>
      if (s_restartWifiIfNoResponseAutomatically){
    1400:	80 91 05 01 	lds	r24, 0x0105
    1404:	88 23       	and	r24, r24
    1406:	19 f0       	breq	.+6      	; 0x140e <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x42>
        s_restartWifi = true;
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	80 93 b0 01 	sts	0x01B0, r24
      }

      if (useSerialMonitor){   
    140e:	80 91 ae 01 	lds	r24, 0x01AE
    1412:	88 23       	and	r24, r24
    1414:	09 f4       	brne	.+2      	; 0x1418 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x4c>
    1416:	66 c0       	rjmp	.+204    	; 0x14e4 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x118>
        showWifiMessage(F("No response"), false);
    1418:	89 e9       	ldi	r24, 0x99	; 153
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	60 e0       	ldi	r22, 0x00	; 0
    141e:	0e 94 5d 08 	call	0x10ba	; 0x10ba <_ZN15GB_SerialHelper15showWifiMessageEPK19__FlashStringHelperh>
        if (s_restartWifiIfNoResponseAutomatically){
    1422:	80 91 05 01 	lds	r24, 0x0105
    1426:	88 23       	and	r24, r24
    1428:	09 f4       	brne	.+2      	; 0x142c <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x60>
    142a:	56 c0       	rjmp	.+172    	; 0x14d8 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x10c>
          Serial.print(F(" (reboot)"));
    142c:	88 eb       	ldi	r24, 0xB8	; 184
    142e:	93 e0       	ldi	r25, 0x03	; 3
    1430:	6f e8       	ldi	r22, 0x8F	; 143
    1432:	70 e0       	ldi	r23, 0x00	; 0
    1434:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZN5Print5printEPK19__FlashStringHelper>
    1438:	4f c0       	rjmp	.+158    	; 0x14d8 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x10c>
        Serial.println();
        printDirtyEnd();
      }
      // Nothing to do
    } 
    else if (flashStringStartsWith(input, S_WIFI_RESPONSE_OK) && flashStringEndsWith(input, S_CRLF)){
    143a:	c8 01       	movw	r24, r16
    143c:	67 e7       	ldi	r22, 0x77	; 119
    143e:	70 e0       	ldi	r23, 0x00	; 0
    1440:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZL21flashStringStartsWithRK6StringPKc>
    1444:	88 23       	and	r24, r24
    1446:	09 f4       	brne	.+2      	; 0x144a <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x7e>
    1448:	5f c0       	rjmp	.+190    	; 0x1508 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x13c>
    144a:	c8 01       	movw	r24, r16
    144c:	6a e7       	ldi	r22, 0x7A	; 122
    144e:	70 e0       	ldi	r23, 0x00	; 0
    1450:	0e 94 21 07 	call	0xe42	; 0xe42 <_ZL19flashStringEndsWithRK6StringPKc>
    1454:	88 23       	and	r24, r24
    1456:	09 f4       	brne	.+2      	; 0x145a <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x8e>
    1458:	57 c0       	rjmp	.+174    	; 0x1508 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x13c>
    145a:	01 e0       	ldi	r16, 0x01	; 1
    145c:	44 c0       	rjmp	.+136    	; 0x14e6 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x11a>
      return true;
    } 
    else if (flashStringStartsWith(input, S_WIFI_RESPONSE_ERROR) && flashStringEndsWith(input, S_CRLF)){
    145e:	c8 01       	movw	r24, r16
    1460:	6a e7       	ldi	r22, 0x7A	; 122
    1462:	70 e0       	ldi	r23, 0x00	; 0
    1464:	0e 94 21 07 	call	0xe42	; 0xe42 <_ZL19flashStringEndsWithRK6StringPKc>
    1468:	88 23       	and	r24, r24
    146a:	09 f4       	brne	.+2      	; 0x146e <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0xa2>
    146c:	58 c0       	rjmp	.+176    	; 0x151e <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x152>
      if (useSerialMonitor){
    146e:	80 91 ae 01 	lds	r24, 0x01AE
    1472:	88 23       	and	r24, r24
    1474:	b9 f1       	breq	.+110    	; 0x14e4 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x118>
        byte errorCode = input[5];
    1476:	c8 01       	movw	r24, r16
    1478:	65 e0       	ldi	r22, 0x05	; 5
    147a:	70 e0       	ldi	r23, 0x00	; 0
    147c:	0e 94 eb 37 	call	0x6fd6	; 0x6fd6 <_ZN6StringixEj>
    1480:	fc 01       	movw	r30, r24
    1482:	f0 80       	ld	r15, Z
        showWifiMessage(F("Error "), false);
    1484:	88 e8       	ldi	r24, 0x88	; 136
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <_ZN15GB_SerialHelper15showWifiMessageEPK19__FlashStringHelperh>
        Serial.print(GB_PrintDirty::getHEX(errorCode, true));
    148e:	8e 01       	movw	r16, r28
    1490:	08 5f       	subi	r16, 0xF8	; 248
    1492:	1f 4f       	sbci	r17, 0xFF	; 255
    1494:	c8 01       	movw	r24, r16
    1496:	6f 2d       	mov	r22, r15
    1498:	41 e0       	ldi	r20, 0x01	; 1
    149a:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN13GB_PrintDirty6getHEXEhh>
    149e:	88 eb       	ldi	r24, 0xB8	; 184
    14a0:	93 e0       	ldi	r25, 0x03	; 3
    14a2:	b8 01       	movw	r22, r16
    14a4:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <_ZN5Print5printERK6String>
    14a8:	c8 01       	movw	r24, r16
    14aa:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
    14ae:	14 c0       	rjmp	.+40     	; 0x14d8 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x10c>
        printDirtyEnd();
      }      
    } 
    else {
      if (useSerialMonitor){
        showWifiMessage(FS(S_empty), false);
    14b0:	83 e8       	ldi	r24, 0x83	; 131
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	60 e0       	ldi	r22, 0x00	; 0
    14b6:	0e 94 5d 08 	call	0x10ba	; 0x10ba <_ZN15GB_SerialHelper15showWifiMessageEPK19__FlashStringHelperh>
        GB_PrintDirty::printWithoutCRLF(input);
    14ba:	8e 01       	movw	r16, r28
    14bc:	0f 5f       	subi	r16, 0xFF	; 255
    14be:	1f 4f       	sbci	r17, 0xFF	; 255
    14c0:	c8 01       	movw	r24, r16
    14c2:	0e 94 df 07 	call	0xfbe	; 0xfbe <_ZN13GB_PrintDirty16printWithoutCRLFERK6String>
        Serial.print(FS(S_Next));
    14c6:	88 eb       	ldi	r24, 0xB8	; 184
    14c8:	93 e0       	ldi	r25, 0x03	; 3
    14ca:	64 e8       	ldi	r22, 0x84	; 132
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZN5Print5printEPK19__FlashStringHelper>
        GB_PrintDirty::printHEX(input); 
    14d2:	c8 01       	movw	r24, r16
    14d4:	0e 94 94 07 	call	0xf28	; 0xf28 <_ZN13GB_PrintDirty8printHEXERK6String>
        Serial.println();
    14d8:	88 eb       	ldi	r24, 0xB8	; 184
    14da:	93 e0       	ldi	r25, 0x03	; 3
    14dc:	0e 94 7f 36 	call	0x6cfe	; 0x6cfe <_ZN5Print7printlnEv>
        printDirtyEnd();
    14e0:	0e 94 56 08 	call	0x10ac	; 0x10ac <_ZN15GB_SerialHelper13printDirtyEndEv>
    14e4:	00 e0       	ldi	r16, 0x00	; 0
      }
    }

    return false;
    14e6:	ce 01       	movw	r24, r28
    14e8:	01 96       	adiw	r24, 0x01	; 1
    14ea:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
  }
    14ee:	80 2f       	mov	r24, r16
    14f0:	2e 96       	adiw	r28, 0x0e	; 14
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	f8 94       	cli
    14f6:	de bf       	out	0x3e, r29	; 62
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	cd bf       	out	0x3d, r28	; 61
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	1f 91       	pop	r17
    1502:	0f 91       	pop	r16
    1504:	ff 90       	pop	r15
    1506:	08 95       	ret
      // Nothing to do
    } 
    else if (flashStringStartsWith(input, S_WIFI_RESPONSE_OK) && flashStringEndsWith(input, S_CRLF)){
      return true;
    } 
    else if (flashStringStartsWith(input, S_WIFI_RESPONSE_ERROR) && flashStringEndsWith(input, S_CRLF)){
    1508:	8e 01       	movw	r16, r28
    150a:	0f 5f       	subi	r16, 0xFF	; 255
    150c:	1f 4f       	sbci	r17, 0xFF	; 255
    150e:	c8 01       	movw	r24, r16
    1510:	6d e7       	ldi	r22, 0x7D	; 125
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZL21flashStringStartsWithRK6StringPKc>
    1518:	88 23       	and	r24, r24
    151a:	09 f0       	breq	.+2      	; 0x151e <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x152>
    151c:	a0 cf       	rjmp	.-192    	; 0x145e <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x92>
        Serial.println();
        printDirtyEnd();
      }      
    } 
    else {
      if (useSerialMonitor){
    151e:	80 91 ae 01 	lds	r24, 0x01AE
    1522:	88 23       	and	r24, r24
    1524:	f9 f2       	breq	.-66     	; 0x14e4 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x118>
    1526:	c4 cf       	rjmp	.-120    	; 0x14b0 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0xe4>

00001528 <_ZN15GB_SerialHelper15startWifiSilentEv>:
  //                             Wi-FI DEVICE                        //
  /////////////////////////////////////////////////////////////////////

  static boolean startWifiSilent(){

    cleanSerialBuffer();
    1528:	0e 94 44 08 	call	0x1088	; 0x1088 <_ZN15GB_SerialHelper17cleanSerialBufferEv>

    if (!wifiExecuteCommand(F("at+scan=0"), 5000)){
    152c:	81 e3       	ldi	r24, 0x31	; 49
    152e:	92 e0       	ldi	r25, 0x02	; 2
    1530:	68 e8       	ldi	r22, 0x88	; 136
    1532:	73 e1       	ldi	r23, 0x13	; 19
    1534:	0e 94 e6 09 	call	0x13cc	; 0x13cc <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    1538:	88 23       	and	r24, r24
    153a:	09 f4       	brne	.+2      	; 0x153e <_ZN15GB_SerialHelper15startWifiSilentEv+0x16>
    153c:	62 c0       	rjmp	.+196    	; 0x1602 <_ZN15GB_SerialHelper15startWifiSilentEv+0xda>
      return false;
    } 

    boolean isStationMode = (s_wifiSID.length()>0);    
    if (isStationMode){
    153e:	80 91 b5 01 	lds	r24, 0x01B5
    1542:	90 91 b6 01 	lds	r25, 0x01B6
    1546:	89 2b       	or	r24, r25
    1548:	91 f1       	breq	.+100    	; 0x15ae <_ZN15GB_SerialHelper15startWifiSilentEv+0x86>
      if (s_wifiPass.length() > 0){
    154a:	80 91 bc 01 	lds	r24, 0x01BC
    154e:	90 91 bd 01 	lds	r25, 0x01BD
    1552:	89 2b       	or	r24, r25
    1554:	a9 f0       	breq	.+42     	; 0x1580 <_ZN15GB_SerialHelper15startWifiSilentEv+0x58>
        Serial.print(F("at+psk="));
    1556:	88 eb       	ldi	r24, 0xB8	; 184
    1558:	93 e0       	ldi	r25, 0x03	; 3
    155a:	69 e2       	ldi	r22, 0x29	; 41
    155c:	72 e0       	ldi	r23, 0x02	; 2
    155e:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.print(s_wifiPass);
    1562:	88 eb       	ldi	r24, 0xB8	; 184
    1564:	93 e0       	ldi	r25, 0x03	; 3
    1566:	68 eb       	ldi	r22, 0xB8	; 184
    1568:	71 e0       	ldi	r23, 0x01	; 1
    156a:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <_ZN5Print5printERK6String>
        if (!wifiExecuteCommand()){
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	68 ee       	ldi	r22, 0xE8	; 232
    1574:	73 e0       	ldi	r23, 0x03	; 3
    1576:	0e 94 e6 09 	call	0x13cc	; 0x13cc <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    157a:	88 23       	and	r24, r24
    157c:	09 f4       	brne	.+2      	; 0x1580 <_ZN15GB_SerialHelper15startWifiSilentEv+0x58>
    157e:	41 c0       	rjmp	.+130    	; 0x1602 <_ZN15GB_SerialHelper15startWifiSilentEv+0xda>
          return false;
        }
      } 

      Serial.print(F("at+connect="));
    1580:	88 eb       	ldi	r24, 0xB8	; 184
    1582:	93 e0       	ldi	r25, 0x03	; 3
    1584:	6d e1       	ldi	r22, 0x1D	; 29
    1586:	72 e0       	ldi	r23, 0x02	; 2
    1588:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(s_wifiSID);
    158c:	88 eb       	ldi	r24, 0xB8	; 184
    158e:	93 e0       	ldi	r25, 0x03	; 3
    1590:	61 eb       	ldi	r22, 0xB1	; 177
    1592:	71 e0       	ldi	r23, 0x01	; 1
    1594:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <_ZN5Print5printERK6String>
      if (!wifiExecuteCommand(0, 5000)){
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	68 e8       	ldi	r22, 0x88	; 136
    159e:	73 e1       	ldi	r23, 0x13	; 19
    15a0:	0e 94 e6 09 	call	0x13cc	; 0x13cc <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    15a4:	88 23       	and	r24, r24
    15a6:	69 f1       	breq	.+90     	; 0x1602 <_ZN15GB_SerialHelper15startWifiSilentEv+0xda>

      /*if (!wifiExecuteCommand(F("at+listen=20"))){
       return false;
       }*/

      if (!wifiExecuteCommand(F("at+ipdhcp=0"), 5000)){
    15a8:	81 e1       	ldi	r24, 0x11	; 17
    15aa:	92 e0       	ldi	r25, 0x02	; 2
    15ac:	1a c0       	rjmp	.+52     	; 0x15e2 <_ZN15GB_SerialHelper15startWifiSilentEv+0xba>
        return false;
      }
    }
    else {
      if (!wifiExecuteCommand(F("at+psk=ingodwetrust"))){
    15ae:	8d ef       	ldi	r24, 0xFD	; 253
    15b0:	91 e0       	ldi	r25, 0x01	; 1
    15b2:	68 ee       	ldi	r22, 0xE8	; 232
    15b4:	73 e0       	ldi	r23, 0x03	; 3
    15b6:	0e 94 e6 09 	call	0x13cc	; 0x13cc <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    15ba:	88 23       	and	r24, r24
    15bc:	11 f1       	breq	.+68     	; 0x1602 <_ZN15GB_SerialHelper15startWifiSilentEv+0xda>
        return false;
      }  

      // at+ipstatic=<ip>,<mask>,<gateway>,<dns server1>(0 is valid),<dns server2>(0 is valid)\r\n
      if (!wifiExecuteCommand(F("at+ipstatic=192.168.0.1,255.255.0.0,0.0.0.0,0,0"))){
    15be:	8d ec       	ldi	r24, 0xCD	; 205
    15c0:	91 e0       	ldi	r25, 0x01	; 1
    15c2:	68 ee       	ldi	r22, 0xE8	; 232
    15c4:	73 e0       	ldi	r23, 0x03	; 3
    15c6:	0e 94 e6 09 	call	0x13cc	; 0x13cc <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    15ca:	88 23       	and	r24, r24
    15cc:	d1 f0       	breq	.+52     	; 0x1602 <_ZN15GB_SerialHelper15startWifiSilentEv+0xda>
        return false;
      }

      if (!wifiExecuteCommand(F("at+ipdhcp=1"), 5000)){
    15ce:	81 ec       	ldi	r24, 0xC1	; 193
    15d0:	91 e0       	ldi	r25, 0x01	; 1
    15d2:	68 e8       	ldi	r22, 0x88	; 136
    15d4:	73 e1       	ldi	r23, 0x13	; 19
    15d6:	0e 94 e6 09 	call	0x13cc	; 0x13cc <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    15da:	88 23       	and	r24, r24
    15dc:	91 f0       	breq	.+36     	; 0x1602 <_ZN15GB_SerialHelper15startWifiSilentEv+0xda>
        return false;
      }

      if (!wifiExecuteCommand(F("at+ap=Growbox,1"), 5000)){ // Hidden
    15de:	81 eb       	ldi	r24, 0xB1	; 177
    15e0:	91 e0       	ldi	r25, 0x01	; 1
    15e2:	68 e8       	ldi	r22, 0x88	; 136
    15e4:	73 e1       	ldi	r23, 0x13	; 19
    15e6:	0e 94 e6 09 	call	0x13cc	; 0x13cc <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    15ea:	88 23       	and	r24, r24
    15ec:	51 f0       	breq	.+20     	; 0x1602 <_ZN15GB_SerialHelper15startWifiSilentEv+0xda>
    }

    /*if (!wifiExecuteCommand(F("at+httpd_open"))){
     return false;
     }*/
    if (!wifiExecuteCommand(F("at+ltcp=80"))){
    15ee:	86 ea       	ldi	r24, 0xA6	; 166
    15f0:	91 e0       	ldi	r25, 0x01	; 1
    15f2:	68 ee       	ldi	r22, 0xE8	; 232
    15f4:	73 e0       	ldi	r23, 0x03	; 3
    15f6:	0e 94 e6 09 	call	0x13cc	; 0x13cc <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    15fa:	88 23       	and	r24, r24
    15fc:	19 f0       	breq	.+6      	; 0x1604 <_ZN15GB_SerialHelper15startWifiSilentEv+0xdc>
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	08 95       	ret
    1602:	80 e0       	ldi	r24, 0x00	; 0
      return false;
    }

    return true;
  }
    1604:	08 95       	ret

00001606 <_ZN15GB_SerialHelper9startWifiEv>:
      startWifi();
    }
  }

  static boolean startWifi(){
    showWifiMessage(F("Starting..."));
    1606:	8a e9       	ldi	r24, 0x9A	; 154
    1608:	91 e0       	ldi	r25, 0x01	; 1
    160a:	61 e0       	ldi	r22, 0x01	; 1
    160c:	0e 94 5d 08 	call	0x10ba	; 0x10ba <_ZN15GB_SerialHelper15showWifiMessageEPK19__FlashStringHelperh>
    boolean isLoaded = startWifiSilent();
    1610:	0e 94 94 0a 	call	0x1528	; 0x1528 <_ZN15GB_SerialHelper15startWifiSilentEv>
    if (isLoaded){
    1614:	88 23       	and	r24, r24
    1616:	31 f0       	breq	.+12     	; 0x1624 <_ZN15GB_SerialHelper9startWifiEv+0x1e>
      showWifiMessage(F("Started"));
    1618:	82 e9       	ldi	r24, 0x92	; 146
    161a:	91 e0       	ldi	r25, 0x01	; 1
    161c:	61 e0       	ldi	r22, 0x01	; 1
    161e:	0e 94 5d 08 	call	0x10ba	; 0x10ba <_ZN15GB_SerialHelper15showWifiMessageEPK19__FlashStringHelperh>
    1622:	08 95       	ret
    } 
    else {
      showWifiMessage(F("Start failed"));
    1624:	85 e8       	ldi	r24, 0x85	; 133
    1626:	91 e0       	ldi	r25, 0x01	; 1
    1628:	61 e0       	ldi	r22, 0x01	; 1
    162a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <_ZN15GB_SerialHelper15showWifiMessageEPK19__FlashStringHelperh>
      s_restartWifi = true;
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	80 93 b0 01 	sts	0x01B0, r24
    }
  }
    1634:	08 95       	ret

00001636 <_ZN15GB_SerialHelper23sendWifiCloseConnectionEh>:
      }
    }
    return sendWifiFrameStop();
  } 

  static boolean sendWifiCloseConnection(const byte portDescriptor){
    1636:	ff 92       	push	r15
    1638:	0f 93       	push	r16
    163a:	1f 93       	push	r17
    163c:	f8 2e       	mov	r15, r24
    Serial.print(F("at+cls="));
    163e:	08 eb       	ldi	r16, 0xB8	; 184
    1640:	13 e0       	ldi	r17, 0x03	; 3
    1642:	c8 01       	movw	r24, r16
    1644:	61 ed       	ldi	r22, 0xD1	; 209
    1646:	72 e0       	ldi	r23, 0x02	; 2
    1648:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(portDescriptor);
    164c:	c8 01       	movw	r24, r16
    164e:	6f 2d       	mov	r22, r15
    1650:	4a e0       	ldi	r20, 0x0A	; 10
    1652:	50 e0       	ldi	r21, 0x00	; 0
    1654:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <_ZN5Print5printEhi>
    return wifiExecuteCommand(); 
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	68 ee       	ldi	r22, 0xE8	; 232
    165e:	73 e0       	ldi	r23, 0x03	; 3
    1660:	0e 94 e6 09 	call	0x13cc	; 0x13cc <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
  }
    1664:	1f 91       	pop	r17
    1666:	0f 91       	pop	r16
    1668:	ff 90       	pop	r15
    166a:	08 95       	ret

0000166c <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>:

  /////////////////////////////////////////////////////////////////////
  //                           WIFI PROTOCOL                         //
  /////////////////////////////////////////////////////////////////////

  static void sendWifiFrameStart(const byte portDescriptor, word length){ // 1400 bytes max (Wi-Fi module spec restriction)   
    166c:	df 92       	push	r13
    166e:	ef 92       	push	r14
    1670:	ff 92       	push	r15
    1672:	0f 93       	push	r16
    1674:	1f 93       	push	r17
    1676:	d8 2e       	mov	r13, r24
    1678:	7b 01       	movw	r14, r22
    Serial.print(F("at+send_data="));
    167a:	08 eb       	ldi	r16, 0xB8	; 184
    167c:	13 e0       	ldi	r17, 0x03	; 3
    167e:	c8 01       	movw	r24, r16
    1680:	62 eb       	ldi	r22, 0xB2	; 178
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(portDescriptor);
    1688:	c8 01       	movw	r24, r16
    168a:	6d 2d       	mov	r22, r13
    168c:	4a e0       	ldi	r20, 0x0A	; 10
    168e:	50 e0       	ldi	r21, 0x00	; 0
    1690:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <_ZN5Print5printEhi>
    Serial.print(',');
    1694:	c8 01       	movw	r24, r16
    1696:	6c e2       	ldi	r22, 0x2C	; 44
    1698:	0e 94 77 36 	call	0x6cee	; 0x6cee <_ZN5Print5printEc>
    Serial.print(length);
    169c:	c8 01       	movw	r24, r16
    169e:	b7 01       	movw	r22, r14
    16a0:	4a e0       	ldi	r20, 0x0A	; 10
    16a2:	50 e0       	ldi	r21, 0x00	; 0
    16a4:	0e 94 42 37 	call	0x6e84	; 0x6e84 <_ZN5Print5printEji>
    Serial.print(',');
    16a8:	c8 01       	movw	r24, r16
    16aa:	6c e2       	ldi	r22, 0x2C	; 44
    16ac:	0e 94 77 36 	call	0x6cee	; 0x6cee <_ZN5Print5printEc>
  }
    16b0:	1f 91       	pop	r17
    16b2:	0f 91       	pop	r16
    16b4:	ff 90       	pop	r15
    16b6:	ef 90       	pop	r14
    16b8:	df 90       	pop	r13
    16ba:	08 95       	ret

000016bc <_ZN15GB_SerialHelper16sendHTTPRedirectERKhPK19__FlashStringHelper>:
  }
  
  // WARNING! RAK 410 became mad when 2 parallel connections comes. Like with Chrome and POST request, when RAK response 303.
  // Connection for POST request closed by Chrome (not by RAK). And during this time Chrome creates new parallel connection for GET
  // request.
  static void sendHTTPRedirect(const byte &wifiPortDescriptor, const __FlashStringHelper* data){ 
    16bc:	6f 92       	push	r6
    16be:	7f 92       	push	r7
    16c0:	8f 92       	push	r8
    16c2:	9f 92       	push	r9
    16c4:	af 92       	push	r10
    16c6:	bf 92       	push	r11
    16c8:	cf 92       	push	r12
    16ca:	df 92       	push	r13
    16cc:	ef 92       	push	r14
    16ce:	ff 92       	push	r15
    16d0:	0f 93       	push	r16
    16d2:	1f 93       	push	r17
    16d4:	3c 01       	movw	r6, r24
    16d6:	4b 01       	movw	r8, r22
    //const __FlashStringHelper* header = F("HTTP/1.1 303 See Other\r\nLocation: "); // DO not use it with RAK 410
    const __FlashStringHelper* header = F("HTTP/1.1 200 OK (303 doesn't work on RAK 410)\r\nrefresh: 0; url="); 
    16d8:	21 e9       	ldi	r18, 0x91	; 145
    16da:	a2 2e       	mov	r10, r18
    16dc:	22 e0       	ldi	r18, 0x02	; 2
    16de:	b2 2e       	mov	r11, r18
    16e0:	c5 01       	movw	r24, r10
    16e2:	0e 94 87 04 	call	0x90e	; 0x90e <strlen_P>
    16e6:	7c 01       	movw	r14, r24
  /////////////////////////////////////////////////////////////////////
  //                         FALASH STRINGS                          //
  /////////////////////////////////////////////////////////////////////

static int flashStringLength(const char PROGMEM* pstr){ 
  return strlen_P(pstr);
    16e8:	c4 01       	movw	r24, r8
    16ea:	0e 94 87 04 	call	0x90e	; 0x90e <strlen_P>
    16ee:	8c 01       	movw	r16, r24
    sendWifiFrameStart(wifiPortDescriptor, flashStringLength(header) + flashStringLength(data) + flashStringLength(S_CRLFCRLF));
    16f0:	9e e7       	ldi	r25, 0x7E	; 126
    16f2:	c9 2e       	mov	r12, r25
    16f4:	92 e0       	ldi	r25, 0x02	; 2
    16f6:	d9 2e       	mov	r13, r25
    16f8:	c6 01       	movw	r24, r12
    16fa:	0e 94 87 04 	call	0x90e	; 0x90e <strlen_P>
    16fe:	0e 0d       	add	r16, r14
    1700:	1f 1d       	adc	r17, r15
    1702:	08 0f       	add	r16, r24
    1704:	19 1f       	adc	r17, r25
    1706:	f3 01       	movw	r30, r6
    1708:	80 81       	ld	r24, Z
    170a:	b8 01       	movw	r22, r16
    170c:	0e 94 36 0b 	call	0x166c	; 0x166c <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>
    Serial.print(header);
    1710:	08 eb       	ldi	r16, 0xB8	; 184
    1712:	13 e0       	ldi	r17, 0x03	; 3
  // WARNING! RAK 410 became mad when 2 parallel connections comes. Like with Chrome and POST request, when RAK response 303.
  // Connection for POST request closed by Chrome (not by RAK). And during this time Chrome creates new parallel connection for GET
  // request.
  static void sendHTTPRedirect(const byte &wifiPortDescriptor, const __FlashStringHelper* data){ 
    //const __FlashStringHelper* header = F("HTTP/1.1 303 See Other\r\nLocation: "); // DO not use it with RAK 410
    const __FlashStringHelper* header = F("HTTP/1.1 200 OK (303 doesn't work on RAK 410)\r\nrefresh: 0; url="); 
    1714:	c8 01       	movw	r24, r16
    1716:	b5 01       	movw	r22, r10
    1718:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZN5Print5printEPK19__FlashStringHelper>
    sendWifiFrameStart(wifiPortDescriptor, flashStringLength(header) + flashStringLength(data) + flashStringLength(S_CRLFCRLF));
    Serial.print(header);
    Serial.print(data);
    171c:	c8 01       	movw	r24, r16
    171e:	b4 01       	movw	r22, r8
    1720:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(FS(S_CRLFCRLF));
    1724:	c8 01       	movw	r24, r16
    1726:	b6 01       	movw	r22, r12
    1728:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(length);
    Serial.print(',');
  }

  static boolean sendWifiFrameStop(){
    s_restartWifiIfNoResponseAutomatically = false;
    172c:	10 92 05 01 	sts	0x0105, r1
    boolean rez = wifiExecuteCommand();
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	68 ee       	ldi	r22, 0xE8	; 232
    1736:	73 e0       	ldi	r23, 0x03	; 3
    1738:	0e 94 e6 09 	call	0x13cc	; 0x13cc <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    s_restartWifiIfNoResponseAutomatically = true;
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	80 93 05 01 	sts	0x0105, r24
    sendWifiFrameStart(wifiPortDescriptor, flashStringLength(header) + flashStringLength(data) + flashStringLength(S_CRLFCRLF));
    Serial.print(header);
    Serial.print(data);
    Serial.print(FS(S_CRLFCRLF));
    sendWifiFrameStop();
    sendWifiCloseConnection(wifiPortDescriptor);
    1742:	f3 01       	movw	r30, r6
    1744:	80 81       	ld	r24, Z
    1746:	0e 94 1b 0b 	call	0x1636	; 0x1636 <_ZN15GB_SerialHelper23sendWifiCloseConnectionEh>
  }
    174a:	1f 91       	pop	r17
    174c:	0f 91       	pop	r16
    174e:	ff 90       	pop	r15
    1750:	ef 90       	pop	r14
    1752:	df 90       	pop	r13
    1754:	cf 90       	pop	r12
    1756:	bf 90       	pop	r11
    1758:	af 90       	pop	r10
    175a:	9f 90       	pop	r9
    175c:	8f 90       	pop	r8
    175e:	7f 90       	pop	r7
    1760:	6f 90       	pop	r6
    1762:	08 95       	ret

00001764 <_ZN15GB_SerialHelper12sendWifiDataEhPK19__FlashStringHelper>:
    boolean rez = wifiExecuteCommand();
    s_restartWifiIfNoResponseAutomatically = true;
    return rez;
  }

  static void sendWifiData(const byte portDescriptor, const __FlashStringHelper* data){ // INT_MAX (own test) or 1400 bytes max (Wi-Fi spec restriction)
    1764:	1f 93       	push	r17
    1766:	cf 93       	push	r28
    1768:	df 93       	push	r29
    176a:	18 2f       	mov	r17, r24
    176c:	eb 01       	movw	r28, r22
    176e:	cb 01       	movw	r24, r22
    1770:	0e 94 87 04 	call	0x90e	; 0x90e <strlen_P>
    1774:	bc 01       	movw	r22, r24
    int length = flashStringLength(data);
    if (length == 0){
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	99 f0       	breq	.+38     	; 0x17a0 <_ZN15GB_SerialHelper12sendWifiDataEhPK19__FlashStringHelper+0x3c>
      return;
    }
    sendWifiFrameStart(portDescriptor, length);
    177a:	81 2f       	mov	r24, r17
    177c:	0e 94 36 0b 	call	0x166c	; 0x166c <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>
    Serial.print(data);
    1780:	88 eb       	ldi	r24, 0xB8	; 184
    1782:	93 e0       	ldi	r25, 0x03	; 3
    1784:	be 01       	movw	r22, r28
    1786:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(length);
    Serial.print(',');
  }

  static boolean sendWifiFrameStop(){
    s_restartWifiIfNoResponseAutomatically = false;
    178a:	10 92 05 01 	sts	0x0105, r1
    boolean rez = wifiExecuteCommand();
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	68 ee       	ldi	r22, 0xE8	; 232
    1794:	73 e0       	ldi	r23, 0x03	; 3
    1796:	0e 94 e6 09 	call	0x13cc	; 0x13cc <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    s_restartWifiIfNoResponseAutomatically = true;
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	80 93 05 01 	sts	0x0105, r24
      return;
    }
    sendWifiFrameStart(portDescriptor, length);
    Serial.print(data);
    sendWifiFrameStop();
  }
    17a0:	df 91       	pop	r29
    17a2:	cf 91       	pop	r28
    17a4:	1f 91       	pop	r17
    17a6:	08 95       	ret

000017a8 <_ZN15GB_SerialHelper16sendHttpNotFoundEh>:

  /////////////////////////////////////////////////////////////////////
  //                           HTTP PROTOCOL                         //
  /////////////////////////////////////////////////////////////////////

  static void sendHttpNotFound(const byte wifiPortDescriptor){ 
    17a8:	1f 93       	push	r17
    17aa:	18 2f       	mov	r17, r24
    sendWifiData(wifiPortDescriptor, F("HTTP/1.1 404 Not Found\r\nConnection: close\r\n\r\n"));
    17ac:	61 ee       	ldi	r22, 0xE1	; 225
    17ae:	74 e0       	ldi	r23, 0x04	; 4
    17b0:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_ZN15GB_SerialHelper12sendWifiDataEhPK19__FlashStringHelper>
    sendWifiCloseConnection(wifiPortDescriptor);
    17b4:	81 2f       	mov	r24, r17
    17b6:	0e 94 1b 0b 	call	0x1636	; 0x1636 <_ZN15GB_SerialHelper23sendWifiCloseConnectionEh>
  }
    17ba:	1f 91       	pop	r17
    17bc:	08 95       	ret

000017be <_ZN15GB_SerialHelper17sendHttpOK_HeaderEh>:
    Serial.print(FS(S_CRLFCRLF));
    sendWifiFrameStop();
    sendWifiCloseConnection(wifiPortDescriptor);
  }

  static void sendHttpOK_Header(const byte wifiPortDescriptor){ 
    17be:	1f 93       	push	r17
    17c0:	18 2f       	mov	r17, r24
    sendWifiData(wifiPortDescriptor, F("HTTP/1.1 200 OK\r\nConnection: close\r\nContent-Type: text/html\r\n\r\n"));
    17c2:	69 ed       	ldi	r22, 0xD9	; 217
    17c4:	72 e0       	ldi	r23, 0x02	; 2
    17c6:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_ZN15GB_SerialHelper12sendWifiDataEhPK19__FlashStringHelper>
    Serial.print(data);
    sendWifiFrameStop();
  }

  static void sendWifiDataStart(const byte &wifiPortDescriptor){
    sendWifiFrameStart(wifiPortDescriptor, WIFI_MAX_SEND_FRAME_SIZE);
    17ca:	81 2f       	mov	r24, r17
    17cc:	68 e7       	ldi	r22, 0x78	; 120
    17ce:	75 e0       	ldi	r23, 0x05	; 5
    17d0:	0e 94 36 0b 	call	0x166c	; 0x166c <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>
    s_sendWifiDataFrameSize = 0;
    17d4:	10 92 c0 01 	sts	0x01C0, r1
    17d8:	10 92 bf 01 	sts	0x01BF, r1
  }

  static void sendHttpOK_Header(const byte wifiPortDescriptor){ 
    sendWifiData(wifiPortDescriptor, F("HTTP/1.1 200 OK\r\nConnection: close\r\nContent-Type: text/html\r\n\r\n"));
    sendWifiDataStart(wifiPortDescriptor);
  }
    17dc:	1f 91       	pop	r17
    17de:	08 95       	ret

000017e0 <_Z18updateBreezeStatusv>:
    17e0:	8d e0       	ldi	r24, 0x0D	; 13
    17e2:	0e 94 50 33 	call	0x66a0	; 0x66a0 <digitalRead>
    17e6:	60 e0       	ldi	r22, 0x00	; 0
    17e8:	89 2b       	or	r24, r25
    17ea:	09 f4       	brne	.+2      	; 0x17ee <_Z18updateBreezeStatusv+0xe>
    17ec:	61 e0       	ldi	r22, 0x01	; 1
    17ee:	8d e0       	ldi	r24, 0x0D	; 13
    17f0:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <digitalWrite>
    17f4:	08 95       	ret

000017f6 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>:
#define GB_PrintDirty_h

class GB_PrintDirty {
public:

  static String getFixedDigitsString(const int number, const byte numberOfDigits){
    17f6:	8f 92       	push	r8
    17f8:	9f 92       	push	r9
    17fa:	af 92       	push	r10
    17fc:	bf 92       	push	r11
    17fe:	cf 92       	push	r12
    1800:	df 92       	push	r13
    1802:	ef 92       	push	r14
    1804:	ff 92       	push	r15
    1806:	0f 93       	push	r16
    1808:	1f 93       	push	r17
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
    1812:	27 97       	sbiw	r28, 0x07	; 7
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	f8 94       	cli
    1818:	de bf       	out	0x3e, r29	; 62
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	cd bf       	out	0x3d, r28	; 61
    181e:	4c 01       	movw	r8, r24
    1820:	5b 01       	movw	r10, r22
    1822:	f4 2e       	mov	r15, r20
    String out;
    1824:	8e 01       	movw	r16, r28
    1826:	0f 5f       	subi	r16, 0xFF	; 255
    1828:	1f 4f       	sbci	r17, 0xFF	; 255
    182a:	c8 01       	movw	r24, r16
    182c:	60 e0       	ldi	r22, 0x00	; 0
    182e:	71 e0       	ldi	r23, 0x01	; 1
    1830:	0e 94 95 39 	call	0x732a	; 0x732a <_ZN6StringC1EPKc>
    1834:	cc 24       	eor	r12, r12
    1836:	dd 24       	eor	r13, r13
    for (int i = 0; i< numberOfDigits; i++){
    1838:	ef 2c       	mov	r14, r15
    183a:	ff 24       	eor	r15, r15
    183c:	07 c0       	rjmp	.+14     	; 0x184c <_ZN13GB_PrintDirty20getFixedDigitsStringEih+0x56>
    183e:	c8 01       	movw	r24, r16
    1840:	60 e3       	ldi	r22, 0x30	; 48
    1842:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN6String6concatEc>
    1846:	08 94       	sec
    1848:	c1 1c       	adc	r12, r1
    184a:	d1 1c       	adc	r13, r1
    184c:	ce 14       	cp	r12, r14
    184e:	df 04       	cpc	r13, r15
    1850:	b4 f3       	brlt	.-20     	; 0x183e <_ZN13GB_PrintDirty20getFixedDigitsStringEih+0x48>
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
    1852:	c8 01       	movw	r24, r16
    1854:	b5 01       	movw	r22, r10
    1856:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6String6concatEi>
      out +='0';
    }
    out += number;
    return out.substring(out.length()-numberOfDigits);
    185a:	4d 81       	ldd	r20, Y+5	; 0x05
    185c:	5e 81       	ldd	r21, Y+6	; 0x06
    185e:	4e 19       	sub	r20, r14
    1860:	5f 09       	sbc	r21, r15
    1862:	c4 01       	movw	r24, r8
    1864:	b8 01       	movw	r22, r16
    1866:	0e 94 5a 3a 	call	0x74b4	; 0x74b4 <_ZNK6String9substringEj>
    186a:	c8 01       	movw	r24, r16
    186c:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
  }
    1870:	c4 01       	movw	r24, r8
    1872:	27 96       	adiw	r28, 0x07	; 7
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	f8 94       	cli
    1878:	de bf       	out	0x3e, r29	; 62
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	cd bf       	out	0x3d, r28	; 61
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	1f 91       	pop	r17
    1884:	0f 91       	pop	r16
    1886:	ff 90       	pop	r15
    1888:	ef 90       	pop	r14
    188a:	df 90       	pop	r13
    188c:	cf 90       	pop	r12
    188e:	bf 90       	pop	r11
    1890:	af 90       	pop	r10
    1892:	9f 90       	pop	r9
    1894:	8f 90       	pop	r8
    1896:	08 95       	ret

00001898 <_ZN13GB_PrintDirty13getTimeStringEm>:
    out += getFixedDigitsString(temp,2);
    return out;
  }


  static String getTimeString(time_t time){
    1898:	cf 92       	push	r12
    189a:	df 92       	push	r13
    189c:	ef 92       	push	r14
    189e:	ff 92       	push	r15
    18a0:	0f 93       	push	r16
    18a2:	1f 93       	push	r17
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	e1 97       	sbiw	r28, 0x31	; 49
    18ae:	0f b6       	in	r0, 0x3f	; 63
    18b0:	f8 94       	cli
    18b2:	de bf       	out	0x3e, r29	; 62
    18b4:	0f be       	out	0x3f, r0	; 63
    18b6:	cd bf       	out	0x3d, r28	; 61
    18b8:	d8 2e       	mov	r13, r24
    18ba:	c9 2e       	mov	r12, r25
    18bc:	7a 01       	movw	r14, r20
    18be:	8b 01       	movw	r16, r22
    String out;
    18c0:	60 e0       	ldi	r22, 0x00	; 0
    18c2:	71 e0       	ldi	r23, 0x01	; 1
    18c4:	0e 94 95 39 	call	0x732a	; 0x732a <_ZN6StringC1EPKc>

    tmElements_t tm;
    breakTime(time, tm);
    18c8:	c8 01       	movw	r24, r16
    18ca:	b7 01       	movw	r22, r14
    18cc:	ae 01       	movw	r20, r28
    18ce:	4f 5f       	subi	r20, 0xFF	; 255
    18d0:	5f 4f       	sbci	r21, 0xFF	; 255
    18d2:	0e 94 b2 20 	call	0x4164	; 0x4164 <_Z9breakTimemR12tmElements_t>
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    18d6:	8d 2d       	mov	r24, r13
    18d8:	9c 2d       	mov	r25, r12
    18da:	6b e5       	ldi	r22, 0x5B	; 91
    18dc:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN6String6concatEc>

    out += '[';
    out += getFixedDigitsString(tm.Hour, 2);
    18e0:	8e 01       	movw	r16, r28
    18e2:	08 5f       	subi	r16, 0xF8	; 248
    18e4:	1f 4f       	sbci	r17, 0xFF	; 255
    18e6:	6b 81       	ldd	r22, Y+3	; 0x03
    18e8:	c8 01       	movw	r24, r16
    18ea:	70 e0       	ldi	r23, 0x00	; 0
    18ec:	42 e0       	ldi	r20, 0x02	; 2
    18ee:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    18f2:	8d 2d       	mov	r24, r13
    18f4:	9c 2d       	mov	r25, r12
    18f6:	b8 01       	movw	r22, r16
    18f8:	0e 94 44 39 	call	0x7288	; 0x7288 <_ZN6String6concatERKS_>
    18fc:	c8 01       	movw	r24, r16
    18fe:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1902:	8d 2d       	mov	r24, r13
    1904:	9c 2d       	mov	r25, r12
    1906:	6a e3       	ldi	r22, 0x3A	; 58
    1908:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN6String6concatEc>
    out += ':';
    out += getFixedDigitsString(tm.Minute, 2);
    190c:	8e 01       	movw	r16, r28
    190e:	01 5f       	subi	r16, 0xF1	; 241
    1910:	1f 4f       	sbci	r17, 0xFF	; 255
    1912:	6a 81       	ldd	r22, Y+2	; 0x02
    1914:	c8 01       	movw	r24, r16
    1916:	70 e0       	ldi	r23, 0x00	; 0
    1918:	42 e0       	ldi	r20, 0x02	; 2
    191a:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    191e:	8d 2d       	mov	r24, r13
    1920:	9c 2d       	mov	r25, r12
    1922:	b8 01       	movw	r22, r16
    1924:	0e 94 44 39 	call	0x7288	; 0x7288 <_ZN6String6concatERKS_>
    1928:	c8 01       	movw	r24, r16
    192a:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    192e:	8d 2d       	mov	r24, r13
    1930:	9c 2d       	mov	r25, r12
    1932:	6a e3       	ldi	r22, 0x3A	; 58
    1934:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN6String6concatEc>
    out += ':';
    out += getFixedDigitsString(tm.Second, 2);
    1938:	8e 01       	movw	r16, r28
    193a:	0a 5e       	subi	r16, 0xEA	; 234
    193c:	1f 4f       	sbci	r17, 0xFF	; 255
    193e:	69 81       	ldd	r22, Y+1	; 0x01
    1940:	c8 01       	movw	r24, r16
    1942:	70 e0       	ldi	r23, 0x00	; 0
    1944:	42 e0       	ldi	r20, 0x02	; 2
    1946:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    194a:	8d 2d       	mov	r24, r13
    194c:	9c 2d       	mov	r25, r12
    194e:	b8 01       	movw	r22, r16
    1950:	0e 94 44 39 	call	0x7288	; 0x7288 <_ZN6String6concatERKS_>
    1954:	c8 01       	movw	r24, r16
    1956:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    195a:	8d 2d       	mov	r24, r13
    195c:	9c 2d       	mov	r25, r12
    195e:	60 e2       	ldi	r22, 0x20	; 32
    1960:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN6String6concatEc>
    out += ' ';
    out += getFixedDigitsString(tm.Day, 2);
    1964:	8e 01       	movw	r16, r28
    1966:	03 5e       	subi	r16, 0xE3	; 227
    1968:	1f 4f       	sbci	r17, 0xFF	; 255
    196a:	6d 81       	ldd	r22, Y+5	; 0x05
    196c:	c8 01       	movw	r24, r16
    196e:	70 e0       	ldi	r23, 0x00	; 0
    1970:	42 e0       	ldi	r20, 0x02	; 2
    1972:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1976:	8d 2d       	mov	r24, r13
    1978:	9c 2d       	mov	r25, r12
    197a:	b8 01       	movw	r22, r16
    197c:	0e 94 44 39 	call	0x7288	; 0x7288 <_ZN6String6concatERKS_>
    1980:	c8 01       	movw	r24, r16
    1982:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1986:	8d 2d       	mov	r24, r13
    1988:	9c 2d       	mov	r25, r12
    198a:	6e e2       	ldi	r22, 0x2E	; 46
    198c:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN6String6concatEc>
    out +='.';
    out += getFixedDigitsString(tm.Month, 2);
    1990:	8e 01       	movw	r16, r28
    1992:	0c 5d       	subi	r16, 0xDC	; 220
    1994:	1f 4f       	sbci	r17, 0xFF	; 255
    1996:	6e 81       	ldd	r22, Y+6	; 0x06
    1998:	c8 01       	movw	r24, r16
    199a:	70 e0       	ldi	r23, 0x00	; 0
    199c:	42 e0       	ldi	r20, 0x02	; 2
    199e:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    19a2:	8d 2d       	mov	r24, r13
    19a4:	9c 2d       	mov	r25, r12
    19a6:	b8 01       	movw	r22, r16
    19a8:	0e 94 44 39 	call	0x7288	; 0x7288 <_ZN6String6concatERKS_>
    19ac:	c8 01       	movw	r24, r16
    19ae:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    19b2:	8d 2d       	mov	r24, r13
    19b4:	9c 2d       	mov	r25, r12
    19b6:	6e e2       	ldi	r22, 0x2E	; 46
    19b8:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN6String6concatEc>
    out += '.';
    out += getFixedDigitsString(tmYearToCalendar(tm.Year), 4); 
    19bc:	8e 01       	movw	r16, r28
    19be:	05 5d       	subi	r16, 0xD5	; 213
    19c0:	1f 4f       	sbci	r17, 0xFF	; 255
    19c2:	6f 81       	ldd	r22, Y+7	; 0x07
    19c4:	70 e0       	ldi	r23, 0x00	; 0
    19c6:	6e 54       	subi	r22, 0x4E	; 78
    19c8:	78 4f       	sbci	r23, 0xF8	; 248
    19ca:	c8 01       	movw	r24, r16
    19cc:	44 e0       	ldi	r20, 0x04	; 4
    19ce:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    19d2:	8d 2d       	mov	r24, r13
    19d4:	9c 2d       	mov	r25, r12
    19d6:	b8 01       	movw	r22, r16
    19d8:	0e 94 44 39 	call	0x7288	; 0x7288 <_ZN6String6concatERKS_>
    19dc:	c8 01       	movw	r24, r16
    19de:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    19e2:	8d 2d       	mov	r24, r13
    19e4:	9c 2d       	mov	r25, r12
    19e6:	6d e5       	ldi	r22, 0x5D	; 93
    19e8:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN6String6concatEc>
    out += ']';
    return out;
  } 
    19ec:	8d 2d       	mov	r24, r13
    19ee:	9c 2d       	mov	r25, r12
    19f0:	e1 96       	adiw	r28, 0x31	; 49
    19f2:	0f b6       	in	r0, 0x3f	; 63
    19f4:	f8 94       	cli
    19f6:	de bf       	out	0x3e, r29	; 62
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	cd bf       	out	0x3d, r28	; 61
    19fc:	cf 91       	pop	r28
    19fe:	df 91       	pop	r29
    1a00:	1f 91       	pop	r17
    1a02:	0f 91       	pop	r16
    1a04:	ff 90       	pop	r15
    1a06:	ef 90       	pop	r14
    1a08:	df 90       	pop	r13
    1a0a:	cf 90       	pop	r12
    1a0c:	08 95       	ret

00001a0e <_ZN9GB_Logger18getLogRecordSuffixERK9LogRecord>:
    else {
      return F("Unknown");
    }
  }
  
  static String getLogRecordSuffix(const LogRecord &logRecord){        
    1a0e:	df 92       	push	r13
    1a10:	ef 92       	push	r14
    1a12:	ff 92       	push	r15
    1a14:	0f 93       	push	r16
    1a16:	1f 93       	push	r17
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	2e 97       	sbiw	r28, 0x0e	; 14
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	de bf       	out	0x3e, r29	; 62
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	cd bf       	out	0x3d, r28	; 61
    1a2c:	e8 2e       	mov	r14, r24
    1a2e:	d9 2e       	mov	r13, r25
    1a30:	8b 01       	movw	r16, r22
    String out;
    1a32:	60 e0       	ldi	r22, 0x00	; 0
    1a34:	71 e0       	ldi	r23, 0x01	; 1
    1a36:	0e 94 95 39 	call	0x732a	; 0x732a <_ZN6StringC1EPKc>
  }
  static boolean isError(const LogRecord &logRecord){
    return (logRecord.data & B11000000) == B01000000;
  }
  static boolean isTemperature(const LogRecord &logRecord){
    return (logRecord.data & B11000000) == B11000000;
    1a3a:	f8 01       	movw	r30, r16
    1a3c:	f4 80       	ldd	r15, Z+4	; 0x04
    }
  }
  
  static String getLogRecordSuffix(const LogRecord &logRecord){        
    String out;
    if (isTemperature(logRecord)) {
    1a3e:	8f 2d       	mov	r24, r15
    1a40:	80 7c       	andi	r24, 0xC0	; 192
    1a42:	80 3c       	cpi	r24, 0xC0	; 192
    1a44:	39 f5       	brne	.+78     	; 0x1a94 <_ZN9GB_Logger18getLogRecordSuffixERK9LogRecord+0x86>
      byte temperature = (logRecord.data & B00111111);
      out += flashStringLoad(F(" ["));
    1a46:	8e 01       	movw	r16, r28
    1a48:	0f 5f       	subi	r16, 0xFF	; 255
    1a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a4c:	c8 01       	movw	r24, r16
    1a4e:	6b ee       	ldi	r22, 0xEB	; 235
    1a50:	70 e0       	ldi	r23, 0x00	; 0
    1a52:	0e 94 3f 06 	call	0xc7e	; 0xc7e <_ZL15flashStringLoadPKc>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1a56:	8e 2d       	mov	r24, r14
    1a58:	9d 2d       	mov	r25, r13
    1a5a:	b8 01       	movw	r22, r16
    1a5c:	0e 94 44 39 	call	0x7288	; 0x7288 <_ZN6String6concatERKS_>
    1a60:	c8 01       	movw	r24, r16
    1a62:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
    1a66:	ff e3       	ldi	r31, 0x3F	; 63
    1a68:	ff 22       	and	r15, r31
    1a6a:	8e 2d       	mov	r24, r14
    1a6c:	9d 2d       	mov	r25, r13
    1a6e:	6f 2d       	mov	r22, r15
    1a70:	0e 94 05 39 	call	0x720a	; 0x720a <_ZN6String6concatEh>
  }
  return str; 
}

static String flashStringLoad(const __FlashStringHelper* fstr){ 
  return flashStringLoad((const char PROGMEM*) fstr);
    1a74:	8e 01       	movw	r16, r28
    1a76:	08 5f       	subi	r16, 0xF8	; 248
    1a78:	1f 4f       	sbci	r17, 0xFF	; 255
      out += temperature;
      out += flashStringLoad(F("] C"));
    1a7a:	c8 01       	movw	r24, r16
    1a7c:	67 ee       	ldi	r22, 0xE7	; 231
    1a7e:	70 e0       	ldi	r23, 0x00	; 0
    1a80:	0e 94 3f 06 	call	0xc7e	; 0xc7e <_ZL15flashStringLoadPKc>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1a84:	8e 2d       	mov	r24, r14
    1a86:	9d 2d       	mov	r25, r13
    1a88:	b8 01       	movw	r22, r16
    1a8a:	0e 94 44 39 	call	0x7288	; 0x7288 <_ZN6String6concatERKS_>
    1a8e:	c8 01       	movw	r24, r16
    1a90:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
    }
    //Serial.print(F(" HEX: "));
    //GB_PrintDirty::printRAM(&((LogRecord)logRecord), sizeof(LogRecord));  

    return out;
  }
    1a94:	8e 2d       	mov	r24, r14
    1a96:	9d 2d       	mov	r25, r13
    1a98:	2e 96       	adiw	r28, 0x0e	; 14
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	1f 91       	pop	r17
    1aaa:	0f 91       	pop	r16
    1aac:	ff 90       	pop	r15
    1aae:	ef 90       	pop	r14
    1ab0:	df 90       	pop	r13
    1ab2:	08 95       	ret

00001ab4 <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh>:
  }


private:

  static void printDirtyLogRecord(const LogRecord &logRecord, const __FlashStringHelper* description, const boolean isStored, const byte temperature = 0xFF){
    1ab4:	af 92       	push	r10
    1ab6:	bf 92       	push	r11
    1ab8:	cf 92       	push	r12
    1aba:	df 92       	push	r13
    1abc:	ef 92       	push	r14
    1abe:	ff 92       	push	r15
    1ac0:	0f 93       	push	r16
    1ac2:	1f 93       	push	r17
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	6c 97       	sbiw	r28, 0x1c	; 28
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	de bf       	out	0x3e, r29	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	cd bf       	out	0x3d, r28	; 61
    1ad8:	6c 01       	movw	r12, r24
    1ada:	5b 01       	movw	r10, r22
    1adc:	04 2f       	mov	r16, r20
    if (!GB_SerialHelper::useSerialMonitor) {
    1ade:	80 91 ae 01 	lds	r24, 0x01AE
    1ae2:	88 23       	and	r24, r24
    1ae4:	09 f4       	brne	.+2      	; 0x1ae8 <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh+0x34>
    1ae6:	61 c0       	rjmp	.+194    	; 0x1baa <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh+0xf6>
      return;
    }
    Serial.print(F("LOG> ")); 
    1ae8:	88 eb       	ldi	r24, 0xB8	; 184
    1aea:	93 e0       	ldi	r25, 0x03	; 3
    1aec:	61 ee       	ldi	r22, 0xE1	; 225
    1aee:	70 e0       	ldi	r23, 0x00	; 0
    1af0:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZN5Print5printEPK19__FlashStringHelper>
    if (!isStored) {
    1af4:	00 23       	and	r16, r16
    1af6:	31 f4       	brne	.+12     	; 0x1b04 <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh+0x50>
      Serial.print(F("NOT STORED "));
    1af8:	88 eb       	ldi	r24, 0xB8	; 184
    1afa:	93 e0       	ldi	r25, 0x03	; 3
    1afc:	65 ed       	ldi	r22, 0xD5	; 213
    1afe:	70 e0       	ldi	r23, 0x00	; 0
    1b00:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZN5Print5printEPK19__FlashStringHelper>
    GB_StorageHelper::getLogRecordByIndex(index, logRecord);
    return logRecord;
  }

  static String getLogRecordPrefix(const LogRecord &logRecord){        
    String out;
    1b04:	7e 01       	movw	r14, r28
    1b06:	08 94       	sec
    1b08:	e1 1c       	adc	r14, r1
    1b0a:	f1 1c       	adc	r15, r1
    1b0c:	c7 01       	movw	r24, r14
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	71 e0       	ldi	r23, 0x01	; 1
    1b12:	0e 94 95 39 	call	0x732a	; 0x732a <_ZN6StringC1EPKc>
    out += GB_PrintDirty::getTimeString(logRecord.timeStamp);
    1b16:	8e 01       	movw	r16, r28
    1b18:	01 5f       	subi	r16, 0xF1	; 241
    1b1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1c:	f6 01       	movw	r30, r12
    1b1e:	40 81       	ld	r20, Z
    1b20:	51 81       	ldd	r21, Z+1	; 0x01
    1b22:	62 81       	ldd	r22, Z+2	; 0x02
    1b24:	73 81       	ldd	r23, Z+3	; 0x03
    1b26:	c8 01       	movw	r24, r16
    1b28:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_ZN13GB_PrintDirty13getTimeStringEm>
    1b2c:	c7 01       	movw	r24, r14
    1b2e:	b8 01       	movw	r22, r16
    1b30:	0e 94 44 39 	call	0x7288	; 0x7288 <_ZN6String6concatERKS_>
    1b34:	c8 01       	movw	r24, r16
    1b36:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1b3a:	c7 01       	movw	r24, r14
    1b3c:	60 e2       	ldi	r22, 0x20	; 32
    1b3e:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN6String6concatEc>
    out += ' '; 
    out += GB_PrintDirty::getHEX(logRecord.data, true);
    1b42:	8e 01       	movw	r16, r28
    1b44:	0a 5e       	subi	r16, 0xEA	; 234
    1b46:	1f 4f       	sbci	r17, 0xFF	; 255
    1b48:	c8 01       	movw	r24, r16
    1b4a:	f6 01       	movw	r30, r12
    1b4c:	64 81       	ldd	r22, Z+4	; 0x04
    1b4e:	41 e0       	ldi	r20, 0x01	; 1
    1b50:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN13GB_PrintDirty6getHEXEhh>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1b54:	c7 01       	movw	r24, r14
    1b56:	b8 01       	movw	r22, r16
    1b58:	0e 94 44 39 	call	0x7288	; 0x7288 <_ZN6String6concatERKS_>
    1b5c:	c8 01       	movw	r24, r16
    1b5e:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1b62:	c7 01       	movw	r24, r14
    1b64:	60 e2       	ldi	r22, 0x20	; 32
    1b66:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN6String6concatEc>
    }
    Serial.print(F("LOG> ")); 
    if (!isStored) {
      Serial.print(F("NOT STORED "));
    }
    Serial.print(getLogRecordPrefix(logRecord));    
    1b6a:	88 eb       	ldi	r24, 0xB8	; 184
    1b6c:	93 e0       	ldi	r25, 0x03	; 3
    1b6e:	b7 01       	movw	r22, r14
    1b70:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <_ZN5Print5printERK6String>
    1b74:	c7 01       	movw	r24, r14
    1b76:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
    Serial.print(description);
    1b7a:	88 eb       	ldi	r24, 0xB8	; 184
    1b7c:	93 e0       	ldi	r25, 0x03	; 3
    1b7e:	b5 01       	movw	r22, r10
    1b80:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(getLogRecordSuffix(logRecord));  
    1b84:	8e 01       	movw	r16, r28
    1b86:	08 5f       	subi	r16, 0xF8	; 248
    1b88:	1f 4f       	sbci	r17, 0xFF	; 255
    1b8a:	c8 01       	movw	r24, r16
    1b8c:	b6 01       	movw	r22, r12
    1b8e:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <_ZN9GB_Logger18getLogRecordSuffixERK9LogRecord>
    1b92:	88 eb       	ldi	r24, 0xB8	; 184
    1b94:	93 e0       	ldi	r25, 0x03	; 3
    1b96:	b8 01       	movw	r22, r16
    1b98:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <_ZN5Print5printERK6String>
    1b9c:	c8 01       	movw	r24, r16
    1b9e:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>

    Serial.println();      
    1ba2:	88 eb       	ldi	r24, 0xB8	; 184
    1ba4:	93 e0       	ldi	r25, 0x03	; 3
    1ba6:	0e 94 7f 36 	call	0x6cfe	; 0x6cfe <_ZN5Print7printlnEv>
  }
    1baa:	6c 96       	adiw	r28, 0x1c	; 28
    1bac:	0f b6       	in	r0, 0x3f	; 63
    1bae:	f8 94       	cli
    1bb0:	de bf       	out	0x3e, r29	; 62
    1bb2:	0f be       	out	0x3f, r0	; 63
    1bb4:	cd bf       	out	0x3d, r28	; 61
    1bb6:	cf 91       	pop	r28
    1bb8:	df 91       	pop	r29
    1bba:	1f 91       	pop	r17
    1bbc:	0f 91       	pop	r16
    1bbe:	ff 90       	pop	r15
    1bc0:	ef 90       	pop	r14
    1bc2:	df 90       	pop	r13
    1bc4:	cf 90       	pop	r12
    1bc6:	bf 90       	pop	r11
    1bc8:	af 90       	pop	r10
    1bca:	08 95       	ret

00001bcc <_ZN9GB_Logger8logEventER5Event>:
public:

  // Normal event uses uses format [00DDDDDD]
  //   00 - prefix for normal events 
  //   DDDDDD - event identificator
  static void logEvent(Event &event){
    1bcc:	ef 92       	push	r14
    1bce:	ff 92       	push	r15
    1bd0:	0f 93       	push	r16
    1bd2:	1f 93       	push	r17
    1bd4:	df 93       	push	r29
    1bd6:	cf 93       	push	r28
    1bd8:	00 d0       	rcall	.+0      	; 0x1bda <_ZN9GB_Logger8logEventER5Event+0xe>
    1bda:	00 d0       	rcall	.+0      	; 0x1bdc <_ZN9GB_Logger8logEventER5Event+0x10>
    1bdc:	0f 92       	push	r0
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
    1be2:	7c 01       	movw	r14, r24
    LogRecord logRecord(event.index);
    1be4:	fc 01       	movw	r30, r24
    1be6:	12 81       	ldd	r17, Z+2	; 0x02
struct LogRecord {
  time_t timeStamp;
  byte data;  

  LogRecord (byte data): 
  timeStamp(now()), data(data) {
    1be8:	0e 94 e7 22 	call	0x45ce	; 0x45ce <_Z3nowv>
    1bec:	69 83       	std	Y+1, r22	; 0x01
    1bee:	7a 83       	std	Y+2, r23	; 0x02
    1bf0:	8b 83       	std	Y+3, r24	; 0x03
    1bf2:	9c 83       	std	Y+4, r25	; 0x04
    1bf4:	1d 83       	std	Y+5, r17	; 0x05
    boolean isStored = GB_StorageHelper::storeLogRecord(logRecord);
    1bf6:	8e 01       	movw	r16, r28
    1bf8:	0f 5f       	subi	r16, 0xFF	; 255
    1bfa:	1f 4f       	sbci	r17, 0xFF	; 255
    1bfc:	c8 01       	movw	r24, r16
    1bfe:	0e 94 95 05 	call	0xb2a	; 0xb2a <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord>
    1c02:	48 2f       	mov	r20, r24
    printDirtyLogRecord(logRecord, event.description, isStored);
    1c04:	f7 01       	movw	r30, r14
    1c06:	63 81       	ldd	r22, Z+3	; 0x03
    1c08:	74 81       	ldd	r23, Z+4	; 0x04
    1c0a:	c8 01       	movw	r24, r16
    1c0c:	2f ef       	ldi	r18, 0xFF	; 255
    1c0e:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh>
    GB_SerialHelper::printDirtyEnd();
    1c12:	0e 94 56 08 	call	0x10ac	; 0x10ac <_ZN15GB_SerialHelper13printDirtyEndEv>
  }
    1c16:	0f 90       	pop	r0
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	cf 91       	pop	r28
    1c22:	df 91       	pop	r29
    1c24:	1f 91       	pop	r17
    1c26:	0f 91       	pop	r16
    1c28:	ff 90       	pop	r15
    1c2a:	ef 90       	pop	r14
    1c2c:	08 95       	ret

00001c2e <_Z10turnOffFanv>:
    1c2e:	84 e0       	ldi	r24, 0x04	; 4
    1c30:	0e 94 50 33 	call	0x66a0	; 0x66a0 <digitalRead>
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	61 f0       	breq	.+24     	; 0x1c50 <_Z10turnOffFanv+0x22>
    1c38:	84 e0       	ldi	r24, 0x04	; 4
    1c3a:	61 e0       	ldi	r22, 0x01	; 1
    1c3c:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <digitalWrite>
    1c40:	85 e0       	ldi	r24, 0x05	; 5
    1c42:	61 e0       	ldi	r22, 0x01	; 1
    1c44:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <digitalWrite>
    1c48:	8a e9       	ldi	r24, 0x9A	; 154
    1c4a:	91 e0       	ldi	r25, 0x01	; 1
    1c4c:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <_ZN9GB_Logger8logEventER5Event>
    1c50:	08 95       	ret

00001c52 <_Z9turnOnFani>:
    1c52:	cf 93       	push	r28
    1c54:	df 93       	push	r29
    1c56:	ec 01       	movw	r28, r24
    1c58:	84 e0       	ldi	r24, 0x04	; 4
    1c5a:	0e 94 50 33 	call	0x66a0	; 0x66a0 <digitalRead>
    1c5e:	89 2b       	or	r24, r25
    1c60:	79 f4       	brne	.+30     	; 0x1c80 <_Z9turnOnFani+0x2e>
    1c62:	85 e0       	ldi	r24, 0x05	; 5
    1c64:	0e 94 50 33 	call	0x66a0	; 0x66a0 <digitalRead>
    1c68:	8c 17       	cp	r24, r28
    1c6a:	9d 07       	cpc	r25, r29
    1c6c:	49 f4       	brne	.+18     	; 0x1c80 <_Z9turnOnFani+0x2e>
    1c6e:	13 c0       	rjmp	.+38     	; 0x1c96 <_Z9turnOnFani+0x44>
    1c70:	8f e9       	ldi	r24, 0x9F	; 159
    1c72:	91 e0       	ldi	r25, 0x01	; 1
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <_Z9turnOnFani+0x28>
    1c76:	84 ea       	ldi	r24, 0xA4	; 164
    1c78:	91 e0       	ldi	r25, 0x01	; 1
    1c7a:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <_ZN9GB_Logger8logEventER5Event>
    1c7e:	0b c0       	rjmp	.+22     	; 0x1c96 <_Z9turnOnFani+0x44>
    1c80:	85 e0       	ldi	r24, 0x05	; 5
    1c82:	6c 2f       	mov	r22, r28
    1c84:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <digitalWrite>
    1c88:	84 e0       	ldi	r24, 0x04	; 4
    1c8a:	60 e0       	ldi	r22, 0x00	; 0
    1c8c:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <digitalWrite>
    1c90:	21 97       	sbiw	r28, 0x01	; 1
    1c92:	89 f7       	brne	.-30     	; 0x1c76 <_Z9turnOnFani+0x24>
    1c94:	ed cf       	rjmp	.-38     	; 0x1c70 <_Z9turnOnFani+0x1e>
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	08 95       	ret

00001c9c <_Z12turnOffLightv>:
    1c9c:	83 e0       	ldi	r24, 0x03	; 3
    1c9e:	0e 94 50 33 	call	0x66a0	; 0x66a0 <digitalRead>
    1ca2:	01 97       	sbiw	r24, 0x01	; 1
    1ca4:	41 f0       	breq	.+16     	; 0x1cb6 <_Z12turnOffLightv+0x1a>
    1ca6:	83 e0       	ldi	r24, 0x03	; 3
    1ca8:	61 e0       	ldi	r22, 0x01	; 1
    1caa:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <digitalWrite>
    1cae:	80 e9       	ldi	r24, 0x90	; 144
    1cb0:	91 e0       	ldi	r25, 0x01	; 1
    1cb2:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <_ZN9GB_Logger8logEventER5Event>
    1cb6:	08 95       	ret

00001cb8 <_Z11turnOnLightv>:
    1cb8:	83 e0       	ldi	r24, 0x03	; 3
    1cba:	0e 94 50 33 	call	0x66a0	; 0x66a0 <digitalRead>
    1cbe:	89 2b       	or	r24, r25
    1cc0:	41 f0       	breq	.+16     	; 0x1cd2 <_Z11turnOnLightv+0x1a>
    1cc2:	83 e0       	ldi	r24, 0x03	; 3
    1cc4:	60 e0       	ldi	r22, 0x00	; 0
    1cc6:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <digitalWrite>
    1cca:	85 e9       	ldi	r24, 0x95	; 149
    1ccc:	91 e0       	ldi	r25, 0x01	; 1
    1cce:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <_ZN9GB_Logger8logEventER5Event>
    1cd2:	08 95       	ret

00001cd4 <_ZN9GB_Logger8logErrorER5Error>:

  // Error events uses format [01SSDDDD] 
  //   01 - prefix for error events 
  //   SS - length of errir seqence 
  //   DDDD - sequence data
  static void logError(Error &error){
    1cd4:	8f 92       	push	r8
    1cd6:	9f 92       	push	r9
    1cd8:	af 92       	push	r10
    1cda:	bf 92       	push	r11
    1cdc:	cf 92       	push	r12
    1cde:	df 92       	push	r13
    1ce0:	ef 92       	push	r14
    1ce2:	ff 92       	push	r15
    1ce4:	0f 93       	push	r16
    1ce6:	1f 93       	push	r17
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	00 d0       	rcall	.+0      	; 0x1cee <_ZN9GB_Logger8logErrorER5Error+0x1a>
    1cee:	00 d0       	rcall	.+0      	; 0x1cf0 <_ZN9GB_Logger8logErrorER5Error+0x1c>
    1cf0:	0f 92       	push	r0
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    1cf6:	7c 01       	movw	r14, r24
    LogRecord logRecord(B01000000|(B00000011 | error.sequenceSize-1)<<4 | (B00001111 & error.sequence));
    1cf8:	fc 01       	movw	r30, r24
    1cfa:	12 81       	ldd	r17, Z+2	; 0x02
    1cfc:	1f 70       	andi	r17, 0x0F	; 15
    1cfe:	10 64       	ori	r17, 0x40	; 64
    1d00:	83 81       	ldd	r24, Z+3	; 0x03
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	83 60       	ori	r24, 0x03	; 3
    1d08:	34 e0       	ldi	r19, 0x04	; 4
    1d0a:	88 0f       	add	r24, r24
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	3a 95       	dec	r19
    1d10:	e1 f7       	brne	.-8      	; 0x1d0a <_ZN9GB_Logger8logErrorER5Error+0x36>
    1d12:	18 2b       	or	r17, r24
    1d14:	0e 94 e7 22 	call	0x45ce	; 0x45ce <_Z3nowv>
    1d18:	69 83       	std	Y+1, r22	; 0x01
    1d1a:	7a 83       	std	Y+2, r23	; 0x02
    1d1c:	8b 83       	std	Y+3, r24	; 0x03
    1d1e:	9c 83       	std	Y+4, r25	; 0x04
    1d20:	1d 83       	std	Y+5, r17	; 0x05
    boolean isStoredNow = false;
    if(!error.isStored){
    1d22:	f7 01       	movw	r30, r14
    1d24:	86 81       	ldd	r24, Z+6	; 0x06
    1d26:	88 23       	and	r24, r24
    1d28:	11 f0       	breq	.+4      	; 0x1d2e <_ZN9GB_Logger8logErrorER5Error+0x5a>
    1d2a:	40 e0       	ldi	r20, 0x00	; 0
    1d2c:	07 c0       	rjmp	.+14     	; 0x1d3c <_ZN9GB_Logger8logErrorER5Error+0x68>
      error.isStored = GB_StorageHelper::storeLogRecord(logRecord);
    1d2e:	ce 01       	movw	r24, r28
    1d30:	01 96       	adiw	r24, 0x01	; 1
    1d32:	0e 94 95 05 	call	0xb2a	; 0xb2a <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord>
    1d36:	f7 01       	movw	r30, r14
    1d38:	86 83       	std	Z+6, r24	; 0x06
    1d3a:	41 e0       	ldi	r20, 0x01	; 1
      isStoredNow = true;
    } 
    printDirtyLogRecord(logRecord, error.description, isStoredNow);
    1d3c:	f7 01       	movw	r30, r14
    1d3e:	64 81       	ldd	r22, Z+4	; 0x04
    1d40:	75 81       	ldd	r23, Z+5	; 0x05
    1d42:	ce 01       	movw	r24, r28
    1d44:	01 96       	adiw	r24, 0x01	; 1
    1d46:	2f ef       	ldi	r18, 0xFF	; 255
    1d48:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh>
    GB_SerialHelper::printDirtyEnd();
    1d4c:	0e 94 56 08 	call	0x10ac	; 0x10ac <_ZN15GB_SerialHelper13printDirtyEndEv>
    error.isStored = true;   
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	f7 01       	movw	r30, r14
    1d54:	86 83       	std	Z+6, r24	; 0x06
    return (findByIndex(0xFF, 0xFF) == 0);
  }
  
  
void notify() {
  digitalWrite(ERROR_PIN, LOW);
    1d56:	8c e0       	ldi	r24, 0x0C	; 12
    1d58:	60 e0       	ldi	r22, 0x00	; 0
    1d5a:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <digitalWrite>
  delay(1000);
    1d5e:	68 ee       	ldi	r22, 0xE8	; 232
    1d60:	73 e0       	ldi	r23, 0x03	; 3
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	0e 94 1f 32 	call	0x643e	; 0x643e <delay>
  for (int i = sequenceSize-1; i >= 0; i--){
    1d6a:	f7 01       	movw	r30, r14
    1d6c:	83 81       	ldd	r24, Z+3	; 0x03
    1d6e:	00 e0       	ldi	r16, 0x00	; 0
    1d70:	10 e0       	ldi	r17, 0x00	; 0

  // Error events uses format [01SSDDDD] 
  //   01 - prefix for error events 
  //   SS - length of errir seqence 
  //   DDDD - sequence data
  static void logError(Error &error){
    1d72:	a8 2e       	mov	r10, r24
    1d74:	bb 24       	eor	r11, r11
    1d76:	45 01       	movw	r8, r10
    1d78:	08 94       	sec
    1d7a:	81 08       	sbc	r8, r1
    1d7c:	91 08       	sbc	r9, r1
    1d7e:	25 c0       	rjmp	.+74     	; 0x1dca <_ZN9GB_Logger8logErrorER5Error+0xf6>
    digitalWrite(ERROR_PIN, HIGH);
    1d80:	8c e0       	ldi	r24, 0x0C	; 12
    1d82:	61 e0       	ldi	r22, 0x01	; 1
    1d84:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <digitalWrite>
    if (bitRead(sequence, i)){
    1d88:	f7 01       	movw	r30, r14
    1d8a:	82 81       	ldd	r24, Z+2	; 0x02
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <_ZN9GB_Logger8logErrorER5Error+0xc0>
    1d90:	95 95       	asr	r25
    1d92:	87 95       	ror	r24
    1d94:	ca 94       	dec	r12
    1d96:	e2 f7       	brpl	.-8      	; 0x1d90 <_ZN9GB_Logger8logErrorER5Error+0xbc>
    1d98:	80 ff       	sbrs	r24, 0
    1d9a:	05 c0       	rjmp	.+10     	; 0x1da6 <_ZN9GB_Logger8logErrorER5Error+0xd2>
      delay(ERROR_LONG_SIGNAL_MS);
    1d9c:	60 e9       	ldi	r22, 0x90	; 144
    1d9e:	71 e0       	ldi	r23, 0x01	; 1
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	04 c0       	rjmp	.+8      	; 0x1dae <_ZN9GB_Logger8logErrorER5Error+0xda>
    } 
    else {
      delay(ERROR_SHORT_SIGNAL_MS);
    1da6:	64 e6       	ldi	r22, 0x64	; 100
    1da8:	70 e0       	ldi	r23, 0x00	; 0
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	0e 94 1f 32 	call	0x643e	; 0x643e <delay>
    } 
    digitalWrite(ERROR_PIN, LOW);
    1db2:	8c e0       	ldi	r24, 0x0C	; 12
    1db4:	60 e0       	ldi	r22, 0x00	; 0
    1db6:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <digitalWrite>
    delay(ERROR_DELAY_BETWEEN_SIGNALS_MS);
    1dba:	66 e9       	ldi	r22, 0x96	; 150
    1dbc:	70 e0       	ldi	r23, 0x00	; 0
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	0e 94 1f 32 	call	0x643e	; 0x643e <delay>
    1dc6:	0f 5f       	subi	r16, 0xFF	; 255
    1dc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dca:	64 01       	movw	r12, r8
    1dcc:	c0 1a       	sub	r12, r16
    1dce:	d1 0a       	sbc	r13, r17
  
  
void notify() {
  digitalWrite(ERROR_PIN, LOW);
  delay(1000);
  for (int i = sequenceSize-1; i >= 0; i--){
    1dd0:	0a 15       	cp	r16, r10
    1dd2:	1b 05       	cpc	r17, r11
    1dd4:	a9 f6       	brne	.-86     	; 0x1d80 <_ZN9GB_Logger8logErrorER5Error+0xac>
      delay(ERROR_SHORT_SIGNAL_MS);
    } 
    digitalWrite(ERROR_PIN, LOW);
    delay(ERROR_DELAY_BETWEEN_SIGNALS_MS);
  }
  digitalWrite(ERROR_PIN, LOW);
    1dd6:	8c e0       	ldi	r24, 0x0C	; 12
    1dd8:	60 e0       	ldi	r22, 0x00	; 0
    1dda:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <digitalWrite>
  delay(1000);
    1dde:	68 ee       	ldi	r22, 0xE8	; 232
    1de0:	73 e0       	ldi	r23, 0x03	; 3
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	0e 94 1f 32 	call	0x643e	; 0x643e <delay>
    } 
    printDirtyLogRecord(logRecord, error.description, isStoredNow);
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	1f 91       	pop	r17
    1dfa:	0f 91       	pop	r16
    1dfc:	ff 90       	pop	r15
    1dfe:	ef 90       	pop	r14
    1e00:	df 90       	pop	r13
    1e02:	cf 90       	pop	r12
    1e04:	bf 90       	pop	r11
    1e06:	af 90       	pop	r10
    1e08:	9f 90       	pop	r9
    1e0a:	8f 90       	pop	r8
    1e0c:	08 95       	ret

00001e0e <_ZN13GB_Controller15checkFreeMemoryEv>:
    resetFunc(); // call
  }

  // discover-memory-overflow-errors-in-the-arduino-c-code
  static void checkFreeMemory(){
    if(freeMemory() < 200){ 
    1e0e:	0e 94 80 20 	call	0x4100	; 0x4100 <freeMemory>
    1e12:	88 3c       	cpi	r24, 0xC8	; 200
    1e14:	91 05       	cpc	r25, r1
    1e16:	2c f4       	brge	.+10     	; 0x1e22 <_ZN13GB_Controller15checkFreeMemoryEv+0x14>
      GB_Logger::logError(ERROR_MEMORY_LOW);   
    1e18:	85 e7       	ldi	r24, 0x75	; 117
    1e1a:	91 e0       	ldi	r25, 0x01	; 1
    1e1c:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <_ZN9GB_Logger8logErrorER5Error>
    1e20:	08 95       	ret
  static boolean stopLogError(Error &error){
    if (error.isStored){
    1e22:	80 91 7b 01 	lds	r24, 0x017B
    1e26:	88 23       	and	r24, r24
    1e28:	11 f0       	breq	.+4      	; 0x1e2e <_ZN13GB_Controller15checkFreeMemoryEv+0x20>
      error.isStored = false;
    1e2a:	10 92 7b 01 	sts	0x017B, r1
    1e2e:	08 95       	ret

00001e30 <_ZN14GB_Thermometer14getTemperatureEh>:
    }

    return true;
  }

  static float getTemperature(boolean forceLog = false){
    1e30:	8f 92       	push	r8
    1e32:	9f 92       	push	r9
    1e34:	af 92       	push	r10
    1e36:	bf 92       	push	r11
    1e38:	cf 92       	push	r12
    1e3a:	df 92       	push	r13
    1e3c:	ef 92       	push	r14
    1e3e:	ff 92       	push	r15
    1e40:	0f 93       	push	r16
    1e42:	1f 93       	push	r17
    1e44:	df 93       	push	r29
    1e46:	cf 93       	push	r28
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <_ZN14GB_Thermometer14getTemperatureEh+0x1a>
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <_ZN14GB_Thermometer14getTemperatureEh+0x1c>
    1e4c:	0f 92       	push	r0
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	c8 2e       	mov	r12, r24

    if (statisticsTemperatureCount == 0){
    1e54:	20 91 04 02 	lds	r18, 0x0204
    1e58:	30 91 05 02 	lds	r19, 0x0205
    1e5c:	21 15       	cp	r18, r1
    1e5e:	31 05       	cpc	r19, r1
    1e60:	49 f4       	brne	.+18     	; 0x1e74 <_ZN14GB_Thermometer14getTemperatureEh+0x44>
      return workingTemperature; 
    1e62:	80 90 fc 01 	lds	r8, 0x01FC
    1e66:	90 90 fd 01 	lds	r9, 0x01FD
    1e6a:	a0 90 fe 01 	lds	r10, 0x01FE
    1e6e:	b0 90 ff 01 	lds	r11, 0x01FF
    1e72:	5e c0       	rjmp	.+188    	; 0x1f30 <_ZN14GB_Thermometer14getTemperatureEh+0x100>
    }

    float freshTemperature = statisticsTemperatureSumm/statisticsTemperatureCount;
    1e74:	b9 01       	movw	r22, r18
    1e76:	88 27       	eor	r24, r24
    1e78:	77 fd       	sbrc	r23, 7
    1e7a:	80 95       	com	r24
    1e7c:	98 2f       	mov	r25, r24
    1e7e:	0e 94 79 3c 	call	0x78f2	; 0x78f2 <__floatsisf>
    1e82:	9b 01       	movw	r18, r22
    1e84:	ac 01       	movw	r20, r24
    1e86:	60 91 00 02 	lds	r22, 0x0200
    1e8a:	70 91 01 02 	lds	r23, 0x0201
    1e8e:	80 91 02 02 	lds	r24, 0x0202
    1e92:	90 91 03 02 	lds	r25, 0x0203
    1e96:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divsf3>
    1e9a:	4b 01       	movw	r8, r22
    1e9c:	5c 01       	movw	r10, r24

    if (((int)freshTemperature != (int)workingTemperature) || forceLog) {          
    1e9e:	0e 94 46 3c 	call	0x788c	; 0x788c <__fixsfsi>
    1ea2:	7b 01       	movw	r14, r22
    1ea4:	8c 01       	movw	r16, r24
    1ea6:	60 91 fc 01 	lds	r22, 0x01FC
    1eaa:	70 91 fd 01 	lds	r23, 0x01FD
    1eae:	80 91 fe 01 	lds	r24, 0x01FE
    1eb2:	90 91 ff 01 	lds	r25, 0x01FF
    1eb6:	0e 94 46 3c 	call	0x788c	; 0x788c <__fixsfsi>
    1eba:	e6 16       	cp	r14, r22
    1ebc:	f7 06       	cpc	r15, r23
    1ebe:	11 f4       	brne	.+4      	; 0x1ec4 <_ZN14GB_Thermometer14getTemperatureEh+0x94>
    1ec0:	cc 20       	and	r12, r12
    1ec2:	f1 f0       	breq	.+60     	; 0x1f00 <_ZN14GB_Thermometer14getTemperatureEh+0xd0>
      GB_Logger::logTemperature((byte)freshTemperature);
    1ec4:	c5 01       	movw	r24, r10
    1ec6:	b4 01       	movw	r22, r8
    1ec8:	0e 94 4b 3c 	call	0x7896	; 0x7896 <__fixunssfsi>
    1ecc:	6b 01       	movw	r12, r22
    1ece:	7c 01       	movw	r14, r24
    1ed0:	16 2f       	mov	r17, r22
    1ed2:	0e 94 e7 22 	call	0x45ce	; 0x45ce <_Z3nowv>
    1ed6:	69 83       	std	Y+1, r22	; 0x01
    1ed8:	7a 83       	std	Y+2, r23	; 0x02
    1eda:	8b 83       	std	Y+3, r24	; 0x03
    1edc:	9c 83       	std	Y+4, r25	; 0x04
    1ede:	10 6c       	ori	r17, 0xC0	; 192
    1ee0:	1d 83       	std	Y+5, r17	; 0x05
  // Termometer events uses format [11TTTTTT].
  //   11 - prefix for termometer events
  //   TTTTTT - temperature [0..2^6] = [0..64]
  static void logTemperature(byte temperature){
    LogRecord logRecord(B11000000|temperature);
    boolean isStored = GB_StorageHelper::storeLogRecord(logRecord);
    1ee2:	8e 01       	movw	r16, r28
    1ee4:	0f 5f       	subi	r16, 0xFF	; 255
    1ee6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee8:	c8 01       	movw	r24, r16
    1eea:	0e 94 95 05 	call	0xb2a	; 0xb2a <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord>
    1eee:	48 2f       	mov	r20, r24
    printDirtyLogRecord(logRecord, FS(S_Temperature), isStored, temperature);
    1ef0:	c8 01       	movw	r24, r16
    1ef2:	6b e3       	ldi	r22, 0x3B	; 59
    1ef4:	72 e0       	ldi	r23, 0x02	; 2
    1ef6:	2c 2d       	mov	r18, r12
    1ef8:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh>
    GB_SerialHelper::printDirtyEnd();
    1efc:	0e 94 56 08 	call	0x10ac	; 0x10ac <_ZN15GB_SerialHelper13printDirtyEndEv>
    }

    workingTemperature = freshTemperature;
    1f00:	80 92 fc 01 	sts	0x01FC, r8
    1f04:	90 92 fd 01 	sts	0x01FD, r9
    1f08:	a0 92 fe 01 	sts	0x01FE, r10
    1f0c:	b0 92 ff 01 	sts	0x01FF, r11

    statisticsTemperatureSumm = 0.0;
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	a0 e0       	ldi	r26, 0x00	; 0
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	80 93 00 02 	sts	0x0200, r24
    1f1c:	90 93 01 02 	sts	0x0201, r25
    1f20:	a0 93 02 02 	sts	0x0202, r26
    1f24:	b0 93 03 02 	sts	0x0203, r27
    statisticsTemperatureCount = 0;
    1f28:	10 92 05 02 	sts	0x0205, r1
    1f2c:	10 92 04 02 	sts	0x0204, r1

    return workingTemperature;
  }
    1f30:	b4 01       	movw	r22, r8
    1f32:	c5 01       	movw	r24, r10
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	cf 91       	pop	r28
    1f40:	df 91       	pop	r29
    1f42:	1f 91       	pop	r17
    1f44:	0f 91       	pop	r16
    1f46:	ff 90       	pop	r15
    1f48:	ef 90       	pop	r14
    1f4a:	df 90       	pop	r13
    1f4c:	cf 90       	pop	r12
    1f4e:	bf 90       	pop	r11
    1f50:	af 90       	pop	r10
    1f52:	9f 90       	pop	r9
    1f54:	8f 90       	pop	r8
    1f56:	08 95       	ret

00001f58 <_Z18updateGrowboxStatev>:
    1f58:	ef 92       	push	r14
    1f5a:	ff 92       	push	r15
    1f5c:	0f 93       	push	r16
    1f5e:	1f 93       	push	r17
    1f60:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <_ZN13GB_Controller15checkFreeMemoryEv>
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <_ZN14GB_Thermometer14getTemperatureEh>
    1f6a:	7b 01       	movw	r14, r22
    1f6c:	8c 01       	movw	r16, r24
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	4c e0       	ldi	r20, 0x0C	; 12
    1f74:	52 e4       	ldi	r21, 0x42	; 66
    1f76:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__gesf2>
    1f7a:	88 23       	and	r24, r24
    1f7c:	5c f0       	brlt	.+22     	; 0x1f94 <_Z18updateGrowboxStatev+0x3c>
    1f7e:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <_Z12turnOffLightv>
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <_Z9turnOnFani>
    1f8a:	8e e6       	ldi	r24, 0x6E	; 110
    1f8c:	91 e0       	ldi	r25, 0x01	; 1
    1f8e:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <_ZN9GB_Logger8logErrorER5Error>
    1f92:	45 c0       	rjmp	.+138    	; 0x201e <_Z18updateGrowboxStatev+0xc6>
    1f94:	80 91 03 01 	lds	r24, 0x0103
    1f98:	88 23       	and	r24, r24
    1f9a:	b9 f0       	breq	.+46     	; 0x1fca <_Z18updateGrowboxStatev+0x72>
    1f9c:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <_Z11turnOnLightv>
    1fa0:	c8 01       	movw	r24, r16
    1fa2:	b7 01       	movw	r22, r14
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	48 eb       	ldi	r20, 0xB8	; 184
    1faa:	51 e4       	ldi	r21, 0x41	; 65
    1fac:	0e 94 da 3b 	call	0x77b4	; 0x77b4 <__cmpsf2>
    1fb0:	88 23       	and	r24, r24
    1fb2:	74 f1       	brlt	.+92     	; 0x2010 <_Z18updateGrowboxStatev+0xb8>
    1fb4:	c8 01       	movw	r24, r16
    1fb6:	b7 01       	movw	r22, r14
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	48 ee       	ldi	r20, 0xE8	; 232
    1fbe:	51 e4       	ldi	r21, 0x41	; 65
    1fc0:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__gesf2>
    1fc4:	18 16       	cp	r1, r24
    1fc6:	24 f5       	brge	.+72     	; 0x2010 <_Z18updateGrowboxStatev+0xb8>
    1fc8:	16 c0       	rjmp	.+44     	; 0x1ff6 <_Z18updateGrowboxStatev+0x9e>
    1fca:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <_Z12turnOffLightv>
    1fce:	c8 01       	movw	r24, r16
    1fd0:	b7 01       	movw	r22, r14
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	48 e9       	ldi	r20, 0x98	; 152
    1fd8:	51 e4       	ldi	r21, 0x41	; 65
    1fda:	0e 94 da 3b 	call	0x77b4	; 0x77b4 <__cmpsf2>
    1fde:	88 23       	and	r24, r24
    1fe0:	e4 f0       	brlt	.+56     	; 0x201a <_Z18updateGrowboxStatev+0xc2>
    1fe2:	c8 01       	movw	r24, r16
    1fe4:	b7 01       	movw	r22, r14
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 ee       	ldi	r20, 0xE0	; 224
    1fec:	51 e4       	ldi	r21, 0x41	; 65
    1fee:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__gesf2>
    1ff2:	18 16       	cp	r1, r24
    1ff4:	1c f4       	brge	.+6      	; 0x1ffc <_Z18updateGrowboxStatev+0xa4>
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	0c c0       	rjmp	.+24     	; 0x2014 <_Z18updateGrowboxStatev+0xbc>
    1ffc:	c8 01       	movw	r24, r16
    1ffe:	b7 01       	movw	r22, r14
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	48 ec       	ldi	r20, 0xC8	; 200
    2006:	51 e4       	ldi	r21, 0x41	; 65
    2008:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__gesf2>
    200c:	18 16       	cp	r1, r24
    200e:	2c f4       	brge	.+10     	; 0x201a <_Z18updateGrowboxStatev+0xc2>
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <_Z9turnOnFani>
    2018:	02 c0       	rjmp	.+4      	; 0x201e <_Z18updateGrowboxStatev+0xc6>
    201a:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <_Z10turnOffFanv>
    201e:	1f 91       	pop	r17
    2020:	0f 91       	pop	r16
    2022:	ff 90       	pop	r15
    2024:	ef 90       	pop	r14
    2026:	08 95       	ret

00002028 <_Z17switchToNightModev>:
    2028:	80 91 03 01 	lds	r24, 0x0103
    202c:	88 23       	and	r24, r24
    202e:	41 f0       	breq	.+16     	; 0x2040 <_Z17switchToNightModev+0x18>
    2030:	10 92 03 01 	sts	0x0103, r1
    2034:	8b e8       	ldi	r24, 0x8B	; 139
    2036:	91 e0       	ldi	r25, 0x01	; 1
    2038:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <_ZN9GB_Logger8logEventER5Event>
    203c:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_Z18updateGrowboxStatev>
    2040:	08 95       	ret

00002042 <_Z15switchToDayModev>:
    2042:	80 91 03 01 	lds	r24, 0x0103
    2046:	81 30       	cpi	r24, 0x01	; 1
    2048:	49 f0       	breq	.+18     	; 0x205c <_Z15switchToDayModev+0x1a>
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	80 93 03 01 	sts	0x0103, r24
    2050:	86 e8       	ldi	r24, 0x86	; 134
    2052:	91 e0       	ldi	r25, 0x01	; 1
    2054:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <_ZN9GB_Logger8logEventER5Event>
    2058:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_Z18updateGrowboxStatev>
    205c:	08 95       	ret

0000205e <_ZN15GB_SerialHelper11checkSerialEhh>:

  static void updateSerialMonitorStatus(){
    checkSerial(true, false); // not interruption cause Serial print problems
  }

  static void checkSerial(boolean checkSerialMonitor, boolean checkWifi){
    205e:	cf 92       	push	r12
    2060:	df 92       	push	r13
    2062:	ef 92       	push	r14
    2064:	ff 92       	push	r15
    2066:	0f 93       	push	r16
    2068:	1f 93       	push	r17
    206a:	df 93       	push	r29
    206c:	cf 93       	push	r28
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
    2072:	27 97       	sbiw	r28, 0x07	; 7
    2074:	0f b6       	in	r0, 0x3f	; 63
    2076:	f8 94       	cli
    2078:	de bf       	out	0x3e, r29	; 62
    207a:	0f be       	out	0x3f, r0	; 63
    207c:	cd bf       	out	0x3d, r28	; 61
    207e:	06 2f       	mov	r16, r22

    boolean oldUseSerialMonitor  = useSerialMonitor;
    2080:	c0 90 ae 01 	lds	r12, 0x01AE
    boolean oldUseSerialWifi     = useSerialWifi;
    2084:	d0 90 af 01 	lds	r13, 0x01AF
    boolean serialInUse          = (useSerialMonitor || useSerialWifi);
    2088:	cc 20       	and	r12, r12
    208a:	11 f0       	breq	.+4      	; 0x2090 <_ZN15GB_SerialHelper11checkSerialEhh+0x32>
    208c:	11 e0       	ldi	r17, 0x01	; 1
    208e:	04 c0       	rjmp	.+8      	; 0x2098 <_ZN15GB_SerialHelper11checkSerialEhh+0x3a>
    2090:	9d 2d       	mov	r25, r13
    2092:	d1 10       	cpse	r13, r1
    2094:	91 e0       	ldi	r25, 0x01	; 1
    2096:	19 2f       	mov	r17, r25

    if (checkSerialMonitor){
    2098:	88 23       	and	r24, r24
    209a:	51 f0       	breq	.+20     	; 0x20b0 <_ZN15GB_SerialHelper11checkSerialEhh+0x52>
      useSerialMonitor = (digitalRead(USE_SERIAL_MONOTOR_PIN) == SERIAL_ON);
    209c:	8b e0       	ldi	r24, 0x0B	; 11
    209e:	0e 94 50 33 	call	0x66a0	; 0x66a0 <digitalRead>
    20a2:	10 92 ae 01 	sts	0x01AE, r1
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	19 f4       	brne	.+6      	; 0x20b0 <_ZN15GB_SerialHelper11checkSerialEhh+0x52>
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	80 93 ae 01 	sts	0x01AE, r24
    }

    // Start serial, if we need
    if (!serialInUse && (useSerialMonitor || checkWifi)){
    20b0:	11 23       	and	r17, r17
    20b2:	a9 f4       	brne	.+42     	; 0x20de <_ZN15GB_SerialHelper11checkSerialEhh+0x80>
    20b4:	80 91 ae 01 	lds	r24, 0x01AE
    20b8:	88 23       	and	r24, r24
    20ba:	19 f4       	brne	.+6      	; 0x20c2 <_ZN15GB_SerialHelper11checkSerialEhh+0x64>
    20bc:	00 23       	and	r16, r16
    20be:	09 f4       	brne	.+2      	; 0x20c2 <_ZN15GB_SerialHelper11checkSerialEhh+0x64>
    20c0:	b0 c0       	rjmp	.+352    	; 0x2222 <_ZN15GB_SerialHelper11checkSerialEhh+0x1c4>
      Serial.begin(115200);
    20c2:	88 eb       	ldi	r24, 0xB8	; 184
    20c4:	93 e0       	ldi	r25, 0x03	; 3
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	52 ec       	ldi	r21, 0xC2	; 194
    20ca:	61 e0       	ldi	r22, 0x01	; 1
    20cc:	70 e0       	ldi	r23, 0x00	; 0
    20ce:	0e 94 2c 34 	call	0x6858	; 0x6858 <_ZN14HardwareSerial5beginEm>
      while (!Serial) {
    20d2:	88 eb       	ldi	r24, 0xB8	; 184
    20d4:	93 e0       	ldi	r25, 0x03	; 3
    20d6:	0e 94 c3 35 	call	0x6b86	; 0x6b86 <_ZN14HardwareSerialcvbEv>
    20da:	88 23       	and	r24, r24
    20dc:	d1 f3       	breq	.-12     	; 0x20d2 <_ZN15GB_SerialHelper11checkSerialEhh+0x74>
    if (!serialInUse){
      return; 
    }

    boolean loadWifiConfiguration = false;
    if (checkWifi || s_restartWifi){
    20de:	00 23       	and	r16, r16
    20e0:	29 f4       	brne	.+10     	; 0x20ec <_ZN15GB_SerialHelper11checkSerialEhh+0x8e>
    20e2:	80 91 b0 01 	lds	r24, 0x01B0
    20e6:	88 23       	and	r24, r24
    20e8:	09 f4       	brne	.+2      	; 0x20ec <_ZN15GB_SerialHelper11checkSerialEhh+0x8e>
    20ea:	4f c0       	rjmp	.+158    	; 0x218a <_ZN15GB_SerialHelper11checkSerialEhh+0x12c>
    20ec:	00 e0       	ldi	r16, 0x00	; 0
    20ee:	10 e0       	ldi	r17, 0x00	; 0
      for (int i = 0; i<2; i++){ // Sometimes first command returns ERROR, two attempts
        showWifiMessage(F("Restarting..."));
        
        String input = wifiExecuteRawCommand(F("at+reset=0"), 500); // spec boot time 210   // NOresponse checked wrong
    20f0:	7e 01       	movw	r14, r28
    20f2:	08 94       	sec
    20f4:	e1 1c       	adc	r14, r1
    20f6:	f1 1c       	adc	r15, r1
    }

    boolean loadWifiConfiguration = false;
    if (checkWifi || s_restartWifi){
      for (int i = 0; i<2; i++){ // Sometimes first command returns ERROR, two attempts
        showWifiMessage(F("Restarting..."));
    20f8:	87 e7       	ldi	r24, 0x77	; 119
    20fa:	91 e0       	ldi	r25, 0x01	; 1
    20fc:	61 e0       	ldi	r22, 0x01	; 1
    20fe:	0e 94 5d 08 	call	0x10ba	; 0x10ba <_ZN15GB_SerialHelper15showWifiMessageEPK19__FlashStringHelperh>
        
        String input = wifiExecuteRawCommand(F("at+reset=0"), 500); // spec boot time 210   // NOresponse checked wrong
    2102:	c7 01       	movw	r24, r14
    2104:	6c e6       	ldi	r22, 0x6C	; 108
    2106:	71 e0       	ldi	r23, 0x01	; 1
    2108:	44 ef       	ldi	r20, 0xF4	; 244
    210a:	51 e0       	ldi	r21, 0x01	; 1
    210c:	0e 94 8a 09 	call	0x1314	; 0x1314 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperi>
        
        useSerialWifi = flashStringEquals(input, S_WIFI_RESPONSE_WELLCOME);
    2110:	c7 01       	movw	r24, r14
    2112:	6e ee       	ldi	r22, 0xEE	; 238
    2114:	70 e0       	ldi	r23, 0x00	; 0
    2116:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZL17flashStringEqualsRK6StringPKc>
    211a:	80 93 af 01 	sts	0x01AF, r24
        if (useSerialWifi) {
    211e:	88 23       	and	r24, r24
    2120:	61 f0       	breq	.+24     	; 0x213a <_ZN15GB_SerialHelper11checkSerialEhh+0xdc>
          s_restartWifi = false;
    2122:	10 92 b0 01 	sts	0x01B0, r1
    2126:	80 91 4a 01 	lds	r24, 0x014A
    212a:	81 11       	cpse	r24, r1
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	18 2f       	mov	r17, r24
      return; 
    }

    boolean loadWifiConfiguration = false;
    if (checkWifi || s_restartWifi){
      for (int i = 0; i<2; i++){ // Sometimes first command returns ERROR, two attempts
    2130:	ce 01       	movw	r24, r28
    2132:	01 96       	adiw	r24, 0x01	; 1
    2134:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
    2138:	29 c0       	rjmp	.+82     	; 0x218c <_ZN15GB_SerialHelper11checkSerialEhh+0x12e>
          if(g_isGrowboxStarted){
            loadWifiConfiguration = true;
          }
          break;
        }
        if (useSerialMonitor && input.length() > 0){
    213a:	80 91 ae 01 	lds	r24, 0x01AE
    213e:	88 23       	and	r24, r24
    2140:	d9 f0       	breq	.+54     	; 0x2178 <_ZN15GB_SerialHelper11checkSerialEhh+0x11a>
    2142:	8d 81       	ldd	r24, Y+5	; 0x05
    2144:	9e 81       	ldd	r25, Y+6	; 0x06
    2146:	89 2b       	or	r24, r25
    2148:	b9 f0       	breq	.+46     	; 0x2178 <_ZN15GB_SerialHelper11checkSerialEhh+0x11a>
          showWifiMessage(F("Not correct wellcome message: "), false);
    214a:	8d e4       	ldi	r24, 0x4D	; 77
    214c:	91 e0       	ldi	r25, 0x01	; 1
    214e:	60 e0       	ldi	r22, 0x00	; 0
    2150:	0e 94 5d 08 	call	0x10ba	; 0x10ba <_ZN15GB_SerialHelper15showWifiMessageEPK19__FlashStringHelperh>
          GB_PrintDirty::printWithoutCRLF(input);
    2154:	c7 01       	movw	r24, r14
    2156:	0e 94 df 07 	call	0xfbe	; 0xfbe <_ZN13GB_PrintDirty16printWithoutCRLFERK6String>
          Serial.print(FS(S_Next));
    215a:	88 eb       	ldi	r24, 0xB8	; 184
    215c:	93 e0       	ldi	r25, 0x03	; 3
    215e:	64 e8       	ldi	r22, 0x84	; 132
    2160:	70 e0       	ldi	r23, 0x00	; 0
    2162:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZN5Print5printEPK19__FlashStringHelper>
          GB_PrintDirty::printHEX(input); 
    2166:	c7 01       	movw	r24, r14
    2168:	0e 94 94 07 	call	0xf28	; 0xf28 <_ZN13GB_PrintDirty8printHEXERK6String>
          Serial.println();
    216c:	88 eb       	ldi	r24, 0xB8	; 184
    216e:	93 e0       	ldi	r25, 0x03	; 3
    2170:	0e 94 7f 36 	call	0x6cfe	; 0x6cfe <_ZN5Print7printlnEv>
          printDirtyEnd();
    2174:	0e 94 56 08 	call	0x10ac	; 0x10ac <_ZN15GB_SerialHelper13printDirtyEndEv>
      return; 
    }

    boolean loadWifiConfiguration = false;
    if (checkWifi || s_restartWifi){
      for (int i = 0; i<2; i++){ // Sometimes first command returns ERROR, two attempts
    2178:	c7 01       	movw	r24, r14
    217a:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
    217e:	0f 5f       	subi	r16, 0xFF	; 255
    2180:	1f 4f       	sbci	r17, 0xFF	; 255
    2182:	02 30       	cpi	r16, 0x02	; 2
    2184:	11 05       	cpc	r17, r1
    2186:	09 f0       	breq	.+2      	; 0x218a <_ZN15GB_SerialHelper11checkSerialEhh+0x12c>
    2188:	b7 cf       	rjmp	.-146    	; 0x20f8 <_ZN15GB_SerialHelper11checkSerialEhh+0x9a>
    218a:	10 e0       	ldi	r17, 0x00	; 0
          printDirtyEnd();
        }
      }
    }

    if (useSerialMonitor != oldUseSerialMonitor){
    218c:	80 91 ae 01 	lds	r24, 0x01AE
    2190:	8c 15       	cp	r24, r12
    2192:	b9 f0       	breq	.+46     	; 0x21c2 <_ZN15GB_SerialHelper11checkSerialEhh+0x164>
      Serial.print(F("Serial monitor: "));
    2194:	88 eb       	ldi	r24, 0xB8	; 184
    2196:	93 e0       	ldi	r25, 0x03	; 3
    2198:	6c e3       	ldi	r22, 0x3C	; 60
    219a:	71 e0       	ldi	r23, 0x01	; 1
    219c:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZN5Print5printEPK19__FlashStringHelper>
      if (useSerialMonitor){
    21a0:	80 91 ae 01 	lds	r24, 0x01AE
    21a4:	88 23       	and	r24, r24
    21a6:	29 f0       	breq	.+10     	; 0x21b2 <_ZN15GB_SerialHelper11checkSerialEhh+0x154>
        Serial.println(FS(S_enabled));
    21a8:	88 eb       	ldi	r24, 0xB8	; 184
    21aa:	93 e0       	ldi	r25, 0x03	; 3
    21ac:	62 e0       	ldi	r22, 0x02	; 2
    21ae:	71 e0       	ldi	r23, 0x01	; 1
    21b0:	04 c0       	rjmp	.+8      	; 0x21ba <_ZN15GB_SerialHelper11checkSerialEhh+0x15c>
      } 
      else {
        Serial.println(FS(S_disabled));
    21b2:	88 eb       	ldi	r24, 0xB8	; 184
    21b4:	93 e0       	ldi	r25, 0x03	; 3
    21b6:	6b e0       	ldi	r22, 0x0B	; 11
    21b8:	71 e0       	ldi	r23, 0x01	; 1
    21ba:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <_ZN5Print7printlnEPK19__FlashStringHelper>
      }
      printDirtyEnd();
    21be:	0e 94 56 08 	call	0x10ac	; 0x10ac <_ZN15GB_SerialHelper13printDirtyEndEv>
    }
    if (useSerialWifi != oldUseSerialWifi && (useSerialMonitor || (useSerialMonitor != oldUseSerialMonitor ))){
    21c2:	90 91 af 01 	lds	r25, 0x01AF
    21c6:	9d 15       	cp	r25, r13
    21c8:	d9 f0       	breq	.+54     	; 0x2200 <_ZN15GB_SerialHelper11checkSerialEhh+0x1a2>
    21ca:	80 91 ae 01 	lds	r24, 0x01AE
    21ce:	88 23       	and	r24, r24
    21d0:	11 f4       	brne	.+4      	; 0x21d6 <_ZN15GB_SerialHelper11checkSerialEhh+0x178>
    21d2:	cc 20       	and	r12, r12
    21d4:	a9 f0       	breq	.+42     	; 0x2200 <_ZN15GB_SerialHelper11checkSerialEhh+0x1a2>
      if(useSerialWifi){ 
    21d6:	99 23       	and	r25, r25
    21d8:	59 f0       	breq	.+22     	; 0x21f0 <_ZN15GB_SerialHelper11checkSerialEhh+0x192>
        Serial.print(F("Serial Wi-Fi:"));
    21da:	88 eb       	ldi	r24, 0xB8	; 184
    21dc:	93 e0       	ldi	r25, 0x03	; 3
    21de:	6e e2       	ldi	r22, 0x2E	; 46
    21e0:	71 e0       	ldi	r23, 0x01	; 1
    21e2:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.println(FS(S_connected)); // shows when useSerialMonitor=false
    21e6:	88 eb       	ldi	r24, 0xB8	; 184
    21e8:	93 e0       	ldi	r25, 0x03	; 3
    21ea:	65 e1       	ldi	r22, 0x15	; 21
    21ec:	71 e0       	ldi	r23, 0x01	; 1
    21ee:	04 c0       	rjmp	.+8      	; 0x21f8 <_ZN15GB_SerialHelper11checkSerialEhh+0x19a>
      } 
      else {
        Serial.println(FS(S_disconnected));
    21f0:	88 eb       	ldi	r24, 0xB8	; 184
    21f2:	93 e0       	ldi	r25, 0x03	; 3
    21f4:	60 e2       	ldi	r22, 0x20	; 32
    21f6:	71 e0       	ldi	r23, 0x01	; 1
    21f8:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <_ZN5Print7printlnEPK19__FlashStringHelper>
      }
      printDirtyEnd();
    21fc:	0e 94 56 08 	call	0x10ac	; 0x10ac <_ZN15GB_SerialHelper13printDirtyEndEv>
    }

    // Close Serial connection if nessesary
    boolean newSerialInUse = (useSerialMonitor || useSerialWifi);
    2200:	80 91 ae 01 	lds	r24, 0x01AE
    2204:	88 23       	and	r24, r24
    2206:	21 f4       	brne	.+8      	; 0x2210 <_ZN15GB_SerialHelper11checkSerialEhh+0x1b2>
    2208:	80 91 af 01 	lds	r24, 0x01AF
    220c:	88 23       	and	r24, r24
    220e:	29 f0       	breq	.+10     	; 0x221a <_ZN15GB_SerialHelper11checkSerialEhh+0x1bc>
    if (!newSerialInUse){
      Serial.end();
      return;
    } 
    else if (loadWifiConfiguration){
    2210:	11 23       	and	r17, r17
    2212:	39 f0       	breq	.+14     	; 0x2222 <_ZN15GB_SerialHelper11checkSerialEhh+0x1c4>
      startWifi();
    2214:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN15GB_SerialHelper9startWifiEv>
    2218:	04 c0       	rjmp	.+8      	; 0x2222 <_ZN15GB_SerialHelper11checkSerialEhh+0x1c4>
    }

    // Close Serial connection if nessesary
    boolean newSerialInUse = (useSerialMonitor || useSerialWifi);
    if (!newSerialInUse){
      Serial.end();
    221a:	88 eb       	ldi	r24, 0xB8	; 184
    221c:	93 e0       	ldi	r25, 0x03	; 3
    221e:	0e 94 b3 34 	call	0x6966	; 0x6966 <_ZN14HardwareSerial3endEv>
      return;
    } 
    else if (loadWifiConfiguration){
      startWifi();
    }
  }
    2222:	27 96       	adiw	r28, 0x07	; 7
    2224:	0f b6       	in	r0, 0x3f	; 63
    2226:	f8 94       	cli
    2228:	de bf       	out	0x3e, r29	; 62
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	cd bf       	out	0x3d, r28	; 61
    222e:	cf 91       	pop	r28
    2230:	df 91       	pop	r29
    2232:	1f 91       	pop	r17
    2234:	0f 91       	pop	r16
    2236:	ff 90       	pop	r15
    2238:	ef 90       	pop	r14
    223a:	df 90       	pop	r13
    223c:	cf 90       	pop	r12
    223e:	08 95       	ret

00002240 <_Z25updateSerialMonitorStatusv>:
    }
    //wifiExecuteCommand(F("at+con_status"));
  }

  static void updateSerialMonitorStatus(){
    checkSerial(true, false); // not interruption cause Serial print problems
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	60 e0       	ldi	r22, 0x00	; 0
    2244:	0e 94 2f 10 	call	0x205e	; 0x205e <_ZN15GB_SerialHelper11checkSerialEhh>
    2248:	08 95       	ret

0000224a <_Z16updateWiFiStatusv>:
    s_wifiSID = _s_wifiSID;
    s_wifiPass = _s_wifiPass;
  }

  static void updateWiFiStatus(){
    if (s_restartWifi){
    224a:	80 91 b0 01 	lds	r24, 0x01B0
    224e:	88 23       	and	r24, r24
    2250:	21 f0       	breq	.+8      	; 0x225a <_Z16updateWiFiStatusv+0x10>
      checkSerial(false, true);
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	61 e0       	ldi	r22, 0x01	; 1
    2256:	0e 94 2f 10 	call	0x205e	; 0x205e <_ZN15GB_SerialHelper11checkSerialEhh>
    225a:	08 95       	ret

0000225c <_ZN14GB_Thermometer16updateStatisticsEv>:

    dallasTemperature.getAddress(oneWireAddress, 0); // search for devices on the bus and assign based on an index.
  }

  // TODO rename
  static boolean updateStatistics(){
    225c:	ef 92       	push	r14
    225e:	ff 92       	push	r15
    2260:	0f 93       	push	r16
    2262:	1f 93       	push	r17

    if(!dallasTemperature.requestTemperaturesByAddress(oneWireAddress)){
    2264:	81 ee       	ldi	r24, 0xE1	; 225
    2266:	91 e0       	ldi	r25, 0x01	; 1
    2268:	64 ef       	ldi	r22, 0xF4	; 244
    226a:	71 e0       	ldi	r23, 0x01	; 1
    226c:	0e 94 a3 2f 	call	0x5f46	; 0x5f46 <_ZN17DallasTemperature28requestTemperaturesByAddressEPh>
    2270:	88 23       	and	r24, r24
    2272:	19 f4       	brne	.+6      	; 0x227a <_ZN14GB_Thermometer16updateStatisticsEv+0x1e>
      GB_Logger::logError(ERROR_TERMOMETER_DISCONNECTED);
    2274:	80 e6       	ldi	r24, 0x60	; 96
    2276:	91 e0       	ldi	r25, 0x01	; 1
    2278:	0e c0       	rjmp	.+28     	; 0x2296 <_ZN14GB_Thermometer16updateStatisticsEv+0x3a>
      return false;
    };

    float freshTemperature = dallasTemperature.getTempC(oneWireAddress);
    227a:	81 ee       	ldi	r24, 0xE1	; 225
    227c:	91 e0       	ldi	r25, 0x01	; 1
    227e:	64 ef       	ldi	r22, 0xF4	; 244
    2280:	71 e0       	ldi	r23, 0x01	; 1
    2282:	0e 94 39 2f 	call	0x5e72	; 0x5e72 <_ZN17DallasTemperature8getTempCEPh>
    2286:	7b 01       	movw	r14, r22
    2288:	8c 01       	movw	r16, r24

    if ((int)freshTemperature == 0){
    228a:	0e 94 46 3c 	call	0x788c	; 0x788c <__fixsfsi>
    228e:	67 2b       	or	r22, r23
    2290:	31 f4       	brne	.+12     	; 0x229e <_ZN14GB_Thermometer16updateStatisticsEv+0x42>
      GB_Logger::logError(ERROR_TERMOMETER_ZERO_VALUE);  
    2292:	87 e6       	ldi	r24, 0x67	; 103
    2294:	91 e0       	ldi	r25, 0x01	; 1
    2296:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <_ZN9GB_Logger8logErrorER5Error>
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	39 c0       	rjmp	.+114    	; 0x2310 <_ZN14GB_Thermometer16updateStatisticsEv+0xb4>
      return false;
    }

    statisticsTemperatureSumm += freshTemperature;
    229e:	60 91 00 02 	lds	r22, 0x0200
    22a2:	70 91 01 02 	lds	r23, 0x0201
    22a6:	80 91 02 02 	lds	r24, 0x0202
    22aa:	90 91 03 02 	lds	r25, 0x0203
    22ae:	a8 01       	movw	r20, r16
    22b0:	97 01       	movw	r18, r14
    22b2:	0e 94 76 3b 	call	0x76ec	; 0x76ec <__addsf3>
    22b6:	60 93 00 02 	sts	0x0200, r22
    22ba:	70 93 01 02 	sts	0x0201, r23
    22be:	80 93 02 02 	sts	0x0202, r24
    22c2:	90 93 03 02 	sts	0x0203, r25
    statisticsTemperatureCount++;
    22c6:	20 91 04 02 	lds	r18, 0x0204
    22ca:	30 91 05 02 	lds	r19, 0x0205
    22ce:	2f 5f       	subi	r18, 0xFF	; 255
    22d0:	3f 4f       	sbci	r19, 0xFF	; 255
    22d2:	30 93 05 02 	sts	0x0205, r19
    22d6:	20 93 04 02 	sts	0x0204, r18
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
  static boolean stopLogError(Error &error){
    if (error.isStored){
    22da:	80 91 6d 01 	lds	r24, 0x016D
    22de:	88 23       	and	r24, r24
    22e0:	11 f4       	brne	.+4      	; 0x22e6 <_ZN14GB_Thermometer16updateStatisticsEv+0x8a>
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	03 c0       	rjmp	.+6      	; 0x22ec <_ZN14GB_Thermometer16updateStatisticsEv+0x90>
      error.isStored = false;
    22e6:	10 92 6d 01 	sts	0x016D, r1
    22ea:	91 e0       	ldi	r25, 0x01	; 1
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
  static boolean stopLogError(Error &error){
    if (error.isStored){
    22ec:	80 91 66 01 	lds	r24, 0x0166
    22f0:	88 23       	and	r24, r24
    22f2:	19 f0       	breq	.+6      	; 0x22fa <_ZN14GB_Thermometer16updateStatisticsEv+0x9e>
      error.isStored = false;
    22f4:	10 92 66 01 	sts	0x0166, r1
    22f8:	81 e0       	ldi	r24, 0x01	; 1

    boolean forceLog = 
      GB_Logger::stopLogError(ERROR_TERMOMETER_ZERO_VALUE) |
      GB_Logger::stopLogError(ERROR_TERMOMETER_DISCONNECTED); 
    if (forceLog) {
    22fa:	89 2b       	or	r24, r25
    22fc:	11 f0       	breq	.+4      	; 0x2302 <_ZN14GB_Thermometer16updateStatisticsEv+0xa6>
      getTemperature(true);
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	04 c0       	rjmp	.+8      	; 0x230a <_ZN14GB_Thermometer16updateStatisticsEv+0xae>
    }
    else if (statisticsTemperatureCount > 100){
    2302:	25 36       	cpi	r18, 0x65	; 101
    2304:	31 05       	cpc	r19, r1
    2306:	1c f0       	brlt	.+6      	; 0x230e <_ZN14GB_Thermometer16updateStatisticsEv+0xb2>
      getTemperature(); // prevents overflow 
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <_ZN14GB_Thermometer14getTemperatureEh>
    230e:	81 e0       	ldi	r24, 0x01	; 1
    }

    return true;
  }
    2310:	1f 91       	pop	r17
    2312:	0f 91       	pop	r16
    2314:	ff 90       	pop	r15
    2316:	ef 90       	pop	r14
    2318:	08 95       	ret

0000231a <_Z27updateThermometerStatisticsv>:
    231a:	0e 94 2e 11 	call	0x225c	; 0x225c <_ZN14GB_Thermometer16updateStatisticsEv>
    231e:	08 95       	ret

00002320 <_ZL21Serial_skipBytesUntiljPKc>:
      count++;
    }
    return count;
  }

  static size_t Serial_skipBytesUntil(size_t length, const char PROGMEM* pstr){   
    2320:	2f 92       	push	r2
    2322:	3f 92       	push	r3
    2324:	4f 92       	push	r4
    2326:	5f 92       	push	r5
    2328:	6f 92       	push	r6
    232a:	7f 92       	push	r7
    232c:	8f 92       	push	r8
    232e:	9f 92       	push	r9
    2330:	af 92       	push	r10
    2332:	bf 92       	push	r11
    2334:	cf 92       	push	r12
    2336:	df 92       	push	r13
    2338:	ef 92       	push	r14
    233a:	ff 92       	push	r15
    233c:	0f 93       	push	r16
    233e:	1f 93       	push	r17
    2340:	df 93       	push	r29
    2342:	cf 93       	push	r28
    2344:	00 d0       	rcall	.+0      	; 0x2346 <_ZL21Serial_skipBytesUntiljPKc+0x26>
    2346:	0f 92       	push	r0
    2348:	cd b7       	in	r28, 0x3d	; 61
    234a:	de b7       	in	r29, 0x3e	; 62
    234c:	3c 01       	movw	r6, r24
    234e:	5b 01       	movw	r10, r22
      if (count >= pstr_length && flashStringEquals(matcher, pstr_length, pstr)){
        break;
      } 
    }
    return count;
  }  
    2350:	4d b6       	in	r4, 0x3d	; 61
    2352:	5e b6       	in	r5, 0x3e	; 62
  /////////////////////////////////////////////////////////////////////
  //                         FALASH STRINGS                          //
  /////////////////////////////////////////////////////////////////////

static int flashStringLength(const char PROGMEM* pstr){ 
  return strlen_P(pstr);
    2354:	cb 01       	movw	r24, r22
    2356:	0e 94 87 04 	call	0x90e	; 0x90e <strlen_P>
    235a:	8c 01       	movw	r16, r24
    return count;
  }

  static size_t Serial_skipBytesUntil(size_t length, const char PROGMEM* pstr){   
    int pstr_length = flashStringLength(pstr);   
    char matcher[pstr_length];
    235c:	8d b7       	in	r24, 0x3d	; 61
    235e:	9e b7       	in	r25, 0x3e	; 62
    2360:	80 1b       	sub	r24, r16
    2362:	91 0b       	sbc	r25, r17
    2364:	0f b6       	in	r0, 0x3f	; 63
    2366:	f8 94       	cli
    2368:	9e bf       	out	0x3e, r25	; 62
    236a:	0f be       	out	0x3f, r0	; 63
    236c:	8d bf       	out	0x3d, r24	; 61
    236e:	cd b6       	in	r12, 0x3d	; 61
    2370:	de b6       	in	r13, 0x3e	; 62
    2372:	08 94       	sec
    2374:	c1 1c       	adc	r12, r1
    2376:	d1 1c       	adc	r13, r1

      for (int i = 1; i < pstr_length; i++){
        matcher[i-1] = matcher[i];  
      }
      matcher[pstr_length-1] = c;
      if (count >= pstr_length && flashStringEquals(matcher, pstr_length, pstr)){
    2378:	ca 82       	std	Y+2, r12	; 0x02
    237a:	db 82       	std	Y+3, r13	; 0x03
    237c:	ee 24       	eor	r14, r14
    237e:	ff 24       	eor	r15, r15
    char matcher[pstr_length];

    char c;
    size_t count = 0;
    while (count < length) {
      if (!Serial_timedRead(&c)){
    2380:	1e 01       	movw	r2, r28
    2382:	08 94       	sec
    2384:	21 1c       	adc	r2, r1
    2386:	31 1c       	adc	r3, r1
    return count;
  }

  static size_t Serial_skipBytesUntil(size_t length, const char PROGMEM* pstr){   
    int pstr_length = flashStringLength(pstr);   
    char matcher[pstr_length];
    2388:	01 50       	subi	r16, 0x01	; 1
    238a:	10 40       	sbci	r17, 0x00	; 0
      count++;

      for (int i = 1; i < pstr_length; i++){
        matcher[i-1] = matcher[i];  
      }
      matcher[pstr_length-1] = c;
    238c:	46 01       	movw	r8, r12
    238e:	80 0e       	add	r8, r16
    2390:	91 1e       	adc	r9, r17
    2392:	0f 5f       	subi	r16, 0xFF	; 255
    2394:	1f 4f       	sbci	r17, 0xFF	; 255
    2396:	21 c0       	rjmp	.+66     	; 0x23da <_ZL21Serial_skipBytesUntiljPKc+0xba>
    char matcher[pstr_length];

    char c;
    size_t count = 0;
    while (count < length) {
      if (!Serial_timedRead(&c)){
    2398:	c1 01       	movw	r24, r2
    239a:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_ZL16Serial_timedReadPc>
    239e:	88 23       	and	r24, r24
    23a0:	f9 f0       	breq	.+62     	; 0x23e0 <_ZL21Serial_skipBytesUntiljPKc+0xc0>
        break;
      }
      count++;
    23a2:	08 94       	sec
    23a4:	e1 1c       	adc	r14, r1
    23a6:	f1 1c       	adc	r15, r1
    23a8:	f6 01       	movw	r30, r12
    23aa:	21 e0       	ldi	r18, 0x01	; 1
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	04 c0       	rjmp	.+8      	; 0x23b8 <_ZL21Serial_skipBytesUntiljPKc+0x98>

      for (int i = 1; i < pstr_length; i++){
        matcher[i-1] = matcher[i];  
    23b0:	81 81       	ldd	r24, Z+1	; 0x01
    23b2:	81 93       	st	Z+, r24
      if (!Serial_timedRead(&c)){
        break;
      }
      count++;

      for (int i = 1; i < pstr_length; i++){
    23b4:	2f 5f       	subi	r18, 0xFF	; 255
    23b6:	3f 4f       	sbci	r19, 0xFF	; 255
    23b8:	20 17       	cp	r18, r16
    23ba:	31 07       	cpc	r19, r17
    23bc:	cc f3       	brlt	.-14     	; 0x23b0 <_ZL21Serial_skipBytesUntiljPKc+0x90>
        matcher[i-1] = matcher[i];  
      }
      matcher[pstr_length-1] = c;
    23be:	89 81       	ldd	r24, Y+1	; 0x01
    23c0:	f4 01       	movw	r30, r8
    23c2:	80 83       	st	Z, r24
      if (count >= pstr_length && flashStringEquals(matcher, pstr_length, pstr)){
    23c4:	e0 16       	cp	r14, r16
    23c6:	f1 06       	cpc	r15, r17
    23c8:	40 f0       	brcs	.+16     	; 0x23da <_ZL21Serial_skipBytesUntiljPKc+0xba>

static boolean flashStringEquals(const char* cstr, size_t cstr_length, const char PROGMEM* pstr){ 
  if (cstr_length != flashStringLength(pstr)){
    return false;
  }
  return (strncmp_P(cstr, pstr, cstr_length) == 0); // check this method
    23ca:	8a 81       	ldd	r24, Y+2	; 0x02
    23cc:	9b 81       	ldd	r25, Y+3	; 0x03
    23ce:	b5 01       	movw	r22, r10
    23d0:	a8 01       	movw	r20, r16
    23d2:	0e 94 90 04 	call	0x920	; 0x920 <strncmp_P>

      for (int i = 1; i < pstr_length; i++){
        matcher[i-1] = matcher[i];  
      }
      matcher[pstr_length-1] = c;
      if (count >= pstr_length && flashStringEquals(matcher, pstr_length, pstr)){
    23d6:	89 2b       	or	r24, r25
    23d8:	19 f0       	breq	.+6      	; 0x23e0 <_ZL21Serial_skipBytesUntiljPKc+0xc0>
    int pstr_length = flashStringLength(pstr);   
    char matcher[pstr_length];

    char c;
    size_t count = 0;
    while (count < length) {
    23da:	e6 14       	cp	r14, r6
    23dc:	f7 04       	cpc	r15, r7
    23de:	e0 f2       	brcs	.-72     	; 0x2398 <_ZL21Serial_skipBytesUntiljPKc+0x78>
      if (count >= pstr_length && flashStringEquals(matcher, pstr_length, pstr)){
        break;
      } 
    }
    return count;
  }  
    23e0:	c7 01       	movw	r24, r14
    23e2:	0f b6       	in	r0, 0x3f	; 63
    23e4:	f8 94       	cli
    23e6:	5e be       	out	0x3e, r5	; 62
    23e8:	0f be       	out	0x3f, r0	; 63
    23ea:	4d be       	out	0x3d, r4	; 61
    23ec:	0f 90       	pop	r0
    23ee:	0f 90       	pop	r0
    23f0:	0f 90       	pop	r0
    23f2:	cf 91       	pop	r28
    23f4:	df 91       	pop	r29
    23f6:	1f 91       	pop	r17
    23f8:	0f 91       	pop	r16
    23fa:	ff 90       	pop	r15
    23fc:	ef 90       	pop	r14
    23fe:	df 90       	pop	r13
    2400:	cf 90       	pop	r12
    2402:	bf 90       	pop	r11
    2404:	af 90       	pop	r10
    2406:	9f 90       	pop	r9
    2408:	8f 90       	pop	r8
    240a:	7f 90       	pop	r7
    240c:	6f 90       	pop	r6
    240e:	5f 90       	pop	r5
    2410:	4f 90       	pop	r4
    2412:	3f 90       	pop	r3
    2414:	2f 90       	pop	r2
    2416:	08 95       	ret

00002418 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_>:
      showWifiMessage(F("Start failed"));
      s_restartWifi = true;
    }
  }

  static GB_COMMAND_TYPE handleSerialEvent(String &input, byte &wifiPortDescriptor, String &postParams){
    2418:	7f 92       	push	r7
    241a:	8f 92       	push	r8
    241c:	9f 92       	push	r9
    241e:	af 92       	push	r10
    2420:	bf 92       	push	r11
    2422:	cf 92       	push	r12
    2424:	df 92       	push	r13
    2426:	ef 92       	push	r14
    2428:	ff 92       	push	r15
    242a:	0f 93       	push	r16
    242c:	1f 93       	push	r17
    242e:	df 93       	push	r29
    2430:	cf 93       	push	r28
    2432:	cd b7       	in	r28, 0x3d	; 61
    2434:	de b7       	in	r29, 0x3e	; 62
    2436:	a3 97       	sbiw	r28, 0x23	; 35
    2438:	0f b6       	in	r0, 0x3f	; 63
    243a:	f8 94       	cli
    243c:	de bf       	out	0x3e, r29	; 62
    243e:	0f be       	out	0x3f, r0	; 63
    2440:	cd bf       	out	0x3d, r28	; 61
    2442:	6c 01       	movw	r12, r24
    2444:	7b 01       	movw	r14, r22
    2446:	4a 01       	movw	r8, r20

    input = String();
    2448:	8e 01       	movw	r16, r28
    244a:	0f 5f       	subi	r16, 0xFF	; 255
    244c:	1f 4f       	sbci	r17, 0xFF	; 255
    244e:	c8 01       	movw	r24, r16
    2450:	60 e0       	ldi	r22, 0x00	; 0
    2452:	71 e0       	ldi	r23, 0x01	; 1
    2454:	0e 94 95 39 	call	0x732a	; 0x732a <_ZN6StringC1EPKc>
    2458:	c6 01       	movw	r24, r12
    245a:	b8 01       	movw	r22, r16
    245c:	0e 94 66 3a 	call	0x74cc	; 0x74cc <_ZN6StringaSERKS_>
    2460:	c8 01       	movw	r24, r16
    2462:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
    input.reserve(100);
    2466:	c6 01       	movw	r24, r12
    2468:	64 e6       	ldi	r22, 0x64	; 100
    246a:	70 e0       	ldi	r23, 0x00	; 0
    246c:	0e 94 5d 38 	call	0x70ba	; 0x70ba <_ZN6String7reserveEj>
    wifiPortDescriptor = 0xFF;
    2470:	8f ef       	ldi	r24, 0xFF	; 255
    2472:	d7 01       	movw	r26, r14
    2474:	8c 93       	st	X, r24
    postParams = String();
    2476:	8e 01       	movw	r16, r28
    2478:	08 5f       	subi	r16, 0xF8	; 248
    247a:	1f 4f       	sbci	r17, 0xFF	; 255
    247c:	c8 01       	movw	r24, r16
    247e:	60 e0       	ldi	r22, 0x00	; 0
    2480:	71 e0       	ldi	r23, 0x01	; 1
    2482:	0e 94 95 39 	call	0x732a	; 0x732a <_ZN6StringC1EPKc>
    2486:	c4 01       	movw	r24, r8
    2488:	b8 01       	movw	r22, r16
    248a:	0e 94 66 3a 	call	0x74cc	; 0x74cc <_ZN6StringaSERKS_>
    248e:	c8 01       	movw	r24, r16
    2490:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>

    Serial_readString(input, 13); // "at+recv_data="
    2494:	c6 01       	movw	r24, r12
    2496:	6d e0       	ldi	r22, 0x0D	; 13
    2498:	70 e0       	ldi	r23, 0x00	; 0
    249a:	0e 94 15 09 	call	0x122a	; 0x122a <_ZL17Serial_readStringR6Stringj>

    if (!flashStringEquals(input, F("at+recv_data="))){
    249e:	c6 01       	movw	r24, r12
    24a0:	63 e8       	ldi	r22, 0x83	; 131
    24a2:	72 e0       	ldi	r23, 0x02	; 2
    24a4:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZL17flashStringEqualsRK6StringPKc>
    24a8:	88 23       	and	r24, r24
    24aa:	c9 f4       	brne	.+50     	; 0x24de <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0xc6>
      // Read data from serial manager
      Serial_readString(input); // at first we should read, after manipulate  
    24ac:	c6 01       	movw	r24, r12
    24ae:	0e 94 6f 09 	call	0x12de	; 0x12de <_ZL17Serial_readStringR6String>

      if (flashStringStartsWith(input, S_WIFI_RESPONSE_WELLCOME) || flashStringStartsWith(input, S_WIFI_RESPONSE_ERROR)){
    24b2:	c6 01       	movw	r24, r12
    24b4:	6e ee       	ldi	r22, 0xEE	; 238
    24b6:	70 e0       	ldi	r23, 0x00	; 0
    24b8:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZL21flashStringStartsWithRK6StringPKc>
    24bc:	88 23       	and	r24, r24
    24be:	51 f4       	brne	.+20     	; 0x24d4 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0xbc>
    24c0:	c6 01       	movw	r24, r12
    24c2:	6d e7       	ldi	r22, 0x7D	; 125
    24c4:	70 e0       	ldi	r23, 0x00	; 0
    24c6:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZL21flashStringStartsWithRK6StringPKc>
    24ca:	88 23       	and	r24, r24
    24cc:	19 f4       	brne	.+6      	; 0x24d4 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0xbc>
    24ce:	21 e0       	ldi	r18, 0x01	; 1
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	09 c1       	rjmp	.+530    	; 0x26e6 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x2ce>
        checkSerial(false, true); // manual restart, or wrong state of Wi-Fi
    24d4:	80 e0       	ldi	r24, 0x00	; 0
    24d6:	61 e0       	ldi	r22, 0x01	; 1
    24d8:	0e 94 2f 10 	call	0x205e	; 0x205e <_ZN15GB_SerialHelper11checkSerialEhh>
    24dc:	02 c1       	rjmp	.+516    	; 0x26e2 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x2ca>

      return GB_COMMAND_SERIAL_MONITOR;
    } 
    else {
      // WARNING! We need to do it quick. Standart serial buffer capacity only 64 bytes
      Serial_readString(input, 1); // ends with '\r', cause '\n' will be removed
    24de:	c6 01       	movw	r24, r12
    24e0:	61 e0       	ldi	r22, 0x01	; 1
    24e2:	70 e0       	ldi	r23, 0x00	; 0
    24e4:	0e 94 15 09 	call	0x122a	; 0x122a <_ZL17Serial_readStringR6Stringj>
      byte firstRequestHeaderByte = input[13]; //
    24e8:	c6 01       	movw	r24, r12
    24ea:	6d e0       	ldi	r22, 0x0D	; 13
    24ec:	70 e0       	ldi	r23, 0x00	; 0
    24ee:	0e 94 eb 37 	call	0x6fd6	; 0x6fd6 <_ZN6StringixEj>
    24f2:	fc 01       	movw	r30, r24
    24f4:	e0 81       	ld	r30, Z
      
      if (firstRequestHeaderByte <= 0x07) {        
    24f6:	e8 30       	cpi	r30, 0x08	; 8
    24f8:	08 f0       	brcs	.+2      	; 0x24fc <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0xe4>
    24fa:	c1 c0       	rjmp	.+386    	; 0x267e <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x266>
        // Data Received Successfully
        wifiPortDescriptor = firstRequestHeaderByte; 
    24fc:	d7 01       	movw	r26, r14
    24fe:	ec 93       	st	X, r30
    
        Serial_readString(input, 8);  // get full request header
    2500:	c6 01       	movw	r24, r12
    2502:	68 e0       	ldi	r22, 0x08	; 8
    2504:	70 e0       	ldi	r23, 0x00	; 0
    2506:	0e 94 15 09 	call	0x122a	; 0x122a <_ZL17Serial_readStringR6Stringj>

        byte lowByteDataLength = input[20];
    250a:	c6 01       	movw	r24, r12
    250c:	64 e1       	ldi	r22, 0x14	; 20
    250e:	70 e0       	ldi	r23, 0x00	; 0
    2510:	0e 94 eb 37 	call	0x6fd6	; 0x6fd6 <_ZN6StringixEj>
    2514:	fc 01       	movw	r30, r24
    2516:	f0 80       	ld	r15, Z
        byte highByteDataLength = input[21];
    2518:	c6 01       	movw	r24, r12
    251a:	65 e1       	ldi	r22, 0x15	; 21
    251c:	70 e0       	ldi	r23, 0x00	; 0
    251e:	0e 94 eb 37 	call	0x6fd6	; 0x6fd6 <_ZN6StringixEj>
    2522:	fc 01       	movw	r30, r24
        word dataLength = (((word)highByteDataLength) << 8) + lowByteDataLength;
    2524:	10 81       	ld	r17, Z
    2526:	00 e0       	ldi	r16, 0x00	; 0
    2528:	0f 0d       	add	r16, r15
    252a:	11 1d       	adc	r17, r1

        // Check HTTP type 
        input = String();
    252c:	4f e0       	ldi	r20, 0x0F	; 15
    252e:	e4 2e       	mov	r14, r20
    2530:	f1 2c       	mov	r15, r1
    2532:	ec 0e       	add	r14, r28
    2534:	fd 1e       	adc	r15, r29
    2536:	c7 01       	movw	r24, r14
    2538:	60 e0       	ldi	r22, 0x00	; 0
    253a:	71 e0       	ldi	r23, 0x01	; 1
    253c:	0e 94 95 39 	call	0x732a	; 0x732a <_ZN6StringC1EPKc>
    2540:	c6 01       	movw	r24, r12
    2542:	b7 01       	movw	r22, r14
    2544:	0e 94 66 3a 	call	0x74cc	; 0x74cc <_ZN6StringaSERKS_>
    2548:	c7 01       	movw	r24, r14
    254a:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
        input.reserve(100);
    254e:	c6 01       	movw	r24, r12
    2550:	64 e6       	ldi	r22, 0x64	; 100
    2552:	70 e0       	ldi	r23, 0x00	; 0
    2554:	0e 94 5d 38 	call	0x70ba	; 0x70ba <_ZN6String7reserveEj>
        dataLength -= Serial_readStringUntil(input, dataLength, S_CRLF);
    2558:	c6 01       	movw	r24, r12
    255a:	b8 01       	movw	r22, r16
    255c:	4a e7       	ldi	r20, 0x7A	; 122
    255e:	50 e0       	ldi	r21, 0x00	; 0
    2560:	0e 94 b1 08 	call	0x1162	; 0x1162 <_ZL22Serial_readStringUntilR6StringjPKc>
    2564:	78 01       	movw	r14, r16
    2566:	e8 1a       	sub	r14, r24
    2568:	f9 0a       	sbc	r15, r25

        boolean isGet = flashStringStartsWith(input, S_WIFI_GET_);
    256a:	c6 01       	movw	r24, r12
    256c:	61 e7       	ldi	r22, 0x71	; 113
    256e:	72 e0       	ldi	r23, 0x02	; 2
    2570:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZL21flashStringStartsWithRK6StringPKc>
    2574:	b8 2e       	mov	r11, r24
        boolean isPost = flashStringStartsWith(input, S_WIFI_POST_);
    2576:	c6 01       	movw	r24, r12
    2578:	67 e7       	ldi	r22, 0x77	; 119
    257a:	72 e0       	ldi	r23, 0x02	; 2
    257c:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZL21flashStringStartsWithRK6StringPKc>

        if ((isGet || isPost) && flashStringEndsWith(input, S_CRLF)){
    2580:	bb 20       	and	r11, r11
    2582:	19 f4       	brne	.+6      	; 0x258a <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x172>
    2584:	88 23       	and	r24, r24
    2586:	09 f4       	brne	.+2      	; 0x258a <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x172>
    2588:	c3 c0       	rjmp	.+390    	; 0x2710 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x2f8>
    258a:	c6 01       	movw	r24, r12
    258c:	6a e7       	ldi	r22, 0x7A	; 122
    258e:	70 e0       	ldi	r23, 0x00	; 0
    2590:	0e 94 21 07 	call	0xe42	; 0xe42 <_ZL19flashStringEndsWithRK6StringPKc>
    2594:	88 23       	and	r24, r24
    2596:	09 f4       	brne	.+2      	; 0x259a <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x182>
    2598:	bb c0       	rjmp	.+374    	; 0x2710 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x2f8>
         
          int firstIndex;
          if (isGet){  
    259a:	bb 20       	and	r11, r11
    259c:	19 f0       	breq	.+6      	; 0x25a4 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x18c>
  /////////////////////////////////////////////////////////////////////
  //                         FALASH STRINGS                          //
  /////////////////////////////////////////////////////////////////////

static int flashStringLength(const char PROGMEM* pstr){ 
  return strlen_P(pstr);
    259e:	81 e7       	ldi	r24, 0x71	; 113
    25a0:	92 e0       	ldi	r25, 0x02	; 2
    25a2:	02 c0       	rjmp	.+4      	; 0x25a8 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x190>
            firstIndex = flashStringLength(S_WIFI_GET_) - 1;
          } 
          else {
            firstIndex = flashStringLength(S_WIFI_POST_) - 1;
    25a4:	87 e7       	ldi	r24, 0x77	; 119
    25a6:	92 e0       	ldi	r25, 0x02	; 2
    25a8:	0e 94 87 04 	call	0x90e	; 0x90e <strlen_P>
    25ac:	9c 01       	movw	r18, r24
    25ae:	21 50       	subi	r18, 0x01	; 1
    25b0:	30 40       	sbci	r19, 0x00	; 0
          }
          int lastIndex = input.indexOf(' ', firstIndex);
    25b2:	a2 2e       	mov	r10, r18
    25b4:	73 2e       	mov	r7, r19
    25b6:	c6 01       	movw	r24, r12
    25b8:	60 e2       	ldi	r22, 0x20	; 32
    25ba:	a9 01       	movw	r20, r18
    25bc:	0e 94 25 38 	call	0x704a	; 0x704a <_ZNK6String7indexOfEcj>
    25c0:	9c 01       	movw	r18, r24
          if (lastIndex == -1){
    25c2:	bf ef       	ldi	r27, 0xFF	; 255
    25c4:	8f 3f       	cpi	r24, 0xFF	; 255
    25c6:	9b 07       	cpc	r25, r27
    25c8:	29 f4       	brne	.+10     	; 0x25d4 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x1bc>
            lastIndex = input.length()-2; // \r\n
    25ca:	f6 01       	movw	r30, r12
    25cc:	24 81       	ldd	r18, Z+4	; 0x04
    25ce:	35 81       	ldd	r19, Z+5	; 0x05
    25d0:	22 50       	subi	r18, 0x02	; 2
    25d2:	30 40       	sbci	r19, 0x00	; 0
          }
          input = input.substring(firstIndex, lastIndex);             
    25d4:	8e 01       	movw	r16, r28
    25d6:	0a 5e       	subi	r16, 0xEA	; 234
    25d8:	1f 4f       	sbci	r17, 0xFF	; 255
    25da:	c8 01       	movw	r24, r16
    25dc:	b6 01       	movw	r22, r12
    25de:	4a 2d       	mov	r20, r10
    25e0:	57 2d       	mov	r21, r7
    25e2:	0e 94 13 3a 	call	0x7426	; 0x7426 <_ZNK6String9substringEjj>
    25e6:	c6 01       	movw	r24, r12
    25e8:	b8 01       	movw	r22, r16
    25ea:	0e 94 66 3a 	call	0x74cc	; 0x74cc <_ZN6StringaSERKS_>
    25ee:	c8 01       	movw	r24, r16
    25f0:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>

          if (isGet) {
    25f4:	bb 20       	and	r11, r11
    25f6:	51 f0       	breq	.+20     	; 0x260c <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x1f4>
            // We are not interested in this information
            Serial_skipBytes(dataLength); 
    25f8:	c7 01       	movw	r24, r14
    25fa:	0e 94 ed 08 	call	0x11da	; 0x11da <_ZL16Serial_skipBytesj>
            Serial_skipBytes(2); // remove end mark 
    25fe:	82 e0       	ldi	r24, 0x02	; 2
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	0e 94 ed 08 	call	0x11da	; 0x11da <_ZL16Serial_skipBytesj>
    2606:	24 e0       	ldi	r18, 0x04	; 4
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	6d c0       	rjmp	.+218    	; 0x26e6 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x2ce>
            return GB_COMMAND_HTTP_GET;
          } 
          else {
            // Post
            //word dataLength0 = dataLength;
            dataLength -= Serial_skipBytesUntil(dataLength, S_CRLFCRLF); // skip HTTP header
    260c:	c7 01       	movw	r24, r14
    260e:	6e e7       	ldi	r22, 0x7E	; 126
    2610:	72 e0       	ldi	r23, 0x02	; 2
    2612:	0e 94 90 11 	call	0x2320	; 0x2320 <_ZL21Serial_skipBytesUntiljPKc>
    2616:	87 01       	movw	r16, r14
    2618:	08 1b       	sub	r16, r24
    261a:	19 0b       	sbc	r17, r25
            //word dataLength1 = dataLength;
            dataLength -= Serial_readStringUntil(postParams, dataLength, S_CRLF); // read HTTP data;
    261c:	c4 01       	movw	r24, r8
    261e:	b8 01       	movw	r22, r16
    2620:	4a e7       	ldi	r20, 0x7A	; 122
    2622:	50 e0       	ldi	r21, 0x00	; 0
    2624:	0e 94 b1 08 	call	0x1162	; 0x1162 <_ZL22Serial_readStringUntilR6StringjPKc>
            // word dataLength2 = dataLength;           
            Serial_skipBytes(dataLength); // skip remaned endings
    2628:	98 01       	movw	r18, r16
    262a:	28 1b       	sub	r18, r24
    262c:	39 0b       	sbc	r19, r25
    262e:	c9 01       	movw	r24, r18
    2630:	0e 94 ed 08 	call	0x11da	; 0x11da <_ZL16Serial_skipBytesj>

            if (flashStringEndsWith(postParams, S_CRLF)){
    2634:	c4 01       	movw	r24, r8
    2636:	6a e7       	ldi	r22, 0x7A	; 122
    2638:	70 e0       	ldi	r23, 0x00	; 0
    263a:	0e 94 21 07 	call	0xe42	; 0xe42 <_ZL19flashStringEndsWithRK6StringPKc>
    263e:	88 23       	and	r24, r24
    2640:	b9 f0       	breq	.+46     	; 0x2670 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x258>
              postParams = postParams.substring(0, input.length()-2);   
    2642:	8e 01       	movw	r16, r28
    2644:	03 5e       	subi	r16, 0xE3	; 227
    2646:	1f 4f       	sbci	r17, 0xFF	; 255
    2648:	d6 01       	movw	r26, r12
    264a:	14 96       	adiw	r26, 0x04	; 4
    264c:	2d 91       	ld	r18, X+
    264e:	3c 91       	ld	r19, X
    2650:	15 97       	sbiw	r26, 0x05	; 5
    2652:	22 50       	subi	r18, 0x02	; 2
    2654:	30 40       	sbci	r19, 0x00	; 0
    2656:	c8 01       	movw	r24, r16
    2658:	b4 01       	movw	r22, r8
    265a:	40 e0       	ldi	r20, 0x00	; 0
    265c:	50 e0       	ldi	r21, 0x00	; 0
    265e:	0e 94 13 3a 	call	0x7426	; 0x7426 <_ZNK6String9substringEjj>
    2662:	c4 01       	movw	r24, r8
    2664:	b8 01       	movw	r22, r16
    2666:	0e 94 66 3a 	call	0x74cc	; 0x74cc <_ZN6StringaSERKS_>
    266a:	c8 01       	movw	r24, r16
    266c:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
             postParams += ", dataLength1=";
             postParams += dataLength1;
             postParams += ", dataLength2=";
             postParams += dataLength2;
             */
            Serial_skipBytes(2); // remove end mark 
    2670:	82 e0       	ldi	r24, 0x02	; 2
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	0e 94 ed 08 	call	0x11da	; 0x11da <_ZL16Serial_skipBytesj>
    2678:	25 e0       	ldi	r18, 0x05	; 5
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	34 c0       	rjmp	.+104    	; 0x26e6 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x2ce>
          Serial_skipBytes(2); // remove end mark 
          return GB_COMMAND_NONE;
        }

      } 
      else if (firstRequestHeaderByte == 0x80) {
    267e:	e0 38       	cpi	r30, 0x80	; 128
    2680:	a9 f4       	brne	.+42     	; 0x26ac <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x294>
        // TCP client connected
        Serial_readString(input, 1); 
    2682:	c6 01       	movw	r24, r12
    2684:	61 e0       	ldi	r22, 0x01	; 1
    2686:	70 e0       	ldi	r23, 0x00	; 0
    2688:	0e 94 15 09 	call	0x122a	; 0x122a <_ZL17Serial_readStringR6Stringj>
        wifiPortDescriptor = input[14]; 
    268c:	c6 01       	movw	r24, r12
    268e:	6e e0       	ldi	r22, 0x0E	; 14
    2690:	70 e0       	ldi	r23, 0x00	; 0
    2692:	0e 94 eb 37 	call	0x6fd6	; 0x6fd6 <_ZN6StringixEj>
    2696:	fc 01       	movw	r30, r24
    2698:	80 81       	ld	r24, Z
    269a:	f7 01       	movw	r30, r14
    269c:	80 83       	st	Z, r24
        Serial_skipBytes(8); 
    269e:	88 e0       	ldi	r24, 0x08	; 8
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	0e 94 ed 08 	call	0x11da	; 0x11da <_ZL16Serial_skipBytesj>
    26a6:	22 e0       	ldi	r18, 0x02	; 2
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	1d c0       	rjmp	.+58     	; 0x26e6 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x2ce>
        return GB_COMMAND_HTTP_CONNECTED;

      } 
      else if (firstRequestHeaderByte == 0x81) {
    26ac:	e1 38       	cpi	r30, 0x81	; 129
    26ae:	a9 f4       	brne	.+42     	; 0x26da <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x2c2>
        // TCP client disconnected
        Serial_readString(input, 1); 
    26b0:	c6 01       	movw	r24, r12
    26b2:	61 e0       	ldi	r22, 0x01	; 1
    26b4:	70 e0       	ldi	r23, 0x00	; 0
    26b6:	0e 94 15 09 	call	0x122a	; 0x122a <_ZL17Serial_readStringR6Stringj>
        wifiPortDescriptor = input[14]; 
    26ba:	c6 01       	movw	r24, r12
    26bc:	6e e0       	ldi	r22, 0x0E	; 14
    26be:	70 e0       	ldi	r23, 0x00	; 0
    26c0:	0e 94 eb 37 	call	0x6fd6	; 0x6fd6 <_ZN6StringixEj>
    26c4:	fc 01       	movw	r30, r24
    26c6:	80 81       	ld	r24, Z
    26c8:	d7 01       	movw	r26, r14
    26ca:	8c 93       	st	X, r24
        Serial_skipBytes(8); 
    26cc:	88 e0       	ldi	r24, 0x08	; 8
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	0e 94 ed 08 	call	0x11da	; 0x11da <_ZL16Serial_skipBytesj>
    26d4:	23 e0       	ldi	r18, 0x03	; 3
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	06 c0       	rjmp	.+12     	; 0x26e6 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x2ce>
        return GB_COMMAND_HTTP_DISCONNECTED;

      } 
      else if (firstRequestHeaderByte == 0xFF) { 
    26da:	ef 3f       	cpi	r30, 0xFF	; 255
    26dc:	e1 f0       	breq	.+56     	; 0x2716 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x2fe>
        return GB_COMMAND_NONE;

      } 
      else {
        // Unknown packet and it size
        cleanSerialBuffer();
    26de:	0e 94 44 08 	call	0x1088	; 0x1088 <_ZN15GB_SerialHelper17cleanSerialBufferEv>
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	30 e0       	ldi	r19, 0x00	; 0
        return GB_COMMAND_NONE;   
      }
    }
    return GB_COMMAND_NONE;  
  } 
    26e6:	c9 01       	movw	r24, r18
    26e8:	a3 96       	adiw	r28, 0x23	; 35
    26ea:	0f b6       	in	r0, 0x3f	; 63
    26ec:	f8 94       	cli
    26ee:	de bf       	out	0x3e, r29	; 62
    26f0:	0f be       	out	0x3f, r0	; 63
    26f2:	cd bf       	out	0x3d, r28	; 61
    26f4:	cf 91       	pop	r28
    26f6:	df 91       	pop	r29
    26f8:	1f 91       	pop	r17
    26fa:	0f 91       	pop	r16
    26fc:	ff 90       	pop	r15
    26fe:	ef 90       	pop	r14
    2700:	df 90       	pop	r13
    2702:	cf 90       	pop	r12
    2704:	bf 90       	pop	r11
    2706:	af 90       	pop	r10
    2708:	9f 90       	pop	r9
    270a:	8f 90       	pop	r8
    270c:	7f 90       	pop	r7
    270e:	08 95       	ret
            return GB_COMMAND_HTTP_POST; 
          }
        } 
        else {
          // Unknown HTTP request type
          Serial_skipBytes(dataLength); // remove all data
    2710:	c7 01       	movw	r24, r14
    2712:	0e 94 ed 08 	call	0x11da	; 0x11da <_ZL16Serial_skipBytesj>
          Serial_skipBytes(2); // remove end mark 
    2716:	82 e0       	ldi	r24, 0x02	; 2
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	0e 94 ed 08 	call	0x11da	; 0x11da <_ZL16Serial_skipBytesj>
    271e:	e1 cf       	rjmp	.-62     	; 0x26e2 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x2ca>

00002720 <_ZL16EEPROMStringLoadj>:
const word ES_printSendPinsStatus_SerialMonotor           = 0x100; // Use serial monitor on(1)/off(0)
const word ES_printSendPinsStatus_ErrorStatus             = 0x120; // Error status
const word ES_printSendPinsStatus_Breeze                  = 0x12D; // Breeze
const word ES_printSendPinsStatus_I2C                     = 0x134; // Reserved by I2C. Can be used, if SCL, SDA pins will be used

static String EEPROMStringLoad(word offset) {
    2720:	0f 93       	push	r16
    2722:	1f 93       	push	r17
    2724:	cf 93       	push	r28
    2726:	df 93       	push	r29
    2728:	18 2f       	mov	r17, r24
    272a:	09 2f       	mov	r16, r25
    272c:	eb 01       	movw	r28, r22
  String rez;
    272e:	60 e0       	ldi	r22, 0x00	; 0
    2730:	71 e0       	ldi	r23, 0x01	; 1
    2732:	0e 94 95 39 	call	0x732a	; 0x732a <_ZN6StringC1EPKc>
    2736:	04 c0       	rjmp	.+8      	; 0x2740 <_ZL16EEPROMStringLoadj+0x20>
    2738:	81 2f       	mov	r24, r17
    273a:	90 2f       	mov	r25, r16
    273c:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN6String6concatEc>
  char c = EEPROM.read(offset++);
   while(c){
    rez += c;
    c = EEPROM.read(offset++);
    2740:	86 e0       	ldi	r24, 0x06	; 6
    2742:	92 e0       	ldi	r25, 0x02	; 2
    2744:	be 01       	movw	r22, r28
    2746:	0e 94 79 20 	call	0x40f2	; 0x40f2 <_ZN11EEPROMClass4readEi>
    274a:	68 2f       	mov	r22, r24
    274c:	21 96       	adiw	r28, 0x01	; 1
const word ES_printSendPinsStatus_I2C                     = 0x134; // Reserved by I2C. Can be used, if SCL, SDA pins will be used

static String EEPROMStringLoad(word offset) {
  String rez;
  char c = EEPROM.read(offset++);
   while(c){
    274e:	88 23       	and	r24, r24
    2750:	99 f7       	brne	.-26     	; 0x2738 <_ZL16EEPROMStringLoadj+0x18>
    rez += c;
    c = EEPROM.read(offset++);
  }
  return rez;
}
    2752:	81 2f       	mov	r24, r17
    2754:	90 2f       	mov	r25, r16
    2756:	df 91       	pop	r29
    2758:	cf 91       	pop	r28
    275a:	1f 91       	pop	r17
    275c:	0f 91       	pop	r16
    275e:	08 95       	ret

00002760 <loop>:
    2760:	82 e2       	ldi	r24, 0x22	; 34
    2762:	92 e0       	ldi	r25, 0x02	; 2
    2764:	40 e0       	ldi	r20, 0x00	; 0
    2766:	50 e0       	ldi	r21, 0x00	; 0
    2768:	60 e0       	ldi	r22, 0x00	; 0
    276a:	70 e0       	ldi	r23, 0x00	; 0
    276c:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <_ZN15TimeAlarmsClass5delayEm>
    2770:	08 95       	ret

00002772 <_Z15printFreeMemoryv>:
    2772:	0f 93       	push	r16
    2774:	1f 93       	push	r17
    2776:	08 eb       	ldi	r16, 0xB8	; 184
    2778:	13 e0       	ldi	r17, 0x03	; 3
    277a:	c8 01       	movw	r24, r16
    277c:	60 ec       	ldi	r22, 0xC0	; 192
    277e:	70 e0       	ldi	r23, 0x00	; 0
    2780:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZN5Print5printEPK19__FlashStringHelper>
    2784:	0e 94 80 20 	call	0x4100	; 0x4100 <freeMemory>
    2788:	bc 01       	movw	r22, r24
    278a:	c8 01       	movw	r24, r16
    278c:	4a e0       	ldi	r20, 0x0A	; 10
    278e:	50 e0       	ldi	r21, 0x00	; 0
    2790:	0e 94 a5 37 	call	0x6f4a	; 0x6f4a <_ZN5Print5printEii>
    2794:	c8 01       	movw	r24, r16
    2796:	6e ec       	ldi	r22, 0xCE	; 206
    2798:	70 e0       	ldi	r23, 0x00	; 0
    279a:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <_ZN5Print7printlnEPK19__FlashStringHelper>
    279e:	1f 91       	pop	r17
    27a0:	0f 91       	pop	r16
    27a2:	08 95       	ret

000027a4 <_Z14isDayInGrowboxv>:
    27a4:	0e 94 8d 23 	call	0x471a	; 0x471a <_Z10timeStatusv>
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	29 f4       	brne	.+10     	; 0x27b6 <_Z14isDayInGrowboxv+0x12>
    27ac:	89 e5       	ldi	r24, 0x59	; 89
    27ae:	91 e0       	ldi	r25, 0x01	; 1
    27b0:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <_ZN9GB_Logger8logErrorER5Error>
    27b4:	06 c0       	rjmp	.+12     	; 0x27c2 <_Z14isDayInGrowboxv+0x1e>
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
  static boolean stopLogError(Error &error){
    if (error.isStored){
    27b6:	80 91 5f 01 	lds	r24, 0x015F
    27ba:	88 23       	and	r24, r24
    27bc:	11 f0       	breq	.+4      	; 0x27c2 <_Z14isDayInGrowboxv+0x1e>
      error.isStored = false;
    27be:	10 92 5f 01 	sts	0x015F, r1
    27c2:	0e 94 99 23 	call	0x4732	; 0x4732 <_Z4hourv>
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	02 97       	sbiw	r24, 0x02	; 2
    27ca:	07 97       	sbiw	r24, 0x07	; 7
    27cc:	08 f4       	brcc	.+2      	; 0x27d0 <_Z14isDayInGrowboxv+0x2c>
    27ce:	21 e0       	ldi	r18, 0x01	; 1
    27d0:	82 2f       	mov	r24, r18
    27d2:	08 95       	ret

000027d4 <setup>:
    27d4:	ef 92       	push	r14
    27d6:	ff 92       	push	r15
    27d8:	0f 93       	push	r16
    27da:	1f 93       	push	r17
    27dc:	df 93       	push	r29
    27de:	cf 93       	push	r28
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
    27e4:	2e 97       	sbiw	r28, 0x0e	; 14
    27e6:	0f b6       	in	r0, 0x3f	; 63
    27e8:	f8 94       	cli
    27ea:	de bf       	out	0x3e, r29	; 62
    27ec:	0f be       	out	0x3f, r0	; 63
    27ee:	cd bf       	out	0x3d, r28	; 61
    27f0:	8d e0       	ldi	r24, 0x0D	; 13
    27f2:	61 e0       	ldi	r22, 0x01	; 1
    27f4:	0e 94 bd 32 	call	0x657a	; 0x657a <pinMode>
    27f8:	8d e0       	ldi	r24, 0x0D	; 13
    27fa:	61 e0       	ldi	r22, 0x01	; 1
    27fc:	0e 94 bd 32 	call	0x657a	; 0x657a <pinMode>
    2800:	8c e0       	ldi	r24, 0x0C	; 12
    2802:	61 e0       	ldi	r22, 0x01	; 1
    2804:	0e 94 bd 32 	call	0x657a	; 0x657a <pinMode>
    2808:	8b e0       	ldi	r24, 0x0B	; 11
    280a:	62 e0       	ldi	r22, 0x02	; 2
    280c:	0e 94 bd 32 	call	0x657a	; 0x657a <pinMode>
    2810:	83 e0       	ldi	r24, 0x03	; 3
    2812:	61 e0       	ldi	r22, 0x01	; 1
    2814:	0e 94 bd 32 	call	0x657a	; 0x657a <pinMode>
    2818:	84 e0       	ldi	r24, 0x04	; 4
    281a:	61 e0       	ldi	r22, 0x01	; 1
    281c:	0e 94 bd 32 	call	0x657a	; 0x657a <pinMode>
    2820:	85 e0       	ldi	r24, 0x05	; 5
    2822:	61 e0       	ldi	r22, 0x01	; 1
    2824:	0e 94 bd 32 	call	0x657a	; 0x657a <pinMode>
    2828:	83 e0       	ldi	r24, 0x03	; 3
    282a:	61 e0       	ldi	r22, 0x01	; 1
    282c:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <digitalWrite>
    2830:	84 e0       	ldi	r24, 0x04	; 4
    2832:	61 e0       	ldi	r22, 0x01	; 1
    2834:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <digitalWrite>
    2838:	85 e0       	ldi	r24, 0x05	; 5
    283a:	61 e0       	ldi	r22, 0x01	; 1
    283c:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <digitalWrite>
    2840:	10 92 4a 01 	sts	0x014A, r1
    2844:	0e 94 80 20 	call	0x4100	; 0x4100 <freeMemory>
    2848:	7c 01       	movw	r14, r24
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	61 e0       	ldi	r22, 0x01	; 1
    284e:	0e 94 2f 10 	call	0x205e	; 0x205e <_ZN15GB_SerialHelper11checkSerialEhh>
    2852:	80 91 ae 01 	lds	r24, 0x01AE
    2856:	88 23       	and	r24, r24
    2858:	31 f0       	breq	.+12     	; 0x2866 <setup+0x92>
    285a:	0e 94 b9 13 	call	0x2772	; 0x2772 <_Z15printFreeMemoryv>
    285e:	8d e8       	ldi	r24, 0x8D	; 141
    2860:	95 e0       	ldi	r25, 0x05	; 5
    2862:	0e 94 29 08 	call	0x1052	; 0x1052 <_ZL17printStatusOnBootPK19__FlashStringHelper>
    2866:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <_Z15initLoggerModelv>
    this->sequenceSize = sequenceSize;
    this->description = description;
  }
  
  static Error* findByIndex(byte sequence, byte sequenceSize){
    Error* currentItemPtr = lastAddedItem;
    286a:	e0 91 4e 01 	lds	r30, 0x014E
    286e:	f0 91 4f 01 	lds	r31, 0x014F
    2872:	0a c0       	rjmp	.+20     	; 0x2888 <setup+0xb4>
    while (currentItemPtr != 0){
      if (currentItemPtr->sequence == sequence && currentItemPtr->sequenceSize == sequenceSize) {
    2874:	82 81       	ldd	r24, Z+2	; 0x02
    2876:	8f 3f       	cpi	r24, 0xFF	; 255
    2878:	19 f4       	brne	.+6      	; 0x2880 <setup+0xac>
    287a:	83 81       	ldd	r24, Z+3	; 0x03
    287c:	8f 3f       	cpi	r24, 0xFF	; 255
    287e:	39 f0       	breq	.+14     	; 0x288e <setup+0xba>
        return currentItemPtr;
      }
      currentItemPtr = (Error*)currentItemPtr->nextError;
    2880:	80 81       	ld	r24, Z
    2882:	91 81       	ldd	r25, Z+1	; 0x01
    2884:	9c 01       	movw	r18, r24
    2886:	f9 01       	movw	r30, r18
    this->description = description;
  }
  
  static Error* findByIndex(byte sequence, byte sequenceSize){
    Error* currentItemPtr = lastAddedItem;
    while (currentItemPtr != 0){
    2888:	30 97       	sbiw	r30, 0x00	; 0
    288a:	a1 f7       	brne	.-24     	; 0x2874 <setup+0xa0>
    288c:	92 c1       	rjmp	.+804    	; 0x2bb2 <setup+0x3de>
    288e:	80 91 ae 01 	lds	r24, 0x01AE
    2892:	88 23       	and	r24, r24
    2894:	21 f0       	breq	.+8      	; 0x289e <setup+0xca>
    2896:	82 e7       	ldi	r24, 0x72	; 114
    2898:	95 e0       	ldi	r25, 0x05	; 5
    289a:	0e 94 14 08 	call	0x1028	; 0x1028 <_ZL21printFatalErrorOnBootPK19__FlashStringHelper>
    289e:	68 e8       	ldi	r22, 0x88	; 136
    28a0:	73 e1       	ldi	r23, 0x13	; 19
    28a2:	80 e0       	ldi	r24, 0x00	; 0
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	0e 94 1f 32 	call	0x643e	; 0x643e <delay>
    28aa:	f9 cf       	rjmp	.-14     	; 0x289e <setup+0xca>
    // Serial.print("lastAddedEvent ev: ");
    //Serial.println(lastAddedEvent->description);
    Event* currentItemPtr = lastAddedEvent;
    while (currentItemPtr != 0){
      //Serial.println(currentItemPtr->description);
      if (currentItemPtr->index == index) {
    28ac:	82 81       	ldd	r24, Z+2	; 0x02
    28ae:	8f 3f       	cpi	r24, 0xFF	; 255
    28b0:	39 f0       	breq	.+14     	; 0x28c0 <setup+0xec>
        return currentItemPtr;
      }
      currentItemPtr = (Event*)currentItemPtr->nextEvent;
    28b2:	80 81       	ld	r24, Z
    28b4:	91 81       	ldd	r25, Z+1	; 0x01
    28b6:	9c 01       	movw	r18, r24
    28b8:	f9 01       	movw	r30, r18
    //Serial.print("search ev: ");    
    //Serial.println(index);
    // Serial.print("lastAddedEvent ev: ");
    //Serial.println(lastAddedEvent->description);
    Event* currentItemPtr = lastAddedEvent;
    while (currentItemPtr != 0){
    28ba:	30 97       	sbiw	r30, 0x00	; 0
    28bc:	b9 f7       	brne	.-18     	; 0x28ac <setup+0xd8>
    28be:	7e c1       	rjmp	.+764    	; 0x2bbc <setup+0x3e8>
    28c0:	80 91 ae 01 	lds	r24, 0x01AE
    28c4:	88 23       	and	r24, r24
    28c6:	21 f0       	breq	.+8      	; 0x28d0 <setup+0xfc>
    28c8:	87 e5       	ldi	r24, 0x57	; 87
    28ca:	95 e0       	ldi	r25, 0x05	; 5
    28cc:	0e 94 14 08 	call	0x1028	; 0x1028 <_ZL21printFatalErrorOnBootPK19__FlashStringHelper>
    28d0:	68 e8       	ldi	r22, 0x88	; 136
    28d2:	73 e1       	ldi	r23, 0x13	; 19
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	0e 94 1f 32 	call	0x643e	; 0x643e <delay>
    28dc:	f9 cf       	rjmp	.-14     	; 0x28d0 <setup+0xfc>
    28de:	81 e5       	ldi	r24, 0x51	; 81
    28e0:	95 e0       	ldi	r25, 0x05	; 5
    28e2:	0e 94 29 08 	call	0x1052	; 0x1052 <_ZL17printStatusOnBootPK19__FlashStringHelper>
    28e6:	83 e1       	ldi	r24, 0x13	; 19
    28e8:	9b e2       	ldi	r25, 0x2B	; 43
    28ea:	0e 94 76 23 	call	0x46ec	; 0x46ec <_Z15setSyncProviderPFmvE>
    28ee:	0e 94 8d 23 	call	0x471a	; 0x471a <_Z10timeStatusv>
    28f2:	89 2b       	or	r24, r25
    28f4:	59 f0       	breq	.+22     	; 0x290c <setup+0x138>
    28f6:	0e 94 94 23 	call	0x4728	; 0x4728 <_Z4yearv>
    28fa:	8f 5d       	subi	r24, 0xDF	; 223
    28fc:	97 40       	sbci	r25, 0x07	; 7
    28fe:	34 f4       	brge	.+12     	; 0x290c <setup+0x138>
    2900:	0e 94 94 23 	call	0x4728	; 0x4728 <_Z4yearv>
    2904:	85 5e       	subi	r24, 0xE5	; 229
    2906:	97 40       	sbci	r25, 0x07	; 7
    2908:	0c f4       	brge	.+2      	; 0x290c <setup+0x138>
    290a:	26 c1       	rjmp	.+588    	; 0x2b58 <setup+0x384>
    290c:	82 e5       	ldi	r24, 0x52	; 82
    290e:	91 e0       	ldi	r25, 0x01	; 1
    2910:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <_ZN9GB_Logger8logErrorER5Error>
    2914:	e8 cf       	rjmp	.-48     	; 0x28e6 <setup+0x112>
    2916:	10 92 58 01 	sts	0x0158, r1
    291a:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <_ZN13GB_Controller15checkFreeMemoryEv>
    291e:	80 91 ae 01 	lds	r24, 0x01AE
    2922:	88 23       	and	r24, r24
    2924:	49 f0       	breq	.+18     	; 0x2938 <setup+0x164>
    2926:	86 e4       	ldi	r24, 0x46	; 70
    2928:	95 e0       	ldi	r25, 0x05	; 5
    292a:	0e 94 29 08 	call	0x1052	; 0x1052 <_ZL17printStatusOnBootPK19__FlashStringHelper>
    292e:	04 c0       	rjmp	.+8      	; 0x2938 <setup+0x164>
public:

  static void start(){
    dallasTemperature.begin();
    while(dallasTemperature.getDeviceCount() == 0){
      GB_Logger::logError(ERROR_TERMOMETER_DISCONNECTED);
    2930:	80 e6       	ldi	r24, 0x60	; 96
    2932:	91 e0       	ldi	r25, 0x01	; 1
    2934:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <_ZN9GB_Logger8logErrorER5Error>
      dallasTemperature.begin();
    2938:	81 ee       	ldi	r24, 0xE1	; 225
    293a:	91 e0       	ldi	r25, 0x01	; 1
    293c:	0e 94 2b 30 	call	0x6056	; 0x6056 <_ZN17DallasTemperature5beginEv>

public:

  static void start(){
    dallasTemperature.begin();
    while(dallasTemperature.getDeviceCount() == 0){
    2940:	81 ee       	ldi	r24, 0xE1	; 225
    2942:	91 e0       	ldi	r25, 0x01	; 1
    2944:	0e 94 6d 2d 	call	0x5ada	; 0x5ada <_ZN17DallasTemperature14getDeviceCountEv>
    2948:	88 23       	and	r24, r24
    294a:	91 f3       	breq	.-28     	; 0x2930 <setup+0x15c>
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
  static boolean stopLogError(Error &error){
    if (error.isStored){
    294c:	80 91 66 01 	lds	r24, 0x0166
    2950:	88 23       	and	r24, r24
    2952:	11 f0       	breq	.+4      	; 0x2958 <setup+0x184>
      error.isStored = false;
    2954:	10 92 66 01 	sts	0x0166, r1
      GB_Logger::logError(ERROR_TERMOMETER_DISCONNECTED);
      dallasTemperature.begin();
    }  
    GB_Logger::stopLogError(ERROR_TERMOMETER_DISCONNECTED);

    dallasTemperature.getAddress(oneWireAddress, 0); // search for devices on the bus and assign based on an index.
    2958:	81 ee       	ldi	r24, 0xE1	; 225
    295a:	91 e0       	ldi	r25, 0x01	; 1
    295c:	64 ef       	ldi	r22, 0xF4	; 244
    295e:	71 e0       	ldi	r23, 0x01	; 1
    2960:	40 e0       	ldi	r20, 0x00	; 0
    2962:	0e 94 fd 2f 	call	0x5ffa	; 0x5ffa <_ZN17DallasTemperature10getAddressEPhh>
    2966:	06 c0       	rjmp	.+12     	; 0x2974 <setup+0x1a0>
    2968:	68 ee       	ldi	r22, 0xE8	; 232
    296a:	73 e0       	ldi	r23, 0x03	; 3
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	0e 94 1f 32 	call	0x643e	; 0x643e <delay>
    2974:	0e 94 2e 11 	call	0x225c	; 0x225c <_ZN14GB_Thermometer16updateStatisticsEv>
    2978:	88 23       	and	r24, r24
    297a:	b1 f3       	breq	.-20     	; 0x2968 <setup+0x194>
    297c:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <_ZN13GB_Controller15checkFreeMemoryEv>
    2980:	80 91 ae 01 	lds	r24, 0x01AE
    2984:	88 23       	and	r24, r24
    2986:	21 f0       	breq	.+8      	; 0x2990 <setup+0x1bc>
    2988:	8e e3       	ldi	r24, 0x3E	; 62
    298a:	95 e0       	ldi	r25, 0x05	; 5
    298c:	0e 94 29 08 	call	0x1052	; 0x1052 <_ZL17printStatusOnBootPK19__FlashStringHelper>
    2990:	00 e0       	ldi	r16, 0x00	; 0
    2992:	10 e0       	ldi	r17, 0x00	; 0
    }
  }

  static void read(word address, void *data, const byte sizeofData) {
    for (word c = 0; c < sizeofData; c++){
      byte value =  read(address + c);
    2994:	c8 01       	movw	r24, r16
    2996:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <_ZN10GB_Storage4readEj>
      ((byte*)data)[c] = value;
    299a:	f8 01       	movw	r30, r16
    299c:	ef 53       	subi	r30, 0x3F	; 63
    299e:	fe 4f       	sbci	r31, 0xFE	; 254
    29a0:	80 83       	st	Z, r24
      write(address + c, value);
    }
  }

  static void read(word address, void *data, const byte sizeofData) {
    for (word c = 0; c < sizeofData; c++){
    29a2:	0f 5f       	subi	r16, 0xFF	; 255
    29a4:	1f 4f       	sbci	r17, 0xFF	; 255
    29a6:	00 32       	cpi	r16, 0x20	; 32
    29a8:	11 05       	cpc	r17, r1
    29aa:	a1 f7       	brne	.-24     	; 0x2994 <setup+0x1c0>
  }

private :

  static boolean isBootRecordCorrect(){ // TODO rename it
    return (bootRecord.first_magic == MAGIC_NUMBER) && (bootRecord.last_magic == MAGIC_NUMBER);
    29ac:	80 91 c1 01 	lds	r24, 0x01C1
    29b0:	90 91 c2 01 	lds	r25, 0x01C2
    29b4:	85 55       	subi	r24, 0x55	; 85
    29b6:	9a 4a       	sbci	r25, 0xAA	; 170
    29b8:	09 f0       	breq	.+2      	; 0x29bc <setup+0x1e8>
    29ba:	d4 c0       	rjmp	.+424    	; 0x2b64 <setup+0x390>
    29bc:	80 91 df 01 	lds	r24, 0x01DF
    29c0:	90 91 e0 01 	lds	r25, 0x01E0
    29c4:	85 55       	subi	r24, 0x55	; 85
    29c6:	9a 4a       	sbci	r25, 0xAA	; 170
    29c8:	09 f0       	breq	.+2      	; 0x29cc <setup+0x1f8>
    29ca:	cc c0       	rjmp	.+408    	; 0x2b64 <setup+0x390>

  static boolean start(){

    GB_Storage::read(0, &bootRecord, sizeof(BootRecord));
    if (isBootRecordCorrect()){
      bootRecord.lastStartupTimeStamp = now();      
    29cc:	0e 94 e7 22 	call	0x45ce	; 0x45ce <_Z3nowv>
    29d0:	60 93 c7 01 	sts	0x01C7, r22
    29d4:	70 93 c8 01 	sts	0x01C8, r23
    29d8:	80 93 c9 01 	sts	0x01C9, r24
    29dc:	90 93 ca 01 	sts	0x01CA, r25
      GB_Storage::write(OFFSETOF(BootRecord, lastStartupTimeStamp), &(bootRecord.lastStartupTimeStamp), sizeof(bootRecord.lastStartupTimeStamp));      
    29e0:	86 e0       	ldi	r24, 0x06	; 6
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	67 ec       	ldi	r22, 0xC7	; 199
    29e6:	71 e0       	ldi	r23, 0x01	; 1
    29e8:	44 e0       	ldi	r20, 0x04	; 4
    29ea:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_ZN10GB_Storage5writeEjPKvh>
    29ee:	91 e0       	ldi	r25, 0x01	; 1
    29f0:	11 c0       	rjmp	.+34     	; 0x2a14 <setup+0x240>
      bootRecord.lastStartupTimeStamp = bootRecord.firstStartupTimeStamp;
      bootRecord.nextLogRecordAddress = sizeof(BootRecord);
      bootRecord.boolPreferencies.isLogOverflow = false;
      bootRecord.boolPreferencies.isLoggerEnabled = true;
      for(byte i=0; i<sizeof(bootRecord.reserved); i++){
        bootRecord.reserved[i] = 0;
    29f2:	11 92       	st	Z+, r1
      bootRecord.firstStartupTimeStamp = now();
      bootRecord.lastStartupTimeStamp = bootRecord.firstStartupTimeStamp;
      bootRecord.nextLogRecordAddress = sizeof(BootRecord);
      bootRecord.boolPreferencies.isLogOverflow = false;
      bootRecord.boolPreferencies.isLoggerEnabled = true;
      for(byte i=0; i<sizeof(bootRecord.reserved); i++){
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	ef 3d       	cpi	r30, 0xDF	; 223
    29f8:	f8 07       	cpc	r31, r24
    29fa:	d9 f7       	brne	.-10     	; 0x29f2 <setup+0x21e>
        bootRecord.reserved[i] = 0;
      }
      bootRecord.last_magic = MAGIC_NUMBER;
    29fc:	85 e5       	ldi	r24, 0x55	; 85
    29fe:	9a ea       	ldi	r25, 0xAA	; 170
    2a00:	91 83       	std	Z+1, r25	; 0x01
    2a02:	80 83       	st	Z, r24

      GB_Storage::write(0, &bootRecord, sizeof(BootRecord));
    2a04:	7e 97       	sbiw	r30, 0x1e	; 30
    2a06:	80 e0       	ldi	r24, 0x00	; 0
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	bf 01       	movw	r22, r30
    2a0c:	40 e2       	ldi	r20, 0x20	; 32
    2a0e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_ZN10GB_Storage5writeEjPKvh>
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	80 93 4a 01 	sts	0x014A, r24
    2a1a:	99 23       	and	r25, r25
    2a1c:	19 f0       	breq	.+6      	; 0x2a24 <setup+0x250>
    2a1e:	81 e8       	ldi	r24, 0x81	; 129
    2a20:	91 e0       	ldi	r25, 0x01	; 1
    2a22:	02 c0       	rjmp	.+4      	; 0x2a28 <setup+0x254>
    2a24:	8c e7       	ldi	r24, 0x7C	; 124
    2a26:	91 e0       	ldi	r25, 0x01	; 1
    2a28:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <_ZN9GB_Logger8logEventER5Event>
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
    2a2e:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <_ZN14GB_Thermometer14getTemperatureEh>
    2a32:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <_Z14isDayInGrowboxv>
    2a36:	88 23       	and	r24, r24
    2a38:	19 f0       	breq	.+6      	; 0x2a40 <setup+0x26c>
    2a3a:	0e 94 21 10 	call	0x2042	; 0x2042 <_Z15switchToDayModev>
    2a3e:	02 c0       	rjmp	.+4      	; 0x2a44 <setup+0x270>
    2a40:	0e 94 14 10 	call	0x2028	; 0x2028 <_Z17switchToNightModev>
    2a44:	82 e2       	ldi	r24, 0x22	; 34
    2a46:	92 e0       	ldi	r25, 0x02	; 2
    2a48:	44 e1       	ldi	r20, 0x14	; 20
    2a4a:	50 e0       	ldi	r21, 0x00	; 0
    2a4c:	60 e0       	ldi	r22, 0x00	; 0
    2a4e:	70 e0       	ldi	r23, 0x00	; 0
    2a50:	2d e8       	ldi	r18, 0x8D	; 141
    2a52:	31 e1       	ldi	r19, 0x11	; 17
    2a54:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <_ZN15TimeAlarmsClass11timerRepeatEmPFvvE>
    2a58:	82 e2       	ldi	r24, 0x22	; 34
    2a5a:	92 e0       	ldi	r25, 0x02	; 2
    2a5c:	41 e0       	ldi	r20, 0x01	; 1
    2a5e:	50 e0       	ldi	r21, 0x00	; 0
    2a60:	60 e0       	ldi	r22, 0x00	; 0
    2a62:	70 e0       	ldi	r23, 0x00	; 0
    2a64:	20 e2       	ldi	r18, 0x20	; 32
    2a66:	31 e1       	ldi	r19, 0x11	; 17
    2a68:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <_ZN15TimeAlarmsClass11timerRepeatEmPFvvE>
    2a6c:	82 e2       	ldi	r24, 0x22	; 34
    2a6e:	92 e0       	ldi	r25, 0x02	; 2
    2a70:	44 e1       	ldi	r20, 0x14	; 20
    2a72:	50 e0       	ldi	r21, 0x00	; 0
    2a74:	60 e0       	ldi	r22, 0x00	; 0
    2a76:	70 e0       	ldi	r23, 0x00	; 0
    2a78:	25 e2       	ldi	r18, 0x25	; 37
    2a7a:	31 e1       	ldi	r19, 0x11	; 17
    2a7c:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <_ZN15TimeAlarmsClass11timerRepeatEmPFvvE>
    2a80:	82 e2       	ldi	r24, 0x22	; 34
    2a82:	92 e0       	ldi	r25, 0x02	; 2
    2a84:	41 e0       	ldi	r20, 0x01	; 1
    2a86:	50 e0       	ldi	r21, 0x00	; 0
    2a88:	60 e0       	ldi	r22, 0x00	; 0
    2a8a:	70 e0       	ldi	r23, 0x00	; 0
    2a8c:	20 ef       	ldi	r18, 0xF0	; 240
    2a8e:	3b e0       	ldi	r19, 0x0B	; 11
    2a90:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <_ZN15TimeAlarmsClass11timerRepeatEmPFvvE>
    2a94:	82 e2       	ldi	r24, 0x22	; 34
    2a96:	92 e0       	ldi	r25, 0x02	; 2
    2a98:	4c e2       	ldi	r20, 0x2C	; 44
    2a9a:	51 e0       	ldi	r21, 0x01	; 1
    2a9c:	60 e0       	ldi	r22, 0x00	; 0
    2a9e:	70 e0       	ldi	r23, 0x00	; 0
    2aa0:	2c ea       	ldi	r18, 0xAC	; 172
    2aa2:	3f e0       	ldi	r19, 0x0F	; 15
    2aa4:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <_ZN15TimeAlarmsClass11timerRepeatEmPFvvE>
    2aa8:	82 e2       	ldi	r24, 0x22	; 34
    2aaa:	92 e0       	ldi	r25, 0x02	; 2
    2aac:	61 e0       	ldi	r22, 0x01	; 1
    2aae:	70 e0       	ldi	r23, 0x00	; 0
    2ab0:	40 e0       	ldi	r20, 0x00	; 0
    2ab2:	50 e0       	ldi	r21, 0x00	; 0
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	01 e2       	ldi	r16, 0x21	; 33
    2aba:	10 e1       	ldi	r17, 0x10	; 16
    2abc:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <_ZN15TimeAlarmsClass11alarmRepeatEiiiPFvvE>
    2ac0:	82 e2       	ldi	r24, 0x22	; 34
    2ac2:	92 e0       	ldi	r25, 0x02	; 2
    2ac4:	69 e0       	ldi	r22, 0x09	; 9
    2ac6:	70 e0       	ldi	r23, 0x00	; 0
    2ac8:	40 e0       	ldi	r20, 0x00	; 0
    2aca:	50 e0       	ldi	r21, 0x00	; 0
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	04 e1       	ldi	r16, 0x14	; 20
    2ad2:	10 e1       	ldi	r17, 0x10	; 16
    2ad4:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <_ZN15TimeAlarmsClass11alarmRepeatEiiiPFvvE>
    2ad8:	80 91 ae 01 	lds	r24, 0x01AE
    2adc:	88 23       	and	r24, r24
    2ade:	69 f0       	breq	.+26     	; 0x2afa <setup+0x326>
    2ae0:	0e 94 80 20 	call	0x4100	; 0x4100 <freeMemory>
    2ae4:	e8 16       	cp	r14, r24
    2ae6:	f9 06       	cpc	r15, r25
    2ae8:	11 f0       	breq	.+4      	; 0x2aee <setup+0x31a>
    2aea:	0e 94 b9 13 	call	0x2772	; 0x2772 <_Z15printFreeMemoryv>
    2aee:	88 eb       	ldi	r24, 0xB8	; 184
    2af0:	93 e0       	ldi	r25, 0x03	; 3
    2af2:	61 e2       	ldi	r22, 0x21	; 33
    2af4:	75 e0       	ldi	r23, 0x05	; 5
    2af6:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <_ZN5Print7printlnEPK19__FlashStringHelper>
    2afa:	80 91 ae 01 	lds	r24, 0x01AE
    2afe:	88 23       	and	r24, r24
    2b00:	11 f0       	breq	.+4      	; 0x2b06 <setup+0x332>
    2b02:	0e 94 56 08 	call	0x10ac	; 0x10ac <_ZN15GB_SerialHelper13printDirtyEndEv>
    2b06:	80 91 af 01 	lds	r24, 0x01AF
    2b0a:	88 23       	and	r24, r24
    2b0c:	09 f4       	brne	.+2      	; 0x2b10 <setup+0x33c>
    2b0e:	5e c0       	rjmp	.+188    	; 0x2bcc <setup+0x3f8>
    2b10:	7e 01       	movw	r14, r28
    2b12:	08 94       	sec
    2b14:	e1 1c       	adc	r14, r1
    2b16:	f1 1c       	adc	r15, r1
    2b18:	c7 01       	movw	r24, r14
    2b1a:	6c e1       	ldi	r22, 0x1C	; 28
    2b1c:	75 e0       	ldi	r23, 0x05	; 5
    2b1e:	0e 94 3f 06 	call	0xc7e	; 0xc7e <_ZL15flashStringLoadPKc>
  }
  return str; 
}

static String flashStringLoad(const __FlashStringHelper* fstr){ 
  return flashStringLoad((const char PROGMEM*) fstr);
    2b22:	8e 01       	movw	r16, r28
    2b24:	08 5f       	subi	r16, 0xF8	; 248
    2b26:	1f 4f       	sbci	r17, 0xFF	; 255
    2b28:	c8 01       	movw	r24, r16
    2b2a:	6f e0       	ldi	r22, 0x0F	; 15
    2b2c:	75 e0       	ldi	r23, 0x05	; 5
    2b2e:	0e 94 3f 06 	call	0xc7e	; 0xc7e <_ZL15flashStringLoadPKc>
      cleanSerialBuffer();
    }
  }

  static void setWifiConfiguration(const String& _s_wifiSID, const String& _s_wifiPass){
    s_wifiSID = _s_wifiSID;
    2b32:	81 eb       	ldi	r24, 0xB1	; 177
    2b34:	91 e0       	ldi	r25, 0x01	; 1
    2b36:	b7 01       	movw	r22, r14
    2b38:	0e 94 66 3a 	call	0x74cc	; 0x74cc <_ZN6StringaSERKS_>
    s_wifiPass = _s_wifiPass;
    2b3c:	88 eb       	ldi	r24, 0xB8	; 184
    2b3e:	91 e0       	ldi	r25, 0x01	; 1
    2b40:	b8 01       	movw	r22, r16
    2b42:	0e 94 66 3a 	call	0x74cc	; 0x74cc <_ZN6StringaSERKS_>
    2b46:	c8 01       	movw	r24, r16
    2b48:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
    2b4c:	c7 01       	movw	r24, r14
    2b4e:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
    2b52:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN15GB_SerialHelper9startWifiEv>
    2b56:	3a c0       	rjmp	.+116    	; 0x2bcc <setup+0x3f8>
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
  static boolean stopLogError(Error &error){
    if (error.isStored){
    2b58:	80 91 58 01 	lds	r24, 0x0158
    2b5c:	88 23       	and	r24, r24
    2b5e:	09 f0       	breq	.+2      	; 0x2b62 <setup+0x38e>
    2b60:	da ce       	rjmp	.-588    	; 0x2916 <setup+0x142>
    2b62:	db ce       	rjmp	.-586    	; 0x291a <setup+0x146>
      bootRecord.lastStartupTimeStamp = now();      
      GB_Storage::write(OFFSETOF(BootRecord, lastStartupTimeStamp), &(bootRecord.lastStartupTimeStamp), sizeof(bootRecord.lastStartupTimeStamp));      
      return true;   
    } 
    else {
      bootRecord.first_magic = MAGIC_NUMBER;
    2b64:	85 e5       	ldi	r24, 0x55	; 85
    2b66:	9a ea       	ldi	r25, 0xAA	; 170
    2b68:	90 93 c2 01 	sts	0x01C2, r25
    2b6c:	80 93 c1 01 	sts	0x01C1, r24
      bootRecord.firstStartupTimeStamp = now();
    2b70:	0e 94 e7 22 	call	0x45ce	; 0x45ce <_Z3nowv>
    2b74:	60 93 c3 01 	sts	0x01C3, r22
    2b78:	70 93 c4 01 	sts	0x01C4, r23
    2b7c:	80 93 c5 01 	sts	0x01C5, r24
    2b80:	90 93 c6 01 	sts	0x01C6, r25
      bootRecord.lastStartupTimeStamp = bootRecord.firstStartupTimeStamp;
    2b84:	60 93 c7 01 	sts	0x01C7, r22
    2b88:	70 93 c8 01 	sts	0x01C8, r23
    2b8c:	80 93 c9 01 	sts	0x01C9, r24
    2b90:	90 93 ca 01 	sts	0x01CA, r25
      bootRecord.nextLogRecordAddress = sizeof(BootRecord);
    2b94:	80 e2       	ldi	r24, 0x20	; 32
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	90 93 cc 01 	sts	0x01CC, r25
    2b9c:	80 93 cb 01 	sts	0x01CB, r24
      bootRecord.boolPreferencies.isLogOverflow = false;
    2ba0:	80 91 cd 01 	lds	r24, 0x01CD
      bootRecord.boolPreferencies.isLoggerEnabled = true;
    2ba4:	88 7f       	andi	r24, 0xF8	; 248
    2ba6:	82 60       	ori	r24, 0x02	; 2
    2ba8:	80 93 cd 01 	sts	0x01CD, r24
    2bac:	ee ec       	ldi	r30, 0xCE	; 206
    2bae:	f1 e0       	ldi	r31, 0x01	; 1
    2bb0:	20 cf       	rjmp	.-448    	; 0x29f2 <setup+0x21e>
  static Event* findByIndex(byte index){
    //Serial.print("search ev: ");    
    //Serial.println(index);
    // Serial.print("lastAddedEvent ev: ");
    //Serial.println(lastAddedEvent->description);
    Event* currentItemPtr = lastAddedEvent;
    2bb2:	e0 91 50 01 	lds	r30, 0x0150
    2bb6:	f0 91 51 01 	lds	r31, 0x0151
    2bba:	7f ce       	rjmp	.-770    	; 0x28ba <setup+0xe6>
    2bbc:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <_ZN13GB_Controller15checkFreeMemoryEv>
    2bc0:	80 91 ae 01 	lds	r24, 0x01AE
    2bc4:	88 23       	and	r24, r24
    2bc6:	09 f4       	brne	.+2      	; 0x2bca <setup+0x3f6>
    2bc8:	8e ce       	rjmp	.-740    	; 0x28e6 <setup+0x112>
    2bca:	89 ce       	rjmp	.-750    	; 0x28de <setup+0x10a>
    2bcc:	2e 96       	adiw	r28, 0x0e	; 14
    2bce:	0f b6       	in	r0, 0x3f	; 63
    2bd0:	f8 94       	cli
    2bd2:	de bf       	out	0x3e, r29	; 62
    2bd4:	0f be       	out	0x3f, r0	; 63
    2bd6:	cd bf       	out	0x3d, r28	; 61
    2bd8:	cf 91       	pop	r28
    2bda:	df 91       	pop	r29
    2bdc:	1f 91       	pop	r17
    2bde:	0f 91       	pop	r16
    2be0:	ff 90       	pop	r15
    2be2:	ef 90       	pop	r14
    2be4:	08 95       	ret

00002be6 <_ZN15GB_SerialHelper16sendWifiDataStopEv>:
  static void sendWifiDataStart(const byte &wifiPortDescriptor){
    sendWifiFrameStart(wifiPortDescriptor, WIFI_MAX_SEND_FRAME_SIZE);
    s_sendWifiDataFrameSize = 0;
  }

  static boolean sendWifiDataStop(){
    2be6:	cf 93       	push	r28
    2be8:	df 93       	push	r29
    if (s_sendWifiDataFrameSize > 0){
    2bea:	80 91 bf 01 	lds	r24, 0x01BF
    2bee:	90 91 c0 01 	lds	r25, 0x01C0
    2bf2:	18 16       	cp	r1, r24
    2bf4:	19 06       	cpc	r1, r25
    2bf6:	64 f0       	brlt	.+24     	; 0x2c10 <_ZN15GB_SerialHelper16sendWifiDataStopEv+0x2a>
    2bf8:	13 c0       	rjmp	.+38     	; 0x2c20 <_ZN15GB_SerialHelper16sendWifiDataStopEv+0x3a>
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    2bfa:	88 eb       	ldi	r24, 0xB8	; 184
    2bfc:	93 e0       	ldi	r25, 0x03	; 3
    2bfe:	60 e0       	ldi	r22, 0x00	; 0
    2c00:	0e 94 83 35 	call	0x6b06	; 0x6b06 <_ZN14HardwareSerial5writeEh>
      while (s_sendWifiDataFrameSize < WIFI_MAX_SEND_FRAME_SIZE){
        s_sendWifiDataFrameSize += Serial.write(0x00); // Filler 0x00
    2c04:	c8 0f       	add	r28, r24
    2c06:	d9 1f       	adc	r29, r25
    2c08:	d0 93 c0 01 	sts	0x01C0, r29
    2c0c:	c0 93 bf 01 	sts	0x01BF, r28
    s_sendWifiDataFrameSize = 0;
  }

  static boolean sendWifiDataStop(){
    if (s_sendWifiDataFrameSize > 0){
      while (s_sendWifiDataFrameSize < WIFI_MAX_SEND_FRAME_SIZE){
    2c10:	c0 91 bf 01 	lds	r28, 0x01BF
    2c14:	d0 91 c0 01 	lds	r29, 0x01C0
    2c18:	85 e0       	ldi	r24, 0x05	; 5
    2c1a:	c8 37       	cpi	r28, 0x78	; 120
    2c1c:	d8 07       	cpc	r29, r24
    2c1e:	6c f3       	brlt	.-38     	; 0x2bfa <_ZN15GB_SerialHelper16sendWifiDataStopEv+0x14>
    Serial.print(length);
    Serial.print(',');
  }

  static boolean sendWifiFrameStop(){
    s_restartWifiIfNoResponseAutomatically = false;
    2c20:	10 92 05 01 	sts	0x0105, r1
    boolean rez = wifiExecuteCommand();
    2c24:	80 e0       	ldi	r24, 0x00	; 0
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	68 ee       	ldi	r22, 0xE8	; 232
    2c2a:	73 e0       	ldi	r23, 0x03	; 3
    2c2c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    s_restartWifiIfNoResponseAutomatically = true;
    2c30:	91 e0       	ldi	r25, 0x01	; 1
    2c32:	90 93 05 01 	sts	0x0105, r25
      while (s_sendWifiDataFrameSize < WIFI_MAX_SEND_FRAME_SIZE){
        s_sendWifiDataFrameSize += Serial.write(0x00); // Filler 0x00
      }
    }
    return sendWifiFrameStop();
  } 
    2c36:	df 91       	pop	r29
    2c38:	cf 91       	pop	r28
    2c3a:	08 95       	ret

00002c3c <_ZL8sendDataRK6String>:
    2c3c:	df 92       	push	r13
    2c3e:	ef 92       	push	r14
    2c40:	ff 92       	push	r15
    2c42:	0f 93       	push	r16
    2c44:	1f 93       	push	r17
    2c46:	cf 93       	push	r28
    2c48:	df 93       	push	r29
    2c4a:	7c 01       	movw	r14, r24
    2c4c:	80 91 4b 01 	lds	r24, 0x014B
    2c50:	90 91 4c 01 	lds	r25, 0x014C
    2c54:	04 97       	sbiw	r24, 0x04	; 4
    2c56:	09 f0       	breq	.+2      	; 0x2c5a <_ZL8sendDataRK6String+0x1e>
    2c58:	67 c0       	rjmp	.+206    	; 0x2d28 <_ZL8sendDataRK6String+0xec>
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
    2c5a:	f7 01       	movw	r30, r14
    2c5c:	84 81       	ldd	r24, Z+4	; 0x04
    2c5e:	95 81       	ldd	r25, Z+5	; 0x05
    return isSendOK;
  }  

  static boolean sendHttpOK_Data(const byte &wifiPortDescriptor, const String &data){
    boolean isSendOK = true;
    if (data.length() == 0){
    2c60:	00 97       	sbiw	r24, 0x00	; 0
    2c62:	09 f4       	brne	.+2      	; 0x2c66 <_ZL8sendDataRK6String+0x2a>
    2c64:	66 c0       	rjmp	.+204    	; 0x2d32 <_ZL8sendDataRK6String+0xf6>
      return isSendOK;
    }
    if (s_sendWifiDataFrameSize + data.length() < WIFI_MAX_SEND_FRAME_SIZE){
    2c66:	c0 91 bf 01 	lds	r28, 0x01BF
    2c6a:	d0 91 c0 01 	lds	r29, 0x01C0
    2c6e:	8c 0f       	add	r24, r28
    2c70:	9d 1f       	adc	r25, r29
    2c72:	88 57       	subi	r24, 0x78	; 120
    2c74:	95 40       	sbci	r25, 0x05	; 5
    2c76:	18 f0       	brcs	.+6      	; 0x2c7e <_ZL8sendDataRK6String+0x42>
    2c78:	c0 e0       	ldi	r28, 0x00	; 0
    2c7a:	d0 e0       	ldi	r29, 0x00	; 0
    2c7c:	20 c0       	rjmp	.+64     	; 0x2cbe <_ZL8sendDataRK6String+0x82>
      s_sendWifiDataFrameSize += Serial.print(data);
    2c7e:	88 eb       	ldi	r24, 0xB8	; 184
    2c80:	93 e0       	ldi	r25, 0x03	; 3
    2c82:	b7 01       	movw	r22, r14
    2c84:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <_ZN5Print5printERK6String>
    2c88:	c8 0f       	add	r28, r24
    2c8a:	d9 1f       	adc	r29, r25
    2c8c:	d0 93 c0 01 	sts	0x01C0, r29
    2c90:	c0 93 bf 01 	sts	0x01BF, r28
    2c94:	4e c0       	rjmp	.+156    	; 0x2d32 <_ZL8sendDataRK6String+0xf6>
    2c96:	be 01       	movw	r22, r28
    } 
    else {
      int index = 0;
      while (s_sendWifiDataFrameSize < WIFI_MAX_SEND_FRAME_SIZE){
        char c = data[index++];
    2c98:	21 96       	adiw	r28, 0x01	; 1
    2c9a:	c7 01       	movw	r24, r14
    2c9c:	0e 94 00 38 	call	0x7000	; 0x7000 <_ZNK6StringixEj>
    2ca0:	68 2f       	mov	r22, r24
        s_sendWifiDataFrameSize += Serial.print(c);
    2ca2:	00 91 bf 01 	lds	r16, 0x01BF
    2ca6:	10 91 c0 01 	lds	r17, 0x01C0
    2caa:	88 eb       	ldi	r24, 0xB8	; 184
    2cac:	93 e0       	ldi	r25, 0x03	; 3
    2cae:	0e 94 77 36 	call	0x6cee	; 0x6cee <_ZN5Print5printEc>
    2cb2:	08 0f       	add	r16, r24
    2cb4:	19 1f       	adc	r17, r25
    2cb6:	10 93 c0 01 	sts	0x01C0, r17
    2cba:	00 93 bf 01 	sts	0x01BF, r16
    if (s_sendWifiDataFrameSize + data.length() < WIFI_MAX_SEND_FRAME_SIZE){
      s_sendWifiDataFrameSize += Serial.print(data);
    } 
    else {
      int index = 0;
      while (s_sendWifiDataFrameSize < WIFI_MAX_SEND_FRAME_SIZE){
    2cbe:	80 91 bf 01 	lds	r24, 0x01BF
    2cc2:	90 91 c0 01 	lds	r25, 0x01C0
    2cc6:	88 57       	subi	r24, 0x78	; 120
    2cc8:	95 40       	sbci	r25, 0x05	; 5
    2cca:	2c f3       	brlt	.-54     	; 0x2c96 <_ZL8sendDataRK6String+0x5a>
        char c = data[index++];
        s_sendWifiDataFrameSize += Serial.print(c);
      }
      isSendOK = sendWifiDataStop();
    2ccc:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_ZN15GB_SerialHelper16sendWifiDataStopEv>
    2cd0:	d8 2e       	mov	r13, r24
    Serial.print(data);
    sendWifiFrameStop();
  }

  static void sendWifiDataStart(const byte &wifiPortDescriptor){
    sendWifiFrameStart(wifiPortDescriptor, WIFI_MAX_SEND_FRAME_SIZE);
    2cd2:	80 91 04 01 	lds	r24, 0x0104
    2cd6:	68 e7       	ldi	r22, 0x78	; 120
    2cd8:	75 e0       	ldi	r23, 0x05	; 5
    2cda:	0e 94 36 0b 	call	0x166c	; 0x166c <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>
    s_sendWifiDataFrameSize = 0;
    2cde:	10 92 c0 01 	sts	0x01C0, r1
    2ce2:	10 92 bf 01 	sts	0x01BF, r1
    2ce6:	13 c0       	rjmp	.+38     	; 0x2d0e <_ZL8sendDataRK6String+0xd2>
      }
      isSendOK = sendWifiDataStop();
      sendWifiDataStart(wifiPortDescriptor); 

      while (index < data.length()){
        char c = data[index++];
    2ce8:	21 96       	adiw	r28, 0x01	; 1
    2cea:	c7 01       	movw	r24, r14
    2cec:	0e 94 00 38 	call	0x7000	; 0x7000 <_ZNK6StringixEj>
    2cf0:	68 2f       	mov	r22, r24
        s_sendWifiDataFrameSize += Serial.print(c);
    2cf2:	00 91 bf 01 	lds	r16, 0x01BF
    2cf6:	10 91 c0 01 	lds	r17, 0x01C0
    2cfa:	88 eb       	ldi	r24, 0xB8	; 184
    2cfc:	93 e0       	ldi	r25, 0x03	; 3
    2cfe:	0e 94 77 36 	call	0x6cee	; 0x6cee <_ZN5Print5printEc>
    2d02:	08 0f       	add	r16, r24
    2d04:	19 1f       	adc	r17, r25
    2d06:	10 93 c0 01 	sts	0x01C0, r17
    2d0a:	00 93 bf 01 	sts	0x01BF, r16
    2d0e:	be 01       	movw	r22, r28
        s_sendWifiDataFrameSize += Serial.print(c);
      }
      isSendOK = sendWifiDataStop();
      sendWifiDataStart(wifiPortDescriptor); 

      while (index < data.length()){
    2d10:	f7 01       	movw	r30, r14
    2d12:	84 81       	ldd	r24, Z+4	; 0x04
    2d14:	95 81       	ldd	r25, Z+5	; 0x05
    2d16:	c8 17       	cp	r28, r24
    2d18:	d9 07       	cpc	r29, r25
    2d1a:	30 f3       	brcs	.-52     	; 0x2ce8 <_ZL8sendDataRK6String+0xac>
    2d1c:	dd 20       	and	r13, r13
    2d1e:	49 f4       	brne	.+18     	; 0x2d32 <_ZL8sendDataRK6String+0xf6>
    2d20:	81 e0       	ldi	r24, 0x01	; 1
    2d22:	80 93 4d 01 	sts	0x014D, r24
    2d26:	05 c0       	rjmp	.+10     	; 0x2d32 <_ZL8sendDataRK6String+0xf6>
    2d28:	88 eb       	ldi	r24, 0xB8	; 184
    2d2a:	93 e0       	ldi	r25, 0x03	; 3
    2d2c:	b7 01       	movw	r22, r14
    2d2e:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <_ZN5Print5printERK6String>
    2d32:	df 91       	pop	r29
    2d34:	cf 91       	pop	r28
    2d36:	1f 91       	pop	r17
    2d38:	0f 91       	pop	r16
    2d3a:	ff 90       	pop	r15
    2d3c:	ef 90       	pop	r14
    2d3e:	df 90       	pop	r13
    2d40:	08 95       	ret

00002d42 <_ZL8sendDatac>:
    2d42:	ff 92       	push	r15
    2d44:	0f 93       	push	r16
    2d46:	1f 93       	push	r17
    2d48:	df 93       	push	r29
    2d4a:	cf 93       	push	r28
    2d4c:	cd b7       	in	r28, 0x3d	; 61
    2d4e:	de b7       	in	r29, 0x3e	; 62
    2d50:	27 97       	sbiw	r28, 0x07	; 7
    2d52:	0f b6       	in	r0, 0x3f	; 63
    2d54:	f8 94       	cli
    2d56:	de bf       	out	0x3e, r29	; 62
    2d58:	0f be       	out	0x3f, r0	; 63
    2d5a:	cd bf       	out	0x3d, r28	; 61
    2d5c:	f8 2e       	mov	r15, r24
    2d5e:	8e 01       	movw	r16, r28
    2d60:	0f 5f       	subi	r16, 0xFF	; 255
    2d62:	1f 4f       	sbci	r17, 0xFF	; 255
    2d64:	c8 01       	movw	r24, r16
    2d66:	60 e0       	ldi	r22, 0x00	; 0
    2d68:	71 e0       	ldi	r23, 0x01	; 1
    2d6a:	0e 94 95 39 	call	0x732a	; 0x732a <_ZN6StringC1EPKc>
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    2d6e:	c8 01       	movw	r24, r16
    2d70:	6f 2d       	mov	r22, r15
    2d72:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN6String6concatEc>
    2d76:	c8 01       	movw	r24, r16
    2d78:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <_ZL8sendDataRK6String>
    2d7c:	c8 01       	movw	r24, r16
    2d7e:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
    2d82:	27 96       	adiw	r28, 0x07	; 7
    2d84:	0f b6       	in	r0, 0x3f	; 63
    2d86:	f8 94       	cli
    2d88:	de bf       	out	0x3e, r29	; 62
    2d8a:	0f be       	out	0x3f, r0	; 63
    2d8c:	cd bf       	out	0x3d, r28	; 61
    2d8e:	cf 91       	pop	r28
    2d90:	df 91       	pop	r29
    2d92:	1f 91       	pop	r17
    2d94:	0f 91       	pop	r16
    2d96:	ff 90       	pop	r15
    2d98:	08 95       	ret

00002d9a <_ZL13sendTag_Begin8HTTP_TAG>:
    2d9a:	0f 93       	push	r16
    2d9c:	1f 93       	push	r17
    2d9e:	8c 01       	movw	r16, r24
    2da0:	8c e3       	ldi	r24, 0x3C	; 60
    2da2:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <_ZL8sendDatac>
    2da6:	01 30       	cpi	r16, 0x01	; 1
    2da8:	11 05       	cpc	r17, r1
    2daa:	19 f4       	brne	.+6      	; 0x2db2 <_ZL13sendTag_Begin8HTTP_TAG+0x18>
    2dac:	8f e2       	ldi	r24, 0x2F	; 47
    2dae:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <_ZL8sendDatac>
    2db2:	1f 91       	pop	r17
    2db4:	0f 91       	pop	r16
    2db6:	08 95       	ret

00002db8 <_ZL11sendTag_End8HTTP_TAG>:
    2db8:	02 97       	sbiw	r24, 0x02	; 2
    2dba:	19 f4       	brne	.+6      	; 0x2dc2 <_ZL11sendTag_End8HTTP_TAG+0xa>
    2dbc:	8f e2       	ldi	r24, 0x2F	; 47
    2dbe:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <_ZL8sendDatac>
    2dc2:	8e e3       	ldi	r24, 0x3E	; 62
    2dc4:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <_ZL8sendDatac>
    2dc8:	08 95       	ret

00002dca <_ZL7sendTagc8HTTP_TAG>:
    2dca:	ff 92       	push	r15
    2dcc:	0f 93       	push	r16
    2dce:	1f 93       	push	r17
    2dd0:	f8 2e       	mov	r15, r24
    2dd2:	8b 01       	movw	r16, r22
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <_ZL13sendTag_Begin8HTTP_TAG>
    2dda:	8f 2d       	mov	r24, r15
    2ddc:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <_ZL8sendDatac>
    2de0:	c8 01       	movw	r24, r16
    2de2:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <_ZL11sendTag_End8HTTP_TAG>
    2de6:	1f 91       	pop	r17
    2de8:	0f 91       	pop	r16
    2dea:	ff 90       	pop	r15
    2dec:	08 95       	ret

00002dee <_ZL8sendDatai>:
    2dee:	ef 92       	push	r14
    2df0:	ff 92       	push	r15
    2df2:	0f 93       	push	r16
    2df4:	1f 93       	push	r17
    2df6:	df 93       	push	r29
    2df8:	cf 93       	push	r28
    2dfa:	cd b7       	in	r28, 0x3d	; 61
    2dfc:	de b7       	in	r29, 0x3e	; 62
    2dfe:	27 97       	sbiw	r28, 0x07	; 7
    2e00:	0f b6       	in	r0, 0x3f	; 63
    2e02:	f8 94       	cli
    2e04:	de bf       	out	0x3e, r29	; 62
    2e06:	0f be       	out	0x3f, r0	; 63
    2e08:	cd bf       	out	0x3d, r28	; 61
    2e0a:	7c 01       	movw	r14, r24
    2e0c:	8e 01       	movw	r16, r28
    2e0e:	0f 5f       	subi	r16, 0xFF	; 255
    2e10:	1f 4f       	sbci	r17, 0xFF	; 255
    2e12:	c8 01       	movw	r24, r16
    2e14:	60 e0       	ldi	r22, 0x00	; 0
    2e16:	71 e0       	ldi	r23, 0x01	; 1
    2e18:	0e 94 95 39 	call	0x732a	; 0x732a <_ZN6StringC1EPKc>
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
    2e1c:	c8 01       	movw	r24, r16
    2e1e:	b7 01       	movw	r22, r14
    2e20:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6String6concatEi>
    2e24:	c8 01       	movw	r24, r16
    2e26:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <_ZL8sendDataRK6String>
    2e2a:	c8 01       	movw	r24, r16
    2e2c:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
    2e30:	27 96       	adiw	r28, 0x07	; 7
    2e32:	0f b6       	in	r0, 0x3f	; 63
    2e34:	f8 94       	cli
    2e36:	de bf       	out	0x3e, r29	; 62
    2e38:	0f be       	out	0x3f, r0	; 63
    2e3a:	cd bf       	out	0x3d, r28	; 61
    2e3c:	cf 91       	pop	r28
    2e3e:	df 91       	pop	r29
    2e40:	1f 91       	pop	r17
    2e42:	0f 91       	pop	r16
    2e44:	ff 90       	pop	r15
    2e46:	ef 90       	pop	r14
    2e48:	08 95       	ret

00002e4a <_ZL8sendDatam>:
    2e4a:	0f 93       	push	r16
    2e4c:	1f 93       	push	r17
    2e4e:	df 93       	push	r29
    2e50:	cf 93       	push	r28
    2e52:	cd b7       	in	r28, 0x3d	; 61
    2e54:	de b7       	in	r29, 0x3e	; 62
    2e56:	27 97       	sbiw	r28, 0x07	; 7
    2e58:	0f b6       	in	r0, 0x3f	; 63
    2e5a:	f8 94       	cli
    2e5c:	de bf       	out	0x3e, r29	; 62
    2e5e:	0f be       	out	0x3f, r0	; 63
    2e60:	cd bf       	out	0x3d, r28	; 61
    2e62:	ab 01       	movw	r20, r22
    2e64:	bc 01       	movw	r22, r24
    2e66:	8e 01       	movw	r16, r28
    2e68:	0f 5f       	subi	r16, 0xFF	; 255
    2e6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e6c:	c8 01       	movw	r24, r16
    2e6e:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_ZN13GB_PrintDirty13getTimeStringEm>
    2e72:	c8 01       	movw	r24, r16
    2e74:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <_ZL8sendDataRK6String>
    2e78:	c8 01       	movw	r24, r16
    2e7a:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
    2e7e:	27 96       	adiw	r28, 0x07	; 7
    2e80:	0f b6       	in	r0, 0x3f	; 63
    2e82:	f8 94       	cli
    2e84:	de bf       	out	0x3e, r29	; 62
    2e86:	0f be       	out	0x3f, r0	; 63
    2e88:	cd bf       	out	0x3d, r28	; 61
    2e8a:	cf 91       	pop	r28
    2e8c:	df 91       	pop	r29
    2e8e:	1f 91       	pop	r17
    2e90:	0f 91       	pop	r16
    2e92:	08 95       	ret

00002e94 <_ZL8sendDataf>:
    2e94:	af 92       	push	r10
    2e96:	bf 92       	push	r11
    2e98:	cf 92       	push	r12
    2e9a:	df 92       	push	r13
    2e9c:	ef 92       	push	r14
    2e9e:	ff 92       	push	r15
    2ea0:	0f 93       	push	r16
    2ea2:	1f 93       	push	r17
    2ea4:	df 93       	push	r29
    2ea6:	cf 93       	push	r28
    2ea8:	cd b7       	in	r28, 0x3d	; 61
    2eaa:	de b7       	in	r29, 0x3e	; 62
    2eac:	2e 97       	sbiw	r28, 0x0e	; 14
    2eae:	0f b6       	in	r0, 0x3f	; 63
    2eb0:	f8 94       	cli
    2eb2:	de bf       	out	0x3e, r29	; 62
    2eb4:	0f be       	out	0x3f, r0	; 63
    2eb6:	cd bf       	out	0x3d, r28	; 61
    2eb8:	7b 01       	movw	r14, r22
    2eba:	8c 01       	movw	r16, r24
    }
    return out;
  }
  
  static String floatToString(float number){
    String out;
    2ebc:	5e 01       	movw	r10, r28
    2ebe:	08 94       	sec
    2ec0:	a1 1c       	adc	r10, r1
    2ec2:	b1 1c       	adc	r11, r1
    2ec4:	c5 01       	movw	r24, r10
    2ec6:	60 e0       	ldi	r22, 0x00	; 0
    2ec8:	71 e0       	ldi	r23, 0x01	; 1
    2eca:	0e 94 95 39 	call	0x732a	; 0x732a <_ZN6StringC1EPKc>

    int temp = number*100;
    2ece:	c8 01       	movw	r24, r16
    2ed0:	b7 01       	movw	r22, r14
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	48 ec       	ldi	r20, 0xC8	; 200
    2ed8:	52 e4       	ldi	r21, 0x42	; 66
    2eda:	0e 94 2d 3d 	call	0x7a5a	; 0x7a5a <__mulsf3>
    2ede:	0e 94 46 3c 	call	0x788c	; 0x788c <__fixsfsi>
    2ee2:	6b 01       	movw	r12, r22
    2ee4:	7c 01       	movw	r14, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	64 e6       	ldi	r22, 0x64	; 100
    2eea:	70 e0       	ldi	r23, 0x00	; 0
    2eec:	0e 94 c3 3d 	call	0x7b86	; 0x7b86 <__divmodhi4>
    2ef0:	c5 01       	movw	r24, r10
    2ef2:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6String6concatEi>
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    2ef6:	c5 01       	movw	r24, r10
    2ef8:	6e e2       	ldi	r22, 0x2E	; 46
    2efa:	0e 94 31 39 	call	0x7262	; 0x7262 <_ZN6String6concatEc>
    int whole = temp/100;
    int fract = temp%100;

    out += whole;
    out += '.';
    out += getFixedDigitsString(temp,2);
    2efe:	8e 01       	movw	r16, r28
    2f00:	08 5f       	subi	r16, 0xF8	; 248
    2f02:	1f 4f       	sbci	r17, 0xFF	; 255
    2f04:	c8 01       	movw	r24, r16
    2f06:	b6 01       	movw	r22, r12
    2f08:	42 e0       	ldi	r20, 0x02	; 2
    2f0a:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    2f0e:	c5 01       	movw	r24, r10
    2f10:	b8 01       	movw	r22, r16
    2f12:	0e 94 44 39 	call	0x7288	; 0x7288 <_ZN6String6concatERKS_>
    2f16:	c8 01       	movw	r24, r16
    2f18:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
    2f1c:	c5 01       	movw	r24, r10
    2f1e:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <_ZL8sendDataRK6String>
    2f22:	c5 01       	movw	r24, r10
    2f24:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
    2f28:	2e 96       	adiw	r28, 0x0e	; 14
    2f2a:	0f b6       	in	r0, 0x3f	; 63
    2f2c:	f8 94       	cli
    2f2e:	de bf       	out	0x3e, r29	; 62
    2f30:	0f be       	out	0x3f, r0	; 63
    2f32:	cd bf       	out	0x3d, r28	; 61
    2f34:	cf 91       	pop	r28
    2f36:	df 91       	pop	r29
    2f38:	1f 91       	pop	r17
    2f3a:	0f 91       	pop	r16
    2f3c:	ff 90       	pop	r15
    2f3e:	ef 90       	pop	r14
    2f40:	df 90       	pop	r13
    2f42:	cf 90       	pop	r12
    2f44:	bf 90       	pop	r11
    2f46:	af 90       	pop	r10
    2f48:	08 95       	ret

00002f4a <_ZL8sendDataj>:
    2f4a:	ef 92       	push	r14
    2f4c:	ff 92       	push	r15
    2f4e:	0f 93       	push	r16
    2f50:	1f 93       	push	r17
    2f52:	df 93       	push	r29
    2f54:	cf 93       	push	r28
    2f56:	cd b7       	in	r28, 0x3d	; 61
    2f58:	de b7       	in	r29, 0x3e	; 62
    2f5a:	27 97       	sbiw	r28, 0x07	; 7
    2f5c:	0f b6       	in	r0, 0x3f	; 63
    2f5e:	f8 94       	cli
    2f60:	de bf       	out	0x3e, r29	; 62
    2f62:	0f be       	out	0x3f, r0	; 63
    2f64:	cd bf       	out	0x3d, r28	; 61
    2f66:	7c 01       	movw	r14, r24
    2f68:	8e 01       	movw	r16, r28
    2f6a:	0f 5f       	subi	r16, 0xFF	; 255
    2f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f6e:	c8 01       	movw	r24, r16
    2f70:	60 e0       	ldi	r22, 0x00	; 0
    2f72:	71 e0       	ldi	r23, 0x01	; 1
    2f74:	0e 94 95 39 	call	0x732a	; 0x732a <_ZN6StringC1EPKc>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
	String & operator += (unsigned int num)		{concat(num); return (*this);}
    2f78:	c8 01       	movw	r24, r16
    2f7a:	b7 01       	movw	r22, r14
    2f7c:	0e 94 a6 38 	call	0x714c	; 0x714c <_ZN6String6concatEj>
    2f80:	c8 01       	movw	r24, r16
    2f82:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <_ZL8sendDataRK6String>
    2f86:	c8 01       	movw	r24, r16
    2f88:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
    2f8c:	27 96       	adiw	r28, 0x07	; 7
    2f8e:	0f b6       	in	r0, 0x3f	; 63
    2f90:	f8 94       	cli
    2f92:	de bf       	out	0x3e, r29	; 62
    2f94:	0f be       	out	0x3f, r0	; 63
    2f96:	cd bf       	out	0x3d, r28	; 61
    2f98:	cf 91       	pop	r28
    2f9a:	df 91       	pop	r29
    2f9c:	1f 91       	pop	r17
    2f9e:	0f 91       	pop	r16
    2fa0:	ff 90       	pop	r15
    2fa2:	ef 90       	pop	r14
    2fa4:	08 95       	ret

00002fa6 <_ZL8sendDataPK19__FlashStringHelper>:
    2fa6:	9f 92       	push	r9
    2fa8:	af 92       	push	r10
    2faa:	bf 92       	push	r11
    2fac:	cf 92       	push	r12
    2fae:	df 92       	push	r13
    2fb0:	ef 92       	push	r14
    2fb2:	ff 92       	push	r15
    2fb4:	0f 93       	push	r16
    2fb6:	1f 93       	push	r17
    2fb8:	cf 93       	push	r28
    2fba:	df 93       	push	r29
    2fbc:	b8 2e       	mov	r11, r24
    2fbe:	a9 2e       	mov	r10, r25
    2fc0:	80 91 4b 01 	lds	r24, 0x014B
    2fc4:	90 91 4c 01 	lds	r25, 0x014C
    2fc8:	04 97       	sbiw	r24, 0x04	; 4
    2fca:	09 f0       	breq	.+2      	; 0x2fce <_ZL8sendDataPK19__FlashStringHelper+0x28>
    2fcc:	70 c0       	rjmp	.+224    	; 0x30ae <_ZL8sendDataPK19__FlashStringHelper+0x108>
    sendWifiDataStart(wifiPortDescriptor);
  }

  static boolean sendHttpOK_Data(const byte &wifiPortDescriptor, const __FlashStringHelper* data){
    boolean isSendOK = true;
    if (s_sendWifiDataFrameSize + flashStringLength(data) < WIFI_MAX_SEND_FRAME_SIZE){
    2fce:	c0 91 bf 01 	lds	r28, 0x01BF
    2fd2:	d0 91 c0 01 	lds	r29, 0x01C0
  /////////////////////////////////////////////////////////////////////
  //                         FALASH STRINGS                          //
  /////////////////////////////////////////////////////////////////////

static int flashStringLength(const char PROGMEM* pstr){ 
  return strlen_P(pstr);
    2fd6:	8b 2d       	mov	r24, r11
    2fd8:	9a 2d       	mov	r25, r10
    2fda:	0e 94 87 04 	call	0x90e	; 0x90e <strlen_P>
    2fde:	6c 01       	movw	r12, r24
    2fe0:	8c 0f       	add	r24, r28
    2fe2:	9d 1f       	adc	r25, r29
    2fe4:	88 57       	subi	r24, 0x78	; 120
    2fe6:	95 40       	sbci	r25, 0x05	; 5
    2fe8:	1c f0       	brlt	.+6      	; 0x2ff0 <_ZL8sendDataPK19__FlashStringHelper+0x4a>
    2fea:	c0 e0       	ldi	r28, 0x00	; 0
    2fec:	d0 e0       	ldi	r29, 0x00	; 0
    2fee:	27 c0       	rjmp	.+78     	; 0x303e <_ZL8sendDataPK19__FlashStringHelper+0x98>
      s_sendWifiDataFrameSize += Serial.print(data);
    2ff0:	88 eb       	ldi	r24, 0xB8	; 184
    2ff2:	93 e0       	ldi	r25, 0x03	; 3
    2ff4:	6b 2d       	mov	r22, r11
    2ff6:	7a 2d       	mov	r23, r10
    2ff8:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZN5Print5printEPK19__FlashStringHelper>
    2ffc:	c8 0f       	add	r28, r24
    2ffe:	d9 1f       	adc	r29, r25
    3000:	d0 93 c0 01 	sts	0x01C0, r29
    3004:	c0 93 bf 01 	sts	0x01BF, r28
    3008:	58 c0       	rjmp	.+176    	; 0x30ba <_ZL8sendDataPK19__FlashStringHelper+0x114>
    } 
    else {
      int index = 0;
      while (s_sendWifiDataFrameSize < WIFI_MAX_SEND_FRAME_SIZE){
        char c = flashStringCharAt(data, index++);
    300a:	7e 01       	movw	r14, r28
    300c:	08 94       	sec
    300e:	e1 1c       	adc	r14, r1
    3010:	f1 1c       	adc	r15, r1
}
static int flashStringLength(const __FlashStringHelper* fstr){ 
  return flashStringLength((const char PROGMEM *) fstr);
}
static char flashStringCharAt(const __FlashStringHelper* fstr, int index){ 
  return flashStringCharAt((const char PROGMEM*) fstr, index);
    3012:	8b 2d       	mov	r24, r11
    3014:	9a 2d       	mov	r25, r10
    3016:	be 01       	movw	r22, r28
    3018:	41 e0       	ldi	r20, 0x01	; 1
    301a:	0e 94 27 06 	call	0xc4e	; 0xc4e <_ZL17flashStringCharAtPKcih>
    301e:	68 2f       	mov	r22, r24
        s_sendWifiDataFrameSize += Serial.print(c);
    3020:	00 91 bf 01 	lds	r16, 0x01BF
    3024:	10 91 c0 01 	lds	r17, 0x01C0
    3028:	88 eb       	ldi	r24, 0xB8	; 184
    302a:	93 e0       	ldi	r25, 0x03	; 3
    302c:	0e 94 77 36 	call	0x6cee	; 0x6cee <_ZN5Print5printEc>
    3030:	08 0f       	add	r16, r24
    3032:	19 1f       	adc	r17, r25
    3034:	10 93 c0 01 	sts	0x01C0, r17
    3038:	00 93 bf 01 	sts	0x01BF, r16
    303c:	e7 01       	movw	r28, r14
    if (s_sendWifiDataFrameSize + flashStringLength(data) < WIFI_MAX_SEND_FRAME_SIZE){
      s_sendWifiDataFrameSize += Serial.print(data);
    } 
    else {
      int index = 0;
      while (s_sendWifiDataFrameSize < WIFI_MAX_SEND_FRAME_SIZE){
    303e:	80 91 bf 01 	lds	r24, 0x01BF
    3042:	90 91 c0 01 	lds	r25, 0x01C0
    3046:	88 57       	subi	r24, 0x78	; 120
    3048:	95 40       	sbci	r25, 0x05	; 5
    304a:	fc f2       	brlt	.-66     	; 0x300a <_ZL8sendDataPK19__FlashStringHelper+0x64>
        char c = flashStringCharAt(data, index++);
        s_sendWifiDataFrameSize += Serial.print(c);
      }
      isSendOK = sendWifiDataStop();
    304c:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_ZN15GB_SerialHelper16sendWifiDataStopEv>
    3050:	98 2e       	mov	r9, r24
    Serial.print(data);
    sendWifiFrameStop();
  }

  static void sendWifiDataStart(const byte &wifiPortDescriptor){
    sendWifiFrameStart(wifiPortDescriptor, WIFI_MAX_SEND_FRAME_SIZE);
    3052:	80 91 04 01 	lds	r24, 0x0104
    3056:	68 e7       	ldi	r22, 0x78	; 120
    3058:	75 e0       	ldi	r23, 0x05	; 5
    305a:	0e 94 36 0b 	call	0x166c	; 0x166c <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>
    s_sendWifiDataFrameSize = 0;
    305e:	10 92 c0 01 	sts	0x01C0, r1
    3062:	10 92 bf 01 	sts	0x01BF, r1
    3066:	1a c0       	rjmp	.+52     	; 0x309c <_ZL8sendDataPK19__FlashStringHelper+0xf6>
        s_sendWifiDataFrameSize += Serial.print(c);
      }
      isSendOK = sendWifiDataStop();
      sendWifiDataStart(wifiPortDescriptor);   
      while (index < flashStringLength(data)){
        char c = flashStringCharAt(data, index++);
    3068:	7e 01       	movw	r14, r28
    306a:	08 94       	sec
    306c:	e1 1c       	adc	r14, r1
    306e:	f1 1c       	adc	r15, r1
    3070:	8b 2d       	mov	r24, r11
    3072:	9a 2d       	mov	r25, r10
    3074:	be 01       	movw	r22, r28
    3076:	41 e0       	ldi	r20, 0x01	; 1
    3078:	0e 94 27 06 	call	0xc4e	; 0xc4e <_ZL17flashStringCharAtPKcih>
    307c:	68 2f       	mov	r22, r24
        s_sendWifiDataFrameSize += Serial.print(c);
    307e:	00 91 bf 01 	lds	r16, 0x01BF
    3082:	10 91 c0 01 	lds	r17, 0x01C0
    3086:	88 eb       	ldi	r24, 0xB8	; 184
    3088:	93 e0       	ldi	r25, 0x03	; 3
    308a:	0e 94 77 36 	call	0x6cee	; 0x6cee <_ZN5Print5printEc>
    308e:	08 0f       	add	r16, r24
    3090:	19 1f       	adc	r17, r25
    3092:	10 93 c0 01 	sts	0x01C0, r17
    3096:	00 93 bf 01 	sts	0x01BF, r16
    309a:	e7 01       	movw	r28, r14
        char c = flashStringCharAt(data, index++);
        s_sendWifiDataFrameSize += Serial.print(c);
      }
      isSendOK = sendWifiDataStop();
      sendWifiDataStart(wifiPortDescriptor);   
      while (index < flashStringLength(data)){
    309c:	cc 15       	cp	r28, r12
    309e:	dd 05       	cpc	r29, r13
    30a0:	1c f3       	brlt	.-58     	; 0x3068 <_ZL8sendDataPK19__FlashStringHelper+0xc2>
    30a2:	99 20       	and	r9, r9
    30a4:	51 f4       	brne	.+20     	; 0x30ba <_ZL8sendDataPK19__FlashStringHelper+0x114>
    30a6:	81 e0       	ldi	r24, 0x01	; 1
    30a8:	80 93 4d 01 	sts	0x014D, r24
    30ac:	06 c0       	rjmp	.+12     	; 0x30ba <_ZL8sendDataPK19__FlashStringHelper+0x114>
    30ae:	88 eb       	ldi	r24, 0xB8	; 184
    30b0:	93 e0       	ldi	r25, 0x03	; 3
    30b2:	6b 2d       	mov	r22, r11
    30b4:	7a 2d       	mov	r23, r10
    30b6:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZN5Print5printEPK19__FlashStringHelper>
    30ba:	df 91       	pop	r29
    30bc:	cf 91       	pop	r28
    30be:	1f 91       	pop	r17
    30c0:	0f 91       	pop	r16
    30c2:	ff 90       	pop	r15
    30c4:	ef 90       	pop	r14
    30c6:	df 90       	pop	r13
    30c8:	cf 90       	pop	r12
    30ca:	bf 90       	pop	r11
    30cc:	af 90       	pop	r10
    30ce:	9f 90       	pop	r9
    30d0:	08 95       	ret

000030d2 <_ZL7sendTagPKc8HTTP_TAG>:
    30d2:	ef 92       	push	r14
    30d4:	ff 92       	push	r15
    30d6:	0f 93       	push	r16
    30d8:	1f 93       	push	r17
    30da:	7c 01       	movw	r14, r24
    30dc:	8b 01       	movw	r16, r22
    30de:	cb 01       	movw	r24, r22
    30e0:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <_ZL13sendTag_Begin8HTTP_TAG>
    30e4:	c7 01       	movw	r24, r14
    30e6:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    30ea:	c8 01       	movw	r24, r16
    30ec:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <_ZL11sendTag_End8HTTP_TAG>
    30f0:	1f 91       	pop	r17
    30f2:	0f 91       	pop	r16
    30f4:	ff 90       	pop	r15
    30f6:	ef 90       	pop	r14
    30f8:	08 95       	ret

000030fa <_Z15sendStorageDumpv>:
    30fa:	bf 92       	push	r11
    30fc:	cf 92       	push	r12
    30fe:	df 92       	push	r13
    3100:	ef 92       	push	r14
    3102:	ff 92       	push	r15
    3104:	0f 93       	push	r16
    3106:	1f 93       	push	r17
    3108:	df 93       	push	r29
    310a:	cf 93       	push	r28
    310c:	cd b7       	in	r28, 0x3d	; 61
    310e:	de b7       	in	r29, 0x3e	; 62
    3110:	65 97       	sbiw	r28, 0x15	; 21
    3112:	0f b6       	in	r0, 0x3f	; 63
    3114:	f8 94       	cli
    3116:	de bf       	out	0x3e, r29	; 62
    3118:	0f be       	out	0x3f, r0	; 63
    311a:	cd bf       	out	0x3d, r28	; 61
    311c:	88 e6       	ldi	r24, 0x68	; 104
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	60 e0       	ldi	r22, 0x00	; 0
    3122:	70 e0       	ldi	r23, 0x00	; 0
    3124:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    3128:	8e e6       	ldi	r24, 0x6E	; 110
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	60 e0       	ldi	r22, 0x00	; 0
    312e:	70 e0       	ldi	r23, 0x00	; 0
    3130:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    3134:	81 e7       	ldi	r24, 0x71	; 113
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	60 e0       	ldi	r22, 0x00	; 0
    313a:	70 e0       	ldi	r23, 0x00	; 0
    313c:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    3140:	81 e7       	ldi	r24, 0x71	; 113
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	61 e0       	ldi	r22, 0x01	; 1
    3146:	70 e0       	ldi	r23, 0x00	; 0
    3148:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    314c:	10 e0       	ldi	r17, 0x00	; 0
    314e:	7e 01       	movw	r14, r28
    3150:	08 94       	sec
    3152:	e1 1c       	adc	r14, r1
    3154:	f1 1c       	adc	r15, r1
    3156:	81 e7       	ldi	r24, 0x71	; 113
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	60 e0       	ldi	r22, 0x00	; 0
    315c:	70 e0       	ldi	r23, 0x00	; 0
    315e:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    3162:	82 e6       	ldi	r24, 0x62	; 98
    3164:	60 e0       	ldi	r22, 0x00	; 0
    3166:	70 e0       	ldi	r23, 0x00	; 0
    3168:	0e 94 e5 16 	call	0x2dca	; 0x2dca <_ZL7sendTagc8HTTP_TAG>
    316c:	c7 01       	movw	r24, r14
    316e:	61 2f       	mov	r22, r17
    3170:	40 e0       	ldi	r20, 0x00	; 0
    3172:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN13GB_PrintDirty6getHEXEhh>
    3176:	c7 01       	movw	r24, r14
    3178:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <_ZL8sendDataRK6String>
    317c:	c7 01       	movw	r24, r14
    317e:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
    3182:	82 e6       	ldi	r24, 0x62	; 98
    3184:	61 e0       	ldi	r22, 0x01	; 1
    3186:	70 e0       	ldi	r23, 0x00	; 0
    3188:	0e 94 e5 16 	call	0x2dca	; 0x2dca <_ZL7sendTagc8HTTP_TAG>
    318c:	81 e7       	ldi	r24, 0x71	; 113
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	61 e0       	ldi	r22, 0x01	; 1
    3192:	70 e0       	ldi	r23, 0x00	; 0
    3194:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    3198:	1f 5f       	subi	r17, 0xFF	; 255
    319a:	10 31       	cpi	r17, 0x10	; 16
    319c:	e1 f6       	brne	.-72     	; 0x3156 <_Z15sendStorageDumpv+0x5c>
    319e:	8e e6       	ldi	r24, 0x6E	; 110
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	61 e0       	ldi	r22, 0x01	; 1
    31a4:	70 e0       	ldi	r23, 0x00	; 0
    31a6:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    31aa:	00 e0       	ldi	r16, 0x00	; 0
    31ac:	10 e0       	ldi	r17, 0x00	; 0
    31ae:	78 e0       	ldi	r23, 0x08	; 8
    31b0:	c7 2e       	mov	r12, r23
    31b2:	d1 2c       	mov	r13, r1
    31b4:	cc 0e       	add	r12, r28
    31b6:	dd 1e       	adc	r13, r29
    31b8:	6f e0       	ldi	r22, 0x0F	; 15
    31ba:	e6 2e       	mov	r14, r22
    31bc:	f1 2c       	mov	r15, r1
    31be:	ec 0e       	add	r14, r28
    31c0:	fd 1e       	adc	r15, r29
    31c2:	c8 01       	movw	r24, r16
    31c4:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <_ZN10GB_Storage4readEj>
    31c8:	b8 2e       	mov	r11, r24
    31ca:	c8 01       	movw	r24, r16
    31cc:	8f 70       	andi	r24, 0x0F	; 15
    31ce:	90 70       	andi	r25, 0x00	; 0
    31d0:	89 2b       	or	r24, r25
    31d2:	a9 f5       	brne	.+106    	; 0x323e <_Z15sendStorageDumpv+0x144>
    31d4:	01 15       	cp	r16, r1
    31d6:	11 05       	cpc	r17, r1
    31d8:	31 f0       	breq	.+12     	; 0x31e6 <_Z15sendStorageDumpv+0xec>
    31da:	8e e6       	ldi	r24, 0x6E	; 110
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	61 e0       	ldi	r22, 0x01	; 1
    31e0:	70 e0       	ldi	r23, 0x00	; 0
    31e2:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    31e6:	8e e6       	ldi	r24, 0x6E	; 110
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	60 e0       	ldi	r22, 0x00	; 0
    31ec:	70 e0       	ldi	r23, 0x00	; 0
    31ee:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    31f2:	81 e7       	ldi	r24, 0x71	; 113
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	60 e0       	ldi	r22, 0x00	; 0
    31f8:	70 e0       	ldi	r23, 0x00	; 0
    31fa:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    31fe:	82 e6       	ldi	r24, 0x62	; 98
    3200:	60 e0       	ldi	r22, 0x00	; 0
    3202:	70 e0       	ldi	r23, 0x00	; 0
    3204:	0e 94 e5 16 	call	0x2dca	; 0x2dca <_ZL7sendTagc8HTTP_TAG>
    3208:	b8 01       	movw	r22, r16
    320a:	54 e0       	ldi	r21, 0x04	; 4
    320c:	76 95       	lsr	r23
    320e:	67 95       	ror	r22
    3210:	5a 95       	dec	r21
    3212:	e1 f7       	brne	.-8      	; 0x320c <_Z15sendStorageDumpv+0x112>
    3214:	c6 01       	movw	r24, r12
    3216:	40 e0       	ldi	r20, 0x00	; 0
    3218:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN13GB_PrintDirty6getHEXEhh>
    321c:	c6 01       	movw	r24, r12
    321e:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <_ZL8sendDataRK6String>
    3222:	c6 01       	movw	r24, r12
    3224:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
    3228:	82 e6       	ldi	r24, 0x62	; 98
    322a:	61 e0       	ldi	r22, 0x01	; 1
    322c:	70 e0       	ldi	r23, 0x00	; 0
    322e:	0e 94 e5 16 	call	0x2dca	; 0x2dca <_ZL7sendTagc8HTTP_TAG>
    3232:	81 e7       	ldi	r24, 0x71	; 113
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	61 e0       	ldi	r22, 0x01	; 1
    3238:	70 e0       	ldi	r23, 0x00	; 0
    323a:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    323e:	81 e7       	ldi	r24, 0x71	; 113
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	60 e0       	ldi	r22, 0x00	; 0
    3244:	70 e0       	ldi	r23, 0x00	; 0
    3246:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    324a:	c7 01       	movw	r24, r14
    324c:	6b 2d       	mov	r22, r11
    324e:	40 e0       	ldi	r20, 0x00	; 0
    3250:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN13GB_PrintDirty6getHEXEhh>
    3254:	c7 01       	movw	r24, r14
    3256:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <_ZL8sendDataRK6String>
    325a:	c7 01       	movw	r24, r14
    325c:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
    3260:	81 e7       	ldi	r24, 0x71	; 113
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	61 e0       	ldi	r22, 0x01	; 1
    3266:	70 e0       	ldi	r23, 0x00	; 0
    3268:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    326c:	80 91 4d 01 	lds	r24, 0x014D
    3270:	88 23       	and	r24, r24
    3272:	99 f4       	brne	.+38     	; 0x329a <_Z15sendStorageDumpv+0x1a0>
    3274:	0f 5f       	subi	r16, 0xFF	; 255
    3276:	1f 4f       	sbci	r17, 0xFF	; 255
    3278:	80 e1       	ldi	r24, 0x10	; 16
    327a:	00 30       	cpi	r16, 0x00	; 0
    327c:	18 07       	cpc	r17, r24
    327e:	09 f0       	breq	.+2      	; 0x3282 <_Z15sendStorageDumpv+0x188>
    3280:	a0 cf       	rjmp	.-192    	; 0x31c2 <_Z15sendStorageDumpv+0xc8>
    3282:	8e e6       	ldi	r24, 0x6E	; 110
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	61 e0       	ldi	r22, 0x01	; 1
    3288:	70 e0       	ldi	r23, 0x00	; 0
    328a:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    328e:	88 e6       	ldi	r24, 0x68	; 104
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	61 e0       	ldi	r22, 0x01	; 1
    3294:	70 e0       	ldi	r23, 0x00	; 0
    3296:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    329a:	65 96       	adiw	r28, 0x15	; 21
    329c:	0f b6       	in	r0, 0x3f	; 63
    329e:	f8 94       	cli
    32a0:	de bf       	out	0x3e, r29	; 62
    32a2:	0f be       	out	0x3f, r0	; 63
    32a4:	cd bf       	out	0x3d, r28	; 61
    32a6:	cf 91       	pop	r28
    32a8:	df 91       	pop	r29
    32aa:	1f 91       	pop	r17
    32ac:	0f 91       	pop	r16
    32ae:	ff 90       	pop	r15
    32b0:	ef 90       	pop	r14
    32b2:	df 90       	pop	r13
    32b4:	cf 90       	pop	r12
    32b6:	bf 90       	pop	r11
    32b8:	08 95       	ret

000032ba <_ZL13sendTagButtonPKcPK19__FlashStringHelper>:
    32ba:	ef 92       	push	r14
    32bc:	ff 92       	push	r15
    32be:	0f 93       	push	r16
    32c0:	1f 93       	push	r17
    32c2:	8c 01       	movw	r16, r24
    32c4:	7b 01       	movw	r14, r22
    32c6:	88 e6       	ldi	r24, 0x68	; 104
    32c8:	93 e0       	ldi	r25, 0x03	; 3
    32ca:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    32ce:	c8 01       	movw	r24, r16
    32d0:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    32d4:	8d e5       	ldi	r24, 0x5D	; 93
    32d6:	93 e0       	ldi	r25, 0x03	; 3
    32d8:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    32dc:	c7 01       	movw	r24, r14
    32de:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    32e2:	89 e5       	ldi	r24, 0x59	; 89
    32e4:	93 e0       	ldi	r25, 0x03	; 3
    32e6:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    32ea:	1f 91       	pop	r17
    32ec:	0f 91       	pop	r16
    32ee:	ff 90       	pop	r15
    32f0:	ef 90       	pop	r14
    32f2:	08 95       	ret

000032f4 <_ZL30printSendConfigurationControlsv>:
    32f4:	83 e9       	ldi	r24, 0x93	; 147
    32f6:	94 e0       	ldi	r25, 0x04	; 4
    32f8:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    32fc:	8e e6       	ldi	r24, 0x6E	; 110
    32fe:	94 e0       	ldi	r25, 0x04	; 4
    3300:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    3304:	86 e6       	ldi	r24, 0x66	; 102
    3306:	94 e0       	ldi	r25, 0x04	; 4
    3308:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    330c:	08 95       	ret

0000330e <_Z14sendFreeMemoryv>:
    330e:	80 ec       	ldi	r24, 0xC0	; 192
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    3316:	0e 94 80 20 	call	0x4100	; 0x4100 <freeMemory>
    331a:	0e 94 f7 16 	call	0x2dee	; 0x2dee <_ZL8sendDatai>
    331e:	8e ec       	ldi	r24, 0xCE	; 206
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    3326:	8a e7       	ldi	r24, 0x7A	; 122
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    332e:	08 95       	ret

00003330 <_ZL14sendTimeStatusv>:
    3330:	8e e1       	ldi	r24, 0x1E	; 30
    3332:	94 e0       	ldi	r25, 0x04	; 4
    3334:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    3338:	82 e6       	ldi	r24, 0x62	; 98
    333a:	60 e0       	ldi	r22, 0x00	; 0
    333c:	70 e0       	ldi	r23, 0x00	; 0
    333e:	0e 94 e5 16 	call	0x2dca	; 0x2dca <_ZL7sendTagc8HTTP_TAG>
    3342:	80 91 03 01 	lds	r24, 0x0103
    3346:	88 23       	and	r24, r24
    3348:	19 f0       	breq	.+6      	; 0x3350 <_ZL14sendTimeStatusv+0x20>
    334a:	8a e1       	ldi	r24, 0x1A	; 26
    334c:	94 e0       	ldi	r25, 0x04	; 4
    334e:	02 c0       	rjmp	.+4      	; 0x3354 <_ZL14sendTimeStatusv+0x24>
    3350:	84 e1       	ldi	r24, 0x14	; 20
    3352:	94 e0       	ldi	r25, 0x04	; 4
    3354:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    3358:	82 e6       	ldi	r24, 0x62	; 98
    335a:	61 e0       	ldi	r22, 0x01	; 1
    335c:	70 e0       	ldi	r23, 0x00	; 0
    335e:	0e 94 e5 16 	call	0x2dca	; 0x2dca <_ZL7sendTagc8HTTP_TAG>
    3362:	87 e0       	ldi	r24, 0x07	; 7
    3364:	94 e0       	ldi	r25, 0x04	; 4
    3366:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    336a:	0e 94 e7 22 	call	0x45ce	; 0x45ce <_Z3nowv>
    336e:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <_ZL8sendDatam>
    3372:	8b ef       	ldi	r24, 0xFB	; 251
    3374:	93 e0       	ldi	r25, 0x03	; 3
    3376:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	0e 94 f7 16 	call	0x2dee	; 0x2dee <_ZL8sendDatai>
    3382:	89 ee       	ldi	r24, 0xE9	; 233
    3384:	93 e0       	ldi	r25, 0x03	; 3
    3386:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    338a:	89 e0       	ldi	r24, 0x09	; 9
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	0e 94 f7 16 	call	0x2dee	; 0x2dee <_ZL8sendDatai>
    3392:	82 ee       	ldi	r24, 0xE2	; 226
    3394:	93 e0       	ldi	r25, 0x03	; 3
    3396:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    339a:	08 95       	ret

0000339c <_ZL21sendTemperatureStatusv>:
    339c:	af 92       	push	r10
    339e:	bf 92       	push	r11
    33a0:	cf 92       	push	r12
    33a2:	df 92       	push	r13
    33a4:	ef 92       	push	r14
    33a6:	ff 92       	push	r15
    33a8:	0f 93       	push	r16
    33aa:	1f 93       	push	r17
    33ac:	cf 93       	push	r28
    33ae:	df 93       	push	r29
  /////////////////////////////////////////////////////////////////////
  //                        GROWBOX COMMANDS                         //
  /////////////////////////////////////////////////////////////////////

  static void getStatistics(float &_workingTemperature, float &_statisticsTemperature, int &_statisticsTemperatureCount){
    _workingTemperature = workingTemperature;
    33b0:	00 91 fc 01 	lds	r16, 0x01FC
    33b4:	f0 90 fd 01 	lds	r15, 0x01FD
    33b8:	e0 90 fe 01 	lds	r14, 0x01FE
    33bc:	d0 90 ff 01 	lds	r13, 0x01FF

    if (statisticsTemperatureCount != 0){
    33c0:	c0 91 04 02 	lds	r28, 0x0204
    33c4:	d0 91 05 02 	lds	r29, 0x0205
    33c8:	20 97       	sbiw	r28, 0x00	; 0
    33ca:	29 f4       	brne	.+10     	; 0x33d6 <_ZL21sendTemperatureStatusv+0x3a>
    33cc:	a0 2e       	mov	r10, r16
    33ce:	bf 2c       	mov	r11, r15
    33d0:	ce 2c       	mov	r12, r14
    33d2:	1d 2d       	mov	r17, r13
    33d4:	16 c0       	rjmp	.+44     	; 0x3402 <_ZL21sendTemperatureStatusv+0x66>
      _statisticsTemperature = statisticsTemperatureSumm/statisticsTemperatureCount;
    33d6:	be 01       	movw	r22, r28
    33d8:	88 27       	eor	r24, r24
    33da:	77 fd       	sbrc	r23, 7
    33dc:	80 95       	com	r24
    33de:	98 2f       	mov	r25, r24
    33e0:	0e 94 79 3c 	call	0x78f2	; 0x78f2 <__floatsisf>
    33e4:	9b 01       	movw	r18, r22
    33e6:	ac 01       	movw	r20, r24
    33e8:	60 91 00 02 	lds	r22, 0x0200
    33ec:	70 91 01 02 	lds	r23, 0x0201
    33f0:	80 91 02 02 	lds	r24, 0x0202
    33f4:	90 91 03 02 	lds	r25, 0x0203
    33f8:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divsf3>
    33fc:	5b 01       	movw	r10, r22
    33fe:	c8 2e       	mov	r12, r24
    3400:	19 2f       	mov	r17, r25
    3402:	8b e3       	ldi	r24, 0x3B	; 59
    3404:	92 e0       	ldi	r25, 0x02	; 2
    3406:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    340a:	88 e5       	ldi	r24, 0x58	; 88
    340c:	94 e0       	ldi	r25, 0x04	; 4
    340e:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    3412:	20 2f       	mov	r18, r16
    3414:	3f 2d       	mov	r19, r15
    3416:	4e 2d       	mov	r20, r14
    3418:	5d 2d       	mov	r21, r13
    341a:	b9 01       	movw	r22, r18
    341c:	ca 01       	movw	r24, r20
    341e:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <_ZL8sendDataf>
    3422:	80 e5       	ldi	r24, 0x50	; 80
    3424:	94 e0       	ldi	r25, 0x04	; 4
    3426:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    342a:	4c 2d       	mov	r20, r12
    342c:	51 2f       	mov	r21, r17
    342e:	b5 01       	movw	r22, r10
    3430:	ca 01       	movw	r24, r20
    3432:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <_ZL8sendDataf>
    3436:	87 e4       	ldi	r24, 0x47	; 71
    3438:	94 e0       	ldi	r25, 0x04	; 4
    343a:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    343e:	ce 01       	movw	r24, r28
    3440:	0e 94 f7 16 	call	0x2dee	; 0x2dee <_ZL8sendDatai>
    3444:	8f e3       	ldi	r24, 0x3F	; 63
    3446:	94 e0       	ldi	r25, 0x04	; 4
    3448:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    344c:	60 e0       	ldi	r22, 0x00	; 0
    344e:	70 e0       	ldi	r23, 0x00	; 0
    3450:	80 ed       	ldi	r24, 0xD0	; 208
    3452:	91 e4       	ldi	r25, 0x41	; 65
    3454:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <_ZL8sendDataf>
    3458:	86 e2       	ldi	r24, 0x26	; 38
    345a:	94 e0       	ldi	r25, 0x04	; 4
    345c:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    3460:	60 e0       	ldi	r22, 0x00	; 0
    3462:	70 e0       	ldi	r23, 0x00	; 0
    3464:	80 e4       	ldi	r24, 0x40	; 64
    3466:	90 e4       	ldi	r25, 0x40	; 64
    3468:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <_ZL8sendDataf>
    346c:	86 e3       	ldi	r24, 0x36	; 54
    346e:	94 e0       	ldi	r25, 0x04	; 4
    3470:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    3474:	60 e0       	ldi	r22, 0x00	; 0
    3476:	70 e0       	ldi	r23, 0x00	; 0
    3478:	80 eb       	ldi	r24, 0xB0	; 176
    347a:	91 e4       	ldi	r25, 0x41	; 65
    347c:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <_ZL8sendDataf>
    3480:	86 e2       	ldi	r24, 0x26	; 38
    3482:	94 e0       	ldi	r25, 0x04	; 4
    3484:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    3488:	60 e0       	ldi	r22, 0x00	; 0
    348a:	70 e0       	ldi	r23, 0x00	; 0
    348c:	80 ec       	ldi	r24, 0xC0	; 192
    348e:	90 e4       	ldi	r25, 0x40	; 64
    3490:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <_ZL8sendDataf>
    3494:	8a e2       	ldi	r24, 0x2A	; 42
    3496:	94 e0       	ldi	r25, 0x04	; 4
    3498:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    349c:	60 e0       	ldi	r22, 0x00	; 0
    349e:	70 e0       	ldi	r23, 0x00	; 0
    34a0:	8c e0       	ldi	r24, 0x0C	; 12
    34a2:	92 e4       	ldi	r25, 0x42	; 66
    34a4:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <_ZL8sendDataf>
    34a8:	8a e7       	ldi	r24, 0x7A	; 122
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    34b0:	df 91       	pop	r29
    34b2:	cf 91       	pop	r28
    34b4:	1f 91       	pop	r17
    34b6:	0f 91       	pop	r16
    34b8:	ff 90       	pop	r15
    34ba:	ef 90       	pop	r14
    34bc:	df 90       	pop	r13
    34be:	cf 90       	pop	r12
    34c0:	bf 90       	pop	r11
    34c2:	af 90       	pop	r10
    34c4:	08 95       	ret

000034c6 <_ZL16printSendFullLoghhh>:
    34c6:	2f 92       	push	r2
    34c8:	3f 92       	push	r3
    34ca:	4f 92       	push	r4
    34cc:	5f 92       	push	r5
    34ce:	6f 92       	push	r6
    34d0:	7f 92       	push	r7
    34d2:	8f 92       	push	r8
    34d4:	9f 92       	push	r9
    34d6:	af 92       	push	r10
    34d8:	bf 92       	push	r11
    34da:	cf 92       	push	r12
    34dc:	df 92       	push	r13
    34de:	ef 92       	push	r14
    34e0:	ff 92       	push	r15
    34e2:	0f 93       	push	r16
    34e4:	1f 93       	push	r17
    34e6:	df 93       	push	r29
    34e8:	cf 93       	push	r28
    34ea:	cd b7       	in	r28, 0x3d	; 61
    34ec:	de b7       	in	r29, 0x3e	; 62
    34ee:	af 97       	sbiw	r28, 0x2f	; 47
    34f0:	0f b6       	in	r0, 0x3f	; 63
    34f2:	f8 94       	cli
    34f4:	de bf       	out	0x3e, r29	; 62
    34f6:	0f be       	out	0x3f, r0	; 63
    34f8:	cd bf       	out	0x3d, r28	; 61
    34fa:	8b a7       	std	Y+43, r24	; 0x2b
    34fc:	6c a7       	std	Y+44, r22	; 0x2c
    34fe:	4d a7       	std	Y+45, r20	; 0x2d
    3500:	88 e6       	ldi	r24, 0x68	; 104
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	60 e0       	ldi	r22, 0x00	; 0
    3506:	70 e0       	ldi	r23, 0x00	; 0
    3508:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    350c:	21 e0       	ldi	r18, 0x01	; 1
    350e:	2a a7       	std	Y+42, r18	; 0x2a
    3510:	cc 24       	eor	r12, r12
    3512:	dd 24       	eor	r13, r13
    3514:	aa 24       	eor	r10, r10
    3516:	bb 24       	eor	r11, r11
    3518:	ce 01       	movw	r24, r28
    351a:	0b 96       	adiw	r24, 0x0b	; 11
    351c:	9f a7       	std	Y+47, r25	; 0x2f
    351e:	8e a7       	std	Y+46, r24	; 0x2e
    3520:	1e 01       	movw	r2, r28
    3522:	08 94       	sec
    3524:	21 1c       	adc	r2, r1
    3526:	31 1c       	adc	r3, r1
    3528:	b5 e1       	ldi	r27, 0x15	; 21
    352a:	4b 2e       	mov	r4, r27
    352c:	51 2c       	mov	r5, r1
    352e:	4c 0e       	add	r4, r28
    3530:	5d 1e       	adc	r5, r29
    3532:	ac e1       	ldi	r26, 0x1C	; 28
    3534:	6a 2e       	mov	r6, r26
    3536:	71 2c       	mov	r7, r1
    3538:	6c 0e       	add	r6, r28
    353a:	7d 1e       	adc	r7, r29
    353c:	f3 e2       	ldi	r31, 0x23	; 35
    353e:	8f 2e       	mov	r8, r31
    3540:	91 2c       	mov	r9, r1
    3542:	8c 0e       	add	r8, r28
    3544:	9d 1e       	adc	r9, r29
    3546:	6b c0       	rjmp	.+214    	; 0x361e <_ZL16printSendFullLoghhh+0x158>
  static boolean isLogOverflow(){
    return bootRecord.boolPreferencies.isLogOverflow;
  }

  static word getLogRecordsCount(){
    if (bootRecord.boolPreferencies.isLogOverflow){
    3548:	44 23       	and	r20, r20
    354a:	19 f0       	breq	.+6      	; 0x3552 <_ZL16printSendFullLoghhh+0x8c>
    354c:	8c e2       	ldi	r24, 0x2C	; 44
    354e:	93 e0       	ldi	r25, 0x03	; 3
    3550:	0a c0       	rjmp	.+20     	; 0x3566 <_ZL16printSendFullLoghhh+0xa0>
      return LOG_CAPACITY; 
    } 
    else {
      return (bootRecord.nextLogRecordAddress - sizeof(BootRecord))/sizeof(LogRecord);
    3552:	80 91 cb 01 	lds	r24, 0x01CB
    3556:	90 91 cc 01 	lds	r25, 0x01CC
    355a:	80 97       	sbiw	r24, 0x20	; 32
    355c:	65 e0       	ldi	r22, 0x05	; 5
    355e:	70 e0       	ldi	r23, 0x00	; 0
    3560:	0e 94 af 3d 	call	0x7b5e	; 0x7b5e <__udivmodhi4>
    3564:	cb 01       	movw	r24, r22
    }
  }
  static boolean getLogRecordByIndex(word index, LogRecord &logRecord){
    if (index >= getLogRecordsCount()){
    3566:	c8 16       	cp	r12, r24
    3568:	d9 06       	cpc	r13, r25
    356a:	40 f5       	brcc	.+80     	; 0x35bc <_ZL16printSendFullLoghhh+0xf6>
      return false;
    }

    word logRecordOffset = 0;
    if (bootRecord.boolPreferencies.isLogOverflow){
    356c:	44 23       	and	r20, r20
    356e:	19 f4       	brne	.+6      	; 0x3576 <_ZL16printSendFullLoghhh+0xb0>
    3570:	80 e0       	ldi	r24, 0x00	; 0
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	05 c0       	rjmp	.+10     	; 0x3580 <_ZL16printSendFullLoghhh+0xba>
      logRecordOffset = bootRecord.nextLogRecordAddress - sizeof(BootRecord);
    3576:	80 91 cb 01 	lds	r24, 0x01CB
    357a:	90 91 cc 01 	lds	r25, 0x01CC
    357e:	80 97       	sbiw	r24, 0x20	; 32
    }
    //Serial.print("logRecordOffset"); Serial.println(logRecordOffset);
    logRecordOffset += index * sizeof(LogRecord);
    3580:	8a 0d       	add	r24, r10
    3582:	9b 1d       	adc	r25, r11

    //Serial.print("logRecordOffset"); Serial.println(logRecordOffset);
    if (logRecordOffset >= LOG_RECORD_OVERFLOW_OFFSET){
    3584:	ef e0       	ldi	r30, 0x0F	; 15
    3586:	8c 3d       	cpi	r24, 0xDC	; 220
    3588:	9e 07       	cpc	r25, r30
    358a:	10 f0       	brcs	.+4      	; 0x3590 <_ZL16printSendFullLoghhh+0xca>
      logRecordOffset -= LOG_RECORD_OVERFLOW_OFFSET;
    358c:	8c 5d       	subi	r24, 0xDC	; 220
    358e:	9f 40       	sbci	r25, 0x0F	; 15
    }
    //Serial.print("logRecordOffset"); Serial.println(logRecordOffset);
    word address = sizeof(BootRecord) + logRecordOffset; 
    3590:	e0 e2       	ldi	r30, 0x20	; 32
    3592:	ee 2e       	mov	r14, r30
    3594:	f1 2c       	mov	r15, r1
    3596:	e8 0e       	add	r14, r24
    3598:	f9 1e       	adc	r15, r25
    359a:	8e 01       	movw	r16, r28
    359c:	0a 5f       	subi	r16, 0xFA	; 250
    359e:	1f 4f       	sbci	r17, 0xFF	; 255
      byte value =  read(address + c);
    35a0:	c7 01       	movw	r24, r14
    35a2:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <_ZN10GB_Storage4readEj>
      ((byte*)data)[c] = value;
    35a6:	f8 01       	movw	r30, r16
    35a8:	81 93       	st	Z+, r24
    35aa:	8f 01       	movw	r16, r30
    35ac:	08 94       	sec
    35ae:	e1 1c       	adc	r14, r1
    35b0:	f1 1c       	adc	r15, r1
      write(address + c, value);
    }
  }

  static void read(word address, void *data, const byte sizeofData) {
    for (word c = 0; c < sizeofData; c++){
    35b2:	8e a5       	ldd	r24, Y+46	; 0x2e
    35b4:	9f a5       	ldd	r25, Y+47	; 0x2f
    35b6:	e8 17       	cp	r30, r24
    35b8:	f9 07       	cpc	r31, r25
    35ba:	91 f7       	brne	.-28     	; 0x35a0 <_ZL16printSendFullLoghhh+0xda>
  }  

  static LogRecord getLogRecordByIndex(int index){
    LogRecord logRecord;
    GB_StorageHelper::getLogRecordByIndex(index, logRecord);
    return logRecord;
    35bc:	de 01       	movw	r26, r28
    35be:	50 96       	adiw	r26, 0x10	; 16
    35c0:	fe 01       	movw	r30, r28
    35c2:	36 96       	adiw	r30, 0x06	; 6
    35c4:	85 e0       	ldi	r24, 0x05	; 5
    35c6:	01 90       	ld	r0, Z+
    35c8:	0d 92       	st	X+, r0
    35ca:	81 50       	subi	r24, 0x01	; 1
    35cc:	e1 f7       	brne	.-8      	; 0x35c6 <_ZL16printSendFullLoghhh+0x100>
    35ce:	de 01       	movw	r26, r28
    35d0:	1b 96       	adiw	r26, 0x0b	; 11
    35d2:	fe 01       	movw	r30, r28
    35d4:	70 96       	adiw	r30, 0x10	; 16
    35d6:	85 e0       	ldi	r24, 0x05	; 5
    35d8:	01 90       	ld	r0, Z+
    35da:	0d 92       	st	X+, r0
    35dc:	81 50       	subi	r24, 0x01	; 1
    35de:	e1 f7       	brne	.-8      	; 0x35d8 <_ZL16printSendFullLoghhh+0x112>
    35e0:	d1 01       	movw	r26, r2
    35e2:	fe 01       	movw	r30, r28
    35e4:	3b 96       	adiw	r30, 0x0b	; 11
    35e6:	85 e0       	ldi	r24, 0x05	; 5
    35e8:	01 90       	ld	r0, Z+
    35ea:	0d 92       	st	X+, r0
    35ec:	81 50       	subi	r24, 0x01	; 1
    35ee:	e1 f7       	brne	.-8      	; 0x35e8 <_ZL16printSendFullLoghhh+0x122>
    35f0:	9b a5       	ldd	r25, Y+43	; 0x2b
    35f2:	99 23       	and	r25, r25
    35f4:	d1 f5       	brne	.+116    	; 0x366a <_ZL16printSendFullLoghhh+0x1a4>
    35f6:	8d 81       	ldd	r24, Y+5	; 0x05
    35f8:	80 7c       	andi	r24, 0xC0	; 192
    35fa:	b9 f5       	brne	.+110    	; 0x366a <_ZL16printSendFullLoghhh+0x1a4>
    35fc:	09 c0       	rjmp	.+18     	; 0x3610 <_ZL16printSendFullLoghhh+0x14a>
    35fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3600:	80 7c       	andi	r24, 0xC0	; 192
    3602:	80 34       	cpi	r24, 0x40	; 64
    3604:	a9 f5       	brne	.+106    	; 0x3670 <_ZL16printSendFullLoghhh+0x1aa>
    3606:	04 c0       	rjmp	.+8      	; 0x3610 <_ZL16printSendFullLoghhh+0x14a>
    3608:	8d 81       	ldd	r24, Y+5	; 0x05
    360a:	80 7c       	andi	r24, 0xC0	; 192
    360c:	80 3c       	cpi	r24, 0xC0	; 192
    360e:	99 f5       	brne	.+102    	; 0x3676 <_ZL16printSendFullLoghhh+0x1b0>
    3610:	08 94       	sec
    3612:	c1 1c       	adc	r12, r1
    3614:	d1 1c       	adc	r13, r1
    3616:	e5 e0       	ldi	r30, 0x05	; 5
    3618:	f0 e0       	ldi	r31, 0x00	; 0
    361a:	ae 0e       	add	r10, r30
    361c:	bf 1e       	adc	r11, r31
  static boolean isLogOverflow(){
    return bootRecord.boolPreferencies.isLogOverflow;
  }

  static word getLogRecordsCount(){
    if (bootRecord.boolPreferencies.isLogOverflow){
    361e:	80 91 cd 01 	lds	r24, 0x01CD
    3622:	48 2f       	mov	r20, r24
    3624:	41 70       	andi	r20, 0x01	; 1
    3626:	80 ff       	sbrs	r24, 0
    3628:	03 c0       	rjmp	.+6      	; 0x3630 <_ZL16printSendFullLoghhh+0x16a>
    362a:	8c e2       	ldi	r24, 0x2C	; 44
    362c:	93 e0       	ldi	r25, 0x03	; 3
    362e:	0a c0       	rjmp	.+20     	; 0x3644 <_ZL16printSendFullLoghhh+0x17e>
      return LOG_CAPACITY; 
    } 
    else {
      return (bootRecord.nextLogRecordAddress - sizeof(BootRecord))/sizeof(LogRecord);
    3630:	80 91 cb 01 	lds	r24, 0x01CB
    3634:	90 91 cc 01 	lds	r25, 0x01CC
    3638:	80 97       	sbiw	r24, 0x20	; 32
    363a:	65 e0       	ldi	r22, 0x05	; 5
    363c:	70 e0       	ldi	r23, 0x00	; 0
    363e:	0e 94 af 3d 	call	0x7b5e	; 0x7b5e <__udivmodhi4>
    3642:	cb 01       	movw	r24, r22
    3644:	c8 16       	cp	r12, r24
    3646:	d9 06       	cpc	r13, r25
    3648:	0c f4       	brge	.+2      	; 0x364c <_ZL16printSendFullLoghhh+0x186>
    364a:	7e cf       	rjmp	.-260    	; 0x3548 <_ZL16printSendFullLoghhh+0x82>
    364c:	88 e6       	ldi	r24, 0x68	; 104
    364e:	90 e0       	ldi	r25, 0x00	; 0
    3650:	61 e0       	ldi	r22, 0x01	; 1
    3652:	70 e0       	ldi	r23, 0x00	; 0
    3654:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    3658:	fa a5       	ldd	r31, Y+42	; 0x2a
    365a:	ff 23       	and	r31, r31
    365c:	09 f4       	brne	.+2      	; 0x3660 <_ZL16printSendFullLoghhh+0x19a>
    365e:	78 c0       	rjmp	.+240    	; 0x3750 <_ZL16printSendFullLoghhh+0x28a>
    3660:	83 eb       	ldi	r24, 0xB3	; 179
    3662:	94 e0       	ldi	r25, 0x04	; 4
    3664:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    3668:	73 c0       	rjmp	.+230    	; 0x3750 <_ZL16printSendFullLoghhh+0x28a>
    366a:	2c a5       	ldd	r18, Y+44	; 0x2c
    366c:	22 23       	and	r18, r18
    366e:	39 f2       	breq	.-114    	; 0x35fe <_ZL16printSendFullLoghhh+0x138>
    3670:	8d a5       	ldd	r24, Y+45	; 0x2d
    3672:	88 23       	and	r24, r24
    3674:	49 f2       	breq	.-110    	; 0x3608 <_ZL16printSendFullLoghhh+0x142>
    3676:	8e e6       	ldi	r24, 0x6E	; 110
    3678:	90 e0       	ldi	r25, 0x00	; 0
    367a:	60 e0       	ldi	r22, 0x00	; 0
    367c:	70 e0       	ldi	r23, 0x00	; 0
    367e:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    3682:	81 e7       	ldi	r24, 0x71	; 113
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	60 e0       	ldi	r22, 0x00	; 0
    3688:	70 e0       	ldi	r23, 0x00	; 0
    368a:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    368e:	c6 01       	movw	r24, r12
    3690:	01 96       	adiw	r24, 0x01	; 1
    3692:	0e 94 f7 16 	call	0x2dee	; 0x2dee <_ZL8sendDatai>
    3696:	81 e7       	ldi	r24, 0x71	; 113
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	61 e0       	ldi	r22, 0x01	; 1
    369c:	70 e0       	ldi	r23, 0x00	; 0
    369e:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    36a2:	81 e7       	ldi	r24, 0x71	; 113
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	60 e0       	ldi	r22, 0x00	; 0
    36a8:	70 e0       	ldi	r23, 0x00	; 0
    36aa:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    36ae:	49 81       	ldd	r20, Y+1	; 0x01
    36b0:	5a 81       	ldd	r21, Y+2	; 0x02
    36b2:	6b 81       	ldd	r22, Y+3	; 0x03
    36b4:	7c 81       	ldd	r23, Y+4	; 0x04
    36b6:	c2 01       	movw	r24, r4
    36b8:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_ZN13GB_PrintDirty13getTimeStringEm>
    36bc:	c2 01       	movw	r24, r4
    36be:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <_ZL8sendDataRK6String>
    36c2:	c2 01       	movw	r24, r4
    36c4:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
    36c8:	81 e7       	ldi	r24, 0x71	; 113
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	61 e0       	ldi	r22, 0x01	; 1
    36ce:	70 e0       	ldi	r23, 0x00	; 0
    36d0:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    36d4:	81 e7       	ldi	r24, 0x71	; 113
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	60 e0       	ldi	r22, 0x00	; 0
    36da:	70 e0       	ldi	r23, 0x00	; 0
    36dc:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    36e0:	c3 01       	movw	r24, r6
    36e2:	6d 81       	ldd	r22, Y+5	; 0x05
    36e4:	41 e0       	ldi	r20, 0x01	; 1
    36e6:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN13GB_PrintDirty6getHEXEhh>
    36ea:	c3 01       	movw	r24, r6
    36ec:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <_ZL8sendDataRK6String>
    36f0:	c3 01       	movw	r24, r6
    36f2:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
    36f6:	81 e7       	ldi	r24, 0x71	; 113
    36f8:	90 e0       	ldi	r25, 0x00	; 0
    36fa:	61 e0       	ldi	r22, 0x01	; 1
    36fc:	70 e0       	ldi	r23, 0x00	; 0
    36fe:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    3702:	81 e7       	ldi	r24, 0x71	; 113
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	60 e0       	ldi	r22, 0x00	; 0
    3708:	70 e0       	ldi	r23, 0x00	; 0
    370a:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    370e:	c1 01       	movw	r24, r2
    3710:	0e 94 06 05 	call	0xa0c	; 0xa0c <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord>
    3714:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    3718:	c4 01       	movw	r24, r8
    371a:	b1 01       	movw	r22, r2
    371c:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <_ZN9GB_Logger18getLogRecordSuffixERK9LogRecord>
    3720:	c4 01       	movw	r24, r8
    3722:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <_ZL8sendDataRK6String>
    3726:	c4 01       	movw	r24, r8
    3728:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
    372c:	81 e7       	ldi	r24, 0x71	; 113
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	61 e0       	ldi	r22, 0x01	; 1
    3732:	70 e0       	ldi	r23, 0x00	; 0
    3734:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    3738:	8e e6       	ldi	r24, 0x6E	; 110
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	61 e0       	ldi	r22, 0x01	; 1
    373e:	70 e0       	ldi	r23, 0x00	; 0
    3740:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    3744:	80 91 4d 01 	lds	r24, 0x014D
    3748:	88 23       	and	r24, r24
    374a:	11 f4       	brne	.+4      	; 0x3750 <_ZL16printSendFullLoghhh+0x28a>
    374c:	1a a6       	std	Y+42, r1	; 0x2a
    374e:	60 cf       	rjmp	.-320    	; 0x3610 <_ZL16printSendFullLoghhh+0x14a>
    3750:	af 96       	adiw	r28, 0x2f	; 47
    3752:	0f b6       	in	r0, 0x3f	; 63
    3754:	f8 94       	cli
    3756:	de bf       	out	0x3e, r29	; 62
    3758:	0f be       	out	0x3f, r0	; 63
    375a:	cd bf       	out	0x3d, r28	; 61
    375c:	cf 91       	pop	r28
    375e:	df 91       	pop	r29
    3760:	1f 91       	pop	r17
    3762:	0f 91       	pop	r16
    3764:	ff 90       	pop	r15
    3766:	ef 90       	pop	r14
    3768:	df 90       	pop	r13
    376a:	cf 90       	pop	r12
    376c:	bf 90       	pop	r11
    376e:	af 90       	pop	r10
    3770:	9f 90       	pop	r9
    3772:	8f 90       	pop	r8
    3774:	7f 90       	pop	r7
    3776:	6f 90       	pop	r6
    3778:	5f 90       	pop	r5
    377a:	4f 90       	pop	r4
    377c:	3f 90       	pop	r3
    377e:	2f 90       	pop	r2
    3780:	08 95       	ret

00003782 <_ZL14sendBootStatusv>:
    3782:	8c ec       	ldi	r24, 0xCC	; 204
    3784:	93 e0       	ldi	r25, 0x03	; 3
    3786:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    378a:	60 91 c7 01 	lds	r22, 0x01C7
    378e:	70 91 c8 01 	lds	r23, 0x01C8
    3792:	80 91 c9 01 	lds	r24, 0x01C9
    3796:	90 91 ca 01 	lds	r25, 0x01CA
    379a:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <_ZL8sendDatam>
    379e:	8a eb       	ldi	r24, 0xBA	; 186
    37a0:	93 e0       	ldi	r25, 0x03	; 3
    37a2:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    37a6:	60 91 c3 01 	lds	r22, 0x01C3
    37aa:	70 91 c4 01 	lds	r23, 0x01C4
    37ae:	80 91 c5 01 	lds	r24, 0x01C5
    37b2:	90 91 c6 01 	lds	r25, 0x01C6
    37b6:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <_ZL8sendDatam>
    37ba:	80 eb       	ldi	r24, 0xB0	; 176
    37bc:	93 e0       	ldi	r25, 0x03	; 3
    37be:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    37c2:	80 91 cd 01 	lds	r24, 0x01CD
    37c6:	86 95       	lsr	r24
    37c8:	83 70       	andi	r24, 0x03	; 3
    37ca:	19 f0       	breq	.+6      	; 0x37d2 <_ZL14sendBootStatusv+0x50>
    37cc:	82 e0       	ldi	r24, 0x02	; 2
    37ce:	91 e0       	ldi	r25, 0x01	; 1
    37d0:	02 c0       	rjmp	.+4      	; 0x37d6 <_ZL14sendBootStatusv+0x54>
    37d2:	8b e0       	ldi	r24, 0x0B	; 11
    37d4:	91 e0       	ldi	r25, 0x01	; 1
    37d6:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    37da:	85 ea       	ldi	r24, 0xA5	; 165
    37dc:	93 e0       	ldi	r25, 0x03	; 3
    37de:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
  static boolean isLogOverflow(){
    return bootRecord.boolPreferencies.isLogOverflow;
  }

  static word getLogRecordsCount(){
    if (bootRecord.boolPreferencies.isLogOverflow){
    37e2:	80 91 cd 01 	lds	r24, 0x01CD
    37e6:	80 ff       	sbrs	r24, 0
    37e8:	03 c0       	rjmp	.+6      	; 0x37f0 <_ZL14sendBootStatusv+0x6e>
    37ea:	8c e2       	ldi	r24, 0x2C	; 44
    37ec:	93 e0       	ldi	r25, 0x03	; 3
    37ee:	0a c0       	rjmp	.+20     	; 0x3804 <_ZL14sendBootStatusv+0x82>
      return LOG_CAPACITY; 
    } 
    else {
      return (bootRecord.nextLogRecordAddress - sizeof(BootRecord))/sizeof(LogRecord);
    37f0:	80 91 cb 01 	lds	r24, 0x01CB
    37f4:	90 91 cc 01 	lds	r25, 0x01CC
    37f8:	80 97       	sbiw	r24, 0x20	; 32
    37fa:	65 e0       	ldi	r22, 0x05	; 5
    37fc:	70 e0       	ldi	r23, 0x00	; 0
    37fe:	0e 94 af 3d 	call	0x7b5e	; 0x7b5e <__udivmodhi4>
    3802:	cb 01       	movw	r24, r22
    3804:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <_ZL8sendDataj>
    3808:	8f e2       	ldi	r24, 0x2F	; 47
    380a:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <_ZL8sendDatac>
    380e:	8c e2       	ldi	r24, 0x2C	; 44
    3810:	93 e0       	ldi	r25, 0x03	; 3
    3812:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <_ZL8sendDataj>
    3816:	80 91 cd 01 	lds	r24, 0x01CD
    381a:	80 ff       	sbrs	r24, 0
    381c:	04 c0       	rjmp	.+8      	; 0x3826 <_ZL14sendBootStatusv+0xa4>
    381e:	8a e9       	ldi	r24, 0x9A	; 154
    3820:	93 e0       	ldi	r25, 0x03	; 3
    3822:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    3826:	8a e7       	ldi	r24, 0x7A	; 122
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    382e:	08 95       	ret

00003830 <_ZL24generateHttpResponsePageRK6String>:
    3830:	2f 92       	push	r2
    3832:	3f 92       	push	r3
    3834:	4f 92       	push	r4
    3836:	5f 92       	push	r5
    3838:	6f 92       	push	r6
    383a:	7f 92       	push	r7
    383c:	8f 92       	push	r8
    383e:	9f 92       	push	r9
    3840:	af 92       	push	r10
    3842:	bf 92       	push	r11
    3844:	cf 92       	push	r12
    3846:	df 92       	push	r13
    3848:	ef 92       	push	r14
    384a:	ff 92       	push	r15
    384c:	0f 93       	push	r16
    384e:	1f 93       	push	r17
    3850:	df 93       	push	r29
    3852:	cf 93       	push	r28
    3854:	cd b7       	in	r28, 0x3d	; 61
    3856:	de b7       	in	r29, 0x3e	; 62
    3858:	cb 55       	subi	r28, 0x5B	; 91
    385a:	d0 40       	sbci	r29, 0x00	; 0
    385c:	0f b6       	in	r0, 0x3f	; 63
    385e:	f8 94       	cli
    3860:	de bf       	out	0x3e, r29	; 62
    3862:	0f be       	out	0x3f, r0	; 63
    3864:	cd bf       	out	0x3d, r28	; 61
    3866:	8c 01       	movw	r16, r24
    3868:	80 91 4b 01 	lds	r24, 0x014B
    386c:	90 91 4c 01 	lds	r25, 0x014C
    3870:	04 97       	sbiw	r24, 0x04	; 4
    3872:	09 f0       	breq	.+2      	; 0x3876 <_ZL24generateHttpResponsePageRK6String+0x46>
    3874:	4c c0       	rjmp	.+152    	; 0x390e <_ZL24generateHttpResponsePageRK6String+0xde>
    3876:	89 e1       	ldi	r24, 0x19	; 25
    3878:	93 e0       	ldi	r25, 0x03	; 3
    387a:	60 e0       	ldi	r22, 0x00	; 0
    387c:	70 e0       	ldi	r23, 0x00	; 0
    387e:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    3882:	88 e6       	ldi	r24, 0x68	; 104
    3884:	60 e0       	ldi	r22, 0x00	; 0
    3886:	70 e0       	ldi	r23, 0x00	; 0
    3888:	0e 94 e5 16 	call	0x2dca	; 0x2dca <_ZL7sendTagc8HTTP_TAG>
    388c:	81 e5       	ldi	r24, 0x51	; 81
    388e:	93 e0       	ldi	r25, 0x03	; 3
    3890:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    3894:	88 e6       	ldi	r24, 0x68	; 104
    3896:	61 e0       	ldi	r22, 0x01	; 1
    3898:	70 e0       	ldi	r23, 0x00	; 0
    389a:	0e 94 e5 16 	call	0x2dca	; 0x2dca <_ZL7sendTagc8HTTP_TAG>
    389e:	87 e4       	ldi	r24, 0x47	; 71
    38a0:	92 e0       	ldi	r25, 0x02	; 2
    38a2:	6a e4       	ldi	r22, 0x4A	; 74
    38a4:	73 e0       	ldi	r23, 0x03	; 3
    38a6:	0e 94 5d 19 	call	0x32ba	; 0x32ba <_ZL13sendTagButtonPKcPK19__FlashStringHelper>
    38aa:	89 e4       	ldi	r24, 0x49	; 73
    38ac:	92 e0       	ldi	r25, 0x02	; 2
    38ae:	60 e4       	ldi	r22, 0x40	; 64
    38b0:	73 e0       	ldi	r23, 0x03	; 3
    38b2:	0e 94 5d 19 	call	0x32ba	; 0x32ba <_ZL13sendTagButtonPKcPK19__FlashStringHelper>
    38b6:	8e e4       	ldi	r24, 0x4E	; 78
    38b8:	92 e0       	ldi	r25, 0x02	; 2
    38ba:	62 e3       	ldi	r22, 0x32	; 50
    38bc:	73 e0       	ldi	r23, 0x03	; 3
    38be:	0e 94 5d 19 	call	0x32ba	; 0x32ba <_ZL13sendTagButtonPKcPK19__FlashStringHelper>
    38c2:	84 e5       	ldi	r24, 0x54	; 84
    38c4:	92 e0       	ldi	r25, 0x02	; 2
    38c6:	65 e2       	ldi	r22, 0x25	; 37
    38c8:	73 e0       	ldi	r23, 0x03	; 3
    38ca:	0e 94 5d 19 	call	0x32ba	; 0x32ba <_ZL13sendTagButtonPKcPK19__FlashStringHelper>
    38ce:	8e e1       	ldi	r24, 0x1E	; 30
    38d0:	93 e0       	ldi	r25, 0x03	; 3
    38d2:	62 e0       	ldi	r22, 0x02	; 2
    38d4:	70 e0       	ldi	r23, 0x00	; 0
    38d6:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    38da:	81 e2       	ldi	r24, 0x21	; 33
    38dc:	93 e0       	ldi	r25, 0x03	; 3
    38de:	60 e0       	ldi	r22, 0x00	; 0
    38e0:	70 e0       	ldi	r23, 0x00	; 0
    38e2:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    38e6:	0e 94 87 19 	call	0x330e	; 0x330e <_Z14sendFreeMemoryv>
    38ea:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZL14sendBootStatusv>
    38ee:	0e 94 98 19 	call	0x3330	; 0x3330 <_ZL14sendTimeStatusv>
    38f2:	0e 94 ce 19 	call	0x339c	; 0x339c <_ZL21sendTemperatureStatusv>
    38f6:	8e e1       	ldi	r24, 0x1E	; 30
    38f8:	93 e0       	ldi	r25, 0x03	; 3
    38fa:	62 e0       	ldi	r22, 0x02	; 2
    38fc:	70 e0       	ldi	r23, 0x00	; 0
    38fe:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    3902:	81 e2       	ldi	r24, 0x21	; 33
    3904:	93 e0       	ldi	r25, 0x03	; 3
    3906:	61 e0       	ldi	r22, 0x01	; 1
    3908:	70 e0       	ldi	r23, 0x00	; 0
    390a:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    390e:	81 e2       	ldi	r24, 0x21	; 33
    3910:	93 e0       	ldi	r25, 0x03	; 3
    3912:	60 e0       	ldi	r22, 0x00	; 0
    3914:	70 e0       	ldi	r23, 0x00	; 0
    3916:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    391a:	c8 01       	movw	r24, r16
    391c:	67 e4       	ldi	r22, 0x47	; 71
    391e:	72 e0       	ldi	r23, 0x02	; 2
    3920:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZL17flashStringEqualsRK6StringPKc>
    3924:	88 23       	and	r24, r24
    3926:	09 f4       	brne	.+2      	; 0x392a <_ZL24generateHttpResponsePageRK6String+0xfa>
    3928:	8b c1       	rjmp	.+790    	; 0x3c40 <_ZL24generateHttpResponsePageRK6String+0x410>
    392a:	8e 01       	movw	r16, r28
    392c:	0f 5f       	subi	r16, 0xFF	; 255
    392e:	1f 4f       	sbci	r17, 0xFF	; 255
    3930:	c8 01       	movw	r24, r16
    3932:	6d e1       	ldi	r22, 0x1D	; 29
    3934:	70 e0       	ldi	r23, 0x00	; 0
    3936:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZL16EEPROMStringLoadj>
    393a:	c8 01       	movw	r24, r16
    393c:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <_ZL8sendDataRK6String>
    3940:	c8 01       	movw	r24, r16
    3942:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
    3946:	8a e7       	ldi	r24, 0x7A	; 122
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    394e:	00 e0       	ldi	r16, 0x00	; 0
    3950:	10 e0       	ldi	r17, 0x00	; 0
    3952:	52 ef       	ldi	r21, 0xF2	; 242
    3954:	c5 2e       	mov	r12, r21
    3956:	5f ef       	ldi	r21, 0xFF	; 255
    3958:	d5 2e       	mov	r13, r21
    395a:	47 e4       	ldi	r20, 0x47	; 71
    395c:	24 2e       	mov	r2, r20
    395e:	31 2c       	mov	r3, r1
    3960:	2c 0e       	add	r2, r28
    3962:	3d 1e       	adc	r3, r29
    3964:	34 e2       	ldi	r19, 0x24	; 36
    3966:	43 2e       	mov	r4, r19
    3968:	51 2c       	mov	r5, r1
    396a:	4c 0e       	add	r4, r28
    396c:	5d 1e       	adc	r5, r29
    396e:	2b e2       	ldi	r18, 0x2B	; 43
    3970:	62 2e       	mov	r6, r18
    3972:	71 2c       	mov	r7, r1
    3974:	6c 0e       	add	r6, r28
    3976:	7d 1e       	adc	r7, r29
    3978:	92 e3       	ldi	r25, 0x32	; 50
    397a:	89 2e       	mov	r8, r25
    397c:	91 2c       	mov	r9, r1
    397e:	8c 0e       	add	r8, r28
    3980:	9d 1e       	adc	r9, r29
    3982:	8d e1       	ldi	r24, 0x1D	; 29
    3984:	a8 2e       	mov	r10, r24
    3986:	b1 2c       	mov	r11, r1
    3988:	ac 0e       	add	r10, r28
    398a:	bd 1e       	adc	r11, r29
    398c:	80 e2       	ldi	r24, 0x20	; 32
    398e:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <_ZL8sendDatac>
    3992:	0e 30       	cpi	r16, 0x0E	; 14
    3994:	11 05       	cpc	r17, r1
    3996:	3c f0       	brlt	.+14     	; 0x39a6 <_ZL24generateHttpResponsePageRK6String+0x176>
    3998:	81 e4       	ldi	r24, 0x41	; 65
    399a:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <_ZL8sendDatac>
    399e:	c6 01       	movw	r24, r12
    39a0:	0e 94 f7 16 	call	0x2dee	; 0x2dee <_ZL8sendDatai>
    39a4:	0e c0       	rjmp	.+28     	; 0x39c2 <_ZL24generateHttpResponsePageRK6String+0x192>
    39a6:	ce 01       	movw	r24, r28
    39a8:	08 96       	adiw	r24, 0x08	; 8
    39aa:	b8 01       	movw	r22, r16
    39ac:	42 e0       	ldi	r20, 0x02	; 2
    39ae:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
    39b2:	ce 01       	movw	r24, r28
    39b4:	08 96       	adiw	r24, 0x08	; 8
    39b6:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <_ZL8sendDataRK6String>
    39ba:	ce 01       	movw	r24, r28
    39bc:	08 96       	adiw	r24, 0x08	; 8
    39be:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
    39c2:	83 e6       	ldi	r24, 0x63	; 99
    39c4:	94 e0       	ldi	r25, 0x04	; 4
    39c6:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    39ca:	08 30       	cpi	r16, 0x08	; 8
    39cc:	11 05       	cpc	r17, r1
    39ce:	f4 f4       	brge	.+60     	; 0x3a0c <_ZL24generateHttpResponsePageRK6String+0x1dc>
    39d0:	8a b1       	in	r24, 0x0a	; 10
    39d2:	90 e0       	ldi	r25, 0x00	; 0
    39d4:	00 2e       	mov	r0, r16
    39d6:	02 c0       	rjmp	.+4      	; 0x39dc <_ZL24generateHttpResponsePageRK6String+0x1ac>
    39d8:	95 95       	asr	r25
    39da:	87 95       	ror	r24
    39dc:	0a 94       	dec	r0
    39de:	e2 f7       	brpl	.-8      	; 0x39d8 <_ZL24generateHttpResponsePageRK6String+0x1a8>
    39e0:	38 2f       	mov	r19, r24
    39e2:	31 70       	andi	r19, 0x01	; 1
    39e4:	8b b1       	in	r24, 0x0b	; 11
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	00 2e       	mov	r0, r16
    39ea:	02 c0       	rjmp	.+4      	; 0x39f0 <_ZL24generateHttpResponsePageRK6String+0x1c0>
    39ec:	95 95       	asr	r25
    39ee:	87 95       	ror	r24
    39f0:	0a 94       	dec	r0
    39f2:	e2 f7       	brpl	.-8      	; 0x39ec <_ZL24generateHttpResponsePageRK6String+0x1bc>
    39f4:	ee 24       	eor	r14, r14
    39f6:	e3 94       	inc	r14
    39f8:	e8 22       	and	r14, r24
    39fa:	89 b1       	in	r24, 0x09	; 9
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	00 2e       	mov	r0, r16
    3a00:	02 c0       	rjmp	.+4      	; 0x3a06 <_ZL24generateHttpResponsePageRK6String+0x1d6>
    3a02:	95 95       	asr	r25
    3a04:	87 95       	ror	r24
    3a06:	0a 94       	dec	r0
    3a08:	e2 f7       	brpl	.-8      	; 0x3a02 <_ZL24generateHttpResponsePageRK6String+0x1d2>
    3a0a:	3a c0       	rjmp	.+116    	; 0x3a80 <_ZL24generateHttpResponsePageRK6String+0x250>
    3a0c:	0e 30       	cpi	r16, 0x0E	; 14
    3a0e:	11 05       	cpc	r17, r1
    3a10:	d4 f4       	brge	.+52     	; 0x3a46 <_ZL24generateHttpResponsePageRK6String+0x216>
    3a12:	84 b1       	in	r24, 0x04	; 4
    3a14:	98 01       	movw	r18, r16
    3a16:	28 50       	subi	r18, 0x08	; 8
    3a18:	30 40       	sbci	r19, 0x00	; 0
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	02 2e       	mov	r0, r18
    3a1e:	02 c0       	rjmp	.+4      	; 0x3a24 <_ZL24generateHttpResponsePageRK6String+0x1f4>
    3a20:	95 95       	asr	r25
    3a22:	87 95       	ror	r24
    3a24:	0a 94       	dec	r0
    3a26:	e2 f7       	brpl	.-8      	; 0x3a20 <_ZL24generateHttpResponsePageRK6String+0x1f0>
    3a28:	38 2f       	mov	r19, r24
    3a2a:	31 70       	andi	r19, 0x01	; 1
    3a2c:	85 b1       	in	r24, 0x05	; 5
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	02 2e       	mov	r0, r18
    3a32:	02 c0       	rjmp	.+4      	; 0x3a38 <_ZL24generateHttpResponsePageRK6String+0x208>
    3a34:	95 95       	asr	r25
    3a36:	87 95       	ror	r24
    3a38:	0a 94       	dec	r0
    3a3a:	e2 f7       	brpl	.-8      	; 0x3a34 <_ZL24generateHttpResponsePageRK6String+0x204>
    3a3c:	ee 24       	eor	r14, r14
    3a3e:	e3 94       	inc	r14
    3a40:	e8 22       	and	r14, r24
    3a42:	83 b1       	in	r24, 0x03	; 3
    3a44:	17 c0       	rjmp	.+46     	; 0x3a74 <_ZL24generateHttpResponsePageRK6String+0x244>
    3a46:	87 b1       	in	r24, 0x07	; 7
    3a48:	2c 2d       	mov	r18, r12
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	0c 2c       	mov	r0, r12
    3a4e:	02 c0       	rjmp	.+4      	; 0x3a54 <_ZL24generateHttpResponsePageRK6String+0x224>
    3a50:	95 95       	asr	r25
    3a52:	87 95       	ror	r24
    3a54:	0a 94       	dec	r0
    3a56:	e2 f7       	brpl	.-8      	; 0x3a50 <_ZL24generateHttpResponsePageRK6String+0x220>
    3a58:	38 2f       	mov	r19, r24
    3a5a:	31 70       	andi	r19, 0x01	; 1
    3a5c:	88 b1       	in	r24, 0x08	; 8
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	0c 2c       	mov	r0, r12
    3a62:	02 c0       	rjmp	.+4      	; 0x3a68 <_ZL24generateHttpResponsePageRK6String+0x238>
    3a64:	95 95       	asr	r25
    3a66:	87 95       	ror	r24
    3a68:	0a 94       	dec	r0
    3a6a:	e2 f7       	brpl	.-8      	; 0x3a64 <_ZL24generateHttpResponsePageRK6String+0x234>
    3a6c:	ee 24       	eor	r14, r14
    3a6e:	e3 94       	inc	r14
    3a70:	e8 22       	and	r14, r24
    3a72:	86 b1       	in	r24, 0x06	; 6
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	02 c0       	rjmp	.+4      	; 0x3a7c <_ZL24generateHttpResponsePageRK6String+0x24c>
    3a78:	95 95       	asr	r25
    3a7a:	87 95       	ror	r24
    3a7c:	2a 95       	dec	r18
    3a7e:	e2 f7       	brpl	.-8      	; 0x3a78 <_ZL24generateHttpResponsePageRK6String+0x248>
    3a80:	ff 24       	eor	r15, r15
    3a82:	f3 94       	inc	r15
    3a84:	f8 22       	and	r15, r24
    3a86:	31 30       	cpi	r19, 0x01	; 1
    3a88:	b9 f4       	brne	.+46     	; 0x3ab8 <_ZL24generateHttpResponsePageRK6String+0x288>
    3a8a:	83 e6       	ldi	r24, 0x63	; 99
    3a8c:	94 e0       	ldi	r25, 0x04	; 4
    3a8e:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    3a92:	8e 2d       	mov	r24, r14
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	0e 94 f7 16 	call	0x2dee	; 0x2dee <_ZL8sendDatai>
    3a9a:	ce 01       	movw	r24, r28
    3a9c:	0f 96       	adiw	r24, 0x0f	; 15
    3a9e:	6e e2       	ldi	r22, 0x2E	; 46
    3aa0:	70 e0       	ldi	r23, 0x00	; 0
    3aa2:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZL16EEPROMStringLoadj>
    3aa6:	ce 01       	movw	r24, r28
    3aa8:	0f 96       	adiw	r24, 0x0f	; 15
    3aaa:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <_ZL8sendDataRK6String>
    3aae:	ce 01       	movw	r24, r28
    3ab0:	0f 96       	adiw	r24, 0x0f	; 15
    3ab2:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
    3ab6:	16 c0       	rjmp	.+44     	; 0x3ae4 <_ZL24generateHttpResponsePageRK6String+0x2b4>
    3ab8:	ce 01       	movw	r24, r28
    3aba:	46 96       	adiw	r24, 0x16	; 22
    3abc:	68 e3       	ldi	r22, 0x38	; 56
    3abe:	70 e0       	ldi	r23, 0x00	; 0
    3ac0:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZL16EEPROMStringLoadj>
    3ac4:	ce 01       	movw	r24, r28
    3ac6:	46 96       	adiw	r24, 0x16	; 22
    3ac8:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <_ZL8sendDataRK6String>
    3acc:	ce 01       	movw	r24, r28
    3ace:	46 96       	adiw	r24, 0x16	; 22
    3ad0:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
    3ad4:	8f 2d       	mov	r24, r15
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	0e 94 f7 16 	call	0x2dee	; 0x2dee <_ZL8sendDatai>
    3adc:	83 e6       	ldi	r24, 0x63	; 99
    3ade:	94 e0       	ldi	r25, 0x04	; 4
    3ae0:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    3ae4:	08 30       	cpi	r16, 0x08	; 8
    3ae6:	11 05       	cpc	r17, r1
    3ae8:	09 f4       	brne	.+2      	; 0x3aec <_ZL24generateHttpResponsePageRK6String+0x2bc>
    3aea:	54 c0       	rjmp	.+168    	; 0x3b94 <_ZL24generateHttpResponsePageRK6String+0x364>
    3aec:	09 30       	cpi	r16, 0x09	; 9
    3aee:	11 05       	cpc	r17, r1
    3af0:	9c f4       	brge	.+38     	; 0x3b18 <_ZL24generateHttpResponsePageRK6String+0x2e8>
    3af2:	03 30       	cpi	r16, 0x03	; 3
    3af4:	11 05       	cpc	r17, r1
    3af6:	81 f1       	breq	.+96     	; 0x3b58 <_ZL24generateHttpResponsePageRK6String+0x328>
    3af8:	04 30       	cpi	r16, 0x04	; 4
    3afa:	11 05       	cpc	r17, r1
    3afc:	2c f4       	brge	.+10     	; 0x3b08 <_ZL24generateHttpResponsePageRK6String+0x2d8>
    3afe:	02 30       	cpi	r16, 0x02	; 2
    3b00:	11 05       	cpc	r17, r1
    3b02:	08 f0       	brcs	.+2      	; 0x3b06 <_ZL24generateHttpResponsePageRK6String+0x2d6>
    3b04:	8f c0       	rjmp	.+286    	; 0x3c24 <_ZL24generateHttpResponsePageRK6String+0x3f4>
    3b06:	1e c0       	rjmp	.+60     	; 0x3b44 <_ZL24generateHttpResponsePageRK6String+0x314>
    3b08:	04 30       	cpi	r16, 0x04	; 4
    3b0a:	11 05       	cpc	r17, r1
    3b0c:	79 f1       	breq	.+94     	; 0x3b6c <_ZL24generateHttpResponsePageRK6String+0x33c>
    3b0e:	05 30       	cpi	r16, 0x05	; 5
    3b10:	11 05       	cpc	r17, r1
    3b12:	09 f0       	breq	.+2      	; 0x3b16 <_ZL24generateHttpResponsePageRK6String+0x2e6>
    3b14:	87 c0       	rjmp	.+270    	; 0x3c24 <_ZL24generateHttpResponsePageRK6String+0x3f4>
    3b16:	34 c0       	rjmp	.+104    	; 0x3b80 <_ZL24generateHttpResponsePageRK6String+0x350>
    3b18:	0d 30       	cpi	r16, 0x0D	; 13
    3b1a:	11 05       	cpc	r17, r1
    3b1c:	09 f4       	brne	.+2      	; 0x3b20 <_ZL24generateHttpResponsePageRK6String+0x2f0>
    3b1e:	61 c0       	rjmp	.+194    	; 0x3be2 <_ZL24generateHttpResponsePageRK6String+0x3b2>
    3b20:	0e 30       	cpi	r16, 0x0E	; 14
    3b22:	11 05       	cpc	r17, r1
    3b24:	4c f4       	brge	.+18     	; 0x3b38 <_ZL24generateHttpResponsePageRK6String+0x308>
    3b26:	0b 30       	cpi	r16, 0x0B	; 11
    3b28:	11 05       	cpc	r17, r1
    3b2a:	09 f4       	brne	.+2      	; 0x3b2e <_ZL24generateHttpResponsePageRK6String+0x2fe>
    3b2c:	40 c0       	rjmp	.+128    	; 0x3bae <_ZL24generateHttpResponsePageRK6String+0x37e>
    3b2e:	0c 30       	cpi	r16, 0x0C	; 12
    3b30:	11 05       	cpc	r17, r1
    3b32:	09 f0       	breq	.+2      	; 0x3b36 <_ZL24generateHttpResponsePageRK6String+0x306>
    3b34:	77 c0       	rjmp	.+238    	; 0x3c24 <_ZL24generateHttpResponsePageRK6String+0x3f4>
    3b36:	4b c0       	rjmp	.+150    	; 0x3bce <_ZL24generateHttpResponsePageRK6String+0x39e>
    3b38:	c8 01       	movw	r24, r16
    3b3a:	42 97       	sbiw	r24, 0x12	; 18
    3b3c:	02 97       	sbiw	r24, 0x02	; 2
    3b3e:	08 f0       	brcs	.+2      	; 0x3b42 <_ZL24generateHttpResponsePageRK6String+0x312>
    3b40:	71 c0       	rjmp	.+226    	; 0x3c24 <_ZL24generateHttpResponsePageRK6String+0x3f4>
    3b42:	5f c0       	rjmp	.+190    	; 0x3c02 <_ZL24generateHttpResponsePageRK6String+0x3d2>
    3b44:	c5 01       	movw	r24, r10
    3b46:	61 e4       	ldi	r22, 0x41	; 65
    3b48:	70 e0       	ldi	r23, 0x00	; 0
    3b4a:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZL16EEPROMStringLoadj>
    3b4e:	c5 01       	movw	r24, r10
    3b50:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <_ZL8sendDataRK6String>
    3b54:	c5 01       	movw	r24, r10
    3b56:	64 c0       	rjmp	.+200    	; 0x3c20 <_ZL24generateHttpResponsePageRK6String+0x3f0>
    3b58:	c2 01       	movw	r24, r4
    3b5a:	67 e8       	ldi	r22, 0x87	; 135
    3b5c:	70 e0       	ldi	r23, 0x00	; 0
    3b5e:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZL16EEPROMStringLoadj>
    3b62:	c2 01       	movw	r24, r4
    3b64:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <_ZL8sendDataRK6String>
    3b68:	c2 01       	movw	r24, r4
    3b6a:	5a c0       	rjmp	.+180    	; 0x3c20 <_ZL24generateHttpResponsePageRK6String+0x3f0>
    3b6c:	c3 01       	movw	r24, r6
    3b6e:	61 ea       	ldi	r22, 0xA1	; 161
    3b70:	70 e0       	ldi	r23, 0x00	; 0
    3b72:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZL16EEPROMStringLoadj>
    3b76:	c3 01       	movw	r24, r6
    3b78:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <_ZL8sendDataRK6String>
    3b7c:	c3 01       	movw	r24, r6
    3b7e:	50 c0       	rjmp	.+160    	; 0x3c20 <_ZL24generateHttpResponsePageRK6String+0x3f0>
    3b80:	c4 01       	movw	r24, r8
    3b82:	67 ec       	ldi	r22, 0xC7	; 199
    3b84:	70 e0       	ldi	r23, 0x00	; 0
    3b86:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZL16EEPROMStringLoadj>
    3b8a:	c4 01       	movw	r24, r8
    3b8c:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <_ZL8sendDataRK6String>
    3b90:	c4 01       	movw	r24, r8
    3b92:	46 c0       	rjmp	.+140    	; 0x3c20 <_ZL24generateHttpResponsePageRK6String+0x3f0>
    3b94:	ce 01       	movw	r24, r28
    3b96:	c9 96       	adiw	r24, 0x39	; 57
    3b98:	6d ee       	ldi	r22, 0xED	; 237
    3b9a:	70 e0       	ldi	r23, 0x00	; 0
    3b9c:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZL16EEPROMStringLoadj>
    3ba0:	ce 01       	movw	r24, r28
    3ba2:	c9 96       	adiw	r24, 0x39	; 57
    3ba4:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <_ZL8sendDataRK6String>
    3ba8:	ce 01       	movw	r24, r28
    3baa:	c9 96       	adiw	r24, 0x39	; 57
    3bac:	39 c0       	rjmp	.+114    	; 0x3c20 <_ZL24generateHttpResponsePageRK6String+0x3f0>
    3bae:	ce 01       	movw	r24, r28
    3bb0:	80 5c       	subi	r24, 0xC0	; 192
    3bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    3bb4:	60 e0       	ldi	r22, 0x00	; 0
    3bb6:	71 e0       	ldi	r23, 0x01	; 1
    3bb8:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZL16EEPROMStringLoadj>
    3bbc:	ce 01       	movw	r24, r28
    3bbe:	80 5c       	subi	r24, 0xC0	; 192
    3bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    3bc2:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <_ZL8sendDataRK6String>
    3bc6:	ce 01       	movw	r24, r28
    3bc8:	80 5c       	subi	r24, 0xC0	; 192
    3bca:	9f 4f       	sbci	r25, 0xFF	; 255
    3bcc:	29 c0       	rjmp	.+82     	; 0x3c20 <_ZL24generateHttpResponsePageRK6String+0x3f0>
    3bce:	c1 01       	movw	r24, r2
    3bd0:	60 e2       	ldi	r22, 0x20	; 32
    3bd2:	71 e0       	ldi	r23, 0x01	; 1
    3bd4:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZL16EEPROMStringLoadj>
    3bd8:	c1 01       	movw	r24, r2
    3bda:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <_ZL8sendDataRK6String>
    3bde:	c1 01       	movw	r24, r2
    3be0:	1f c0       	rjmp	.+62     	; 0x3c20 <_ZL24generateHttpResponsePageRK6String+0x3f0>
    3be2:	ce 01       	movw	r24, r28
    3be4:	82 5b       	subi	r24, 0xB2	; 178
    3be6:	9f 4f       	sbci	r25, 0xFF	; 255
    3be8:	6d e2       	ldi	r22, 0x2D	; 45
    3bea:	71 e0       	ldi	r23, 0x01	; 1
    3bec:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZL16EEPROMStringLoadj>
    3bf0:	ce 01       	movw	r24, r28
    3bf2:	82 5b       	subi	r24, 0xB2	; 178
    3bf4:	9f 4f       	sbci	r25, 0xFF	; 255
    3bf6:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <_ZL8sendDataRK6String>
    3bfa:	ce 01       	movw	r24, r28
    3bfc:	82 5b       	subi	r24, 0xB2	; 178
    3bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    3c00:	0f c0       	rjmp	.+30     	; 0x3c20 <_ZL24generateHttpResponsePageRK6String+0x3f0>
    3c02:	ce 01       	movw	r24, r28
    3c04:	8b 5a       	subi	r24, 0xAB	; 171
    3c06:	9f 4f       	sbci	r25, 0xFF	; 255
    3c08:	64 e3       	ldi	r22, 0x34	; 52
    3c0a:	71 e0       	ldi	r23, 0x01	; 1
    3c0c:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZL16EEPROMStringLoadj>
    3c10:	ce 01       	movw	r24, r28
    3c12:	8b 5a       	subi	r24, 0xAB	; 171
    3c14:	9f 4f       	sbci	r25, 0xFF	; 255
    3c16:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <_ZL8sendDataRK6String>
    3c1a:	ce 01       	movw	r24, r28
    3c1c:	8b 5a       	subi	r24, 0xAB	; 171
    3c1e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c20:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
    3c24:	8a e7       	ldi	r24, 0x7A	; 122
    3c26:	90 e0       	ldi	r25, 0x00	; 0
    3c28:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZL8sendDataPK19__FlashStringHelper>
    3c2c:	0f 5f       	subi	r16, 0xFF	; 255
    3c2e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c30:	08 94       	sec
    3c32:	c1 1c       	adc	r12, r1
    3c34:	d1 1c       	adc	r13, r1
    3c36:	04 31       	cpi	r16, 0x14	; 20
    3c38:	11 05       	cpc	r17, r1
    3c3a:	09 f0       	breq	.+2      	; 0x3c3e <_ZL24generateHttpResponsePageRK6String+0x40e>
    3c3c:	a7 ce       	rjmp	.-690    	; 0x398c <_ZL24generateHttpResponsePageRK6String+0x15c>
    3c3e:	20 c0       	rjmp	.+64     	; 0x3c80 <_ZL24generateHttpResponsePageRK6String+0x450>
    3c40:	c8 01       	movw	r24, r16
    3c42:	6e e4       	ldi	r22, 0x4E	; 78
    3c44:	72 e0       	ldi	r23, 0x02	; 2
    3c46:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZL17flashStringEqualsRK6StringPKc>
    3c4a:	88 23       	and	r24, r24
    3c4c:	19 f0       	breq	.+6      	; 0x3c54 <_ZL24generateHttpResponsePageRK6String+0x424>
    3c4e:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <_ZL30printSendConfigurationControlsv>
    3c52:	16 c0       	rjmp	.+44     	; 0x3c80 <_ZL24generateHttpResponsePageRK6String+0x450>
    3c54:	c8 01       	movw	r24, r16
    3c56:	69 e4       	ldi	r22, 0x49	; 73
    3c58:	72 e0       	ldi	r23, 0x02	; 2
    3c5a:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZL17flashStringEqualsRK6StringPKc>
    3c5e:	88 23       	and	r24, r24
    3c60:	31 f0       	breq	.+12     	; 0x3c6e <_ZL24generateHttpResponsePageRK6String+0x43e>
    3c62:	81 e0       	ldi	r24, 0x01	; 1
    3c64:	61 e0       	ldi	r22, 0x01	; 1
    3c66:	41 e0       	ldi	r20, 0x01	; 1
    3c68:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <_ZL16printSendFullLoghhh>
    3c6c:	09 c0       	rjmp	.+18     	; 0x3c80 <_ZL24generateHttpResponsePageRK6String+0x450>
    3c6e:	c8 01       	movw	r24, r16
    3c70:	64 e5       	ldi	r22, 0x54	; 84
    3c72:	72 e0       	ldi	r23, 0x02	; 2
    3c74:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZL17flashStringEqualsRK6StringPKc>
    3c78:	88 23       	and	r24, r24
    3c7a:	11 f0       	breq	.+4      	; 0x3c80 <_ZL24generateHttpResponsePageRK6String+0x450>
    3c7c:	0e 94 7d 18 	call	0x30fa	; 0x30fa <_Z15sendStorageDumpv>
    3c80:	80 91 4d 01 	lds	r24, 0x014D
    3c84:	88 23       	and	r24, r24
    3c86:	61 f4       	brne	.+24     	; 0x3ca0 <_ZL24generateHttpResponsePageRK6String+0x470>
    3c88:	81 e2       	ldi	r24, 0x21	; 33
    3c8a:	93 e0       	ldi	r25, 0x03	; 3
    3c8c:	61 e0       	ldi	r22, 0x01	; 1
    3c8e:	70 e0       	ldi	r23, 0x00	; 0
    3c90:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    3c94:	89 e1       	ldi	r24, 0x19	; 25
    3c96:	93 e0       	ldi	r25, 0x03	; 3
    3c98:	61 e0       	ldi	r22, 0x01	; 1
    3c9a:	70 e0       	ldi	r23, 0x00	; 0
    3c9c:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZL7sendTagPKc8HTTP_TAG>
    3ca0:	c5 5a       	subi	r28, 0xA5	; 165
    3ca2:	df 4f       	sbci	r29, 0xFF	; 255
    3ca4:	0f b6       	in	r0, 0x3f	; 63
    3ca6:	f8 94       	cli
    3ca8:	de bf       	out	0x3e, r29	; 62
    3caa:	0f be       	out	0x3f, r0	; 63
    3cac:	cd bf       	out	0x3d, r28	; 61
    3cae:	cf 91       	pop	r28
    3cb0:	df 91       	pop	r29
    3cb2:	1f 91       	pop	r17
    3cb4:	0f 91       	pop	r16
    3cb6:	ff 90       	pop	r15
    3cb8:	ef 90       	pop	r14
    3cba:	df 90       	pop	r13
    3cbc:	cf 90       	pop	r12
    3cbe:	bf 90       	pop	r11
    3cc0:	af 90       	pop	r10
    3cc2:	9f 90       	pop	r9
    3cc4:	8f 90       	pop	r8
    3cc6:	7f 90       	pop	r7
    3cc8:	6f 90       	pop	r6
    3cca:	5f 90       	pop	r5
    3ccc:	4f 90       	pop	r4
    3cce:	3f 90       	pop	r3
    3cd0:	2f 90       	pop	r2
    3cd2:	08 95       	ret

00003cd4 <_Z11serialEventv>:
    3cd4:	ef 92       	push	r14
    3cd6:	ff 92       	push	r15
    3cd8:	0f 93       	push	r16
    3cda:	1f 93       	push	r17
    3cdc:	df 93       	push	r29
    3cde:	cf 93       	push	r28
    3ce0:	cd b7       	in	r28, 0x3d	; 61
    3ce2:	de b7       	in	r29, 0x3e	; 62
    3ce4:	2e 97       	sbiw	r28, 0x0e	; 14
    3ce6:	0f b6       	in	r0, 0x3f	; 63
    3ce8:	f8 94       	cli
    3cea:	de bf       	out	0x3e, r29	; 62
    3cec:	0f be       	out	0x3f, r0	; 63
    3cee:	cd bf       	out	0x3d, r28	; 61
    3cf0:	80 91 4a 01 	lds	r24, 0x014A
    3cf4:	88 23       	and	r24, r24
    3cf6:	19 f4       	brne	.+6      	; 0x3cfe <_Z11serialEventv+0x2a>
    3cf8:	0e 94 56 08 	call	0x10ac	; 0x10ac <_ZN15GB_SerialHelper13printDirtyEndEv>
    3cfc:	76 c0       	rjmp	.+236    	; 0x3dea <_Z11serialEventv+0x116>
    3cfe:	7e 01       	movw	r14, r28
    3d00:	08 94       	sec
    3d02:	e1 1c       	adc	r14, r1
    3d04:	f1 1c       	adc	r15, r1
    3d06:	c7 01       	movw	r24, r14
    3d08:	60 e0       	ldi	r22, 0x00	; 0
    3d0a:	71 e0       	ldi	r23, 0x01	; 1
    3d0c:	0e 94 95 39 	call	0x732a	; 0x732a <_ZN6StringC1EPKc>
    3d10:	8e 01       	movw	r16, r28
    3d12:	08 5f       	subi	r16, 0xF8	; 248
    3d14:	1f 4f       	sbci	r17, 0xFF	; 255
    3d16:	c8 01       	movw	r24, r16
    3d18:	60 e0       	ldi	r22, 0x00	; 0
    3d1a:	71 e0       	ldi	r23, 0x01	; 1
    3d1c:	0e 94 95 39 	call	0x732a	; 0x732a <_ZN6StringC1EPKc>
    3d20:	c7 01       	movw	r24, r14
    3d22:	64 e0       	ldi	r22, 0x04	; 4
    3d24:	71 e0       	ldi	r23, 0x01	; 1
    3d26:	a8 01       	movw	r20, r16
    3d28:	0e 94 0c 12 	call	0x2418	; 0x2418 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_>
    3d2c:	90 93 4c 01 	sts	0x014C, r25
    3d30:	80 93 4b 01 	sts	0x014B, r24
    3d34:	84 30       	cpi	r24, 0x04	; 4
    3d36:	91 05       	cpc	r25, r1
    3d38:	51 f0       	breq	.+20     	; 0x3d4e <_Z11serialEventv+0x7a>
    3d3a:	05 97       	sbiw	r24, 0x05	; 5
    3d3c:	09 f0       	breq	.+2      	; 0x3d40 <_Z11serialEventv+0x6c>
    3d3e:	47 c0       	rjmp	.+142    	; 0x3dce <_Z11serialEventv+0xfa>
    3d40:	84 e0       	ldi	r24, 0x04	; 4
    3d42:	91 e0       	ldi	r25, 0x01	; 1
    3d44:	67 e4       	ldi	r22, 0x47	; 71
    3d46:	72 e0       	ldi	r23, 0x02	; 2
    3d48:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <_ZN15GB_SerialHelper16sendHTTPRedirectERKhPK19__FlashStringHelper>
    3d4c:	40 c0       	rjmp	.+128    	; 0x3dce <_Z11serialEventv+0xfa>
    3d4e:	c7 01       	movw	r24, r14
    3d50:	67 e4       	ldi	r22, 0x47	; 71
    3d52:	72 e0       	ldi	r23, 0x02	; 2
    3d54:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZL17flashStringEqualsRK6StringPKc>
    3d58:	88 23       	and	r24, r24
    3d5a:	a9 f4       	brne	.+42     	; 0x3d86 <_Z11serialEventv+0xb2>
    3d5c:	c7 01       	movw	r24, r14
    3d5e:	69 e4       	ldi	r22, 0x49	; 73
    3d60:	72 e0       	ldi	r23, 0x02	; 2
    3d62:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZL17flashStringEqualsRK6StringPKc>
    3d66:	88 23       	and	r24, r24
    3d68:	71 f4       	brne	.+28     	; 0x3d86 <_Z11serialEventv+0xb2>
    3d6a:	c7 01       	movw	r24, r14
    3d6c:	6e e4       	ldi	r22, 0x4E	; 78
    3d6e:	72 e0       	ldi	r23, 0x02	; 2
    3d70:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZL17flashStringEqualsRK6StringPKc>
    3d74:	88 23       	and	r24, r24
    3d76:	39 f4       	brne	.+14     	; 0x3d86 <_Z11serialEventv+0xb2>
    3d78:	c7 01       	movw	r24, r14
    3d7a:	64 e5       	ldi	r22, 0x54	; 84
    3d7c:	72 e0       	ldi	r23, 0x02	; 2
    3d7e:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZL17flashStringEqualsRK6StringPKc>
    3d82:	88 23       	and	r24, r24
    3d84:	69 f1       	breq	.+90     	; 0x3de0 <_Z11serialEventv+0x10c>
    3d86:	80 91 04 01 	lds	r24, 0x0104
    3d8a:	0e 94 df 0b 	call	0x17be	; 0x17be <_ZN15GB_SerialHelper17sendHttpOK_HeaderEh>
    3d8e:	ce 01       	movw	r24, r28
    3d90:	01 96       	adiw	r24, 0x01	; 1
    3d92:	0e 94 18 1c 	call	0x3830	; 0x3830 <_ZL24generateHttpResponsePageRK6String>
    }
    return isSendOK;
  }

  static void sendHttpOK_PageComplete(const byte &wifiPortDescriptor){  
    sendWifiDataStop();
    3d96:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_ZN15GB_SerialHelper16sendWifiDataStopEv>
    sendWifiCloseConnection(wifiPortDescriptor);
    3d9a:	80 91 04 01 	lds	r24, 0x0104
    3d9e:	0e 94 1b 0b 	call	0x1636	; 0x1636 <_ZN15GB_SerialHelper23sendWifiCloseConnectionEh>
    3da2:	80 91 ae 01 	lds	r24, 0x01AE
    3da6:	88 23       	and	r24, r24
    3da8:	91 f0       	breq	.+36     	; 0x3dce <_Z11serialEventv+0xfa>
    3daa:	80 91 4d 01 	lds	r24, 0x014D
    3dae:	88 23       	and	r24, r24
    3db0:	71 f0       	breq	.+28     	; 0x3dce <_Z11serialEventv+0xfa>
    3db2:	88 eb       	ldi	r24, 0xB8	; 184
    3db4:	93 e0       	ldi	r25, 0x03	; 3
    3db6:	65 ea       	ldi	r22, 0xA5	; 165
    3db8:	70 e0       	ldi	r23, 0x00	; 0
    3dba:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZN5Print5printEPK19__FlashStringHelper>
    3dbe:	88 eb       	ldi	r24, 0xB8	; 184
    3dc0:	93 e0       	ldi	r25, 0x03	; 3
    3dc2:	6d e5       	ldi	r22, 0x5D	; 93
    3dc4:	72 e0       	ldi	r23, 0x02	; 2
    3dc6:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <_ZN5Print7printlnEPK19__FlashStringHelper>
    3dca:	0e 94 56 08 	call	0x10ac	; 0x10ac <_ZN15GB_SerialHelper13printDirtyEndEv>
    3dce:	ce 01       	movw	r24, r28
    3dd0:	08 96       	adiw	r24, 0x08	; 8
    3dd2:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
    3dd6:	ce 01       	movw	r24, r28
    3dd8:	01 96       	adiw	r24, 0x01	; 1
    3dda:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
    3dde:	05 c0       	rjmp	.+10     	; 0x3dea <_Z11serialEventv+0x116>
    3de0:	80 91 04 01 	lds	r24, 0x0104
    3de4:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN15GB_SerialHelper16sendHttpNotFoundEh>
    3de8:	f2 cf       	rjmp	.-28     	; 0x3dce <_Z11serialEventv+0xfa>
    3dea:	2e 96       	adiw	r28, 0x0e	; 14
    3dec:	0f b6       	in	r0, 0x3f	; 63
    3dee:	f8 94       	cli
    3df0:	de bf       	out	0x3e, r29	; 62
    3df2:	0f be       	out	0x3f, r0	; 63
    3df4:	cd bf       	out	0x3d, r28	; 61
    3df6:	cf 91       	pop	r28
    3df8:	df 91       	pop	r29
    3dfa:	1f 91       	pop	r17
    3dfc:	0f 91       	pop	r16
    3dfe:	ff 90       	pop	r15
    3e00:	ef 90       	pop	r14
    3e02:	08 95       	ret

00003e04 <_Z15initLoggerModelv>:
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    3e04:	10 92 54 01 	sts	0x0154, r1
    this->sequenceSize = sequenceSize;
    3e08:	42 e0       	ldi	r20, 0x02	; 2
    3e0a:	40 93 55 01 	sts	0x0155, r20
EVENT_SERIAL_UNKNOWN_COMMAND;

void initLoggerModel(){
  
  // Use F macro to reduce requirements to memory. We can't use F macro in constructors.
  ERROR_TIMER_NOT_SET.init(B00, 2, F("Error: Timer not set"));
    3e0e:	88 e3       	ldi	r24, 0x38	; 56
    3e10:	97 e0       	ldi	r25, 0x07	; 7
    3e12:	90 93 57 01 	sts	0x0157, r25
    3e16:	80 93 56 01 	sts	0x0156, r24
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    3e1a:	31 e0       	ldi	r19, 0x01	; 1
    3e1c:	30 93 5b 01 	sts	0x015B, r19
    this->sequenceSize = sequenceSize;
    3e20:	23 e0       	ldi	r18, 0x03	; 3
    3e22:	20 93 5c 01 	sts	0x015C, r18
  ERROR_TIMER_NEEDS_SYNC.init(B001, 3, F("Error: Timer needs sync"));
    3e26:	80 e2       	ldi	r24, 0x20	; 32
    3e28:	97 e0       	ldi	r25, 0x07	; 7
    3e2a:	90 93 5e 01 	sts	0x015E, r25
    3e2e:	80 93 5d 01 	sts	0x015D, r24
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    3e32:	30 93 62 01 	sts	0x0162, r19
    this->sequenceSize = sequenceSize;
    3e36:	40 93 63 01 	sts	0x0163, r20
  ERROR_TERMOMETER_DISCONNECTED.init(B01, 2, F("Error: Termometer disconnected"));
    3e3a:	81 e0       	ldi	r24, 0x01	; 1
    3e3c:	97 e0       	ldi	r25, 0x07	; 7
    3e3e:	90 93 65 01 	sts	0x0165, r25
    3e42:	80 93 64 01 	sts	0x0164, r24
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    3e46:	40 93 69 01 	sts	0x0169, r20
    this->sequenceSize = sequenceSize;
    3e4a:	20 93 6a 01 	sts	0x016A, r18
  ERROR_TERMOMETER_ZERO_VALUE.init(B010, 3, F("Error: Termometer returned ZERO value"));
    3e4e:	8b ed       	ldi	r24, 0xDB	; 219
    3e50:	96 e0       	ldi	r25, 0x06	; 6
    3e52:	90 93 6c 01 	sts	0x016C, r25
    3e56:	80 93 6b 01 	sts	0x016B, r24
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    3e5a:	10 92 70 01 	sts	0x0170, r1
    this->sequenceSize = sequenceSize;
    3e5e:	20 93 71 01 	sts	0x0171, r18
  ERROR_TERMOMETER_CRITICAL_VALUE.init(B000, 3, F("Error: Termometer returned CRITICAL value"));
    3e62:	81 eb       	ldi	r24, 0xB1	; 177
    3e64:	96 e0       	ldi	r25, 0x06	; 6
    3e66:	90 93 73 01 	sts	0x0173, r25
    3e6a:	80 93 72 01 	sts	0x0172, r24
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    3e6e:	57 e0       	ldi	r21, 0x07	; 7
    3e70:	50 93 77 01 	sts	0x0177, r21
    this->sequenceSize = sequenceSize;
    3e74:	20 93 78 01 	sts	0x0178, r18
  ERROR_MEMORY_LOW.init(B111, 3, F("Error: Memory remained less 200 bytes"));
    3e78:	8b e8       	ldi	r24, 0x8B	; 139
    3e7a:	96 e0       	ldi	r25, 0x06	; 6
    3e7c:	90 93 7a 01 	sts	0x017A, r25
    3e80:	80 93 79 01 	sts	0x0179, r24
  nextEvent(lastAddedEvent), index(0xFF) {
    lastAddedEvent = this;
  }

  void init(byte index, const __FlashStringHelper* description) {
    this->index = index;
    3e84:	30 93 7e 01 	sts	0x017E, r19

  EVENT_FIRST_START_UP.init(1, F("FIRST STARTUP")), 
    3e88:	8d e7       	ldi	r24, 0x7D	; 125
    3e8a:	96 e0       	ldi	r25, 0x06	; 6
    3e8c:	90 93 80 01 	sts	0x0180, r25
    3e90:	80 93 7f 01 	sts	0x017F, r24
    3e94:	40 93 83 01 	sts	0x0183, r20
  EVENT_RESTART.init(2, F("RESTARTED")), 
    3e98:	83 e7       	ldi	r24, 0x73	; 115
    3e9a:	96 e0       	ldi	r25, 0x06	; 6
    3e9c:	90 93 85 01 	sts	0x0185, r25
    3ea0:	80 93 84 01 	sts	0x0184, r24
    3ea4:	20 93 88 01 	sts	0x0188, r18
  EVENT_MODE_DAY.init(3, F("Growbox switched to DAY mode")), 
    3ea8:	86 e5       	ldi	r24, 0x56	; 86
    3eaa:	96 e0       	ldi	r25, 0x06	; 6
    3eac:	90 93 8a 01 	sts	0x018A, r25
    3eb0:	80 93 89 01 	sts	0x0189, r24
    3eb4:	84 e0       	ldi	r24, 0x04	; 4
    3eb6:	80 93 8d 01 	sts	0x018D, r24
  EVENT_MODE_NIGHT.init(4, F("Growbox switched to NIGHT mode")), 
    3eba:	87 e3       	ldi	r24, 0x37	; 55
    3ebc:	96 e0       	ldi	r25, 0x06	; 6
    3ebe:	90 93 8f 01 	sts	0x018F, r25
    3ec2:	80 93 8e 01 	sts	0x018E, r24
    3ec6:	85 e0       	ldi	r24, 0x05	; 5
    3ec8:	80 93 92 01 	sts	0x0192, r24
  EVENT_LIGHT_OFF.init(5, F("LIGHT turned OFF")), 
    3ecc:	86 e2       	ldi	r24, 0x26	; 38
    3ece:	96 e0       	ldi	r25, 0x06	; 6
    3ed0:	90 93 94 01 	sts	0x0194, r25
    3ed4:	80 93 93 01 	sts	0x0193, r24
    3ed8:	86 e0       	ldi	r24, 0x06	; 6
    3eda:	80 93 97 01 	sts	0x0197, r24
  EVENT_LIGHT_ON.init(6, F("LIGHT turned ON")), 
    3ede:	86 e1       	ldi	r24, 0x16	; 22
    3ee0:	96 e0       	ldi	r25, 0x06	; 6
    3ee2:	90 93 99 01 	sts	0x0199, r25
    3ee6:	80 93 98 01 	sts	0x0198, r24
    3eea:	50 93 9c 01 	sts	0x019C, r21
  EVENT_FAN_OFF.init(7, F("FAN turned OFF")), 
    3eee:	87 e0       	ldi	r24, 0x07	; 7
    3ef0:	96 e0       	ldi	r25, 0x06	; 6
    3ef2:	90 93 9e 01 	sts	0x019E, r25
    3ef6:	80 93 9d 01 	sts	0x019D, r24
    3efa:	88 e0       	ldi	r24, 0x08	; 8
    3efc:	80 93 a1 01 	sts	0x01A1, r24
  EVENT_FAN_ON_MIN.init(8, F("FAN turned ON MIN speed")), 
    3f00:	8f ee       	ldi	r24, 0xEF	; 239
    3f02:	95 e0       	ldi	r25, 0x05	; 5
    3f04:	90 93 a3 01 	sts	0x01A3, r25
    3f08:	80 93 a2 01 	sts	0x01A2, r24
    3f0c:	89 e0       	ldi	r24, 0x09	; 9
    3f0e:	80 93 a6 01 	sts	0x01A6, r24
  EVENT_FAN_ON_MAX.init(9, F("FAN turned ON MAX speed")),
    3f12:	87 ed       	ldi	r24, 0xD7	; 215
    3f14:	95 e0       	ldi	r25, 0x05	; 5
    3f16:	90 93 a8 01 	sts	0x01A8, r25
    3f1a:	80 93 a7 01 	sts	0x01A7, r24
    3f1e:	8a e0       	ldi	r24, 0x0A	; 10
    3f20:	80 93 ab 01 	sts	0x01AB, r24
  EVENT_SERIAL_UNKNOWN_COMMAND.init(10, F("Unknown serial command"));
    3f24:	80 ec       	ldi	r24, 0xC0	; 192
    3f26:	95 e0       	ldi	r25, 0x05	; 5
    3f28:	90 93 ad 01 	sts	0x01AD, r25
    3f2c:	80 93 ac 01 	sts	0x01AC, r24
}
    3f30:	08 95       	ret

00003f32 <_GLOBAL__I__ZN5Error13lastAddedItemE>:
  byte sequenceSize;
  const __FlashStringHelper* description; // FLASH
  boolean isStored; // should be stored in Log only once, but notification should repeated

    Error() : 
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    3f32:	80 91 4e 01 	lds	r24, 0x014E
    3f36:	90 91 4f 01 	lds	r25, 0x014F
    3f3a:	90 93 53 01 	sts	0x0153, r25
    3f3e:	80 93 52 01 	sts	0x0152, r24
    3f42:	2f ef       	ldi	r18, 0xFF	; 255
    3f44:	20 93 54 01 	sts	0x0154, r18
    3f48:	20 93 55 01 	sts	0x0155, r18
    3f4c:	10 92 58 01 	sts	0x0158, r1
    lastAddedItem = this;
    3f50:	82 e5       	ldi	r24, 0x52	; 82
    3f52:	91 e0       	ldi	r25, 0x01	; 1
    3f54:	90 93 5a 01 	sts	0x015A, r25
    3f58:	80 93 59 01 	sts	0x0159, r24
    3f5c:	20 93 5b 01 	sts	0x015B, r18
    3f60:	20 93 5c 01 	sts	0x015C, r18
    3f64:	10 92 5f 01 	sts	0x015F, r1
    3f68:	89 e5       	ldi	r24, 0x59	; 89
    3f6a:	91 e0       	ldi	r25, 0x01	; 1
    3f6c:	90 93 61 01 	sts	0x0161, r25
    3f70:	80 93 60 01 	sts	0x0160, r24
    3f74:	20 93 62 01 	sts	0x0162, r18
    3f78:	20 93 63 01 	sts	0x0163, r18
    3f7c:	10 92 66 01 	sts	0x0166, r1
    3f80:	80 e6       	ldi	r24, 0x60	; 96
    3f82:	91 e0       	ldi	r25, 0x01	; 1
    3f84:	90 93 68 01 	sts	0x0168, r25
    3f88:	80 93 67 01 	sts	0x0167, r24
    3f8c:	20 93 69 01 	sts	0x0169, r18
    3f90:	20 93 6a 01 	sts	0x016A, r18
    3f94:	10 92 6d 01 	sts	0x016D, r1
    3f98:	87 e6       	ldi	r24, 0x67	; 103
    3f9a:	91 e0       	ldi	r25, 0x01	; 1
    3f9c:	90 93 6f 01 	sts	0x016F, r25
    3fa0:	80 93 6e 01 	sts	0x016E, r24
    3fa4:	20 93 70 01 	sts	0x0170, r18
    3fa8:	20 93 71 01 	sts	0x0171, r18
    3fac:	10 92 74 01 	sts	0x0174, r1
    3fb0:	8e e6       	ldi	r24, 0x6E	; 110
    3fb2:	91 e0       	ldi	r25, 0x01	; 1
    3fb4:	90 93 76 01 	sts	0x0176, r25
    3fb8:	80 93 75 01 	sts	0x0175, r24
    3fbc:	20 93 77 01 	sts	0x0177, r18
    3fc0:	20 93 78 01 	sts	0x0178, r18
    3fc4:	10 92 7b 01 	sts	0x017B, r1
    3fc8:	85 e7       	ldi	r24, 0x75	; 117
    3fca:	91 e0       	ldi	r25, 0x01	; 1
    3fcc:	90 93 4f 01 	sts	0x014F, r25
    3fd0:	80 93 4e 01 	sts	0x014E, r24
public:
  byte index;
  const __FlashStringHelper* description; // FLASH

  Event() : 
  nextEvent(lastAddedEvent), index(0xFF) {
    3fd4:	80 91 50 01 	lds	r24, 0x0150
    3fd8:	90 91 51 01 	lds	r25, 0x0151
    3fdc:	90 93 7d 01 	sts	0x017D, r25
    3fe0:	80 93 7c 01 	sts	0x017C, r24
    3fe4:	20 93 7e 01 	sts	0x017E, r18
    lastAddedEvent = this;
    3fe8:	8c e7       	ldi	r24, 0x7C	; 124
    3fea:	91 e0       	ldi	r25, 0x01	; 1
    3fec:	90 93 82 01 	sts	0x0182, r25
    3ff0:	80 93 81 01 	sts	0x0181, r24
    3ff4:	20 93 83 01 	sts	0x0183, r18
    3ff8:	81 e8       	ldi	r24, 0x81	; 129
    3ffa:	91 e0       	ldi	r25, 0x01	; 1
    3ffc:	90 93 87 01 	sts	0x0187, r25
    4000:	80 93 86 01 	sts	0x0186, r24
    4004:	20 93 88 01 	sts	0x0188, r18
    4008:	86 e8       	ldi	r24, 0x86	; 134
    400a:	91 e0       	ldi	r25, 0x01	; 1
    400c:	90 93 8c 01 	sts	0x018C, r25
    4010:	80 93 8b 01 	sts	0x018B, r24
    4014:	20 93 8d 01 	sts	0x018D, r18
    4018:	8b e8       	ldi	r24, 0x8B	; 139
    401a:	91 e0       	ldi	r25, 0x01	; 1
    401c:	90 93 91 01 	sts	0x0191, r25
    4020:	80 93 90 01 	sts	0x0190, r24
    4024:	20 93 92 01 	sts	0x0192, r18
    4028:	80 e9       	ldi	r24, 0x90	; 144
    402a:	91 e0       	ldi	r25, 0x01	; 1
    402c:	90 93 96 01 	sts	0x0196, r25
    4030:	80 93 95 01 	sts	0x0195, r24
    4034:	20 93 97 01 	sts	0x0197, r18
    4038:	85 e9       	ldi	r24, 0x95	; 149
    403a:	91 e0       	ldi	r25, 0x01	; 1
    403c:	90 93 9b 01 	sts	0x019B, r25
    4040:	80 93 9a 01 	sts	0x019A, r24
    4044:	20 93 9c 01 	sts	0x019C, r18
    4048:	8a e9       	ldi	r24, 0x9A	; 154
    404a:	91 e0       	ldi	r25, 0x01	; 1
    404c:	90 93 a0 01 	sts	0x01A0, r25
    4050:	80 93 9f 01 	sts	0x019F, r24
    4054:	20 93 a1 01 	sts	0x01A1, r18
    4058:	8f e9       	ldi	r24, 0x9F	; 159
    405a:	91 e0       	ldi	r25, 0x01	; 1
    405c:	90 93 a5 01 	sts	0x01A5, r25
    4060:	80 93 a4 01 	sts	0x01A4, r24
    4064:	20 93 a6 01 	sts	0x01A6, r18
    4068:	84 ea       	ldi	r24, 0xA4	; 164
    406a:	91 e0       	ldi	r25, 0x01	; 1
    406c:	90 93 aa 01 	sts	0x01AA, r25
    4070:	80 93 a9 01 	sts	0x01A9, r24
    4074:	20 93 ab 01 	sts	0x01AB, r18
    4078:	89 ea       	ldi	r24, 0xA9	; 169
    407a:	91 e0       	ldi	r25, 0x01	; 1
    407c:	90 93 51 01 	sts	0x0151, r25
    4080:	80 93 50 01 	sts	0x0150, r24
    4084:	08 95       	ret

00004086 <_Z41__static_initialization_and_destruction_0ii>:
boolean GB_SerialHelper::s_restartWifiIfNoResponseAutomatically = true;

String GB_SerialHelper::s_wifiSID;
String GB_SerialHelper::s_wifiPass;

int GB_SerialHelper::s_sendWifiDataFrameSize;
    4086:	81 30       	cpi	r24, 0x01	; 1
    4088:	91 05       	cpc	r25, r1
    408a:	81 f4       	brne	.+32     	; 0x40ac <_Z41__static_initialization_and_destruction_0ii+0x26>
    408c:	6f 5f       	subi	r22, 0xFF	; 255
    408e:	7f 4f       	sbci	r23, 0xFF	; 255
    4090:	d1 f4       	brne	.+52     	; 0x40c6 <_Z41__static_initialization_and_destruction_0ii+0x40>
/*volatile*/boolean GB_SerialHelper::useSerialMonitor = false;
/*volatile*/boolean GB_SerialHelper::useSerialWifi = false;
boolean GB_SerialHelper::s_restartWifi = false;
boolean GB_SerialHelper::s_restartWifiIfNoResponseAutomatically = true;

String GB_SerialHelper::s_wifiSID;
    4092:	81 eb       	ldi	r24, 0xB1	; 177
    4094:	91 e0       	ldi	r25, 0x01	; 1
    4096:	61 e0       	ldi	r22, 0x01	; 1
    4098:	71 e0       	ldi	r23, 0x01	; 1
    409a:	0e 94 95 39 	call	0x732a	; 0x732a <_ZN6StringC1EPKc>
String GB_SerialHelper::s_wifiPass;
    409e:	88 eb       	ldi	r24, 0xB8	; 184
    40a0:	91 e0       	ldi	r25, 0x01	; 1
    40a2:	61 e0       	ldi	r22, 0x01	; 1
    40a4:	71 e0       	ldi	r23, 0x01	; 1
    40a6:	0e 94 95 39 	call	0x732a	; 0x732a <_ZN6StringC1EPKc>
    40aa:	08 95       	ret
    40ac:	89 2b       	or	r24, r25
    40ae:	59 f4       	brne	.+22     	; 0x40c6 <_Z41__static_initialization_and_destruction_0ii+0x40>
    40b0:	6f 5f       	subi	r22, 0xFF	; 255
    40b2:	7f 4f       	sbci	r23, 0xFF	; 255
    40b4:	41 f4       	brne	.+16     	; 0x40c6 <_Z41__static_initialization_and_destruction_0ii+0x40>
    40b6:	88 eb       	ldi	r24, 0xB8	; 184
    40b8:	91 e0       	ldi	r25, 0x01	; 1
    40ba:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
/*volatile*/boolean GB_SerialHelper::useSerialMonitor = false;
/*volatile*/boolean GB_SerialHelper::useSerialWifi = false;
boolean GB_SerialHelper::s_restartWifi = false;
boolean GB_SerialHelper::s_restartWifiIfNoResponseAutomatically = true;

String GB_SerialHelper::s_wifiSID;
    40be:	81 eb       	ldi	r24, 0xB1	; 177
    40c0:	91 e0       	ldi	r25, 0x01	; 1
    40c2:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD1Ev>
    40c6:	08 95       	ret

000040c8 <_GLOBAL__D__ZN15GB_SerialHelper16useSerialMonitorE>:
String GB_SerialHelper::s_wifiPass;

int GB_SerialHelper::s_sendWifiDataFrameSize;
    40c8:	80 e0       	ldi	r24, 0x00	; 0
    40ca:	90 e0       	ldi	r25, 0x00	; 0
    40cc:	6f ef       	ldi	r22, 0xFF	; 255
    40ce:	7f ef       	ldi	r23, 0xFF	; 255
    40d0:	0e 94 43 20 	call	0x4086	; 0x4086 <_Z41__static_initialization_and_destruction_0ii>
    40d4:	08 95       	ret

000040d6 <_GLOBAL__I__ZN15GB_SerialHelper16useSerialMonitorE>:
    40d6:	81 e0       	ldi	r24, 0x01	; 1
    40d8:	90 e0       	ldi	r25, 0x00	; 0
    40da:	6f ef       	ldi	r22, 0xFF	; 255
    40dc:	7f ef       	ldi	r23, 0xFF	; 255
    40de:	0e 94 43 20 	call	0x4086	; 0x4086 <_Z41__static_initialization_and_destruction_0ii>
    40e2:	08 95       	ret

000040e4 <_GLOBAL__I__ZN14GB_Thermometer17dallasTemperatureE>:
#include "Thermometer.h"

// Pass our oneWire reference to Dallas Temperature. 
DallasTemperature GB_Thermometer::dallasTemperature(&g_oneWirePin);
    40e4:	81 ee       	ldi	r24, 0xE1	; 225
    40e6:	91 e0       	ldi	r25, 0x01	; 1
    40e8:	6c e3       	ldi	r22, 0x3C	; 60
    40ea:	71 e0       	ldi	r23, 0x01	; 1
    40ec:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <_ZN17DallasTemperatureC1EP7OneWire>
DeviceAddress GB_Thermometer::oneWireAddress;

// Visible only in this file
float GB_Thermometer::workingTemperature = 0.0;
double GB_Thermometer::statisticsTemperatureSumm = 0.0;
int GB_Thermometer::statisticsTemperatureCount = 0;
    40f0:	08 95       	ret

000040f2 <_ZN11EEPROMClass4readEi>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    40f2:	f9 99       	sbic	0x1f, 1	; 31
    40f4:	fe cf       	rjmp	.-4      	; 0x40f2 <_ZN11EEPROMClass4readEi>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    40f6:	72 bd       	out	0x22, r23	; 34
    40f8:	61 bd       	out	0x21, r22	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    40fa:	f8 9a       	sbi	0x1f, 0	; 31
    40fc:	80 b5       	in	r24, 0x20	; 32
 ******************************************************************************/

uint8_t EEPROMClass::read(int address)
{
	return eeprom_read_byte((unsigned char *) address);
}
    40fe:	08 95       	ret

00004100 <freeMemory>:

int freeMemory() {
    4100:	df 93       	push	r29
    4102:	cf 93       	push	r28
    4104:	00 d0       	rcall	.+0      	; 0x4106 <freeMemory+0x6>
    4106:	cd b7       	in	r28, 0x3d	; 61
    4108:	de b7       	in	r29, 0x3e	; 62
  int free_memory;

  if ((int)__brkval == 0) {
    410a:	20 91 db 03 	lds	r18, 0x03DB
    410e:	30 91 dc 03 	lds	r19, 0x03DC
    4112:	ce 01       	movw	r24, r28
    4114:	01 96       	adiw	r24, 0x01	; 1
    4116:	21 15       	cp	r18, r1
    4118:	31 05       	cpc	r19, r1
    411a:	29 f4       	brne	.+10     	; 0x4126 <freeMemory+0x26>
    free_memory = ((int)&free_memory) - ((int)&__heap_start);
    411c:	8f 5d       	subi	r24, 0xDF	; 223
    411e:	93 40       	sbci	r25, 0x03	; 3
    4120:	9a 83       	std	Y+2, r25	; 0x02
    4122:	89 83       	std	Y+1, r24	; 0x01
    4124:	18 c0       	rjmp	.+48     	; 0x4156 <freeMemory+0x56>
  } else {
    free_memory = ((int)&free_memory) - ((int)__brkval);
    4126:	ac 01       	movw	r20, r24
    4128:	42 1b       	sub	r20, r18
    412a:	53 0b       	sbc	r21, r19
/* Calculates the size of the free list */
int freeListSize() {
  struct __freelist* current;
  int total = 0;

  for (current = __flp; current; current = current->nx) {
    412c:	e0 91 dd 03 	lds	r30, 0x03DD
    4130:	f0 91 de 03 	lds	r31, 0x03DE
    4134:	20 e0       	ldi	r18, 0x00	; 0
    4136:	30 e0       	ldi	r19, 0x00	; 0
    4138:	08 c0       	rjmp	.+16     	; 0x414a <freeMemory+0x4a>
    total += 2; /* Add two bytes for the memory block's header  */
    413a:	80 81       	ld	r24, Z
    413c:	91 81       	ldd	r25, Z+1	; 0x01
    413e:	02 96       	adiw	r24, 0x02	; 2
    total += (int) current->sz;
    4140:	28 0f       	add	r18, r24
    4142:	39 1f       	adc	r19, r25
/* Calculates the size of the free list */
int freeListSize() {
  struct __freelist* current;
  int total = 0;

  for (current = __flp; current; current = current->nx) {
    4144:	02 80       	ldd	r0, Z+2	; 0x02
    4146:	f3 81       	ldd	r31, Z+3	; 0x03
    4148:	e0 2d       	mov	r30, r0
    414a:	30 97       	sbiw	r30, 0x00	; 0
    414c:	b1 f7       	brne	.-20     	; 0x413a <freeMemory+0x3a>

  if ((int)__brkval == 0) {
    free_memory = ((int)&free_memory) - ((int)&__heap_start);
  } else {
    free_memory = ((int)&free_memory) - ((int)__brkval);
    free_memory += freeListSize();
    414e:	24 0f       	add	r18, r20
    4150:	35 1f       	adc	r19, r21
    4152:	3a 83       	std	Y+2, r19	; 0x02
    4154:	29 83       	std	Y+1, r18	; 0x01
  }
  return free_memory;
    4156:	89 81       	ldd	r24, Y+1	; 0x01
    4158:	9a 81       	ldd	r25, Y+2	; 0x02
    415a:	0f 90       	pop	r0
    415c:	0f 90       	pop	r0
    415e:	cf 91       	pop	r28
    4160:	df 91       	pop	r29
    4162:	08 95       	ret

00004164 <_Z9breakTimemR12tmElements_t>:
// leap year calulator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+Y)>0) && !((1970+Y)%4) && ( ((1970+Y)%100) || !((1970+Y)%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    4164:	8f 92       	push	r8
    4166:	9f 92       	push	r9
    4168:	af 92       	push	r10
    416a:	bf 92       	push	r11
    416c:	cf 92       	push	r12
    416e:	df 92       	push	r13
    4170:	ef 92       	push	r14
    4172:	ff 92       	push	r15
    4174:	0f 93       	push	r16
    4176:	1f 93       	push	r17
    4178:	cf 93       	push	r28
    417a:	df 93       	push	r29
    417c:	7b 01       	movw	r14, r22
    417e:	8c 01       	movw	r16, r24
    4180:	ea 01       	movw	r28, r20
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    4182:	2c e3       	ldi	r18, 0x3C	; 60
    4184:	30 e0       	ldi	r19, 0x00	; 0
    4186:	40 e0       	ldi	r20, 0x00	; 0
    4188:	50 e0       	ldi	r21, 0x00	; 0
    418a:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <__udivmodsi4>
    418e:	68 83       	st	Y, r22
  time /= 60; // now it is minutes
    4190:	c8 01       	movw	r24, r16
    4192:	b7 01       	movw	r22, r14
    4194:	2c e3       	ldi	r18, 0x3C	; 60
    4196:	30 e0       	ldi	r19, 0x00	; 0
    4198:	40 e0       	ldi	r20, 0x00	; 0
    419a:	50 e0       	ldi	r21, 0x00	; 0
    419c:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <__udivmodsi4>
    41a0:	12 2f       	mov	r17, r18
    41a2:	03 2f       	mov	r16, r19
    41a4:	f4 2e       	mov	r15, r20
    41a6:	e5 2e       	mov	r14, r21
  tm.Minute = time % 60;
    41a8:	62 2f       	mov	r22, r18
    41aa:	73 2f       	mov	r23, r19
    41ac:	84 2f       	mov	r24, r20
    41ae:	95 2f       	mov	r25, r21
    41b0:	2c e3       	ldi	r18, 0x3C	; 60
    41b2:	30 e0       	ldi	r19, 0x00	; 0
    41b4:	40 e0       	ldi	r20, 0x00	; 0
    41b6:	50 e0       	ldi	r21, 0x00	; 0
    41b8:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <__udivmodsi4>
    41bc:	69 83       	std	Y+1, r22	; 0x01
  time /= 60; // now it is hours
    41be:	61 2f       	mov	r22, r17
    41c0:	70 2f       	mov	r23, r16
    41c2:	8f 2d       	mov	r24, r15
    41c4:	9e 2d       	mov	r25, r14
    41c6:	2c e3       	ldi	r18, 0x3C	; 60
    41c8:	30 e0       	ldi	r19, 0x00	; 0
    41ca:	40 e0       	ldi	r20, 0x00	; 0
    41cc:	50 e0       	ldi	r21, 0x00	; 0
    41ce:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <__udivmodsi4>
    41d2:	12 2f       	mov	r17, r18
    41d4:	03 2f       	mov	r16, r19
    41d6:	f4 2e       	mov	r15, r20
    41d8:	e5 2e       	mov	r14, r21
  tm.Hour = time % 24;
    41da:	62 2f       	mov	r22, r18
    41dc:	73 2f       	mov	r23, r19
    41de:	84 2f       	mov	r24, r20
    41e0:	95 2f       	mov	r25, r21
    41e2:	28 e1       	ldi	r18, 0x18	; 24
    41e4:	30 e0       	ldi	r19, 0x00	; 0
    41e6:	40 e0       	ldi	r20, 0x00	; 0
    41e8:	50 e0       	ldi	r21, 0x00	; 0
    41ea:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <__udivmodsi4>
    41ee:	6a 83       	std	Y+2, r22	; 0x02
  time /= 24; // now it is days
    41f0:	61 2f       	mov	r22, r17
    41f2:	70 2f       	mov	r23, r16
    41f4:	8f 2d       	mov	r24, r15
    41f6:	9e 2d       	mov	r25, r14
    41f8:	28 e1       	ldi	r18, 0x18	; 24
    41fa:	30 e0       	ldi	r19, 0x00	; 0
    41fc:	40 e0       	ldi	r20, 0x00	; 0
    41fe:	50 e0       	ldi	r21, 0x00	; 0
    4200:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <__udivmodsi4>
    4204:	79 01       	movw	r14, r18
    4206:	8a 01       	movw	r16, r20
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    4208:	c8 01       	movw	r24, r16
    420a:	b7 01       	movw	r22, r14
    420c:	6c 5f       	subi	r22, 0xFC	; 252
    420e:	7f 4f       	sbci	r23, 0xFF	; 255
    4210:	8f 4f       	sbci	r24, 0xFF	; 255
    4212:	9f 4f       	sbci	r25, 0xFF	; 255
    4214:	27 e0       	ldi	r18, 0x07	; 7
    4216:	30 e0       	ldi	r19, 0x00	; 0
    4218:	40 e0       	ldi	r20, 0x00	; 0
    421a:	50 e0       	ldi	r21, 0x00	; 0
    421c:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <__udivmodsi4>
    4220:	6f 5f       	subi	r22, 0xFF	; 255
    4222:	6b 83       	std	Y+3, r22	; 0x03
    4224:	20 e0       	ldi	r18, 0x00	; 0
    4226:	aa 24       	eor	r10, r10
    4228:	bb 24       	eor	r11, r11
    422a:	65 01       	movw	r12, r10
    422c:	01 c0       	rjmp	.+2      	; 0x4230 <_Z9breakTimemR12tmElements_t+0xcc>
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
    422e:	2f 5f       	subi	r18, 0xFF	; 255
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    4230:	82 2e       	mov	r8, r18
    4232:	99 24       	eor	r9, r9
    4234:	f4 01       	movw	r30, r8
    4236:	ee 54       	subi	r30, 0x4E	; 78
    4238:	f8 4f       	sbci	r31, 0xF8	; 248
    423a:	cf 01       	movw	r24, r30
    423c:	83 70       	andi	r24, 0x03	; 3
    423e:	90 70       	andi	r25, 0x00	; 0
    4240:	89 2b       	or	r24, r25
    4242:	99 f4       	brne	.+38     	; 0x426a <_Z9breakTimemR12tmElements_t+0x106>
    4244:	cf 01       	movw	r24, r30
    4246:	64 e6       	ldi	r22, 0x64	; 100
    4248:	70 e0       	ldi	r23, 0x00	; 0
    424a:	0e 94 c3 3d 	call	0x7b86	; 0x7b86 <__divmodhi4>
    424e:	89 2b       	or	r24, r25
    4250:	39 f4       	brne	.+14     	; 0x4260 <_Z9breakTimemR12tmElements_t+0xfc>
    4252:	cf 01       	movw	r24, r30
    4254:	60 e9       	ldi	r22, 0x90	; 144
    4256:	71 e0       	ldi	r23, 0x01	; 1
    4258:	0e 94 c3 3d 	call	0x7b86	; 0x7b86 <__divmodhi4>
    425c:	89 2b       	or	r24, r25
    425e:	29 f4       	brne	.+10     	; 0x426a <_Z9breakTimemR12tmElements_t+0x106>
    4260:	8e e6       	ldi	r24, 0x6E	; 110
    4262:	91 e0       	ldi	r25, 0x01	; 1
    4264:	a0 e0       	ldi	r26, 0x00	; 0
    4266:	b0 e0       	ldi	r27, 0x00	; 0
    4268:	04 c0       	rjmp	.+8      	; 0x4272 <_Z9breakTimemR12tmElements_t+0x10e>
    426a:	8d e6       	ldi	r24, 0x6D	; 109
    426c:	91 e0       	ldi	r25, 0x01	; 1
    426e:	a0 e0       	ldi	r26, 0x00	; 0
    4270:	b0 e0       	ldi	r27, 0x00	; 0
    4272:	a8 0e       	add	r10, r24
    4274:	b9 1e       	adc	r11, r25
    4276:	ca 1e       	adc	r12, r26
    4278:	db 1e       	adc	r13, r27
    427a:	c5 01       	movw	r24, r10
    427c:	a0 e0       	ldi	r26, 0x00	; 0
    427e:	b0 e0       	ldi	r27, 0x00	; 0
    4280:	e8 16       	cp	r14, r24
    4282:	f9 06       	cpc	r15, r25
    4284:	0a 07       	cpc	r16, r26
    4286:	1b 07       	cpc	r17, r27
    4288:	90 f6       	brcc	.-92     	; 0x422e <_Z9breakTimemR12tmElements_t+0xca>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    428a:	2e 83       	std	Y+6, r18	; 0x06
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    428c:	f4 01       	movw	r30, r8
    428e:	ee 54       	subi	r30, 0x4E	; 78
    4290:	f8 4f       	sbci	r31, 0xF8	; 248
    4292:	83 e0       	ldi	r24, 0x03	; 3
    4294:	88 2e       	mov	r8, r24
    4296:	91 2c       	mov	r9, r1
    4298:	8e 22       	and	r8, r30
    429a:	9f 22       	and	r9, r31
    429c:	81 14       	cp	r8, r1
    429e:	91 04       	cpc	r9, r1
    42a0:	99 f4       	brne	.+38     	; 0x42c8 <_Z9breakTimemR12tmElements_t+0x164>
    42a2:	cf 01       	movw	r24, r30
    42a4:	64 e6       	ldi	r22, 0x64	; 100
    42a6:	70 e0       	ldi	r23, 0x00	; 0
    42a8:	0e 94 c3 3d 	call	0x7b86	; 0x7b86 <__divmodhi4>
    42ac:	89 2b       	or	r24, r25
    42ae:	39 f4       	brne	.+14     	; 0x42be <_Z9breakTimemR12tmElements_t+0x15a>
    42b0:	cf 01       	movw	r24, r30
    42b2:	60 e9       	ldi	r22, 0x90	; 144
    42b4:	71 e0       	ldi	r23, 0x01	; 1
    42b6:	0e 94 c3 3d 	call	0x7b86	; 0x7b86 <__divmodhi4>
    42ba:	89 2b       	or	r24, r25
    42bc:	29 f4       	brne	.+10     	; 0x42c8 <_Z9breakTimemR12tmElements_t+0x164>
    42be:	8e e6       	ldi	r24, 0x6E	; 110
    42c0:	91 e0       	ldi	r25, 0x01	; 1
    42c2:	a0 e0       	ldi	r26, 0x00	; 0
    42c4:	b0 e0       	ldi	r27, 0x00	; 0
    42c6:	04 c0       	rjmp	.+8      	; 0x42d0 <_Z9breakTimemR12tmElements_t+0x16c>
    42c8:	8d e6       	ldi	r24, 0x6D	; 109
    42ca:	91 e0       	ldi	r25, 0x01	; 1
    42cc:	a0 e0       	ldi	r26, 0x00	; 0
    42ce:	b0 e0       	ldi	r27, 0x00	; 0
  time  -= days; // now it is days in this year, starting at 0
    42d0:	a8 1a       	sub	r10, r24
    42d2:	b9 0a       	sbc	r11, r25
    42d4:	ca 0a       	sbc	r12, r26
    42d6:	db 0a       	sbc	r13, r27
    42d8:	98 01       	movw	r18, r16
    42da:	87 01       	movw	r16, r14
    42dc:	0a 19       	sub	r16, r10
    42de:	1b 09       	sbc	r17, r11
    42e0:	2c 09       	sbc	r18, r12
    42e2:	3d 09       	sbc	r19, r13
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    42e4:	cf 01       	movw	r24, r30
    42e6:	64 e6       	ldi	r22, 0x64	; 100
    42e8:	70 e0       	ldi	r23, 0x00	; 0
    42ea:	0e 94 c3 3d 	call	0x7b86	; 0x7b86 <__divmodhi4>
    42ee:	7c 01       	movw	r14, r24
    42f0:	cf 01       	movw	r24, r30
    42f2:	60 e9       	ldi	r22, 0x90	; 144
    42f4:	71 e0       	ldi	r23, 0x01	; 1
    42f6:	0e 94 c3 3d 	call	0x7b86	; 0x7b86 <__divmodhi4>
    42fa:	ac 01       	movw	r20, r24
    42fc:	e0 e1       	ldi	r30, 0x10	; 16
    42fe:	f1 e0       	ldi	r31, 0x01	; 1
    4300:	60 e0       	ldi	r22, 0x00	; 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    4302:	61 30       	cpi	r22, 0x01	; 1
    4304:	51 f4       	brne	.+20     	; 0x431a <_Z9breakTimemR12tmElements_t+0x1b6>
      if (LEAP_YEAR(year)) {
    4306:	81 14       	cp	r8, r1
    4308:	91 04       	cpc	r9, r1
    430a:	49 f4       	brne	.+18     	; 0x431e <_Z9breakTimemR12tmElements_t+0x1ba>
    430c:	e1 14       	cp	r14, r1
    430e:	f1 04       	cpc	r15, r1
    4310:	41 f4       	brne	.+16     	; 0x4322 <_Z9breakTimemR12tmElements_t+0x1be>
    4312:	41 15       	cp	r20, r1
    4314:	51 05       	cpc	r21, r1
    4316:	29 f0       	breq	.+10     	; 0x4322 <_Z9breakTimemR12tmElements_t+0x1be>
    4318:	02 c0       	rjmp	.+4      	; 0x431e <_Z9breakTimemR12tmElements_t+0x1ba>
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    431a:	80 81       	ld	r24, Z
    431c:	03 c0       	rjmp	.+6      	; 0x4324 <_Z9breakTimemR12tmElements_t+0x1c0>
    431e:	8c e1       	ldi	r24, 0x1C	; 28
    4320:	01 c0       	rjmp	.+2      	; 0x4324 <_Z9breakTimemR12tmElements_t+0x1c0>
    4322:	8d e1       	ldi	r24, 0x1D	; 29
    }
    
    if (time >= monthLength) {
    4324:	90 e0       	ldi	r25, 0x00	; 0
    4326:	a0 e0       	ldi	r26, 0x00	; 0
    4328:	b0 e0       	ldi	r27, 0x00	; 0
    432a:	08 17       	cp	r16, r24
    432c:	19 07       	cpc	r17, r25
    432e:	2a 07       	cpc	r18, r26
    4330:	3b 07       	cpc	r19, r27
    4332:	40 f0       	brcs	.+16     	; 0x4344 <_Z9breakTimemR12tmElements_t+0x1e0>
      time -= monthLength;
    4334:	08 1b       	sub	r16, r24
    4336:	19 0b       	sbc	r17, r25
    4338:	2a 0b       	sbc	r18, r26
    433a:	3b 0b       	sbc	r19, r27
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    433c:	6f 5f       	subi	r22, 0xFF	; 255
    433e:	31 96       	adiw	r30, 0x01	; 1
    4340:	6c 30       	cpi	r22, 0x0C	; 12
    4342:	f9 f6       	brne	.-66     	; 0x4302 <_Z9breakTimemR12tmElements_t+0x19e>
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    4344:	6f 5f       	subi	r22, 0xFF	; 255
    4346:	6d 83       	std	Y+5, r22	; 0x05
  tm.Day = time + 1;     // day of month
    4348:	80 2f       	mov	r24, r16
    434a:	8f 5f       	subi	r24, 0xFF	; 255
    434c:	8c 83       	std	Y+4, r24	; 0x04
}
    434e:	df 91       	pop	r29
    4350:	cf 91       	pop	r28
    4352:	1f 91       	pop	r17
    4354:	0f 91       	pop	r16
    4356:	ff 90       	pop	r15
    4358:	ef 90       	pop	r14
    435a:	df 90       	pop	r13
    435c:	cf 90       	pop	r12
    435e:	bf 90       	pop	r11
    4360:	af 90       	pop	r10
    4362:	9f 90       	pop	r9
    4364:	8f 90       	pop	r8
    4366:	08 95       	ret

00004368 <_Z12refreshCachem>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    4368:	ef 92       	push	r14
    436a:	ff 92       	push	r15
    436c:	0f 93       	push	r16
    436e:	1f 93       	push	r17
    4370:	7b 01       	movw	r14, r22
    4372:	8c 01       	movw	r16, r24
  if (t != cacheTime) {
    4374:	80 91 1e 02 	lds	r24, 0x021E
    4378:	90 91 1f 02 	lds	r25, 0x021F
    437c:	a0 91 20 02 	lds	r26, 0x0220
    4380:	b0 91 21 02 	lds	r27, 0x0221
    4384:	e8 16       	cp	r14, r24
    4386:	f9 06       	cpc	r15, r25
    4388:	0a 07       	cpc	r16, r26
    438a:	1b 07       	cpc	r17, r27
    438c:	71 f0       	breq	.+28     	; 0x43aa <_Z12refreshCachem+0x42>
    breakTime(t, tm); 
    438e:	c8 01       	movw	r24, r16
    4390:	b7 01       	movw	r22, r14
    4392:	43 e1       	ldi	r20, 0x13	; 19
    4394:	52 e0       	ldi	r21, 0x02	; 2
    4396:	0e 94 b2 20 	call	0x4164	; 0x4164 <_Z9breakTimemR12tmElements_t>
    cacheTime = t; 
    439a:	e0 92 1e 02 	sts	0x021E, r14
    439e:	f0 92 1f 02 	sts	0x021F, r15
    43a2:	00 93 20 02 	sts	0x0220, r16
    43a6:	10 93 21 02 	sts	0x0221, r17
  }
}
    43aa:	1f 91       	pop	r17
    43ac:	0f 91       	pop	r16
    43ae:	ff 90       	pop	r15
    43b0:	ef 90       	pop	r14
    43b2:	08 95       	ret

000043b4 <_Z4yearm>:
int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
    43b4:	0e 94 b4 21 	call	0x4368	; 0x4368 <_Z12refreshCachem>
    43b8:	20 91 19 02 	lds	r18, 0x0219
    43bc:	30 e0       	ldi	r19, 0x00	; 0
    43be:	2e 54       	subi	r18, 0x4E	; 78
    43c0:	38 4f       	sbci	r19, 0xF8	; 248
  return tmYearToCalendar(tm.Year);
}
    43c2:	c9 01       	movw	r24, r18
    43c4:	08 95       	ret

000043c6 <_Z8makeTimeR12tmElements_t>:
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
}

time_t makeTime(tmElements_t &tm){   
    43c6:	4f 92       	push	r4
    43c8:	5f 92       	push	r5
    43ca:	6f 92       	push	r6
    43cc:	7f 92       	push	r7
    43ce:	8f 92       	push	r8
    43d0:	9f 92       	push	r9
    43d2:	af 92       	push	r10
    43d4:	bf 92       	push	r11
    43d6:	cf 92       	push	r12
    43d8:	df 92       	push	r13
    43da:	ef 92       	push	r14
    43dc:	ff 92       	push	r15
    43de:	0f 93       	push	r16
    43e0:	1f 93       	push	r17
    43e2:	cf 93       	push	r28
    43e4:	df 93       	push	r29
    43e6:	4c 01       	movw	r8, r24
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
    43e8:	dc 01       	movw	r26, r24
    43ea:	16 96       	adiw	r26, 0x06	; 6
    43ec:	1c 91       	ld	r17, X
    43ee:	61 2f       	mov	r22, r17
    43f0:	70 e0       	ldi	r23, 0x00	; 0
    43f2:	80 e0       	ldi	r24, 0x00	; 0
    43f4:	90 e0       	ldi	r25, 0x00	; 0
    43f6:	20 e8       	ldi	r18, 0x80	; 128
    43f8:	33 e3       	ldi	r19, 0x33	; 51
    43fa:	41 ee       	ldi	r20, 0xE1	; 225
    43fc:	51 e0       	ldi	r21, 0x01	; 1
    43fe:	0e 94 90 3d 	call	0x7b20	; 0x7b20 <__mulsi3>
    4402:	5b 01       	movw	r10, r22
    4404:	6c 01       	movw	r12, r24
    4406:	22 eb       	ldi	r18, 0xB2	; 178
    4408:	37 e0       	ldi	r19, 0x07	; 7
  for (i = 0; i < tm.Year; i++) {
    440a:	e1 2f       	mov	r30, r17
    440c:	f0 e0       	ldi	r31, 0x00	; 0
    440e:	ee 54       	subi	r30, 0x4E	; 78
    4410:	f8 4f       	sbci	r31, 0xF8	; 248
    4412:	1d c0       	rjmp	.+58     	; 0x444e <_Z8makeTimeR12tmElements_t+0x88>
    if (LEAP_YEAR(i)) {
    4414:	c9 01       	movw	r24, r18
    4416:	83 70       	andi	r24, 0x03	; 3
    4418:	90 70       	andi	r25, 0x00	; 0
    441a:	89 2b       	or	r24, r25
    441c:	b1 f4       	brne	.+44     	; 0x444a <_Z8makeTimeR12tmElements_t+0x84>
    441e:	c9 01       	movw	r24, r18
    4420:	64 e6       	ldi	r22, 0x64	; 100
    4422:	70 e0       	ldi	r23, 0x00	; 0
    4424:	0e 94 c3 3d 	call	0x7b86	; 0x7b86 <__divmodhi4>
    4428:	89 2b       	or	r24, r25
    442a:	39 f4       	brne	.+14     	; 0x443a <_Z8makeTimeR12tmElements_t+0x74>
    442c:	c9 01       	movw	r24, r18
    442e:	60 e9       	ldi	r22, 0x90	; 144
    4430:	71 e0       	ldi	r23, 0x01	; 1
    4432:	0e 94 c3 3d 	call	0x7b86	; 0x7b86 <__divmodhi4>
    4436:	89 2b       	or	r24, r25
    4438:	41 f4       	brne	.+16     	; 0x444a <_Z8makeTimeR12tmElements_t+0x84>
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    443a:	80 e8       	ldi	r24, 0x80	; 128
    443c:	91 e5       	ldi	r25, 0x51	; 81
    443e:	a1 e0       	ldi	r26, 0x01	; 1
    4440:	b0 e0       	ldi	r27, 0x00	; 0
    4442:	a8 0e       	add	r10, r24
    4444:	b9 1e       	adc	r11, r25
    4446:	ca 1e       	adc	r12, r26
    4448:	db 1e       	adc	r13, r27
    444a:	2f 5f       	subi	r18, 0xFF	; 255
    444c:	3f 4f       	sbci	r19, 0xFF	; 255
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    444e:	2e 17       	cp	r18, r30
    4450:	3f 07       	cpc	r19, r31
    4452:	01 f7       	brne	.-64     	; 0x4414 <_Z8makeTimeR12tmElements_t+0x4e>
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    4454:	d4 01       	movw	r26, r8
    4456:	15 96       	adiw	r26, 0x05	; 5
    4458:	8c 91       	ld	r24, X
    445a:	48 2e       	mov	r4, r24
    445c:	55 24       	eor	r5, r5
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    445e:	c9 01       	movw	r24, r18
    4460:	64 e6       	ldi	r22, 0x64	; 100
    4462:	70 e0       	ldi	r23, 0x00	; 0
    4464:	0e 94 c3 3d 	call	0x7b86	; 0x7b86 <__divmodhi4>
    4468:	7c 01       	movw	r14, r24
    446a:	c9 01       	movw	r24, r18
    446c:	60 e9       	ldi	r22, 0x90	; 144
    446e:	71 e0       	ldi	r23, 0x01	; 1
    4470:	0e 94 c3 3d 	call	0x7b86	; 0x7b86 <__divmodhi4>
    4474:	8c 01       	movw	r16, r24
    4476:	c1 e0       	ldi	r28, 0x01	; 1
    4478:	d0 e0       	ldi	r29, 0x00	; 0
    447a:	93 e0       	ldi	r25, 0x03	; 3
    447c:	69 2e       	mov	r6, r25
    447e:	71 2c       	mov	r7, r1
    4480:	62 22       	and	r6, r18
    4482:	73 22       	and	r7, r19
    4484:	27 c0       	rjmp	.+78     	; 0x44d4 <_Z8makeTimeR12tmElements_t+0x10e>
    4486:	c2 30       	cpi	r28, 0x02	; 2
    4488:	d1 05       	cpc	r29, r1
    448a:	91 f4       	brne	.+36     	; 0x44b0 <_Z8makeTimeR12tmElements_t+0xea>
    448c:	61 14       	cp	r6, r1
    448e:	71 04       	cpc	r7, r1
    4490:	79 f4       	brne	.+30     	; 0x44b0 <_Z8makeTimeR12tmElements_t+0xea>
    4492:	e1 14       	cp	r14, r1
    4494:	f1 04       	cpc	r15, r1
    4496:	19 f4       	brne	.+6      	; 0x449e <_Z8makeTimeR12tmElements_t+0xd8>
    4498:	01 15       	cp	r16, r1
    449a:	11 05       	cpc	r17, r1
    449c:	49 f4       	brne	.+18     	; 0x44b0 <_Z8makeTimeR12tmElements_t+0xea>
      seconds += SECS_PER_DAY * 29;
    449e:	80 e8       	ldi	r24, 0x80	; 128
    44a0:	9b e3       	ldi	r25, 0x3B	; 59
    44a2:	a6 e2       	ldi	r26, 0x26	; 38
    44a4:	b0 e0       	ldi	r27, 0x00	; 0
    44a6:	a8 0e       	add	r10, r24
    44a8:	b9 1e       	adc	r11, r25
    44aa:	ca 1e       	adc	r12, r26
    44ac:	db 1e       	adc	r13, r27
    44ae:	11 c0       	rjmp	.+34     	; 0x44d2 <_Z8makeTimeR12tmElements_t+0x10c>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    44b0:	fe 01       	movw	r30, r28
    44b2:	e1 5f       	subi	r30, 0xF1	; 241
    44b4:	fe 4f       	sbci	r31, 0xFE	; 254
    44b6:	60 81       	ld	r22, Z
    44b8:	70 e0       	ldi	r23, 0x00	; 0
    44ba:	80 e0       	ldi	r24, 0x00	; 0
    44bc:	90 e0       	ldi	r25, 0x00	; 0
    44be:	20 e8       	ldi	r18, 0x80	; 128
    44c0:	31 e5       	ldi	r19, 0x51	; 81
    44c2:	41 e0       	ldi	r20, 0x01	; 1
    44c4:	50 e0       	ldi	r21, 0x00	; 0
    44c6:	0e 94 90 3d 	call	0x7b20	; 0x7b20 <__mulsi3>
    44ca:	a6 0e       	add	r10, r22
    44cc:	b7 1e       	adc	r11, r23
    44ce:	c8 1e       	adc	r12, r24
    44d0:	d9 1e       	adc	r13, r25
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    44d2:	21 96       	adiw	r28, 0x01	; 1
    44d4:	c4 15       	cp	r28, r4
    44d6:	d5 05       	cpc	r29, r5
    44d8:	b4 f2       	brlt	.-84     	; 0x4486 <_Z8makeTimeR12tmElements_t+0xc0>
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    }
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
    44da:	d4 01       	movw	r26, r8
    44dc:	12 96       	adiw	r26, 0x02	; 2
    44de:	6c 91       	ld	r22, X
    44e0:	70 e0       	ldi	r23, 0x00	; 0
    44e2:	80 e0       	ldi	r24, 0x00	; 0
    44e4:	90 e0       	ldi	r25, 0x00	; 0
    44e6:	20 e1       	ldi	r18, 0x10	; 16
    44e8:	3e e0       	ldi	r19, 0x0E	; 14
    44ea:	40 e0       	ldi	r20, 0x00	; 0
    44ec:	50 e0       	ldi	r21, 0x00	; 0
    44ee:	0e 94 90 3d 	call	0x7b20	; 0x7b20 <__mulsi3>
    44f2:	7b 01       	movw	r14, r22
    44f4:	8c 01       	movw	r16, r24
    44f6:	f4 01       	movw	r30, r8
    44f8:	61 81       	ldd	r22, Z+1	; 0x01
    44fa:	70 e0       	ldi	r23, 0x00	; 0
    44fc:	80 e0       	ldi	r24, 0x00	; 0
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	2c e3       	ldi	r18, 0x3C	; 60
    4502:	30 e0       	ldi	r19, 0x00	; 0
    4504:	40 e0       	ldi	r20, 0x00	; 0
    4506:	50 e0       	ldi	r21, 0x00	; 0
    4508:	0e 94 90 3d 	call	0x7b20	; 0x7b20 <__mulsi3>
    450c:	e6 0e       	add	r14, r22
    450e:	f7 1e       	adc	r15, r23
    4510:	08 1f       	adc	r16, r24
    4512:	19 1f       	adc	r17, r25
  seconds+= tm.Hour * SECS_PER_HOUR;
    4514:	d4 01       	movw	r26, r8
    4516:	8c 91       	ld	r24, X
    4518:	e8 0e       	add	r14, r24
    451a:	f1 1c       	adc	r15, r1
    451c:	01 1d       	adc	r16, r1
    451e:	11 1d       	adc	r17, r1
  seconds+= tm.Minute * SECS_PER_MIN;
    4520:	14 96       	adiw	r26, 0x04	; 4
    4522:	6c 91       	ld	r22, X
    4524:	70 e0       	ldi	r23, 0x00	; 0
    4526:	61 50       	subi	r22, 0x01	; 1
    4528:	70 40       	sbci	r23, 0x00	; 0
    452a:	88 27       	eor	r24, r24
    452c:	77 fd       	sbrc	r23, 7
    452e:	80 95       	com	r24
    4530:	98 2f       	mov	r25, r24
    4532:	20 e8       	ldi	r18, 0x80	; 128
    4534:	31 e5       	ldi	r19, 0x51	; 81
    4536:	41 e0       	ldi	r20, 0x01	; 1
    4538:	50 e0       	ldi	r21, 0x00	; 0
    453a:	0e 94 90 3d 	call	0x7b20	; 0x7b20 <__mulsi3>
    453e:	e6 0e       	add	r14, r22
    4540:	f7 1e       	adc	r15, r23
    4542:	08 1f       	adc	r16, r24
    4544:	19 1f       	adc	r17, r25
    4546:	ea 0c       	add	r14, r10
    4548:	fb 1c       	adc	r15, r11
    454a:	0c 1d       	adc	r16, r12
    454c:	1d 1d       	adc	r17, r13
  seconds+= tm.Second;
  return (time_t)seconds; 
}
    454e:	b7 01       	movw	r22, r14
    4550:	c8 01       	movw	r24, r16
    4552:	df 91       	pop	r29
    4554:	cf 91       	pop	r28
    4556:	1f 91       	pop	r17
    4558:	0f 91       	pop	r16
    455a:	ff 90       	pop	r15
    455c:	ef 90       	pop	r14
    455e:	df 90       	pop	r13
    4560:	cf 90       	pop	r12
    4562:	bf 90       	pop	r11
    4564:	af 90       	pop	r10
    4566:	9f 90       	pop	r9
    4568:	8f 90       	pop	r8
    456a:	7f 90       	pop	r7
    456c:	6f 90       	pop	r6
    456e:	5f 90       	pop	r5
    4570:	4f 90       	pop	r4
    4572:	08 95       	ret

00004574 <_Z7setTimem>:
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    4574:	60 93 09 02 	sts	0x0209, r22
    4578:	70 93 0a 02 	sts	0x020A, r23
    457c:	80 93 0b 02 	sts	0x020B, r24
    4580:	90 93 0c 02 	sts	0x020C, r25
  nextSyncTime = (uint32_t)t + syncInterval;
    4584:	20 91 06 01 	lds	r18, 0x0106
    4588:	30 91 07 01 	lds	r19, 0x0107
    458c:	40 91 08 01 	lds	r20, 0x0108
    4590:	50 91 09 01 	lds	r21, 0x0109
    4594:	26 0f       	add	r18, r22
    4596:	37 1f       	adc	r19, r23
    4598:	48 1f       	adc	r20, r24
    459a:	59 1f       	adc	r21, r25
    459c:	20 93 0d 02 	sts	0x020D, r18
    45a0:	30 93 0e 02 	sts	0x020E, r19
    45a4:	40 93 0f 02 	sts	0x020F, r20
    45a8:	50 93 10 02 	sts	0x0210, r21
  Status = timeSet;
    45ac:	82 e0       	ldi	r24, 0x02	; 2
    45ae:	90 e0       	ldi	r25, 0x00	; 0
    45b0:	90 93 12 02 	sts	0x0212, r25
    45b4:	80 93 11 02 	sts	0x0211, r24
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    45b8:	0e 94 11 32 	call	0x6422	; 0x6422 <millis>
    45bc:	60 93 1a 02 	sts	0x021A, r22
    45c0:	70 93 1b 02 	sts	0x021B, r23
    45c4:	80 93 1c 02 	sts	0x021C, r24
    45c8:	90 93 1d 02 	sts	0x021D, r25
} 
    45cc:	08 95       	ret

000045ce <_Z3nowv>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    45ce:	ef 92       	push	r14
    45d0:	ff 92       	push	r15
    45d2:	0f 93       	push	r16
    45d4:	1f 93       	push	r17
    45d6:	1c c0       	rjmp	.+56     	; 0x4610 <_Z3nowv+0x42>
  while (millis() - prevMillis >= 1000){      
    sysTime++;
    45d8:	2f 5f       	subi	r18, 0xFF	; 255
    45da:	3f 4f       	sbci	r19, 0xFF	; 255
    45dc:	4f 4f       	sbci	r20, 0xFF	; 255
    45de:	5f 4f       	sbci	r21, 0xFF	; 255
    45e0:	20 93 09 02 	sts	0x0209, r18
    45e4:	30 93 0a 02 	sts	0x020A, r19
    45e8:	40 93 0b 02 	sts	0x020B, r20
    45ec:	50 93 0c 02 	sts	0x020C, r21
    prevMillis += 1000;	
    45f0:	88 ee       	ldi	r24, 0xE8	; 232
    45f2:	93 e0       	ldi	r25, 0x03	; 3
    45f4:	a0 e0       	ldi	r26, 0x00	; 0
    45f6:	b0 e0       	ldi	r27, 0x00	; 0
    45f8:	e8 0e       	add	r14, r24
    45fa:	f9 1e       	adc	r15, r25
    45fc:	0a 1f       	adc	r16, r26
    45fe:	1b 1f       	adc	r17, r27
    4600:	e0 92 1a 02 	sts	0x021A, r14
    4604:	f0 92 1b 02 	sts	0x021B, r15
    4608:	00 93 1c 02 	sts	0x021C, r16
    460c:	10 93 1d 02 	sts	0x021D, r17
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
  while (millis() - prevMillis >= 1000){      
    4610:	0e 94 11 32 	call	0x6422	; 0x6422 <millis>
    4614:	e0 90 1a 02 	lds	r14, 0x021A
    4618:	f0 90 1b 02 	lds	r15, 0x021B
    461c:	00 91 1c 02 	lds	r16, 0x021C
    4620:	10 91 1d 02 	lds	r17, 0x021D
    4624:	6e 19       	sub	r22, r14
    4626:	7f 09       	sbc	r23, r15
    4628:	80 0b       	sbc	r24, r16
    462a:	91 0b       	sbc	r25, r17
    462c:	20 91 09 02 	lds	r18, 0x0209
    4630:	30 91 0a 02 	lds	r19, 0x020A
    4634:	40 91 0b 02 	lds	r20, 0x020B
    4638:	50 91 0c 02 	lds	r21, 0x020C
    463c:	68 5e       	subi	r22, 0xE8	; 232
    463e:	73 40       	sbci	r23, 0x03	; 3
    4640:	80 40       	sbci	r24, 0x00	; 0
    4642:	90 40       	sbci	r25, 0x00	; 0
    4644:	48 f6       	brcc	.-110    	; 0x45d8 <_Z3nowv+0xa>
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    4646:	80 91 0d 02 	lds	r24, 0x020D
    464a:	90 91 0e 02 	lds	r25, 0x020E
    464e:	a0 91 0f 02 	lds	r26, 0x020F
    4652:	b0 91 10 02 	lds	r27, 0x0210
    4656:	28 17       	cp	r18, r24
    4658:	39 07       	cpc	r19, r25
    465a:	4a 07       	cpc	r20, r26
    465c:	5b 07       	cpc	r21, r27
    465e:	c8 f1       	brcs	.+114    	; 0x46d2 <_Z3nowv+0x104>
    if (getTimePtr != 0) {
    4660:	e0 91 07 02 	lds	r30, 0x0207
    4664:	f0 91 08 02 	lds	r31, 0x0208
    4668:	30 97       	sbiw	r30, 0x00	; 0
    466a:	99 f1       	breq	.+102    	; 0x46d2 <_Z3nowv+0x104>
      time_t t = getTimePtr();
    466c:	09 95       	icall
      if (t != 0) {
    466e:	61 15       	cp	r22, r1
    4670:	71 05       	cpc	r23, r1
    4672:	81 05       	cpc	r24, r1
    4674:	91 05       	cpc	r25, r1
    4676:	19 f0       	breq	.+6      	; 0x467e <_Z3nowv+0xb0>
        setTime(t);
    4678:	0e 94 ba 22 	call	0x4574	; 0x4574 <_Z7setTimem>
    467c:	2a c0       	rjmp	.+84     	; 0x46d2 <_Z3nowv+0x104>
      } else {
        nextSyncTime = sysTime + syncInterval;
    467e:	80 91 06 01 	lds	r24, 0x0106
    4682:	90 91 07 01 	lds	r25, 0x0107
    4686:	a0 91 08 01 	lds	r26, 0x0108
    468a:	b0 91 09 01 	lds	r27, 0x0109
    468e:	20 91 09 02 	lds	r18, 0x0209
    4692:	30 91 0a 02 	lds	r19, 0x020A
    4696:	40 91 0b 02 	lds	r20, 0x020B
    469a:	50 91 0c 02 	lds	r21, 0x020C
    469e:	82 0f       	add	r24, r18
    46a0:	93 1f       	adc	r25, r19
    46a2:	a4 1f       	adc	r26, r20
    46a4:	b5 1f       	adc	r27, r21
    46a6:	80 93 0d 02 	sts	0x020D, r24
    46aa:	90 93 0e 02 	sts	0x020E, r25
    46ae:	a0 93 0f 02 	sts	0x020F, r26
    46b2:	b0 93 10 02 	sts	0x0210, r27
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    46b6:	20 e0       	ldi	r18, 0x00	; 0
    46b8:	30 e0       	ldi	r19, 0x00	; 0
    46ba:	80 91 11 02 	lds	r24, 0x0211
    46be:	90 91 12 02 	lds	r25, 0x0212
    46c2:	89 2b       	or	r24, r25
    46c4:	11 f0       	breq	.+4      	; 0x46ca <_Z3nowv+0xfc>
    46c6:	21 e0       	ldi	r18, 0x01	; 1
    46c8:	30 e0       	ldi	r19, 0x00	; 0
    46ca:	30 93 12 02 	sts	0x0212, r19
    46ce:	20 93 11 02 	sts	0x0211, r18
    46d2:	60 91 09 02 	lds	r22, 0x0209
    46d6:	70 91 0a 02 	lds	r23, 0x020A
      }
    }
  }  
  return (time_t)sysTime;
}
    46da:	80 91 0b 02 	lds	r24, 0x020B
    46de:	90 91 0c 02 	lds	r25, 0x020C
    46e2:	1f 91       	pop	r17
    46e4:	0f 91       	pop	r16
    46e6:	ff 90       	pop	r15
    46e8:	ef 90       	pop	r14
    46ea:	08 95       	ret

000046ec <_Z15setSyncProviderPFmvE>:
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    46ec:	90 93 08 02 	sts	0x0208, r25
    46f0:	80 93 07 02 	sts	0x0207, r24
  nextSyncTime = sysTime;
    46f4:	80 91 09 02 	lds	r24, 0x0209
    46f8:	90 91 0a 02 	lds	r25, 0x020A
    46fc:	a0 91 0b 02 	lds	r26, 0x020B
    4700:	b0 91 0c 02 	lds	r27, 0x020C
    4704:	80 93 0d 02 	sts	0x020D, r24
    4708:	90 93 0e 02 	sts	0x020E, r25
    470c:	a0 93 0f 02 	sts	0x020F, r26
    4710:	b0 93 10 02 	sts	0x0210, r27
  now(); // this will sync the clock
    4714:	0e 94 e7 22 	call	0x45ce	; 0x45ce <_Z3nowv>
}
    4718:	08 95       	ret

0000471a <_Z10timeStatusv>:
  sysTime += adjustment;
}

// indicates if time has been set and recently synchronized
timeStatus_t timeStatus() {
  now(); // required to actually update the status
    471a:	0e 94 e7 22 	call	0x45ce	; 0x45ce <_Z3nowv>
  return Status;
}
    471e:	80 91 11 02 	lds	r24, 0x0211
    4722:	90 91 12 02 	lds	r25, 0x0212
    4726:	08 95       	ret

00004728 <_Z4yearv>:
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    4728:	0e 94 e7 22 	call	0x45ce	; 0x45ce <_Z3nowv>
    472c:	0e 94 da 21 	call	0x43b4	; 0x43b4 <_Z4yearm>
}
    4730:	08 95       	ret

00004732 <_Z4hourv>:
    cacheTime = t; 
  }
}

int hour() { // the hour now 
  return hour(now()); 
    4732:	0e 94 e7 22 	call	0x45ce	; 0x45ce <_Z3nowv>
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
    4736:	0e 94 b4 21 	call	0x4368	; 0x4368 <_Z12refreshCachem>
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    473a:	80 91 15 02 	lds	r24, 0x0215
    473e:	90 e0       	ldi	r25, 0x00	; 0
    4740:	08 95       	ret

00004742 <_ZN15TimeAlarmsClassC1Ev>:
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    4742:	cf 93       	push	r28
    4744:	df 93       	push	r29
    4746:	dc 01       	movw	r26, r24
    4748:	fc 01       	movw	r30, r24
    474a:	20 e0       	ldi	r18, 0x00	; 0
    474c:	30 e0       	ldi	r19, 0x00	; 0
//**************************************************************
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
    474e:	82 85       	ldd	r24, Z+10	; 0x0a
  Mode.alarmType = dtNotAllocated;
    4750:	80 7c       	andi	r24, 0xC0	; 192
    4752:	82 87       	std	Z+10, r24	; 0x0a
  value = nextTrigger = 0;
    4754:	16 82       	std	Z+6, r1	; 0x06
    4756:	17 82       	std	Z+7, r1	; 0x07
    4758:	10 86       	std	Z+8, r1	; 0x08
    475a:	11 86       	std	Z+9, r1	; 0x09
    475c:	12 82       	std	Z+2, r1	; 0x02
    475e:	13 82       	std	Z+3, r1	; 0x03
    4760:	14 82       	std	Z+4, r1	; 0x04
    4762:	15 82       	std	Z+5, r1	; 0x05
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set 
    4764:	11 82       	std	Z+1, r1	; 0x01
    4766:	10 82       	st	Z, r1
    4768:	25 5f       	subi	r18, 0xF5	; 245
    476a:	3f 4f       	sbci	r19, 0xFF	; 255
    476c:	3b 96       	adiw	r30, 0x0b	; 11
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    476e:	22 34       	cpi	r18, 0x42	; 66
    4770:	31 05       	cpc	r19, r1
    4772:	69 f7       	brne	.-38     	; 0x474e <_ZN15TimeAlarmsClassC1Ev+0xc>
{
  isServicing = false;
    4774:	ae 5b       	subi	r26, 0xBE	; 190
    4776:	bf 4f       	sbci	r27, 0xFF	; 255
    4778:	1c 92       	st	X, r1
    477a:	a2 54       	subi	r26, 0x42	; 66
    477c:	b0 40       	sbci	r27, 0x00	; 0
    477e:	ed 01       	movw	r28, r26
    4780:	20 e0       	ldi	r18, 0x00	; 0
    4782:	30 e0       	ldi	r19, 0x00	; 0
     }
     
     // returns true if this id is allocated
     bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
     {
        return( ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated );
    4784:	4b e0       	ldi	r20, 0x0B	; 11
    4786:	50 e0       	ldi	r21, 0x00	; 0
    4788:	24 9f       	mul	r18, r20
    478a:	f0 01       	movw	r30, r0
    478c:	25 9f       	mul	r18, r21
    478e:	f0 0d       	add	r31, r0
    4790:	34 9f       	mul	r19, r20
    4792:	f0 0d       	add	r31, r0
    4794:	11 24       	eor	r1, r1
    4796:	ea 0f       	add	r30, r26
    4798:	fb 1f       	adc	r31, r27
    479a:	92 85       	ldd	r25, Z+10	; 0x0a
    479c:	89 2f       	mov	r24, r25
    479e:	8f 70       	andi	r24, 0x0F	; 15
    47a0:	61 f0       	breq	.+24     	; 0x47ba <_ZN15TimeAlarmsClassC1Ev+0x78>
    void TimeAlarmsClass::free(AlarmID_t ID)
    {
      if(isAllocated(ID))
      {
        Alarm[ID].Mode.isEnabled = false;
    	Alarm[ID].Mode.alarmType = dtNotAllocated;
    47a2:	90 7e       	andi	r25, 0xE0	; 224
    47a4:	92 87       	std	Z+10, r25	; 0x0a
        Alarm[ID].onTickHandler = 0;
    47a6:	19 82       	std	Y+1, r1	; 0x01
    47a8:	18 82       	st	Y, r1
    	Alarm[ID].value = 0;
    47aa:	1a 82       	std	Y+2, r1	; 0x02
    47ac:	1b 82       	std	Y+3, r1	; 0x03
    47ae:	1c 82       	std	Y+4, r1	; 0x04
    47b0:	1d 82       	std	Y+5, r1	; 0x05
    	Alarm[ID].nextTrigger = 0;   	
    47b2:	1e 82       	std	Y+6, r1	; 0x06
    47b4:	1f 82       	std	Y+7, r1	; 0x07
    47b6:	18 86       	std	Y+8, r1	; 0x08
    47b8:	19 86       	std	Y+9, r1	; 0x09
    47ba:	2f 5f       	subi	r18, 0xFF	; 255
    47bc:	3f 4f       	sbci	r19, 0xFF	; 255
    47be:	2b 96       	adiw	r28, 0x0b	; 11
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
  for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
    47c0:	26 30       	cpi	r18, 0x06	; 6
    47c2:	31 05       	cpc	r19, r1
    47c4:	09 f7       	brne	.-62     	; 0x4788 <_ZN15TimeAlarmsClassC1Ev+0x46>
     free(id);   // ensure  all Alarms are cleared and available for allocation  
}
    47c6:	df 91       	pop	r29
    47c8:	cf 91       	pop	r28
    47ca:	08 95       	ret

000047cc <_GLOBAL__I__ZN10AlarmClassC2Ev>:
      }
      return dtINVALID_ALARM_ID; // no IDs available or time is invalid
    }
    
    // make one instance for the user to use
    TimeAlarmsClass Alarm = TimeAlarmsClass() ;
    47cc:	82 e2       	ldi	r24, 0x22	; 34
    47ce:	92 e0       	ldi	r25, 0x02	; 2
    47d0:	0e 94 a1 23 	call	0x4742	; 0x4742 <_ZN15TimeAlarmsClassC1Ev>
    47d4:	08 95       	ret

000047d6 <_ZN10AlarmClass17updateNextTriggerEv>:

//**************************************************************
//* Private Methods

 
void AlarmClass::updateNextTrigger()
    47d6:	2f 92       	push	r2
    47d8:	3f 92       	push	r3
    47da:	4f 92       	push	r4
    47dc:	5f 92       	push	r5
    47de:	6f 92       	push	r6
    47e0:	7f 92       	push	r7
    47e2:	8f 92       	push	r8
    47e4:	9f 92       	push	r9
    47e6:	af 92       	push	r10
    47e8:	bf 92       	push	r11
    47ea:	cf 92       	push	r12
    47ec:	df 92       	push	r13
    47ee:	ef 92       	push	r14
    47f0:	ff 92       	push	r15
    47f2:	0f 93       	push	r16
    47f4:	1f 93       	push	r17
    47f6:	df 93       	push	r29
    47f8:	cf 93       	push	r28
    47fa:	00 d0       	rcall	.+0      	; 0x47fc <_ZN10AlarmClass17updateNextTriggerEv+0x26>
    47fc:	00 d0       	rcall	.+0      	; 0x47fe <_ZN10AlarmClass17updateNextTriggerEv+0x28>
    47fe:	00 d0       	rcall	.+0      	; 0x4800 <_ZN10AlarmClass17updateNextTriggerEv+0x2a>
    4800:	cd b7       	in	r28, 0x3d	; 61
    4802:	de b7       	in	r29, 0x3e	; 62
    4804:	9e 83       	std	Y+6, r25	; 0x06
    4806:	8d 83       	std	Y+5, r24	; 0x05
{  
  if( (value != 0) && Mode.isEnabled )
    4808:	fc 01       	movw	r30, r24
    480a:	82 81       	ldd	r24, Z+2	; 0x02
    480c:	93 81       	ldd	r25, Z+3	; 0x03
    480e:	a4 81       	ldd	r26, Z+4	; 0x04
    4810:	b5 81       	ldd	r27, Z+5	; 0x05
    4812:	00 97       	sbiw	r24, 0x00	; 0
    4814:	a1 05       	cpc	r26, r1
    4816:	b1 05       	cpc	r27, r1
    4818:	09 f4       	brne	.+2      	; 0x481c <_ZN10AlarmClass17updateNextTriggerEv+0x46>
    481a:	5b c1       	rjmp	.+694    	; 0x4ad2 <_ZN10AlarmClass17updateNextTriggerEv+0x2fc>
    481c:	82 85       	ldd	r24, Z+10	; 0x0a
    481e:	84 ff       	sbrs	r24, 4
    4820:	58 c1       	rjmp	.+688    	; 0x4ad2 <_ZN10AlarmClass17updateNextTriggerEv+0x2fc>
  {
    time_t time = now();
    4822:	0e 94 e7 22 	call	0x45ce	; 0x45ce <_Z3nowv>
    4826:	69 83       	std	Y+1, r22	; 0x01
    4828:	7a 83       	std	Y+2, r23	; 0x02
    482a:	8b 83       	std	Y+3, r24	; 0x03
    482c:	9c 83       	std	Y+4, r25	; 0x04
    if( dtIsAlarm(Mode.alarmType) && nextTrigger <= time )   // update alarm if next trigger is not yet in the future
    482e:	ad 81       	ldd	r26, Y+5	; 0x05
    4830:	be 81       	ldd	r27, Y+6	; 0x06
    4832:	1a 96       	adiw	r26, 0x0a	; 10
    4834:	3c 91       	ld	r19, X
    4836:	1a 97       	sbiw	r26, 0x0a	; 10
    4838:	23 2f       	mov	r18, r19
    483a:	2f 70       	andi	r18, 0x0F	; 15
    483c:	82 2f       	mov	r24, r18
    483e:	82 5f       	subi	r24, 0xF2	; 242
    4840:	8f 70       	andi	r24, 0x0F	; 15
    4842:	83 30       	cpi	r24, 0x03	; 3
    4844:	08 f0       	brcs	.+2      	; 0x4848 <_ZN10AlarmClass17updateNextTriggerEv+0x72>
    4846:	28 c1       	rjmp	.+592    	; 0x4a98 <_ZN10AlarmClass17updateNextTriggerEv+0x2c2>
    4848:	16 96       	adiw	r26, 0x06	; 6
    484a:	8d 91       	ld	r24, X+
    484c:	9d 91       	ld	r25, X+
    484e:	0d 90       	ld	r0, X+
    4850:	bc 91       	ld	r27, X
    4852:	a0 2d       	mov	r26, r0
    4854:	49 81       	ldd	r20, Y+1	; 0x01
    4856:	5a 81       	ldd	r21, Y+2	; 0x02
    4858:	6b 81       	ldd	r22, Y+3	; 0x03
    485a:	7c 81       	ldd	r23, Y+4	; 0x04
    485c:	48 17       	cp	r20, r24
    485e:	59 07       	cpc	r21, r25
    4860:	6a 07       	cpc	r22, r26
    4862:	7b 07       	cpc	r23, r27
    4864:	08 f4       	brcc	.+2      	; 0x4868 <_ZN10AlarmClass17updateNextTriggerEv+0x92>
    4866:	18 c1       	rjmp	.+560    	; 0x4a98 <_ZN10AlarmClass17updateNextTriggerEv+0x2c2>
    {      
      if(Mode.alarmType == dtExplicitAlarm ) // is the value a specific date and time in the future
    4868:	22 30       	cpi	r18, 0x02	; 2
    486a:	59 f4       	brne	.+22     	; 0x4882 <_ZN10AlarmClass17updateNextTriggerEv+0xac>
      {
        nextTrigger = value;  // yes, trigger on this value   
    486c:	ed 81       	ldd	r30, Y+5	; 0x05
    486e:	fe 81       	ldd	r31, Y+6	; 0x06
    4870:	82 81       	ldd	r24, Z+2	; 0x02
    4872:	93 81       	ldd	r25, Z+3	; 0x03
    4874:	a4 81       	ldd	r26, Z+4	; 0x04
    4876:	b5 81       	ldd	r27, Z+5	; 0x05
    4878:	86 83       	std	Z+6, r24	; 0x06
    487a:	97 83       	std	Z+7, r25	; 0x07
    487c:	a0 87       	std	Z+8, r26	; 0x08
    487e:	b1 87       	std	Z+9, r27	; 0x09
    4880:	0b c1       	rjmp	.+534    	; 0x4a98 <_ZN10AlarmClass17updateNextTriggerEv+0x2c2>
      }
      else if(Mode.alarmType == dtDailyAlarm)  //if this is a daily alarm
    4882:	23 30       	cpi	r18, 0x03	; 3
    4884:	09 f0       	breq	.+2      	; 0x4888 <_ZN10AlarmClass17updateNextTriggerEv+0xb2>
    4886:	61 c0       	rjmp	.+194    	; 0x494a <_ZN10AlarmClass17updateNextTriggerEv+0x174>
      {
        if( value + previousMidnight(now()) <= time)
    4888:	ad 81       	ldd	r26, Y+5	; 0x05
    488a:	be 81       	ldd	r27, Y+6	; 0x06
    488c:	12 96       	adiw	r26, 0x02	; 2
    488e:	ed 90       	ld	r14, X+
    4890:	fd 90       	ld	r15, X+
    4892:	0d 91       	ld	r16, X+
    4894:	1c 91       	ld	r17, X
    4896:	15 97       	sbiw	r26, 0x05	; 5
    4898:	0e 94 e7 22 	call	0x45ce	; 0x45ce <_Z3nowv>
    489c:	20 e8       	ldi	r18, 0x80	; 128
    489e:	31 e5       	ldi	r19, 0x51	; 81
    48a0:	41 e0       	ldi	r20, 0x01	; 1
    48a2:	50 e0       	ldi	r21, 0x00	; 0
    48a4:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <__udivmodsi4>
    48a8:	ca 01       	movw	r24, r20
    48aa:	b9 01       	movw	r22, r18
    48ac:	20 e8       	ldi	r18, 0x80	; 128
    48ae:	31 e5       	ldi	r19, 0x51	; 81
    48b0:	41 e0       	ldi	r20, 0x01	; 1
    48b2:	50 e0       	ldi	r21, 0x00	; 0
    48b4:	0e 94 90 3d 	call	0x7b20	; 0x7b20 <__mulsi3>
    48b8:	e6 0e       	add	r14, r22
    48ba:	f7 1e       	adc	r15, r23
    48bc:	08 1f       	adc	r16, r24
    48be:	19 1f       	adc	r17, r25
    48c0:	ed 81       	ldd	r30, Y+5	; 0x05
    48c2:	fe 81       	ldd	r31, Y+6	; 0x06
    48c4:	a2 80       	ldd	r10, Z+2	; 0x02
    48c6:	b3 80       	ldd	r11, Z+3	; 0x03
    48c8:	c4 80       	ldd	r12, Z+4	; 0x04
    48ca:	d5 80       	ldd	r13, Z+5	; 0x05
    48cc:	29 81       	ldd	r18, Y+1	; 0x01
    48ce:	3a 81       	ldd	r19, Y+2	; 0x02
    48d0:	4b 81       	ldd	r20, Y+3	; 0x03
    48d2:	5c 81       	ldd	r21, Y+4	; 0x04
    48d4:	2e 15       	cp	r18, r14
    48d6:	3f 05       	cpc	r19, r15
    48d8:	40 07       	cpc	r20, r16
    48da:	51 07       	cpc	r21, r17
    48dc:	c8 f0       	brcs	.+50     	; 0x4910 <_ZN10AlarmClass17updateNextTriggerEv+0x13a>
        {
          nextTrigger = value + nextMidnight(time); // if time has passed then set for tomorrow
    48de:	ca 01       	movw	r24, r20
    48e0:	b9 01       	movw	r22, r18
    48e2:	20 e8       	ldi	r18, 0x80	; 128
    48e4:	31 e5       	ldi	r19, 0x51	; 81
    48e6:	41 e0       	ldi	r20, 0x01	; 1
    48e8:	50 e0       	ldi	r21, 0x00	; 0
    48ea:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <__udivmodsi4>
    48ee:	2f 5f       	subi	r18, 0xFF	; 255
    48f0:	3f 4f       	sbci	r19, 0xFF	; 255
    48f2:	4f 4f       	sbci	r20, 0xFF	; 255
    48f4:	5f 4f       	sbci	r21, 0xFF	; 255
    48f6:	ca 01       	movw	r24, r20
    48f8:	b9 01       	movw	r22, r18
    48fa:	20 e8       	ldi	r18, 0x80	; 128
    48fc:	31 e5       	ldi	r19, 0x51	; 81
    48fe:	41 e0       	ldi	r20, 0x01	; 1
    4900:	50 e0       	ldi	r21, 0x00	; 0
    4902:	0e 94 90 3d 	call	0x7b20	; 0x7b20 <__mulsi3>
    4906:	a6 0e       	add	r10, r22
    4908:	b7 1e       	adc	r11, r23
    490a:	c8 1e       	adc	r12, r24
    490c:	d9 1e       	adc	r13, r25
    490e:	ac c0       	rjmp	.+344    	; 0x4a68 <_ZN10AlarmClass17updateNextTriggerEv+0x292>
        }
        else
        {
          nextTrigger = value + previousMidnight(time);  // set the date to today and add the time given in value   
    4910:	69 81       	ldd	r22, Y+1	; 0x01
    4912:	7a 81       	ldd	r23, Y+2	; 0x02
    4914:	8b 81       	ldd	r24, Y+3	; 0x03
    4916:	9c 81       	ldd	r25, Y+4	; 0x04
    4918:	20 e8       	ldi	r18, 0x80	; 128
    491a:	31 e5       	ldi	r19, 0x51	; 81
    491c:	41 e0       	ldi	r20, 0x01	; 1
    491e:	50 e0       	ldi	r21, 0x00	; 0
    4920:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <__udivmodsi4>
    4924:	ca 01       	movw	r24, r20
    4926:	b9 01       	movw	r22, r18
    4928:	20 e8       	ldi	r18, 0x80	; 128
    492a:	31 e5       	ldi	r19, 0x51	; 81
    492c:	41 e0       	ldi	r20, 0x01	; 1
    492e:	50 e0       	ldi	r21, 0x00	; 0
    4930:	0e 94 90 3d 	call	0x7b20	; 0x7b20 <__mulsi3>
    4934:	a6 0e       	add	r10, r22
    4936:	b7 1e       	adc	r11, r23
    4938:	c8 1e       	adc	r12, r24
    493a:	d9 1e       	adc	r13, r25
    493c:	ed 81       	ldd	r30, Y+5	; 0x05
    493e:	fe 81       	ldd	r31, Y+6	; 0x06
    4940:	a6 82       	std	Z+6, r10	; 0x06
    4942:	b7 82       	std	Z+7, r11	; 0x07
    4944:	c0 86       	std	Z+8, r12	; 0x08
    4946:	d1 86       	std	Z+9, r13	; 0x09
    4948:	a7 c0       	rjmp	.+334    	; 0x4a98 <_ZN10AlarmClass17updateNextTriggerEv+0x2c2>
        }
      }
      else if(Mode.alarmType == dtWeeklyAlarm)  // if this is a weekly alarm
    494a:	24 30       	cpi	r18, 0x04	; 4
    494c:	09 f0       	breq	.+2      	; 0x4950 <_ZN10AlarmClass17updateNextTriggerEv+0x17a>
    494e:	a0 c0       	rjmp	.+320    	; 0x4a90 <_ZN10AlarmClass17updateNextTriggerEv+0x2ba>
      {
        if( (value + previousSunday(now())) <= time)
    4950:	ad 81       	ldd	r26, Y+5	; 0x05
    4952:	be 81       	ldd	r27, Y+6	; 0x06
    4954:	12 96       	adiw	r26, 0x02	; 2
    4956:	6d 90       	ld	r6, X+
    4958:	7d 90       	ld	r7, X+
    495a:	8d 90       	ld	r8, X+
    495c:	9c 90       	ld	r9, X
    495e:	15 97       	sbiw	r26, 0x05	; 5
    4960:	0e 94 e7 22 	call	0x45ce	; 0x45ce <_Z3nowv>
    4964:	7b 01       	movw	r14, r22
    4966:	8c 01       	movw	r16, r24
    4968:	0e 94 e7 22 	call	0x45ce	; 0x45ce <_Z3nowv>
    496c:	5b 01       	movw	r10, r22
    496e:	6c 01       	movw	r12, r24
    4970:	0e 94 e7 22 	call	0x45ce	; 0x45ce <_Z3nowv>
    4974:	1b 01       	movw	r2, r22
    4976:	2c 01       	movw	r4, r24
    4978:	e6 0c       	add	r14, r6
    497a:	f7 1c       	adc	r15, r7
    497c:	08 1d       	adc	r16, r8
    497e:	19 1d       	adc	r17, r9
    4980:	c6 01       	movw	r24, r12
    4982:	b5 01       	movw	r22, r10
    4984:	20 e8       	ldi	r18, 0x80	; 128
    4986:	31 e5       	ldi	r19, 0x51	; 81
    4988:	41 e0       	ldi	r20, 0x01	; 1
    498a:	50 e0       	ldi	r21, 0x00	; 0
    498c:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <__udivmodsi4>
    4990:	e6 1a       	sub	r14, r22
    4992:	f7 0a       	sbc	r15, r23
    4994:	08 0b       	sbc	r16, r24
    4996:	19 0b       	sbc	r17, r25
    4998:	c2 01       	movw	r24, r4
    499a:	b1 01       	movw	r22, r2
    499c:	20 e8       	ldi	r18, 0x80	; 128
    499e:	31 e5       	ldi	r19, 0x51	; 81
    49a0:	41 e0       	ldi	r20, 0x01	; 1
    49a2:	50 e0       	ldi	r21, 0x00	; 0
    49a4:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <__udivmodsi4>
    49a8:	2c 5f       	subi	r18, 0xFC	; 252
    49aa:	3f 4f       	sbci	r19, 0xFF	; 255
    49ac:	4f 4f       	sbci	r20, 0xFF	; 255
    49ae:	5f 4f       	sbci	r21, 0xFF	; 255
    49b0:	ca 01       	movw	r24, r20
    49b2:	b9 01       	movw	r22, r18
    49b4:	27 e0       	ldi	r18, 0x07	; 7
    49b6:	30 e0       	ldi	r19, 0x00	; 0
    49b8:	40 e0       	ldi	r20, 0x00	; 0
    49ba:	50 e0       	ldi	r21, 0x00	; 0
    49bc:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <__udivmodsi4>
    49c0:	20 e8       	ldi	r18, 0x80	; 128
    49c2:	31 e5       	ldi	r19, 0x51	; 81
    49c4:	41 e0       	ldi	r20, 0x01	; 1
    49c6:	50 e0       	ldi	r21, 0x00	; 0
    49c8:	0e 94 90 3d 	call	0x7b20	; 0x7b20 <__mulsi3>
    49cc:	e6 1a       	sub	r14, r22
    49ce:	f7 0a       	sbc	r15, r23
    49d0:	08 0b       	sbc	r16, r24
    49d2:	19 0b       	sbc	r17, r25
    49d4:	ed 81       	ldd	r30, Y+5	; 0x05
    49d6:	fe 81       	ldd	r31, Y+6	; 0x06
    49d8:	a2 80       	ldd	r10, Z+2	; 0x02
    49da:	b3 80       	ldd	r11, Z+3	; 0x03
    49dc:	c4 80       	ldd	r12, Z+4	; 0x04
    49de:	d5 80       	ldd	r13, Z+5	; 0x05
    49e0:	29 81       	ldd	r18, Y+1	; 0x01
    49e2:	3a 81       	ldd	r19, Y+2	; 0x02
    49e4:	4b 81       	ldd	r20, Y+3	; 0x03
    49e6:	5c 81       	ldd	r21, Y+4	; 0x04
    49e8:	2e 15       	cp	r18, r14
    49ea:	3f 05       	cpc	r19, r15
    49ec:	40 07       	cpc	r20, r16
    49ee:	51 07       	cpc	r21, r17
    49f0:	08 f4       	brcc	.+2      	; 0x49f4 <_ZN10AlarmClass17updateNextTriggerEv+0x21e>
    49f2:	43 c0       	rjmp	.+134    	; 0x4a7a <_ZN10AlarmClass17updateNextTriggerEv+0x2a4>
        {
          nextTrigger = value + nextSunday(time); // if day has passed then set for the next week.
    49f4:	40 e8       	ldi	r20, 0x80	; 128
    49f6:	5a e3       	ldi	r21, 0x3A	; 58
    49f8:	69 e0       	ldi	r22, 0x09	; 9
    49fa:	70 e0       	ldi	r23, 0x00	; 0
    49fc:	a4 0e       	add	r10, r20
    49fe:	b5 1e       	adc	r11, r21
    4a00:	c6 1e       	adc	r12, r22
    4a02:	d7 1e       	adc	r13, r23
    4a04:	69 81       	ldd	r22, Y+1	; 0x01
    4a06:	7a 81       	ldd	r23, Y+2	; 0x02
    4a08:	8b 81       	ldd	r24, Y+3	; 0x03
    4a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    4a0c:	a6 0e       	add	r10, r22
    4a0e:	b7 1e       	adc	r11, r23
    4a10:	c8 1e       	adc	r12, r24
    4a12:	d9 1e       	adc	r13, r25
    4a14:	20 e8       	ldi	r18, 0x80	; 128
    4a16:	31 e5       	ldi	r19, 0x51	; 81
    4a18:	41 e0       	ldi	r20, 0x01	; 1
    4a1a:	50 e0       	ldi	r21, 0x00	; 0
    4a1c:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <__udivmodsi4>
    4a20:	a6 1a       	sub	r10, r22
    4a22:	b7 0a       	sbc	r11, r23
    4a24:	c8 0a       	sbc	r12, r24
    4a26:	d9 0a       	sbc	r13, r25
    4a28:	69 81       	ldd	r22, Y+1	; 0x01
    4a2a:	7a 81       	ldd	r23, Y+2	; 0x02
    4a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    4a30:	20 e8       	ldi	r18, 0x80	; 128
    4a32:	31 e5       	ldi	r19, 0x51	; 81
    4a34:	41 e0       	ldi	r20, 0x01	; 1
    4a36:	50 e0       	ldi	r21, 0x00	; 0
    4a38:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <__udivmodsi4>
    4a3c:	2c 5f       	subi	r18, 0xFC	; 252
    4a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    4a40:	4f 4f       	sbci	r20, 0xFF	; 255
    4a42:	5f 4f       	sbci	r21, 0xFF	; 255
    4a44:	ca 01       	movw	r24, r20
    4a46:	b9 01       	movw	r22, r18
    4a48:	27 e0       	ldi	r18, 0x07	; 7
    4a4a:	30 e0       	ldi	r19, 0x00	; 0
    4a4c:	40 e0       	ldi	r20, 0x00	; 0
    4a4e:	50 e0       	ldi	r21, 0x00	; 0
    4a50:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <__udivmodsi4>
    4a54:	20 e8       	ldi	r18, 0x80	; 128
    4a56:	31 e5       	ldi	r19, 0x51	; 81
    4a58:	41 e0       	ldi	r20, 0x01	; 1
    4a5a:	50 e0       	ldi	r21, 0x00	; 0
    4a5c:	0e 94 90 3d 	call	0x7b20	; 0x7b20 <__mulsi3>
    4a60:	a6 1a       	sub	r10, r22
    4a62:	b7 0a       	sbc	r11, r23
    4a64:	c8 0a       	sbc	r12, r24
    4a66:	d9 0a       	sbc	r13, r25
    4a68:	ad 81       	ldd	r26, Y+5	; 0x05
    4a6a:	be 81       	ldd	r27, Y+6	; 0x06
    4a6c:	16 96       	adiw	r26, 0x06	; 6
    4a6e:	ad 92       	st	X+, r10
    4a70:	bd 92       	st	X+, r11
    4a72:	cd 92       	st	X+, r12
    4a74:	dc 92       	st	X, r13
    4a76:	19 97       	sbiw	r26, 0x09	; 9
    4a78:	0f c0       	rjmp	.+30     	; 0x4a98 <_ZN10AlarmClass17updateNextTriggerEv+0x2c2>
        }
        else
        {
          nextTrigger = value + previousSunday(time);  // set the date to this week today and add the time given in value 
    4a7a:	29 81       	ldd	r18, Y+1	; 0x01
    4a7c:	3a 81       	ldd	r19, Y+2	; 0x02
    4a7e:	4b 81       	ldd	r20, Y+3	; 0x03
    4a80:	5c 81       	ldd	r21, Y+4	; 0x04
    4a82:	a2 0e       	add	r10, r18
    4a84:	b3 1e       	adc	r11, r19
    4a86:	c4 1e       	adc	r12, r20
    4a88:	d5 1e       	adc	r13, r21
    4a8a:	ca 01       	movw	r24, r20
    4a8c:	b9 01       	movw	r22, r18
    4a8e:	c2 cf       	rjmp	.-124    	; 0x4a14 <_ZN10AlarmClass17updateNextTriggerEv+0x23e>
        } 
      }
      else  // its not a recognized alarm type - this should not happen 
      {
        Mode.isEnabled = 0;  // Disable the alarm
    4a90:	3f 7e       	andi	r19, 0xEF	; 239
    4a92:	ed 81       	ldd	r30, Y+5	; 0x05
    4a94:	fe 81       	ldd	r31, Y+6	; 0x06
    4a96:	32 87       	std	Z+10, r19	; 0x0a
      }	  
    }
    if( Mode.alarmType == dtTimer)
    4a98:	ad 81       	ldd	r26, Y+5	; 0x05
    4a9a:	be 81       	ldd	r27, Y+6	; 0x06
    4a9c:	1a 96       	adiw	r26, 0x0a	; 10
    4a9e:	8c 91       	ld	r24, X
    4aa0:	1a 97       	sbiw	r26, 0x0a	; 10
    4aa2:	8f 70       	andi	r24, 0x0F	; 15
    4aa4:	81 30       	cpi	r24, 0x01	; 1
    4aa6:	e9 f4       	brne	.+58     	; 0x4ae2 <_ZN10AlarmClass17updateNextTriggerEv+0x30c>
    {
      // its a timer
      nextTrigger = time + value;  // add the value to previous time (this ensures delay always at least Value seconds)
    4aa8:	12 96       	adiw	r26, 0x02	; 2
    4aaa:	8d 91       	ld	r24, X+
    4aac:	9d 91       	ld	r25, X+
    4aae:	0d 90       	ld	r0, X+
    4ab0:	bc 91       	ld	r27, X
    4ab2:	a0 2d       	mov	r26, r0
    4ab4:	29 81       	ldd	r18, Y+1	; 0x01
    4ab6:	3a 81       	ldd	r19, Y+2	; 0x02
    4ab8:	4b 81       	ldd	r20, Y+3	; 0x03
    4aba:	5c 81       	ldd	r21, Y+4	; 0x04
    4abc:	82 0f       	add	r24, r18
    4abe:	93 1f       	adc	r25, r19
    4ac0:	a4 1f       	adc	r26, r20
    4ac2:	b5 1f       	adc	r27, r21
    4ac4:	ed 81       	ldd	r30, Y+5	; 0x05
    4ac6:	fe 81       	ldd	r31, Y+6	; 0x06
    4ac8:	86 83       	std	Z+6, r24	; 0x06
    4aca:	97 83       	std	Z+7, r25	; 0x07
    4acc:	a0 87       	std	Z+8, r26	; 0x08
    4ace:	b1 87       	std	Z+9, r27	; 0x09
    4ad0:	08 c0       	rjmp	.+16     	; 0x4ae2 <_ZN10AlarmClass17updateNextTriggerEv+0x30c>
    }
  }
  else
  {
    Mode.isEnabled = 0;  // Disable if the value is 0
    4ad2:	ad 81       	ldd	r26, Y+5	; 0x05
    4ad4:	be 81       	ldd	r27, Y+6	; 0x06
    4ad6:	1a 96       	adiw	r26, 0x0a	; 10
    4ad8:	8c 91       	ld	r24, X
    4ada:	1a 97       	sbiw	r26, 0x0a	; 10
    4adc:	8f 7e       	andi	r24, 0xEF	; 239
    4ade:	1a 96       	adiw	r26, 0x0a	; 10
    4ae0:	8c 93       	st	X, r24
  }
}
    4ae2:	26 96       	adiw	r28, 0x06	; 6
    4ae4:	0f b6       	in	r0, 0x3f	; 63
    4ae6:	f8 94       	cli
    4ae8:	de bf       	out	0x3e, r29	; 62
    4aea:	0f be       	out	0x3f, r0	; 63
    4aec:	cd bf       	out	0x3d, r28	; 61
    4aee:	cf 91       	pop	r28
    4af0:	df 91       	pop	r29
    4af2:	1f 91       	pop	r17
    4af4:	0f 91       	pop	r16
    4af6:	ff 90       	pop	r15
    4af8:	ef 90       	pop	r14
    4afa:	df 90       	pop	r13
    4afc:	cf 90       	pop	r12
    4afe:	bf 90       	pop	r11
    4b00:	af 90       	pop	r10
    4b02:	9f 90       	pop	r9
    4b04:	8f 90       	pop	r8
    4b06:	7f 90       	pop	r7
    4b08:	6f 90       	pop	r6
    4b0a:	5f 90       	pop	r5
    4b0c:	4f 90       	pop	r4
    4b0e:	3f 90       	pop	r3
    4b10:	2f 90       	pop	r2
    4b12:	08 95       	ret

00004b14 <_ZN15TimeAlarmsClass6enableEh>:
    
    AlarmID_t TimeAlarmsClass::timerRepeat(const int H,  const int M,  const int S, OnTick_t onTickHandler){ // trigger after the given number of seconds continuously
         return create( AlarmHMS(H,M,S), onTickHandler, IS_REPEAT, dtTimer);
    }
    
    void TimeAlarmsClass::enable(AlarmID_t ID)
    4b14:	ac 01       	movw	r20, r24
     }
     
     // returns true if this id is allocated
     bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
     {
        return( ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated );
    4b16:	66 30       	cpi	r22, 0x06	; 6
    4b18:	98 f5       	brcc	.+102    	; 0x4b80 <_ZN15TimeAlarmsClass6enableEh+0x6c>
    4b1a:	70 e0       	ldi	r23, 0x00	; 0
    4b1c:	8b e0       	ldi	r24, 0x0B	; 11
    4b1e:	90 e0       	ldi	r25, 0x00	; 0
    4b20:	68 9f       	mul	r22, r24
    4b22:	f0 01       	movw	r30, r0
    4b24:	69 9f       	mul	r22, r25
    4b26:	f0 0d       	add	r31, r0
    4b28:	78 9f       	mul	r23, r24
    4b2a:	f0 0d       	add	r31, r0
    4b2c:	11 24       	eor	r1, r1
    4b2e:	e4 0f       	add	r30, r20
    4b30:	f5 1f       	adc	r31, r21
    4b32:	82 85       	ldd	r24, Z+10	; 0x0a
    4b34:	8f 70       	andi	r24, 0x0F	; 15
    4b36:	21 f1       	breq	.+72     	; 0x4b80 <_ZN15TimeAlarmsClass6enableEh+0x6c>
    }
    
    void TimeAlarmsClass::enable(AlarmID_t ID)
    {
      if(isAllocated(ID)) {
        Alarm[ID].Mode.isEnabled = (Alarm[ID].value != 0) && (Alarm[ID].onTickHandler != 0) ;  // only enable if value is non zero and a tick handler has been set
    4b38:	82 81       	ldd	r24, Z+2	; 0x02
    4b3a:	93 81       	ldd	r25, Z+3	; 0x03
    4b3c:	a4 81       	ldd	r26, Z+4	; 0x04
    4b3e:	b5 81       	ldd	r27, Z+5	; 0x05
    4b40:	00 97       	sbiw	r24, 0x00	; 0
    4b42:	a1 05       	cpc	r26, r1
    4b44:	b1 05       	cpc	r27, r1
    4b46:	11 f4       	brne	.+4      	; 0x4b4c <_ZN15TimeAlarmsClass6enableEh+0x38>
    4b48:	20 e0       	ldi	r18, 0x00	; 0
    4b4a:	06 c0       	rjmp	.+12     	; 0x4b58 <_ZN15TimeAlarmsClass6enableEh+0x44>
    4b4c:	20 e0       	ldi	r18, 0x00	; 0
    4b4e:	80 81       	ld	r24, Z
    4b50:	91 81       	ldd	r25, Z+1	; 0x01
    4b52:	89 2b       	or	r24, r25
    4b54:	09 f0       	breq	.+2      	; 0x4b58 <_ZN15TimeAlarmsClass6enableEh+0x44>
    4b56:	21 e0       	ldi	r18, 0x01	; 1
    4b58:	8b e0       	ldi	r24, 0x0B	; 11
    4b5a:	90 e0       	ldi	r25, 0x00	; 0
    4b5c:	68 9f       	mul	r22, r24
    4b5e:	f0 01       	movw	r30, r0
    4b60:	69 9f       	mul	r22, r25
    4b62:	f0 0d       	add	r31, r0
    4b64:	78 9f       	mul	r23, r24
    4b66:	f0 0d       	add	r31, r0
    4b68:	11 24       	eor	r1, r1
    4b6a:	e4 0f       	add	r30, r20
    4b6c:	f5 1f       	adc	r31, r21
    4b6e:	22 95       	swap	r18
    4b70:	20 7f       	andi	r18, 0xF0	; 240
    4b72:	82 85       	ldd	r24, Z+10	; 0x0a
    4b74:	8f 7e       	andi	r24, 0xEF	; 239
    4b76:	82 2b       	or	r24, r18
    4b78:	82 87       	std	Z+10, r24	; 0x0a
        Alarm[ID].updateNextTrigger(); // trigger is updated whenever  this is called, even if already enabled	 
    4b7a:	cf 01       	movw	r24, r30
    4b7c:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <_ZN10AlarmClass17updateNextTriggerEv>
    4b80:	08 95       	ret

00004b82 <_ZN15TimeAlarmsClass13serviceAlarmsEv>:
    }
    
    //***********************************************************
    //* Private Methods
    
    void TimeAlarmsClass::serviceAlarms()
    4b82:	cf 92       	push	r12
    4b84:	df 92       	push	r13
    4b86:	ef 92       	push	r14
    4b88:	ff 92       	push	r15
    4b8a:	0f 93       	push	r16
    4b8c:	1f 93       	push	r17
    4b8e:	cf 93       	push	r28
    4b90:	df 93       	push	r29
    4b92:	ec 01       	movw	r28, r24
    {
      if(! isServicing)
    4b94:	fc 01       	movw	r30, r24
    4b96:	ee 5b       	subi	r30, 0xBE	; 190
    4b98:	ff 4f       	sbci	r31, 0xFF	; 255
    4b9a:	80 81       	ld	r24, Z
    4b9c:	88 23       	and	r24, r24
    4b9e:	09 f0       	breq	.+2      	; 0x4ba2 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0x20>
    4ba0:	5b c0       	rjmp	.+182    	; 0x4c58 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xd6>
      {
        isServicing = true;
    4ba2:	81 e0       	ldi	r24, 0x01	; 1
    4ba4:	80 83       	st	Z, r24
        for( servicedAlarmId = 0; servicedAlarmId < dtNBR_ALARMS; servicedAlarmId++)
    4ba6:	fe 01       	movw	r30, r28
    4ba8:	ed 5b       	subi	r30, 0xBD	; 189
    4baa:	ff 4f       	sbci	r31, 0xFF	; 255
    4bac:	10 82       	st	Z, r1
    4bae:	8f 01       	movw	r16, r30
        {
          if( Alarm[servicedAlarmId].Mode.isEnabled && (now() >= Alarm[servicedAlarmId].nextTrigger)  )
    4bb0:	9b e0       	ldi	r25, 0x0B	; 11
    4bb2:	c9 2e       	mov	r12, r25
    4bb4:	d1 2c       	mov	r13, r1
    4bb6:	48 c0       	rjmp	.+144    	; 0x4c48 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xc6>
    4bb8:	90 e0       	ldi	r25, 0x00	; 0
    4bba:	8c 9d       	mul	r24, r12
    4bbc:	f0 01       	movw	r30, r0
    4bbe:	8d 9d       	mul	r24, r13
    4bc0:	f0 0d       	add	r31, r0
    4bc2:	9c 9d       	mul	r25, r12
    4bc4:	f0 0d       	add	r31, r0
    4bc6:	11 24       	eor	r1, r1
    4bc8:	ec 0f       	add	r30, r28
    4bca:	fd 1f       	adc	r31, r29
    4bcc:	82 85       	ldd	r24, Z+10	; 0x0a
    4bce:	84 ff       	sbrs	r24, 4
    4bd0:	37 c0       	rjmp	.+110    	; 0x4c40 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xbe>
    4bd2:	0e 94 e7 22 	call	0x45ce	; 0x45ce <_Z3nowv>
    4bd6:	f8 01       	movw	r30, r16
    4bd8:	a0 81       	ld	r26, Z
    4bda:	2a 2f       	mov	r18, r26
    4bdc:	30 e0       	ldi	r19, 0x00	; 0
    4bde:	2c 9d       	mul	r18, r12
    4be0:	f0 01       	movw	r30, r0
    4be2:	2d 9d       	mul	r18, r13
    4be4:	f0 0d       	add	r31, r0
    4be6:	3c 9d       	mul	r19, r12
    4be8:	f0 0d       	add	r31, r0
    4bea:	11 24       	eor	r1, r1
    4bec:	ec 0f       	add	r30, r28
    4bee:	fd 1f       	adc	r31, r29
    4bf0:	26 81       	ldd	r18, Z+6	; 0x06
    4bf2:	37 81       	ldd	r19, Z+7	; 0x07
    4bf4:	40 85       	ldd	r20, Z+8	; 0x08
    4bf6:	51 85       	ldd	r21, Z+9	; 0x09
    4bf8:	62 17       	cp	r22, r18
    4bfa:	73 07       	cpc	r23, r19
    4bfc:	84 07       	cpc	r24, r20
    4bfe:	95 07       	cpc	r25, r21
    4c00:	f8 f0       	brcs	.+62     	; 0x4c40 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xbe>
          {
            OnTick_t TickHandler = Alarm[servicedAlarmId].onTickHandler;
    4c02:	e0 80       	ld	r14, Z
    4c04:	f1 80       	ldd	r15, Z+1	; 0x01
            if(Alarm[servicedAlarmId].Mode.isOneShot)
    4c06:	92 85       	ldd	r25, Z+10	; 0x0a
    4c08:	95 ff       	sbrs	r25, 5
    4c0a:	12 c0       	rjmp	.+36     	; 0x4c30 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xae>
     }
     
     // returns true if this id is allocated
     bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
     {
        return( ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated );
    4c0c:	a6 30       	cpi	r26, 0x06	; 6
    4c0e:	98 f4       	brcc	.+38     	; 0x4c36 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xb4>
    4c10:	89 2f       	mov	r24, r25
    4c12:	8f 70       	andi	r24, 0x0F	; 15
    4c14:	81 f0       	breq	.+32     	; 0x4c36 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xb4>
    void TimeAlarmsClass::free(AlarmID_t ID)
    {
      if(isAllocated(ID))
      {
        Alarm[ID].Mode.isEnabled = false;
    	Alarm[ID].Mode.alarmType = dtNotAllocated;
    4c16:	90 7e       	andi	r25, 0xE0	; 224
    4c18:	92 87       	std	Z+10, r25	; 0x0a
        Alarm[ID].onTickHandler = 0;
    4c1a:	11 82       	std	Z+1, r1	; 0x01
    4c1c:	10 82       	st	Z, r1
    	Alarm[ID].value = 0;
    4c1e:	12 82       	std	Z+2, r1	; 0x02
    4c20:	13 82       	std	Z+3, r1	; 0x03
    4c22:	14 82       	std	Z+4, r1	; 0x04
    4c24:	15 82       	std	Z+5, r1	; 0x05
    	Alarm[ID].nextTrigger = 0;   	
    4c26:	16 82       	std	Z+6, r1	; 0x06
    4c28:	17 82       	std	Z+7, r1	; 0x07
    4c2a:	10 86       	std	Z+8, r1	; 0x08
    4c2c:	11 86       	std	Z+9, r1	; 0x09
    4c2e:	03 c0       	rjmp	.+6      	; 0x4c36 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xb4>
          {
            OnTick_t TickHandler = Alarm[servicedAlarmId].onTickHandler;
            if(Alarm[servicedAlarmId].Mode.isOneShot)
               free(servicedAlarmId);  // free the ID if mode is OnShot		
            else   
               Alarm[servicedAlarmId].updateNextTrigger();
    4c30:	cf 01       	movw	r24, r30
    4c32:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <_ZN10AlarmClass17updateNextTriggerEv>
            if( TickHandler != NULL) {        
    4c36:	e1 14       	cp	r14, r1
    4c38:	f1 04       	cpc	r15, r1
    4c3a:	11 f0       	breq	.+4      	; 0x4c40 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xbe>
              (*TickHandler)();     // call the handler  
    4c3c:	f7 01       	movw	r30, r14
    4c3e:	09 95       	icall
    void TimeAlarmsClass::serviceAlarms()
    {
      if(! isServicing)
      {
        isServicing = true;
        for( servicedAlarmId = 0; servicedAlarmId < dtNBR_ALARMS; servicedAlarmId++)
    4c40:	f8 01       	movw	r30, r16
    4c42:	80 81       	ld	r24, Z
    4c44:	8f 5f       	subi	r24, 0xFF	; 255
    4c46:	80 83       	st	Z, r24
    4c48:	f8 01       	movw	r30, r16
    4c4a:	80 81       	ld	r24, Z
    4c4c:	86 30       	cpi	r24, 0x06	; 6
    4c4e:	08 f4       	brcc	.+2      	; 0x4c52 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xd0>
    4c50:	b3 cf       	rjmp	.-154    	; 0x4bb8 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0x36>
            if( TickHandler != NULL) {        
              (*TickHandler)();     // call the handler  
            }
          }
        }
        isServicing = false;
    4c52:	ce 5b       	subi	r28, 0xBE	; 190
    4c54:	df 4f       	sbci	r29, 0xFF	; 255
    4c56:	18 82       	st	Y, r1
      }
    }
    4c58:	df 91       	pop	r29
    4c5a:	cf 91       	pop	r28
    4c5c:	1f 91       	pop	r17
    4c5e:	0f 91       	pop	r16
    4c60:	ff 90       	pop	r15
    4c62:	ef 90       	pop	r14
    4c64:	df 90       	pop	r13
    4c66:	cf 90       	pop	r12
    4c68:	08 95       	ret

00004c6a <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th>:
    	}
        return nextTrigger == 0xffffffff ? 0 : nextTrigger;  	
     }
    
    // attempt to create an alarm and return true if successful
    AlarmID_t TimeAlarmsClass::create( time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType, uint8_t isEnabled) 
    4c6a:	4f 92       	push	r4
    4c6c:	5f 92       	push	r5
    4c6e:	6f 92       	push	r6
    4c70:	7f 92       	push	r7
    4c72:	8f 92       	push	r8
    4c74:	9f 92       	push	r9
    4c76:	af 92       	push	r10
    4c78:	bf 92       	push	r11
    4c7a:	cf 92       	push	r12
    4c7c:	ef 92       	push	r14
    4c7e:	ff 92       	push	r15
    4c80:	0f 93       	push	r16
    4c82:	1f 93       	push	r17
    4c84:	cf 93       	push	r28
    4c86:	df 93       	push	r29
    4c88:	2c 01       	movw	r4, r24
    4c8a:	4a 01       	movw	r8, r20
    4c8c:	5b 01       	movw	r10, r22
    4c8e:	39 01       	movw	r6, r18
    4c90:	e7 01       	movw	r28, r14
    {
      if( ! (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR)) // only create alarm ids if the time is at least Jan 1 1971
    4c92:	c7 01       	movw	r24, r14
    4c94:	02 97       	sbiw	r24, 0x02	; 2
    4c96:	03 97       	sbiw	r24, 0x03	; 3
    4c98:	38 f4       	brcc	.+14     	; 0x4ca8 <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0x3e>
    4c9a:	0e 94 e7 22 	call	0x45ce	; 0x45ce <_Z3nowv>
    4c9e:	60 50       	subi	r22, 0x00	; 0
    4ca0:	72 4e       	sbci	r23, 0xE2	; 226
    4ca2:	8f 4d       	sbci	r24, 0xDF	; 223
    4ca4:	91 40       	sbci	r25, 0x01	; 1
    4ca6:	c0 f1       	brcs	.+112    	; 0x4d18 <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xae>
    4ca8:	60 e0       	ldi	r22, 0x00	; 0
    4caa:	70 e0       	ldi	r23, 0x00	; 0
      {  
    	for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
        {
          if( Alarm[id].Mode.alarmType == dtNotAllocated )
    4cac:	2b e0       	ldi	r18, 0x0B	; 11
    4cae:	30 e0       	ldi	r19, 0x00	; 0
     }
    
    // attempt to create an alarm and return true if successful
    AlarmID_t TimeAlarmsClass::create( time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType, uint8_t isEnabled) 
    {
      if( ! (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR)) // only create alarm ids if the time is at least Jan 1 1971
    4cb0:	16 2f       	mov	r17, r22
      {  
    	for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
        {
          if( Alarm[id].Mode.alarmType == dtNotAllocated )
    4cb2:	62 9f       	mul	r22, r18
    4cb4:	f0 01       	movw	r30, r0
    4cb6:	63 9f       	mul	r22, r19
    4cb8:	f0 0d       	add	r31, r0
    4cba:	72 9f       	mul	r23, r18
    4cbc:	f0 0d       	add	r31, r0
    4cbe:	11 24       	eor	r1, r1
    4cc0:	e4 0d       	add	r30, r4
    4cc2:	f5 1d       	adc	r31, r5
    4cc4:	df 01       	movw	r26, r30
    4cc6:	1a 96       	adiw	r26, 0x0a	; 10
    4cc8:	82 85       	ldd	r24, Z+10	; 0x0a
    4cca:	8f 70       	andi	r24, 0x0F	; 15
    4ccc:	01 f5       	brne	.+64     	; 0x4d0e <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xa4>
    	  {
    	  // here if there is an Alarm id that is not allocated
      	    Alarm[id].onTickHandler = onTickHandler;
    4cce:	71 82       	std	Z+1, r7	; 0x01
    4cd0:	60 82       	st	Z, r6
    	    Alarm[id].Mode.isOneShot = isOneShot;
    4cd2:	01 70       	andi	r16, 0x01	; 1
    4cd4:	02 95       	swap	r16
    4cd6:	00 0f       	add	r16, r16
    4cd8:	00 7e       	andi	r16, 0xE0	; 224
    4cda:	8c 91       	ld	r24, X
    4cdc:	80 7d       	andi	r24, 0xD0	; 208
    	    Alarm[id].Mode.alarmType = alarmType;
    4cde:	9e 01       	movw	r18, r28
    4ce0:	2f 70       	andi	r18, 0x0F	; 15
    4ce2:	80 2b       	or	r24, r16
    4ce4:	82 2b       	or	r24, r18
    4ce6:	8c 93       	st	X, r24
    	    Alarm[id].value = value;
    4ce8:	82 82       	std	Z+2, r8	; 0x02
    4cea:	93 82       	std	Z+3, r9	; 0x03
    4cec:	a4 82       	std	Z+4, r10	; 0x04
    4cee:	b5 82       	std	Z+5, r11	; 0x05
    	    isEnabled ?  enable(id) : disable(id);   
    4cf0:	cc 20       	and	r12, r12
    4cf2:	21 f0       	breq	.+8      	; 0x4cfc <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0x92>
    4cf4:	c2 01       	movw	r24, r4
    4cf6:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <_ZN15TimeAlarmsClass6enableEh>
    4cfa:	0f c0       	rjmp	.+30     	; 0x4d1a <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xb0>
     }
     
     // returns true if this id is allocated
     bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
     {
        return( ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated );
    4cfc:	66 30       	cpi	r22, 0x06	; 6
    4cfe:	68 f4       	brcc	.+26     	; 0x4d1a <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xb0>
    4d00:	9c 91       	ld	r25, X
    4d02:	89 2f       	mov	r24, r25
    4d04:	8f 70       	andi	r24, 0x0F	; 15
    4d06:	49 f0       	breq	.+18     	; 0x4d1a <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xb0>
    }
    
    void TimeAlarmsClass::disable(AlarmID_t ID)
    {
      if(isAllocated(ID))
        Alarm[ID].Mode.isEnabled = false;
    4d08:	9f 7e       	andi	r25, 0xEF	; 239
    4d0a:	9c 93       	st	X, r25
    4d0c:	06 c0       	rjmp	.+12     	; 0x4d1a <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xb0>
    4d0e:	6f 5f       	subi	r22, 0xFF	; 255
    4d10:	7f 4f       	sbci	r23, 0xFF	; 255
    // attempt to create an alarm and return true if successful
    AlarmID_t TimeAlarmsClass::create( time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType, uint8_t isEnabled) 
    {
      if( ! (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR)) // only create alarm ids if the time is at least Jan 1 1971
      {  
    	for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
    4d12:	66 30       	cpi	r22, 0x06	; 6
    4d14:	71 05       	cpc	r23, r1
    4d16:	61 f6       	brne	.-104    	; 0x4cb0 <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0x46>
    4d18:	1f ef       	ldi	r17, 0xFF	; 255
            return id;  // alarm created ok
    	  }  
        }
      }
      return dtINVALID_ALARM_ID; // no IDs available or time is invalid
    }
    4d1a:	81 2f       	mov	r24, r17
    4d1c:	df 91       	pop	r29
    4d1e:	cf 91       	pop	r28
    4d20:	1f 91       	pop	r17
    4d22:	0f 91       	pop	r16
    4d24:	ff 90       	pop	r15
    4d26:	ef 90       	pop	r14
    4d28:	cf 90       	pop	r12
    4d2a:	bf 90       	pop	r11
    4d2c:	af 90       	pop	r10
    4d2e:	9f 90       	pop	r9
    4d30:	8f 90       	pop	r8
    4d32:	7f 90       	pop	r7
    4d34:	6f 90       	pop	r6
    4d36:	5f 90       	pop	r5
    4d38:	4f 90       	pop	r4
    4d3a:	08 95       	ret

00004d3c <_ZN15TimeAlarmsClass11timerRepeatEmPFvvE>:
    
    AlarmID_t TimeAlarmsClass::timerOnce(const int H,  const int M,  const int S, OnTick_t onTickHandler){   // As above with HMS arguments
      return create( AlarmHMS(H,M,S), onTickHandler, IS_ONESHOT, dtTimer );
    }
      
    AlarmID_t TimeAlarmsClass::timerRepeat(time_t value, OnTick_t onTickHandler){ // trigger after the given number of seconds continuously
    4d3c:	cf 92       	push	r12
    4d3e:	ef 92       	push	r14
    4d40:	ff 92       	push	r15
    4d42:	0f 93       	push	r16
         return create( value, onTickHandler, IS_REPEAT, dtTimer);
    4d44:	00 e0       	ldi	r16, 0x00	; 0
    4d46:	f1 e0       	ldi	r31, 0x01	; 1
    4d48:	ef 2e       	mov	r14, r31
    4d4a:	f1 2c       	mov	r15, r1
    4d4c:	cc 24       	eor	r12, r12
    4d4e:	c3 94       	inc	r12
    4d50:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th>
    }
    4d54:	0f 91       	pop	r16
    4d56:	ff 90       	pop	r15
    4d58:	ef 90       	pop	r14
    4d5a:	cf 90       	pop	r12
    4d5c:	08 95       	ret

00004d5e <_ZN15TimeAlarmsClass11alarmRepeatEiiiPFvvE>:
       return create( value, onTickHandler, IS_REPEAT, dtDailyAlarm );
    else
       return dtINVALID_ALARM_ID; // dont't allocate if the time is greater than one day 	  
    }
    
    AlarmID_t TimeAlarmsClass::alarmRepeat(const int H,  const int M,  const int S, OnTick_t onTickHandler){ // as above with HMS arguments
    4d5e:	2f 92       	push	r2
    4d60:	3f 92       	push	r3
    4d62:	4f 92       	push	r4
    4d64:	5f 92       	push	r5
    4d66:	6f 92       	push	r6
    4d68:	7f 92       	push	r7
    4d6a:	8f 92       	push	r8
    4d6c:	9f 92       	push	r9
    4d6e:	af 92       	push	r10
    4d70:	bf 92       	push	r11
    4d72:	cf 92       	push	r12
    4d74:	df 92       	push	r13
    4d76:	ef 92       	push	r14
    4d78:	ff 92       	push	r15
    4d7a:	0f 93       	push	r16
    4d7c:	1f 93       	push	r17
    4d7e:	1c 01       	movw	r2, r24
    4d80:	2b 01       	movw	r4, r22
    4d82:	49 01       	movw	r8, r18
         return create( AlarmHMS(H,M,S), onTickHandler, IS_REPEAT, dtDailyAlarm );
    4d84:	66 27       	eor	r22, r22
    4d86:	57 fd       	sbrc	r21, 7
    4d88:	60 95       	com	r22
    4d8a:	76 2f       	mov	r23, r22
    4d8c:	cb 01       	movw	r24, r22
    4d8e:	ba 01       	movw	r22, r20
    4d90:	2c e3       	ldi	r18, 0x3C	; 60
    4d92:	30 e0       	ldi	r19, 0x00	; 0
    4d94:	40 e0       	ldi	r20, 0x00	; 0
    4d96:	50 e0       	ldi	r21, 0x00	; 0
    4d98:	0e 94 90 3d 	call	0x7b20	; 0x7b20 <__mulsi3>
    4d9c:	6b 01       	movw	r12, r22
    4d9e:	7c 01       	movw	r14, r24
    4da0:	aa 24       	eor	r10, r10
    4da2:	97 fc       	sbrc	r9, 7
    4da4:	a0 94       	com	r10
    4da6:	ba 2c       	mov	r11, r10
    4da8:	c8 0c       	add	r12, r8
    4daa:	d9 1c       	adc	r13, r9
    4dac:	ea 1c       	adc	r14, r10
    4dae:	fb 1c       	adc	r15, r11
    4db0:	66 24       	eor	r6, r6
    4db2:	57 fc       	sbrc	r5, 7
    4db4:	60 94       	com	r6
    4db6:	76 2c       	mov	r7, r6
    4db8:	c3 01       	movw	r24, r6
    4dba:	b2 01       	movw	r22, r4
    4dbc:	20 e1       	ldi	r18, 0x10	; 16
    4dbe:	3e e0       	ldi	r19, 0x0E	; 14
    4dc0:	40 e0       	ldi	r20, 0x00	; 0
    4dc2:	50 e0       	ldi	r21, 0x00	; 0
    4dc4:	0e 94 90 3d 	call	0x7b20	; 0x7b20 <__mulsi3>
    4dc8:	c6 0e       	add	r12, r22
    4dca:	d7 1e       	adc	r13, r23
    4dcc:	e8 1e       	adc	r14, r24
    4dce:	f9 1e       	adc	r15, r25
    4dd0:	c1 01       	movw	r24, r2
    4dd2:	b7 01       	movw	r22, r14
    4dd4:	a6 01       	movw	r20, r12
    4dd6:	98 01       	movw	r18, r16
    4dd8:	00 e0       	ldi	r16, 0x00	; 0
    4dda:	e3 e0       	ldi	r30, 0x03	; 3
    4ddc:	ee 2e       	mov	r14, r30
    4dde:	f1 2c       	mov	r15, r1
    4de0:	cc 24       	eor	r12, r12
    4de2:	c3 94       	inc	r12
    4de4:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th>
    }
    4de8:	1f 91       	pop	r17
    4dea:	0f 91       	pop	r16
    4dec:	ff 90       	pop	r15
    4dee:	ef 90       	pop	r14
    4df0:	df 90       	pop	r13
    4df2:	cf 90       	pop	r12
    4df4:	bf 90       	pop	r11
    4df6:	af 90       	pop	r10
    4df8:	9f 90       	pop	r9
    4dfa:	8f 90       	pop	r8
    4dfc:	7f 90       	pop	r7
    4dfe:	6f 90       	pop	r6
    4e00:	5f 90       	pop	r5
    4e02:	4f 90       	pop	r4
    4e04:	3f 90       	pop	r3
    4e06:	2f 90       	pop	r2
    4e08:	08 95       	ret

00004e0a <_ZN15TimeAlarmsClass5delayEm>:
      else
         return dtINVALID_ALARM_ID; // valid ids only available when servicing a callback
    }
     
    // following functions are not Alarm ID specific.
    void TimeAlarmsClass::delay(unsigned long ms)
    4e0a:	af 92       	push	r10
    4e0c:	bf 92       	push	r11
    4e0e:	cf 92       	push	r12
    4e10:	df 92       	push	r13
    4e12:	ef 92       	push	r14
    4e14:	ff 92       	push	r15
    4e16:	0f 93       	push	r16
    4e18:	1f 93       	push	r17
    4e1a:	cf 93       	push	r28
    4e1c:	df 93       	push	r29
    4e1e:	ec 01       	movw	r28, r24
    4e20:	5a 01       	movw	r10, r20
    4e22:	6b 01       	movw	r12, r22
    {
      unsigned long start = millis();
    4e24:	0e 94 11 32 	call	0x6422	; 0x6422 <millis>
    4e28:	7b 01       	movw	r14, r22
    4e2a:	8c 01       	movw	r16, r24
    4e2c:	03 c0       	rjmp	.+6      	; 0x4e34 <_ZN15TimeAlarmsClass5delayEm+0x2a>
      while( millis() - start  <= ms)
        serviceAlarms();
    4e2e:	ce 01       	movw	r24, r28
    4e30:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <_ZN15TimeAlarmsClass13serviceAlarmsEv>
     
    // following functions are not Alarm ID specific.
    void TimeAlarmsClass::delay(unsigned long ms)
    {
      unsigned long start = millis();
      while( millis() - start  <= ms)
    4e34:	0e 94 11 32 	call	0x6422	; 0x6422 <millis>
    4e38:	6e 19       	sub	r22, r14
    4e3a:	7f 09       	sbc	r23, r15
    4e3c:	80 0b       	sbc	r24, r16
    4e3e:	91 0b       	sbc	r25, r17
    4e40:	a6 16       	cp	r10, r22
    4e42:	b7 06       	cpc	r11, r23
    4e44:	c8 06       	cpc	r12, r24
    4e46:	d9 06       	cpc	r13, r25
    4e48:	90 f7       	brcc	.-28     	; 0x4e2e <_ZN15TimeAlarmsClass5delayEm+0x24>
        serviceAlarms();
    }
    4e4a:	df 91       	pop	r29
    4e4c:	cf 91       	pop	r28
    4e4e:	1f 91       	pop	r17
    4e50:	0f 91       	pop	r16
    4e52:	ff 90       	pop	r15
    4e54:	ef 90       	pop	r14
    4e56:	df 90       	pop	r13
    4e58:	cf 90       	pop	r12
    4e5a:	bf 90       	pop	r11
    4e5c:	af 90       	pop	r10
    4e5e:	08 95       	ret

00004e60 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    4e60:	81 e0       	ldi	r24, 0x01	; 1
    4e62:	80 93 ab 02 	sts	0x02AB, r24
  // set address of targeted slave
  txAddress = address;
    4e66:	60 93 88 02 	sts	0x0288, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    4e6a:	10 92 a9 02 	sts	0x02A9, r1
  txBufferLength = 0;
    4e6e:	10 92 aa 02 	sts	0x02AA, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
    4e72:	08 95       	ret

00004e74 <_ZN7TwoWire9availableEv>:
}

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
    4e74:	20 91 87 02 	lds	r18, 0x0287
    4e78:	30 e0       	ldi	r19, 0x00	; 0
    4e7a:	80 91 86 02 	lds	r24, 0x0286
    4e7e:	28 1b       	sub	r18, r24
    4e80:	31 09       	sbc	r19, r1
{
  return rxBufferLength - rxBufferIndex;
}
    4e82:	c9 01       	movw	r24, r18
    4e84:	08 95       	ret

00004e86 <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    4e86:	40 91 86 02 	lds	r20, 0x0286
    4e8a:	80 91 87 02 	lds	r24, 0x0287
    4e8e:	48 17       	cp	r20, r24
    4e90:	18 f0       	brcs	.+6      	; 0x4e98 <_ZN7TwoWire4readEv+0x12>
    4e92:	2f ef       	ldi	r18, 0xFF	; 255
    4e94:	3f ef       	ldi	r19, 0xFF	; 255
    4e96:	0a c0       	rjmp	.+20     	; 0x4eac <_ZN7TwoWire4readEv+0x26>
    value = rxBuffer[rxBufferIndex];
    4e98:	e4 2f       	mov	r30, r20
    4e9a:	f0 e0       	ldi	r31, 0x00	; 0
    4e9c:	ea 59       	subi	r30, 0x9A	; 154
    4e9e:	fd 4f       	sbci	r31, 0xFD	; 253
    4ea0:	80 81       	ld	r24, Z
    4ea2:	28 2f       	mov	r18, r24
    4ea4:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    4ea6:	4f 5f       	subi	r20, 0xFF	; 255
    4ea8:	40 93 86 02 	sts	0x0286, r20
  }

  return value;
}
    4eac:	c9 01       	movw	r24, r18
    4eae:	08 95       	ret

00004eb0 <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    4eb0:	e0 91 86 02 	lds	r30, 0x0286
    4eb4:	80 91 87 02 	lds	r24, 0x0287
    4eb8:	e8 17       	cp	r30, r24
    4eba:	18 f0       	brcs	.+6      	; 0x4ec2 <_ZN7TwoWire4peekEv+0x12>
    4ebc:	ef ef       	ldi	r30, 0xFF	; 255
    4ebe:	ff ef       	ldi	r31, 0xFF	; 255
    4ec0:	06 c0       	rjmp	.+12     	; 0x4ece <_ZN7TwoWire4peekEv+0x1e>
    value = rxBuffer[rxBufferIndex];
    4ec2:	f0 e0       	ldi	r31, 0x00	; 0
    4ec4:	ea 59       	subi	r30, 0x9A	; 154
    4ec6:	fd 4f       	sbci	r31, 0xFD	; 253
    4ec8:	80 81       	ld	r24, Z
    4eca:	e8 2f       	mov	r30, r24
    4ecc:	f0 e0       	ldi	r31, 0x00	; 0
  }

  return value;
}
    4ece:	cf 01       	movw	r24, r30
    4ed0:	08 95       	ret

00004ed2 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    4ed2:	08 95       	ret

00004ed4 <_GLOBAL__I__ZN7TwoWire8rxBufferE>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    4ed4:	10 92 af 02 	sts	0x02AF, r1
    4ed8:	10 92 ae 02 	sts	0x02AE, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    4edc:	88 ee       	ldi	r24, 0xE8	; 232
    4ede:	93 e0       	ldi	r25, 0x03	; 3
    4ee0:	a0 e0       	ldi	r26, 0x00	; 0
    4ee2:	b0 e0       	ldi	r27, 0x00	; 0
    4ee4:	80 93 b0 02 	sts	0x02B0, r24
    4ee8:	90 93 b1 02 	sts	0x02B1, r25
    4eec:	a0 93 b2 02 	sts	0x02B2, r26
    4ef0:	b0 93 b3 02 	sts	0x02B3, r27
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    4ef4:	80 e2       	ldi	r24, 0x20	; 32
    4ef6:	91 e0       	ldi	r25, 0x01	; 1
    4ef8:	90 93 ad 02 	sts	0x02AD, r25
    4efc:	80 93 ac 02 	sts	0x02AC, r24
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    4f00:	08 95       	ret

00004f02 <_ZN7TwoWire5writeEPKhj>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
    4f02:	cf 92       	push	r12
    4f04:	df 92       	push	r13
    4f06:	ef 92       	push	r14
    4f08:	ff 92       	push	r15
    4f0a:	0f 93       	push	r16
    4f0c:	1f 93       	push	r17
    4f0e:	cf 93       	push	r28
    4f10:	df 93       	push	r29
    4f12:	7c 01       	movw	r14, r24
    4f14:	6b 01       	movw	r12, r22
    4f16:	8a 01       	movw	r16, r20
{
  if(transmitting){
    4f18:	80 91 ab 02 	lds	r24, 0x02AB
    4f1c:	88 23       	and	r24, r24
    4f1e:	a1 f0       	breq	.+40     	; 0x4f48 <_ZN7TwoWire5writeEPKhj+0x46>
    4f20:	c0 e0       	ldi	r28, 0x00	; 0
    4f22:	d0 e0       	ldi	r29, 0x00	; 0
    4f24:	0d c0       	rjmp	.+26     	; 0x4f40 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
      write(data[i]);
    4f26:	d7 01       	movw	r26, r14
    4f28:	ed 91       	ld	r30, X+
    4f2a:	fc 91       	ld	r31, X
    4f2c:	d6 01       	movw	r26, r12
    4f2e:	ac 0f       	add	r26, r28
    4f30:	bd 1f       	adc	r27, r29
    4f32:	01 90       	ld	r0, Z+
    4f34:	f0 81       	ld	r31, Z
    4f36:	e0 2d       	mov	r30, r0
    4f38:	c7 01       	movw	r24, r14
    4f3a:	6c 91       	ld	r22, X
    4f3c:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    4f3e:	21 96       	adiw	r28, 0x01	; 1
    4f40:	c0 17       	cp	r28, r16
    4f42:	d1 07       	cpc	r29, r17
    4f44:	80 f3       	brcs	.-32     	; 0x4f26 <_ZN7TwoWire5writeEPKhj+0x24>
    4f46:	04 c0       	rjmp	.+8      	; 0x4f50 <_ZN7TwoWire5writeEPKhj+0x4e>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    4f48:	cb 01       	movw	r24, r22
    4f4a:	64 2f       	mov	r22, r20
    4f4c:	0e 94 b3 28 	call	0x5166	; 0x5166 <twi_transmit>
  }
  return quantity;
}
    4f50:	c8 01       	movw	r24, r16
    4f52:	df 91       	pop	r29
    4f54:	cf 91       	pop	r28
    4f56:	1f 91       	pop	r17
    4f58:	0f 91       	pop	r16
    4f5a:	ff 90       	pop	r15
    4f5c:	ef 90       	pop	r14
    4f5e:	df 90       	pop	r13
    4f60:	cf 90       	pop	r12
    4f62:	08 95       	ret

00004f64 <_ZN7TwoWire5writeEh>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
    4f64:	df 93       	push	r29
    4f66:	cf 93       	push	r28
    4f68:	0f 92       	push	r0
    4f6a:	cd b7       	in	r28, 0x3d	; 61
    4f6c:	de b7       	in	r29, 0x3e	; 62
    4f6e:	fc 01       	movw	r30, r24
    4f70:	69 83       	std	Y+1, r22	; 0x01
{
  if(transmitting){
    4f72:	80 91 ab 02 	lds	r24, 0x02AB
    4f76:	88 23       	and	r24, r24
    4f78:	c9 f0       	breq	.+50     	; 0x4fac <_ZN7TwoWire5writeEh+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    4f7a:	80 91 aa 02 	lds	r24, 0x02AA
    4f7e:	80 32       	cpi	r24, 0x20	; 32
    4f80:	38 f0       	brcs	.+14     	; 0x4f90 <_ZN7TwoWire5writeEh+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    4f82:	81 e0       	ldi	r24, 0x01	; 1
    4f84:	90 e0       	ldi	r25, 0x00	; 0
    4f86:	93 83       	std	Z+3, r25	; 0x03
    4f88:	82 83       	std	Z+2, r24	; 0x02
    4f8a:	20 e0       	ldi	r18, 0x00	; 0
    4f8c:	30 e0       	ldi	r19, 0x00	; 0
    4f8e:	15 c0       	rjmp	.+42     	; 0x4fba <_ZN7TwoWire5writeEh+0x56>
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    4f90:	80 91 a9 02 	lds	r24, 0x02A9
    4f94:	e8 2f       	mov	r30, r24
    4f96:	f0 e0       	ldi	r31, 0x00	; 0
    4f98:	e7 57       	subi	r30, 0x77	; 119
    4f9a:	fd 4f       	sbci	r31, 0xFD	; 253
    4f9c:	99 81       	ldd	r25, Y+1	; 0x01
    4f9e:	90 83       	st	Z, r25
    ++txBufferIndex;
    4fa0:	8f 5f       	subi	r24, 0xFF	; 255
    4fa2:	80 93 a9 02 	sts	0x02A9, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    4fa6:	80 93 aa 02 	sts	0x02AA, r24
    4faa:	05 c0       	rjmp	.+10     	; 0x4fb6 <_ZN7TwoWire5writeEh+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    4fac:	ce 01       	movw	r24, r28
    4fae:	01 96       	adiw	r24, 0x01	; 1
    4fb0:	61 e0       	ldi	r22, 0x01	; 1
    4fb2:	0e 94 b3 28 	call	0x5166	; 0x5166 <twi_transmit>
    4fb6:	21 e0       	ldi	r18, 0x01	; 1
    4fb8:	30 e0       	ldi	r19, 0x00	; 0
  }
  return 1;
}
    4fba:	c9 01       	movw	r24, r18
    4fbc:	0f 90       	pop	r0
    4fbe:	cf 91       	pop	r28
    4fc0:	df 91       	pop	r29
    4fc2:	08 95       	ret

00004fc4 <_ZN7TwoWire15endTransmissionEh>:
//	the bus tenure has been properly ended with a STOP. It
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
    4fc4:	0f 93       	push	r16
    4fc6:	06 2f       	mov	r16, r22
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    4fc8:	80 91 88 02 	lds	r24, 0x0288
    4fcc:	69 e8       	ldi	r22, 0x89	; 137
    4fce:	72 e0       	ldi	r23, 0x02	; 2
    4fd0:	40 91 aa 02 	lds	r20, 0x02AA
    4fd4:	21 e0       	ldi	r18, 0x01	; 1
    4fd6:	0e 94 5e 28 	call	0x50bc	; 0x50bc <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    4fda:	10 92 a9 02 	sts	0x02A9, r1
  txBufferLength = 0;
    4fde:	10 92 aa 02 	sts	0x02AA, r1
  // indicate that we are done transmitting
  transmitting = 0;
    4fe2:	10 92 ab 02 	sts	0x02AB, r1
  return ret;
}
    4fe6:	0f 91       	pop	r16
    4fe8:	08 95       	ret

00004fea <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    4fea:	61 e0       	ldi	r22, 0x01	; 1
    4fec:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <_ZN7TwoWire15endTransmissionEh>
}
    4ff0:	08 95       	ret

00004ff2 <_ZN7TwoWire11requestFromEhhh>:
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    4ff2:	41 32       	cpi	r20, 0x21	; 33
    4ff4:	08 f0       	brcs	.+2      	; 0x4ff8 <_ZN7TwoWire11requestFromEhhh+0x6>
    4ff6:	40 e2       	ldi	r20, 0x20	; 32
    4ff8:	86 2f       	mov	r24, r22
    4ffa:	66 e6       	ldi	r22, 0x66	; 102
    4ffc:	72 e0       	ldi	r23, 0x02	; 2
    4ffe:	0e 94 15 28 	call	0x502a	; 0x502a <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    5002:	10 92 86 02 	sts	0x0286, r1
  rxBufferLength = read;
    5006:	80 93 87 02 	sts	0x0287, r24

  return read;
}
    500a:	08 95       	ret

0000500c <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    500c:	21 e0       	ldi	r18, 0x01	; 1
    500e:	0e 94 f9 27 	call	0x4ff2	; 0x4ff2 <_ZN7TwoWire11requestFromEhhh>
}
    5012:	08 95       	ret

00005014 <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    5014:	10 92 86 02 	sts	0x0286, r1
  rxBufferLength = 0;
    5018:	10 92 87 02 	sts	0x0287, r1

  txBufferIndex = 0;
    501c:	10 92 a9 02 	sts	0x02A9, r1
  txBufferLength = 0;
    5020:	10 92 aa 02 	sts	0x02AA, r1

  twi_init();
    5024:	0e 94 5f 2a 	call	0x54be	; 0x54be <twi_init>
}
    5028:	08 95       	ret

0000502a <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    502a:	38 2f       	mov	r19, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    502c:	41 32       	cpi	r20, 0x21	; 33
    502e:	10 f0       	brcs	.+4      	; 0x5034 <twi_readFrom+0xa>
    5030:	40 e0       	ldi	r20, 0x00	; 0
    5032:	42 c0       	rjmp	.+132    	; 0x50b8 <twi_readFrom+0x8e>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    5034:	80 91 b8 02 	lds	r24, 0x02B8
    5038:	88 23       	and	r24, r24
    503a:	e1 f7       	brne	.-8      	; 0x5034 <twi_readFrom+0xa>
    continue;
  }
  twi_state = TWI_MRX;
    503c:	91 e0       	ldi	r25, 0x01	; 1
    503e:	90 93 b8 02 	sts	0x02B8, r25
  twi_sendStop = sendStop;
    5042:	20 93 ba 02 	sts	0x02BA, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    5046:	8f ef       	ldi	r24, 0xFF	; 255
    5048:	80 93 25 03 	sts	0x0325, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    504c:	10 92 e0 02 	sts	0x02E0, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    5050:	41 50       	subi	r20, 0x01	; 1
    5052:	40 93 e1 02 	sts	0x02E1, r20
    5056:	4f 5f       	subi	r20, 0xFF	; 255
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    5058:	90 93 b9 02 	sts	0x02B9, r25
  twi_slarw |= address << 1;
    505c:	80 91 b9 02 	lds	r24, 0x02B9
    5060:	33 0f       	add	r19, r19
    5062:	83 2b       	or	r24, r19
    5064:	80 93 b9 02 	sts	0x02B9, r24

  if (true == twi_inRepStart) {
    5068:	80 91 bb 02 	lds	r24, 0x02BB
    506c:	81 30       	cpi	r24, 0x01	; 1
    506e:	41 f4       	brne	.+16     	; 0x5080 <twi_readFrom+0x56>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    5070:	10 92 bb 02 	sts	0x02BB, r1
    TWDR = twi_slarw;
    5074:	80 91 b9 02 	lds	r24, 0x02B9
    5078:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    507c:	85 ec       	ldi	r24, 0xC5	; 197
    507e:	01 c0       	rjmp	.+2      	; 0x5082 <twi_readFrom+0x58>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    5080:	85 ee       	ldi	r24, 0xE5	; 229
    5082:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    5086:	80 91 b8 02 	lds	r24, 0x02B8
    508a:	81 30       	cpi	r24, 0x01	; 1
    508c:	e1 f3       	breq	.-8      	; 0x5086 <twi_readFrom+0x5c>
    continue;
  }

  if (twi_masterBufferIndex < length)
    508e:	80 91 e0 02 	lds	r24, 0x02E0
    5092:	84 17       	cp	r24, r20
    5094:	10 f4       	brcc	.+4      	; 0x509a <twi_readFrom+0x70>
    length = twi_masterBufferIndex;
    5096:	40 91 e0 02 	lds	r20, 0x02E0
    509a:	20 e0       	ldi	r18, 0x00	; 0
    509c:	30 e0       	ldi	r19, 0x00	; 0
    509e:	0a c0       	rjmp	.+20     	; 0x50b4 <twi_readFrom+0x8a>

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    50a0:	fb 01       	movw	r30, r22
    50a2:	e2 0f       	add	r30, r18
    50a4:	f3 1f       	adc	r31, r19
    50a6:	d9 01       	movw	r26, r18
    50a8:	a0 54       	subi	r26, 0x40	; 64
    50aa:	bd 4f       	sbci	r27, 0xFD	; 253
    50ac:	8c 91       	ld	r24, X
    50ae:	80 83       	st	Z, r24
    50b0:	2f 5f       	subi	r18, 0xFF	; 255
    50b2:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    50b4:	24 17       	cp	r18, r20
    50b6:	a0 f3       	brcs	.-24     	; 0x50a0 <twi_readFrom+0x76>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    50b8:	84 2f       	mov	r24, r20
    50ba:	08 95       	ret

000050bc <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    50bc:	0f 93       	push	r16
    50be:	1f 93       	push	r17
    50c0:	58 2f       	mov	r21, r24
    50c2:	12 2f       	mov	r17, r18
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    50c4:	41 32       	cpi	r20, 0x21	; 33
    50c6:	10 f0       	brcs	.+4      	; 0x50cc <twi_writeTo+0x10>
    50c8:	81 e0       	ldi	r24, 0x01	; 1
    50ca:	4a c0       	rjmp	.+148    	; 0x5160 <twi_writeTo+0xa4>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    50cc:	80 91 b8 02 	lds	r24, 0x02B8
    50d0:	88 23       	and	r24, r24
    50d2:	e1 f7       	brne	.-8      	; 0x50cc <twi_writeTo+0x10>
    continue;
  }
  twi_state = TWI_MTX;
    50d4:	82 e0       	ldi	r24, 0x02	; 2
    50d6:	80 93 b8 02 	sts	0x02B8, r24
  twi_sendStop = sendStop;
    50da:	00 93 ba 02 	sts	0x02BA, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    50de:	8f ef       	ldi	r24, 0xFF	; 255
    50e0:	80 93 25 03 	sts	0x0325, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    50e4:	10 92 e0 02 	sts	0x02E0, r1
  twi_masterBufferLength = length;
    50e8:	40 93 e1 02 	sts	0x02E1, r20
    50ec:	a0 ec       	ldi	r26, 0xC0	; 192
    50ee:	b2 e0       	ldi	r27, 0x02	; 2
    50f0:	fb 01       	movw	r30, r22
    50f2:	02 c0       	rjmp	.+4      	; 0x50f8 <twi_writeTo+0x3c>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    50f4:	81 91       	ld	r24, Z+
    50f6:	8d 93       	st	X+, r24
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    50f8:	8e 2f       	mov	r24, r30
    50fa:	86 1b       	sub	r24, r22
    50fc:	84 17       	cp	r24, r20
    50fe:	d0 f3       	brcs	.-12     	; 0x50f4 <twi_writeTo+0x38>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    5100:	10 92 b9 02 	sts	0x02B9, r1
  twi_slarw |= address << 1;
    5104:	80 91 b9 02 	lds	r24, 0x02B9
    5108:	55 0f       	add	r21, r21
    510a:	85 2b       	or	r24, r21
    510c:	80 93 b9 02 	sts	0x02B9, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    5110:	80 91 bb 02 	lds	r24, 0x02BB
    5114:	81 30       	cpi	r24, 0x01	; 1
    5116:	41 f4       	brne	.+16     	; 0x5128 <twi_writeTo+0x6c>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    5118:	10 92 bb 02 	sts	0x02BB, r1
    TWDR = twi_slarw;				
    511c:	80 91 b9 02 	lds	r24, 0x02B9
    5120:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    5124:	85 ec       	ldi	r24, 0xC5	; 197
    5126:	01 c0       	rjmp	.+2      	; 0x512a <twi_writeTo+0x6e>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    5128:	85 ee       	ldi	r24, 0xE5	; 229
    512a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    512e:	11 23       	and	r17, r17
    5130:	21 f0       	breq	.+8      	; 0x513a <twi_writeTo+0x7e>
    5132:	80 91 b8 02 	lds	r24, 0x02B8
    5136:	82 30       	cpi	r24, 0x02	; 2
    5138:	e1 f3       	breq	.-8      	; 0x5132 <twi_writeTo+0x76>
    continue;
  }
  
  if (twi_error == 0xFF)
    513a:	80 91 25 03 	lds	r24, 0x0325
    513e:	8f 3f       	cpi	r24, 0xFF	; 255
    5140:	11 f4       	brne	.+4      	; 0x5146 <twi_writeTo+0x8a>
    5142:	80 e0       	ldi	r24, 0x00	; 0
    5144:	0d c0       	rjmp	.+26     	; 0x5160 <twi_writeTo+0xa4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    5146:	80 91 25 03 	lds	r24, 0x0325
    514a:	80 32       	cpi	r24, 0x20	; 32
    514c:	11 f4       	brne	.+4      	; 0x5152 <twi_writeTo+0x96>
    514e:	82 e0       	ldi	r24, 0x02	; 2
    5150:	07 c0       	rjmp	.+14     	; 0x5160 <twi_writeTo+0xa4>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    5152:	80 91 25 03 	lds	r24, 0x0325
    5156:	80 33       	cpi	r24, 0x30	; 48
    5158:	11 f0       	breq	.+4      	; 0x515e <twi_writeTo+0xa2>
    515a:	84 e0       	ldi	r24, 0x04	; 4
    515c:	01 c0       	rjmp	.+2      	; 0x5160 <twi_writeTo+0xa4>
    515e:	83 e0       	ldi	r24, 0x03	; 3
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    5160:	1f 91       	pop	r17
    5162:	0f 91       	pop	r16
    5164:	08 95       	ret

00005166 <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    5166:	48 2f       	mov	r20, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    5168:	61 32       	cpi	r22, 0x21	; 33
    516a:	10 f0       	brcs	.+4      	; 0x5170 <twi_transmit+0xa>
    516c:	81 e0       	ldi	r24, 0x01	; 1
    516e:	08 95       	ret
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    5170:	80 91 b8 02 	lds	r24, 0x02B8
    5174:	84 30       	cpi	r24, 0x04	; 4
    5176:	11 f0       	breq	.+4      	; 0x517c <twi_transmit+0x16>
    5178:	82 e0       	ldi	r24, 0x02	; 2
    517a:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    517c:	60 93 03 03 	sts	0x0303, r22
    5180:	a2 ee       	ldi	r26, 0xE2	; 226
    5182:	b2 e0       	ldi	r27, 0x02	; 2
    5184:	84 2f       	mov	r24, r20
    5186:	9c 01       	movw	r18, r24
    5188:	f9 01       	movw	r30, r18
    518a:	02 c0       	rjmp	.+4      	; 0x5190 <twi_transmit+0x2a>
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
    518c:	81 91       	ld	r24, Z+
    518e:	8d 93       	st	X+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    5190:	8e 2f       	mov	r24, r30
    5192:	84 1b       	sub	r24, r20
    5194:	86 17       	cp	r24, r22
    5196:	d0 f3       	brcs	.-12     	; 0x518c <twi_transmit+0x26>
    5198:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    519a:	08 95       	ret

0000519c <__vector_24>:
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    519c:	1f 92       	push	r1
    519e:	0f 92       	push	r0
    51a0:	0f b6       	in	r0, 0x3f	; 63
    51a2:	0f 92       	push	r0
    51a4:	11 24       	eor	r1, r1
    51a6:	2f 93       	push	r18
    51a8:	3f 93       	push	r19
    51aa:	4f 93       	push	r20
    51ac:	5f 93       	push	r21
    51ae:	6f 93       	push	r22
    51b0:	7f 93       	push	r23
    51b2:	8f 93       	push	r24
    51b4:	9f 93       	push	r25
    51b6:	af 93       	push	r26
    51b8:	bf 93       	push	r27
    51ba:	ef 93       	push	r30
    51bc:	ff 93       	push	r31
  switch(TW_STATUS){
    51be:	80 91 b9 00 	lds	r24, 0x00B9
    51c2:	90 e0       	ldi	r25, 0x00	; 0
    51c4:	88 7f       	andi	r24, 0xF8	; 248
    51c6:	90 70       	andi	r25, 0x00	; 0
    51c8:	80 36       	cpi	r24, 0x60	; 96
    51ca:	91 05       	cpc	r25, r1
    51cc:	09 f4       	brne	.+2      	; 0x51d0 <__vector_24+0x34>
    51ce:	f2 c0       	rjmp	.+484    	; 0x53b4 <__vector_24+0x218>
    51d0:	81 36       	cpi	r24, 0x61	; 97
    51d2:	91 05       	cpc	r25, r1
    51d4:	cc f5       	brge	.+114    	; 0x5248 <__vector_24+0xac>
    51d6:	88 32       	cpi	r24, 0x28	; 40
    51d8:	91 05       	cpc	r25, r1
    51da:	09 f4       	brne	.+2      	; 0x51de <__vector_24+0x42>
    51dc:	7b c0       	rjmp	.+246    	; 0x52d4 <__vector_24+0x138>
    51de:	89 32       	cpi	r24, 0x29	; 41
    51e0:	91 05       	cpc	r25, r1
    51e2:	b4 f4       	brge	.+44     	; 0x5210 <__vector_24+0x74>
    51e4:	80 31       	cpi	r24, 0x10	; 16
    51e6:	91 05       	cpc	r25, r1
    51e8:	09 f4       	brne	.+2      	; 0x51ec <__vector_24+0x50>
    51ea:	6f c0       	rjmp	.+222    	; 0x52ca <__vector_24+0x12e>
    51ec:	81 31       	cpi	r24, 0x11	; 17
    51ee:	91 05       	cpc	r25, r1
    51f0:	3c f4       	brge	.+14     	; 0x5200 <__vector_24+0x64>
    51f2:	00 97       	sbiw	r24, 0x00	; 0
    51f4:	09 f4       	brne	.+2      	; 0x51f8 <__vector_24+0x5c>
    51f6:	47 c1       	rjmp	.+654    	; 0x5486 <__vector_24+0x2ea>
    51f8:	08 97       	sbiw	r24, 0x08	; 8
    51fa:	09 f0       	breq	.+2      	; 0x51fe <__vector_24+0x62>
    51fc:	4f c1       	rjmp	.+670    	; 0x549c <__vector_24+0x300>
    51fe:	65 c0       	rjmp	.+202    	; 0x52ca <__vector_24+0x12e>
    5200:	88 31       	cpi	r24, 0x18	; 24
    5202:	91 05       	cpc	r25, r1
    5204:	09 f4       	brne	.+2      	; 0x5208 <__vector_24+0x6c>
    5206:	66 c0       	rjmp	.+204    	; 0x52d4 <__vector_24+0x138>
    5208:	80 97       	sbiw	r24, 0x20	; 32
    520a:	09 f0       	breq	.+2      	; 0x520e <__vector_24+0x72>
    520c:	47 c1       	rjmp	.+654    	; 0x549c <__vector_24+0x300>
    520e:	82 c0       	rjmp	.+260    	; 0x5314 <__vector_24+0x178>
    5210:	80 34       	cpi	r24, 0x40	; 64
    5212:	91 05       	cpc	r25, r1
    5214:	09 f4       	brne	.+2      	; 0x5218 <__vector_24+0x7c>
    5216:	a4 c0       	rjmp	.+328    	; 0x5360 <__vector_24+0x1c4>
    5218:	81 34       	cpi	r24, 0x41	; 65
    521a:	91 05       	cpc	r25, r1
    521c:	44 f4       	brge	.+16     	; 0x522e <__vector_24+0x92>
    521e:	80 33       	cpi	r24, 0x30	; 48
    5220:	91 05       	cpc	r25, r1
    5222:	09 f4       	brne	.+2      	; 0x5226 <__vector_24+0x8a>
    5224:	82 c0       	rjmp	.+260    	; 0x532a <__vector_24+0x18e>
    5226:	c8 97       	sbiw	r24, 0x38	; 56
    5228:	09 f0       	breq	.+2      	; 0x522c <__vector_24+0x90>
    522a:	38 c1       	rjmp	.+624    	; 0x549c <__vector_24+0x300>
    522c:	89 c0       	rjmp	.+274    	; 0x5340 <__vector_24+0x1a4>
    522e:	80 35       	cpi	r24, 0x50	; 80
    5230:	91 05       	cpc	r25, r1
    5232:	09 f4       	brne	.+2      	; 0x5236 <__vector_24+0x9a>
    5234:	89 c0       	rjmp	.+274    	; 0x5348 <__vector_24+0x1ac>
    5236:	88 35       	cpi	r24, 0x58	; 88
    5238:	91 05       	cpc	r25, r1
    523a:	09 f4       	brne	.+2      	; 0x523e <__vector_24+0xa2>
    523c:	96 c0       	rjmp	.+300    	; 0x536a <__vector_24+0x1ce>
    523e:	88 34       	cpi	r24, 0x48	; 72
    5240:	91 05       	cpc	r25, r1
    5242:	09 f0       	breq	.+2      	; 0x5246 <__vector_24+0xaa>
    5244:	2b c1       	rjmp	.+598    	; 0x549c <__vector_24+0x300>
    5246:	ae c0       	rjmp	.+348    	; 0x53a4 <__vector_24+0x208>
    5248:	88 39       	cpi	r24, 0x98	; 152
    524a:	91 05       	cpc	r25, r1
    524c:	09 f4       	brne	.+2      	; 0x5250 <__vector_24+0xb4>
    524e:	13 c1       	rjmp	.+550    	; 0x5476 <__vector_24+0x2da>
    5250:	89 39       	cpi	r24, 0x99	; 153
    5252:	91 05       	cpc	r25, r1
    5254:	ec f4       	brge	.+58     	; 0x5290 <__vector_24+0xf4>
    5256:	88 37       	cpi	r24, 0x78	; 120
    5258:	91 05       	cpc	r25, r1
    525a:	09 f4       	brne	.+2      	; 0x525e <__vector_24+0xc2>
    525c:	ab c0       	rjmp	.+342    	; 0x53b4 <__vector_24+0x218>
    525e:	89 37       	cpi	r24, 0x79	; 121
    5260:	91 05       	cpc	r25, r1
    5262:	4c f4       	brge	.+18     	; 0x5276 <__vector_24+0xda>
    5264:	88 36       	cpi	r24, 0x68	; 104
    5266:	91 05       	cpc	r25, r1
    5268:	09 f4       	brne	.+2      	; 0x526c <__vector_24+0xd0>
    526a:	a4 c0       	rjmp	.+328    	; 0x53b4 <__vector_24+0x218>
    526c:	80 37       	cpi	r24, 0x70	; 112
    526e:	91 05       	cpc	r25, r1
    5270:	09 f0       	breq	.+2      	; 0x5274 <__vector_24+0xd8>
    5272:	14 c1       	rjmp	.+552    	; 0x549c <__vector_24+0x300>
    5274:	9f c0       	rjmp	.+318    	; 0x53b4 <__vector_24+0x218>
    5276:	88 38       	cpi	r24, 0x88	; 136
    5278:	91 05       	cpc	r25, r1
    527a:	09 f4       	brne	.+2      	; 0x527e <__vector_24+0xe2>
    527c:	fc c0       	rjmp	.+504    	; 0x5476 <__vector_24+0x2da>
    527e:	80 39       	cpi	r24, 0x90	; 144
    5280:	91 05       	cpc	r25, r1
    5282:	09 f4       	brne	.+2      	; 0x5286 <__vector_24+0xea>
    5284:	9d c0       	rjmp	.+314    	; 0x53c0 <__vector_24+0x224>
    5286:	80 38       	cpi	r24, 0x80	; 128
    5288:	91 05       	cpc	r25, r1
    528a:	09 f0       	breq	.+2      	; 0x528e <__vector_24+0xf2>
    528c:	07 c1       	rjmp	.+526    	; 0x549c <__vector_24+0x300>
    528e:	98 c0       	rjmp	.+304    	; 0x53c0 <__vector_24+0x224>
    5290:	80 3b       	cpi	r24, 0xB0	; 176
    5292:	91 05       	cpc	r25, r1
    5294:	09 f4       	brne	.+2      	; 0x5298 <__vector_24+0xfc>
    5296:	c6 c0       	rjmp	.+396    	; 0x5424 <__vector_24+0x288>
    5298:	81 3b       	cpi	r24, 0xB1	; 177
    529a:	91 05       	cpc	r25, r1
    529c:	4c f4       	brge	.+18     	; 0x52b0 <__vector_24+0x114>
    529e:	80 3a       	cpi	r24, 0xA0	; 160
    52a0:	91 05       	cpc	r25, r1
    52a2:	09 f4       	brne	.+2      	; 0x52a6 <__vector_24+0x10a>
    52a4:	9f c0       	rjmp	.+318    	; 0x53e4 <__vector_24+0x248>
    52a6:	88 3a       	cpi	r24, 0xA8	; 168
    52a8:	91 05       	cpc	r25, r1
    52aa:	09 f0       	breq	.+2      	; 0x52ae <__vector_24+0x112>
    52ac:	f7 c0       	rjmp	.+494    	; 0x549c <__vector_24+0x300>
    52ae:	ba c0       	rjmp	.+372    	; 0x5424 <__vector_24+0x288>
    52b0:	80 3c       	cpi	r24, 0xC0	; 192
    52b2:	91 05       	cpc	r25, r1
    52b4:	09 f4       	brne	.+2      	; 0x52b8 <__vector_24+0x11c>
    52b6:	e3 c0       	rjmp	.+454    	; 0x547e <__vector_24+0x2e2>
    52b8:	88 3c       	cpi	r24, 0xC8	; 200
    52ba:	91 05       	cpc	r25, r1
    52bc:	09 f4       	brne	.+2      	; 0x52c0 <__vector_24+0x124>
    52be:	df c0       	rjmp	.+446    	; 0x547e <__vector_24+0x2e2>
    52c0:	88 3b       	cpi	r24, 0xB8	; 184
    52c2:	91 05       	cpc	r25, r1
    52c4:	09 f0       	breq	.+2      	; 0x52c8 <__vector_24+0x12c>
    52c6:	ea c0       	rjmp	.+468    	; 0x549c <__vector_24+0x300>
    52c8:	c2 c0       	rjmp	.+388    	; 0x544e <__vector_24+0x2b2>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    52ca:	80 91 b9 02 	lds	r24, 0x02B9
    52ce:	80 93 bb 00 	sts	0x00BB, r24
    52d2:	cf c0       	rjmp	.+414    	; 0x5472 <__vector_24+0x2d6>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    52d4:	90 91 e0 02 	lds	r25, 0x02E0
    52d8:	80 91 e1 02 	lds	r24, 0x02E1
    52dc:	98 17       	cp	r25, r24
    52de:	68 f4       	brcc	.+26     	; 0x52fa <__vector_24+0x15e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    52e0:	90 91 e0 02 	lds	r25, 0x02E0
    52e4:	e9 2f       	mov	r30, r25
    52e6:	f0 e0       	ldi	r31, 0x00	; 0
    52e8:	e0 54       	subi	r30, 0x40	; 64
    52ea:	fd 4f       	sbci	r31, 0xFD	; 253
    52ec:	80 81       	ld	r24, Z
    52ee:	80 93 bb 00 	sts	0x00BB, r24
    52f2:	9f 5f       	subi	r25, 0xFF	; 255
    52f4:	90 93 e0 02 	sts	0x02E0, r25
    52f8:	bc c0       	rjmp	.+376    	; 0x5472 <__vector_24+0x2d6>
        twi_reply(1);
      }else{
	if (twi_sendStop)
    52fa:	80 91 ba 02 	lds	r24, 0x02BA
    52fe:	88 23       	and	r24, r24
    5300:	09 f4       	brne	.+2      	; 0x5304 <__vector_24+0x168>
    5302:	4b c0       	rjmp	.+150    	; 0x539a <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    5304:	85 ed       	ldi	r24, 0xD5	; 213
    5306:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    530a:	80 91 bc 00 	lds	r24, 0x00BC
    530e:	84 fd       	sbrc	r24, 4
    5310:	fc cf       	rjmp	.-8      	; 0x530a <__vector_24+0x16e>
    5312:	c2 c0       	rjmp	.+388    	; 0x5498 <__vector_24+0x2fc>
	  twi_state = TWI_READY;
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    5314:	80 e2       	ldi	r24, 0x20	; 32
    5316:	80 93 25 03 	sts	0x0325, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    531a:	85 ed       	ldi	r24, 0xD5	; 213
    531c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    5320:	80 91 bc 00 	lds	r24, 0x00BC
    5324:	84 fd       	sbrc	r24, 4
    5326:	fc cf       	rjmp	.-8      	; 0x5320 <__vector_24+0x184>
    5328:	b7 c0       	rjmp	.+366    	; 0x5498 <__vector_24+0x2fc>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    532a:	80 e3       	ldi	r24, 0x30	; 48
    532c:	80 93 25 03 	sts	0x0325, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    5330:	85 ed       	ldi	r24, 0xD5	; 213
    5332:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    5336:	80 91 bc 00 	lds	r24, 0x00BC
    533a:	84 fd       	sbrc	r24, 4
    533c:	fc cf       	rjmp	.-8      	; 0x5336 <__vector_24+0x19a>
    533e:	ac c0       	rjmp	.+344    	; 0x5498 <__vector_24+0x2fc>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    5340:	88 e3       	ldi	r24, 0x38	; 56
    5342:	80 93 25 03 	sts	0x0325, r24
    5346:	9b c0       	rjmp	.+310    	; 0x547e <__vector_24+0x2e2>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    5348:	80 91 e0 02 	lds	r24, 0x02E0
    534c:	90 91 bb 00 	lds	r25, 0x00BB
    5350:	e8 2f       	mov	r30, r24
    5352:	f0 e0       	ldi	r31, 0x00	; 0
    5354:	e0 54       	subi	r30, 0x40	; 64
    5356:	fd 4f       	sbci	r31, 0xFD	; 253
    5358:	90 83       	st	Z, r25
    535a:	8f 5f       	subi	r24, 0xFF	; 255
    535c:	80 93 e0 02 	sts	0x02E0, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5360:	90 91 e0 02 	lds	r25, 0x02E0
    5364:	80 91 e1 02 	lds	r24, 0x02E1
    5368:	82 c0       	rjmp	.+260    	; 0x546e <__vector_24+0x2d2>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    536a:	80 91 e0 02 	lds	r24, 0x02E0
    536e:	90 91 bb 00 	lds	r25, 0x00BB
    5372:	e8 2f       	mov	r30, r24
    5374:	f0 e0       	ldi	r31, 0x00	; 0
    5376:	e0 54       	subi	r30, 0x40	; 64
    5378:	fd 4f       	sbci	r31, 0xFD	; 253
    537a:	90 83       	st	Z, r25
    537c:	8f 5f       	subi	r24, 0xFF	; 255
    537e:	80 93 e0 02 	sts	0x02E0, r24
	if (twi_sendStop)
    5382:	80 91 ba 02 	lds	r24, 0x02BA
    5386:	88 23       	and	r24, r24
    5388:	41 f0       	breq	.+16     	; 0x539a <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    538a:	85 ed       	ldi	r24, 0xD5	; 213
    538c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    5390:	80 91 bc 00 	lds	r24, 0x00BC
    5394:	84 fd       	sbrc	r24, 4
    5396:	fc cf       	rjmp	.-8      	; 0x5390 <__vector_24+0x1f4>
    5398:	7f c0       	rjmp	.+254    	; 0x5498 <__vector_24+0x2fc>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    539a:	81 e0       	ldi	r24, 0x01	; 1
    539c:	80 93 bb 02 	sts	0x02BB, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    53a0:	84 ea       	ldi	r24, 0xA4	; 164
    53a2:	6e c0       	rjmp	.+220    	; 0x5480 <__vector_24+0x2e4>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    53a4:	85 ed       	ldi	r24, 0xD5	; 213
    53a6:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    53aa:	80 91 bc 00 	lds	r24, 0x00BC
    53ae:	84 fd       	sbrc	r24, 4
    53b0:	fc cf       	rjmp	.-8      	; 0x53aa <__vector_24+0x20e>
    53b2:	72 c0       	rjmp	.+228    	; 0x5498 <__vector_24+0x2fc>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    53b4:	83 e0       	ldi	r24, 0x03	; 3
    53b6:	80 93 b8 02 	sts	0x02B8, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    53ba:	10 92 24 03 	sts	0x0324, r1
    53be:	59 c0       	rjmp	.+178    	; 0x5472 <__vector_24+0x2d6>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    53c0:	80 91 24 03 	lds	r24, 0x0324
    53c4:	80 32       	cpi	r24, 0x20	; 32
    53c6:	08 f0       	brcs	.+2      	; 0x53ca <__vector_24+0x22e>
    53c8:	56 c0       	rjmp	.+172    	; 0x5476 <__vector_24+0x2da>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    53ca:	80 91 24 03 	lds	r24, 0x0324
    53ce:	90 91 bb 00 	lds	r25, 0x00BB
    53d2:	e8 2f       	mov	r30, r24
    53d4:	f0 e0       	ldi	r31, 0x00	; 0
    53d6:	ec 5f       	subi	r30, 0xFC	; 252
    53d8:	fc 4f       	sbci	r31, 0xFC	; 252
    53da:	90 83       	st	Z, r25
    53dc:	8f 5f       	subi	r24, 0xFF	; 255
    53de:	80 93 24 03 	sts	0x0324, r24
    53e2:	47 c0       	rjmp	.+142    	; 0x5472 <__vector_24+0x2d6>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    53e4:	80 91 24 03 	lds	r24, 0x0324
    53e8:	80 32       	cpi	r24, 0x20	; 32
    53ea:	30 f4       	brcc	.+12     	; 0x53f8 <__vector_24+0x25c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    53ec:	e0 91 24 03 	lds	r30, 0x0324
    53f0:	f0 e0       	ldi	r31, 0x00	; 0
    53f2:	ec 5f       	subi	r30, 0xFC	; 252
    53f4:	fc 4f       	sbci	r31, 0xFC	; 252
    53f6:	10 82       	st	Z, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    53f8:	85 ed       	ldi	r24, 0xD5	; 213
    53fa:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    53fe:	80 91 bc 00 	lds	r24, 0x00BC
    5402:	84 fd       	sbrc	r24, 4
    5404:	fc cf       	rjmp	.-8      	; 0x53fe <__vector_24+0x262>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    5406:	10 92 b8 02 	sts	0x02B8, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    540a:	60 91 24 03 	lds	r22, 0x0324
    540e:	e0 91 be 02 	lds	r30, 0x02BE
    5412:	f0 91 bf 02 	lds	r31, 0x02BF
    5416:	84 e0       	ldi	r24, 0x04	; 4
    5418:	93 e0       	ldi	r25, 0x03	; 3
    541a:	70 e0       	ldi	r23, 0x00	; 0
    541c:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    541e:	10 92 24 03 	sts	0x0324, r1
    5422:	2d c0       	rjmp	.+90     	; 0x547e <__vector_24+0x2e2>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    5424:	84 e0       	ldi	r24, 0x04	; 4
    5426:	80 93 b8 02 	sts	0x02B8, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    542a:	10 92 02 03 	sts	0x0302, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    542e:	10 92 03 03 	sts	0x0303, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    5432:	e0 91 bc 02 	lds	r30, 0x02BC
    5436:	f0 91 bd 02 	lds	r31, 0x02BD
    543a:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    543c:	80 91 03 03 	lds	r24, 0x0303
    5440:	88 23       	and	r24, r24
    5442:	29 f4       	brne	.+10     	; 0x544e <__vector_24+0x2b2>
        twi_txBufferLength = 1;
    5444:	81 e0       	ldi	r24, 0x01	; 1
    5446:	80 93 03 03 	sts	0x0303, r24
        twi_txBuffer[0] = 0x00;
    544a:	10 92 e2 02 	sts	0x02E2, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    544e:	90 91 02 03 	lds	r25, 0x0302
    5452:	e9 2f       	mov	r30, r25
    5454:	f0 e0       	ldi	r31, 0x00	; 0
    5456:	ee 51       	subi	r30, 0x1E	; 30
    5458:	fd 4f       	sbci	r31, 0xFD	; 253
    545a:	80 81       	ld	r24, Z
    545c:	80 93 bb 00 	sts	0x00BB, r24
    5460:	9f 5f       	subi	r25, 0xFF	; 255
    5462:	90 93 02 03 	sts	0x0302, r25
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    5466:	90 91 02 03 	lds	r25, 0x0302
    546a:	80 91 03 03 	lds	r24, 0x0303
    546e:	98 17       	cp	r25, r24
    5470:	10 f4       	brcc	.+4      	; 0x5476 <__vector_24+0x2da>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5472:	85 ec       	ldi	r24, 0xC5	; 197
    5474:	01 c0       	rjmp	.+2      	; 0x5478 <__vector_24+0x2dc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5476:	85 e8       	ldi	r24, 0x85	; 133
    5478:	80 93 bc 00 	sts	0x00BC, r24
    547c:	0f c0       	rjmp	.+30     	; 0x549c <__vector_24+0x300>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    547e:	85 ec       	ldi	r24, 0xC5	; 197
    5480:	80 93 bc 00 	sts	0x00BC, r24
    5484:	09 c0       	rjmp	.+18     	; 0x5498 <__vector_24+0x2fc>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    5486:	10 92 25 03 	sts	0x0325, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    548a:	85 ed       	ldi	r24, 0xD5	; 213
    548c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    5490:	80 91 bc 00 	lds	r24, 0x00BC
    5494:	84 fd       	sbrc	r24, 4
    5496:	fc cf       	rjmp	.-8      	; 0x5490 <__vector_24+0x2f4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    5498:	10 92 b8 02 	sts	0x02B8, r1
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    549c:	ff 91       	pop	r31
    549e:	ef 91       	pop	r30
    54a0:	bf 91       	pop	r27
    54a2:	af 91       	pop	r26
    54a4:	9f 91       	pop	r25
    54a6:	8f 91       	pop	r24
    54a8:	7f 91       	pop	r23
    54aa:	6f 91       	pop	r22
    54ac:	5f 91       	pop	r21
    54ae:	4f 91       	pop	r20
    54b0:	3f 91       	pop	r19
    54b2:	2f 91       	pop	r18
    54b4:	0f 90       	pop	r0
    54b6:	0f be       	out	0x3f, r0	; 63
    54b8:	0f 90       	pop	r0
    54ba:	1f 90       	pop	r1
    54bc:	18 95       	reti

000054be <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    54be:	10 92 b8 02 	sts	0x02B8, r1
  twi_sendStop = true;		// default value
    54c2:	81 e0       	ldi	r24, 0x01	; 1
    54c4:	80 93 ba 02 	sts	0x02BA, r24
  twi_inRepStart = false;
    54c8:	10 92 bb 02 	sts	0x02BB, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    54cc:	82 e1       	ldi	r24, 0x12	; 18
    54ce:	61 e0       	ldi	r22, 0x01	; 1
    54d0:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <digitalWrite>
  digitalWrite(SCL, 1);
    54d4:	83 e1       	ldi	r24, 0x13	; 19
    54d6:	61 e0       	ldi	r22, 0x01	; 1
    54d8:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    54dc:	e9 eb       	ldi	r30, 0xB9	; 185
    54de:	f0 e0       	ldi	r31, 0x00	; 0
    54e0:	80 81       	ld	r24, Z
    54e2:	8e 7f       	andi	r24, 0xFE	; 254
    54e4:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    54e6:	80 81       	ld	r24, Z
    54e8:	8d 7f       	andi	r24, 0xFD	; 253
    54ea:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    54ec:	88 e4       	ldi	r24, 0x48	; 72
    54ee:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    54f2:	85 e4       	ldi	r24, 0x45	; 69
    54f4:	80 93 bc 00 	sts	0x00BC, r24
}
    54f8:	08 95       	ret

000054fa <_ZN9DS1307RTC4readER12tmElements_t>:
  tm.Second &= 0x7f;  // start the clock
  write(tm); 
}

// Aquire data from the RTC chip in BCD format
bool DS1307RTC::read(tmElements_t &tm)
    54fa:	0f 93       	push	r16
    54fc:	1f 93       	push	r17
    54fe:	cf 93       	push	r28
    5500:	df 93       	push	r29
    5502:	ec 01       	movw	r28, r24
{
  uint8_t sec;
  Wire.beginTransmission(DS1307_CTRL_ID);
    5504:	8c ea       	ldi	r24, 0xAC	; 172
    5506:	92 e0       	ldi	r25, 0x02	; 2
    5508:	68 e6       	ldi	r22, 0x68	; 104
    550a:	70 e0       	ldi	r23, 0x00	; 0
    550c:	0e 94 30 27 	call	0x4e60	; 0x4e60 <_ZN7TwoWire17beginTransmissionEi>
#if ARDUINO >= 100  
  Wire.write((uint8_t)0x00); 
    5510:	8c ea       	ldi	r24, 0xAC	; 172
    5512:	92 e0       	ldi	r25, 0x02	; 2
    5514:	60 e0       	ldi	r22, 0x00	; 0
    5516:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <_ZN7TwoWire5writeEh>
#else
  Wire.send(0x00);
#endif  
  if (Wire.endTransmission() != 0) {
    551a:	8c ea       	ldi	r24, 0xAC	; 172
    551c:	92 e0       	ldi	r25, 0x02	; 2
    551e:	0e 94 f5 27 	call	0x4fea	; 0x4fea <_ZN7TwoWire15endTransmissionEv>
    5522:	88 23       	and	r24, r24
    5524:	19 f0       	breq	.+6      	; 0x552c <_ZN9DS1307RTC4readER12tmElements_t+0x32>
    exists = false;
    5526:	10 92 26 03 	sts	0x0326, r1
    552a:	11 c0       	rjmp	.+34     	; 0x554e <_ZN9DS1307RTC4readER12tmElements_t+0x54>
    return false;
  }
  exists = true;
    552c:	81 e0       	ldi	r24, 0x01	; 1
    552e:	80 93 26 03 	sts	0x0326, r24

  // request the 7 data fields   (secs, min, hr, dow, date, mth, yr)
  Wire.requestFrom(DS1307_CTRL_ID, tmNbrFields);
    5532:	8c ea       	ldi	r24, 0xAC	; 172
    5534:	92 e0       	ldi	r25, 0x02	; 2
    5536:	68 e6       	ldi	r22, 0x68	; 104
    5538:	70 e0       	ldi	r23, 0x00	; 0
    553a:	47 e0       	ldi	r20, 0x07	; 7
    553c:	50 e0       	ldi	r21, 0x00	; 0
    553e:	0e 94 06 28 	call	0x500c	; 0x500c <_ZN7TwoWire11requestFromEii>
  if (Wire.available() < tmNbrFields) return false;
    5542:	8c ea       	ldi	r24, 0xAC	; 172
    5544:	92 e0       	ldi	r25, 0x02	; 2
    5546:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <_ZN7TwoWire9availableEv>
    554a:	07 97       	sbiw	r24, 0x07	; 7
    554c:	14 f4       	brge	.+4      	; 0x5552 <_ZN9DS1307RTC4readER12tmElements_t+0x58>
    554e:	80 e0       	ldi	r24, 0x00	; 0
    5550:	65 c0       	rjmp	.+202    	; 0x561c <_ZN9DS1307RTC4readER12tmElements_t+0x122>
#if ARDUINO >= 100
  sec = Wire.read();
    5552:	8c ea       	ldi	r24, 0xAC	; 172
    5554:	92 e0       	ldi	r25, 0x02	; 2
    5556:	0e 94 43 27 	call	0x4e86	; 0x4e86 <_ZN7TwoWire4readEv>
    555a:	08 2f       	mov	r16, r24
  tm.Second = bcd2dec(sec & 0x7f);   
    555c:	8f 77       	andi	r24, 0x7F	; 127
    555e:	82 95       	swap	r24
    5560:	8f 70       	andi	r24, 0x0F	; 15
    5562:	1a e0       	ldi	r17, 0x0A	; 10
    5564:	81 9f       	mul	r24, r17
    5566:	c0 01       	movw	r24, r0
    5568:	11 24       	eor	r1, r1
    556a:	20 2f       	mov	r18, r16
    556c:	2f 70       	andi	r18, 0x0F	; 15
    556e:	28 0f       	add	r18, r24
    5570:	28 83       	st	Y, r18
  tm.Minute = bcd2dec(Wire.read() );
    5572:	8c ea       	ldi	r24, 0xAC	; 172
    5574:	92 e0       	ldi	r25, 0x02	; 2
    5576:	0e 94 43 27 	call	0x4e86	; 0x4e86 <_ZN7TwoWire4readEv>
    557a:	28 2f       	mov	r18, r24
    557c:	22 95       	swap	r18
    557e:	2f 70       	andi	r18, 0x0F	; 15
    5580:	21 9f       	mul	r18, r17
    5582:	90 01       	movw	r18, r0
    5584:	11 24       	eor	r1, r1
    5586:	8f 70       	andi	r24, 0x0F	; 15
    5588:	82 0f       	add	r24, r18
    558a:	89 83       	std	Y+1, r24	; 0x01
  tm.Hour =   bcd2dec(Wire.read() & 0x3f);  // mask assumes 24hr clock
    558c:	8c ea       	ldi	r24, 0xAC	; 172
    558e:	92 e0       	ldi	r25, 0x02	; 2
    5590:	0e 94 43 27 	call	0x4e86	; 0x4e86 <_ZN7TwoWire4readEv>
    5594:	28 2f       	mov	r18, r24
    5596:	2f 73       	andi	r18, 0x3F	; 63
    5598:	22 95       	swap	r18
    559a:	2f 70       	andi	r18, 0x0F	; 15
    559c:	21 9f       	mul	r18, r17
    559e:	90 01       	movw	r18, r0
    55a0:	11 24       	eor	r1, r1
    55a2:	8f 70       	andi	r24, 0x0F	; 15
    55a4:	82 0f       	add	r24, r18
    55a6:	8a 83       	std	Y+2, r24	; 0x02
  tm.Wday = bcd2dec(Wire.read() );
    55a8:	8c ea       	ldi	r24, 0xAC	; 172
    55aa:	92 e0       	ldi	r25, 0x02	; 2
    55ac:	0e 94 43 27 	call	0x4e86	; 0x4e86 <_ZN7TwoWire4readEv>
    55b0:	28 2f       	mov	r18, r24
    55b2:	22 95       	swap	r18
    55b4:	2f 70       	andi	r18, 0x0F	; 15
    55b6:	21 9f       	mul	r18, r17
    55b8:	90 01       	movw	r18, r0
    55ba:	11 24       	eor	r1, r1
    55bc:	8f 70       	andi	r24, 0x0F	; 15
    55be:	82 0f       	add	r24, r18
    55c0:	8b 83       	std	Y+3, r24	; 0x03
  tm.Day = bcd2dec(Wire.read() );
    55c2:	8c ea       	ldi	r24, 0xAC	; 172
    55c4:	92 e0       	ldi	r25, 0x02	; 2
    55c6:	0e 94 43 27 	call	0x4e86	; 0x4e86 <_ZN7TwoWire4readEv>
    55ca:	28 2f       	mov	r18, r24
    55cc:	22 95       	swap	r18
    55ce:	2f 70       	andi	r18, 0x0F	; 15
    55d0:	21 9f       	mul	r18, r17
    55d2:	90 01       	movw	r18, r0
    55d4:	11 24       	eor	r1, r1
    55d6:	8f 70       	andi	r24, 0x0F	; 15
    55d8:	82 0f       	add	r24, r18
    55da:	8c 83       	std	Y+4, r24	; 0x04
  tm.Month = bcd2dec(Wire.read() );
    55dc:	8c ea       	ldi	r24, 0xAC	; 172
    55de:	92 e0       	ldi	r25, 0x02	; 2
    55e0:	0e 94 43 27 	call	0x4e86	; 0x4e86 <_ZN7TwoWire4readEv>
    55e4:	28 2f       	mov	r18, r24
    55e6:	22 95       	swap	r18
    55e8:	2f 70       	andi	r18, 0x0F	; 15
    55ea:	21 9f       	mul	r18, r17
    55ec:	90 01       	movw	r18, r0
    55ee:	11 24       	eor	r1, r1
    55f0:	8f 70       	andi	r24, 0x0F	; 15
    55f2:	82 0f       	add	r24, r18
    55f4:	8d 83       	std	Y+5, r24	; 0x05
  tm.Year = y2kYearToTm((bcd2dec(Wire.read())));
    55f6:	8c ea       	ldi	r24, 0xAC	; 172
    55f8:	92 e0       	ldi	r25, 0x02	; 2
    55fa:	0e 94 43 27 	call	0x4e86	; 0x4e86 <_ZN7TwoWire4readEv>
    55fe:	28 2f       	mov	r18, r24
    5600:	2f 70       	andi	r18, 0x0F	; 15
    5602:	22 5e       	subi	r18, 0xE2	; 226
    5604:	82 95       	swap	r24
    5606:	8f 70       	andi	r24, 0x0F	; 15
    5608:	81 9f       	mul	r24, r17
    560a:	c0 01       	movw	r24, r0
    560c:	11 24       	eor	r1, r1
    560e:	28 0f       	add	r18, r24
    5610:	2e 83       	std	Y+6, r18	; 0x06
    5612:	80 2f       	mov	r24, r16
    5614:	80 95       	com	r24
    5616:	88 1f       	adc	r24, r24
    5618:	88 27       	eor	r24, r24
    561a:	88 1f       	adc	r24, r24
  tm.Month = bcd2dec(Wire.receive() );
  tm.Year = y2kYearToTm((bcd2dec(Wire.receive())));
#endif
  if (sec & 0x80) return false; // clock is halted
  return true;
}
    561c:	df 91       	pop	r29
    561e:	cf 91       	pop	r28
    5620:	1f 91       	pop	r17
    5622:	0f 91       	pop	r16
    5624:	08 95       	ret

00005626 <_ZN9DS1307RTC3getEv>:
{
  Wire.begin();
}
  
// PUBLIC FUNCTIONS
time_t DS1307RTC::get()   // Aquire data from buffer and convert to time_t
    5626:	0f 93       	push	r16
    5628:	1f 93       	push	r17
    562a:	df 93       	push	r29
    562c:	cf 93       	push	r28
    562e:	cd b7       	in	r28, 0x3d	; 61
    5630:	de b7       	in	r29, 0x3e	; 62
    5632:	27 97       	sbiw	r28, 0x07	; 7
    5634:	0f b6       	in	r0, 0x3f	; 63
    5636:	f8 94       	cli
    5638:	de bf       	out	0x3e, r29	; 62
    563a:	0f be       	out	0x3f, r0	; 63
    563c:	cd bf       	out	0x3d, r28	; 61
{
  tmElements_t tm;
  if (read(tm) == false) return 0;
    563e:	8e 01       	movw	r16, r28
    5640:	0f 5f       	subi	r16, 0xFF	; 255
    5642:	1f 4f       	sbci	r17, 0xFF	; 255
    5644:	c8 01       	movw	r24, r16
    5646:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <_ZN9DS1307RTC4readER12tmElements_t>
    564a:	88 23       	and	r24, r24
    564c:	29 f4       	brne	.+10     	; 0x5658 <_ZN9DS1307RTC3getEv+0x32>
    564e:	20 e0       	ldi	r18, 0x00	; 0
    5650:	30 e0       	ldi	r19, 0x00	; 0
    5652:	40 e0       	ldi	r20, 0x00	; 0
    5654:	50 e0       	ldi	r21, 0x00	; 0
    5656:	05 c0       	rjmp	.+10     	; 0x5662 <_ZN9DS1307RTC3getEv+0x3c>
  return(makeTime(tm));
    5658:	c8 01       	movw	r24, r16
    565a:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <_Z8makeTimeR12tmElements_t>
    565e:	9b 01       	movw	r18, r22
    5660:	ac 01       	movw	r20, r24
}
    5662:	b9 01       	movw	r22, r18
    5664:	ca 01       	movw	r24, r20
    5666:	27 96       	adiw	r28, 0x07	; 7
    5668:	0f b6       	in	r0, 0x3f	; 63
    566a:	f8 94       	cli
    566c:	de bf       	out	0x3e, r29	; 62
    566e:	0f be       	out	0x3f, r0	; 63
    5670:	cd bf       	out	0x3d, r28	; 61
    5672:	cf 91       	pop	r28
    5674:	df 91       	pop	r29
    5676:	1f 91       	pop	r17
    5678:	0f 91       	pop	r16
    567a:	08 95       	ret

0000567c <_GLOBAL__I__ZN9DS1307RTCC2Ev>:

#define DS1307_CTRL_ID 0x68 

DS1307RTC::DS1307RTC()
{
  Wire.begin();
    567c:	8c ea       	ldi	r24, 0xAC	; 172
    567e:	92 e0       	ldi	r25, 0x02	; 2
    5680:	0e 94 0a 28 	call	0x5014	; 0x5014 <_ZN7TwoWire5beginEv>
  return ((num/16 * 10) + (num % 16));
}

bool DS1307RTC::exists = false;

DS1307RTC RTC = DS1307RTC(); // create an instance for the user
    5684:	08 95       	ret

00005686 <_ZN7OneWire12reset_searchEv>:

//
// You need to use this function to start a search again from the beginning.
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
    5686:	fc 01       	movw	r30, r24
{
  // reset the search state
  LastDiscrepancy = 0;
    5688:	13 86       	std	Z+11, r1	; 0x0b
  LastDeviceFlag = FALSE;
    568a:	15 86       	std	Z+13, r1	; 0x0d
  LastFamilyDiscrepancy = 0;
    568c:	14 86       	std	Z+12, r1	; 0x0c
    568e:	87 e0       	ldi	r24, 0x07	; 7
    5690:	90 e0       	ldi	r25, 0x00	; 0
  for(int i = 7; ; i--) {
    ROM_NO[i] = 0;
    5692:	12 86       	std	Z+10, r1	; 0x0a
    5694:	31 97       	sbiw	r30, 0x01	; 1
    if ( i == 0) break;
    5696:	00 97       	sbiw	r24, 0x00	; 0
    5698:	11 f0       	breq	.+4      	; 0x569e <_ZN7OneWire12reset_searchEv+0x18>
{
  // reset the search state
  LastDiscrepancy = 0;
  LastDeviceFlag = FALSE;
  LastFamilyDiscrepancy = 0;
  for(int i = 7; ; i--) {
    569a:	01 97       	sbiw	r24, 0x01	; 1
    569c:	fa cf       	rjmp	.-12     	; 0x5692 <_ZN7OneWire12reset_searchEv+0xc>
    569e:	08 95       	ret

000056a0 <_ZN7OneWire4crc8EPKhh>:
// and the registers.  (note: this might better be done without to
// table, it would probably be smaller and certainly fast enough
// compared to all those delayMicrosecond() calls.  But I got
// confused, so I use this table from the examples.)
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
    56a0:	dc 01       	movw	r26, r24
    56a2:	80 e0       	ldi	r24, 0x00	; 0
    56a4:	0b c0       	rjmp	.+22     	; 0x56bc <_ZN7OneWire4crc8EPKhh+0x1c>
{
	uint8_t crc = 0;

	while (len--) {
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
    56a6:	e8 2f       	mov	r30, r24
    56a8:	f0 e0       	ldi	r31, 0x00	; 0
    56aa:	8d 91       	ld	r24, X+
    56ac:	90 e0       	ldi	r25, 0x00	; 0
    56ae:	e8 27       	eor	r30, r24
    56b0:	f9 27       	eor	r31, r25
    56b2:	e3 5b       	subi	r30, 0xB3	; 179
    56b4:	f8 4f       	sbci	r31, 0xF8	; 248
    56b6:	e4 91       	lpm	r30, Z+
    56b8:	61 50       	subi	r22, 0x01	; 1
    56ba:	8e 2f       	mov	r24, r30
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;

	while (len--) {
    56bc:	66 23       	and	r22, r22
    56be:	99 f7       	brne	.-26     	; 0x56a6 <_ZN7OneWire4crc8EPKhh+0x6>
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
	}
	return crc;
}
    56c0:	08 95       	ret

000056c2 <_ZN7OneWire8read_bitEv>:

//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
    56c2:	df 92       	push	r13
    56c4:	ef 92       	push	r14
    56c6:	ff 92       	push	r15
    56c8:	0f 93       	push	r16
    56ca:	1f 93       	push	r17
    56cc:	fc 01       	movw	r30, r24
{
	IO_REG_TYPE mask=bitmask;
    56ce:	e0 80       	ld	r14, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    56d0:	01 81       	ldd	r16, Z+1	; 0x01
    56d2:	12 81       	ldd	r17, Z+2	; 0x02
	uint8_t r;

	noInterrupts();
    56d4:	f8 94       	cli
	DIRECT_MODE_OUTPUT(reg, mask);
    56d6:	f8 01       	movw	r30, r16
    56d8:	81 81       	ldd	r24, Z+1	; 0x01
    56da:	8e 29       	or	r24, r14
    56dc:	81 83       	std	Z+1, r24	; 0x01
	DIRECT_WRITE_LOW(reg, mask);
    56de:	82 81       	ldd	r24, Z+2	; 0x02
    56e0:	de 2c       	mov	r13, r14
    56e2:	d0 94       	com	r13
    56e4:	8d 21       	and	r24, r13
    56e6:	82 83       	std	Z+2, r24	; 0x02
	delayMicroseconds(3);
    56e8:	83 e0       	ldi	r24, 0x03	; 3
    56ea:	90 e0       	ldi	r25, 0x00	; 0
    56ec:	0e 94 78 32 	call	0x64f0	; 0x64f0 <delayMicroseconds>
	DIRECT_MODE_INPUT(reg, mask);	// let pin float, pull up will raise
    56f0:	f8 01       	movw	r30, r16
    56f2:	81 81       	ldd	r24, Z+1	; 0x01
    56f4:	8d 21       	and	r24, r13
    56f6:	81 83       	std	Z+1, r24	; 0x01
	delayMicroseconds(10);
    56f8:	8a e0       	ldi	r24, 0x0A	; 10
    56fa:	90 e0       	ldi	r25, 0x00	; 0
    56fc:	0e 94 78 32 	call	0x64f0	; 0x64f0 <delayMicroseconds>
	r = DIRECT_READ(reg, mask);
    5700:	f8 01       	movw	r30, r16
    5702:	00 81       	ld	r16, Z
	interrupts();
    5704:	78 94       	sei
	delayMicroseconds(53);
    5706:	85 e3       	ldi	r24, 0x35	; 53
    5708:	90 e0       	ldi	r25, 0x00	; 0
    570a:	0e 94 78 32 	call	0x64f0	; 0x64f0 <delayMicroseconds>
    570e:	80 e0       	ldi	r24, 0x00	; 0
    5710:	10 e0       	ldi	r17, 0x00	; 0
    5712:	ff 24       	eor	r15, r15
    5714:	0e 21       	and	r16, r14
    5716:	1f 21       	and	r17, r15
    5718:	01 2b       	or	r16, r17
    571a:	09 f0       	breq	.+2      	; 0x571e <_ZN7OneWire8read_bitEv+0x5c>
    571c:	81 e0       	ldi	r24, 0x01	; 1
	return r;
}
    571e:	1f 91       	pop	r17
    5720:	0f 91       	pop	r16
    5722:	ff 90       	pop	r15
    5724:	ef 90       	pop	r14
    5726:	df 90       	pop	r13
    5728:	08 95       	ret

0000572a <_ZN7OneWire4readEv>:
}

//
// Read a byte
//
uint8_t OneWire::read() {
    572a:	ef 92       	push	r14
    572c:	ff 92       	push	r15
    572e:	0f 93       	push	r16
    5730:	1f 93       	push	r17
    5732:	cf 93       	push	r28
    5734:	df 93       	push	r29
    5736:	7c 01       	movw	r14, r24
    5738:	01 e0       	ldi	r16, 0x01	; 1
    573a:	10 e0       	ldi	r17, 0x00	; 0
    573c:	c0 e0       	ldi	r28, 0x00	; 0
    573e:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
	if ( OneWire::read_bit()) r |= bitMask;
    5740:	c7 01       	movw	r24, r14
    5742:	0e 94 61 2b 	call	0x56c2	; 0x56c2 <_ZN7OneWire8read_bitEv>
    5746:	81 11       	cpse	r24, r1
    5748:	10 2b       	or	r17, r16
//
uint8_t OneWire::read() {
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    574a:	00 0f       	add	r16, r16
    574c:	21 96       	adiw	r28, 0x01	; 1
    574e:	c8 30       	cpi	r28, 0x08	; 8
    5750:	d1 05       	cpc	r29, r1
    5752:	b1 f7       	brne	.-20     	; 0x5740 <_ZN7OneWire4readEv+0x16>
	if ( OneWire::read_bit()) r |= bitMask;
    }
    return r;
}
    5754:	81 2f       	mov	r24, r17
    5756:	df 91       	pop	r29
    5758:	cf 91       	pop	r28
    575a:	1f 91       	pop	r17
    575c:	0f 91       	pop	r16
    575e:	ff 90       	pop	r15
    5760:	ef 90       	pop	r14
    5762:	08 95       	ret

00005764 <_ZN7OneWire9write_bitEh>:

//
// Write a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
void OneWire::write_bit(uint8_t v)
    5764:	1f 93       	push	r17
    5766:	cf 93       	push	r28
    5768:	df 93       	push	r29
    576a:	fc 01       	movw	r30, r24
{
	IO_REG_TYPE mask=bitmask;
    576c:	10 81       	ld	r17, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    576e:	c1 81       	ldd	r28, Z+1	; 0x01
    5770:	d2 81       	ldd	r29, Z+2	; 0x02
    5772:	91 2f       	mov	r25, r17
    5774:	90 95       	com	r25

	if (v & 1) {
    5776:	60 ff       	sbrs	r22, 0
    5778:	12 c0       	rjmp	.+36     	; 0x579e <_ZN7OneWire9write_bitEh+0x3a>
		noInterrupts();
    577a:	f8 94       	cli
		DIRECT_WRITE_LOW(reg, mask);
    577c:	8a 81       	ldd	r24, Y+2	; 0x02
    577e:	89 23       	and	r24, r25
    5780:	8a 83       	std	Y+2, r24	; 0x02
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    5782:	89 81       	ldd	r24, Y+1	; 0x01
    5784:	81 2b       	or	r24, r17
    5786:	89 83       	std	Y+1, r24	; 0x01
		delayMicroseconds(10);
    5788:	8a e0       	ldi	r24, 0x0A	; 10
    578a:	90 e0       	ldi	r25, 0x00	; 0
    578c:	0e 94 78 32 	call	0x64f0	; 0x64f0 <delayMicroseconds>
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
    5790:	8a 81       	ldd	r24, Y+2	; 0x02
    5792:	81 2b       	or	r24, r17
    5794:	8a 83       	std	Y+2, r24	; 0x02
		interrupts();
    5796:	78 94       	sei
		delayMicroseconds(55);
    5798:	87 e3       	ldi	r24, 0x37	; 55
    579a:	90 e0       	ldi	r25, 0x00	; 0
    579c:	11 c0       	rjmp	.+34     	; 0x57c0 <_ZN7OneWire9write_bitEh+0x5c>
	} else {
		noInterrupts();
    579e:	f8 94       	cli
		DIRECT_WRITE_LOW(reg, mask);
    57a0:	8a 81       	ldd	r24, Y+2	; 0x02
    57a2:	89 23       	and	r24, r25
    57a4:	8a 83       	std	Y+2, r24	; 0x02
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    57a6:	89 81       	ldd	r24, Y+1	; 0x01
    57a8:	81 2b       	or	r24, r17
    57aa:	89 83       	std	Y+1, r24	; 0x01
		delayMicroseconds(65);
    57ac:	81 e4       	ldi	r24, 0x41	; 65
    57ae:	90 e0       	ldi	r25, 0x00	; 0
    57b0:	0e 94 78 32 	call	0x64f0	; 0x64f0 <delayMicroseconds>
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
    57b4:	8a 81       	ldd	r24, Y+2	; 0x02
    57b6:	81 2b       	or	r24, r17
    57b8:	8a 83       	std	Y+2, r24	; 0x02
		interrupts();
    57ba:	78 94       	sei
		delayMicroseconds(5);
    57bc:	85 e0       	ldi	r24, 0x05	; 5
    57be:	90 e0       	ldi	r25, 0x00	; 0
    57c0:	0e 94 78 32 	call	0x64f0	; 0x64f0 <delayMicroseconds>
	}
}
    57c4:	df 91       	pop	r29
    57c6:	cf 91       	pop	r28
    57c8:	1f 91       	pop	r17
    57ca:	08 95       	ret

000057cc <_ZN7OneWire5writeEhh>:
// pin high, if you need power after the write (e.g. DS18S20 in
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) {
    57cc:	cf 92       	push	r12
    57ce:	df 92       	push	r13
    57d0:	ef 92       	push	r14
    57d2:	ff 92       	push	r15
    57d4:	0f 93       	push	r16
    57d6:	1f 93       	push	r17
    57d8:	cf 93       	push	r28
    57da:	df 93       	push	r29
    57dc:	8c 01       	movw	r16, r24
    57de:	e4 2e       	mov	r14, r20
    57e0:	ff 24       	eor	r15, r15
    57e2:	f3 94       	inc	r15
    57e4:	c0 e0       	ldi	r28, 0x00	; 0
    57e6:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
	OneWire::write_bit( (bitMask & v)?1:0);
    57e8:	c6 2e       	mov	r12, r22
    57ea:	dd 24       	eor	r13, r13
    57ec:	60 e0       	ldi	r22, 0x00	; 0
    57ee:	8f 2d       	mov	r24, r15
    57f0:	90 e0       	ldi	r25, 0x00	; 0
    57f2:	8c 21       	and	r24, r12
    57f4:	9d 21       	and	r25, r13
    57f6:	89 2b       	or	r24, r25
    57f8:	09 f0       	breq	.+2      	; 0x57fc <_ZN7OneWire5writeEhh+0x30>
    57fa:	61 e0       	ldi	r22, 0x01	; 1
    57fc:	c8 01       	movw	r24, r16
    57fe:	0e 94 b2 2b 	call	0x5764	; 0x5764 <_ZN7OneWire9write_bitEh>
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) {
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    5802:	ff 0c       	add	r15, r15
    5804:	21 96       	adiw	r28, 0x01	; 1
    5806:	c8 30       	cpi	r28, 0x08	; 8
    5808:	d1 05       	cpc	r29, r1
    580a:	81 f7       	brne	.-32     	; 0x57ec <_ZN7OneWire5writeEhh+0x20>
	OneWire::write_bit( (bitMask & v)?1:0);
    }
    if ( !power) {
    580c:	ee 20       	and	r14, r14
    580e:	a9 f4       	brne	.+42     	; 0x583a <_ZN7OneWire5writeEhh+0x6e>
	noInterrupts();
    5810:	f8 94       	cli
	DIRECT_MODE_INPUT(baseReg, bitmask);
    5812:	d8 01       	movw	r26, r16
    5814:	11 96       	adiw	r26, 0x01	; 1
    5816:	ed 91       	ld	r30, X+
    5818:	fc 91       	ld	r31, X
    581a:	12 97       	sbiw	r26, 0x02	; 2
    581c:	91 81       	ldd	r25, Z+1	; 0x01
    581e:	8c 91       	ld	r24, X
    5820:	80 95       	com	r24
    5822:	98 23       	and	r25, r24
    5824:	91 83       	std	Z+1, r25	; 0x01
	DIRECT_WRITE_LOW(baseReg, bitmask);
    5826:	11 96       	adiw	r26, 0x01	; 1
    5828:	ed 91       	ld	r30, X+
    582a:	fc 91       	ld	r31, X
    582c:	12 97       	sbiw	r26, 0x02	; 2
    582e:	92 81       	ldd	r25, Z+2	; 0x02
    5830:	8c 91       	ld	r24, X
    5832:	80 95       	com	r24
    5834:	98 23       	and	r25, r24
    5836:	92 83       	std	Z+2, r25	; 0x02
	interrupts();
    5838:	78 94       	sei
    }
}
    583a:	df 91       	pop	r29
    583c:	cf 91       	pop	r28
    583e:	1f 91       	pop	r17
    5840:	0f 91       	pop	r16
    5842:	ff 90       	pop	r15
    5844:	ef 90       	pop	r14
    5846:	df 90       	pop	r13
    5848:	cf 90       	pop	r12
    584a:	08 95       	ret

0000584c <_ZN7OneWire6selectEPKh>:
}

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
    584c:	ef 92       	push	r14
    584e:	ff 92       	push	r15
    5850:	0f 93       	push	r16
    5852:	1f 93       	push	r17
    5854:	cf 93       	push	r28
    5856:	df 93       	push	r29
    5858:	8c 01       	movw	r16, r24
    585a:	7b 01       	movw	r14, r22
{
    uint8_t i;

    write(0x55);           // Choose ROM
    585c:	65 e5       	ldi	r22, 0x55	; 85
    585e:	40 e0       	ldi	r20, 0x00	; 0
    5860:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <_ZN7OneWire5writeEhh>
    5864:	c0 e0       	ldi	r28, 0x00	; 0
    5866:	d0 e0       	ldi	r29, 0x00	; 0

    for (i = 0; i < 8; i++) write(rom[i]);
    5868:	f7 01       	movw	r30, r14
    586a:	ec 0f       	add	r30, r28
    586c:	fd 1f       	adc	r31, r29
    586e:	c8 01       	movw	r24, r16
    5870:	60 81       	ld	r22, Z
    5872:	40 e0       	ldi	r20, 0x00	; 0
    5874:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <_ZN7OneWire5writeEhh>
    5878:	21 96       	adiw	r28, 0x01	; 1
    587a:	c8 30       	cpi	r28, 0x08	; 8
    587c:	d1 05       	cpc	r29, r1
    587e:	a1 f7       	brne	.-24     	; 0x5868 <_ZN7OneWire6selectEPKh+0x1c>
}
    5880:	df 91       	pop	r29
    5882:	cf 91       	pop	r28
    5884:	1f 91       	pop	r17
    5886:	0f 91       	pop	r16
    5888:	ff 90       	pop	r15
    588a:	ef 90       	pop	r14
    588c:	08 95       	ret

0000588e <_ZN7OneWire5resetEv>:
// the bus to come high, if it doesn't then it is broken or shorted
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
    588e:	df 92       	push	r13
    5890:	ef 92       	push	r14
    5892:	ff 92       	push	r15
    5894:	0f 93       	push	r16
    5896:	1f 93       	push	r17
    5898:	cf 93       	push	r28
    589a:	df 93       	push	r29
    589c:	fc 01       	movw	r30, r24
{
	IO_REG_TYPE mask = bitmask;
    589e:	00 81       	ld	r16, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    58a0:	c1 81       	ldd	r28, Z+1	; 0x01
    58a2:	d2 81       	ldd	r29, Z+2	; 0x02
	uint8_t r;
	uint8_t retries = 125;

	noInterrupts();
    58a4:	f8 94       	cli
	DIRECT_MODE_INPUT(reg, mask);
    58a6:	89 81       	ldd	r24, Y+1	; 0x01
    58a8:	d0 2e       	mov	r13, r16
    58aa:	d0 94       	com	r13
    58ac:	8d 21       	and	r24, r13
    58ae:	89 83       	std	Y+1, r24	; 0x01
	interrupts();
    58b0:	78 94       	sei
    58b2:	1d e7       	ldi	r17, 0x7D	; 125
	// wait until the wire is high... just in case
	do {
    58b4:	e0 2e       	mov	r14, r16
    58b6:	ff 24       	eor	r15, r15
		if (--retries == 0) return 0;
    58b8:	11 50       	subi	r17, 0x01	; 1
    58ba:	59 f1       	breq	.+86     	; 0x5912 <_ZN7OneWire5resetEv+0x84>
		delayMicroseconds(2);
    58bc:	82 e0       	ldi	r24, 0x02	; 2
    58be:	90 e0       	ldi	r25, 0x00	; 0
    58c0:	0e 94 78 32 	call	0x64f0	; 0x64f0 <delayMicroseconds>

	noInterrupts();
	DIRECT_MODE_INPUT(reg, mask);
	interrupts();
	// wait until the wire is high... just in case
	do {
    58c4:	88 81       	ld	r24, Y
    58c6:	90 e0       	ldi	r25, 0x00	; 0
    58c8:	8e 21       	and	r24, r14
    58ca:	9f 21       	and	r25, r15
    58cc:	89 2b       	or	r24, r25
    58ce:	a1 f3       	breq	.-24     	; 0x58b8 <_ZN7OneWire5resetEv+0x2a>
		if (--retries == 0) return 0;
		delayMicroseconds(2);
	} while ( !DIRECT_READ(reg, mask));

	noInterrupts();
    58d0:	f8 94       	cli
	DIRECT_WRITE_LOW(reg, mask);
    58d2:	8a 81       	ldd	r24, Y+2	; 0x02
    58d4:	8d 21       	and	r24, r13
    58d6:	8a 83       	std	Y+2, r24	; 0x02
	DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    58d8:	89 81       	ldd	r24, Y+1	; 0x01
    58da:	80 2b       	or	r24, r16
    58dc:	89 83       	std	Y+1, r24	; 0x01
	interrupts();
    58de:	78 94       	sei
	delayMicroseconds(480);
    58e0:	80 ee       	ldi	r24, 0xE0	; 224
    58e2:	91 e0       	ldi	r25, 0x01	; 1
    58e4:	0e 94 78 32 	call	0x64f0	; 0x64f0 <delayMicroseconds>
	noInterrupts();
    58e8:	f8 94       	cli
	DIRECT_MODE_INPUT(reg, mask);	// allow it to float
    58ea:	89 81       	ldd	r24, Y+1	; 0x01
    58ec:	8d 21       	and	r24, r13
    58ee:	89 83       	std	Y+1, r24	; 0x01
	delayMicroseconds(70);
    58f0:	86 e4       	ldi	r24, 0x46	; 70
    58f2:	90 e0       	ldi	r25, 0x00	; 0
    58f4:	0e 94 78 32 	call	0x64f0	; 0x64f0 <delayMicroseconds>
	r = !DIRECT_READ(reg, mask);
    58f8:	88 81       	ld	r24, Y
    58fa:	10 e0       	ldi	r17, 0x00	; 0
    58fc:	90 e0       	ldi	r25, 0x00	; 0
    58fe:	e8 22       	and	r14, r24
    5900:	f9 22       	and	r15, r25
    5902:	ef 28       	or	r14, r15
    5904:	09 f4       	brne	.+2      	; 0x5908 <_ZN7OneWire5resetEv+0x7a>
    5906:	11 e0       	ldi	r17, 0x01	; 1
	interrupts();
    5908:	78 94       	sei
	delayMicroseconds(410);
    590a:	8a e9       	ldi	r24, 0x9A	; 154
    590c:	91 e0       	ldi	r25, 0x01	; 1
    590e:	0e 94 78 32 	call	0x64f0	; 0x64f0 <delayMicroseconds>
	return r;
}
    5912:	81 2f       	mov	r24, r17
    5914:	df 91       	pop	r29
    5916:	cf 91       	pop	r28
    5918:	1f 91       	pop	r17
    591a:	0f 91       	pop	r16
    591c:	ff 90       	pop	r15
    591e:	ef 90       	pop	r14
    5920:	df 90       	pop	r13
    5922:	08 95       	ret

00005924 <_ZN7OneWire6searchEPh>:
// Perform the 1-Wire Search Algorithm on the 1-Wire bus using the existing
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
    5924:	af 92       	push	r10
    5926:	bf 92       	push	r11
    5928:	df 92       	push	r13
    592a:	ef 92       	push	r14
    592c:	ff 92       	push	r15
    592e:	0f 93       	push	r16
    5930:	1f 93       	push	r17
    5932:	cf 93       	push	r28
    5934:	df 93       	push	r29
    5936:	ec 01       	movw	r28, r24
    5938:	5b 01       	movw	r10, r22
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = 0;

   // if the last call was not the last one
   if (!LastDeviceFlag)
    593a:	8d 85       	ldd	r24, Y+13	; 0x0d
    593c:	88 23       	and	r24, r24
    593e:	09 f0       	breq	.+2      	; 0x5942 <_ZN7OneWire6searchEPh+0x1e>
    5940:	61 c0       	rjmp	.+194    	; 0x5a04 <_ZN7OneWire6searchEPh+0xe0>
   {
      // 1-Wire reset
      if (!reset())
    5942:	ce 01       	movw	r24, r28
    5944:	0e 94 47 2c 	call	0x588e	; 0x588e <_ZN7OneWire5resetEv>
    5948:	88 23       	and	r24, r24
    594a:	29 f4       	brne	.+10     	; 0x5956 <_ZN7OneWire6searchEPh+0x32>
      {
         // reset the search
         LastDiscrepancy = 0;
    594c:	1b 86       	std	Y+11, r1	; 0x0b
         LastDeviceFlag = FALSE;
    594e:	1d 86       	std	Y+13, r1	; 0x0d
         LastFamilyDiscrepancy = 0;
    5950:	1c 86       	std	Y+12, r1	; 0x0c
    5952:	90 e0       	ldi	r25, 0x00	; 0
    5954:	6b c0       	rjmp	.+214    	; 0x5a2c <_ZN7OneWire6searchEPh+0x108>
         return FALSE;
      }

      // issue the search command
      write(0xF0);
    5956:	ce 01       	movw	r24, r28
    5958:	60 ef       	ldi	r22, 0xF0	; 240
    595a:	40 e0       	ldi	r20, 0x00	; 0
    595c:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <_ZN7OneWire5writeEhh>
    5960:	01 e0       	ldi	r16, 0x01	; 1
    5962:	dd 24       	eor	r13, r13
    5964:	ee 24       	eor	r14, r14
    5966:	ff 24       	eor	r15, r15
    5968:	f3 94       	inc	r15

      // loop to do the search
      do
      {
         // read a bit and its complement
         id_bit = read_bit();
    596a:	ce 01       	movw	r24, r28
    596c:	0e 94 61 2b 	call	0x56c2	; 0x56c2 <_ZN7OneWire8read_bitEv>
    5970:	18 2f       	mov	r17, r24
         cmp_id_bit = read_bit();
    5972:	ce 01       	movw	r24, r28
    5974:	0e 94 61 2b 	call	0x56c2	; 0x56c2 <_ZN7OneWire8read_bitEv>

         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1))
    5978:	11 30       	cpi	r17, 0x01	; 1
    597a:	19 f4       	brne	.+6      	; 0x5982 <_ZN7OneWire6searchEPh+0x5e>
    597c:	81 30       	cpi	r24, 0x01	; 1
    597e:	e1 f4       	brne	.+56     	; 0x59b8 <_ZN7OneWire6searchEPh+0x94>
    5980:	39 c0       	rjmp	.+114    	; 0x59f4 <_ZN7OneWire6searchEPh+0xd0>
            break;
         else
         {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit)
    5982:	18 17       	cp	r17, r24
    5984:	09 f5       	brne	.+66     	; 0x59c8 <_ZN7OneWire6searchEPh+0xa4>
               search_direction = id_bit;  // bit write value for search
            else
            {
               // if this discrepancy if before the Last Discrepancy
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy)
    5986:	8b 85       	ldd	r24, Y+11	; 0x0b
    5988:	08 17       	cp	r16, r24
    598a:	70 f4       	brcc	.+28     	; 0x59a8 <_ZN7OneWire6searchEPh+0x84>
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
    598c:	60 e0       	ldi	r22, 0x00	; 0
    598e:	fe 01       	movw	r30, r28
    5990:	ee 0d       	add	r30, r14
    5992:	f1 1d       	adc	r31, r1
    5994:	83 81       	ldd	r24, Z+3	; 0x03
    5996:	90 e0       	ldi	r25, 0x00	; 0
    5998:	2f 2d       	mov	r18, r15
    599a:	30 e0       	ldi	r19, 0x00	; 0
    599c:	82 23       	and	r24, r18
    599e:	93 23       	and	r25, r19
    59a0:	18 16       	cp	r1, r24
    59a2:	19 06       	cpc	r1, r25
    59a4:	4c f0       	brlt	.+18     	; 0x59b8 <_ZN7OneWire6searchEPh+0x94>
    59a6:	03 c0       	rjmp	.+6      	; 0x59ae <_ZN7OneWire6searchEPh+0x8a>
               else
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    59a8:	60 e0       	ldi	r22, 0x00	; 0
    59aa:	08 17       	cp	r16, r24
    59ac:	29 f0       	breq	.+10     	; 0x59b8 <_ZN7OneWire6searchEPh+0x94>
               if (search_direction == 0)
               {
                  last_zero = id_bit_number;

                  // check for Last discrepancy in family
                  if (last_zero < 9)
    59ae:	09 30       	cpi	r16, 0x09	; 9
    59b0:	08 f0       	brcs	.+2      	; 0x59b4 <_ZN7OneWire6searchEPh+0x90>
    59b2:	4c c0       	rjmp	.+152    	; 0x5a4c <_ZN7OneWire6searchEPh+0x128>
                     LastFamilyDiscrepancy = last_zero;
    59b4:	0c 87       	std	Y+12, r16	; 0x0c
    59b6:	4a c0       	rjmp	.+148    	; 0x5a4c <_ZN7OneWire6searchEPh+0x128>
            }

            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
    59b8:	fe 01       	movw	r30, r28
    59ba:	ee 0d       	add	r30, r14
    59bc:	f1 1d       	adc	r31, r1
    59be:	83 81       	ldd	r24, Z+3	; 0x03
    59c0:	8f 29       	or	r24, r15
    59c2:	83 83       	std	Z+3, r24	; 0x03
    59c4:	61 e0       	ldi	r22, 0x01	; 1
    59c6:	09 c0       	rjmp	.+18     	; 0x59da <_ZN7OneWire6searchEPh+0xb6>
    59c8:	61 2f       	mov	r22, r17
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;
    59ca:	fe 01       	movw	r30, r28
    59cc:	ee 0d       	add	r30, r14
    59ce:	f1 1d       	adc	r31, r1
    59d0:	9f 2d       	mov	r25, r15
    59d2:	90 95       	com	r25
    59d4:	83 81       	ldd	r24, Z+3	; 0x03
    59d6:	89 23       	and	r24, r25
    59d8:	83 83       	std	Z+3, r24	; 0x03

            // serial number search direction write bit
            write_bit(search_direction);
    59da:	ce 01       	movw	r24, r28
    59dc:	0e 94 b2 2b 	call	0x5764	; 0x5764 <_ZN7OneWire9write_bitEh>

            // increment the byte counter id_bit_number
            // and shift the mask rom_byte_mask
            id_bit_number++;
    59e0:	0f 5f       	subi	r16, 0xFF	; 255
            rom_byte_mask <<= 1;
    59e2:	ff 0c       	add	r15, r15

            // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
            if (rom_byte_mask == 0)
    59e4:	19 f4       	brne	.+6      	; 0x59ec <_ZN7OneWire6searchEPh+0xc8>
            {
                rom_byte_number++;
    59e6:	e3 94       	inc	r14
    59e8:	ff 24       	eor	r15, r15
    59ea:	f3 94       	inc	r15

      // issue the search command
      write(0xF0);

      // loop to do the search
      do
    59ec:	87 e0       	ldi	r24, 0x07	; 7
    59ee:	8e 15       	cp	r24, r14
    59f0:	08 f0       	brcs	.+2      	; 0x59f4 <_ZN7OneWire6searchEPh+0xd0>
    59f2:	bb cf       	rjmp	.-138    	; 0x596a <_ZN7OneWire6searchEPh+0x46>
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7

      // if the search was successful then
      if (!(id_bit_number < 65))
    59f4:	01 34       	cpi	r16, 0x41	; 65
    59f6:	30 f0       	brcs	.+12     	; 0x5a04 <_ZN7OneWire6searchEPh+0xe0>
      {
         // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
         LastDiscrepancy = last_zero;
    59f8:	db 86       	std	Y+11, r13	; 0x0b

         // check for last device
         if (LastDiscrepancy == 0)
    59fa:	dd 20       	and	r13, r13
    59fc:	11 f5       	brne	.+68     	; 0x5a42 <_ZN7OneWire6searchEPh+0x11e>
            LastDeviceFlag = TRUE;
    59fe:	81 e0       	ldi	r24, 0x01	; 1
    5a00:	8d 87       	std	Y+13, r24	; 0x0d
    5a02:	1f c0       	rjmp	.+62     	; 0x5a42 <_ZN7OneWire6searchEPh+0x11e>
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
   {
      LastDiscrepancy = 0;
    5a04:	1b 86       	std	Y+11, r1	; 0x0b
      LastDeviceFlag = FALSE;
    5a06:	1d 86       	std	Y+13, r1	; 0x0d
      LastFamilyDiscrepancy = 0;
    5a08:	1c 86       	std	Y+12, r1	; 0x0c
    5a0a:	90 e0       	ldi	r25, 0x00	; 0
    5a0c:	de 01       	movw	r26, r28
    5a0e:	20 e0       	ldi	r18, 0x00	; 0
    5a10:	30 e0       	ldi	r19, 0x00	; 0
      search_result = FALSE;
   }
   for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
    5a12:	f5 01       	movw	r30, r10
    5a14:	e2 0f       	add	r30, r18
    5a16:	f3 1f       	adc	r31, r19
    5a18:	13 96       	adiw	r26, 0x03	; 3
    5a1a:	8c 91       	ld	r24, X
    5a1c:	13 97       	sbiw	r26, 0x03	; 3
    5a1e:	80 83       	st	Z, r24
    5a20:	2f 5f       	subi	r18, 0xFF	; 255
    5a22:	3f 4f       	sbci	r19, 0xFF	; 255
    5a24:	11 96       	adiw	r26, 0x01	; 1
    5a26:	28 30       	cpi	r18, 0x08	; 8
    5a28:	31 05       	cpc	r19, r1
    5a2a:	99 f7       	brne	.-26     	; 0x5a12 <_ZN7OneWire6searchEPh+0xee>
   return search_result;
  }
    5a2c:	89 2f       	mov	r24, r25
    5a2e:	df 91       	pop	r29
    5a30:	cf 91       	pop	r28
    5a32:	1f 91       	pop	r17
    5a34:	0f 91       	pop	r16
    5a36:	ff 90       	pop	r15
    5a38:	ef 90       	pop	r14
    5a3a:	df 90       	pop	r13
    5a3c:	bf 90       	pop	r11
    5a3e:	af 90       	pop	r10
    5a40:	08 95       	ret
         search_result = TRUE;
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
    5a42:	8b 81       	ldd	r24, Y+3	; 0x03
    5a44:	88 23       	and	r24, r24
    5a46:	f1 f2       	breq	.-68     	; 0x5a04 <_ZN7OneWire6searchEPh+0xe0>
    5a48:	91 e0       	ldi	r25, 0x01	; 1
    5a4a:	e0 cf       	rjmp	.-64     	; 0x5a0c <_ZN7OneWire6searchEPh+0xe8>
    5a4c:	d0 2e       	mov	r13, r16
    5a4e:	bd cf       	rjmp	.-134    	; 0x59ca <_ZN7OneWire6searchEPh+0xa6>

00005a50 <_ZN7OneWireC1Eh>:
*/

#include "OneWire.h"


OneWire::OneWire(uint8_t pin)
    5a50:	ff 92       	push	r15
    5a52:	0f 93       	push	r16
    5a54:	1f 93       	push	r17
    5a56:	8c 01       	movw	r16, r24
    5a58:	f6 2e       	mov	r15, r22
{
	pinMode(pin, INPUT);
    5a5a:	86 2f       	mov	r24, r22
    5a5c:	60 e0       	ldi	r22, 0x00	; 0
    5a5e:	0e 94 bd 32 	call	0x657a	; 0x657a <pinMode>
	bitmask = PIN_TO_BITMASK(pin);
    5a62:	8f 2d       	mov	r24, r15
    5a64:	90 e0       	ldi	r25, 0x00	; 0
    5a66:	fc 01       	movw	r30, r24
    5a68:	e1 58       	subi	r30, 0x81	; 129
    5a6a:	f7 4f       	sbci	r31, 0xF7	; 247
    5a6c:	e4 91       	lpm	r30, Z+
    5a6e:	d8 01       	movw	r26, r16
    5a70:	ec 93       	st	X, r30
	baseReg = PIN_TO_BASEREG(pin);
    5a72:	85 59       	subi	r24, 0x95	; 149
    5a74:	97 4f       	sbci	r25, 0xF7	; 247
    5a76:	fc 01       	movw	r30, r24
    5a78:	64 91       	lpm	r22, Z+
    5a7a:	e6 2f       	mov	r30, r22
    5a7c:	f0 e0       	ldi	r31, 0x00	; 0
    5a7e:	ee 0f       	add	r30, r30
    5a80:	ff 1f       	adc	r31, r31
    5a82:	ef 59       	subi	r30, 0x9F	; 159
    5a84:	f7 4f       	sbci	r31, 0xF7	; 247
    5a86:	85 91       	lpm	r24, Z+
    5a88:	94 91       	lpm	r25, Z+
    5a8a:	12 96       	adiw	r26, 0x02	; 2
    5a8c:	9c 93       	st	X, r25
    5a8e:	8e 93       	st	-X, r24
    5a90:	11 97       	sbiw	r26, 0x01	; 1
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
  // reset the search state
  LastDiscrepancy = 0;
    5a92:	1b 96       	adiw	r26, 0x0b	; 11
    5a94:	1c 92       	st	X, r1
    5a96:	1b 97       	sbiw	r26, 0x0b	; 11
  LastDeviceFlag = FALSE;
    5a98:	1d 96       	adiw	r26, 0x0d	; 13
    5a9a:	1c 92       	st	X, r1
    5a9c:	1d 97       	sbiw	r26, 0x0d	; 13
  LastFamilyDiscrepancy = 0;
    5a9e:	1c 96       	adiw	r26, 0x0c	; 12
    5aa0:	1c 92       	st	X, r1
    5aa2:	f8 01       	movw	r30, r16
    5aa4:	87 e0       	ldi	r24, 0x07	; 7
    5aa6:	90 e0       	ldi	r25, 0x00	; 0
  for(int i = 7; ; i--) {
    ROM_NO[i] = 0;
    5aa8:	12 86       	std	Z+10, r1	; 0x0a
    5aaa:	31 97       	sbiw	r30, 0x01	; 1
    if ( i == 0) break;
    5aac:	00 97       	sbiw	r24, 0x00	; 0
    5aae:	11 f0       	breq	.+4      	; 0x5ab4 <_ZN7OneWireC1Eh+0x64>
{
  // reset the search state
  LastDiscrepancy = 0;
  LastDeviceFlag = FALSE;
  LastFamilyDiscrepancy = 0;
  for(int i = 7; ; i--) {
    5ab0:	01 97       	sbiw	r24, 0x01	; 1
    5ab2:	fa cf       	rjmp	.-12     	; 0x5aa8 <_ZN7OneWireC1Eh+0x58>
	bitmask = PIN_TO_BITMASK(pin);
	baseReg = PIN_TO_BASEREG(pin);
#if ONEWIRE_SEARCH
	reset_search();
#endif
}
    5ab4:	1f 91       	pop	r17
    5ab6:	0f 91       	pop	r16
    5ab8:	ff 90       	pop	r15
    5aba:	08 95       	ret

00005abc <_ZN17DallasTemperatureC1EP7OneWire>:
extern "C" {
    #include "WConstants.h"
}
#endif

DallasTemperature::DallasTemperature(OneWire* _oneWire)
    5abc:	fc 01       	movw	r30, r24
  #if REQUIRESALARMS
  : _AlarmHandler(&defaultAlarmHandler)
    5abe:	87 e2       	ldi	r24, 0x27	; 39
    5ac0:	9e e2       	ldi	r25, 0x2E	; 46
    5ac2:	92 8b       	std	Z+18, r25	; 0x12
    5ac4:	81 8b       	std	Z+17, r24	; 0x11
  #endif
{
  _wire = _oneWire;
    5ac6:	76 83       	std	Z+6, r23	; 0x06
    5ac8:	65 83       	std	Z+5, r22	; 0x05
  devices = 0;
    5aca:	14 82       	std	Z+4, r1	; 0x04
  parasite = false;
    5acc:	10 82       	st	Z, r1
  bitResolution = 9;
    5ace:	89 e0       	ldi	r24, 0x09	; 9
    5ad0:	81 83       	std	Z+1, r24	; 0x01
  waitForConversion = true;
    5ad2:	81 e0       	ldi	r24, 0x01	; 1
    5ad4:	82 83       	std	Z+2, r24	; 0x02
  checkForConversion = true;
    5ad6:	83 83       	std	Z+3, r24	; 0x03
}
    5ad8:	08 95       	ret

00005ada <_ZN17DallasTemperature14getDeviceCountEv>:

// returns the number of devices found on the bus
uint8_t DallasTemperature::getDeviceCount(void)
{
  return devices;
}
    5ada:	fc 01       	movw	r30, r24
    5adc:	84 81       	ldd	r24, Z+4	; 0x04
    5ade:	08 95       	ret

00005ae0 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>:
{
  return toFahrenheit(getTempCByIndex(deviceIndex));
}

// reads scratchpad and returns the temperature in degrees C
float DallasTemperature::calculateTemperature(uint8_t* deviceAddress, uint8_t* scratchPad)
    5ae0:	6f 92       	push	r6
    5ae2:	7f 92       	push	r7
    5ae4:	8f 92       	push	r8
    5ae6:	9f 92       	push	r9
    5ae8:	af 92       	push	r10
    5aea:	bf 92       	push	r11
    5aec:	cf 92       	push	r12
    5aee:	df 92       	push	r13
    5af0:	ef 92       	push	r14
    5af2:	ff 92       	push	r15
    5af4:	0f 93       	push	r16
    5af6:	1f 93       	push	r17
    5af8:	cf 93       	push	r28
    5afa:	df 93       	push	r29
    5afc:	fb 01       	movw	r30, r22
    5afe:	ea 01       	movw	r28, r20
{
  int16_t rawTemperature = (((int16_t)scratchPad[TEMP_MSB]) << 8) | scratchPad[TEMP_LSB];
    5b00:	99 81       	ldd	r25, Y+1	; 0x01
    5b02:	80 e0       	ldi	r24, 0x00	; 0
    5b04:	28 81       	ld	r18, Y
    5b06:	30 e0       	ldi	r19, 0x00	; 0
    5b08:	28 2b       	or	r18, r24
    5b0a:	39 2b       	or	r19, r25

  switch (deviceAddress[0])
    5b0c:	e0 81       	ld	r30, Z
    5b0e:	e2 32       	cpi	r30, 0x22	; 34
    5b10:	31 f0       	breq	.+12     	; 0x5b1e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3e>
    5b12:	e8 32       	cpi	r30, 0x28	; 40
    5b14:	21 f0       	breq	.+8      	; 0x5b1e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3e>
    5b16:	e0 31       	cpi	r30, 0x10	; 16
    5b18:	09 f0       	breq	.+2      	; 0x5b1c <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3c>
    5b1a:	84 c0       	rjmp	.+264    	; 0x5c24 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
    5b1c:	4b c0       	rjmp	.+150    	; 0x5bb4 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xd4>
  {
    case DS18B20MODEL:
    case DS1822MODEL:
      switch (scratchPad[CONFIGURATION])
    5b1e:	4c 81       	ldd	r20, Y+4	; 0x04
    5b20:	4f 33       	cpi	r20, 0x3F	; 63
    5b22:	29 f1       	breq	.+74     	; 0x5b6e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x8e>
    5b24:	40 34       	cpi	r20, 0x40	; 64
    5b26:	20 f4       	brcc	.+8      	; 0x5b30 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x50>
    5b28:	4f 31       	cpi	r20, 0x1F	; 31
    5b2a:	09 f0       	breq	.+2      	; 0x5b2e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x4e>
    5b2c:	7b c0       	rjmp	.+246    	; 0x5c24 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
    5b2e:	2f c0       	rjmp	.+94     	; 0x5b8e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xae>
    5b30:	4f 35       	cpi	r20, 0x5F	; 95
    5b32:	79 f0       	breq	.+30     	; 0x5b52 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x72>
    5b34:	4f 37       	cpi	r20, 0x7F	; 127
    5b36:	09 f0       	breq	.+2      	; 0x5b3a <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x5a>
    5b38:	75 c0       	rjmp	.+234    	; 0x5c24 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
      {
        case TEMP_12_BIT:
          return (float)rawTemperature * 0.0625;
    5b3a:	b9 01       	movw	r22, r18
    5b3c:	88 27       	eor	r24, r24
    5b3e:	77 fd       	sbrc	r23, 7
    5b40:	80 95       	com	r24
    5b42:	98 2f       	mov	r25, r24
    5b44:	0e 94 79 3c 	call	0x78f2	; 0x78f2 <__floatsisf>
    5b48:	20 e0       	ldi	r18, 0x00	; 0
    5b4a:	30 e0       	ldi	r19, 0x00	; 0
    5b4c:	40 e8       	ldi	r20, 0x80	; 128
    5b4e:	5d e3       	ldi	r21, 0x3D	; 61
    5b50:	2e c0       	rjmp	.+92     	; 0x5bae <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xce>
          break;
        case TEMP_11_BIT:
          return (float)(rawTemperature >> 1) * 0.125;
    5b52:	35 95       	asr	r19
    5b54:	27 95       	ror	r18
    5b56:	b9 01       	movw	r22, r18
    5b58:	88 27       	eor	r24, r24
    5b5a:	77 fd       	sbrc	r23, 7
    5b5c:	80 95       	com	r24
    5b5e:	98 2f       	mov	r25, r24
    5b60:	0e 94 79 3c 	call	0x78f2	; 0x78f2 <__floatsisf>
    5b64:	20 e0       	ldi	r18, 0x00	; 0
    5b66:	30 e0       	ldi	r19, 0x00	; 0
    5b68:	40 e0       	ldi	r20, 0x00	; 0
    5b6a:	5e e3       	ldi	r21, 0x3E	; 62
    5b6c:	20 c0       	rjmp	.+64     	; 0x5bae <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xce>
          break;
        case TEMP_10_BIT:
          return (float)(rawTemperature >> 2) * 0.25;
    5b6e:	35 95       	asr	r19
    5b70:	27 95       	ror	r18
    5b72:	35 95       	asr	r19
    5b74:	27 95       	ror	r18
    5b76:	b9 01       	movw	r22, r18
    5b78:	88 27       	eor	r24, r24
    5b7a:	77 fd       	sbrc	r23, 7
    5b7c:	80 95       	com	r24
    5b7e:	98 2f       	mov	r25, r24
    5b80:	0e 94 79 3c 	call	0x78f2	; 0x78f2 <__floatsisf>
    5b84:	20 e0       	ldi	r18, 0x00	; 0
    5b86:	30 e0       	ldi	r19, 0x00	; 0
    5b88:	40 e8       	ldi	r20, 0x80	; 128
    5b8a:	5e e3       	ldi	r21, 0x3E	; 62
    5b8c:	10 c0       	rjmp	.+32     	; 0x5bae <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xce>
          break;
        case TEMP_9_BIT:
          return (float)(rawTemperature >> 3) * 0.5;
    5b8e:	93 e0       	ldi	r25, 0x03	; 3
    5b90:	35 95       	asr	r19
    5b92:	27 95       	ror	r18
    5b94:	9a 95       	dec	r25
    5b96:	e1 f7       	brne	.-8      	; 0x5b90 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xb0>
    5b98:	b9 01       	movw	r22, r18
    5b9a:	88 27       	eor	r24, r24
    5b9c:	77 fd       	sbrc	r23, 7
    5b9e:	80 95       	com	r24
    5ba0:	98 2f       	mov	r25, r24
    5ba2:	0e 94 79 3c 	call	0x78f2	; 0x78f2 <__floatsisf>
    5ba6:	20 e0       	ldi	r18, 0x00	; 0
    5ba8:	30 e0       	ldi	r19, 0x00	; 0
    5baa:	40 e0       	ldi	r20, 0x00	; 0
    5bac:	5f e3       	ldi	r21, 0x3F	; 63
    5bae:	0e 94 2d 3d 	call	0x7a5a	; 0x7a5a <__mulsf3>
    5bb2:	32 c0       	rjmp	.+100    	; 0x5c18 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x138>
      TEMPERATURE = TEMP_READ - 0.25 + --------------------------
                                               COUNT_PER_C
      */

      // Good spot. Thanks Nic Johns for your contribution
      return (float)(rawTemperature >> 1) - 0.25 +((float)(scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) / (float)scratchPad[COUNT_PER_C] );
    5bb4:	ef 80       	ldd	r14, Y+7	; 0x07
    5bb6:	35 95       	asr	r19
    5bb8:	27 95       	ror	r18
    5bba:	b9 01       	movw	r22, r18
    5bbc:	88 27       	eor	r24, r24
    5bbe:	77 fd       	sbrc	r23, 7
    5bc0:	80 95       	com	r24
    5bc2:	98 2f       	mov	r25, r24
    5bc4:	0e 94 79 3c 	call	0x78f2	; 0x78f2 <__floatsisf>
    5bc8:	20 e0       	ldi	r18, 0x00	; 0
    5bca:	30 e0       	ldi	r19, 0x00	; 0
    5bcc:	40 e8       	ldi	r20, 0x80	; 128
    5bce:	5e e3       	ldi	r21, 0x3E	; 62
    5bd0:	0e 94 75 3b 	call	0x76ea	; 0x76ea <__subsf3>
    5bd4:	3b 01       	movw	r6, r22
    5bd6:	4c 01       	movw	r8, r24
    5bd8:	6e 2d       	mov	r22, r14
    5bda:	70 e0       	ldi	r23, 0x00	; 0
    5bdc:	2e 81       	ldd	r18, Y+6	; 0x06
    5bde:	62 1b       	sub	r22, r18
    5be0:	71 09       	sbc	r23, r1
    5be2:	88 27       	eor	r24, r24
    5be4:	77 fd       	sbrc	r23, 7
    5be6:	80 95       	com	r24
    5be8:	98 2f       	mov	r25, r24
    5bea:	0e 94 79 3c 	call	0x78f2	; 0x78f2 <__floatsisf>
    5bee:	5b 01       	movw	r10, r22
    5bf0:	6c 01       	movw	r12, r24
    5bf2:	ff 24       	eor	r15, r15
    5bf4:	00 e0       	ldi	r16, 0x00	; 0
    5bf6:	10 e0       	ldi	r17, 0x00	; 0
    5bf8:	c8 01       	movw	r24, r16
    5bfa:	b7 01       	movw	r22, r14
    5bfc:	0e 94 77 3c 	call	0x78ee	; 0x78ee <__floatunsisf>
    5c00:	9b 01       	movw	r18, r22
    5c02:	ac 01       	movw	r20, r24
    5c04:	c6 01       	movw	r24, r12
    5c06:	b5 01       	movw	r22, r10
    5c08:	0e 94 de 3b 	call	0x77bc	; 0x77bc <__divsf3>
    5c0c:	9b 01       	movw	r18, r22
    5c0e:	ac 01       	movw	r20, r24
    5c10:	c4 01       	movw	r24, r8
    5c12:	b3 01       	movw	r22, r6
    5c14:	0e 94 76 3b 	call	0x76ec	; 0x76ec <__addsf3>
    5c18:	9b 01       	movw	r18, r22
    5c1a:	ac 01       	movw	r20, r24
      break;
  }
}
    5c1c:	83 2f       	mov	r24, r19
    5c1e:	94 2f       	mov	r25, r20
    5c20:	75 2f       	mov	r23, r21
    5c22:	00 c0       	rjmp	.+0      	; 0x5c24 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
    5c24:	26 2f       	mov	r18, r22
    5c26:	38 2f       	mov	r19, r24
    5c28:	49 2f       	mov	r20, r25
    5c2a:	57 2f       	mov	r21, r23
    5c2c:	b9 01       	movw	r22, r18
    5c2e:	ca 01       	movw	r24, r20
    5c30:	df 91       	pop	r29
    5c32:	cf 91       	pop	r28
    5c34:	1f 91       	pop	r17
    5c36:	0f 91       	pop	r16
    5c38:	ff 90       	pop	r15
    5c3a:	ef 90       	pop	r14
    5c3c:	df 90       	pop	r13
    5c3e:	cf 90       	pop	r12
    5c40:	bf 90       	pop	r11
    5c42:	af 90       	pop	r10
    5c44:	9f 90       	pop	r9
    5c46:	8f 90       	pop	r8
    5c48:	7f 90       	pop	r7
    5c4a:	6f 90       	pop	r6
    5c4c:	08 95       	ret

00005c4e <_ZN17DallasTemperature19defaultAlarmHandlerEPh>:
}

// The default alarm handler
void DallasTemperature::defaultAlarmHandler(uint8_t* deviceAddress)
{
}
    5c4e:	08 95       	ret

00005c50 <_ZN17DallasTemperature15readPowerSupplyEPh>:
  if (parasite) delay(10); // 10ms delay
  _wire->reset();
}

// reads the device's power requirements
bool DallasTemperature::readPowerSupply(uint8_t* deviceAddress)
    5c50:	ef 92       	push	r14
    5c52:	ff 92       	push	r15
    5c54:	0f 93       	push	r16
    5c56:	1f 93       	push	r17
    5c58:	8c 01       	movw	r16, r24
    5c5a:	7b 01       	movw	r14, r22
{
  bool ret = false;
  _wire->reset();
    5c5c:	fc 01       	movw	r30, r24
    5c5e:	85 81       	ldd	r24, Z+5	; 0x05
    5c60:	96 81       	ldd	r25, Z+6	; 0x06
    5c62:	0e 94 47 2c 	call	0x588e	; 0x588e <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
    5c66:	f8 01       	movw	r30, r16
    5c68:	85 81       	ldd	r24, Z+5	; 0x05
    5c6a:	96 81       	ldd	r25, Z+6	; 0x06
    5c6c:	b7 01       	movw	r22, r14
    5c6e:	0e 94 26 2c 	call	0x584c	; 0x584c <_ZN7OneWire6selectEPKh>
  _wire->write(READPOWERSUPPLY);
    5c72:	f8 01       	movw	r30, r16
    5c74:	85 81       	ldd	r24, Z+5	; 0x05
    5c76:	96 81       	ldd	r25, Z+6	; 0x06
    5c78:	64 eb       	ldi	r22, 0xB4	; 180
    5c7a:	40 e0       	ldi	r20, 0x00	; 0
    5c7c:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <_ZN7OneWire5writeEhh>
  if (_wire->read_bit() == 0) ret = true;
    5c80:	f8 01       	movw	r30, r16
    5c82:	85 81       	ldd	r24, Z+5	; 0x05
    5c84:	96 81       	ldd	r25, Z+6	; 0x06
    5c86:	0e 94 61 2b 	call	0x56c2	; 0x56c2 <_ZN7OneWire8read_bitEv>
    5c8a:	f8 2e       	mov	r15, r24
  _wire->reset();
    5c8c:	f8 01       	movw	r30, r16
    5c8e:	85 81       	ldd	r24, Z+5	; 0x05
    5c90:	96 81       	ldd	r25, Z+6	; 0x06
    5c92:	0e 94 47 2c 	call	0x588e	; 0x588e <_ZN7OneWire5resetEv>
    5c96:	80 e0       	ldi	r24, 0x00	; 0
    5c98:	ff 20       	and	r15, r15
    5c9a:	09 f4       	brne	.+2      	; 0x5c9e <_ZN17DallasTemperature15readPowerSupplyEPh+0x4e>
    5c9c:	81 e0       	ldi	r24, 0x01	; 1
  return ret;
}
    5c9e:	1f 91       	pop	r17
    5ca0:	0f 91       	pop	r16
    5ca2:	ff 90       	pop	r15
    5ca4:	ef 90       	pop	r14
    5ca6:	08 95       	ret

00005ca8 <_ZN17DallasTemperature14readScratchPadEPhS0_>:
  readScratchPad(deviceAddress, scratchPad);
  return (_wire->crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]);
}

// read device's scratch pad
void DallasTemperature::readScratchPad(uint8_t* deviceAddress, uint8_t* scratchPad)
    5ca8:	cf 92       	push	r12
    5caa:	df 92       	push	r13
    5cac:	ef 92       	push	r14
    5cae:	ff 92       	push	r15
    5cb0:	0f 93       	push	r16
    5cb2:	1f 93       	push	r17
    5cb4:	8c 01       	movw	r16, r24
    5cb6:	6b 01       	movw	r12, r22
    5cb8:	7a 01       	movw	r14, r20
{
  // send the command
  _wire->reset();
    5cba:	fc 01       	movw	r30, r24
    5cbc:	85 81       	ldd	r24, Z+5	; 0x05
    5cbe:	96 81       	ldd	r25, Z+6	; 0x06
    5cc0:	0e 94 47 2c 	call	0x588e	; 0x588e <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
    5cc4:	f8 01       	movw	r30, r16
    5cc6:	85 81       	ldd	r24, Z+5	; 0x05
    5cc8:	96 81       	ldd	r25, Z+6	; 0x06
    5cca:	b6 01       	movw	r22, r12
    5ccc:	0e 94 26 2c 	call	0x584c	; 0x584c <_ZN7OneWire6selectEPKh>
  _wire->write(READSCRATCH);
    5cd0:	f8 01       	movw	r30, r16
    5cd2:	85 81       	ldd	r24, Z+5	; 0x05
    5cd4:	96 81       	ldd	r25, Z+6	; 0x06
    5cd6:	6e eb       	ldi	r22, 0xBE	; 190
    5cd8:	40 e0       	ldi	r20, 0x00	; 0
    5cda:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <_ZN7OneWire5writeEhh>

  
  // read the response

  // byte 0: temperature LSB
  scratchPad[TEMP_LSB] = _wire->read();
    5cde:	f8 01       	movw	r30, r16
    5ce0:	85 81       	ldd	r24, Z+5	; 0x05
    5ce2:	96 81       	ldd	r25, Z+6	; 0x06
    5ce4:	0e 94 95 2b 	call	0x572a	; 0x572a <_ZN7OneWire4readEv>
    5ce8:	f7 01       	movw	r30, r14
    5cea:	80 83       	st	Z, r24

  // byte 1: temperature MSB
  scratchPad[TEMP_MSB] = _wire->read();
    5cec:	f8 01       	movw	r30, r16
    5cee:	85 81       	ldd	r24, Z+5	; 0x05
    5cf0:	96 81       	ldd	r25, Z+6	; 0x06
    5cf2:	0e 94 95 2b 	call	0x572a	; 0x572a <_ZN7OneWire4readEv>
    5cf6:	f7 01       	movw	r30, r14
    5cf8:	81 83       	std	Z+1, r24	; 0x01

  // byte 2: high alarm temp
  scratchPad[HIGH_ALARM_TEMP] = _wire->read();
    5cfa:	f8 01       	movw	r30, r16
    5cfc:	85 81       	ldd	r24, Z+5	; 0x05
    5cfe:	96 81       	ldd	r25, Z+6	; 0x06
    5d00:	0e 94 95 2b 	call	0x572a	; 0x572a <_ZN7OneWire4readEv>
    5d04:	f7 01       	movw	r30, r14
    5d06:	82 83       	std	Z+2, r24	; 0x02

  // byte 3: low alarm temp
  scratchPad[LOW_ALARM_TEMP] = _wire->read();
    5d08:	f8 01       	movw	r30, r16
    5d0a:	85 81       	ldd	r24, Z+5	; 0x05
    5d0c:	96 81       	ldd	r25, Z+6	; 0x06
    5d0e:	0e 94 95 2b 	call	0x572a	; 0x572a <_ZN7OneWire4readEv>
    5d12:	f7 01       	movw	r30, r14
    5d14:	83 83       	std	Z+3, r24	; 0x03

  // byte 4:
  // DS18S20: store for crc
  // DS18B20 & DS1822: configuration register
  scratchPad[CONFIGURATION] = _wire->read();
    5d16:	f8 01       	movw	r30, r16
    5d18:	85 81       	ldd	r24, Z+5	; 0x05
    5d1a:	96 81       	ldd	r25, Z+6	; 0x06
    5d1c:	0e 94 95 2b 	call	0x572a	; 0x572a <_ZN7OneWire4readEv>
    5d20:	f7 01       	movw	r30, r14
    5d22:	84 83       	std	Z+4, r24	; 0x04

  // byte 5:
  // internal use & crc
  scratchPad[INTERNAL_BYTE] = _wire->read();
    5d24:	f8 01       	movw	r30, r16
    5d26:	85 81       	ldd	r24, Z+5	; 0x05
    5d28:	96 81       	ldd	r25, Z+6	; 0x06
    5d2a:	0e 94 95 2b 	call	0x572a	; 0x572a <_ZN7OneWire4readEv>
    5d2e:	f7 01       	movw	r30, r14
    5d30:	85 83       	std	Z+5, r24	; 0x05

  // byte 6:
  // DS18S20: COUNT_REMAIN
  // DS18B20 & DS1822: store for crc
  scratchPad[COUNT_REMAIN] = _wire->read();
    5d32:	f8 01       	movw	r30, r16
    5d34:	85 81       	ldd	r24, Z+5	; 0x05
    5d36:	96 81       	ldd	r25, Z+6	; 0x06
    5d38:	0e 94 95 2b 	call	0x572a	; 0x572a <_ZN7OneWire4readEv>
    5d3c:	f7 01       	movw	r30, r14
    5d3e:	86 83       	std	Z+6, r24	; 0x06

  // byte 7:
  // DS18S20: COUNT_PER_C
  // DS18B20 & DS1822: store for crc
  scratchPad[COUNT_PER_C] = _wire->read();
    5d40:	f8 01       	movw	r30, r16
    5d42:	85 81       	ldd	r24, Z+5	; 0x05
    5d44:	96 81       	ldd	r25, Z+6	; 0x06
    5d46:	0e 94 95 2b 	call	0x572a	; 0x572a <_ZN7OneWire4readEv>
    5d4a:	f7 01       	movw	r30, r14
    5d4c:	87 83       	std	Z+7, r24	; 0x07

  // byte 8:
  // SCTRACHPAD_CRC
  scratchPad[SCRATCHPAD_CRC] = _wire->read();
    5d4e:	f8 01       	movw	r30, r16
    5d50:	85 81       	ldd	r24, Z+5	; 0x05
    5d52:	96 81       	ldd	r25, Z+6	; 0x06
    5d54:	0e 94 95 2b 	call	0x572a	; 0x572a <_ZN7OneWire4readEv>
    5d58:	f7 01       	movw	r30, r14
    5d5a:	80 87       	std	Z+8, r24	; 0x08

  _wire->reset();
    5d5c:	f8 01       	movw	r30, r16
    5d5e:	85 81       	ldd	r24, Z+5	; 0x05
    5d60:	96 81       	ldd	r25, Z+6	; 0x06
    5d62:	0e 94 47 2c 	call	0x588e	; 0x588e <_ZN7OneWire5resetEv>
}
    5d66:	1f 91       	pop	r17
    5d68:	0f 91       	pop	r16
    5d6a:	ff 90       	pop	r15
    5d6c:	ef 90       	pop	r14
    5d6e:	df 90       	pop	r13
    5d70:	cf 90       	pop	r12
    5d72:	08 95       	ret

00005d74 <_ZN17DallasTemperature21isConversionAvailableEPh>:
bool DallasTemperature::getCheckForConversion()
{
	return checkForConversion;
}

bool DallasTemperature::isConversionAvailable(uint8_t* deviceAddress)
    5d74:	df 93       	push	r29
    5d76:	cf 93       	push	r28
    5d78:	cd b7       	in	r28, 0x3d	; 61
    5d7a:	de b7       	in	r29, 0x3e	; 62
    5d7c:	29 97       	sbiw	r28, 0x09	; 9
    5d7e:	0f b6       	in	r0, 0x3f	; 63
    5d80:	f8 94       	cli
    5d82:	de bf       	out	0x3e, r29	; 62
    5d84:	0f be       	out	0x3f, r0	; 63
    5d86:	cd bf       	out	0x3d, r28	; 61
{
	// Check if the clock has been raised indicating the conversion is complete
  	ScratchPad scratchPad;
  	readScratchPad(deviceAddress, scratchPad);
    5d88:	ae 01       	movw	r20, r28
    5d8a:	4f 5f       	subi	r20, 0xFF	; 255
    5d8c:	5f 4f       	sbci	r21, 0xFF	; 255
    5d8e:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <_ZN17DallasTemperature14readScratchPadEPhS0_>
    5d92:	89 81       	ldd	r24, Y+1	; 0x01
    5d94:	81 11       	cpse	r24, r1
    5d96:	81 e0       	ldi	r24, 0x01	; 1
	return scratchPad[0];
}	
    5d98:	29 96       	adiw	r28, 0x09	; 9
    5d9a:	0f b6       	in	r0, 0x3f	; 63
    5d9c:	f8 94       	cli
    5d9e:	de bf       	out	0x3e, r29	; 62
    5da0:	0f be       	out	0x3f, r0	; 63
    5da2:	cd bf       	out	0x3d, r28	; 61
    5da4:	cf 91       	pop	r28
    5da6:	df 91       	pop	r29
    5da8:	08 95       	ret

00005daa <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>:
  
  return true;
}


void DallasTemperature::blockTillConversionComplete(uint8_t* bitResolution, uint8_t* deviceAddress)
    5daa:	cf 92       	push	r12
    5dac:	df 92       	push	r13
    5dae:	ef 92       	push	r14
    5db0:	ff 92       	push	r15
    5db2:	0f 93       	push	r16
    5db4:	1f 93       	push	r17
    5db6:	cf 93       	push	r28
    5db8:	df 93       	push	r29
    5dba:	ec 01       	movw	r28, r24
    5dbc:	6b 01       	movw	r12, r22
{
	if(deviceAddress != 0 && checkForConversion && !parasite)
    5dbe:	45 2b       	or	r20, r21
    5dc0:	e1 f0       	breq	.+56     	; 0x5dfa <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
    5dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    5dc4:	88 23       	and	r24, r24
    5dc6:	c9 f0       	breq	.+50     	; 0x5dfa <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
    5dc8:	88 81       	ld	r24, Y
    5dca:	88 23       	and	r24, r24
    5dcc:	b1 f4       	brne	.+44     	; 0x5dfa <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
	{
	  	// Continue to check if the IC has responded with a temperature
	  	// NB: Could cause issues with multiple devices (one device may respond faster)
	  	unsigned long start = millis();
    5dce:	0e 94 11 32 	call	0x6422	; 0x6422 <millis>
    5dd2:	7b 01       	movw	r14, r22
    5dd4:	8c 01       	movw	r16, r24
		while(!isConversionAvailable(0) && ((millis() - start) < 750));	
    5dd6:	ce 01       	movw	r24, r28
    5dd8:	60 e0       	ldi	r22, 0x00	; 0
    5dda:	70 e0       	ldi	r23, 0x00	; 0
    5ddc:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <_ZN17DallasTemperature21isConversionAvailableEPh>
    5de0:	88 23       	and	r24, r24
    5de2:	59 f4       	brne	.+22     	; 0x5dfa <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
    5de4:	0e 94 11 32 	call	0x6422	; 0x6422 <millis>
    5de8:	6e 19       	sub	r22, r14
    5dea:	7f 09       	sbc	r23, r15
    5dec:	80 0b       	sbc	r24, r16
    5dee:	91 0b       	sbc	r25, r17
    5df0:	6e 5e       	subi	r22, 0xEE	; 238
    5df2:	72 40       	sbci	r23, 0x02	; 2
    5df4:	80 40       	sbci	r24, 0x00	; 0
    5df6:	90 40       	sbci	r25, 0x00	; 0
    5df8:	70 f3       	brcs	.-36     	; 0x5dd6 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x2c>
	}
	
  	// Wait a fix number of cycles till conversion is complete (based on IC datasheet)
	  switch (*bitResolution)
    5dfa:	f6 01       	movw	r30, r12
    5dfc:	60 81       	ld	r22, Z
    5dfe:	69 30       	cpi	r22, 0x09	; 9
    5e00:	39 f0       	breq	.+14     	; 0x5e10 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x66>
    5e02:	69 30       	cpi	r22, 0x09	; 9
    5e04:	a0 f0       	brcs	.+40     	; 0x5e2e <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x84>
    5e06:	6a 30       	cpi	r22, 0x0A	; 10
    5e08:	41 f0       	breq	.+16     	; 0x5e1a <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x70>
    5e0a:	6b 30       	cpi	r22, 0x0B	; 11
    5e0c:	81 f4       	brne	.+32     	; 0x5e2e <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x84>
    5e0e:	0a c0       	rjmp	.+20     	; 0x5e24 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x7a>
	  {
	    case 9:
	      delay(94);
    5e10:	6e e5       	ldi	r22, 0x5E	; 94
    5e12:	70 e0       	ldi	r23, 0x00	; 0
    5e14:	80 e0       	ldi	r24, 0x00	; 0
    5e16:	90 e0       	ldi	r25, 0x00	; 0
    5e18:	0e c0       	rjmp	.+28     	; 0x5e36 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x8c>
	      break;
	    case 10:
	      delay(188);
    5e1a:	6c eb       	ldi	r22, 0xBC	; 188
    5e1c:	70 e0       	ldi	r23, 0x00	; 0
    5e1e:	80 e0       	ldi	r24, 0x00	; 0
    5e20:	90 e0       	ldi	r25, 0x00	; 0
    5e22:	09 c0       	rjmp	.+18     	; 0x5e36 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x8c>
	      break;
	    case 11:
	      delay(375);
    5e24:	67 e7       	ldi	r22, 0x77	; 119
    5e26:	71 e0       	ldi	r23, 0x01	; 1
    5e28:	80 e0       	ldi	r24, 0x00	; 0
    5e2a:	90 e0       	ldi	r25, 0x00	; 0
    5e2c:	04 c0       	rjmp	.+8      	; 0x5e36 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x8c>
	      break;
	    case 12:
	    default:
	      delay(750);
    5e2e:	6e ee       	ldi	r22, 0xEE	; 238
    5e30:	72 e0       	ldi	r23, 0x02	; 2
    5e32:	80 e0       	ldi	r24, 0x00	; 0
    5e34:	90 e0       	ldi	r25, 0x00	; 0
    5e36:	0e 94 1f 32 	call	0x643e	; 0x643e <delay>
	      break;
	  }

}
    5e3a:	df 91       	pop	r29
    5e3c:	cf 91       	pop	r28
    5e3e:	1f 91       	pop	r17
    5e40:	0f 91       	pop	r16
    5e42:	ff 90       	pop	r15
    5e44:	ef 90       	pop	r14
    5e46:	df 90       	pop	r13
    5e48:	cf 90       	pop	r12
    5e4a:	08 95       	ret

00005e4c <_ZN17DallasTemperature11isConnectedEPhS0_>:
  return isConnected(deviceAddress, scratchPad);
}

// attempt to determine if the device at the given address is connected to the bus
// also allows for updating the read scratchpad
bool DallasTemperature::isConnected(uint8_t* deviceAddress, uint8_t* scratchPad)
    5e4c:	0f 93       	push	r16
    5e4e:	1f 93       	push	r17
    5e50:	8a 01       	movw	r16, r20
{
  readScratchPad(deviceAddress, scratchPad);
    5e52:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <_ZN17DallasTemperature14readScratchPadEPhS0_>
  return (_wire->crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]);
    5e56:	c8 01       	movw	r24, r16
    5e58:	68 e0       	ldi	r22, 0x08	; 8
    5e5a:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <_ZN7OneWire4crc8EPKhh>
    5e5e:	20 e0       	ldi	r18, 0x00	; 0
    5e60:	f8 01       	movw	r30, r16
    5e62:	90 85       	ldd	r25, Z+8	; 0x08
    5e64:	89 17       	cp	r24, r25
    5e66:	09 f4       	brne	.+2      	; 0x5e6a <_ZN17DallasTemperature11isConnectedEPhS0_+0x1e>
    5e68:	21 e0       	ldi	r18, 0x01	; 1
}
    5e6a:	82 2f       	mov	r24, r18
    5e6c:	1f 91       	pop	r17
    5e6e:	0f 91       	pop	r16
    5e70:	08 95       	ret

00005e72 <_ZN17DallasTemperature8getTempCEPh>:
// returns temperature in degrees C or DEVICE_DISCONNECTED if the
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DallasTemperature::getTempC(uint8_t* deviceAddress)
    5e72:	cf 92       	push	r12
    5e74:	df 92       	push	r13
    5e76:	ef 92       	push	r14
    5e78:	ff 92       	push	r15
    5e7a:	0f 93       	push	r16
    5e7c:	1f 93       	push	r17
    5e7e:	df 93       	push	r29
    5e80:	cf 93       	push	r28
    5e82:	cd b7       	in	r28, 0x3d	; 61
    5e84:	de b7       	in	r29, 0x3e	; 62
    5e86:	29 97       	sbiw	r28, 0x09	; 9
    5e88:	0f b6       	in	r0, 0x3f	; 63
    5e8a:	f8 94       	cli
    5e8c:	de bf       	out	0x3e, r29	; 62
    5e8e:	0f be       	out	0x3f, r0	; 63
    5e90:	cd bf       	out	0x3d, r28	; 61
    5e92:	8c 01       	movw	r16, r24
    5e94:	7b 01       	movw	r14, r22
  // TODO: Multiple devices (up to 64) on the same bus may take 
  //       some time to negotiate a response
  // What happens in case of collision?

  ScratchPad scratchPad;
  if (isConnected(deviceAddress, scratchPad)) return calculateTemperature(deviceAddress, scratchPad);
    5e96:	6e 01       	movw	r12, r28
    5e98:	08 94       	sec
    5e9a:	c1 1c       	adc	r12, r1
    5e9c:	d1 1c       	adc	r13, r1
    5e9e:	a6 01       	movw	r20, r12
    5ea0:	0e 94 26 2f 	call	0x5e4c	; 0x5e4c <_ZN17DallasTemperature11isConnectedEPhS0_>
    5ea4:	88 23       	and	r24, r24
    5ea6:	29 f4       	brne	.+10     	; 0x5eb2 <_ZN17DallasTemperature8getTempCEPh+0x40>
    5ea8:	60 e0       	ldi	r22, 0x00	; 0
    5eaa:	70 e0       	ldi	r23, 0x00	; 0
    5eac:	8e ef       	ldi	r24, 0xFE	; 254
    5eae:	92 ec       	ldi	r25, 0xC2	; 194
    5eb0:	05 c0       	rjmp	.+10     	; 0x5ebc <_ZN17DallasTemperature8getTempCEPh+0x4a>
    5eb2:	c8 01       	movw	r24, r16
    5eb4:	b7 01       	movw	r22, r14
    5eb6:	a6 01       	movw	r20, r12
    5eb8:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>
  return DEVICE_DISCONNECTED;
}
    5ebc:	29 96       	adiw	r28, 0x09	; 9
    5ebe:	0f b6       	in	r0, 0x3f	; 63
    5ec0:	f8 94       	cli
    5ec2:	de bf       	out	0x3e, r29	; 62
    5ec4:	0f be       	out	0x3f, r0	; 63
    5ec6:	cd bf       	out	0x3d, r28	; 61
    5ec8:	cf 91       	pop	r28
    5eca:	df 91       	pop	r29
    5ecc:	1f 91       	pop	r17
    5ece:	0f 91       	pop	r16
    5ed0:	ff 90       	pop	r15
    5ed2:	ef 90       	pop	r14
    5ed4:	df 90       	pop	r13
    5ed6:	cf 90       	pop	r12
    5ed8:	08 95       	ret

00005eda <_ZN17DallasTemperature13getResolutionEPh>:
	return bitResolution;
}

// returns the current resolution of the device, 9-12
// returns 0 if device not found
uint8_t DallasTemperature::getResolution(uint8_t* deviceAddress)
    5eda:	df 93       	push	r29
    5edc:	cf 93       	push	r28
    5ede:	cd b7       	in	r28, 0x3d	; 61
    5ee0:	de b7       	in	r29, 0x3e	; 62
    5ee2:	29 97       	sbiw	r28, 0x09	; 9
    5ee4:	0f b6       	in	r0, 0x3f	; 63
    5ee6:	f8 94       	cli
    5ee8:	de bf       	out	0x3e, r29	; 62
    5eea:	0f be       	out	0x3f, r0	; 63
    5eec:	cd bf       	out	0x3d, r28	; 61
    5eee:	9c 01       	movw	r18, r24
    5ef0:	fb 01       	movw	r30, r22
{
  if (deviceAddress[0] == DS18S20MODEL) return 9; // this model has a fixed resolution
    5ef2:	80 81       	ld	r24, Z
    5ef4:	80 31       	cpi	r24, 0x10	; 16
    5ef6:	d9 f0       	breq	.+54     	; 0x5f2e <_ZN17DallasTemperature13getResolutionEPh+0x54>

  ScratchPad scratchPad;
  if (isConnected(deviceAddress, scratchPad))
    5ef8:	c9 01       	movw	r24, r18
    5efa:	ae 01       	movw	r20, r28
    5efc:	4f 5f       	subi	r20, 0xFF	; 255
    5efe:	5f 4f       	sbci	r21, 0xFF	; 255
    5f00:	0e 94 26 2f 	call	0x5e4c	; 0x5e4c <_ZN17DallasTemperature11isConnectedEPhS0_>
    5f04:	88 23       	and	r24, r24
    5f06:	a9 f0       	breq	.+42     	; 0x5f32 <_ZN17DallasTemperature13getResolutionEPh+0x58>
  {
	switch (scratchPad[CONFIGURATION])
    5f08:	8d 81       	ldd	r24, Y+5	; 0x05
    5f0a:	8f 33       	cpi	r24, 0x3F	; 63
    5f0c:	71 f0       	breq	.+28     	; 0x5f2a <_ZN17DallasTemperature13getResolutionEPh+0x50>
    5f0e:	80 34       	cpi	r24, 0x40	; 64
    5f10:	18 f4       	brcc	.+6      	; 0x5f18 <_ZN17DallasTemperature13getResolutionEPh+0x3e>
    5f12:	8f 31       	cpi	r24, 0x1F	; 31
    5f14:	71 f4       	brne	.+28     	; 0x5f32 <_ZN17DallasTemperature13getResolutionEPh+0x58>
    5f16:	0b c0       	rjmp	.+22     	; 0x5f2e <_ZN17DallasTemperature13getResolutionEPh+0x54>
    5f18:	8f 35       	cpi	r24, 0x5F	; 95
    5f1a:	19 f0       	breq	.+6      	; 0x5f22 <_ZN17DallasTemperature13getResolutionEPh+0x48>
    5f1c:	8f 37       	cpi	r24, 0x7F	; 127
    5f1e:	49 f4       	brne	.+18     	; 0x5f32 <_ZN17DallasTemperature13getResolutionEPh+0x58>
    5f20:	02 c0       	rjmp	.+4      	; 0x5f26 <_ZN17DallasTemperature13getResolutionEPh+0x4c>
    5f22:	8b e0       	ldi	r24, 0x0B	; 11
    5f24:	07 c0       	rjmp	.+14     	; 0x5f34 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
    5f26:	8c e0       	ldi	r24, 0x0C	; 12
    5f28:	05 c0       	rjmp	.+10     	; 0x5f34 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
    5f2a:	8a e0       	ldi	r24, 0x0A	; 10
    5f2c:	03 c0       	rjmp	.+6      	; 0x5f34 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
        
      case TEMP_11_BIT:
        return 11;
        
      case TEMP_10_BIT:
        return 10;
    5f2e:	89 e0       	ldi	r24, 0x09	; 9
    5f30:	01 c0       	rjmp	.+2      	; 0x5f34 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
    5f32:	80 e0       	ldi	r24, 0x00	; 0
        return 9;
        
	}
  }
  return 0;
}
    5f34:	29 96       	adiw	r28, 0x09	; 9
    5f36:	0f b6       	in	r0, 0x3f	; 63
    5f38:	f8 94       	cli
    5f3a:	de bf       	out	0x3e, r29	; 62
    5f3c:	0f be       	out	0x3f, r0	; 63
    5f3e:	cd bf       	out	0x3d, r28	; 61
    5f40:	cf 91       	pop	r28
    5f42:	df 91       	pop	r29
    5f44:	08 95       	ret

00005f46 <_ZN17DallasTemperature28requestTemperaturesByAddressEPh>:
}

// sends command for one device to perform a temperature by address
// returns FALSE if device is disconnected
// returns TRUE  otherwise
bool DallasTemperature::requestTemperaturesByAddress(uint8_t* deviceAddress)
    5f46:	ef 92       	push	r14
    5f48:	ff 92       	push	r15
    5f4a:	0f 93       	push	r16
    5f4c:	1f 93       	push	r17
    5f4e:	df 93       	push	r29
    5f50:	cf 93       	push	r28
    5f52:	cd b7       	in	r28, 0x3d	; 61
    5f54:	de b7       	in	r29, 0x3e	; 62
    5f56:	2a 97       	sbiw	r28, 0x0a	; 10
    5f58:	0f b6       	in	r0, 0x3f	; 63
    5f5a:	f8 94       	cli
    5f5c:	de bf       	out	0x3e, r29	; 62
    5f5e:	0f be       	out	0x3f, r0	; 63
    5f60:	cd bf       	out	0x3d, r28	; 61
    5f62:	8c 01       	movw	r16, r24
    5f64:	7b 01       	movw	r14, r22
{

  _wire->reset();
    5f66:	fc 01       	movw	r30, r24
    5f68:	85 81       	ldd	r24, Z+5	; 0x05
    5f6a:	96 81       	ldd	r25, Z+6	; 0x06
    5f6c:	0e 94 47 2c 	call	0x588e	; 0x588e <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
    5f70:	f8 01       	movw	r30, r16
    5f72:	85 81       	ldd	r24, Z+5	; 0x05
    5f74:	96 81       	ldd	r25, Z+6	; 0x06
    5f76:	b7 01       	movw	r22, r14
    5f78:	0e 94 26 2c 	call	0x584c	; 0x584c <_ZN7OneWire6selectEPKh>
  _wire->write(STARTCONVO, parasite);
    5f7c:	f8 01       	movw	r30, r16
    5f7e:	85 81       	ldd	r24, Z+5	; 0x05
    5f80:	96 81       	ldd	r25, Z+6	; 0x06
    5f82:	64 e4       	ldi	r22, 0x44	; 68
    5f84:	40 81       	ld	r20, Z
    5f86:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <_ZN7OneWire5writeEhh>
  
    // check device
  ScratchPad scratchPad;
  if (!isConnected(deviceAddress, scratchPad)) return false;
    5f8a:	c8 01       	movw	r24, r16
    5f8c:	b7 01       	movw	r22, r14
    5f8e:	ae 01       	movw	r20, r28
    5f90:	4e 5f       	subi	r20, 0xFE	; 254
    5f92:	5f 4f       	sbci	r21, 0xFF	; 255
    5f94:	0e 94 26 2f 	call	0x5e4c	; 0x5e4c <_ZN17DallasTemperature11isConnectedEPhS0_>
    5f98:	88 23       	and	r24, r24
    5f9a:	89 f0       	breq	.+34     	; 0x5fbe <_ZN17DallasTemperature28requestTemperaturesByAddressEPh+0x78>
  
  
  // ASYNC mode?
  if (!waitForConversion) return true;   
    5f9c:	f8 01       	movw	r30, r16
    5f9e:	82 81       	ldd	r24, Z+2	; 0x02
    5fa0:	88 23       	and	r24, r24
    5fa2:	61 f0       	breq	.+24     	; 0x5fbc <_ZN17DallasTemperature28requestTemperaturesByAddressEPh+0x76>
  uint8_t bitResolution = getResolution(deviceAddress);
    5fa4:	c8 01       	movw	r24, r16
    5fa6:	b7 01       	movw	r22, r14
    5fa8:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <_ZN17DallasTemperature13getResolutionEPh>
    5fac:	89 83       	std	Y+1, r24	; 0x01
  blockTillConversionComplete(&bitResolution, deviceAddress);
    5fae:	c8 01       	movw	r24, r16
    5fb0:	be 01       	movw	r22, r28
    5fb2:	6f 5f       	subi	r22, 0xFF	; 255
    5fb4:	7f 4f       	sbci	r23, 0xFF	; 255
    5fb6:	a7 01       	movw	r20, r14
    5fb8:	0e 94 d5 2e 	call	0x5daa	; 0x5daa <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>
    5fbc:	81 e0       	ldi	r24, 0x01	; 1
  
  return true;
}
    5fbe:	2a 96       	adiw	r28, 0x0a	; 10
    5fc0:	0f b6       	in	r0, 0x3f	; 63
    5fc2:	f8 94       	cli
    5fc4:	de bf       	out	0x3e, r29	; 62
    5fc6:	0f be       	out	0x3f, r0	; 63
    5fc8:	cd bf       	out	0x3d, r28	; 61
    5fca:	cf 91       	pop	r28
    5fcc:	df 91       	pop	r29
    5fce:	1f 91       	pop	r17
    5fd0:	0f 91       	pop	r16
    5fd2:	ff 90       	pop	r15
    5fd4:	ef 90       	pop	r14
    5fd6:	08 95       	ret

00005fd8 <_ZN17DallasTemperature12validAddressEPh>:
{
  return devices;
}

// returns true if address is valid
bool DallasTemperature::validAddress(uint8_t* deviceAddress)
    5fd8:	0f 93       	push	r16
    5fda:	1f 93       	push	r17
    5fdc:	8b 01       	movw	r16, r22
{
  return (_wire->crc8(deviceAddress, 7) == deviceAddress[7]);
    5fde:	cb 01       	movw	r24, r22
    5fe0:	67 e0       	ldi	r22, 0x07	; 7
    5fe2:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <_ZN7OneWire4crc8EPKhh>
    5fe6:	20 e0       	ldi	r18, 0x00	; 0
    5fe8:	f8 01       	movw	r30, r16
    5fea:	97 81       	ldd	r25, Z+7	; 0x07
    5fec:	89 17       	cp	r24, r25
    5fee:	09 f4       	brne	.+2      	; 0x5ff2 <_ZN17DallasTemperature12validAddressEPh+0x1a>
    5ff0:	21 e0       	ldi	r18, 0x01	; 1
}
    5ff2:	82 2f       	mov	r24, r18
    5ff4:	1f 91       	pop	r17
    5ff6:	0f 91       	pop	r16
    5ff8:	08 95       	ret

00005ffa <_ZN17DallasTemperature10getAddressEPhh>:

// finds an address at a given index on the bus
// returns true if the device was found
bool DallasTemperature::getAddress(uint8_t* deviceAddress, uint8_t index)
    5ffa:	ef 92       	push	r14
    5ffc:	ff 92       	push	r15
    5ffe:	0f 93       	push	r16
    6000:	1f 93       	push	r17
    6002:	cf 93       	push	r28
    6004:	df 93       	push	r29
    6006:	ec 01       	movw	r28, r24
    6008:	7b 01       	movw	r14, r22
    600a:	04 2f       	mov	r16, r20
{
  uint8_t depth = 0;

  _wire->reset_search();
    600c:	8d 81       	ldd	r24, Y+5	; 0x05
    600e:	9e 81       	ldd	r25, Y+6	; 0x06
    6010:	0e 94 43 2b 	call	0x5686	; 0x5686 <_ZN7OneWire12reset_searchEv>
    6014:	10 e0       	ldi	r17, 0x00	; 0
    6016:	07 c0       	rjmp	.+14     	; 0x6026 <_ZN17DallasTemperature10getAddressEPhh+0x2c>

  while (depth <= index && _wire->search(deviceAddress))
  {
    if (depth == index && validAddress(deviceAddress)) return true;
    6018:	ce 01       	movw	r24, r28
    601a:	b7 01       	movw	r22, r14
    601c:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <_ZN17DallasTemperature12validAddressEPh>
    6020:	88 23       	and	r24, r24
    6022:	a9 f0       	breq	.+42     	; 0x604e <_ZN17DallasTemperature10getAddressEPhh+0x54>
    6024:	0a c0       	rjmp	.+20     	; 0x603a <_ZN17DallasTemperature10getAddressEPhh+0x40>
{
  uint8_t depth = 0;

  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
    6026:	8d 81       	ldd	r24, Y+5	; 0x05
    6028:	9e 81       	ldd	r25, Y+6	; 0x06
    602a:	b7 01       	movw	r22, r14
    602c:	0e 94 92 2c 	call	0x5924	; 0x5924 <_ZN7OneWire6searchEPh>
    6030:	88 23       	and	r24, r24
    6032:	29 f0       	breq	.+10     	; 0x603e <_ZN17DallasTemperature10getAddressEPhh+0x44>
  {
    if (depth == index && validAddress(deviceAddress)) return true;
    6034:	10 17       	cp	r17, r16
    6036:	59 f4       	brne	.+22     	; 0x604e <_ZN17DallasTemperature10getAddressEPhh+0x54>
    6038:	ef cf       	rjmp	.-34     	; 0x6018 <_ZN17DallasTemperature10getAddressEPhh+0x1e>
    603a:	81 e0       	ldi	r24, 0x01	; 1
    603c:	01 c0       	rjmp	.+2      	; 0x6040 <_ZN17DallasTemperature10getAddressEPhh+0x46>
    603e:	80 e0       	ldi	r24, 0x00	; 0
    depth++;
  }

  return false;
}
    6040:	df 91       	pop	r29
    6042:	cf 91       	pop	r28
    6044:	1f 91       	pop	r17
    6046:	0f 91       	pop	r16
    6048:	ff 90       	pop	r15
    604a:	ef 90       	pop	r14
    604c:	08 95       	ret
  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
  {
    if (depth == index && validAddress(deviceAddress)) return true;
    depth++;
    604e:	1f 5f       	subi	r17, 0xFF	; 255
{
  uint8_t depth = 0;

  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
    6050:	01 17       	cp	r16, r17
    6052:	a8 f3       	brcs	.-22     	; 0x603e <_ZN17DallasTemperature10getAddressEPhh+0x44>
    6054:	e8 cf       	rjmp	.-48     	; 0x6026 <_ZN17DallasTemperature10getAddressEPhh+0x2c>

00006056 <_ZN17DallasTemperature5beginEv>:
  waitForConversion = true;
  checkForConversion = true;
}

// initialise the bus
void DallasTemperature::begin(void)
    6056:	af 92       	push	r10
    6058:	bf 92       	push	r11
    605a:	cf 92       	push	r12
    605c:	df 92       	push	r13
    605e:	ef 92       	push	r14
    6060:	ff 92       	push	r15
    6062:	0f 93       	push	r16
    6064:	1f 93       	push	r17
    6066:	df 93       	push	r29
    6068:	cf 93       	push	r28
    606a:	cd b7       	in	r28, 0x3d	; 61
    606c:	de b7       	in	r29, 0x3e	; 62
    606e:	61 97       	sbiw	r28, 0x11	; 17
    6070:	0f b6       	in	r0, 0x3f	; 63
    6072:	f8 94       	cli
    6074:	de bf       	out	0x3e, r29	; 62
    6076:	0f be       	out	0x3f, r0	; 63
    6078:	cd bf       	out	0x3d, r28	; 61
    607a:	7c 01       	movw	r14, r24
{
  DeviceAddress deviceAddress;

  _wire->reset_search();
    607c:	fc 01       	movw	r30, r24
    607e:	85 81       	ldd	r24, Z+5	; 0x05
    6080:	96 81       	ldd	r25, Z+6	; 0x06
    6082:	0e 94 43 2b 	call	0x5686	; 0x5686 <_ZN7OneWire12reset_searchEv>
  devices = 0; // Reset the number of devices when we enumerate wire devices
    6086:	f7 01       	movw	r30, r14
    6088:	14 82       	std	Z+4, r1	; 0x04

  while (_wire->search(deviceAddress))
    608a:	6e 01       	movw	r12, r28
    608c:	08 94       	sec
    608e:	c1 1c       	adc	r12, r1
    6090:	d1 1c       	adc	r13, r1
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;

      ScratchPad scratchPad;

      readScratchPad(deviceAddress, scratchPad);
    6092:	79 e0       	ldi	r23, 0x09	; 9
    6094:	a7 2e       	mov	r10, r23
    6096:	b1 2c       	mov	r11, r1
    6098:	ac 0e       	add	r10, r28
    609a:	bd 1e       	adc	r11, r29

  while (_wire->search(deviceAddress))
  {
    if (validAddress(deviceAddress))
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;
    609c:	01 e0       	ldi	r16, 0x01	; 1
    609e:	2b c0       	rjmp	.+86     	; 0x60f6 <_ZN17DallasTemperature5beginEv+0xa0>
  _wire->reset_search();
  devices = 0; // Reset the number of devices when we enumerate wire devices

  while (_wire->search(deviceAddress))
  {
    if (validAddress(deviceAddress))
    60a0:	c7 01       	movw	r24, r14
    60a2:	b6 01       	movw	r22, r12
    60a4:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <_ZN17DallasTemperature12validAddressEPh>
    60a8:	88 23       	and	r24, r24
    60aa:	29 f1       	breq	.+74     	; 0x60f6 <_ZN17DallasTemperature5beginEv+0xa0>
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;
    60ac:	f7 01       	movw	r30, r14
    60ae:	80 81       	ld	r24, Z
    60b0:	88 23       	and	r24, r24
    60b2:	41 f4       	brne	.+16     	; 0x60c4 <_ZN17DallasTemperature5beginEv+0x6e>
    60b4:	c7 01       	movw	r24, r14
    60b6:	b6 01       	movw	r22, r12
    60b8:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <_ZN17DallasTemperature15readPowerSupplyEPh>
    60bc:	88 23       	and	r24, r24
    60be:	11 f0       	breq	.+4      	; 0x60c4 <_ZN17DallasTemperature5beginEv+0x6e>
    60c0:	f7 01       	movw	r30, r14
    60c2:	00 83       	st	Z, r16

      ScratchPad scratchPad;

      readScratchPad(deviceAddress, scratchPad);
    60c4:	c7 01       	movw	r24, r14
    60c6:	b6 01       	movw	r22, r12
    60c8:	a5 01       	movw	r20, r10
    60ca:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <_ZN17DallasTemperature14readScratchPadEPhS0_>

	  bitResolution = max(bitResolution, getResolution(deviceAddress));
    60ce:	f7 01       	movw	r30, r14
    60d0:	11 81       	ldd	r17, Z+1	; 0x01
    60d2:	c7 01       	movw	r24, r14
    60d4:	b6 01       	movw	r22, r12
    60d6:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <_ZN17DallasTemperature13getResolutionEPh>
    60da:	81 17       	cp	r24, r17
    60dc:	18 f4       	brcc	.+6      	; 0x60e4 <_ZN17DallasTemperature5beginEv+0x8e>
    60de:	f7 01       	movw	r30, r14
    60e0:	81 81       	ldd	r24, Z+1	; 0x01
    60e2:	04 c0       	rjmp	.+8      	; 0x60ec <_ZN17DallasTemperature5beginEv+0x96>
    60e4:	c7 01       	movw	r24, r14
    60e6:	b6 01       	movw	r22, r12
    60e8:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <_ZN17DallasTemperature13getResolutionEPh>
    60ec:	f7 01       	movw	r30, r14
    60ee:	81 83       	std	Z+1, r24	; 0x01

      devices++;
    60f0:	84 81       	ldd	r24, Z+4	; 0x04
    60f2:	8f 5f       	subi	r24, 0xFF	; 255
    60f4:	84 83       	std	Z+4, r24	; 0x04
  DeviceAddress deviceAddress;

  _wire->reset_search();
  devices = 0; // Reset the number of devices when we enumerate wire devices

  while (_wire->search(deviceAddress))
    60f6:	f7 01       	movw	r30, r14
    60f8:	85 81       	ldd	r24, Z+5	; 0x05
    60fa:	96 81       	ldd	r25, Z+6	; 0x06
    60fc:	b6 01       	movw	r22, r12
    60fe:	0e 94 92 2c 	call	0x5924	; 0x5924 <_ZN7OneWire6searchEPh>
    6102:	88 23       	and	r24, r24
    6104:	69 f6       	brne	.-102    	; 0x60a0 <_ZN17DallasTemperature5beginEv+0x4a>
	  bitResolution = max(bitResolution, getResolution(deviceAddress));

      devices++;
    }
  }
}
    6106:	61 96       	adiw	r28, 0x11	; 17
    6108:	0f b6       	in	r0, 0x3f	; 63
    610a:	f8 94       	cli
    610c:	de bf       	out	0x3e, r29	; 62
    610e:	0f be       	out	0x3f, r0	; 63
    6110:	cd bf       	out	0x3d, r28	; 61
    6112:	cf 91       	pop	r28
    6114:	df 91       	pop	r29
    6116:	1f 91       	pop	r17
    6118:	0f 91       	pop	r16
    611a:	ff 90       	pop	r15
    611c:	ef 90       	pop	r14
    611e:	df 90       	pop	r13
    6120:	cf 90       	pop	r12
    6122:	bf 90       	pop	r11
    6124:	af 90       	pop	r10
    6126:	08 95       	ret

00006128 <malloc>:
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	if (len < sizeof(struct __freelist) - sizeof(size_t))
    6128:	0f 93       	push	r16
    612a:	1f 93       	push	r17
    612c:	cf 93       	push	r28
    612e:	df 93       	push	r29
    6130:	bc 01       	movw	r22, r24
    6132:	82 30       	cpi	r24, 0x02	; 2
    6134:	91 05       	cpc	r25, r1
    6136:	10 f4       	brcc	.+4      	; 0x613c <malloc+0x14>
    6138:	62 e0       	ldi	r22, 0x02	; 2
    613a:	70 e0       	ldi	r23, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    613c:	e0 91 dd 03 	lds	r30, 0x03DD
    6140:	f0 91 de 03 	lds	r31, 0x03DE
    6144:	a0 e0       	ldi	r26, 0x00	; 0
    6146:	b0 e0       	ldi	r27, 0x00	; 0
    6148:	40 e0       	ldi	r20, 0x00	; 0
    614a:	50 e0       	ldi	r21, 0x00	; 0
    614c:	24 c0       	rjmp	.+72     	; 0x6196 <malloc+0x6e>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    614e:	80 81       	ld	r24, Z
    6150:	91 81       	ldd	r25, Z+1	; 0x01
    6152:	86 17       	cp	r24, r22
    6154:	97 07       	cpc	r25, r23
    6156:	d0 f0       	brcs	.+52     	; 0x618c <malloc+0x64>
			continue;
		if (fp1->sz == len) {
    6158:	86 17       	cp	r24, r22
    615a:	97 07       	cpc	r25, r23
    615c:	71 f4       	brne	.+28     	; 0x617a <malloc+0x52>
    615e:	82 81       	ldd	r24, Z+2	; 0x02
    6160:	93 81       	ldd	r25, Z+3	; 0x03
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    6162:	10 97       	sbiw	r26, 0x00	; 0
    6164:	29 f0       	breq	.+10     	; 0x6170 <malloc+0x48>
				fp2->nx = fp1->nx;
    6166:	13 96       	adiw	r26, 0x03	; 3
    6168:	9c 93       	st	X, r25
    616a:	8e 93       	st	-X, r24
    616c:	12 97       	sbiw	r26, 0x02	; 2
    616e:	2c c0       	rjmp	.+88     	; 0x61c8 <malloc+0xa0>
			else
				__flp = fp1->nx;
    6170:	90 93 de 03 	sts	0x03DE, r25
    6174:	80 93 dd 03 	sts	0x03DD, r24
    6178:	27 c0       	rjmp	.+78     	; 0x61c8 <malloc+0xa0>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    617a:	41 15       	cp	r20, r1
    617c:	51 05       	cpc	r21, r1
    617e:	19 f0       	breq	.+6      	; 0x6186 <malloc+0x5e>
    6180:	84 17       	cp	r24, r20
    6182:	95 07       	cpc	r25, r21
    6184:	18 f4       	brcc	.+6      	; 0x618c <malloc+0x64>
    6186:	ef 01       	movw	r28, r30
    6188:	8d 01       	movw	r16, r26
    618a:	ac 01       	movw	r20, r24
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    618c:	df 01       	movw	r26, r30
    618e:	82 81       	ldd	r24, Z+2	; 0x02
    6190:	93 81       	ldd	r25, Z+3	; 0x03
    6192:	9c 01       	movw	r18, r24
    6194:	f9 01       	movw	r30, r18
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
    6196:	30 97       	sbiw	r30, 0x00	; 0
    6198:	d1 f6       	brne	.-76     	; 0x614e <malloc+0x26>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    619a:	41 15       	cp	r20, r1
    619c:	51 05       	cpc	r21, r1
    619e:	f9 f0       	breq	.+62     	; 0x61de <malloc+0xb6>
		if (s - len < sizeof(struct __freelist)) {
    61a0:	ca 01       	movw	r24, r20
    61a2:	86 1b       	sub	r24, r22
    61a4:	97 0b       	sbc	r25, r23
    61a6:	84 30       	cpi	r24, 0x04	; 4
    61a8:	91 05       	cpc	r25, r1
    61aa:	80 f4       	brcc	.+32     	; 0x61cc <malloc+0xa4>
    61ac:	8a 81       	ldd	r24, Y+2	; 0x02
    61ae:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    61b0:	01 15       	cp	r16, r1
    61b2:	11 05       	cpc	r17, r1
    61b4:	21 f0       	breq	.+8      	; 0x61be <malloc+0x96>
				sfp2->nx = sfp1->nx;
    61b6:	f8 01       	movw	r30, r16
    61b8:	93 83       	std	Z+3, r25	; 0x03
    61ba:	82 83       	std	Z+2, r24	; 0x02
    61bc:	04 c0       	rjmp	.+8      	; 0x61c6 <malloc+0x9e>
			else
				__flp = sfp1->nx;
    61be:	90 93 de 03 	sts	0x03DE, r25
    61c2:	80 93 dd 03 	sts	0x03DD, r24
			return &(sfp1->nx);
    61c6:	fe 01       	movw	r30, r28
    61c8:	32 96       	adiw	r30, 0x02	; 2
    61ca:	45 c0       	rjmp	.+138    	; 0x6256 <malloc+0x12e>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    61cc:	fe 01       	movw	r30, r28
    61ce:	e8 0f       	add	r30, r24
    61d0:	f9 1f       	adc	r31, r25
    61d2:	61 93       	st	Z+, r22
    61d4:	71 93       	st	Z+, r23
		sfp1->sz = s - sizeof(size_t);
    61d6:	02 97       	sbiw	r24, 0x02	; 2
    61d8:	99 83       	std	Y+1, r25	; 0x01
    61da:	88 83       	st	Y, r24
    61dc:	3c c0       	rjmp	.+120    	; 0x6256 <malloc+0x12e>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
    61de:	80 91 db 03 	lds	r24, 0x03DB
    61e2:	90 91 dc 03 	lds	r25, 0x03DC
    61e6:	89 2b       	or	r24, r25
    61e8:	41 f4       	brne	.+16     	; 0x61fa <malloc+0xd2>
		__brkval = __malloc_heap_start;
    61ea:	80 91 0c 01 	lds	r24, 0x010C
    61ee:	90 91 0d 01 	lds	r25, 0x010D
    61f2:	90 93 dc 03 	sts	0x03DC, r25
    61f6:	80 93 db 03 	sts	0x03DB, r24
	cp = __malloc_heap_end;
    61fa:	40 91 0e 01 	lds	r20, 0x010E
    61fe:	50 91 0f 01 	lds	r21, 0x010F
	if (cp == 0)
    6202:	41 15       	cp	r20, r1
    6204:	51 05       	cpc	r21, r1
    6206:	41 f4       	brne	.+16     	; 0x6218 <malloc+0xf0>
		cp = STACK_POINTER() - __malloc_margin;
    6208:	4d b7       	in	r20, 0x3d	; 61
    620a:	5e b7       	in	r21, 0x3e	; 62
    620c:	80 91 0a 01 	lds	r24, 0x010A
    6210:	90 91 0b 01 	lds	r25, 0x010B
    6214:	48 1b       	sub	r20, r24
    6216:	59 0b       	sbc	r21, r25
	if (cp <= __brkval)
    6218:	20 91 db 03 	lds	r18, 0x03DB
    621c:	30 91 dc 03 	lds	r19, 0x03DC
    6220:	24 17       	cp	r18, r20
    6222:	35 07       	cpc	r19, r21
    6224:	b0 f4       	brcc	.+44     	; 0x6252 <malloc+0x12a>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    6226:	ca 01       	movw	r24, r20
    6228:	82 1b       	sub	r24, r18
    622a:	93 0b       	sbc	r25, r19
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    622c:	86 17       	cp	r24, r22
    622e:	97 07       	cpc	r25, r23
    6230:	80 f0       	brcs	.+32     	; 0x6252 <malloc+0x12a>
    6232:	ab 01       	movw	r20, r22
    6234:	4e 5f       	subi	r20, 0xFE	; 254
    6236:	5f 4f       	sbci	r21, 0xFF	; 255
    6238:	84 17       	cp	r24, r20
    623a:	95 07       	cpc	r25, r21
    623c:	50 f0       	brcs	.+20     	; 0x6252 <malloc+0x12a>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    623e:	42 0f       	add	r20, r18
    6240:	53 1f       	adc	r21, r19
    6242:	50 93 dc 03 	sts	0x03DC, r21
    6246:	40 93 db 03 	sts	0x03DB, r20
		fp1->sz = len;
    624a:	f9 01       	movw	r30, r18
    624c:	61 93       	st	Z+, r22
    624e:	71 93       	st	Z+, r23
    6250:	02 c0       	rjmp	.+4      	; 0x6256 <malloc+0x12e>
		return &(fp1->nx);
    6252:	e0 e0       	ldi	r30, 0x00	; 0
    6254:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
    6256:	cf 01       	movw	r24, r30
    6258:	df 91       	pop	r29
    625a:	cf 91       	pop	r28
    625c:	1f 91       	pop	r17
    625e:	0f 91       	pop	r16
    6260:	08 95       	ret

00006262 <free>:
{
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    6262:	cf 93       	push	r28
    6264:	df 93       	push	r29
    6266:	9c 01       	movw	r18, r24
    6268:	00 97       	sbiw	r24, 0x00	; 0
    626a:	09 f4       	brne	.+2      	; 0x626e <free+0xc>
    626c:	8f c0       	rjmp	.+286    	; 0x638c <free+0x12a>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    626e:	ec 01       	movw	r28, r24
    6270:	22 97       	sbiw	r28, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    6272:	1b 82       	std	Y+3, r1	; 0x03
    6274:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    6276:	60 91 dd 03 	lds	r22, 0x03DD
    627a:	70 91 de 03 	lds	r23, 0x03DE
    627e:	61 15       	cp	r22, r1
    6280:	71 05       	cpc	r23, r1
    6282:	81 f4       	brne	.+32     	; 0x62a4 <free+0x42>
		if ((char *)p + fpnew->sz == __brkval)
    6284:	88 81       	ld	r24, Y
    6286:	99 81       	ldd	r25, Y+1	; 0x01
    6288:	82 0f       	add	r24, r18
    628a:	93 1f       	adc	r25, r19
    628c:	20 91 db 03 	lds	r18, 0x03DB
    6290:	30 91 dc 03 	lds	r19, 0x03DC
    6294:	28 17       	cp	r18, r24
    6296:	39 07       	cpc	r19, r25
    6298:	39 f5       	brne	.+78     	; 0x62e8 <free+0x86>
			__brkval = cpnew;
    629a:	d0 93 dc 03 	sts	0x03DC, r29
    629e:	c0 93 db 03 	sts	0x03DB, r28
    62a2:	74 c0       	rjmp	.+232    	; 0x638c <free+0x12a>
		else
			__flp = fpnew;
    62a4:	db 01       	movw	r26, r22
    62a6:	40 e0       	ldi	r20, 0x00	; 0
    62a8:	50 e0       	ldi	r21, 0x00	; 0
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    62aa:	ac 17       	cp	r26, r28
    62ac:	bd 07       	cpc	r27, r29
    62ae:	08 f1       	brcs	.+66     	; 0x62f2 <free+0x90>
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    62b0:	bb 83       	std	Y+3, r27	; 0x03
    62b2:	aa 83       	std	Y+2, r26	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    62b4:	fe 01       	movw	r30, r28
    62b6:	21 91       	ld	r18, Z+
    62b8:	31 91       	ld	r19, Z+
    62ba:	e2 0f       	add	r30, r18
    62bc:	f3 1f       	adc	r31, r19
    62be:	ae 17       	cp	r26, r30
    62c0:	bf 07       	cpc	r27, r31
    62c2:	79 f4       	brne	.+30     	; 0x62e2 <free+0x80>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    62c4:	8d 91       	ld	r24, X+
    62c6:	9c 91       	ld	r25, X
    62c8:	11 97       	sbiw	r26, 0x01	; 1
    62ca:	28 0f       	add	r18, r24
    62cc:	39 1f       	adc	r19, r25
    62ce:	2e 5f       	subi	r18, 0xFE	; 254
    62d0:	3f 4f       	sbci	r19, 0xFF	; 255
    62d2:	39 83       	std	Y+1, r19	; 0x01
    62d4:	28 83       	st	Y, r18
			fpnew->nx = fp1->nx;
    62d6:	12 96       	adiw	r26, 0x02	; 2
    62d8:	8d 91       	ld	r24, X+
    62da:	9c 91       	ld	r25, X
    62dc:	13 97       	sbiw	r26, 0x03	; 3
    62de:	9b 83       	std	Y+3, r25	; 0x03
    62e0:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (fp2 == 0) {
    62e2:	41 15       	cp	r20, r1
    62e4:	51 05       	cpc	r21, r1
    62e6:	71 f4       	brne	.+28     	; 0x6304 <free+0xa2>
			/* new head of freelist */
			__flp = fpnew;
    62e8:	d0 93 de 03 	sts	0x03DE, r29
    62ec:	c0 93 dd 03 	sts	0x03DD, r28
    62f0:	4d c0       	rjmp	.+154    	; 0x638c <free+0x12a>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    62f2:	12 96       	adiw	r26, 0x02	; 2
    62f4:	8d 91       	ld	r24, X+
    62f6:	9c 91       	ld	r25, X
    62f8:	13 97       	sbiw	r26, 0x03	; 3
    62fa:	ad 01       	movw	r20, r26
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
    62fc:	00 97       	sbiw	r24, 0x00	; 0
    62fe:	11 f0       	breq	.+4      	; 0x6304 <free+0xa2>
    6300:	dc 01       	movw	r26, r24
    6302:	d3 cf       	rjmp	.-90     	; 0x62aa <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    6304:	da 01       	movw	r26, r20
    6306:	13 96       	adiw	r26, 0x03	; 3
    6308:	dc 93       	st	X, r29
    630a:	ce 93       	st	-X, r28
    630c:	12 97       	sbiw	r26, 0x02	; 2
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    630e:	fa 01       	movw	r30, r20
    6310:	21 91       	ld	r18, Z+
    6312:	31 91       	ld	r19, Z+
    6314:	e2 0f       	add	r30, r18
    6316:	f3 1f       	adc	r31, r19
    6318:	ce 17       	cp	r28, r30
    631a:	df 07       	cpc	r29, r31
    631c:	69 f4       	brne	.+26     	; 0x6338 <free+0xd6>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    631e:	88 81       	ld	r24, Y
    6320:	99 81       	ldd	r25, Y+1	; 0x01
    6322:	28 0f       	add	r18, r24
    6324:	39 1f       	adc	r19, r25
    6326:	2e 5f       	subi	r18, 0xFE	; 254
    6328:	3f 4f       	sbci	r19, 0xFF	; 255
    632a:	fa 01       	movw	r30, r20
    632c:	31 83       	std	Z+1, r19	; 0x01
    632e:	20 83       	st	Z, r18
		fp2->nx = fpnew->nx;
    6330:	8a 81       	ldd	r24, Y+2	; 0x02
    6332:	9b 81       	ldd	r25, Y+3	; 0x03
    6334:	93 83       	std	Z+3, r25	; 0x03
    6336:	82 83       	std	Z+2, r24	; 0x02
    6338:	e0 e0       	ldi	r30, 0x00	; 0
    633a:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1->nx != 0;
    633c:	db 01       	movw	r26, r22
    633e:	12 96       	adiw	r26, 0x02	; 2
    6340:	8d 91       	ld	r24, X+
    6342:	9c 91       	ld	r25, X
    6344:	13 97       	sbiw	r26, 0x03	; 3
    6346:	00 97       	sbiw	r24, 0x00	; 0
    6348:	19 f0       	breq	.+6      	; 0x6350 <free+0xee>
    634a:	bc 01       	movw	r22, r24
    634c:	fd 01       	movw	r30, r26
    634e:	f6 cf       	rjmp	.-20     	; 0x633c <free+0xda>
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
    6350:	ab 01       	movw	r20, r22
    6352:	4e 5f       	subi	r20, 0xFE	; 254
    6354:	5f 4f       	sbci	r21, 0xFF	; 255
	if (cp2 + fp1->sz == __brkval) {
    6356:	db 01       	movw	r26, r22
    6358:	8d 91       	ld	r24, X+
    635a:	9c 91       	ld	r25, X
    635c:	84 0f       	add	r24, r20
    635e:	95 1f       	adc	r25, r21
    6360:	20 91 db 03 	lds	r18, 0x03DB
    6364:	30 91 dc 03 	lds	r19, 0x03DC
    6368:	28 17       	cp	r18, r24
    636a:	39 07       	cpc	r19, r25
    636c:	79 f4       	brne	.+30     	; 0x638c <free+0x12a>
		if (fp2 == NULL)
    636e:	30 97       	sbiw	r30, 0x00	; 0
    6370:	29 f4       	brne	.+10     	; 0x637c <free+0x11a>
			/* Freelist is empty now. */
			__flp = NULL;
    6372:	10 92 de 03 	sts	0x03DE, r1
    6376:	10 92 dd 03 	sts	0x03DD, r1
    637a:	02 c0       	rjmp	.+4      	; 0x6380 <free+0x11e>
		else
			fp2->nx = NULL;
    637c:	13 82       	std	Z+3, r1	; 0x03
    637e:	12 82       	std	Z+2, r1	; 0x02
		__brkval = cp2 - sizeof(size_t);
    6380:	42 50       	subi	r20, 0x02	; 2
    6382:	50 40       	sbci	r21, 0x00	; 0
    6384:	50 93 dc 03 	sts	0x03DC, r21
    6388:	40 93 db 03 	sts	0x03DB, r20
	}
}
    638c:	df 91       	pop	r29
    638e:	cf 91       	pop	r28
    6390:	08 95       	ret

00006392 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    6392:	1f 92       	push	r1
    6394:	0f 92       	push	r0
    6396:	0f b6       	in	r0, 0x3f	; 63
    6398:	0f 92       	push	r0
    639a:	11 24       	eor	r1, r1
    639c:	2f 93       	push	r18
    639e:	3f 93       	push	r19
    63a0:	8f 93       	push	r24
    63a2:	9f 93       	push	r25
    63a4:	af 93       	push	r26
    63a6:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    63a8:	80 91 2b 03 	lds	r24, 0x032B
    63ac:	90 91 2c 03 	lds	r25, 0x032C
    63b0:	a0 91 2d 03 	lds	r26, 0x032D
    63b4:	b0 91 2e 03 	lds	r27, 0x032E
	unsigned char f = timer0_fract;
    63b8:	30 91 2f 03 	lds	r19, 0x032F

	m += MILLIS_INC;
    63bc:	01 96       	adiw	r24, 0x01	; 1
    63be:	a1 1d       	adc	r26, r1
    63c0:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    63c2:	23 2f       	mov	r18, r19
    63c4:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    63c6:	2d 37       	cpi	r18, 0x7D	; 125
    63c8:	20 f0       	brcs	.+8      	; 0x63d2 <__vector_16+0x40>
		f -= FRACT_MAX;
    63ca:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    63cc:	01 96       	adiw	r24, 0x01	; 1
    63ce:	a1 1d       	adc	r26, r1
    63d0:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    63d2:	20 93 2f 03 	sts	0x032F, r18
	timer0_millis = m;
    63d6:	80 93 2b 03 	sts	0x032B, r24
    63da:	90 93 2c 03 	sts	0x032C, r25
    63de:	a0 93 2d 03 	sts	0x032D, r26
    63e2:	b0 93 2e 03 	sts	0x032E, r27
	timer0_overflow_count++;
    63e6:	80 91 27 03 	lds	r24, 0x0327
    63ea:	90 91 28 03 	lds	r25, 0x0328
    63ee:	a0 91 29 03 	lds	r26, 0x0329
    63f2:	b0 91 2a 03 	lds	r27, 0x032A
    63f6:	01 96       	adiw	r24, 0x01	; 1
    63f8:	a1 1d       	adc	r26, r1
    63fa:	b1 1d       	adc	r27, r1
    63fc:	80 93 27 03 	sts	0x0327, r24
    6400:	90 93 28 03 	sts	0x0328, r25
    6404:	a0 93 29 03 	sts	0x0329, r26
    6408:	b0 93 2a 03 	sts	0x032A, r27
}
    640c:	bf 91       	pop	r27
    640e:	af 91       	pop	r26
    6410:	9f 91       	pop	r25
    6412:	8f 91       	pop	r24
    6414:	3f 91       	pop	r19
    6416:	2f 91       	pop	r18
    6418:	0f 90       	pop	r0
    641a:	0f be       	out	0x3f, r0	; 63
    641c:	0f 90       	pop	r0
    641e:	1f 90       	pop	r1
    6420:	18 95       	reti

00006422 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    6422:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    6424:	f8 94       	cli
	m = timer0_millis;
    6426:	20 91 2b 03 	lds	r18, 0x032B
    642a:	30 91 2c 03 	lds	r19, 0x032C
    642e:	40 91 2d 03 	lds	r20, 0x032D
    6432:	50 91 2e 03 	lds	r21, 0x032E
	SREG = oldSREG;
    6436:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    6438:	b9 01       	movw	r22, r18
    643a:	ca 01       	movw	r24, r20
    643c:	08 95       	ret

0000643e <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    643e:	9b 01       	movw	r18, r22
    6440:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    6442:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    6444:	f8 94       	cli
	m = timer0_overflow_count;
    6446:	80 91 27 03 	lds	r24, 0x0327
    644a:	90 91 28 03 	lds	r25, 0x0328
    644e:	a0 91 29 03 	lds	r26, 0x0329
    6452:	b0 91 2a 03 	lds	r27, 0x032A
#if defined(TCNT0)
	t = TCNT0;
    6456:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    6458:	a8 9b       	sbis	0x15, 0	; 21
    645a:	05 c0       	rjmp	.+10     	; 0x6466 <delay+0x28>
    645c:	6f 3f       	cpi	r22, 0xFF	; 255
    645e:	19 f0       	breq	.+6      	; 0x6466 <delay+0x28>
		m++;
    6460:	01 96       	adiw	r24, 0x01	; 1
    6462:	a1 1d       	adc	r26, r1
    6464:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    6466:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    6468:	ba 2f       	mov	r27, r26
    646a:	a9 2f       	mov	r26, r25
    646c:	98 2f       	mov	r25, r24
    646e:	88 27       	eor	r24, r24
    6470:	86 0f       	add	r24, r22
    6472:	91 1d       	adc	r25, r1
    6474:	a1 1d       	adc	r26, r1
    6476:	b1 1d       	adc	r27, r1
    6478:	62 e0       	ldi	r22, 0x02	; 2
    647a:	88 0f       	add	r24, r24
    647c:	99 1f       	adc	r25, r25
    647e:	aa 1f       	adc	r26, r26
    6480:	bb 1f       	adc	r27, r27
    6482:	6a 95       	dec	r22
    6484:	d1 f7       	brne	.-12     	; 0x647a <delay+0x3c>
    6486:	bc 01       	movw	r22, r24
    6488:	2d c0       	rjmp	.+90     	; 0x64e4 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    648a:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    648c:	f8 94       	cli
	m = timer0_overflow_count;
    648e:	80 91 27 03 	lds	r24, 0x0327
    6492:	90 91 28 03 	lds	r25, 0x0328
    6496:	a0 91 29 03 	lds	r26, 0x0329
    649a:	b0 91 2a 03 	lds	r27, 0x032A
#if defined(TCNT0)
	t = TCNT0;
    649e:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    64a0:	a8 9b       	sbis	0x15, 0	; 21
    64a2:	05 c0       	rjmp	.+10     	; 0x64ae <delay+0x70>
    64a4:	ef 3f       	cpi	r30, 0xFF	; 255
    64a6:	19 f0       	breq	.+6      	; 0x64ae <delay+0x70>
		m++;
    64a8:	01 96       	adiw	r24, 0x01	; 1
    64aa:	a1 1d       	adc	r26, r1
    64ac:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    64ae:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    64b0:	ba 2f       	mov	r27, r26
    64b2:	a9 2f       	mov	r26, r25
    64b4:	98 2f       	mov	r25, r24
    64b6:	88 27       	eor	r24, r24
    64b8:	8e 0f       	add	r24, r30
    64ba:	91 1d       	adc	r25, r1
    64bc:	a1 1d       	adc	r26, r1
    64be:	b1 1d       	adc	r27, r1
    64c0:	e2 e0       	ldi	r30, 0x02	; 2
    64c2:	88 0f       	add	r24, r24
    64c4:	99 1f       	adc	r25, r25
    64c6:	aa 1f       	adc	r26, r26
    64c8:	bb 1f       	adc	r27, r27
    64ca:	ea 95       	dec	r30
    64cc:	d1 f7       	brne	.-12     	; 0x64c2 <delay+0x84>
    64ce:	86 1b       	sub	r24, r22
    64d0:	97 0b       	sbc	r25, r23
    64d2:	88 5e       	subi	r24, 0xE8	; 232
    64d4:	93 40       	sbci	r25, 0x03	; 3
    64d6:	c8 f2       	brcs	.-78     	; 0x648a <delay+0x4c>
			ms--;
    64d8:	21 50       	subi	r18, 0x01	; 1
    64da:	30 40       	sbci	r19, 0x00	; 0
    64dc:	40 40       	sbci	r20, 0x00	; 0
    64de:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    64e0:	68 51       	subi	r22, 0x18	; 24
    64e2:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    64e4:	21 15       	cp	r18, r1
    64e6:	31 05       	cpc	r19, r1
    64e8:	41 05       	cpc	r20, r1
    64ea:	51 05       	cpc	r21, r1
    64ec:	71 f6       	brne	.-100    	; 0x648a <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    64ee:	08 95       	ret

000064f0 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    64f0:	01 97       	sbiw	r24, 0x01	; 1
    64f2:	39 f0       	breq	.+14     	; 0x6502 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    64f4:	88 0f       	add	r24, r24
    64f6:	99 1f       	adc	r25, r25
    64f8:	88 0f       	add	r24, r24
    64fa:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    64fc:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    64fe:	01 97       	sbiw	r24, 0x01	; 1
    6500:	f1 f7       	brne	.-4      	; 0x64fe <delayMicroseconds+0xe>
    6502:	08 95       	ret

00006504 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    6504:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    6506:	84 b5       	in	r24, 0x24	; 36
    6508:	82 60       	ori	r24, 0x02	; 2
    650a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    650c:	84 b5       	in	r24, 0x24	; 36
    650e:	81 60       	ori	r24, 0x01	; 1
    6510:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    6512:	85 b5       	in	r24, 0x25	; 37
    6514:	82 60       	ori	r24, 0x02	; 2
    6516:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    6518:	85 b5       	in	r24, 0x25	; 37
    651a:	81 60       	ori	r24, 0x01	; 1
    651c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    651e:	ee e6       	ldi	r30, 0x6E	; 110
    6520:	f0 e0       	ldi	r31, 0x00	; 0
    6522:	80 81       	ld	r24, Z
    6524:	81 60       	ori	r24, 0x01	; 1
    6526:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    6528:	e1 e8       	ldi	r30, 0x81	; 129
    652a:	f0 e0       	ldi	r31, 0x00	; 0
    652c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    652e:	80 81       	ld	r24, Z
    6530:	82 60       	ori	r24, 0x02	; 2
    6532:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    6534:	80 81       	ld	r24, Z
    6536:	81 60       	ori	r24, 0x01	; 1
    6538:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    653a:	e0 e8       	ldi	r30, 0x80	; 128
    653c:	f0 e0       	ldi	r31, 0x00	; 0
    653e:	80 81       	ld	r24, Z
    6540:	81 60       	ori	r24, 0x01	; 1
    6542:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    6544:	e1 eb       	ldi	r30, 0xB1	; 177
    6546:	f0 e0       	ldi	r31, 0x00	; 0
    6548:	80 81       	ld	r24, Z
    654a:	84 60       	ori	r24, 0x04	; 4
    654c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    654e:	e0 eb       	ldi	r30, 0xB0	; 176
    6550:	f0 e0       	ldi	r31, 0x00	; 0
    6552:	80 81       	ld	r24, Z
    6554:	81 60       	ori	r24, 0x01	; 1
    6556:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    6558:	ea e7       	ldi	r30, 0x7A	; 122
    655a:	f0 e0       	ldi	r31, 0x00	; 0
    655c:	80 81       	ld	r24, Z
    655e:	84 60       	ori	r24, 0x04	; 4
    6560:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    6562:	80 81       	ld	r24, Z
    6564:	82 60       	ori	r24, 0x02	; 2
    6566:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    6568:	80 81       	ld	r24, Z
    656a:	81 60       	ori	r24, 0x01	; 1
    656c:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    656e:	80 81       	ld	r24, Z
    6570:	80 68       	ori	r24, 0x80	; 128
    6572:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    6574:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    6578:	08 95       	ret

0000657a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    657a:	cf 93       	push	r28
    657c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    657e:	48 2f       	mov	r20, r24
    6580:	50 e0       	ldi	r21, 0x00	; 0
    6582:	ca 01       	movw	r24, r20
    6584:	81 58       	subi	r24, 0x81	; 129
    6586:	97 4f       	sbci	r25, 0xF7	; 247
    6588:	fc 01       	movw	r30, r24
    658a:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    658c:	45 59       	subi	r20, 0x95	; 149
    658e:	57 4f       	sbci	r21, 0xF7	; 247
    6590:	fa 01       	movw	r30, r20
    6592:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    6594:	88 23       	and	r24, r24
    6596:	69 f1       	breq	.+90     	; 0x65f2 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    6598:	90 e0       	ldi	r25, 0x00	; 0
    659a:	88 0f       	add	r24, r24
    659c:	99 1f       	adc	r25, r25
    659e:	fc 01       	movw	r30, r24
    65a0:	e3 5b       	subi	r30, 0xB3	; 179
    65a2:	f7 4f       	sbci	r31, 0xF7	; 247
    65a4:	a5 91       	lpm	r26, Z+
    65a6:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    65a8:	fc 01       	movw	r30, r24
    65aa:	e9 5a       	subi	r30, 0xA9	; 169
    65ac:	f7 4f       	sbci	r31, 0xF7	; 247
    65ae:	c5 91       	lpm	r28, Z+
    65b0:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    65b2:	66 23       	and	r22, r22
    65b4:	51 f4       	brne	.+20     	; 0x65ca <pinMode+0x50>
		uint8_t oldSREG = SREG;
    65b6:	2f b7       	in	r18, 0x3f	; 63
                cli();
    65b8:	f8 94       	cli
		*reg &= ~bit;
    65ba:	8c 91       	ld	r24, X
    65bc:	93 2f       	mov	r25, r19
    65be:	90 95       	com	r25
    65c0:	89 23       	and	r24, r25
    65c2:	8c 93       	st	X, r24
		*out &= ~bit;
    65c4:	88 81       	ld	r24, Y
    65c6:	89 23       	and	r24, r25
    65c8:	0b c0       	rjmp	.+22     	; 0x65e0 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    65ca:	62 30       	cpi	r22, 0x02	; 2
    65cc:	61 f4       	brne	.+24     	; 0x65e6 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    65ce:	2f b7       	in	r18, 0x3f	; 63
                cli();
    65d0:	f8 94       	cli
		*reg &= ~bit;
    65d2:	8c 91       	ld	r24, X
    65d4:	93 2f       	mov	r25, r19
    65d6:	90 95       	com	r25
    65d8:	89 23       	and	r24, r25
    65da:	8c 93       	st	X, r24
		*out |= bit;
    65dc:	88 81       	ld	r24, Y
    65de:	83 2b       	or	r24, r19
    65e0:	88 83       	st	Y, r24
		SREG = oldSREG;
    65e2:	2f bf       	out	0x3f, r18	; 63
    65e4:	06 c0       	rjmp	.+12     	; 0x65f2 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    65e6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    65e8:	f8 94       	cli
		*reg |= bit;
    65ea:	8c 91       	ld	r24, X
    65ec:	83 2b       	or	r24, r19
    65ee:	8c 93       	st	X, r24
		SREG = oldSREG;
    65f0:	9f bf       	out	0x3f, r25	; 63
	}
}
    65f2:	df 91       	pop	r29
    65f4:	cf 91       	pop	r28
    65f6:	08 95       	ret

000065f8 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    65f8:	48 2f       	mov	r20, r24
    65fa:	50 e0       	ldi	r21, 0x00	; 0
    65fc:	ca 01       	movw	r24, r20
    65fe:	8d 56       	subi	r24, 0x6D	; 109
    6600:	97 4f       	sbci	r25, 0xF7	; 247
    6602:	fc 01       	movw	r30, r24
    6604:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    6606:	ca 01       	movw	r24, r20
    6608:	81 58       	subi	r24, 0x81	; 129
    660a:	97 4f       	sbci	r25, 0xF7	; 247
    660c:	fc 01       	movw	r30, r24
    660e:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    6610:	45 59       	subi	r20, 0x95	; 149
    6612:	57 4f       	sbci	r21, 0xF7	; 247
    6614:	fa 01       	movw	r30, r20
    6616:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    6618:	33 23       	and	r19, r19
    661a:	09 f4       	brne	.+2      	; 0x661e <digitalWrite+0x26>
    661c:	40 c0       	rjmp	.+128    	; 0x669e <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    661e:	22 23       	and	r18, r18
    6620:	51 f1       	breq	.+84     	; 0x6676 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    6622:	23 30       	cpi	r18, 0x03	; 3
    6624:	71 f0       	breq	.+28     	; 0x6642 <digitalWrite+0x4a>
    6626:	24 30       	cpi	r18, 0x04	; 4
    6628:	28 f4       	brcc	.+10     	; 0x6634 <digitalWrite+0x3c>
    662a:	21 30       	cpi	r18, 0x01	; 1
    662c:	a1 f0       	breq	.+40     	; 0x6656 <digitalWrite+0x5e>
    662e:	22 30       	cpi	r18, 0x02	; 2
    6630:	11 f5       	brne	.+68     	; 0x6676 <digitalWrite+0x7e>
    6632:	14 c0       	rjmp	.+40     	; 0x665c <digitalWrite+0x64>
    6634:	26 30       	cpi	r18, 0x06	; 6
    6636:	b1 f0       	breq	.+44     	; 0x6664 <digitalWrite+0x6c>
    6638:	27 30       	cpi	r18, 0x07	; 7
    663a:	c1 f0       	breq	.+48     	; 0x666c <digitalWrite+0x74>
    663c:	24 30       	cpi	r18, 0x04	; 4
    663e:	d9 f4       	brne	.+54     	; 0x6676 <digitalWrite+0x7e>
    6640:	04 c0       	rjmp	.+8      	; 0x664a <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    6642:	80 91 80 00 	lds	r24, 0x0080
    6646:	8f 77       	andi	r24, 0x7F	; 127
    6648:	03 c0       	rjmp	.+6      	; 0x6650 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    664a:	80 91 80 00 	lds	r24, 0x0080
    664e:	8f 7d       	andi	r24, 0xDF	; 223
    6650:	80 93 80 00 	sts	0x0080, r24
    6654:	10 c0       	rjmp	.+32     	; 0x6676 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    6656:	84 b5       	in	r24, 0x24	; 36
    6658:	8f 77       	andi	r24, 0x7F	; 127
    665a:	02 c0       	rjmp	.+4      	; 0x6660 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    665c:	84 b5       	in	r24, 0x24	; 36
    665e:	8f 7d       	andi	r24, 0xDF	; 223
    6660:	84 bd       	out	0x24, r24	; 36
    6662:	09 c0       	rjmp	.+18     	; 0x6676 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    6664:	80 91 b0 00 	lds	r24, 0x00B0
    6668:	8f 77       	andi	r24, 0x7F	; 127
    666a:	03 c0       	rjmp	.+6      	; 0x6672 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    666c:	80 91 b0 00 	lds	r24, 0x00B0
    6670:	8f 7d       	andi	r24, 0xDF	; 223
    6672:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    6676:	e3 2f       	mov	r30, r19
    6678:	f0 e0       	ldi	r31, 0x00	; 0
    667a:	ee 0f       	add	r30, r30
    667c:	ff 1f       	adc	r31, r31
    667e:	e9 5a       	subi	r30, 0xA9	; 169
    6680:	f7 4f       	sbci	r31, 0xF7	; 247
    6682:	a5 91       	lpm	r26, Z+
    6684:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    6686:	2f b7       	in	r18, 0x3f	; 63
	cli();
    6688:	f8 94       	cli

	if (val == LOW) {
    668a:	66 23       	and	r22, r22
    668c:	21 f4       	brne	.+8      	; 0x6696 <digitalWrite+0x9e>
		*out &= ~bit;
    668e:	8c 91       	ld	r24, X
    6690:	90 95       	com	r25
    6692:	89 23       	and	r24, r25
    6694:	02 c0       	rjmp	.+4      	; 0x669a <digitalWrite+0xa2>
	} else {
		*out |= bit;
    6696:	8c 91       	ld	r24, X
    6698:	89 2b       	or	r24, r25
    669a:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    669c:	2f bf       	out	0x3f, r18	; 63
    669e:	08 95       	ret

000066a0 <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    66a0:	68 2f       	mov	r22, r24
    66a2:	70 e0       	ldi	r23, 0x00	; 0
    66a4:	cb 01       	movw	r24, r22
    66a6:	8d 56       	subi	r24, 0x6D	; 109
    66a8:	97 4f       	sbci	r25, 0xF7	; 247
    66aa:	fc 01       	movw	r30, r24
    66ac:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    66ae:	cb 01       	movw	r24, r22
    66b0:	81 58       	subi	r24, 0x81	; 129
    66b2:	97 4f       	sbci	r25, 0xF7	; 247
    66b4:	fc 01       	movw	r30, r24
    66b6:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    66b8:	65 59       	subi	r22, 0x95	; 149
    66ba:	77 4f       	sbci	r23, 0xF7	; 247
    66bc:	fb 01       	movw	r30, r22
    66be:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
    66c0:	99 23       	and	r25, r25
    66c2:	19 f4       	brne	.+6      	; 0x66ca <digitalRead+0x2a>
    66c4:	20 e0       	ldi	r18, 0x00	; 0
    66c6:	30 e0       	ldi	r19, 0x00	; 0
    66c8:	3c c0       	rjmp	.+120    	; 0x6742 <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    66ca:	22 23       	and	r18, r18
    66cc:	51 f1       	breq	.+84     	; 0x6722 <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    66ce:	23 30       	cpi	r18, 0x03	; 3
    66d0:	71 f0       	breq	.+28     	; 0x66ee <digitalRead+0x4e>
    66d2:	24 30       	cpi	r18, 0x04	; 4
    66d4:	28 f4       	brcc	.+10     	; 0x66e0 <digitalRead+0x40>
    66d6:	21 30       	cpi	r18, 0x01	; 1
    66d8:	a1 f0       	breq	.+40     	; 0x6702 <digitalRead+0x62>
    66da:	22 30       	cpi	r18, 0x02	; 2
    66dc:	11 f5       	brne	.+68     	; 0x6722 <digitalRead+0x82>
    66de:	14 c0       	rjmp	.+40     	; 0x6708 <digitalRead+0x68>
    66e0:	26 30       	cpi	r18, 0x06	; 6
    66e2:	b1 f0       	breq	.+44     	; 0x6710 <digitalRead+0x70>
    66e4:	27 30       	cpi	r18, 0x07	; 7
    66e6:	c1 f0       	breq	.+48     	; 0x6718 <digitalRead+0x78>
    66e8:	24 30       	cpi	r18, 0x04	; 4
    66ea:	d9 f4       	brne	.+54     	; 0x6722 <digitalRead+0x82>
    66ec:	04 c0       	rjmp	.+8      	; 0x66f6 <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    66ee:	80 91 80 00 	lds	r24, 0x0080
    66f2:	8f 77       	andi	r24, 0x7F	; 127
    66f4:	03 c0       	rjmp	.+6      	; 0x66fc <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    66f6:	80 91 80 00 	lds	r24, 0x0080
    66fa:	8f 7d       	andi	r24, 0xDF	; 223
    66fc:	80 93 80 00 	sts	0x0080, r24
    6700:	10 c0       	rjmp	.+32     	; 0x6722 <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    6702:	84 b5       	in	r24, 0x24	; 36
    6704:	8f 77       	andi	r24, 0x7F	; 127
    6706:	02 c0       	rjmp	.+4      	; 0x670c <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    6708:	84 b5       	in	r24, 0x24	; 36
    670a:	8f 7d       	andi	r24, 0xDF	; 223
    670c:	84 bd       	out	0x24, r24	; 36
    670e:	09 c0       	rjmp	.+18     	; 0x6722 <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    6710:	80 91 b0 00 	lds	r24, 0x00B0
    6714:	8f 77       	andi	r24, 0x7F	; 127
    6716:	03 c0       	rjmp	.+6      	; 0x671e <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    6718:	80 91 b0 00 	lds	r24, 0x00B0
    671c:	8f 7d       	andi	r24, 0xDF	; 223
    671e:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    6722:	89 2f       	mov	r24, r25
    6724:	90 e0       	ldi	r25, 0x00	; 0
    6726:	88 0f       	add	r24, r24
    6728:	99 1f       	adc	r25, r25
    672a:	8f 59       	subi	r24, 0x9F	; 159
    672c:	97 4f       	sbci	r25, 0xF7	; 247
    672e:	fc 01       	movw	r30, r24
    6730:	a5 91       	lpm	r26, Z+
    6732:	b4 91       	lpm	r27, Z+
    6734:	8c 91       	ld	r24, X
    6736:	20 e0       	ldi	r18, 0x00	; 0
    6738:	30 e0       	ldi	r19, 0x00	; 0
    673a:	84 23       	and	r24, r20
    673c:	11 f0       	breq	.+4      	; 0x6742 <digitalRead+0xa2>
    673e:	21 e0       	ldi	r18, 0x01	; 1
    6740:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    6742:	c9 01       	movw	r24, r18
    6744:	08 95       	ret

00006746 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
    6746:	1f 92       	push	r1
    6748:	0f 92       	push	r0
    674a:	0f b6       	in	r0, 0x3f	; 63
    674c:	0f 92       	push	r0
    674e:	11 24       	eor	r1, r1
    6750:	2f 93       	push	r18
    6752:	3f 93       	push	r19
    6754:	4f 93       	push	r20
    6756:	8f 93       	push	r24
    6758:	9f 93       	push	r25
    675a:	ef 93       	push	r30
    675c:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    675e:	80 91 c0 00 	lds	r24, 0x00C0
    6762:	82 fd       	sbrc	r24, 2
    6764:	1d c0       	rjmp	.+58     	; 0x67a0 <__vector_18+0x5a>
      unsigned char c = UDR0;
    6766:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    676a:	20 91 70 03 	lds	r18, 0x0370
    676e:	30 91 71 03 	lds	r19, 0x0371

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    6772:	2f 5f       	subi	r18, 0xFF	; 255
    6774:	3f 4f       	sbci	r19, 0xFF	; 255
    6776:	2f 73       	andi	r18, 0x3F	; 63
    6778:	30 70       	andi	r19, 0x00	; 0
    677a:	80 91 72 03 	lds	r24, 0x0372
    677e:	90 91 73 03 	lds	r25, 0x0373
    6782:	28 17       	cp	r18, r24
    6784:	39 07       	cpc	r19, r25
    6786:	71 f0       	breq	.+28     	; 0x67a4 <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    6788:	e0 91 70 03 	lds	r30, 0x0370
    678c:	f0 91 71 03 	lds	r31, 0x0371
    6790:	e0 5d       	subi	r30, 0xD0	; 208
    6792:	fc 4f       	sbci	r31, 0xFC	; 252
    6794:	40 83       	st	Z, r20
    buffer->head = i;
    6796:	30 93 71 03 	sts	0x0371, r19
    679a:	20 93 70 03 	sts	0x0370, r18
    679e:	02 c0       	rjmp	.+4      	; 0x67a4 <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    67a0:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    67a4:	ff 91       	pop	r31
    67a6:	ef 91       	pop	r30
    67a8:	9f 91       	pop	r25
    67aa:	8f 91       	pop	r24
    67ac:	4f 91       	pop	r20
    67ae:	3f 91       	pop	r19
    67b0:	2f 91       	pop	r18
    67b2:	0f 90       	pop	r0
    67b4:	0f be       	out	0x3f, r0	; 63
    67b6:	0f 90       	pop	r0
    67b8:	1f 90       	pop	r1
    67ba:	18 95       	reti

000067bc <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    67bc:	e0 91 c4 03 	lds	r30, 0x03C4
    67c0:	f0 91 c5 03 	lds	r31, 0x03C5
    67c4:	e0 5c       	subi	r30, 0xC0	; 192
    67c6:	ff 4f       	sbci	r31, 0xFF	; 255
    67c8:	81 91       	ld	r24, Z+
    67ca:	91 91       	ld	r25, Z+
    67cc:	20 81       	ld	r18, Z
    67ce:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    67d0:	82 1b       	sub	r24, r18
    67d2:	93 0b       	sbc	r25, r19
    67d4:	8f 73       	andi	r24, 0x3F	; 63
    67d6:	90 70       	andi	r25, 0x00	; 0
    67d8:	89 2b       	or	r24, r25
    67da:	11 f0       	breq	.+4      	; 0x67e0 <_Z14serialEventRunv+0x24>
    67dc:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <_Z11serialEventv>
    67e0:	08 95       	ret

000067e2 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    67e2:	1f 92       	push	r1
    67e4:	0f 92       	push	r0
    67e6:	0f b6       	in	r0, 0x3f	; 63
    67e8:	0f 92       	push	r0
    67ea:	11 24       	eor	r1, r1
    67ec:	2f 93       	push	r18
    67ee:	3f 93       	push	r19
    67f0:	8f 93       	push	r24
    67f2:	9f 93       	push	r25
    67f4:	ef 93       	push	r30
    67f6:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    67f8:	20 91 b4 03 	lds	r18, 0x03B4
    67fc:	30 91 b5 03 	lds	r19, 0x03B5
    6800:	80 91 b6 03 	lds	r24, 0x03B6
    6804:	90 91 b7 03 	lds	r25, 0x03B7
    6808:	28 17       	cp	r18, r24
    680a:	39 07       	cpc	r19, r25
    680c:	31 f4       	brne	.+12     	; 0x681a <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    680e:	80 91 c1 00 	lds	r24, 0x00C1
    6812:	8f 7d       	andi	r24, 0xDF	; 223
    6814:	80 93 c1 00 	sts	0x00C1, r24
    6818:	14 c0       	rjmp	.+40     	; 0x6842 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    681a:	e0 91 b6 03 	lds	r30, 0x03B6
    681e:	f0 91 b7 03 	lds	r31, 0x03B7
    6822:	ec 58       	subi	r30, 0x8C	; 140
    6824:	fc 4f       	sbci	r31, 0xFC	; 252
    6826:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    6828:	80 91 b6 03 	lds	r24, 0x03B6
    682c:	90 91 b7 03 	lds	r25, 0x03B7
    6830:	01 96       	adiw	r24, 0x01	; 1
    6832:	8f 73       	andi	r24, 0x3F	; 63
    6834:	90 70       	andi	r25, 0x00	; 0
    6836:	90 93 b7 03 	sts	0x03B7, r25
    683a:	80 93 b6 03 	sts	0x03B6, r24
	
  #if defined(UDR0)
    UDR0 = c;
    683e:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    6842:	ff 91       	pop	r31
    6844:	ef 91       	pop	r30
    6846:	9f 91       	pop	r25
    6848:	8f 91       	pop	r24
    684a:	3f 91       	pop	r19
    684c:	2f 91       	pop	r18
    684e:	0f 90       	pop	r0
    6850:	0f be       	out	0x3f, r0	; 63
    6852:	0f 90       	pop	r0
    6854:	1f 90       	pop	r1
    6856:	18 95       	reti

00006858 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    6858:	af 92       	push	r10
    685a:	bf 92       	push	r11
    685c:	df 92       	push	r13
    685e:	ef 92       	push	r14
    6860:	ff 92       	push	r15
    6862:	0f 93       	push	r16
    6864:	1f 93       	push	r17
    6866:	cf 93       	push	r28
    6868:	df 93       	push	r29
    686a:	ec 01       	movw	r28, r24
    686c:	7a 01       	movw	r14, r20
    686e:	8b 01       	movw	r16, r22
    6870:	dd 24       	eor	r13, r13
    6872:	40 30       	cpi	r20, 0x00	; 0
    6874:	81 ee       	ldi	r24, 0xE1	; 225
    6876:	58 07       	cpc	r21, r24
    6878:	80 e0       	ldi	r24, 0x00	; 0
    687a:	68 07       	cpc	r22, r24
    687c:	80 e0       	ldi	r24, 0x00	; 0
    687e:	78 07       	cpc	r23, r24
    6880:	11 f0       	breq	.+4      	; 0x6886 <_ZN14HardwareSerial5beginEm+0x2e>
    6882:	dd 24       	eor	r13, r13
    6884:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    6886:	91 e0       	ldi	r25, 0x01	; 1
    6888:	a9 2e       	mov	r10, r25
    688a:	b1 2c       	mov	r11, r1
    688c:	ec 89       	ldd	r30, Y+20	; 0x14
    688e:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    6890:	dd 20       	and	r13, r13
    6892:	69 f0       	breq	.+26     	; 0x68ae <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    6894:	c5 01       	movw	r24, r10
    6896:	08 a0       	ldd	r0, Y+32	; 0x20
    6898:	02 c0       	rjmp	.+4      	; 0x689e <_ZN14HardwareSerial5beginEm+0x46>
    689a:	88 0f       	add	r24, r24
    689c:	99 1f       	adc	r25, r25
    689e:	0a 94       	dec	r0
    68a0:	e2 f7       	brpl	.-8      	; 0x689a <_ZN14HardwareSerial5beginEm+0x42>
    68a2:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    68a4:	60 e0       	ldi	r22, 0x00	; 0
    68a6:	79 e0       	ldi	r23, 0x09	; 9
    68a8:	8d e3       	ldi	r24, 0x3D	; 61
    68aa:	90 e0       	ldi	r25, 0x00	; 0
    68ac:	05 c0       	rjmp	.+10     	; 0x68b8 <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    68ae:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    68b0:	60 e8       	ldi	r22, 0x80	; 128
    68b2:	74 e8       	ldi	r23, 0x84	; 132
    68b4:	8e e1       	ldi	r24, 0x1E	; 30
    68b6:	90 e0       	ldi	r25, 0x00	; 0
    68b8:	a8 01       	movw	r20, r16
    68ba:	97 01       	movw	r18, r14
    68bc:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <__udivmodsi4>
    68c0:	21 50       	subi	r18, 0x01	; 1
    68c2:	30 40       	sbci	r19, 0x00	; 0
    68c4:	40 40       	sbci	r20, 0x00	; 0
    68c6:	50 40       	sbci	r21, 0x00	; 0
    68c8:	56 95       	lsr	r21
    68ca:	47 95       	ror	r20
    68cc:	37 95       	ror	r19
    68ce:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    68d0:	80 e1       	ldi	r24, 0x10	; 16
    68d2:	20 30       	cpi	r18, 0x00	; 0
    68d4:	38 07       	cpc	r19, r24
    68d6:	20 f0       	brcs	.+8      	; 0x68e0 <_ZN14HardwareSerial5beginEm+0x88>
    68d8:	dd 20       	and	r13, r13
    68da:	11 f0       	breq	.+4      	; 0x68e0 <_ZN14HardwareSerial5beginEm+0x88>
    68dc:	dd 24       	eor	r13, r13
    68de:	d6 cf       	rjmp	.-84     	; 0x688c <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    68e0:	e8 89       	ldd	r30, Y+16	; 0x10
    68e2:	f9 89       	ldd	r31, Y+17	; 0x11
    68e4:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    68e6:	ea 89       	ldd	r30, Y+18	; 0x12
    68e8:	fb 89       	ldd	r31, Y+19	; 0x13
    68ea:	20 83       	st	Z, r18

  transmitting = false;
    68ec:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    68ee:	ee 89       	ldd	r30, Y+22	; 0x16
    68f0:	ff 89       	ldd	r31, Y+23	; 0x17
    68f2:	40 81       	ld	r20, Z
    68f4:	21 e0       	ldi	r18, 0x01	; 1
    68f6:	30 e0       	ldi	r19, 0x00	; 0
    68f8:	c9 01       	movw	r24, r18
    68fa:	0c 8c       	ldd	r0, Y+28	; 0x1c
    68fc:	02 c0       	rjmp	.+4      	; 0x6902 <_ZN14HardwareSerial5beginEm+0xaa>
    68fe:	88 0f       	add	r24, r24
    6900:	99 1f       	adc	r25, r25
    6902:	0a 94       	dec	r0
    6904:	e2 f7       	brpl	.-8      	; 0x68fe <_ZN14HardwareSerial5beginEm+0xa6>
    6906:	48 2b       	or	r20, r24
    6908:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    690a:	ee 89       	ldd	r30, Y+22	; 0x16
    690c:	ff 89       	ldd	r31, Y+23	; 0x17
    690e:	40 81       	ld	r20, Z
    6910:	c9 01       	movw	r24, r18
    6912:	0d 8c       	ldd	r0, Y+29	; 0x1d
    6914:	02 c0       	rjmp	.+4      	; 0x691a <_ZN14HardwareSerial5beginEm+0xc2>
    6916:	88 0f       	add	r24, r24
    6918:	99 1f       	adc	r25, r25
    691a:	0a 94       	dec	r0
    691c:	e2 f7       	brpl	.-8      	; 0x6916 <_ZN14HardwareSerial5beginEm+0xbe>
    691e:	48 2b       	or	r20, r24
    6920:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    6922:	ee 89       	ldd	r30, Y+22	; 0x16
    6924:	ff 89       	ldd	r31, Y+23	; 0x17
    6926:	40 81       	ld	r20, Z
    6928:	c9 01       	movw	r24, r18
    692a:	0e 8c       	ldd	r0, Y+30	; 0x1e
    692c:	02 c0       	rjmp	.+4      	; 0x6932 <_ZN14HardwareSerial5beginEm+0xda>
    692e:	88 0f       	add	r24, r24
    6930:	99 1f       	adc	r25, r25
    6932:	0a 94       	dec	r0
    6934:	e2 f7       	brpl	.-8      	; 0x692e <_ZN14HardwareSerial5beginEm+0xd6>
    6936:	48 2b       	or	r20, r24
    6938:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    693a:	ee 89       	ldd	r30, Y+22	; 0x16
    693c:	ff 89       	ldd	r31, Y+23	; 0x17
    693e:	80 81       	ld	r24, Z
    6940:	0f 8c       	ldd	r0, Y+31	; 0x1f
    6942:	02 c0       	rjmp	.+4      	; 0x6948 <_ZN14HardwareSerial5beginEm+0xf0>
    6944:	22 0f       	add	r18, r18
    6946:	33 1f       	adc	r19, r19
    6948:	0a 94       	dec	r0
    694a:	e2 f7       	brpl	.-8      	; 0x6944 <_ZN14HardwareSerial5beginEm+0xec>
    694c:	20 95       	com	r18
    694e:	28 23       	and	r18, r24
    6950:	20 83       	st	Z, r18
}
    6952:	df 91       	pop	r29
    6954:	cf 91       	pop	r28
    6956:	1f 91       	pop	r17
    6958:	0f 91       	pop	r16
    695a:	ff 90       	pop	r15
    695c:	ef 90       	pop	r14
    695e:	df 90       	pop	r13
    6960:	bf 90       	pop	r11
    6962:	af 90       	pop	r10
    6964:	08 95       	ret

00006966 <_ZN14HardwareSerial3endEv>:
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
  cbi(*_ucsrb, _udrie);
}

void HardwareSerial::end()
    6966:	cf 93       	push	r28
    6968:	df 93       	push	r29
    696a:	dc 01       	movw	r26, r24
{
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    696c:	1e 96       	adiw	r26, 0x0e	; 14
    696e:	8d 91       	ld	r24, X+
    6970:	9c 91       	ld	r25, X
    6972:	1f 97       	sbiw	r26, 0x0f	; 15
    6974:	ec 01       	movw	r28, r24
    6976:	c0 5c       	subi	r28, 0xC0	; 192
    6978:	df 4f       	sbci	r29, 0xFF	; 255
    697a:	fc 01       	movw	r30, r24
    697c:	ee 5b       	subi	r30, 0xBE	; 190
    697e:	ff 4f       	sbci	r31, 0xFF	; 255
    6980:	28 81       	ld	r18, Y
    6982:	39 81       	ldd	r19, Y+1	; 0x01
    6984:	80 81       	ld	r24, Z
    6986:	91 81       	ldd	r25, Z+1	; 0x01
    6988:	28 17       	cp	r18, r24
    698a:	39 07       	cpc	r19, r25
    698c:	c9 f7       	brne	.-14     	; 0x6980 <_ZN14HardwareSerial3endEv+0x1a>
    ;

  cbi(*_ucsrb, _rxen);
    698e:	56 96       	adiw	r26, 0x16	; 22
    6990:	ed 91       	ld	r30, X+
    6992:	fc 91       	ld	r31, X
    6994:	57 97       	sbiw	r26, 0x17	; 23
    6996:	40 81       	ld	r20, Z
    6998:	21 e0       	ldi	r18, 0x01	; 1
    699a:	30 e0       	ldi	r19, 0x00	; 0
    699c:	c9 01       	movw	r24, r18
    699e:	5c 96       	adiw	r26, 0x1c	; 28
    69a0:	0c 90       	ld	r0, X
    69a2:	5c 97       	sbiw	r26, 0x1c	; 28
    69a4:	02 c0       	rjmp	.+4      	; 0x69aa <_ZN14HardwareSerial3endEv+0x44>
    69a6:	88 0f       	add	r24, r24
    69a8:	99 1f       	adc	r25, r25
    69aa:	0a 94       	dec	r0
    69ac:	e2 f7       	brpl	.-8      	; 0x69a6 <_ZN14HardwareSerial3endEv+0x40>
    69ae:	80 95       	com	r24
    69b0:	84 23       	and	r24, r20
    69b2:	80 83       	st	Z, r24
  cbi(*_ucsrb, _txen);
    69b4:	56 96       	adiw	r26, 0x16	; 22
    69b6:	ed 91       	ld	r30, X+
    69b8:	fc 91       	ld	r31, X
    69ba:	57 97       	sbiw	r26, 0x17	; 23
    69bc:	40 81       	ld	r20, Z
    69be:	c9 01       	movw	r24, r18
    69c0:	5d 96       	adiw	r26, 0x1d	; 29
    69c2:	0c 90       	ld	r0, X
    69c4:	5d 97       	sbiw	r26, 0x1d	; 29
    69c6:	02 c0       	rjmp	.+4      	; 0x69cc <_ZN14HardwareSerial3endEv+0x66>
    69c8:	88 0f       	add	r24, r24
    69ca:	99 1f       	adc	r25, r25
    69cc:	0a 94       	dec	r0
    69ce:	e2 f7       	brpl	.-8      	; 0x69c8 <_ZN14HardwareSerial3endEv+0x62>
    69d0:	80 95       	com	r24
    69d2:	84 23       	and	r24, r20
    69d4:	80 83       	st	Z, r24
  cbi(*_ucsrb, _rxcie);  
    69d6:	56 96       	adiw	r26, 0x16	; 22
    69d8:	ed 91       	ld	r30, X+
    69da:	fc 91       	ld	r31, X
    69dc:	57 97       	sbiw	r26, 0x17	; 23
    69de:	40 81       	ld	r20, Z
    69e0:	c9 01       	movw	r24, r18
    69e2:	5e 96       	adiw	r26, 0x1e	; 30
    69e4:	0c 90       	ld	r0, X
    69e6:	5e 97       	sbiw	r26, 0x1e	; 30
    69e8:	02 c0       	rjmp	.+4      	; 0x69ee <_ZN14HardwareSerial3endEv+0x88>
    69ea:	88 0f       	add	r24, r24
    69ec:	99 1f       	adc	r25, r25
    69ee:	0a 94       	dec	r0
    69f0:	e2 f7       	brpl	.-8      	; 0x69ea <_ZN14HardwareSerial3endEv+0x84>
    69f2:	80 95       	com	r24
    69f4:	84 23       	and	r24, r20
    69f6:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
    69f8:	56 96       	adiw	r26, 0x16	; 22
    69fa:	ed 91       	ld	r30, X+
    69fc:	fc 91       	ld	r31, X
    69fe:	57 97       	sbiw	r26, 0x17	; 23
    6a00:	80 81       	ld	r24, Z
    6a02:	5f 96       	adiw	r26, 0x1f	; 31
    6a04:	0c 90       	ld	r0, X
    6a06:	5f 97       	sbiw	r26, 0x1f	; 31
    6a08:	02 c0       	rjmp	.+4      	; 0x6a0e <_ZN14HardwareSerial3endEv+0xa8>
    6a0a:	22 0f       	add	r18, r18
    6a0c:	33 1f       	adc	r19, r19
    6a0e:	0a 94       	dec	r0
    6a10:	e2 f7       	brpl	.-8      	; 0x6a0a <_ZN14HardwareSerial3endEv+0xa4>
    6a12:	20 95       	com	r18
    6a14:	28 23       	and	r18, r24
    6a16:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    6a18:	1c 96       	adiw	r26, 0x0c	; 12
    6a1a:	ed 91       	ld	r30, X+
    6a1c:	fc 91       	ld	r31, X
    6a1e:	1d 97       	sbiw	r26, 0x0d	; 13
    6a20:	ee 5b       	subi	r30, 0xBE	; 190
    6a22:	ff 4f       	sbci	r31, 0xFF	; 255
    6a24:	80 81       	ld	r24, Z
    6a26:	91 81       	ldd	r25, Z+1	; 0x01
    6a28:	92 93       	st	-Z, r25
    6a2a:	82 93       	st	-Z, r24
}
    6a2c:	df 91       	pop	r29
    6a2e:	cf 91       	pop	r28
    6a30:	08 95       	ret

00006a32 <_ZN14HardwareSerial9availableEv>:

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    6a32:	dc 01       	movw	r26, r24
    6a34:	1c 96       	adiw	r26, 0x0c	; 12
    6a36:	ed 91       	ld	r30, X+
    6a38:	fc 91       	ld	r31, X
    6a3a:	1d 97       	sbiw	r26, 0x0d	; 13
    6a3c:	e0 5c       	subi	r30, 0xC0	; 192
    6a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    6a40:	21 91       	ld	r18, Z+
    6a42:	31 91       	ld	r19, Z+
    6a44:	80 81       	ld	r24, Z
    6a46:	91 81       	ldd	r25, Z+1	; 0x01
    6a48:	28 1b       	sub	r18, r24
    6a4a:	39 0b       	sbc	r19, r25
    6a4c:	2f 73       	andi	r18, 0x3F	; 63
    6a4e:	30 70       	andi	r19, 0x00	; 0
}
    6a50:	c9 01       	movw	r24, r18
    6a52:	08 95       	ret

00006a54 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    6a54:	dc 01       	movw	r26, r24
    6a56:	1c 96       	adiw	r26, 0x0c	; 12
    6a58:	ed 91       	ld	r30, X+
    6a5a:	fc 91       	ld	r31, X
    6a5c:	1d 97       	sbiw	r26, 0x0d	; 13
    6a5e:	e0 5c       	subi	r30, 0xC0	; 192
    6a60:	ff 4f       	sbci	r31, 0xFF	; 255
    6a62:	20 81       	ld	r18, Z
    6a64:	31 81       	ldd	r19, Z+1	; 0x01
    6a66:	e0 54       	subi	r30, 0x40	; 64
    6a68:	f0 40       	sbci	r31, 0x00	; 0
    6a6a:	df 01       	movw	r26, r30
    6a6c:	ae 5b       	subi	r26, 0xBE	; 190
    6a6e:	bf 4f       	sbci	r27, 0xFF	; 255
    6a70:	8d 91       	ld	r24, X+
    6a72:	9c 91       	ld	r25, X
    6a74:	11 97       	sbiw	r26, 0x01	; 1
    6a76:	28 17       	cp	r18, r24
    6a78:	39 07       	cpc	r19, r25
    6a7a:	19 f4       	brne	.+6      	; 0x6a82 <_ZN14HardwareSerial4peekEv+0x2e>
    6a7c:	2f ef       	ldi	r18, 0xFF	; 255
    6a7e:	3f ef       	ldi	r19, 0xFF	; 255
    6a80:	07 c0       	rjmp	.+14     	; 0x6a90 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    6a82:	8d 91       	ld	r24, X+
    6a84:	9c 91       	ld	r25, X
    6a86:	e8 0f       	add	r30, r24
    6a88:	f9 1f       	adc	r31, r25
    6a8a:	80 81       	ld	r24, Z
    6a8c:	28 2f       	mov	r18, r24
    6a8e:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    6a90:	c9 01       	movw	r24, r18
    6a92:	08 95       	ret

00006a94 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    6a94:	dc 01       	movw	r26, r24
    6a96:	1c 96       	adiw	r26, 0x0c	; 12
    6a98:	ed 91       	ld	r30, X+
    6a9a:	fc 91       	ld	r31, X
    6a9c:	1d 97       	sbiw	r26, 0x0d	; 13
    6a9e:	e0 5c       	subi	r30, 0xC0	; 192
    6aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    6aa2:	20 81       	ld	r18, Z
    6aa4:	31 81       	ldd	r19, Z+1	; 0x01
    6aa6:	e0 54       	subi	r30, 0x40	; 64
    6aa8:	f0 40       	sbci	r31, 0x00	; 0
    6aaa:	df 01       	movw	r26, r30
    6aac:	ae 5b       	subi	r26, 0xBE	; 190
    6aae:	bf 4f       	sbci	r27, 0xFF	; 255
    6ab0:	8d 91       	ld	r24, X+
    6ab2:	9c 91       	ld	r25, X
    6ab4:	11 97       	sbiw	r26, 0x01	; 1
    6ab6:	28 17       	cp	r18, r24
    6ab8:	39 07       	cpc	r19, r25
    6aba:	19 f4       	brne	.+6      	; 0x6ac2 <_ZN14HardwareSerial4readEv+0x2e>
    6abc:	2f ef       	ldi	r18, 0xFF	; 255
    6abe:	3f ef       	ldi	r19, 0xFF	; 255
    6ac0:	10 c0       	rjmp	.+32     	; 0x6ae2 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    6ac2:	8d 91       	ld	r24, X+
    6ac4:	9c 91       	ld	r25, X
    6ac6:	11 97       	sbiw	r26, 0x01	; 1
    6ac8:	e8 0f       	add	r30, r24
    6aca:	f9 1f       	adc	r31, r25
    6acc:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    6ace:	8d 91       	ld	r24, X+
    6ad0:	9c 91       	ld	r25, X
    6ad2:	11 97       	sbiw	r26, 0x01	; 1
    6ad4:	01 96       	adiw	r24, 0x01	; 1
    6ad6:	8f 73       	andi	r24, 0x3F	; 63
    6ad8:	90 70       	andi	r25, 0x00	; 0
    6ada:	11 96       	adiw	r26, 0x01	; 1
    6adc:	9c 93       	st	X, r25
    6ade:	8e 93       	st	-X, r24
    return c;
    6ae0:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    6ae2:	c9 01       	movw	r24, r18
    6ae4:	08 95       	ret

00006ae6 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
    6ae6:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    6ae8:	91 96       	adiw	r26, 0x21	; 33
    6aea:	8c 91       	ld	r24, X
    6aec:	91 97       	sbiw	r26, 0x21	; 33
    6aee:	88 23       	and	r24, r24
    6af0:	39 f0       	breq	.+14     	; 0x6b00 <_ZN14HardwareSerial5flushEv+0x1a>
    6af2:	54 96       	adiw	r26, 0x14	; 20
    6af4:	ed 91       	ld	r30, X+
    6af6:	fc 91       	ld	r31, X
    6af8:	55 97       	sbiw	r26, 0x15	; 21
    6afa:	80 81       	ld	r24, Z
    6afc:	86 ff       	sbrs	r24, 6
    6afe:	f9 cf       	rjmp	.-14     	; 0x6af2 <_ZN14HardwareSerial5flushEv+0xc>
  transmitting = false;
    6b00:	91 96       	adiw	r26, 0x21	; 33
    6b02:	1c 92       	st	X, r1
}
    6b04:	08 95       	ret

00006b06 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    6b06:	cf 93       	push	r28
    6b08:	df 93       	push	r29
    6b0a:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    6b0c:	ee 85       	ldd	r30, Y+14	; 0x0e
    6b0e:	ff 85       	ldd	r31, Y+15	; 0x0f
    6b10:	e0 5c       	subi	r30, 0xC0	; 192
    6b12:	ff 4f       	sbci	r31, 0xFF	; 255
    6b14:	20 81       	ld	r18, Z
    6b16:	31 81       	ldd	r19, Z+1	; 0x01
    6b18:	e0 54       	subi	r30, 0x40	; 64
    6b1a:	f0 40       	sbci	r31, 0x00	; 0
    6b1c:	2f 5f       	subi	r18, 0xFF	; 255
    6b1e:	3f 4f       	sbci	r19, 0xFF	; 255
    6b20:	2f 73       	andi	r18, 0x3F	; 63
    6b22:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    6b24:	df 01       	movw	r26, r30
    6b26:	ae 5b       	subi	r26, 0xBE	; 190
    6b28:	bf 4f       	sbci	r27, 0xFF	; 255
    6b2a:	8d 91       	ld	r24, X+
    6b2c:	9c 91       	ld	r25, X
    6b2e:	11 97       	sbiw	r26, 0x01	; 1
    6b30:	28 17       	cp	r18, r24
    6b32:	39 07       	cpc	r19, r25
    6b34:	d1 f3       	breq	.-12     	; 0x6b2a <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    6b36:	e0 5c       	subi	r30, 0xC0	; 192
    6b38:	ff 4f       	sbci	r31, 0xFF	; 255
    6b3a:	80 81       	ld	r24, Z
    6b3c:	91 81       	ldd	r25, Z+1	; 0x01
    6b3e:	e0 54       	subi	r30, 0x40	; 64
    6b40:	f0 40       	sbci	r31, 0x00	; 0
    6b42:	e8 0f       	add	r30, r24
    6b44:	f9 1f       	adc	r31, r25
    6b46:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    6b48:	ee 85       	ldd	r30, Y+14	; 0x0e
    6b4a:	ff 85       	ldd	r31, Y+15	; 0x0f
    6b4c:	e0 5c       	subi	r30, 0xC0	; 192
    6b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    6b50:	31 83       	std	Z+1, r19	; 0x01
    6b52:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    6b54:	ee 89       	ldd	r30, Y+22	; 0x16
    6b56:	ff 89       	ldd	r31, Y+23	; 0x17
    6b58:	20 81       	ld	r18, Z
    6b5a:	81 e0       	ldi	r24, 0x01	; 1
    6b5c:	90 e0       	ldi	r25, 0x00	; 0
    6b5e:	0f 8c       	ldd	r0, Y+31	; 0x1f
    6b60:	02 c0       	rjmp	.+4      	; 0x6b66 <_ZN14HardwareSerial5writeEh+0x60>
    6b62:	88 0f       	add	r24, r24
    6b64:	99 1f       	adc	r25, r25
    6b66:	0a 94       	dec	r0
    6b68:	e2 f7       	brpl	.-8      	; 0x6b62 <_ZN14HardwareSerial5writeEh+0x5c>
    6b6a:	28 2b       	or	r18, r24
    6b6c:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    6b6e:	81 e0       	ldi	r24, 0x01	; 1
    6b70:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    6b72:	ec 89       	ldd	r30, Y+20	; 0x14
    6b74:	fd 89       	ldd	r31, Y+21	; 0x15
    6b76:	80 81       	ld	r24, Z
    6b78:	80 64       	ori	r24, 0x40	; 64
    6b7a:	80 83       	st	Z, r24
  
  return 1;
}
    6b7c:	81 e0       	ldi	r24, 0x01	; 1
    6b7e:	90 e0       	ldi	r25, 0x00	; 0
    6b80:	df 91       	pop	r29
    6b82:	cf 91       	pop	r28
    6b84:	08 95       	ret

00006b86 <_ZN14HardwareSerialcvbEv>:

HardwareSerial::operator bool() {
	return true;
}
    6b86:	81 e0       	ldi	r24, 0x01	; 1
    6b88:	08 95       	ret

00006b8a <_GLOBAL__I_rx_buffer>:
  public:
    Print() : write_error(0) {}
    6b8a:	10 92 bb 03 	sts	0x03BB, r1
    6b8e:	10 92 ba 03 	sts	0x03BA, r1
    6b92:	88 ee       	ldi	r24, 0xE8	; 232
    6b94:	93 e0       	ldi	r25, 0x03	; 3
    6b96:	a0 e0       	ldi	r26, 0x00	; 0
    6b98:	b0 e0       	ldi	r27, 0x00	; 0
    6b9a:	80 93 bc 03 	sts	0x03BC, r24
    6b9e:	90 93 bd 03 	sts	0x03BD, r25
    6ba2:	a0 93 be 03 	sts	0x03BE, r26
    6ba6:	b0 93 bf 03 	sts	0x03BF, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    6baa:	80 e3       	ldi	r24, 0x30	; 48
    6bac:	91 e0       	ldi	r25, 0x01	; 1
    6bae:	90 93 b9 03 	sts	0x03B9, r25
    6bb2:	80 93 b8 03 	sts	0x03B8, r24
{
  _rx_buffer = rx_buffer;
    6bb6:	80 e3       	ldi	r24, 0x30	; 48
    6bb8:	93 e0       	ldi	r25, 0x03	; 3
    6bba:	90 93 c5 03 	sts	0x03C5, r25
    6bbe:	80 93 c4 03 	sts	0x03C4, r24
  _tx_buffer = tx_buffer;
    6bc2:	84 e7       	ldi	r24, 0x74	; 116
    6bc4:	93 e0       	ldi	r25, 0x03	; 3
    6bc6:	90 93 c7 03 	sts	0x03C7, r25
    6bca:	80 93 c6 03 	sts	0x03C6, r24
  _ubrrh = ubrrh;
    6bce:	85 ec       	ldi	r24, 0xC5	; 197
    6bd0:	90 e0       	ldi	r25, 0x00	; 0
    6bd2:	90 93 c9 03 	sts	0x03C9, r25
    6bd6:	80 93 c8 03 	sts	0x03C8, r24
  _ubrrl = ubrrl;
    6bda:	84 ec       	ldi	r24, 0xC4	; 196
    6bdc:	90 e0       	ldi	r25, 0x00	; 0
    6bde:	90 93 cb 03 	sts	0x03CB, r25
    6be2:	80 93 ca 03 	sts	0x03CA, r24
  _ucsra = ucsra;
    6be6:	80 ec       	ldi	r24, 0xC0	; 192
    6be8:	90 e0       	ldi	r25, 0x00	; 0
    6bea:	90 93 cd 03 	sts	0x03CD, r25
    6bee:	80 93 cc 03 	sts	0x03CC, r24
  _ucsrb = ucsrb;
    6bf2:	81 ec       	ldi	r24, 0xC1	; 193
    6bf4:	90 e0       	ldi	r25, 0x00	; 0
    6bf6:	90 93 cf 03 	sts	0x03CF, r25
    6bfa:	80 93 ce 03 	sts	0x03CE, r24
  _ucsrc = ucsrc;
    6bfe:	82 ec       	ldi	r24, 0xC2	; 194
    6c00:	90 e0       	ldi	r25, 0x00	; 0
    6c02:	90 93 d1 03 	sts	0x03D1, r25
    6c06:	80 93 d0 03 	sts	0x03D0, r24
  _udr = udr;
    6c0a:	86 ec       	ldi	r24, 0xC6	; 198
    6c0c:	90 e0       	ldi	r25, 0x00	; 0
    6c0e:	90 93 d3 03 	sts	0x03D3, r25
    6c12:	80 93 d2 03 	sts	0x03D2, r24
  _rxen = rxen;
    6c16:	84 e0       	ldi	r24, 0x04	; 4
    6c18:	80 93 d4 03 	sts	0x03D4, r24
  _txen = txen;
    6c1c:	83 e0       	ldi	r24, 0x03	; 3
    6c1e:	80 93 d5 03 	sts	0x03D5, r24
  _rxcie = rxcie;
    6c22:	87 e0       	ldi	r24, 0x07	; 7
    6c24:	80 93 d6 03 	sts	0x03D6, r24
  _udrie = udrie;
    6c28:	85 e0       	ldi	r24, 0x05	; 5
    6c2a:	80 93 d7 03 	sts	0x03D7, r24
  _u2x = u2x;
    6c2e:	81 e0       	ldi	r24, 0x01	; 1
    6c30:	80 93 d8 03 	sts	0x03D8, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    6c34:	08 95       	ret

00006c36 <main>:
#include <Arduino.h>

int main(void)
    6c36:	cf 93       	push	r28
    6c38:	df 93       	push	r29
{
	init();
    6c3a:	0e 94 82 32 	call	0x6504	; 0x6504 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    6c3e:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    6c42:	ce ed       	ldi	r28, 0xDE	; 222
    6c44:	d3 e3       	ldi	r29, 0x33	; 51
#endif
	
	setup();
    
	for (;;) {
		loop();
    6c46:	0e 94 b0 13 	call	0x2760	; 0x2760 <loop>
		if (serialEventRun) serialEventRun();
    6c4a:	20 97       	sbiw	r28, 0x00	; 0
    6c4c:	e1 f3       	breq	.-8      	; 0x6c46 <main+0x10>
    6c4e:	0e 94 de 33 	call	0x67bc	; 0x67bc <_Z14serialEventRunv>
    6c52:	f9 cf       	rjmp	.-14     	; 0x6c46 <main+0x10>

00006c54 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    6c54:	cf 92       	push	r12
    6c56:	df 92       	push	r13
    6c58:	ef 92       	push	r14
    6c5a:	ff 92       	push	r15
    6c5c:	0f 93       	push	r16
    6c5e:	1f 93       	push	r17
    6c60:	cf 93       	push	r28
    6c62:	df 93       	push	r29
    6c64:	7c 01       	movw	r14, r24
    6c66:	6b 01       	movw	r12, r22
    6c68:	8a 01       	movw	r16, r20
    6c6a:	c0 e0       	ldi	r28, 0x00	; 0
    6c6c:	d0 e0       	ldi	r29, 0x00	; 0
    6c6e:	0f c0       	rjmp	.+30     	; 0x6c8e <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    6c70:	d6 01       	movw	r26, r12
    6c72:	6d 91       	ld	r22, X+
    6c74:	6d 01       	movw	r12, r26
    6c76:	d7 01       	movw	r26, r14
    6c78:	ed 91       	ld	r30, X+
    6c7a:	fc 91       	ld	r31, X
    6c7c:	01 90       	ld	r0, Z+
    6c7e:	f0 81       	ld	r31, Z
    6c80:	e0 2d       	mov	r30, r0
    6c82:	c7 01       	movw	r24, r14
    6c84:	09 95       	icall
    6c86:	c8 0f       	add	r28, r24
    6c88:	d9 1f       	adc	r29, r25
    6c8a:	01 50       	subi	r16, 0x01	; 1
    6c8c:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    6c8e:	01 15       	cp	r16, r1
    6c90:	11 05       	cpc	r17, r1
    6c92:	71 f7       	brne	.-36     	; 0x6c70 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    6c94:	ce 01       	movw	r24, r28
    6c96:	df 91       	pop	r29
    6c98:	cf 91       	pop	r28
    6c9a:	1f 91       	pop	r17
    6c9c:	0f 91       	pop	r16
    6c9e:	ff 90       	pop	r15
    6ca0:	ef 90       	pop	r14
    6ca2:	df 90       	pop	r13
    6ca4:	cf 90       	pop	r12
    6ca6:	08 95       	ret

00006ca8 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
    6ca8:	ef 92       	push	r14
    6caa:	ff 92       	push	r15
    6cac:	0f 93       	push	r16
    6cae:	1f 93       	push	r17
    6cb0:	cf 93       	push	r28
    6cb2:	df 93       	push	r29
    6cb4:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    6cb6:	8b 01       	movw	r16, r22
    6cb8:	c0 e0       	ldi	r28, 0x00	; 0
    6cba:	d0 e0       	ldi	r29, 0x00	; 0
    6cbc:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    6cbe:	0f 5f       	subi	r16, 0xFF	; 255
    6cc0:	1f 4f       	sbci	r17, 0xFF	; 255
    6cc2:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    6cc4:	66 23       	and	r22, r22
    6cc6:	59 f0       	breq	.+22     	; 0x6cde <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    n += write(c);
    6cc8:	d7 01       	movw	r26, r14
    6cca:	ed 91       	ld	r30, X+
    6ccc:	fc 91       	ld	r31, X
    6cce:	01 90       	ld	r0, Z+
    6cd0:	f0 81       	ld	r31, Z
    6cd2:	e0 2d       	mov	r30, r0
    6cd4:	c7 01       	movw	r24, r14
    6cd6:	09 95       	icall
    6cd8:	c8 0f       	add	r28, r24
    6cda:	d9 1f       	adc	r29, r25
    6cdc:	ef cf       	rjmp	.-34     	; 0x6cbc <_ZN5Print5printEPK19__FlashStringHelper+0x14>
  }
  return n;
}
    6cde:	ce 01       	movw	r24, r28
    6ce0:	df 91       	pop	r29
    6ce2:	cf 91       	pop	r28
    6ce4:	1f 91       	pop	r17
    6ce6:	0f 91       	pop	r16
    6ce8:	ff 90       	pop	r15
    6cea:	ef 90       	pop	r14
    6cec:	08 95       	ret

00006cee <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    6cee:	dc 01       	movw	r26, r24
{
  return write(c);
    6cf0:	ed 91       	ld	r30, X+
    6cf2:	fc 91       	ld	r31, X
    6cf4:	01 90       	ld	r0, Z+
    6cf6:	f0 81       	ld	r31, Z
    6cf8:	e0 2d       	mov	r30, r0
    6cfa:	09 95       	icall
}
    6cfc:	08 95       	ret

00006cfe <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    6cfe:	ef 92       	push	r14
    6d00:	ff 92       	push	r15
    6d02:	0f 93       	push	r16
    6d04:	1f 93       	push	r17
    6d06:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    6d08:	dc 01       	movw	r26, r24
    6d0a:	ed 91       	ld	r30, X+
    6d0c:	fc 91       	ld	r31, X
    6d0e:	01 90       	ld	r0, Z+
    6d10:	f0 81       	ld	r31, Z
    6d12:	e0 2d       	mov	r30, r0
    6d14:	6d e0       	ldi	r22, 0x0D	; 13
    6d16:	09 95       	icall
    6d18:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    6d1a:	d8 01       	movw	r26, r16
    6d1c:	ed 91       	ld	r30, X+
    6d1e:	fc 91       	ld	r31, X
    6d20:	01 90       	ld	r0, Z+
    6d22:	f0 81       	ld	r31, Z
    6d24:	e0 2d       	mov	r30, r0
    6d26:	c8 01       	movw	r24, r16
    6d28:	6a e0       	ldi	r22, 0x0A	; 10
    6d2a:	09 95       	icall
    6d2c:	9c 01       	movw	r18, r24
    6d2e:	2e 0d       	add	r18, r14
    6d30:	3f 1d       	adc	r19, r15
    6d32:	c9 01       	movw	r24, r18
    6d34:	1f 91       	pop	r17
    6d36:	0f 91       	pop	r16
    6d38:	ff 90       	pop	r15
    6d3a:	ef 90       	pop	r14
    6d3c:	08 95       	ret

00006d3e <_ZN5Print7printlnEPK19__FlashStringHelper>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    6d3e:	ef 92       	push	r14
    6d40:	ff 92       	push	r15
    6d42:	0f 93       	push	r16
    6d44:	1f 93       	push	r17
    6d46:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    6d48:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZN5Print5printEPK19__FlashStringHelper>
    6d4c:	8c 01       	movw	r16, r24
  n += println();
    6d4e:	c7 01       	movw	r24, r14
    6d50:	0e 94 7f 36 	call	0x6cfe	; 0x6cfe <_ZN5Print7printlnEv>
    6d54:	9c 01       	movw	r18, r24
    6d56:	20 0f       	add	r18, r16
    6d58:	31 1f       	adc	r19, r17
  return n;
}
    6d5a:	c9 01       	movw	r24, r18
    6d5c:	1f 91       	pop	r17
    6d5e:	0f 91       	pop	r16
    6d60:	ff 90       	pop	r15
    6d62:	ef 90       	pop	r14
    6d64:	08 95       	ret

00006d66 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    6d66:	cf 93       	push	r28
    6d68:	df 93       	push	r29
    6d6a:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    6d6c:	61 15       	cp	r22, r1
    6d6e:	71 05       	cpc	r23, r1
    6d70:	19 f4       	brne	.+6      	; 0x6d78 <_ZN5Print5writeEPKc+0x12>
    6d72:	20 e0       	ldi	r18, 0x00	; 0
    6d74:	30 e0       	ldi	r19, 0x00	; 0
    6d76:	0f c0       	rjmp	.+30     	; 0x6d96 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
    6d78:	db 01       	movw	r26, r22
    6d7a:	0d 90       	ld	r0, X+
    6d7c:	00 20       	and	r0, r0
    6d7e:	e9 f7       	brne	.-6      	; 0x6d7a <_ZN5Print5writeEPKc+0x14>
    6d80:	11 97       	sbiw	r26, 0x01	; 1
    6d82:	a6 1b       	sub	r26, r22
    6d84:	b7 0b       	sbc	r27, r23
    6d86:	e8 81       	ld	r30, Y
    6d88:	f9 81       	ldd	r31, Y+1	; 0x01
    6d8a:	02 80       	ldd	r0, Z+2	; 0x02
    6d8c:	f3 81       	ldd	r31, Z+3	; 0x03
    6d8e:	e0 2d       	mov	r30, r0
    6d90:	ad 01       	movw	r20, r26
    6d92:	09 95       	icall
    6d94:	9c 01       	movw	r18, r24
    }
    6d96:	c9 01       	movw	r24, r18
    6d98:	df 91       	pop	r29
    6d9a:	cf 91       	pop	r28
    6d9c:	08 95       	ret

00006d9e <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    6d9e:	4f 92       	push	r4
    6da0:	5f 92       	push	r5
    6da2:	7f 92       	push	r7
    6da4:	8f 92       	push	r8
    6da6:	9f 92       	push	r9
    6da8:	af 92       	push	r10
    6daa:	bf 92       	push	r11
    6dac:	cf 92       	push	r12
    6dae:	df 92       	push	r13
    6db0:	ef 92       	push	r14
    6db2:	ff 92       	push	r15
    6db4:	0f 93       	push	r16
    6db6:	1f 93       	push	r17
    6db8:	df 93       	push	r29
    6dba:	cf 93       	push	r28
    6dbc:	cd b7       	in	r28, 0x3d	; 61
    6dbe:	de b7       	in	r29, 0x3e	; 62
    6dc0:	a1 97       	sbiw	r28, 0x21	; 33
    6dc2:	0f b6       	in	r0, 0x3f	; 63
    6dc4:	f8 94       	cli
    6dc6:	de bf       	out	0x3e, r29	; 62
    6dc8:	0f be       	out	0x3f, r0	; 63
    6dca:	cd bf       	out	0x3d, r28	; 61
    6dcc:	2c 01       	movw	r4, r24
    6dce:	74 2e       	mov	r7, r20
    6dd0:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    6dd2:	22 30       	cpi	r18, 0x02	; 2
    6dd4:	08 f4       	brcc	.+2      	; 0x6dd8 <_ZN5Print11printNumberEmh+0x3a>
    6dd6:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    6dd8:	19 a2       	std	Y+33, r1	; 0x21
    6dda:	31 e2       	ldi	r19, 0x21	; 33
    6ddc:	c3 2e       	mov	r12, r19
    6dde:	d1 2c       	mov	r13, r1
    6de0:	cc 0e       	add	r12, r28
    6de2:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    6de4:	82 2e       	mov	r8, r18
    6de6:	99 24       	eor	r9, r9
    6de8:	aa 24       	eor	r10, r10
    6dea:	bb 24       	eor	r11, r11
    6dec:	67 2d       	mov	r22, r7
    6dee:	75 2f       	mov	r23, r21
    6df0:	a5 01       	movw	r20, r10
    6df2:	94 01       	movw	r18, r8
    6df4:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <__udivmodsi4>
    6df8:	79 01       	movw	r14, r18
    6dfa:	8a 01       	movw	r16, r20
    char c = m - base * n;
    6dfc:	c8 01       	movw	r24, r16
    6dfe:	b7 01       	movw	r22, r14
    6e00:	a5 01       	movw	r20, r10
    6e02:	94 01       	movw	r18, r8
    6e04:	0e 94 90 3d 	call	0x7b20	; 0x7b20 <__mulsi3>
    6e08:	47 2d       	mov	r20, r7
    6e0a:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    6e0c:	08 94       	sec
    6e0e:	c1 08       	sbc	r12, r1
    6e10:	d1 08       	sbc	r13, r1
    6e12:	4a 30       	cpi	r20, 0x0A	; 10
    6e14:	14 f4       	brge	.+4      	; 0x6e1a <_ZN5Print11printNumberEmh+0x7c>
    6e16:	40 5d       	subi	r20, 0xD0	; 208
    6e18:	01 c0       	rjmp	.+2      	; 0x6e1c <_ZN5Print11printNumberEmh+0x7e>
    6e1a:	49 5c       	subi	r20, 0xC9	; 201
    6e1c:	f6 01       	movw	r30, r12
    6e1e:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    6e20:	e1 14       	cp	r14, r1
    6e22:	f1 04       	cpc	r15, r1
    6e24:	01 05       	cpc	r16, r1
    6e26:	11 05       	cpc	r17, r1
    6e28:	21 f0       	breq	.+8      	; 0x6e32 <_ZN5Print11printNumberEmh+0x94>
    6e2a:	7e 2c       	mov	r7, r14
    6e2c:	5f 2d       	mov	r21, r15
    6e2e:	c8 01       	movw	r24, r16
    6e30:	dd cf       	rjmp	.-70     	; 0x6dec <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    6e32:	c2 01       	movw	r24, r4
    6e34:	b6 01       	movw	r22, r12
    6e36:	0e 94 b3 36 	call	0x6d66	; 0x6d66 <_ZN5Print5writeEPKc>
}
    6e3a:	a1 96       	adiw	r28, 0x21	; 33
    6e3c:	0f b6       	in	r0, 0x3f	; 63
    6e3e:	f8 94       	cli
    6e40:	de bf       	out	0x3e, r29	; 62
    6e42:	0f be       	out	0x3f, r0	; 63
    6e44:	cd bf       	out	0x3d, r28	; 61
    6e46:	cf 91       	pop	r28
    6e48:	df 91       	pop	r29
    6e4a:	1f 91       	pop	r17
    6e4c:	0f 91       	pop	r16
    6e4e:	ff 90       	pop	r15
    6e50:	ef 90       	pop	r14
    6e52:	df 90       	pop	r13
    6e54:	cf 90       	pop	r12
    6e56:	bf 90       	pop	r11
    6e58:	af 90       	pop	r10
    6e5a:	9f 90       	pop	r9
    6e5c:	8f 90       	pop	r8
    6e5e:	7f 90       	pop	r7
    6e60:	5f 90       	pop	r5
    6e62:	4f 90       	pop	r4
    6e64:	08 95       	ret

00006e66 <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    6e66:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    6e68:	21 15       	cp	r18, r1
    6e6a:	31 05       	cpc	r19, r1
    6e6c:	41 f4       	brne	.+16     	; 0x6e7e <_ZN5Print5printEmi+0x18>
    6e6e:	ed 91       	ld	r30, X+
    6e70:	fc 91       	ld	r31, X
    6e72:	01 90       	ld	r0, Z+
    6e74:	f0 81       	ld	r31, Z
    6e76:	e0 2d       	mov	r30, r0
    6e78:	64 2f       	mov	r22, r20
    6e7a:	09 95       	icall
    6e7c:	08 95       	ret
  else return printNumber(n, base);
    6e7e:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <_ZN5Print11printNumberEmh>
}
    6e82:	08 95       	ret

00006e84 <_ZN5Print5printEji>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
    6e84:	ef 92       	push	r14
    6e86:	ff 92       	push	r15
    6e88:	0f 93       	push	r16
    6e8a:	1f 93       	push	r17
    6e8c:	9a 01       	movw	r18, r20
{
  return print((unsigned long) n, base);
    6e8e:	7b 01       	movw	r14, r22
    6e90:	00 e0       	ldi	r16, 0x00	; 0
    6e92:	10 e0       	ldi	r17, 0x00	; 0
    6e94:	b8 01       	movw	r22, r16
    6e96:	a7 01       	movw	r20, r14
    6e98:	0e 94 33 37 	call	0x6e66	; 0x6e66 <_ZN5Print5printEmi>
}
    6e9c:	1f 91       	pop	r17
    6e9e:	0f 91       	pop	r16
    6ea0:	ff 90       	pop	r15
    6ea2:	ef 90       	pop	r14
    6ea4:	08 95       	ret

00006ea6 <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    6ea6:	ef 92       	push	r14
    6ea8:	ff 92       	push	r15
    6eaa:	0f 93       	push	r16
    6eac:	1f 93       	push	r17
    6eae:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    6eb0:	e6 2e       	mov	r14, r22
    6eb2:	ff 24       	eor	r15, r15
    6eb4:	00 e0       	ldi	r16, 0x00	; 0
    6eb6:	10 e0       	ldi	r17, 0x00	; 0
    6eb8:	b8 01       	movw	r22, r16
    6eba:	a7 01       	movw	r20, r14
    6ebc:	0e 94 33 37 	call	0x6e66	; 0x6e66 <_ZN5Print5printEmi>
}
    6ec0:	1f 91       	pop	r17
    6ec2:	0f 91       	pop	r16
    6ec4:	ff 90       	pop	r15
    6ec6:	ef 90       	pop	r14
    6ec8:	08 95       	ret

00006eca <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    6eca:	cf 92       	push	r12
    6ecc:	df 92       	push	r13
    6ece:	ef 92       	push	r14
    6ed0:	ff 92       	push	r15
    6ed2:	0f 93       	push	r16
    6ed4:	1f 93       	push	r17
    6ed6:	cf 93       	push	r28
    6ed8:	df 93       	push	r29
    6eda:	ec 01       	movw	r28, r24
    6edc:	6a 01       	movw	r12, r20
    6ede:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    6ee0:	21 15       	cp	r18, r1
    6ee2:	31 05       	cpc	r19, r1
    6ee4:	41 f4       	brne	.+16     	; 0x6ef6 <_ZN5Print5printEli+0x2c>
    return write(n);
    6ee6:	e8 81       	ld	r30, Y
    6ee8:	f9 81       	ldd	r31, Y+1	; 0x01
    6eea:	01 90       	ld	r0, Z+
    6eec:	f0 81       	ld	r31, Z
    6eee:	e0 2d       	mov	r30, r0
    6ef0:	64 2f       	mov	r22, r20
    6ef2:	09 95       	icall
    6ef4:	1f c0       	rjmp	.+62     	; 0x6f34 <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    6ef6:	2a 30       	cpi	r18, 0x0A	; 10
    6ef8:	31 05       	cpc	r19, r1
    6efa:	d1 f4       	brne	.+52     	; 0x6f30 <_ZN5Print5printEli+0x66>
    if (n < 0) {
    6efc:	77 ff       	sbrs	r23, 7
    6efe:	17 c0       	rjmp	.+46     	; 0x6f2e <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    6f00:	e8 81       	ld	r30, Y
    6f02:	f9 81       	ldd	r31, Y+1	; 0x01
    6f04:	01 90       	ld	r0, Z+
    6f06:	f0 81       	ld	r31, Z
    6f08:	e0 2d       	mov	r30, r0
    6f0a:	6d e2       	ldi	r22, 0x2D	; 45
    6f0c:	09 95       	icall
    6f0e:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    6f10:	44 27       	eor	r20, r20
    6f12:	55 27       	eor	r21, r21
    6f14:	ba 01       	movw	r22, r20
    6f16:	4c 19       	sub	r20, r12
    6f18:	5d 09       	sbc	r21, r13
    6f1a:	6e 09       	sbc	r22, r14
    6f1c:	7f 09       	sbc	r23, r15
    6f1e:	ce 01       	movw	r24, r28
    6f20:	2a e0       	ldi	r18, 0x0A	; 10
    6f22:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <_ZN5Print11printNumberEmh>
    6f26:	98 01       	movw	r18, r16
    6f28:	28 0f       	add	r18, r24
    6f2a:	39 1f       	adc	r19, r25
    6f2c:	04 c0       	rjmp	.+8      	; 0x6f36 <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    6f2e:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    6f30:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <_ZN5Print11printNumberEmh>
    6f34:	9c 01       	movw	r18, r24
  }
}
    6f36:	c9 01       	movw	r24, r18
    6f38:	df 91       	pop	r29
    6f3a:	cf 91       	pop	r28
    6f3c:	1f 91       	pop	r17
    6f3e:	0f 91       	pop	r16
    6f40:	ff 90       	pop	r15
    6f42:	ef 90       	pop	r14
    6f44:	df 90       	pop	r13
    6f46:	cf 90       	pop	r12
    6f48:	08 95       	ret

00006f4a <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    6f4a:	ef 92       	push	r14
    6f4c:	ff 92       	push	r15
    6f4e:	0f 93       	push	r16
    6f50:	1f 93       	push	r17
    6f52:	7b 01       	movw	r14, r22
    6f54:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    6f56:	00 27       	eor	r16, r16
    6f58:	f7 fc       	sbrc	r15, 7
    6f5a:	00 95       	com	r16
    6f5c:	10 2f       	mov	r17, r16
    6f5e:	b8 01       	movw	r22, r16
    6f60:	a7 01       	movw	r20, r14
    6f62:	0e 94 65 37 	call	0x6eca	; 0x6eca <_ZN5Print5printEli>
}
    6f66:	1f 91       	pop	r17
    6f68:	0f 91       	pop	r16
    6f6a:	ff 90       	pop	r15
    6f6c:	ef 90       	pop	r14
    6f6e:	08 95       	ret

00006f70 <_ZN5Print5printERK6String>:
    n += write(c);
  }
  return n;
}

size_t Print::print(const String &s)
    6f70:	af 92       	push	r10
    6f72:	bf 92       	push	r11
    6f74:	cf 92       	push	r12
    6f76:	df 92       	push	r13
    6f78:	ef 92       	push	r14
    6f7a:	ff 92       	push	r15
    6f7c:	0f 93       	push	r16
    6f7e:	1f 93       	push	r17
    6f80:	cf 93       	push	r28
    6f82:	df 93       	push	r29
    6f84:	5c 01       	movw	r10, r24
    6f86:	6b 01       	movw	r12, r22
    6f88:	ee 24       	eor	r14, r14
    6f8a:	ff 24       	eor	r15, r15
    6f8c:	c0 e0       	ldi	r28, 0x00	; 0
    6f8e:	d0 e0       	ldi	r29, 0x00	; 0
    6f90:	10 c0       	rjmp	.+32     	; 0x6fb2 <_ZN5Print5printERK6String+0x42>
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    n += write(s[i]);
    6f92:	d5 01       	movw	r26, r10
    6f94:	ed 91       	ld	r30, X+
    6f96:	fc 91       	ld	r31, X
    6f98:	00 81       	ld	r16, Z
    6f9a:	11 81       	ldd	r17, Z+1	; 0x01
    6f9c:	c6 01       	movw	r24, r12
    6f9e:	be 01       	movw	r22, r28
    6fa0:	0e 94 00 38 	call	0x7000	; 0x7000 <_ZNK6StringixEj>
    6fa4:	68 2f       	mov	r22, r24
    6fa6:	c5 01       	movw	r24, r10
    6fa8:	f8 01       	movw	r30, r16
    6faa:	09 95       	icall
    6fac:	e8 0e       	add	r14, r24
    6fae:	f9 1e       	adc	r15, r25
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    6fb0:	21 96       	adiw	r28, 0x01	; 1
    6fb2:	f6 01       	movw	r30, r12
    6fb4:	84 81       	ldd	r24, Z+4	; 0x04
    6fb6:	95 81       	ldd	r25, Z+5	; 0x05
    6fb8:	c8 17       	cp	r28, r24
    6fba:	d9 07       	cpc	r29, r25
    6fbc:	50 f3       	brcs	.-44     	; 0x6f92 <_ZN5Print5printERK6String+0x22>
    n += write(s[i]);
  }
  return n;
}
    6fbe:	c7 01       	movw	r24, r14
    6fc0:	df 91       	pop	r29
    6fc2:	cf 91       	pop	r28
    6fc4:	1f 91       	pop	r17
    6fc6:	0f 91       	pop	r16
    6fc8:	ff 90       	pop	r15
    6fca:	ef 90       	pop	r14
    6fcc:	df 90       	pop	r13
    6fce:	cf 90       	pop	r12
    6fd0:	bf 90       	pop	r11
    6fd2:	af 90       	pop	r10
    6fd4:	08 95       	ret

00006fd6 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
    6fd6:	fc 01       	movw	r30, r24
    6fd8:	9b 01       	movw	r18, r22
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    6fda:	84 81       	ldd	r24, Z+4	; 0x04
    6fdc:	95 81       	ldd	r25, Z+5	; 0x05
    6fde:	68 17       	cp	r22, r24
    6fe0:	79 07       	cpc	r23, r25
    6fe2:	28 f4       	brcc	.+10     	; 0x6fee <_ZN6StringixEj+0x18>
    6fe4:	60 81       	ld	r22, Z
    6fe6:	71 81       	ldd	r23, Z+1	; 0x01
    6fe8:	61 15       	cp	r22, r1
    6fea:	71 05       	cpc	r23, r1
    6fec:	29 f4       	brne	.+10     	; 0x6ff8 <_ZN6StringixEj+0x22>
		dummy_writable_char = 0;
    6fee:	10 92 da 03 	sts	0x03DA, r1
    6ff2:	6a ed       	ldi	r22, 0xDA	; 218
    6ff4:	73 e0       	ldi	r23, 0x03	; 3
    6ff6:	02 c0       	rjmp	.+4      	; 0x6ffc <_ZN6StringixEj+0x26>
		return dummy_writable_char;
	}
	return buffer[index];
    6ff8:	62 0f       	add	r22, r18
    6ffa:	73 1f       	adc	r23, r19
}
    6ffc:	cb 01       	movw	r24, r22
    6ffe:	08 95       	ret

00007000 <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
    7000:	fc 01       	movw	r30, r24
{
	if (index >= len || !buffer) return 0;
    7002:	84 81       	ldd	r24, Z+4	; 0x04
    7004:	95 81       	ldd	r25, Z+5	; 0x05
    7006:	68 17       	cp	r22, r24
    7008:	79 07       	cpc	r23, r25
    700a:	48 f4       	brcc	.+18     	; 0x701e <_ZNK6StringixEj+0x1e>
    700c:	01 90       	ld	r0, Z+
    700e:	f0 81       	ld	r31, Z
    7010:	e0 2d       	mov	r30, r0
    7012:	30 97       	sbiw	r30, 0x00	; 0
    7014:	21 f0       	breq	.+8      	; 0x701e <_ZNK6StringixEj+0x1e>
	return buffer[index];
    7016:	e6 0f       	add	r30, r22
    7018:	f7 1f       	adc	r31, r23
    701a:	80 81       	ld	r24, Z
    701c:	08 95       	ret
    701e:	80 e0       	ldi	r24, 0x00	; 0
}
    7020:	08 95       	ret

00007022 <_ZN6String11toUpperCaseEv>:
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}

void String::toUpperCase(void)
    7022:	cf 93       	push	r28
    7024:	df 93       	push	r29
    7026:	fc 01       	movw	r30, r24
{
	if (!buffer) return;
    7028:	c0 81       	ld	r28, Z
    702a:	d1 81       	ldd	r29, Z+1	; 0x01
    702c:	20 97       	sbiw	r28, 0x00	; 0
    702e:	39 f4       	brne	.+14     	; 0x703e <_ZN6String11toUpperCaseEv+0x1c>
    7030:	09 c0       	rjmp	.+18     	; 0x7044 <_ZN6String11toUpperCaseEv+0x22>
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
    7032:	99 27       	eor	r25, r25
    7034:	87 fd       	sbrc	r24, 7
    7036:	90 95       	com	r25
    7038:	0e 94 fe 3d 	call	0x7bfc	; 0x7bfc <toupper>
    703c:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    703e:	88 81       	ld	r24, Y
    7040:	88 23       	and	r24, r24
    7042:	b9 f7       	brne	.-18     	; 0x7032 <_ZN6String11toUpperCaseEv+0x10>
		*p = toupper(*p);
	}
}
    7044:	df 91       	pop	r29
    7046:	cf 91       	pop	r28
    7048:	08 95       	ret

0000704a <_ZNK6String7indexOfEcj>:
int String::indexOf(char c) const
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
    704a:	cf 93       	push	r28
    704c:	df 93       	push	r29
    704e:	fc 01       	movw	r30, r24
{
	if (fromIndex >= len) return -1;
    7050:	84 81       	ldd	r24, Z+4	; 0x04
    7052:	95 81       	ldd	r25, Z+5	; 0x05
    7054:	48 17       	cp	r20, r24
    7056:	59 07       	cpc	r21, r25
    7058:	68 f4       	brcc	.+26     	; 0x7074 <_ZNK6String7indexOfEcj+0x2a>
	const char* temp = strchr(buffer + fromIndex, ch);
    705a:	c0 81       	ld	r28, Z
    705c:	d1 81       	ldd	r29, Z+1	; 0x01
    705e:	77 27       	eor	r23, r23
    7060:	67 fd       	sbrc	r22, 7
    7062:	70 95       	com	r23
    7064:	ce 01       	movw	r24, r28
    7066:	84 0f       	add	r24, r20
    7068:	95 1f       	adc	r25, r21
    706a:	0e 94 a7 04 	call	0x94e	; 0x94e <strchr>
    706e:	9c 01       	movw	r18, r24
	if (temp == NULL) return -1;
    7070:	00 97       	sbiw	r24, 0x00	; 0
    7072:	19 f4       	brne	.+6      	; 0x707a <_ZNK6String7indexOfEcj+0x30>
    7074:	2f ef       	ldi	r18, 0xFF	; 255
    7076:	3f ef       	ldi	r19, 0xFF	; 255
    7078:	02 c0       	rjmp	.+4      	; 0x707e <_ZNK6String7indexOfEcj+0x34>
	return temp - buffer;
    707a:	2c 1b       	sub	r18, r28
    707c:	3d 0b       	sbc	r19, r29
}
    707e:	c9 01       	movw	r24, r18
    7080:	df 91       	pop	r29
    7082:	cf 91       	pop	r28
    7084:	08 95       	ret

00007086 <_ZN6String12changeBufferEj>:
		return 1;
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
    7086:	0f 93       	push	r16
    7088:	1f 93       	push	r17
    708a:	cf 93       	push	r28
    708c:	df 93       	push	r29
    708e:	ec 01       	movw	r28, r24
    7090:	8b 01       	movw	r16, r22
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    7092:	6f 5f       	subi	r22, 0xFF	; 255
    7094:	7f 4f       	sbci	r23, 0xFF	; 255
    7096:	88 81       	ld	r24, Y
    7098:	99 81       	ldd	r25, Y+1	; 0x01
    709a:	0e 94 94 3a 	call	0x7528	; 0x7528 <realloc>
	if (newbuffer) {
    709e:	00 97       	sbiw	r24, 0x00	; 0
    70a0:	11 f4       	brne	.+4      	; 0x70a6 <_ZN6String12changeBufferEj+0x20>
    70a2:	80 e0       	ldi	r24, 0x00	; 0
    70a4:	05 c0       	rjmp	.+10     	; 0x70b0 <_ZN6String12changeBufferEj+0x2a>
		buffer = newbuffer;
    70a6:	99 83       	std	Y+1, r25	; 0x01
    70a8:	88 83       	st	Y, r24
		capacity = maxStrLen;
    70aa:	1b 83       	std	Y+3, r17	; 0x03
    70ac:	0a 83       	std	Y+2, r16	; 0x02
    70ae:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    70b0:	df 91       	pop	r29
    70b2:	cf 91       	pop	r28
    70b4:	1f 91       	pop	r17
    70b6:	0f 91       	pop	r16
    70b8:	08 95       	ret

000070ba <_ZN6String7reserveEj>:
	if (buffer) free(buffer);
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
    70ba:	cf 93       	push	r28
    70bc:	df 93       	push	r29
    70be:	ec 01       	movw	r28, r24
{
	if (buffer && capacity >= size) return 1;
    70c0:	88 81       	ld	r24, Y
    70c2:	99 81       	ldd	r25, Y+1	; 0x01
    70c4:	89 2b       	or	r24, r25
    70c6:	29 f0       	breq	.+10     	; 0x70d2 <_ZN6String7reserveEj+0x18>
    70c8:	8a 81       	ldd	r24, Y+2	; 0x02
    70ca:	9b 81       	ldd	r25, Y+3	; 0x03
    70cc:	86 17       	cp	r24, r22
    70ce:	97 07       	cpc	r25, r23
    70d0:	60 f4       	brcc	.+24     	; 0x70ea <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    70d2:	ce 01       	movw	r24, r28
    70d4:	0e 94 43 38 	call	0x7086	; 0x7086 <_ZN6String12changeBufferEj>
    70d8:	88 23       	and	r24, r24
    70da:	41 f0       	breq	.+16     	; 0x70ec <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    70dc:	8c 81       	ldd	r24, Y+4	; 0x04
    70de:	9d 81       	ldd	r25, Y+5	; 0x05
    70e0:	89 2b       	or	r24, r25
    70e2:	19 f4       	brne	.+6      	; 0x70ea <_ZN6String7reserveEj+0x30>
    70e4:	e8 81       	ld	r30, Y
    70e6:	f9 81       	ldd	r31, Y+1	; 0x01
    70e8:	10 82       	st	Z, r1
    70ea:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    70ec:	df 91       	pop	r29
    70ee:	cf 91       	pop	r28
    70f0:	08 95       	ret

000070f2 <_ZN6String6concatEPKcj>:
unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
    70f2:	ef 92       	push	r14
    70f4:	ff 92       	push	r15
    70f6:	0f 93       	push	r16
    70f8:	1f 93       	push	r17
    70fa:	cf 93       	push	r28
    70fc:	df 93       	push	r29
    70fe:	ec 01       	movw	r28, r24
    7100:	7b 01       	movw	r14, r22
{
	unsigned int newlen = len + length;
    7102:	6c 81       	ldd	r22, Y+4	; 0x04
    7104:	7d 81       	ldd	r23, Y+5	; 0x05
	if (!cstr) return 0;
    7106:	e1 14       	cp	r14, r1
    7108:	f1 04       	cpc	r15, r1
    710a:	c1 f0       	breq	.+48     	; 0x713c <_ZN6String6concatEPKcj+0x4a>
	if (length == 0) return 1;
    710c:	41 15       	cp	r20, r1
    710e:	51 05       	cpc	r21, r1
    7110:	99 f0       	breq	.+38     	; 0x7138 <_ZN6String6concatEPKcj+0x46>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    7112:	8a 01       	movw	r16, r20
    7114:	06 0f       	add	r16, r22
    7116:	17 1f       	adc	r17, r23
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
    7118:	b8 01       	movw	r22, r16
    711a:	0e 94 5d 38 	call	0x70ba	; 0x70ba <_ZN6String7reserveEj>
    711e:	88 23       	and	r24, r24
    7120:	69 f0       	breq	.+26     	; 0x713c <_ZN6String6concatEPKcj+0x4a>
	strcpy(buffer + len, cstr);
    7122:	88 81       	ld	r24, Y
    7124:	99 81       	ldd	r25, Y+1	; 0x01
    7126:	2c 81       	ldd	r18, Y+4	; 0x04
    7128:	3d 81       	ldd	r19, Y+5	; 0x05
    712a:	82 0f       	add	r24, r18
    712c:	93 1f       	adc	r25, r19
    712e:	b7 01       	movw	r22, r14
    7130:	0e 94 b2 04 	call	0x964	; 0x964 <strcpy>
	len = newlen;
    7134:	1d 83       	std	Y+5, r17	; 0x05
    7136:	0c 83       	std	Y+4, r16	; 0x04
    7138:	81 e0       	ldi	r24, 0x01	; 1
    713a:	01 c0       	rjmp	.+2      	; 0x713e <_ZN6String6concatEPKcj+0x4c>
	return 1;
    713c:	80 e0       	ldi	r24, 0x00	; 0
}
    713e:	df 91       	pop	r29
    7140:	cf 91       	pop	r28
    7142:	1f 91       	pop	r17
    7144:	0f 91       	pop	r16
    7146:	ff 90       	pop	r15
    7148:	ef 90       	pop	r14
    714a:	08 95       	ret

0000714c <_ZN6String6concatEj>:
	char buf[7];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(unsigned int num)
    714c:	ef 92       	push	r14
    714e:	ff 92       	push	r15
    7150:	0f 93       	push	r16
    7152:	1f 93       	push	r17
    7154:	df 93       	push	r29
    7156:	cf 93       	push	r28
    7158:	00 d0       	rcall	.+0      	; 0x715a <_ZN6String6concatEj+0xe>
    715a:	00 d0       	rcall	.+0      	; 0x715c <_ZN6String6concatEj+0x10>
    715c:	00 d0       	rcall	.+0      	; 0x715e <_ZN6String6concatEj+0x12>
    715e:	cd b7       	in	r28, 0x3d	; 61
    7160:	de b7       	in	r29, 0x3e	; 62
    7162:	7c 01       	movw	r14, r24
    7164:	cb 01       	movw	r24, r22
{
	char buf[6];
	utoa(num, buf, 10);
    7166:	8e 01       	movw	r16, r28
    7168:	0f 5f       	subi	r16, 0xFF	; 255
    716a:	1f 4f       	sbci	r17, 0xFF	; 255
    716c:	b8 01       	movw	r22, r16
    716e:	4a e0       	ldi	r20, 0x0A	; 10
    7170:	50 e0       	ldi	r21, 0x00	; 0
    7172:	0e 94 da 04 	call	0x9b4	; 0x9b4 <utoa>
	return concat(buf, strlen(buf));
    7176:	f8 01       	movw	r30, r16
    7178:	01 90       	ld	r0, Z+
    717a:	00 20       	and	r0, r0
    717c:	e9 f7       	brne	.-6      	; 0x7178 <_ZN6String6concatEj+0x2c>
    717e:	31 97       	sbiw	r30, 0x01	; 1
    7180:	e0 1b       	sub	r30, r16
    7182:	f1 0b       	sbc	r31, r17
    7184:	c7 01       	movw	r24, r14
    7186:	b8 01       	movw	r22, r16
    7188:	af 01       	movw	r20, r30
    718a:	0e 94 79 38 	call	0x70f2	; 0x70f2 <_ZN6String6concatEPKcj>
}
    718e:	26 96       	adiw	r28, 0x06	; 6
    7190:	0f b6       	in	r0, 0x3f	; 63
    7192:	f8 94       	cli
    7194:	de bf       	out	0x3e, r29	; 62
    7196:	0f be       	out	0x3f, r0	; 63
    7198:	cd bf       	out	0x3d, r28	; 61
    719a:	cf 91       	pop	r28
    719c:	df 91       	pop	r29
    719e:	1f 91       	pop	r17
    71a0:	0f 91       	pop	r16
    71a2:	ff 90       	pop	r15
    71a4:	ef 90       	pop	r14
    71a6:	08 95       	ret

000071a8 <_ZN6String6concatEi>:
	char buf[4];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
    71a8:	ef 92       	push	r14
    71aa:	ff 92       	push	r15
    71ac:	0f 93       	push	r16
    71ae:	1f 93       	push	r17
    71b0:	df 93       	push	r29
    71b2:	cf 93       	push	r28
    71b4:	cd b7       	in	r28, 0x3d	; 61
    71b6:	de b7       	in	r29, 0x3e	; 62
    71b8:	27 97       	sbiw	r28, 0x07	; 7
    71ba:	0f b6       	in	r0, 0x3f	; 63
    71bc:	f8 94       	cli
    71be:	de bf       	out	0x3e, r29	; 62
    71c0:	0f be       	out	0x3f, r0	; 63
    71c2:	cd bf       	out	0x3d, r28	; 61
    71c4:	7c 01       	movw	r14, r24
    71c6:	cb 01       	movw	r24, r22
{
	char buf[7];
	itoa(num, buf, 10);
    71c8:	8e 01       	movw	r16, r28
    71ca:	0f 5f       	subi	r16, 0xFF	; 255
    71cc:	1f 4f       	sbci	r17, 0xFF	; 255
    71ce:	b8 01       	movw	r22, r16
    71d0:	4a e0       	ldi	r20, 0x0A	; 10
    71d2:	50 e0       	ldi	r21, 0x00	; 0
    71d4:	0e 94 b9 04 	call	0x972	; 0x972 <itoa>
	return concat(buf, strlen(buf));
    71d8:	f8 01       	movw	r30, r16
    71da:	01 90       	ld	r0, Z+
    71dc:	00 20       	and	r0, r0
    71de:	e9 f7       	brne	.-6      	; 0x71da <_ZN6String6concatEi+0x32>
    71e0:	31 97       	sbiw	r30, 0x01	; 1
    71e2:	e0 1b       	sub	r30, r16
    71e4:	f1 0b       	sbc	r31, r17
    71e6:	c7 01       	movw	r24, r14
    71e8:	b8 01       	movw	r22, r16
    71ea:	af 01       	movw	r20, r30
    71ec:	0e 94 79 38 	call	0x70f2	; 0x70f2 <_ZN6String6concatEPKcj>
}
    71f0:	27 96       	adiw	r28, 0x07	; 7
    71f2:	0f b6       	in	r0, 0x3f	; 63
    71f4:	f8 94       	cli
    71f6:	de bf       	out	0x3e, r29	; 62
    71f8:	0f be       	out	0x3f, r0	; 63
    71fa:	cd bf       	out	0x3d, r28	; 61
    71fc:	cf 91       	pop	r28
    71fe:	df 91       	pop	r29
    7200:	1f 91       	pop	r17
    7202:	0f 91       	pop	r16
    7204:	ff 90       	pop	r15
    7206:	ef 90       	pop	r14
    7208:	08 95       	ret

0000720a <_ZN6String6concatEh>:
	buf[0] = c;
	buf[1] = 0;
	return concat(buf, 1);
}

unsigned char String::concat(unsigned char num)
    720a:	ef 92       	push	r14
    720c:	ff 92       	push	r15
    720e:	0f 93       	push	r16
    7210:	1f 93       	push	r17
    7212:	df 93       	push	r29
    7214:	cf 93       	push	r28
    7216:	00 d0       	rcall	.+0      	; 0x7218 <_ZN6String6concatEh+0xe>
    7218:	00 d0       	rcall	.+0      	; 0x721a <_ZN6String6concatEh+0x10>
    721a:	cd b7       	in	r28, 0x3d	; 61
    721c:	de b7       	in	r29, 0x3e	; 62
    721e:	7c 01       	movw	r14, r24
    7220:	86 2f       	mov	r24, r22
{
	char buf[4];
	itoa(num, buf, 10);
    7222:	90 e0       	ldi	r25, 0x00	; 0
    7224:	8e 01       	movw	r16, r28
    7226:	0f 5f       	subi	r16, 0xFF	; 255
    7228:	1f 4f       	sbci	r17, 0xFF	; 255
    722a:	b8 01       	movw	r22, r16
    722c:	4a e0       	ldi	r20, 0x0A	; 10
    722e:	50 e0       	ldi	r21, 0x00	; 0
    7230:	0e 94 b9 04 	call	0x972	; 0x972 <itoa>
	return concat(buf, strlen(buf));
    7234:	f8 01       	movw	r30, r16
    7236:	01 90       	ld	r0, Z+
    7238:	00 20       	and	r0, r0
    723a:	e9 f7       	brne	.-6      	; 0x7236 <_ZN6String6concatEh+0x2c>
    723c:	31 97       	sbiw	r30, 0x01	; 1
    723e:	e0 1b       	sub	r30, r16
    7240:	f1 0b       	sbc	r31, r17
    7242:	c7 01       	movw	r24, r14
    7244:	b8 01       	movw	r22, r16
    7246:	af 01       	movw	r20, r30
    7248:	0e 94 79 38 	call	0x70f2	; 0x70f2 <_ZN6String6concatEPKcj>
}
    724c:	0f 90       	pop	r0
    724e:	0f 90       	pop	r0
    7250:	0f 90       	pop	r0
    7252:	0f 90       	pop	r0
    7254:	cf 91       	pop	r28
    7256:	df 91       	pop	r29
    7258:	1f 91       	pop	r17
    725a:	0f 91       	pop	r16
    725c:	ff 90       	pop	r15
    725e:	ef 90       	pop	r14
    7260:	08 95       	ret

00007262 <_ZN6String6concatEc>:
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}

unsigned char String::concat(char c)
    7262:	df 93       	push	r29
    7264:	cf 93       	push	r28
    7266:	00 d0       	rcall	.+0      	; 0x7268 <_ZN6String6concatEc+0x6>
    7268:	cd b7       	in	r28, 0x3d	; 61
    726a:	de b7       	in	r29, 0x3e	; 62
{
	char buf[2];
	buf[0] = c;
    726c:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    726e:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
    7270:	be 01       	movw	r22, r28
    7272:	6f 5f       	subi	r22, 0xFF	; 255
    7274:	7f 4f       	sbci	r23, 0xFF	; 255
    7276:	41 e0       	ldi	r20, 0x01	; 1
    7278:	50 e0       	ldi	r21, 0x00	; 0
    727a:	0e 94 79 38 	call	0x70f2	; 0x70f2 <_ZN6String6concatEPKcj>
}
    727e:	0f 90       	pop	r0
    7280:	0f 90       	pop	r0
    7282:	cf 91       	pop	r28
    7284:	df 91       	pop	r29
    7286:	08 95       	ret

00007288 <_ZN6String6concatERKS_>:

/*********************************************/
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
    7288:	fb 01       	movw	r30, r22
{
	return concat(s.buffer, s.len);
    728a:	60 81       	ld	r22, Z
    728c:	71 81       	ldd	r23, Z+1	; 0x01
    728e:	44 81       	ldd	r20, Z+4	; 0x04
    7290:	55 81       	ldd	r21, Z+5	; 0x05
    7292:	0e 94 79 38 	call	0x70f2	; 0x70f2 <_ZN6String6concatEPKcj>
}
    7296:	08 95       	ret

00007298 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
	flags = 0;
}

void String::invalidate(void)
    7298:	cf 93       	push	r28
    729a:	df 93       	push	r29
    729c:	ec 01       	movw	r28, r24
{
	if (buffer) free(buffer);
    729e:	88 81       	ld	r24, Y
    72a0:	99 81       	ldd	r25, Y+1	; 0x01
    72a2:	00 97       	sbiw	r24, 0x00	; 0
    72a4:	11 f0       	breq	.+4      	; 0x72aa <_ZN6String10invalidateEv+0x12>
    72a6:	0e 94 31 31 	call	0x6262	; 0x6262 <free>
	buffer = NULL;
    72aa:	19 82       	std	Y+1, r1	; 0x01
    72ac:	18 82       	st	Y, r1
	capacity = len = 0;
    72ae:	1d 82       	std	Y+5, r1	; 0x05
    72b0:	1c 82       	std	Y+4, r1	; 0x04
    72b2:	1b 82       	std	Y+3, r1	; 0x03
    72b4:	1a 82       	std	Y+2, r1	; 0x02
}
    72b6:	df 91       	pop	r29
    72b8:	cf 91       	pop	r28
    72ba:	08 95       	ret

000072bc <_ZplRK15StringSumHelperRK6String>:

/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
    72bc:	0f 93       	push	r16
    72be:	1f 93       	push	r17
    72c0:	18 2f       	mov	r17, r24
    72c2:	09 2f       	mov	r16, r25
    72c4:	fb 01       	movw	r30, r22
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    72c6:	60 81       	ld	r22, Z
    72c8:	71 81       	ldd	r23, Z+1	; 0x01
    72ca:	44 81       	ldd	r20, Z+4	; 0x04
    72cc:	55 81       	ldd	r21, Z+5	; 0x05
    72ce:	0e 94 79 38 	call	0x70f2	; 0x70f2 <_ZN6String6concatEPKcj>
    72d2:	88 23       	and	r24, r24
    72d4:	21 f4       	brne	.+8      	; 0x72de <_ZplRK15StringSumHelperRK6String+0x22>
    72d6:	81 2f       	mov	r24, r17
    72d8:	90 2f       	mov	r25, r16
    72da:	0e 94 4c 39 	call	0x7298	; 0x7298 <_ZN6String10invalidateEv>
	return a;
}
    72de:	81 2f       	mov	r24, r17
    72e0:	90 2f       	mov	r25, r16
    72e2:	1f 91       	pop	r17
    72e4:	0f 91       	pop	r16
    72e6:	08 95       	ret

000072e8 <_ZN6String4copyEPKcj>:

/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
    72e8:	ef 92       	push	r14
    72ea:	ff 92       	push	r15
    72ec:	0f 93       	push	r16
    72ee:	1f 93       	push	r17
    72f0:	cf 93       	push	r28
    72f2:	df 93       	push	r29
    72f4:	ec 01       	movw	r28, r24
    72f6:	7b 01       	movw	r14, r22
    72f8:	8a 01       	movw	r16, r20
{
	if (!reserve(length)) {
    72fa:	ba 01       	movw	r22, r20
    72fc:	0e 94 5d 38 	call	0x70ba	; 0x70ba <_ZN6String7reserveEj>
    7300:	88 23       	and	r24, r24
    7302:	21 f4       	brne	.+8      	; 0x730c <_ZN6String4copyEPKcj+0x24>
		invalidate();
    7304:	ce 01       	movw	r24, r28
    7306:	0e 94 4c 39 	call	0x7298	; 0x7298 <_ZN6String10invalidateEv>
    730a:	07 c0       	rjmp	.+14     	; 0x731a <_ZN6String4copyEPKcj+0x32>
		return *this;
	}
	len = length;
    730c:	1d 83       	std	Y+5, r17	; 0x05
    730e:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    7310:	88 81       	ld	r24, Y
    7312:	99 81       	ldd	r25, Y+1	; 0x01
    7314:	b7 01       	movw	r22, r14
    7316:	0e 94 b2 04 	call	0x964	; 0x964 <strcpy>
	return *this;
}
    731a:	ce 01       	movw	r24, r28
    731c:	df 91       	pop	r29
    731e:	cf 91       	pop	r28
    7320:	1f 91       	pop	r17
    7322:	0f 91       	pop	r16
    7324:	ff 90       	pop	r15
    7326:	ef 90       	pop	r14
    7328:	08 95       	ret

0000732a <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    732a:	cf 93       	push	r28
    732c:	df 93       	push	r29
    732e:	ec 01       	movw	r28, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    7330:	19 82       	std	Y+1, r1	; 0x01
    7332:	18 82       	st	Y, r1
	capacity = 0;
    7334:	1b 82       	std	Y+3, r1	; 0x03
    7336:	1a 82       	std	Y+2, r1	; 0x02
	len = 0;
    7338:	1d 82       	std	Y+5, r1	; 0x05
    733a:	1c 82       	std	Y+4, r1	; 0x04
	flags = 0;
    733c:	1e 82       	std	Y+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    733e:	61 15       	cp	r22, r1
    7340:	71 05       	cpc	r23, r1
    7342:	51 f0       	breq	.+20     	; 0x7358 <_ZN6StringC1EPKc+0x2e>
    7344:	db 01       	movw	r26, r22
    7346:	0d 90       	ld	r0, X+
    7348:	00 20       	and	r0, r0
    734a:	e9 f7       	brne	.-6      	; 0x7346 <_ZN6StringC1EPKc+0x1c>
    734c:	11 97       	sbiw	r26, 0x01	; 1
    734e:	a6 1b       	sub	r26, r22
    7350:	b7 0b       	sbc	r27, r23
    7352:	ad 01       	movw	r20, r26
    7354:	0e 94 74 39 	call	0x72e8	; 0x72e8 <_ZN6String4copyEPKcj>
}
    7358:	df 91       	pop	r29
    735a:	cf 91       	pop	r28
    735c:	08 95       	ret

0000735e <_ZN6StringaSEPKc>:
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    735e:	0f 93       	push	r16
    7360:	1f 93       	push	r17
    7362:	18 2f       	mov	r17, r24
    7364:	09 2f       	mov	r16, r25
{
	if (cstr) copy(cstr, strlen(cstr));
    7366:	61 15       	cp	r22, r1
    7368:	71 05       	cpc	r23, r1
    736a:	59 f0       	breq	.+22     	; 0x7382 <_ZN6StringaSEPKc+0x24>
    736c:	db 01       	movw	r26, r22
    736e:	0d 90       	ld	r0, X+
    7370:	00 20       	and	r0, r0
    7372:	e9 f7       	brne	.-6      	; 0x736e <_ZN6StringaSEPKc+0x10>
    7374:	11 97       	sbiw	r26, 0x01	; 1
    7376:	a6 1b       	sub	r26, r22
    7378:	b7 0b       	sbc	r27, r23
    737a:	ad 01       	movw	r20, r26
    737c:	0e 94 74 39 	call	0x72e8	; 0x72e8 <_ZN6String4copyEPKcj>
    7380:	02 c0       	rjmp	.+4      	; 0x7386 <_ZN6StringaSEPKc+0x28>
	else invalidate();
    7382:	0e 94 4c 39 	call	0x7298	; 0x7298 <_ZN6String10invalidateEv>
	
	return *this;
}
    7386:	81 2f       	mov	r24, r17
    7388:	90 2f       	mov	r25, r16
    738a:	1f 91       	pop	r17
    738c:	0f 91       	pop	r16
    738e:	08 95       	ret

00007390 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    7390:	ef 92       	push	r14
    7392:	ff 92       	push	r15
    7394:	0f 93       	push	r16
    7396:	1f 93       	push	r17
    7398:	df 93       	push	r29
    739a:	cf 93       	push	r28
    739c:	cd b7       	in	r28, 0x3d	; 61
    739e:	de b7       	in	r29, 0x3e	; 62
    73a0:	29 97       	sbiw	r28, 0x09	; 9
    73a2:	0f b6       	in	r0, 0x3f	; 63
    73a4:	f8 94       	cli
    73a6:	de bf       	out	0x3e, r29	; 62
    73a8:	0f be       	out	0x3f, r0	; 63
    73aa:	cd bf       	out	0x3d, r28	; 61
    73ac:	8c 01       	movw	r16, r24
    73ae:	86 2f       	mov	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    73b0:	f8 01       	movw	r30, r16
    73b2:	11 82       	std	Z+1, r1	; 0x01
    73b4:	10 82       	st	Z, r1
	capacity = 0;
    73b6:	13 82       	std	Z+3, r1	; 0x03
    73b8:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    73ba:	15 82       	std	Z+5, r1	; 0x05
    73bc:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    73be:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned char value, unsigned char base)
{
	init();
	char buf[9];
	utoa(value, buf, base);
    73c0:	90 e0       	ldi	r25, 0x00	; 0
    73c2:	7e 01       	movw	r14, r28
    73c4:	08 94       	sec
    73c6:	e1 1c       	adc	r14, r1
    73c8:	f1 1c       	adc	r15, r1
    73ca:	b7 01       	movw	r22, r14
    73cc:	50 e0       	ldi	r21, 0x00	; 0
    73ce:	0e 94 da 04 	call	0x9b4	; 0x9b4 <utoa>
	*this = buf;
    73d2:	c8 01       	movw	r24, r16
    73d4:	b7 01       	movw	r22, r14
    73d6:	0e 94 af 39 	call	0x735e	; 0x735e <_ZN6StringaSEPKc>
}
    73da:	29 96       	adiw	r28, 0x09	; 9
    73dc:	0f b6       	in	r0, 0x3f	; 63
    73de:	f8 94       	cli
    73e0:	de bf       	out	0x3e, r29	; 62
    73e2:	0f be       	out	0x3f, r0	; 63
    73e4:	cd bf       	out	0x3d, r28	; 61
    73e6:	cf 91       	pop	r28
    73e8:	df 91       	pop	r29
    73ea:	1f 91       	pop	r17
    73ec:	0f 91       	pop	r16
    73ee:	ff 90       	pop	r15
    73f0:	ef 90       	pop	r14
    73f2:	08 95       	ret

000073f4 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
    73f4:	df 93       	push	r29
    73f6:	cf 93       	push	r28
    73f8:	00 d0       	rcall	.+0      	; 0x73fa <_ZN6StringC1Ec+0x6>
    73fa:	cd b7       	in	r28, 0x3d	; 61
    73fc:	de b7       	in	r29, 0x3e	; 62
    73fe:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    7400:	11 82       	std	Z+1, r1	; 0x01
    7402:	10 82       	st	Z, r1
	capacity = 0;
    7404:	13 82       	std	Z+3, r1	; 0x03
    7406:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    7408:	15 82       	std	Z+5, r1	; 0x05
    740a:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    740c:	16 82       	std	Z+6, r1	; 0x06

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
    740e:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    7410:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
    7412:	be 01       	movw	r22, r28
    7414:	6f 5f       	subi	r22, 0xFF	; 255
    7416:	7f 4f       	sbci	r23, 0xFF	; 255
    7418:	0e 94 af 39 	call	0x735e	; 0x735e <_ZN6StringaSEPKc>
}
    741c:	0f 90       	pop	r0
    741e:	0f 90       	pop	r0
    7420:	cf 91       	pop	r28
    7422:	df 91       	pop	r29
    7424:	08 95       	ret

00007426 <_ZNK6String9substringEjj>:
String String::substring( unsigned int left ) const
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
    7426:	bf 92       	push	r11
    7428:	cf 92       	push	r12
    742a:	df 92       	push	r13
    742c:	ef 92       	push	r14
    742e:	ff 92       	push	r15
    7430:	0f 93       	push	r16
    7432:	1f 93       	push	r17
    7434:	cf 93       	push	r28
    7436:	df 93       	push	r29
    7438:	08 2f       	mov	r16, r24
    743a:	b9 2e       	mov	r11, r25
    743c:	6b 01       	movw	r12, r22
    743e:	7a 01       	movw	r14, r20
    7440:	e9 01       	movw	r28, r18
{
	if (left > right) {
    7442:	24 17       	cp	r18, r20
    7444:	35 07       	cpc	r19, r21
    7446:	10 f4       	brcc	.+4      	; 0x744c <_ZNK6String9substringEjj+0x26>
    7448:	ea 01       	movw	r28, r20
    744a:	79 01       	movw	r14, r18
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    744c:	80 2f       	mov	r24, r16
    744e:	9b 2d       	mov	r25, r11
    7450:	62 e0       	ldi	r22, 0x02	; 2
    7452:	71 e0       	ldi	r23, 0x01	; 1
    7454:	0e 94 95 39 	call	0x732a	; 0x732a <_ZN6StringC1EPKc>
	if (left > len) return out;
    7458:	d6 01       	movw	r26, r12
    745a:	14 96       	adiw	r26, 0x04	; 4
    745c:	8d 91       	ld	r24, X+
    745e:	9c 91       	ld	r25, X
    7460:	15 97       	sbiw	r26, 0x05	; 5
    7462:	8e 15       	cp	r24, r14
    7464:	9f 05       	cpc	r25, r15
    7466:	d0 f0       	brcs	.+52     	; 0x749c <_ZNK6String9substringEjj+0x76>
    7468:	8c 17       	cp	r24, r28
    746a:	9d 07       	cpc	r25, r29
    746c:	08 f4       	brcc	.+2      	; 0x7470 <_ZNK6String9substringEjj+0x4a>
    746e:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    7470:	d6 01       	movw	r26, r12
    7472:	ed 91       	ld	r30, X+
    7474:	fc 91       	ld	r31, X
    7476:	11 97       	sbiw	r26, 0x01	; 1
    7478:	ec 0f       	add	r30, r28
    747a:	fd 1f       	adc	r31, r29
    747c:	10 81       	ld	r17, Z
	buffer[right] = '\0';	
    747e:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    7480:	6d 91       	ld	r22, X+
    7482:	7c 91       	ld	r23, X
    7484:	6e 0d       	add	r22, r14
    7486:	7f 1d       	adc	r23, r15
    7488:	80 2f       	mov	r24, r16
    748a:	9b 2d       	mov	r25, r11
    748c:	0e 94 af 39 	call	0x735e	; 0x735e <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    7490:	d6 01       	movw	r26, r12
    7492:	ed 91       	ld	r30, X+
    7494:	fc 91       	ld	r31, X
    7496:	ec 0f       	add	r30, r28
    7498:	fd 1f       	adc	r31, r29
    749a:	10 83       	st	Z, r17
	return out;
}
    749c:	80 2f       	mov	r24, r16
    749e:	9b 2d       	mov	r25, r11
    74a0:	df 91       	pop	r29
    74a2:	cf 91       	pop	r28
    74a4:	1f 91       	pop	r17
    74a6:	0f 91       	pop	r16
    74a8:	ff 90       	pop	r15
    74aa:	ef 90       	pop	r14
    74ac:	df 90       	pop	r13
    74ae:	cf 90       	pop	r12
    74b0:	bf 90       	pop	r11
    74b2:	08 95       	ret

000074b4 <_ZNK6String9substringEj>:
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}

String String::substring( unsigned int left ) const
    74b4:	0f 93       	push	r16
    74b6:	1f 93       	push	r17
    74b8:	8c 01       	movw	r16, r24
    74ba:	fb 01       	movw	r30, r22
{
	return substring(left, len);
    74bc:	24 81       	ldd	r18, Z+4	; 0x04
    74be:	35 81       	ldd	r19, Z+5	; 0x05
    74c0:	0e 94 13 3a 	call	0x7426	; 0x7426 <_ZNK6String9substringEjj>
}
    74c4:	c8 01       	movw	r24, r16
    74c6:	1f 91       	pop	r17
    74c8:	0f 91       	pop	r16
    74ca:	08 95       	ret

000074cc <_ZN6StringaSERKS_>:
	rhs.capacity = 0;
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
    74cc:	cf 93       	push	r28
    74ce:	df 93       	push	r29
    74d0:	ec 01       	movw	r28, r24
    74d2:	fb 01       	movw	r30, r22
{
	if (this == &rhs) return *this;
    74d4:	86 17       	cp	r24, r22
    74d6:	97 07       	cpc	r25, r23
    74d8:	61 f0       	breq	.+24     	; 0x74f2 <_ZN6StringaSERKS_+0x26>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    74da:	60 81       	ld	r22, Z
    74dc:	71 81       	ldd	r23, Z+1	; 0x01
    74de:	61 15       	cp	r22, r1
    74e0:	71 05       	cpc	r23, r1
    74e2:	29 f0       	breq	.+10     	; 0x74ee <_ZN6StringaSERKS_+0x22>
    74e4:	44 81       	ldd	r20, Z+4	; 0x04
    74e6:	55 81       	ldd	r21, Z+5	; 0x05
    74e8:	0e 94 74 39 	call	0x72e8	; 0x72e8 <_ZN6String4copyEPKcj>
    74ec:	02 c0       	rjmp	.+4      	; 0x74f2 <_ZN6StringaSERKS_+0x26>
	else invalidate();
    74ee:	0e 94 4c 39 	call	0x7298	; 0x7298 <_ZN6String10invalidateEv>
	
	return *this;
}
    74f2:	ce 01       	movw	r24, r28
    74f4:	df 91       	pop	r29
    74f6:	cf 91       	pop	r28
    74f8:	08 95       	ret

000074fa <_ZN6StringC2ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    74fa:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    74fc:	11 82       	std	Z+1, r1	; 0x01
    74fe:	10 82       	st	Z, r1
	capacity = 0;
    7500:	13 82       	std	Z+3, r1	; 0x03
    7502:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    7504:	15 82       	std	Z+5, r1	; 0x05
    7506:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    7508:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
    750a:	0e 94 66 3a 	call	0x74cc	; 0x74cc <_ZN6StringaSERKS_>
}
    750e:	08 95       	ret

00007510 <_ZN6StringD1Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    7510:	fc 01       	movw	r30, r24
{
	free(buffer);
    7512:	80 81       	ld	r24, Z
    7514:	91 81       	ldd	r25, Z+1	; 0x01
    7516:	0e 94 31 31 	call	0x6262	; 0x6262 <free>
}
    751a:	08 95       	ret

0000751c <_ZN6StringD2Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    751c:	fc 01       	movw	r30, r24
{
	free(buffer);
    751e:	80 81       	ld	r24, Z
    7520:	91 81       	ldd	r25, Z+1	; 0x01
    7522:	0e 94 31 31 	call	0x6262	; 0x6262 <free>
}
    7526:	08 95       	ret

00007528 <realloc>:
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
    7528:	6f 92       	push	r6
    752a:	7f 92       	push	r7
    752c:	8f 92       	push	r8
    752e:	9f 92       	push	r9
    7530:	af 92       	push	r10
    7532:	bf 92       	push	r11
    7534:	cf 92       	push	r12
    7536:	df 92       	push	r13
    7538:	ef 92       	push	r14
    753a:	ff 92       	push	r15
    753c:	0f 93       	push	r16
    753e:	1f 93       	push	r17
    7540:	cf 93       	push	r28
    7542:	df 93       	push	r29
    7544:	8c 01       	movw	r16, r24
    7546:	00 97       	sbiw	r24, 0x00	; 0
    7548:	29 f4       	brne	.+10     	; 0x7554 <realloc+0x2c>
		return malloc(len);
    754a:	cb 01       	movw	r24, r22
    754c:	0e 94 94 30 	call	0x6128	; 0x6128 <malloc>
    7550:	8c 01       	movw	r16, r24
    7552:	bb c0       	rjmp	.+374    	; 0x76ca <realloc+0x1a2>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
    7554:	8e ef       	ldi	r24, 0xFE	; 254
    7556:	e8 2e       	mov	r14, r24
    7558:	8f ef       	ldi	r24, 0xFF	; 255
    755a:	f8 2e       	mov	r15, r24
    755c:	e0 0e       	add	r14, r16
    755e:	f1 1e       	adc	r15, r17
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
    7560:	48 01       	movw	r8, r16
    7562:	86 0e       	add	r8, r22
    7564:	97 1e       	adc	r9, r23
	if (cp < cp1)
    7566:	8e 14       	cp	r8, r14
    7568:	9f 04       	cpc	r9, r15
    756a:	08 f4       	brcc	.+2      	; 0x756e <realloc+0x46>
    756c:	ac c0       	rjmp	.+344    	; 0x76c6 <realloc+0x19e>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
    756e:	d7 01       	movw	r26, r14
    7570:	4d 91       	ld	r20, X+
    7572:	5c 91       	ld	r21, X
    7574:	11 97       	sbiw	r26, 0x01	; 1
    7576:	46 17       	cp	r20, r22
    7578:	57 07       	cpc	r21, r23
    757a:	b8 f0       	brcs	.+46     	; 0x75aa <realloc+0x82>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    757c:	45 30       	cpi	r20, 0x05	; 5
    757e:	51 05       	cpc	r21, r1
    7580:	08 f4       	brcc	.+2      	; 0x7584 <realloc+0x5c>
    7582:	a3 c0       	rjmp	.+326    	; 0x76ca <realloc+0x1a2>
    7584:	ca 01       	movw	r24, r20
    7586:	04 97       	sbiw	r24, 0x04	; 4
    7588:	86 17       	cp	r24, r22
    758a:	97 07       	cpc	r25, r23
    758c:	08 f4       	brcc	.+2      	; 0x7590 <realloc+0x68>
    758e:	9d c0       	rjmp	.+314    	; 0x76ca <realloc+0x1a2>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
    7590:	42 50       	subi	r20, 0x02	; 2
    7592:	50 40       	sbci	r21, 0x00	; 0
    7594:	46 1b       	sub	r20, r22
    7596:	57 0b       	sbc	r21, r23
    7598:	f4 01       	movw	r30, r8
    759a:	41 93       	st	Z+, r20
    759c:	51 93       	st	Z+, r21
		fp1->sz = len;
    759e:	6d 93       	st	X+, r22
    75a0:	7c 93       	st	X, r23
		free(&(fp2->nx));
    75a2:	cf 01       	movw	r24, r30
    75a4:	0e 94 31 31 	call	0x6262	; 0x6262 <free>
    75a8:	90 c0       	rjmp	.+288    	; 0x76ca <realloc+0x1a2>

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
    75aa:	5b 01       	movw	r10, r22
    75ac:	a4 1a       	sub	r10, r20
    75ae:	b5 0a       	sbc	r11, r21
	cp = (char *)ptr + fp1->sz;
    75b0:	38 01       	movw	r6, r16
    75b2:	64 0e       	add	r6, r20
    75b4:	75 1e       	adc	r7, r21
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
    75b6:	a0 91 dd 03 	lds	r26, 0x03DD
    75ba:	b0 91 de 03 	lds	r27, 0x03DE
    75be:	cc 24       	eor	r12, r12
    75c0:	dd 24       	eor	r13, r13
    75c2:	e0 e0       	ldi	r30, 0x00	; 0
    75c4:	f0 e0       	ldi	r31, 0x00	; 0
    75c6:	47 c0       	rjmp	.+142    	; 0x7656 <realloc+0x12e>
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
    75c8:	a6 15       	cp	r26, r6
    75ca:	b7 05       	cpc	r27, r7
    75cc:	a9 f5       	brne	.+106    	; 0x7638 <realloc+0x110>
    75ce:	cd 91       	ld	r28, X+
    75d0:	dc 91       	ld	r29, X
    75d2:	11 97       	sbiw	r26, 0x01	; 1
    75d4:	ce 01       	movw	r24, r28
    75d6:	02 96       	adiw	r24, 0x02	; 2
    75d8:	8a 15       	cp	r24, r10
    75da:	9b 05       	cpc	r25, r11
    75dc:	68 f1       	brcs	.+90     	; 0x7638 <realloc+0x110>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
    75de:	ce 01       	movw	r24, r28
    75e0:	8a 19       	sub	r24, r10
    75e2:	9b 09       	sbc	r25, r11
    75e4:	02 96       	adiw	r24, 0x02	; 2
    75e6:	12 96       	adiw	r26, 0x02	; 2
    75e8:	2c 91       	ld	r18, X
    75ea:	12 97       	sbiw	r26, 0x02	; 2
    75ec:	13 96       	adiw	r26, 0x03	; 3
    75ee:	3c 91       	ld	r19, X
    75f0:	05 97       	sbiw	r24, 0x05	; 5
    75f2:	58 f0       	brcs	.+22     	; 0x760a <realloc+0xe2>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
    75f4:	f4 01       	movw	r30, r8
				fp2->nx = fp3->nx;
    75f6:	22 83       	std	Z+2, r18	; 0x02
    75f8:	33 83       	std	Z+3, r19	; 0x03
				fp2->sz = fp3->sz - incr;
    75fa:	ca 19       	sub	r28, r10
    75fc:	db 09       	sbc	r29, r11
    75fe:	d1 83       	std	Z+1, r29	; 0x01
    7600:	c0 83       	st	Z, r28
				fp1->sz = len;
    7602:	d7 01       	movw	r26, r14
    7604:	6d 93       	st	X+, r22
    7606:	7c 93       	st	X, r23
    7608:	09 c0       	rjmp	.+18     	; 0x761c <realloc+0xf4>
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
    760a:	4e 5f       	subi	r20, 0xFE	; 254
    760c:	5f 4f       	sbci	r21, 0xFF	; 255
    760e:	4c 0f       	add	r20, r28
    7610:	5d 1f       	adc	r21, r29
    7612:	f7 01       	movw	r30, r14
    7614:	51 83       	std	Z+1, r21	; 0x01
    7616:	40 83       	st	Z, r20
				fp2 = fp3->nx;
    7618:	c9 01       	movw	r24, r18
    761a:	fc 01       	movw	r30, r24
			}
			if (ofp3)
    761c:	c1 14       	cp	r12, r1
    761e:	d1 04       	cpc	r13, r1
    7620:	31 f0       	breq	.+12     	; 0x762e <realloc+0x106>
				ofp3->nx = fp2;
    7622:	d6 01       	movw	r26, r12
    7624:	13 96       	adiw	r26, 0x03	; 3
    7626:	fc 93       	st	X, r31
    7628:	ee 93       	st	-X, r30
    762a:	12 97       	sbiw	r26, 0x02	; 2
    762c:	4e c0       	rjmp	.+156    	; 0x76ca <realloc+0x1a2>
			else
				__flp = fp2;
    762e:	f0 93 de 03 	sts	0x03DE, r31
    7632:	e0 93 dd 03 	sts	0x03DD, r30
    7636:	49 c0       	rjmp	.+146    	; 0x76ca <realloc+0x1a2>
    7638:	8d 91       	ld	r24, X+
    763a:	9c 91       	ld	r25, X
    763c:	11 97       	sbiw	r26, 0x01	; 1
    763e:	e8 17       	cp	r30, r24
    7640:	f9 07       	cpc	r31, r25
    7642:	08 f4       	brcc	.+2      	; 0x7646 <realloc+0x11e>
    7644:	fc 01       	movw	r30, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
    7646:	6d 01       	movw	r12, r26
    7648:	12 96       	adiw	r26, 0x02	; 2
    764a:	8c 91       	ld	r24, X
    764c:	12 97       	sbiw	r26, 0x02	; 2
    764e:	13 96       	adiw	r26, 0x03	; 3
    7650:	9c 91       	ld	r25, X
    7652:	9c 01       	movw	r18, r24
    7654:	d9 01       	movw	r26, r18
	 */
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
    7656:	10 97       	sbiw	r26, 0x00	; 0
    7658:	09 f0       	breq	.+2      	; 0x765c <realloc+0x134>
    765a:	b6 cf       	rjmp	.-148    	; 0x75c8 <realloc+0xa0>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
    765c:	80 91 db 03 	lds	r24, 0x03DB
    7660:	90 91 dc 03 	lds	r25, 0x03DC
    7664:	86 15       	cp	r24, r6
    7666:	97 05       	cpc	r25, r7
    7668:	e9 f4       	brne	.+58     	; 0x76a4 <realloc+0x17c>
    766a:	e6 17       	cp	r30, r22
    766c:	f7 07       	cpc	r31, r23
    766e:	d0 f4       	brcc	.+52     	; 0x76a4 <realloc+0x17c>
		cp1 = __malloc_heap_end;
    7670:	20 91 0e 01 	lds	r18, 0x010E
    7674:	30 91 0f 01 	lds	r19, 0x010F
		cp = (char *)ptr + len;
		if (cp1 == 0)
    7678:	21 15       	cp	r18, r1
    767a:	31 05       	cpc	r19, r1
    767c:	41 f4       	brne	.+16     	; 0x768e <realloc+0x166>
			cp1 = STACK_POINTER() - __malloc_margin;
    767e:	2d b7       	in	r18, 0x3d	; 61
    7680:	3e b7       	in	r19, 0x3e	; 62
    7682:	80 91 0a 01 	lds	r24, 0x010A
    7686:	90 91 0b 01 	lds	r25, 0x010B
    768a:	28 1b       	sub	r18, r24
    768c:	39 0b       	sbc	r19, r25
		if (cp < cp1) {
    768e:	82 16       	cp	r8, r18
    7690:	93 06       	cpc	r9, r19
    7692:	c8 f4       	brcc	.+50     	; 0x76c6 <realloc+0x19e>
			__brkval = cp;
    7694:	90 92 dc 03 	sts	0x03DC, r9
    7698:	80 92 db 03 	sts	0x03DB, r8
			fp1->sz = len;
    769c:	f7 01       	movw	r30, r14
    769e:	71 83       	std	Z+1, r23	; 0x01
    76a0:	60 83       	st	Z, r22
    76a2:	13 c0       	rjmp	.+38     	; 0x76ca <realloc+0x1a2>

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
    76a4:	cb 01       	movw	r24, r22
    76a6:	0e 94 94 30 	call	0x6128	; 0x6128 <malloc>
    76aa:	ec 01       	movw	r28, r24
    76ac:	00 97       	sbiw	r24, 0x00	; 0
    76ae:	59 f0       	breq	.+22     	; 0x76c6 <realloc+0x19e>
		return 0;
	memcpy(memp, ptr, fp1->sz);
    76b0:	d7 01       	movw	r26, r14
    76b2:	4d 91       	ld	r20, X+
    76b4:	5c 91       	ld	r21, X
    76b6:	b8 01       	movw	r22, r16
    76b8:	0e 94 9e 04 	call	0x93c	; 0x93c <memcpy>
	free(ptr);
    76bc:	c8 01       	movw	r24, r16
    76be:	0e 94 31 31 	call	0x6262	; 0x6262 <free>
    76c2:	8e 01       	movw	r16, r28
    76c4:	02 c0       	rjmp	.+4      	; 0x76ca <realloc+0x1a2>
	return memp;
    76c6:	00 e0       	ldi	r16, 0x00	; 0
    76c8:	10 e0       	ldi	r17, 0x00	; 0
}
    76ca:	c8 01       	movw	r24, r16
    76cc:	df 91       	pop	r29
    76ce:	cf 91       	pop	r28
    76d0:	1f 91       	pop	r17
    76d2:	0f 91       	pop	r16
    76d4:	ff 90       	pop	r15
    76d6:	ef 90       	pop	r14
    76d8:	df 90       	pop	r13
    76da:	cf 90       	pop	r12
    76dc:	bf 90       	pop	r11
    76de:	af 90       	pop	r10
    76e0:	9f 90       	pop	r9
    76e2:	8f 90       	pop	r8
    76e4:	7f 90       	pop	r7
    76e6:	6f 90       	pop	r6
    76e8:	08 95       	ret

000076ea <__subsf3>:
    76ea:	50 58       	subi	r21, 0x80	; 128

000076ec <__addsf3>:
    76ec:	bb 27       	eor	r27, r27
    76ee:	aa 27       	eor	r26, r26
    76f0:	0e d0       	rcall	.+28     	; 0x770e <__addsf3x>
    76f2:	75 c1       	rjmp	.+746    	; 0x79de <__fp_round>
    76f4:	66 d1       	rcall	.+716    	; 0x79c2 <__fp_pscA>
    76f6:	30 f0       	brcs	.+12     	; 0x7704 <__addsf3+0x18>
    76f8:	6b d1       	rcall	.+726    	; 0x79d0 <__fp_pscB>
    76fa:	20 f0       	brcs	.+8      	; 0x7704 <__addsf3+0x18>
    76fc:	31 f4       	brne	.+12     	; 0x770a <__addsf3+0x1e>
    76fe:	9f 3f       	cpi	r25, 0xFF	; 255
    7700:	11 f4       	brne	.+4      	; 0x7706 <__addsf3+0x1a>
    7702:	1e f4       	brtc	.+6      	; 0x770a <__addsf3+0x1e>
    7704:	5b c1       	rjmp	.+694    	; 0x79bc <__fp_nan>
    7706:	0e f4       	brtc	.+2      	; 0x770a <__addsf3+0x1e>
    7708:	e0 95       	com	r30
    770a:	e7 fb       	bst	r30, 7
    770c:	51 c1       	rjmp	.+674    	; 0x79b0 <__fp_inf>

0000770e <__addsf3x>:
    770e:	e9 2f       	mov	r30, r25
    7710:	77 d1       	rcall	.+750    	; 0x7a00 <__fp_split3>
    7712:	80 f3       	brcs	.-32     	; 0x76f4 <__addsf3+0x8>
    7714:	ba 17       	cp	r27, r26
    7716:	62 07       	cpc	r22, r18
    7718:	73 07       	cpc	r23, r19
    771a:	84 07       	cpc	r24, r20
    771c:	95 07       	cpc	r25, r21
    771e:	18 f0       	brcs	.+6      	; 0x7726 <__addsf3x+0x18>
    7720:	71 f4       	brne	.+28     	; 0x773e <__addsf3x+0x30>
    7722:	9e f5       	brtc	.+102    	; 0x778a <__addsf3x+0x7c>
    7724:	8f c1       	rjmp	.+798    	; 0x7a44 <__fp_zero>
    7726:	0e f4       	brtc	.+2      	; 0x772a <__addsf3x+0x1c>
    7728:	e0 95       	com	r30
    772a:	0b 2e       	mov	r0, r27
    772c:	ba 2f       	mov	r27, r26
    772e:	a0 2d       	mov	r26, r0
    7730:	0b 01       	movw	r0, r22
    7732:	b9 01       	movw	r22, r18
    7734:	90 01       	movw	r18, r0
    7736:	0c 01       	movw	r0, r24
    7738:	ca 01       	movw	r24, r20
    773a:	a0 01       	movw	r20, r0
    773c:	11 24       	eor	r1, r1
    773e:	ff 27       	eor	r31, r31
    7740:	59 1b       	sub	r21, r25
    7742:	99 f0       	breq	.+38     	; 0x776a <__addsf3x+0x5c>
    7744:	59 3f       	cpi	r21, 0xF9	; 249
    7746:	50 f4       	brcc	.+20     	; 0x775c <__addsf3x+0x4e>
    7748:	50 3e       	cpi	r21, 0xE0	; 224
    774a:	68 f1       	brcs	.+90     	; 0x77a6 <__addsf3x+0x98>
    774c:	1a 16       	cp	r1, r26
    774e:	f0 40       	sbci	r31, 0x00	; 0
    7750:	a2 2f       	mov	r26, r18
    7752:	23 2f       	mov	r18, r19
    7754:	34 2f       	mov	r19, r20
    7756:	44 27       	eor	r20, r20
    7758:	58 5f       	subi	r21, 0xF8	; 248
    775a:	f3 cf       	rjmp	.-26     	; 0x7742 <__addsf3x+0x34>
    775c:	46 95       	lsr	r20
    775e:	37 95       	ror	r19
    7760:	27 95       	ror	r18
    7762:	a7 95       	ror	r26
    7764:	f0 40       	sbci	r31, 0x00	; 0
    7766:	53 95       	inc	r21
    7768:	c9 f7       	brne	.-14     	; 0x775c <__addsf3x+0x4e>
    776a:	7e f4       	brtc	.+30     	; 0x778a <__addsf3x+0x7c>
    776c:	1f 16       	cp	r1, r31
    776e:	ba 0b       	sbc	r27, r26
    7770:	62 0b       	sbc	r22, r18
    7772:	73 0b       	sbc	r23, r19
    7774:	84 0b       	sbc	r24, r20
    7776:	ba f0       	brmi	.+46     	; 0x77a6 <__addsf3x+0x98>
    7778:	91 50       	subi	r25, 0x01	; 1
    777a:	a1 f0       	breq	.+40     	; 0x77a4 <__addsf3x+0x96>
    777c:	ff 0f       	add	r31, r31
    777e:	bb 1f       	adc	r27, r27
    7780:	66 1f       	adc	r22, r22
    7782:	77 1f       	adc	r23, r23
    7784:	88 1f       	adc	r24, r24
    7786:	c2 f7       	brpl	.-16     	; 0x7778 <__addsf3x+0x6a>
    7788:	0e c0       	rjmp	.+28     	; 0x77a6 <__addsf3x+0x98>
    778a:	ba 0f       	add	r27, r26
    778c:	62 1f       	adc	r22, r18
    778e:	73 1f       	adc	r23, r19
    7790:	84 1f       	adc	r24, r20
    7792:	48 f4       	brcc	.+18     	; 0x77a6 <__addsf3x+0x98>
    7794:	87 95       	ror	r24
    7796:	77 95       	ror	r23
    7798:	67 95       	ror	r22
    779a:	b7 95       	ror	r27
    779c:	f7 95       	ror	r31
    779e:	9e 3f       	cpi	r25, 0xFE	; 254
    77a0:	08 f0       	brcs	.+2      	; 0x77a4 <__addsf3x+0x96>
    77a2:	b3 cf       	rjmp	.-154    	; 0x770a <__addsf3+0x1e>
    77a4:	93 95       	inc	r25
    77a6:	88 0f       	add	r24, r24
    77a8:	08 f0       	brcs	.+2      	; 0x77ac <__addsf3x+0x9e>
    77aa:	99 27       	eor	r25, r25
    77ac:	ee 0f       	add	r30, r30
    77ae:	97 95       	ror	r25
    77b0:	87 95       	ror	r24
    77b2:	08 95       	ret

000077b4 <__cmpsf2>:
    77b4:	d9 d0       	rcall	.+434    	; 0x7968 <__fp_cmp>
    77b6:	08 f4       	brcc	.+2      	; 0x77ba <__cmpsf2+0x6>
    77b8:	81 e0       	ldi	r24, 0x01	; 1
    77ba:	08 95       	ret

000077bc <__divsf3>:
    77bc:	0c d0       	rcall	.+24     	; 0x77d6 <__divsf3x>
    77be:	0f c1       	rjmp	.+542    	; 0x79de <__fp_round>
    77c0:	07 d1       	rcall	.+526    	; 0x79d0 <__fp_pscB>
    77c2:	40 f0       	brcs	.+16     	; 0x77d4 <__divsf3+0x18>
    77c4:	fe d0       	rcall	.+508    	; 0x79c2 <__fp_pscA>
    77c6:	30 f0       	brcs	.+12     	; 0x77d4 <__divsf3+0x18>
    77c8:	21 f4       	brne	.+8      	; 0x77d2 <__divsf3+0x16>
    77ca:	5f 3f       	cpi	r21, 0xFF	; 255
    77cc:	19 f0       	breq	.+6      	; 0x77d4 <__divsf3+0x18>
    77ce:	f0 c0       	rjmp	.+480    	; 0x79b0 <__fp_inf>
    77d0:	51 11       	cpse	r21, r1
    77d2:	39 c1       	rjmp	.+626    	; 0x7a46 <__fp_szero>
    77d4:	f3 c0       	rjmp	.+486    	; 0x79bc <__fp_nan>

000077d6 <__divsf3x>:
    77d6:	14 d1       	rcall	.+552    	; 0x7a00 <__fp_split3>
    77d8:	98 f3       	brcs	.-26     	; 0x77c0 <__divsf3+0x4>

000077da <__divsf3_pse>:
    77da:	99 23       	and	r25, r25
    77dc:	c9 f3       	breq	.-14     	; 0x77d0 <__divsf3+0x14>
    77de:	55 23       	and	r21, r21
    77e0:	b1 f3       	breq	.-20     	; 0x77ce <__divsf3+0x12>
    77e2:	95 1b       	sub	r25, r21
    77e4:	55 0b       	sbc	r21, r21
    77e6:	bb 27       	eor	r27, r27
    77e8:	aa 27       	eor	r26, r26
    77ea:	62 17       	cp	r22, r18
    77ec:	73 07       	cpc	r23, r19
    77ee:	84 07       	cpc	r24, r20
    77f0:	38 f0       	brcs	.+14     	; 0x7800 <__divsf3_pse+0x26>
    77f2:	9f 5f       	subi	r25, 0xFF	; 255
    77f4:	5f 4f       	sbci	r21, 0xFF	; 255
    77f6:	22 0f       	add	r18, r18
    77f8:	33 1f       	adc	r19, r19
    77fa:	44 1f       	adc	r20, r20
    77fc:	aa 1f       	adc	r26, r26
    77fe:	a9 f3       	breq	.-22     	; 0x77ea <__divsf3_pse+0x10>
    7800:	33 d0       	rcall	.+102    	; 0x7868 <__divsf3_pse+0x8e>
    7802:	0e 2e       	mov	r0, r30
    7804:	3a f0       	brmi	.+14     	; 0x7814 <__divsf3_pse+0x3a>
    7806:	e0 e8       	ldi	r30, 0x80	; 128
    7808:	30 d0       	rcall	.+96     	; 0x786a <__divsf3_pse+0x90>
    780a:	91 50       	subi	r25, 0x01	; 1
    780c:	50 40       	sbci	r21, 0x00	; 0
    780e:	e6 95       	lsr	r30
    7810:	00 1c       	adc	r0, r0
    7812:	ca f7       	brpl	.-14     	; 0x7806 <__divsf3_pse+0x2c>
    7814:	29 d0       	rcall	.+82     	; 0x7868 <__divsf3_pse+0x8e>
    7816:	fe 2f       	mov	r31, r30
    7818:	27 d0       	rcall	.+78     	; 0x7868 <__divsf3_pse+0x8e>
    781a:	66 0f       	add	r22, r22
    781c:	77 1f       	adc	r23, r23
    781e:	88 1f       	adc	r24, r24
    7820:	bb 1f       	adc	r27, r27
    7822:	26 17       	cp	r18, r22
    7824:	37 07       	cpc	r19, r23
    7826:	48 07       	cpc	r20, r24
    7828:	ab 07       	cpc	r26, r27
    782a:	b0 e8       	ldi	r27, 0x80	; 128
    782c:	09 f0       	breq	.+2      	; 0x7830 <__divsf3_pse+0x56>
    782e:	bb 0b       	sbc	r27, r27
    7830:	80 2d       	mov	r24, r0
    7832:	bf 01       	movw	r22, r30
    7834:	ff 27       	eor	r31, r31
    7836:	93 58       	subi	r25, 0x83	; 131
    7838:	5f 4f       	sbci	r21, 0xFF	; 255
    783a:	2a f0       	brmi	.+10     	; 0x7846 <__divsf3_pse+0x6c>
    783c:	9e 3f       	cpi	r25, 0xFE	; 254
    783e:	51 05       	cpc	r21, r1
    7840:	68 f0       	brcs	.+26     	; 0x785c <__divsf3_pse+0x82>
    7842:	b6 c0       	rjmp	.+364    	; 0x79b0 <__fp_inf>
    7844:	00 c1       	rjmp	.+512    	; 0x7a46 <__fp_szero>
    7846:	5f 3f       	cpi	r21, 0xFF	; 255
    7848:	ec f3       	brlt	.-6      	; 0x7844 <__divsf3_pse+0x6a>
    784a:	98 3e       	cpi	r25, 0xE8	; 232
    784c:	dc f3       	brlt	.-10     	; 0x7844 <__divsf3_pse+0x6a>
    784e:	86 95       	lsr	r24
    7850:	77 95       	ror	r23
    7852:	67 95       	ror	r22
    7854:	b7 95       	ror	r27
    7856:	f7 95       	ror	r31
    7858:	9f 5f       	subi	r25, 0xFF	; 255
    785a:	c9 f7       	brne	.-14     	; 0x784e <__divsf3_pse+0x74>
    785c:	88 0f       	add	r24, r24
    785e:	91 1d       	adc	r25, r1
    7860:	96 95       	lsr	r25
    7862:	87 95       	ror	r24
    7864:	97 f9       	bld	r25, 7
    7866:	08 95       	ret
    7868:	e1 e0       	ldi	r30, 0x01	; 1
    786a:	66 0f       	add	r22, r22
    786c:	77 1f       	adc	r23, r23
    786e:	88 1f       	adc	r24, r24
    7870:	bb 1f       	adc	r27, r27
    7872:	62 17       	cp	r22, r18
    7874:	73 07       	cpc	r23, r19
    7876:	84 07       	cpc	r24, r20
    7878:	ba 07       	cpc	r27, r26
    787a:	20 f0       	brcs	.+8      	; 0x7884 <__divsf3_pse+0xaa>
    787c:	62 1b       	sub	r22, r18
    787e:	73 0b       	sbc	r23, r19
    7880:	84 0b       	sbc	r24, r20
    7882:	ba 0b       	sbc	r27, r26
    7884:	ee 1f       	adc	r30, r30
    7886:	88 f7       	brcc	.-30     	; 0x786a <__divsf3_pse+0x90>
    7888:	e0 95       	com	r30
    788a:	08 95       	ret

0000788c <__fixsfsi>:
    788c:	04 d0       	rcall	.+8      	; 0x7896 <__fixunssfsi>
    788e:	68 94       	set
    7890:	b1 11       	cpse	r27, r1
    7892:	d9 c0       	rjmp	.+434    	; 0x7a46 <__fp_szero>
    7894:	08 95       	ret

00007896 <__fixunssfsi>:
    7896:	bc d0       	rcall	.+376    	; 0x7a10 <__fp_splitA>
    7898:	88 f0       	brcs	.+34     	; 0x78bc <__fixunssfsi+0x26>
    789a:	9f 57       	subi	r25, 0x7F	; 127
    789c:	90 f0       	brcs	.+36     	; 0x78c2 <__fixunssfsi+0x2c>
    789e:	b9 2f       	mov	r27, r25
    78a0:	99 27       	eor	r25, r25
    78a2:	b7 51       	subi	r27, 0x17	; 23
    78a4:	a0 f0       	brcs	.+40     	; 0x78ce <__fixunssfsi+0x38>
    78a6:	d1 f0       	breq	.+52     	; 0x78dc <__fixunssfsi+0x46>
    78a8:	66 0f       	add	r22, r22
    78aa:	77 1f       	adc	r23, r23
    78ac:	88 1f       	adc	r24, r24
    78ae:	99 1f       	adc	r25, r25
    78b0:	1a f0       	brmi	.+6      	; 0x78b8 <__fixunssfsi+0x22>
    78b2:	ba 95       	dec	r27
    78b4:	c9 f7       	brne	.-14     	; 0x78a8 <__fixunssfsi+0x12>
    78b6:	12 c0       	rjmp	.+36     	; 0x78dc <__fixunssfsi+0x46>
    78b8:	b1 30       	cpi	r27, 0x01	; 1
    78ba:	81 f0       	breq	.+32     	; 0x78dc <__fixunssfsi+0x46>
    78bc:	c3 d0       	rcall	.+390    	; 0x7a44 <__fp_zero>
    78be:	b1 e0       	ldi	r27, 0x01	; 1
    78c0:	08 95       	ret
    78c2:	c0 c0       	rjmp	.+384    	; 0x7a44 <__fp_zero>
    78c4:	67 2f       	mov	r22, r23
    78c6:	78 2f       	mov	r23, r24
    78c8:	88 27       	eor	r24, r24
    78ca:	b8 5f       	subi	r27, 0xF8	; 248
    78cc:	39 f0       	breq	.+14     	; 0x78dc <__fixunssfsi+0x46>
    78ce:	b9 3f       	cpi	r27, 0xF9	; 249
    78d0:	cc f3       	brlt	.-14     	; 0x78c4 <__fixunssfsi+0x2e>
    78d2:	86 95       	lsr	r24
    78d4:	77 95       	ror	r23
    78d6:	67 95       	ror	r22
    78d8:	b3 95       	inc	r27
    78da:	d9 f7       	brne	.-10     	; 0x78d2 <__fixunssfsi+0x3c>
    78dc:	3e f4       	brtc	.+14     	; 0x78ec <__fixunssfsi+0x56>
    78de:	90 95       	com	r25
    78e0:	80 95       	com	r24
    78e2:	70 95       	com	r23
    78e4:	61 95       	neg	r22
    78e6:	7f 4f       	sbci	r23, 0xFF	; 255
    78e8:	8f 4f       	sbci	r24, 0xFF	; 255
    78ea:	9f 4f       	sbci	r25, 0xFF	; 255
    78ec:	08 95       	ret

000078ee <__floatunsisf>:
    78ee:	e8 94       	clt
    78f0:	09 c0       	rjmp	.+18     	; 0x7904 <__floatsisf+0x12>

000078f2 <__floatsisf>:
    78f2:	97 fb       	bst	r25, 7
    78f4:	3e f4       	brtc	.+14     	; 0x7904 <__floatsisf+0x12>
    78f6:	90 95       	com	r25
    78f8:	80 95       	com	r24
    78fa:	70 95       	com	r23
    78fc:	61 95       	neg	r22
    78fe:	7f 4f       	sbci	r23, 0xFF	; 255
    7900:	8f 4f       	sbci	r24, 0xFF	; 255
    7902:	9f 4f       	sbci	r25, 0xFF	; 255
    7904:	99 23       	and	r25, r25
    7906:	a9 f0       	breq	.+42     	; 0x7932 <__floatsisf+0x40>
    7908:	f9 2f       	mov	r31, r25
    790a:	96 e9       	ldi	r25, 0x96	; 150
    790c:	bb 27       	eor	r27, r27
    790e:	93 95       	inc	r25
    7910:	f6 95       	lsr	r31
    7912:	87 95       	ror	r24
    7914:	77 95       	ror	r23
    7916:	67 95       	ror	r22
    7918:	b7 95       	ror	r27
    791a:	f1 11       	cpse	r31, r1
    791c:	f8 cf       	rjmp	.-16     	; 0x790e <__floatsisf+0x1c>
    791e:	fa f4       	brpl	.+62     	; 0x795e <__floatsisf+0x6c>
    7920:	bb 0f       	add	r27, r27
    7922:	11 f4       	brne	.+4      	; 0x7928 <__floatsisf+0x36>
    7924:	60 ff       	sbrs	r22, 0
    7926:	1b c0       	rjmp	.+54     	; 0x795e <__floatsisf+0x6c>
    7928:	6f 5f       	subi	r22, 0xFF	; 255
    792a:	7f 4f       	sbci	r23, 0xFF	; 255
    792c:	8f 4f       	sbci	r24, 0xFF	; 255
    792e:	9f 4f       	sbci	r25, 0xFF	; 255
    7930:	16 c0       	rjmp	.+44     	; 0x795e <__floatsisf+0x6c>
    7932:	88 23       	and	r24, r24
    7934:	11 f0       	breq	.+4      	; 0x793a <__floatsisf+0x48>
    7936:	96 e9       	ldi	r25, 0x96	; 150
    7938:	11 c0       	rjmp	.+34     	; 0x795c <__floatsisf+0x6a>
    793a:	77 23       	and	r23, r23
    793c:	21 f0       	breq	.+8      	; 0x7946 <__floatsisf+0x54>
    793e:	9e e8       	ldi	r25, 0x8E	; 142
    7940:	87 2f       	mov	r24, r23
    7942:	76 2f       	mov	r23, r22
    7944:	05 c0       	rjmp	.+10     	; 0x7950 <__floatsisf+0x5e>
    7946:	66 23       	and	r22, r22
    7948:	71 f0       	breq	.+28     	; 0x7966 <__floatsisf+0x74>
    794a:	96 e8       	ldi	r25, 0x86	; 134
    794c:	86 2f       	mov	r24, r22
    794e:	70 e0       	ldi	r23, 0x00	; 0
    7950:	60 e0       	ldi	r22, 0x00	; 0
    7952:	2a f0       	brmi	.+10     	; 0x795e <__floatsisf+0x6c>
    7954:	9a 95       	dec	r25
    7956:	66 0f       	add	r22, r22
    7958:	77 1f       	adc	r23, r23
    795a:	88 1f       	adc	r24, r24
    795c:	da f7       	brpl	.-10     	; 0x7954 <__floatsisf+0x62>
    795e:	88 0f       	add	r24, r24
    7960:	96 95       	lsr	r25
    7962:	87 95       	ror	r24
    7964:	97 f9       	bld	r25, 7
    7966:	08 95       	ret

00007968 <__fp_cmp>:
    7968:	99 0f       	add	r25, r25
    796a:	00 08       	sbc	r0, r0
    796c:	55 0f       	add	r21, r21
    796e:	aa 0b       	sbc	r26, r26
    7970:	e0 e8       	ldi	r30, 0x80	; 128
    7972:	fe ef       	ldi	r31, 0xFE	; 254
    7974:	16 16       	cp	r1, r22
    7976:	17 06       	cpc	r1, r23
    7978:	e8 07       	cpc	r30, r24
    797a:	f9 07       	cpc	r31, r25
    797c:	c0 f0       	brcs	.+48     	; 0x79ae <__fp_cmp+0x46>
    797e:	12 16       	cp	r1, r18
    7980:	13 06       	cpc	r1, r19
    7982:	e4 07       	cpc	r30, r20
    7984:	f5 07       	cpc	r31, r21
    7986:	98 f0       	brcs	.+38     	; 0x79ae <__fp_cmp+0x46>
    7988:	62 1b       	sub	r22, r18
    798a:	73 0b       	sbc	r23, r19
    798c:	84 0b       	sbc	r24, r20
    798e:	95 0b       	sbc	r25, r21
    7990:	39 f4       	brne	.+14     	; 0x79a0 <__fp_cmp+0x38>
    7992:	0a 26       	eor	r0, r26
    7994:	61 f0       	breq	.+24     	; 0x79ae <__fp_cmp+0x46>
    7996:	23 2b       	or	r18, r19
    7998:	24 2b       	or	r18, r20
    799a:	25 2b       	or	r18, r21
    799c:	21 f4       	brne	.+8      	; 0x79a6 <__fp_cmp+0x3e>
    799e:	08 95       	ret
    79a0:	0a 26       	eor	r0, r26
    79a2:	09 f4       	brne	.+2      	; 0x79a6 <__fp_cmp+0x3e>
    79a4:	a1 40       	sbci	r26, 0x01	; 1
    79a6:	a6 95       	lsr	r26
    79a8:	8f ef       	ldi	r24, 0xFF	; 255
    79aa:	81 1d       	adc	r24, r1
    79ac:	81 1d       	adc	r24, r1
    79ae:	08 95       	ret

000079b0 <__fp_inf>:
    79b0:	97 f9       	bld	r25, 7
    79b2:	9f 67       	ori	r25, 0x7F	; 127
    79b4:	80 e8       	ldi	r24, 0x80	; 128
    79b6:	70 e0       	ldi	r23, 0x00	; 0
    79b8:	60 e0       	ldi	r22, 0x00	; 0
    79ba:	08 95       	ret

000079bc <__fp_nan>:
    79bc:	9f ef       	ldi	r25, 0xFF	; 255
    79be:	80 ec       	ldi	r24, 0xC0	; 192
    79c0:	08 95       	ret

000079c2 <__fp_pscA>:
    79c2:	00 24       	eor	r0, r0
    79c4:	0a 94       	dec	r0
    79c6:	16 16       	cp	r1, r22
    79c8:	17 06       	cpc	r1, r23
    79ca:	18 06       	cpc	r1, r24
    79cc:	09 06       	cpc	r0, r25
    79ce:	08 95       	ret

000079d0 <__fp_pscB>:
    79d0:	00 24       	eor	r0, r0
    79d2:	0a 94       	dec	r0
    79d4:	12 16       	cp	r1, r18
    79d6:	13 06       	cpc	r1, r19
    79d8:	14 06       	cpc	r1, r20
    79da:	05 06       	cpc	r0, r21
    79dc:	08 95       	ret

000079de <__fp_round>:
    79de:	09 2e       	mov	r0, r25
    79e0:	03 94       	inc	r0
    79e2:	00 0c       	add	r0, r0
    79e4:	11 f4       	brne	.+4      	; 0x79ea <__fp_round+0xc>
    79e6:	88 23       	and	r24, r24
    79e8:	52 f0       	brmi	.+20     	; 0x79fe <__fp_round+0x20>
    79ea:	bb 0f       	add	r27, r27
    79ec:	40 f4       	brcc	.+16     	; 0x79fe <__fp_round+0x20>
    79ee:	bf 2b       	or	r27, r31
    79f0:	11 f4       	brne	.+4      	; 0x79f6 <__fp_round+0x18>
    79f2:	60 ff       	sbrs	r22, 0
    79f4:	04 c0       	rjmp	.+8      	; 0x79fe <__fp_round+0x20>
    79f6:	6f 5f       	subi	r22, 0xFF	; 255
    79f8:	7f 4f       	sbci	r23, 0xFF	; 255
    79fa:	8f 4f       	sbci	r24, 0xFF	; 255
    79fc:	9f 4f       	sbci	r25, 0xFF	; 255
    79fe:	08 95       	ret

00007a00 <__fp_split3>:
    7a00:	57 fd       	sbrc	r21, 7
    7a02:	90 58       	subi	r25, 0x80	; 128
    7a04:	44 0f       	add	r20, r20
    7a06:	55 1f       	adc	r21, r21
    7a08:	59 f0       	breq	.+22     	; 0x7a20 <__fp_splitA+0x10>
    7a0a:	5f 3f       	cpi	r21, 0xFF	; 255
    7a0c:	71 f0       	breq	.+28     	; 0x7a2a <__fp_splitA+0x1a>
    7a0e:	47 95       	ror	r20

00007a10 <__fp_splitA>:
    7a10:	88 0f       	add	r24, r24
    7a12:	97 fb       	bst	r25, 7
    7a14:	99 1f       	adc	r25, r25
    7a16:	61 f0       	breq	.+24     	; 0x7a30 <__fp_splitA+0x20>
    7a18:	9f 3f       	cpi	r25, 0xFF	; 255
    7a1a:	79 f0       	breq	.+30     	; 0x7a3a <__fp_splitA+0x2a>
    7a1c:	87 95       	ror	r24
    7a1e:	08 95       	ret
    7a20:	12 16       	cp	r1, r18
    7a22:	13 06       	cpc	r1, r19
    7a24:	14 06       	cpc	r1, r20
    7a26:	55 1f       	adc	r21, r21
    7a28:	f2 cf       	rjmp	.-28     	; 0x7a0e <__fp_split3+0xe>
    7a2a:	46 95       	lsr	r20
    7a2c:	f1 df       	rcall	.-30     	; 0x7a10 <__fp_splitA>
    7a2e:	08 c0       	rjmp	.+16     	; 0x7a40 <__fp_splitA+0x30>
    7a30:	16 16       	cp	r1, r22
    7a32:	17 06       	cpc	r1, r23
    7a34:	18 06       	cpc	r1, r24
    7a36:	99 1f       	adc	r25, r25
    7a38:	f1 cf       	rjmp	.-30     	; 0x7a1c <__fp_splitA+0xc>
    7a3a:	86 95       	lsr	r24
    7a3c:	71 05       	cpc	r23, r1
    7a3e:	61 05       	cpc	r22, r1
    7a40:	08 94       	sec
    7a42:	08 95       	ret

00007a44 <__fp_zero>:
    7a44:	e8 94       	clt

00007a46 <__fp_szero>:
    7a46:	bb 27       	eor	r27, r27
    7a48:	66 27       	eor	r22, r22
    7a4a:	77 27       	eor	r23, r23
    7a4c:	cb 01       	movw	r24, r22
    7a4e:	97 f9       	bld	r25, 7
    7a50:	08 95       	ret

00007a52 <__gesf2>:
    7a52:	8a df       	rcall	.-236    	; 0x7968 <__fp_cmp>
    7a54:	08 f4       	brcc	.+2      	; 0x7a58 <__gesf2+0x6>
    7a56:	8f ef       	ldi	r24, 0xFF	; 255
    7a58:	08 95       	ret

00007a5a <__mulsf3>:
    7a5a:	0b d0       	rcall	.+22     	; 0x7a72 <__mulsf3x>
    7a5c:	c0 cf       	rjmp	.-128    	; 0x79de <__fp_round>
    7a5e:	b1 df       	rcall	.-158    	; 0x79c2 <__fp_pscA>
    7a60:	28 f0       	brcs	.+10     	; 0x7a6c <__mulsf3+0x12>
    7a62:	b6 df       	rcall	.-148    	; 0x79d0 <__fp_pscB>
    7a64:	18 f0       	brcs	.+6      	; 0x7a6c <__mulsf3+0x12>
    7a66:	95 23       	and	r25, r21
    7a68:	09 f0       	breq	.+2      	; 0x7a6c <__mulsf3+0x12>
    7a6a:	a2 cf       	rjmp	.-188    	; 0x79b0 <__fp_inf>
    7a6c:	a7 cf       	rjmp	.-178    	; 0x79bc <__fp_nan>
    7a6e:	11 24       	eor	r1, r1
    7a70:	ea cf       	rjmp	.-44     	; 0x7a46 <__fp_szero>

00007a72 <__mulsf3x>:
    7a72:	c6 df       	rcall	.-116    	; 0x7a00 <__fp_split3>
    7a74:	a0 f3       	brcs	.-24     	; 0x7a5e <__mulsf3+0x4>

00007a76 <__mulsf3_pse>:
    7a76:	95 9f       	mul	r25, r21
    7a78:	d1 f3       	breq	.-12     	; 0x7a6e <__mulsf3+0x14>
    7a7a:	95 0f       	add	r25, r21
    7a7c:	50 e0       	ldi	r21, 0x00	; 0
    7a7e:	55 1f       	adc	r21, r21
    7a80:	62 9f       	mul	r22, r18
    7a82:	f0 01       	movw	r30, r0
    7a84:	72 9f       	mul	r23, r18
    7a86:	bb 27       	eor	r27, r27
    7a88:	f0 0d       	add	r31, r0
    7a8a:	b1 1d       	adc	r27, r1
    7a8c:	63 9f       	mul	r22, r19
    7a8e:	aa 27       	eor	r26, r26
    7a90:	f0 0d       	add	r31, r0
    7a92:	b1 1d       	adc	r27, r1
    7a94:	aa 1f       	adc	r26, r26
    7a96:	64 9f       	mul	r22, r20
    7a98:	66 27       	eor	r22, r22
    7a9a:	b0 0d       	add	r27, r0
    7a9c:	a1 1d       	adc	r26, r1
    7a9e:	66 1f       	adc	r22, r22
    7aa0:	82 9f       	mul	r24, r18
    7aa2:	22 27       	eor	r18, r18
    7aa4:	b0 0d       	add	r27, r0
    7aa6:	a1 1d       	adc	r26, r1
    7aa8:	62 1f       	adc	r22, r18
    7aaa:	73 9f       	mul	r23, r19
    7aac:	b0 0d       	add	r27, r0
    7aae:	a1 1d       	adc	r26, r1
    7ab0:	62 1f       	adc	r22, r18
    7ab2:	83 9f       	mul	r24, r19
    7ab4:	a0 0d       	add	r26, r0
    7ab6:	61 1d       	adc	r22, r1
    7ab8:	22 1f       	adc	r18, r18
    7aba:	74 9f       	mul	r23, r20
    7abc:	33 27       	eor	r19, r19
    7abe:	a0 0d       	add	r26, r0
    7ac0:	61 1d       	adc	r22, r1
    7ac2:	23 1f       	adc	r18, r19
    7ac4:	84 9f       	mul	r24, r20
    7ac6:	60 0d       	add	r22, r0
    7ac8:	21 1d       	adc	r18, r1
    7aca:	82 2f       	mov	r24, r18
    7acc:	76 2f       	mov	r23, r22
    7ace:	6a 2f       	mov	r22, r26
    7ad0:	11 24       	eor	r1, r1
    7ad2:	9f 57       	subi	r25, 0x7F	; 127
    7ad4:	50 40       	sbci	r21, 0x00	; 0
    7ad6:	8a f0       	brmi	.+34     	; 0x7afa <__mulsf3_pse+0x84>
    7ad8:	e1 f0       	breq	.+56     	; 0x7b12 <__mulsf3_pse+0x9c>
    7ada:	88 23       	and	r24, r24
    7adc:	4a f0       	brmi	.+18     	; 0x7af0 <__mulsf3_pse+0x7a>
    7ade:	ee 0f       	add	r30, r30
    7ae0:	ff 1f       	adc	r31, r31
    7ae2:	bb 1f       	adc	r27, r27
    7ae4:	66 1f       	adc	r22, r22
    7ae6:	77 1f       	adc	r23, r23
    7ae8:	88 1f       	adc	r24, r24
    7aea:	91 50       	subi	r25, 0x01	; 1
    7aec:	50 40       	sbci	r21, 0x00	; 0
    7aee:	a9 f7       	brne	.-22     	; 0x7ada <__mulsf3_pse+0x64>
    7af0:	9e 3f       	cpi	r25, 0xFE	; 254
    7af2:	51 05       	cpc	r21, r1
    7af4:	70 f0       	brcs	.+28     	; 0x7b12 <__mulsf3_pse+0x9c>
    7af6:	5c cf       	rjmp	.-328    	; 0x79b0 <__fp_inf>
    7af8:	a6 cf       	rjmp	.-180    	; 0x7a46 <__fp_szero>
    7afa:	5f 3f       	cpi	r21, 0xFF	; 255
    7afc:	ec f3       	brlt	.-6      	; 0x7af8 <__mulsf3_pse+0x82>
    7afe:	98 3e       	cpi	r25, 0xE8	; 232
    7b00:	dc f3       	brlt	.-10     	; 0x7af8 <__mulsf3_pse+0x82>
    7b02:	86 95       	lsr	r24
    7b04:	77 95       	ror	r23
    7b06:	67 95       	ror	r22
    7b08:	b7 95       	ror	r27
    7b0a:	f7 95       	ror	r31
    7b0c:	e7 95       	ror	r30
    7b0e:	9f 5f       	subi	r25, 0xFF	; 255
    7b10:	c1 f7       	brne	.-16     	; 0x7b02 <__mulsf3_pse+0x8c>
    7b12:	fe 2b       	or	r31, r30
    7b14:	88 0f       	add	r24, r24
    7b16:	91 1d       	adc	r25, r1
    7b18:	96 95       	lsr	r25
    7b1a:	87 95       	ror	r24
    7b1c:	97 f9       	bld	r25, 7
    7b1e:	08 95       	ret

00007b20 <__mulsi3>:
    7b20:	62 9f       	mul	r22, r18
    7b22:	d0 01       	movw	r26, r0
    7b24:	73 9f       	mul	r23, r19
    7b26:	f0 01       	movw	r30, r0
    7b28:	82 9f       	mul	r24, r18
    7b2a:	e0 0d       	add	r30, r0
    7b2c:	f1 1d       	adc	r31, r1
    7b2e:	64 9f       	mul	r22, r20
    7b30:	e0 0d       	add	r30, r0
    7b32:	f1 1d       	adc	r31, r1
    7b34:	92 9f       	mul	r25, r18
    7b36:	f0 0d       	add	r31, r0
    7b38:	83 9f       	mul	r24, r19
    7b3a:	f0 0d       	add	r31, r0
    7b3c:	74 9f       	mul	r23, r20
    7b3e:	f0 0d       	add	r31, r0
    7b40:	65 9f       	mul	r22, r21
    7b42:	f0 0d       	add	r31, r0
    7b44:	99 27       	eor	r25, r25
    7b46:	72 9f       	mul	r23, r18
    7b48:	b0 0d       	add	r27, r0
    7b4a:	e1 1d       	adc	r30, r1
    7b4c:	f9 1f       	adc	r31, r25
    7b4e:	63 9f       	mul	r22, r19
    7b50:	b0 0d       	add	r27, r0
    7b52:	e1 1d       	adc	r30, r1
    7b54:	f9 1f       	adc	r31, r25
    7b56:	bd 01       	movw	r22, r26
    7b58:	cf 01       	movw	r24, r30
    7b5a:	11 24       	eor	r1, r1
    7b5c:	08 95       	ret

00007b5e <__udivmodhi4>:
    7b5e:	aa 1b       	sub	r26, r26
    7b60:	bb 1b       	sub	r27, r27
    7b62:	51 e1       	ldi	r21, 0x11	; 17
    7b64:	07 c0       	rjmp	.+14     	; 0x7b74 <__udivmodhi4_ep>

00007b66 <__udivmodhi4_loop>:
    7b66:	aa 1f       	adc	r26, r26
    7b68:	bb 1f       	adc	r27, r27
    7b6a:	a6 17       	cp	r26, r22
    7b6c:	b7 07       	cpc	r27, r23
    7b6e:	10 f0       	brcs	.+4      	; 0x7b74 <__udivmodhi4_ep>
    7b70:	a6 1b       	sub	r26, r22
    7b72:	b7 0b       	sbc	r27, r23

00007b74 <__udivmodhi4_ep>:
    7b74:	88 1f       	adc	r24, r24
    7b76:	99 1f       	adc	r25, r25
    7b78:	5a 95       	dec	r21
    7b7a:	a9 f7       	brne	.-22     	; 0x7b66 <__udivmodhi4_loop>
    7b7c:	80 95       	com	r24
    7b7e:	90 95       	com	r25
    7b80:	bc 01       	movw	r22, r24
    7b82:	cd 01       	movw	r24, r26
    7b84:	08 95       	ret

00007b86 <__divmodhi4>:
    7b86:	97 fb       	bst	r25, 7
    7b88:	09 2e       	mov	r0, r25
    7b8a:	07 26       	eor	r0, r23
    7b8c:	0a d0       	rcall	.+20     	; 0x7ba2 <__divmodhi4_neg1>
    7b8e:	77 fd       	sbrc	r23, 7
    7b90:	04 d0       	rcall	.+8      	; 0x7b9a <__divmodhi4_neg2>
    7b92:	e5 df       	rcall	.-54     	; 0x7b5e <__udivmodhi4>
    7b94:	06 d0       	rcall	.+12     	; 0x7ba2 <__divmodhi4_neg1>
    7b96:	00 20       	and	r0, r0
    7b98:	1a f4       	brpl	.+6      	; 0x7ba0 <__divmodhi4_exit>

00007b9a <__divmodhi4_neg2>:
    7b9a:	70 95       	com	r23
    7b9c:	61 95       	neg	r22
    7b9e:	7f 4f       	sbci	r23, 0xFF	; 255

00007ba0 <__divmodhi4_exit>:
    7ba0:	08 95       	ret

00007ba2 <__divmodhi4_neg1>:
    7ba2:	f6 f7       	brtc	.-4      	; 0x7ba0 <__divmodhi4_exit>
    7ba4:	90 95       	com	r25
    7ba6:	81 95       	neg	r24
    7ba8:	9f 4f       	sbci	r25, 0xFF	; 255
    7baa:	08 95       	ret

00007bac <__udivmodsi4>:
    7bac:	a1 e2       	ldi	r26, 0x21	; 33
    7bae:	1a 2e       	mov	r1, r26
    7bb0:	aa 1b       	sub	r26, r26
    7bb2:	bb 1b       	sub	r27, r27
    7bb4:	fd 01       	movw	r30, r26
    7bb6:	0d c0       	rjmp	.+26     	; 0x7bd2 <__udivmodsi4_ep>

00007bb8 <__udivmodsi4_loop>:
    7bb8:	aa 1f       	adc	r26, r26
    7bba:	bb 1f       	adc	r27, r27
    7bbc:	ee 1f       	adc	r30, r30
    7bbe:	ff 1f       	adc	r31, r31
    7bc0:	a2 17       	cp	r26, r18
    7bc2:	b3 07       	cpc	r27, r19
    7bc4:	e4 07       	cpc	r30, r20
    7bc6:	f5 07       	cpc	r31, r21
    7bc8:	20 f0       	brcs	.+8      	; 0x7bd2 <__udivmodsi4_ep>
    7bca:	a2 1b       	sub	r26, r18
    7bcc:	b3 0b       	sbc	r27, r19
    7bce:	e4 0b       	sbc	r30, r20
    7bd0:	f5 0b       	sbc	r31, r21

00007bd2 <__udivmodsi4_ep>:
    7bd2:	66 1f       	adc	r22, r22
    7bd4:	77 1f       	adc	r23, r23
    7bd6:	88 1f       	adc	r24, r24
    7bd8:	99 1f       	adc	r25, r25
    7bda:	1a 94       	dec	r1
    7bdc:	69 f7       	brne	.-38     	; 0x7bb8 <__udivmodsi4_loop>
    7bde:	60 95       	com	r22
    7be0:	70 95       	com	r23
    7be2:	80 95       	com	r24
    7be4:	90 95       	com	r25
    7be6:	9b 01       	movw	r18, r22
    7be8:	ac 01       	movw	r20, r24
    7bea:	bd 01       	movw	r22, r26
    7bec:	cf 01       	movw	r24, r30
    7bee:	08 95       	ret

00007bf0 <__tablejump2__>:
    7bf0:	ee 0f       	add	r30, r30
    7bf2:	ff 1f       	adc	r31, r31

00007bf4 <__tablejump__>:
    7bf4:	05 90       	lpm	r0, Z+
    7bf6:	f4 91       	lpm	r31, Z+
    7bf8:	e0 2d       	mov	r30, r0
    7bfa:	09 94       	ijmp

00007bfc <toupper>:
    7bfc:	91 11       	cpse	r25, r1
    7bfe:	08 95       	ret
    7c00:	81 56       	subi	r24, 0x61	; 97
    7c02:	8a 51       	subi	r24, 0x1A	; 26
    7c04:	08 f4       	brcc	.+2      	; 0x7c08 <toupper+0xc>
    7c06:	80 52       	subi	r24, 0x20	; 32
    7c08:	85 58       	subi	r24, 0x85	; 133
    7c0a:	08 95       	ret

00007c0c <__do_global_dtors>:
    7c0c:	18 e0       	ldi	r17, 0x08	; 8
    7c0e:	c8 eb       	ldi	r28, 0xB8	; 184
    7c10:	d8 e0       	ldi	r29, 0x08	; 8
    7c12:	04 c0       	rjmp	.+8      	; 0x7c1c <.do_global_dtors_start>

00007c14 <.do_global_dtors_loop>:
    7c14:	fe 01       	movw	r30, r28
    7c16:	0e 94 fa 3d 	call	0x7bf4	; 0x7bf4 <__tablejump__>
    7c1a:	22 96       	adiw	r28, 0x02	; 2

00007c1c <.do_global_dtors_start>:
    7c1c:	ca 3b       	cpi	r28, 0xBA	; 186
    7c1e:	d1 07       	cpc	r29, r17
    7c20:	c9 f7       	brne	.-14     	; 0x7c14 <.do_global_dtors_loop>
    7c22:	f8 94       	cli

00007c24 <__stop_program>:
    7c24:	ff cf       	rjmp	.-2      	; 0x7c24 <__stop_program>

GrowboxStringsLoader.cpp.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
 ******************************************************************************/

uint8_t EEPROMClass::read(int address)
{
	return eeprom_read_byte((unsigned char *) address);
}
       0:	0c 94 ac 00 	jmp	0x158	; 0x158 <__ctors_end>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <__vector_16>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__vector_18>
      4c:	0c 94 c9 02 	jmp	0x592	; 0x592 <__vector_19>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>

00000068 <_ZZ11writeStringPcS_E3__c_1>:
      68:	3b 20 2f 2f 20 00                                   ; // .

0000006e <_ZZ11writeStringPcS_E3__c_0>:
      6e:	20 3d 20 30 78 00                                    = 0x.

00000074 <_ZZ11writeStringPcS_E3__c>:
      74:	63 6f 6e 73 74 20 77 6f 72 64 20 00                 const word .

00000080 <_ZZ5setupE3__c_4>:
      80:	23 65 6e 64 69 66 00                                #endif.

00000087 <_ZZ5setupE3__c_3>:
      87:	23 69 6e 63 6c 75 64 65 20 3c 45 45 50 52 4f 4d     #include <EEPROM
      97:	2e 68 3e 00                                         .h>.

0000009b <_ZZ5setupE3__c_2>:
      9b:	2f 2f 20 41 75 74 6f 20 67 65 6e 65 72 61 74 65     // Auto generate
      ab:	64 20 62 79 20 2e 2e 2f 47 72 6f 77 62 6f 78 53     d by ../GrowboxS
      bb:	74 72 69 6e 67 73 4c 6f 61 64 65 72 2f 47 72 6f     tringsLoader/Gro
      cb:	77 62 6f 78 53 74 72 69 6e 67 73 4c 6f 61 64 65     wboxStringsLoade
      db:	72 2e 69 6e 6f 20 64 6f 20 6e 6f 74 20 65 64 69     r.ino do not edi
      eb:	74 20 64 69 72 65 63 74 6c 79 00                    t directly.

000000f6 <_ZZ5setupE3__c_1>:
      f6:	23 64 65 66 69 6e 65 20 47 42 5f 45 45 50 52 4f     #define GB_EEPRO
     106:	4d 53 74 72 69 6e 67 73 5f 68 00                    MStrings_h.

00000111 <_ZZ5setupE3__c_0>:
     111:	23 69 66 6e 64 65 66 20 47 42 5f 45 45 50 52 4f     #ifndef GB_EEPRO
     121:	4d 53 74 72 69 6e 67 73 5f 68 00                    MStrings_h.

0000012c <_ZZ5setupE3__c>:
     12c:	53 61 76 65 20 6f 75 74 70 75 74 20 61 73 20 2e     Save output as .
     13c:	2e 2f 47 72 6f 77 62 6f 78 2f 45 45 50 52 4f 4d     ./Growbox/EEPROM
     14c:	53 74 72 69 6e 67 73 2e 68 00                       Strings.h.

00000156 <__ctors_start>:
     156:	37 04       	cpc	r3, r7

00000158 <__ctors_end>:
     158:	11 24       	eor	r1, r1
     15a:	1f be       	out	0x3f, r1	; 63
     15c:	cf ef       	ldi	r28, 0xFF	; 255
     15e:	d8 e0       	ldi	r29, 0x08	; 8
     160:	de bf       	out	0x3e, r29	; 62
     162:	cd bf       	out	0x3d, r28	; 61

00000164 <__do_copy_data>:
     164:	14 e0       	ldi	r17, 0x04	; 4
     166:	a0 e0       	ldi	r26, 0x00	; 0
     168:	b1 e0       	ldi	r27, 0x01	; 1
     16a:	e4 e1       	ldi	r30, 0x14	; 20
     16c:	f3 e1       	ldi	r31, 0x13	; 19
     16e:	02 c0       	rjmp	.+4      	; 0x174 <.do_copy_data_start>

00000170 <.do_copy_data_loop>:
     170:	05 90       	lpm	r0, Z+
     172:	0d 92       	st	X+, r0

00000174 <.do_copy_data_start>:
     174:	a4 3f       	cpi	r26, 0xF4	; 244
     176:	b1 07       	cpc	r27, r17
     178:	d9 f7       	brne	.-10     	; 0x170 <.do_copy_data_loop>

0000017a <__do_clear_bss>:
     17a:	15 e0       	ldi	r17, 0x05	; 5
     17c:	a4 ef       	ldi	r26, 0xF4	; 244
     17e:	b4 e0       	ldi	r27, 0x04	; 4
     180:	01 c0       	rjmp	.+2      	; 0x184 <.do_clear_bss_start>

00000182 <.do_clear_bss_loop>:
     182:	1d 92       	st	X+, r1

00000184 <.do_clear_bss_start>:
     184:	ae 3a       	cpi	r26, 0xAE	; 174
     186:	b1 07       	cpc	r27, r17
     188:	e1 f7       	brne	.-8      	; 0x182 <.do_clear_bss_loop>

0000018a <__do_global_ctors>:
     18a:	11 e0       	ldi	r17, 0x01	; 1
     18c:	c8 e5       	ldi	r28, 0x58	; 88
     18e:	d1 e0       	ldi	r29, 0x01	; 1
     190:	04 c0       	rjmp	.+8      	; 0x19a <.do_global_ctors_start>

00000192 <.do_global_ctors_loop>:
     192:	22 97       	sbiw	r28, 0x02	; 2
     194:	fe 01       	movw	r30, r28
     196:	0e 94 70 09 	call	0x12e0	; 0x12e0 <__tablejump__>

0000019a <.do_global_ctors_start>:
     19a:	c6 35       	cpi	r28, 0x56	; 86
     19c:	d1 07       	cpc	r29, r17
     19e:	c9 f7       	brne	.-14     	; 0x192 <.do_global_ctors_loop>
     1a0:	0e 94 8d 04 	call	0x91a	; 0x91a <main>
     1a4:	0c 94 88 09 	jmp	0x1310	; 0x1310 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <memcpy>:
     1ac:	fb 01       	movw	r30, r22
     1ae:	dc 01       	movw	r26, r24
     1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <memcpy+0xa>
     1b2:	01 90       	ld	r0, Z+
     1b4:	0d 92       	st	X+, r0
     1b6:	41 50       	subi	r20, 0x01	; 1
     1b8:	50 40       	sbci	r21, 0x00	; 0
     1ba:	d8 f7       	brcc	.-10     	; 0x1b2 <memcpy+0x6>
     1bc:	08 95       	ret

000001be <strcpy>:
     1be:	fb 01       	movw	r30, r22
     1c0:	dc 01       	movw	r26, r24
     1c2:	01 90       	ld	r0, Z+
     1c4:	0d 92       	st	X+, r0
     1c6:	00 20       	and	r0, r0
     1c8:	e1 f7       	brne	.-8      	; 0x1c2 <strcpy+0x4>
     1ca:	08 95       	ret

000001cc <utoa>:
     1cc:	fb 01       	movw	r30, r22
     1ce:	9f 01       	movw	r18, r30
     1d0:	42 30       	cpi	r20, 0x02	; 2
     1d2:	74 f0       	brlt	.+28     	; 0x1f0 <utoa+0x24>
     1d4:	45 32       	cpi	r20, 0x25	; 37
     1d6:	64 f4       	brge	.+24     	; 0x1f0 <utoa+0x24>
     1d8:	64 2f       	mov	r22, r20
     1da:	77 27       	eor	r23, r23
     1dc:	0e 94 74 09 	call	0x12e8	; 0x12e8 <__udivmodhi4>
     1e0:	80 5d       	subi	r24, 0xD0	; 208
     1e2:	8a 33       	cpi	r24, 0x3A	; 58
     1e4:	0c f0       	brlt	.+2      	; 0x1e8 <utoa+0x1c>
     1e6:	89 5d       	subi	r24, 0xD9	; 217
     1e8:	81 93       	st	Z+, r24
     1ea:	cb 01       	movw	r24, r22
     1ec:	00 97       	sbiw	r24, 0x00	; 0
     1ee:	a1 f7       	brne	.-24     	; 0x1d8 <utoa+0xc>
     1f0:	10 82       	st	Z, r1
     1f2:	c9 01       	movw	r24, r18
     1f4:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <strrev>

000001f8 <strrev>:
     1f8:	dc 01       	movw	r26, r24
     1fa:	fc 01       	movw	r30, r24
     1fc:	67 2f       	mov	r22, r23
     1fe:	71 91       	ld	r23, Z+
     200:	77 23       	and	r23, r23
     202:	e1 f7       	brne	.-8      	; 0x1fc <strrev+0x4>
     204:	32 97       	sbiw	r30, 0x02	; 2
     206:	04 c0       	rjmp	.+8      	; 0x210 <strrev+0x18>
     208:	7c 91       	ld	r23, X
     20a:	6d 93       	st	X+, r22
     20c:	70 83       	st	Z, r23
     20e:	62 91       	ld	r22, -Z
     210:	ae 17       	cp	r26, r30
     212:	bf 07       	cpc	r27, r31
     214:	c8 f3       	brcs	.-14     	; 0x208 <strrev+0x10>
     216:	08 95       	ret

00000218 <loop>:
     218:	08 95       	ret

0000021a <_Z11writeStringPcS_>:
     21a:	af 92       	push	r10
     21c:	bf 92       	push	r11
     21e:	cf 92       	push	r12
     220:	df 92       	push	r13
     222:	ef 92       	push	r14
     224:	ff 92       	push	r15
     226:	0f 93       	push	r16
     228:	1f 93       	push	r17
     22a:	df 93       	push	r29
     22c:	cf 93       	push	r28
     22e:	cd b7       	in	r28, 0x3d	; 61
     230:	de b7       	in	r29, 0x3e	; 62
     232:	27 97       	sbiw	r28, 0x07	; 7
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	f8 94       	cli
     238:	de bf       	out	0x3e, r29	; 62
     23a:	0f be       	out	0x3f, r0	; 63
     23c:	cd bf       	out	0x3d, r28	; 61
     23e:	7c 01       	movw	r14, r24
     240:	5b 01       	movw	r10, r22
     242:	8f e7       	ldi	r24, 0x7F	; 127
     244:	95 e0       	ldi	r25, 0x05	; 5
     246:	64 e7       	ldi	r22, 0x74	; 116
     248:	70 e0       	ldi	r23, 0x00	; 0
     24a:	0e 94 c6 04 	call	0x98c	; 0x98c <_ZN5Print5printEPK19__FlashStringHelper>
     24e:	8c 01       	movw	r16, r24
     250:	8f e7       	ldi	r24, 0x7F	; 127
     252:	95 e0       	ldi	r25, 0x05	; 5
     254:	b7 01       	movw	r22, r14
     256:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN5Print5printEPKc>
     25a:	6c 01       	movw	r12, r24
     25c:	60 91 f4 04 	lds	r22, 0x04F4
     260:	70 91 f5 04 	lds	r23, 0x04F5
     264:	7e 01       	movw	r14, r28
     266:	08 94       	sec
     268:	e1 1c       	adc	r14, r1
     26a:	f1 1c       	adc	r15, r1
     26c:	c7 01       	movw	r24, r14
     26e:	40 e1       	ldi	r20, 0x10	; 16
     270:	0e 94 5d 06 	call	0xcba	; 0xcba <_ZN6StringC1Ejh>
     274:	0c 0d       	add	r16, r12
     276:	1d 1d       	adc	r17, r13
     278:	8d 81       	ldd	r24, Y+5	; 0x05
     27a:	9e 81       	ldd	r25, Y+6	; 0x06
     27c:	08 0f       	add	r16, r24
     27e:	19 1f       	adc	r17, r25
     280:	c7 01       	movw	r24, r14
     282:	0e 94 8e 06 	call	0xd1c	; 0xd1c <_ZN6StringD1Ev>
     286:	07 c0       	rjmp	.+14     	; 0x296 <_Z11writeStringPcS_+0x7c>
     288:	8f e7       	ldi	r24, 0x7F	; 127
     28a:	95 e0       	ldi	r25, 0x05	; 5
     28c:	60 e2       	ldi	r22, 0x20	; 32
     28e:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <_ZN5Print5printEc>
     292:	0f 5f       	subi	r16, 0xFF	; 255
     294:	1f 4f       	sbci	r17, 0xFF	; 255
     296:	0c 33       	cpi	r16, 0x3C	; 60
     298:	11 05       	cpc	r17, r1
     29a:	b0 f3       	brcs	.-20     	; 0x288 <_Z11writeStringPcS_+0x6e>
     29c:	8f e7       	ldi	r24, 0x7F	; 127
     29e:	95 e0       	ldi	r25, 0x05	; 5
     2a0:	6e e6       	ldi	r22, 0x6E	; 110
     2a2:	70 e0       	ldi	r23, 0x00	; 0
     2a4:	0e 94 c6 04 	call	0x98c	; 0x98c <_ZN5Print5printEPK19__FlashStringHelper>
     2a8:	60 91 f4 04 	lds	r22, 0x04F4
     2ac:	70 91 f5 04 	lds	r23, 0x04F5
     2b0:	8f e7       	ldi	r24, 0x7F	; 127
     2b2:	95 e0       	ldi	r25, 0x05	; 5
     2b4:	40 e1       	ldi	r20, 0x10	; 16
     2b6:	50 e0       	ldi	r21, 0x00	; 0
     2b8:	0e 94 b4 05 	call	0xb68	; 0xb68 <_ZN5Print5printEji>
     2bc:	8f e7       	ldi	r24, 0x7F	; 127
     2be:	95 e0       	ldi	r25, 0x05	; 5
     2c0:	68 e6       	ldi	r22, 0x68	; 104
     2c2:	70 e0       	ldi	r23, 0x00	; 0
     2c4:	0e 94 c6 04 	call	0x98c	; 0x98c <_ZN5Print5printEPK19__FlashStringHelper>
     2c8:	8f e7       	ldi	r24, 0x7F	; 127
     2ca:	95 e0       	ldi	r25, 0x05	; 5
     2cc:	b5 01       	movw	r22, r10
     2ce:	0e 94 c8 05 	call	0xb90	; 0xb90 <_ZN5Print7printlnEPKc>
     2d2:	0f c0       	rjmp	.+30     	; 0x2f2 <_Z11writeStringPcS_+0xd8>
     2d4:	6f 5f       	subi	r22, 0xFF	; 255
     2d6:	7f 4f       	sbci	r23, 0xFF	; 255
     2d8:	70 93 f5 04 	sts	0x04F5, r23
     2dc:	60 93 f4 04 	sts	0x04F4, r22
     2e0:	61 50       	subi	r22, 0x01	; 1
     2e2:	70 40       	sbci	r23, 0x00	; 0
     2e4:	f5 01       	movw	r30, r10
     2e6:	41 91       	ld	r20, Z+
     2e8:	5f 01       	movw	r10, r30
     2ea:	86 ef       	ldi	r24, 0xF6	; 246
     2ec:	94 e0       	ldi	r25, 0x04	; 4
     2ee:	0e 94 6e 02 	call	0x4dc	; 0x4dc <_ZN11EEPROMClass5writeEih>
     2f2:	f5 01       	movw	r30, r10
     2f4:	80 81       	ld	r24, Z
     2f6:	60 91 f4 04 	lds	r22, 0x04F4
     2fa:	70 91 f5 04 	lds	r23, 0x04F5
     2fe:	88 23       	and	r24, r24
     300:	49 f7       	brne	.-46     	; 0x2d4 <_Z11writeStringPcS_+0xba>
     302:	6f 5f       	subi	r22, 0xFF	; 255
     304:	7f 4f       	sbci	r23, 0xFF	; 255
     306:	70 93 f5 04 	sts	0x04F5, r23
     30a:	60 93 f4 04 	sts	0x04F4, r22
     30e:	61 50       	subi	r22, 0x01	; 1
     310:	70 40       	sbci	r23, 0x00	; 0
     312:	86 ef       	ldi	r24, 0xF6	; 246
     314:	94 e0       	ldi	r25, 0x04	; 4
     316:	40 e0       	ldi	r20, 0x00	; 0
     318:	0e 94 6e 02 	call	0x4dc	; 0x4dc <_ZN11EEPROMClass5writeEih>
     31c:	27 96       	adiw	r28, 0x07	; 7
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	f8 94       	cli
     322:	de bf       	out	0x3e, r29	; 62
     324:	0f be       	out	0x3f, r0	; 63
     326:	cd bf       	out	0x3d, r28	; 61
     328:	cf 91       	pop	r28
     32a:	df 91       	pop	r29
     32c:	1f 91       	pop	r17
     32e:	0f 91       	pop	r16
     330:	ff 90       	pop	r15
     332:	ef 90       	pop	r14
     334:	df 90       	pop	r13
     336:	cf 90       	pop	r12
     338:	bf 90       	pop	r11
     33a:	af 90       	pop	r10
     33c:	08 95       	ret

0000033e <setup>:
     33e:	8f e7       	ldi	r24, 0x7F	; 127
     340:	95 e0       	ldi	r25, 0x05	; 5
     342:	40 e0       	ldi	r20, 0x00	; 0
     344:	52 ec       	ldi	r21, 0xC2	; 194
     346:	61 e0       	ldi	r22, 0x01	; 1
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	0e 94 04 03 	call	0x608	; 0x608 <_ZN14HardwareSerial5beginEm>
     34e:	8f e7       	ldi	r24, 0x7F	; 127
     350:	95 e0       	ldi	r25, 0x05	; 5
     352:	0e 94 35 04 	call	0x86a	; 0x86a <_ZN14HardwareSerialcvbEv>
     356:	88 23       	and	r24, r24
     358:	d1 f3       	breq	.-12     	; 0x34e <setup+0x10>
     35a:	8f e7       	ldi	r24, 0x7F	; 127
     35c:	95 e0       	ldi	r25, 0x05	; 5
     35e:	6c e2       	ldi	r22, 0x2C	; 44
     360:	71 e0       	ldi	r23, 0x01	; 1
     362:	0e 94 11 05 	call	0xa22	; 0xa22 <_ZN5Print7printlnEPK19__FlashStringHelper>
     366:	8f e7       	ldi	r24, 0x7F	; 127
     368:	95 e0       	ldi	r25, 0x05	; 5
     36a:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_ZN5Print7printlnEv>
     36e:	8f e7       	ldi	r24, 0x7F	; 127
     370:	95 e0       	ldi	r25, 0x05	; 5
     372:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_ZN5Print7printlnEv>
     376:	8f e7       	ldi	r24, 0x7F	; 127
     378:	95 e0       	ldi	r25, 0x05	; 5
     37a:	61 e1       	ldi	r22, 0x11	; 17
     37c:	71 e0       	ldi	r23, 0x01	; 1
     37e:	0e 94 11 05 	call	0xa22	; 0xa22 <_ZN5Print7printlnEPK19__FlashStringHelper>
     382:	8f e7       	ldi	r24, 0x7F	; 127
     384:	95 e0       	ldi	r25, 0x05	; 5
     386:	66 ef       	ldi	r22, 0xF6	; 246
     388:	70 e0       	ldi	r23, 0x00	; 0
     38a:	0e 94 11 05 	call	0xa22	; 0xa22 <_ZN5Print7printlnEPK19__FlashStringHelper>
     38e:	8f e7       	ldi	r24, 0x7F	; 127
     390:	95 e0       	ldi	r25, 0x05	; 5
     392:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_ZN5Print7printlnEv>
     396:	8f e7       	ldi	r24, 0x7F	; 127
     398:	95 e0       	ldi	r25, 0x05	; 5
     39a:	6b e9       	ldi	r22, 0x9B	; 155
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	0e 94 11 05 	call	0xa22	; 0xa22 <_ZN5Print7printlnEPK19__FlashStringHelper>
     3a2:	8f e7       	ldi	r24, 0x7F	; 127
     3a4:	95 e0       	ldi	r25, 0x05	; 5
     3a6:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_ZN5Print7printlnEv>
     3aa:	8f e7       	ldi	r24, 0x7F	; 127
     3ac:	95 e0       	ldi	r25, 0x05	; 5
     3ae:	67 e8       	ldi	r22, 0x87	; 135
     3b0:	70 e0       	ldi	r23, 0x00	; 0
     3b2:	0e 94 11 05 	call	0xa22	; 0xa22 <_ZN5Print7printlnEPK19__FlashStringHelper>
     3b6:	8f e7       	ldi	r24, 0x7F	; 127
     3b8:	95 e0       	ldi	r25, 0x05	; 5
     3ba:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_ZN5Print7printlnEv>
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	91 e0       	ldi	r25, 0x01	; 1
     3c2:	64 e2       	ldi	r22, 0x24	; 36
     3c4:	71 e0       	ldi	r23, 0x01	; 1
     3c6:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z11writeStringPcS_>
     3ca:	81 e4       	ldi	r24, 0x41	; 65
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	67 e6       	ldi	r22, 0x67	; 103
     3d0:	71 e0       	ldi	r23, 0x01	; 1
     3d2:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z11writeStringPcS_>
     3d6:	88 e7       	ldi	r24, 0x78	; 120
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	6c e9       	ldi	r22, 0x9C	; 156
     3dc:	71 e0       	ldi	r23, 0x01	; 1
     3de:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z11writeStringPcS_>
     3e2:	86 ea       	ldi	r24, 0xA6	; 166
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	69 ec       	ldi	r22, 0xC9	; 201
     3e8:	71 e0       	ldi	r23, 0x01	; 1
     3ea:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z11writeStringPcS_>
     3ee:	82 ed       	ldi	r24, 0xD2	; 210
     3f0:	91 e0       	ldi	r25, 0x01	; 1
     3f2:	6d ef       	ldi	r22, 0xFD	; 253
     3f4:	71 e0       	ldi	r23, 0x01	; 1
     3f6:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z11writeStringPcS_>
     3fa:	83 e4       	ldi	r24, 0x43	; 67
     3fc:	92 e0       	ldi	r25, 0x02	; 2
     3fe:	65 e6       	ldi	r22, 0x65	; 101
     400:	72 e0       	ldi	r23, 0x02	; 2
     402:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z11writeStringPcS_>
     406:	8f e7       	ldi	r24, 0x7F	; 127
     408:	92 e0       	ldi	r25, 0x02	; 2
     40a:	6f e9       	ldi	r22, 0x9F	; 159
     40c:	72 e0       	ldi	r23, 0x02	; 2
     40e:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z11writeStringPcS_>
     412:	85 ec       	ldi	r24, 0xC5	; 197
     414:	92 e0       	ldi	r25, 0x02	; 2
     416:	6b ee       	ldi	r22, 0xEB	; 235
     418:	72 e0       	ldi	r23, 0x02	; 2
     41a:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z11writeStringPcS_>
     41e:	81 e1       	ldi	r24, 0x11	; 17
     420:	93 e0       	ldi	r25, 0x03	; 3
     422:	6e e2       	ldi	r22, 0x2E	; 46
     424:	73 e0       	ldi	r23, 0x03	; 3
     426:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z11writeStringPcS_>
     42a:	81 e4       	ldi	r24, 0x41	; 65
     42c:	93 e0       	ldi	r25, 0x03	; 3
     42e:	66 e6       	ldi	r22, 0x66	; 102
     430:	73 e0       	ldi	r23, 0x03	; 3
     432:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z11writeStringPcS_>
     436:	86 e8       	ldi	r24, 0x86	; 134
     438:	93 e0       	ldi	r25, 0x03	; 3
     43a:	69 ea       	ldi	r22, 0xA9	; 169
     43c:	73 e0       	ldi	r23, 0x03	; 3
     43e:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z11writeStringPcS_>
     442:	86 eb       	ldi	r24, 0xB6	; 182
     444:	93 e0       	ldi	r25, 0x03	; 3
     446:	64 ed       	ldi	r22, 0xD4	; 212
     448:	73 e0       	ldi	r23, 0x03	; 3
     44a:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z11writeStringPcS_>
     44e:	8b ed       	ldi	r24, 0xDB	; 219
     450:	93 e0       	ldi	r25, 0x03	; 3
     452:	66 ef       	ldi	r22, 0xF6	; 246
     454:	73 e0       	ldi	r23, 0x03	; 3
     456:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z11writeStringPcS_>
     45a:	8f e7       	ldi	r24, 0x7F	; 127
     45c:	95 e0       	ldi	r25, 0x05	; 5
     45e:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_ZN5Print7printlnEv>
     462:	8f e7       	ldi	r24, 0x7F	; 127
     464:	95 e0       	ldi	r25, 0x05	; 5
     466:	62 e3       	ldi	r22, 0x32	; 50
     468:	74 e0       	ldi	r23, 0x04	; 4
     46a:	0e 94 c8 05 	call	0xb90	; 0xb90 <_ZN5Print7printlnEPKc>
     46e:	8f e7       	ldi	r24, 0x7F	; 127
     470:	95 e0       	ldi	r25, 0x05	; 5
     472:	60 e6       	ldi	r22, 0x60	; 96
     474:	74 e0       	ldi	r23, 0x04	; 4
     476:	0e 94 c8 05 	call	0xb90	; 0xb90 <_ZN5Print7printlnEPKc>
     47a:	8f e7       	ldi	r24, 0x7F	; 127
     47c:	95 e0       	ldi	r25, 0x05	; 5
     47e:	6e e6       	ldi	r22, 0x6E	; 110
     480:	74 e0       	ldi	r23, 0x04	; 4
     482:	0e 94 c8 05 	call	0xb90	; 0xb90 <_ZN5Print7printlnEPKc>
     486:	8f e7       	ldi	r24, 0x7F	; 127
     488:	95 e0       	ldi	r25, 0x05	; 5
     48a:	60 e9       	ldi	r22, 0x90	; 144
     48c:	74 e0       	ldi	r23, 0x04	; 4
     48e:	0e 94 c8 05 	call	0xb90	; 0xb90 <_ZN5Print7printlnEPKc>
     492:	8f e7       	ldi	r24, 0x7F	; 127
     494:	95 e0       	ldi	r25, 0x05	; 5
     496:	6d e9       	ldi	r22, 0x9D	; 157
     498:	74 e0       	ldi	r23, 0x04	; 4
     49a:	0e 94 c8 05 	call	0xb90	; 0xb90 <_ZN5Print7printlnEPKc>
     49e:	8f e7       	ldi	r24, 0x7F	; 127
     4a0:	95 e0       	ldi	r25, 0x05	; 5
     4a2:	6b ea       	ldi	r22, 0xAB	; 171
     4a4:	74 e0       	ldi	r23, 0x04	; 4
     4a6:	0e 94 c8 05 	call	0xb90	; 0xb90 <_ZN5Print7printlnEPKc>
     4aa:	8f e7       	ldi	r24, 0x7F	; 127
     4ac:	95 e0       	ldi	r25, 0x05	; 5
     4ae:	6a ec       	ldi	r22, 0xCA	; 202
     4b0:	74 e0       	ldi	r23, 0x04	; 4
     4b2:	0e 94 c8 05 	call	0xb90	; 0xb90 <_ZN5Print7printlnEPKc>
     4b6:	8f e7       	ldi	r24, 0x7F	; 127
     4b8:	95 e0       	ldi	r25, 0x05	; 5
     4ba:	6e ec       	ldi	r22, 0xCE	; 206
     4bc:	74 e0       	ldi	r23, 0x04	; 4
     4be:	0e 94 c8 05 	call	0xb90	; 0xb90 <_ZN5Print7printlnEPKc>
     4c2:	8f e7       	ldi	r24, 0x7F	; 127
     4c4:	95 e0       	ldi	r25, 0x05	; 5
     4c6:	6c ed       	ldi	r22, 0xDC	; 220
     4c8:	74 e0       	ldi	r23, 0x04	; 4
     4ca:	0e 94 c8 05 	call	0xb90	; 0xb90 <_ZN5Print7printlnEPKc>
     4ce:	8f e7       	ldi	r24, 0x7F	; 127
     4d0:	95 e0       	ldi	r25, 0x05	; 5
     4d2:	60 e8       	ldi	r22, 0x80	; 128
     4d4:	70 e0       	ldi	r23, 0x00	; 0
     4d6:	0e 94 11 05 	call	0xa22	; 0xa22 <_ZN5Print7printlnEPK19__FlashStringHelper>
     4da:	08 95       	ret

000004dc <_ZN11EEPROMClass5writeEih>:
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     4dc:	f9 99       	sbic	0x1f, 1	; 31
     4de:	fe cf       	rjmp	.-4      	; 0x4dc <_ZN11EEPROMClass5writeEih>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     4e0:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     4e2:	72 bd       	out	0x22, r23	; 34
     4e4:	61 bd       	out	0x21, r22	; 33
#endif
    EEDR = __value;
     4e6:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	fa 9a       	sbi	0x1f, 2	; 31
     4ee:	f9 9a       	sbi	0x1f, 1	; 31
     4f0:	0f be       	out	0x3f, r0	; 63

void EEPROMClass::write(int address, uint8_t value)
{
	eeprom_write_byte((unsigned char *) address, value);
}
     4f2:	08 95       	ret

000004f4 <_Z11serialEventv>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
     4f4:	08 95       	ret

000004f6 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
     4f6:	1f 92       	push	r1
     4f8:	0f 92       	push	r0
     4fa:	0f b6       	in	r0, 0x3f	; 63
     4fc:	0f 92       	push	r0
     4fe:	11 24       	eor	r1, r1
     500:	2f 93       	push	r18
     502:	3f 93       	push	r19
     504:	4f 93       	push	r20
     506:	8f 93       	push	r24
     508:	9f 93       	push	r25
     50a:	ef 93       	push	r30
     50c:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
     50e:	80 91 c0 00 	lds	r24, 0x00C0
     512:	82 fd       	sbrc	r24, 2
     514:	1d c0       	rjmp	.+58     	; 0x550 <__vector_18+0x5a>
      unsigned char c = UDR0;
     516:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     51a:	20 91 37 05 	lds	r18, 0x0537
     51e:	30 91 38 05 	lds	r19, 0x0538

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     522:	2f 5f       	subi	r18, 0xFF	; 255
     524:	3f 4f       	sbci	r19, 0xFF	; 255
     526:	2f 73       	andi	r18, 0x3F	; 63
     528:	30 70       	andi	r19, 0x00	; 0
     52a:	80 91 39 05 	lds	r24, 0x0539
     52e:	90 91 3a 05 	lds	r25, 0x053A
     532:	28 17       	cp	r18, r24
     534:	39 07       	cpc	r19, r25
     536:	71 f0       	breq	.+28     	; 0x554 <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
     538:	e0 91 37 05 	lds	r30, 0x0537
     53c:	f0 91 38 05 	lds	r31, 0x0538
     540:	e9 50       	subi	r30, 0x09	; 9
     542:	fb 4f       	sbci	r31, 0xFB	; 251
     544:	40 83       	st	Z, r20
    buffer->head = i;
     546:	30 93 38 05 	sts	0x0538, r19
     54a:	20 93 37 05 	sts	0x0537, r18
     54e:	02 c0       	rjmp	.+4      	; 0x554 <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
     550:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
     554:	ff 91       	pop	r31
     556:	ef 91       	pop	r30
     558:	9f 91       	pop	r25
     55a:	8f 91       	pop	r24
     55c:	4f 91       	pop	r20
     55e:	3f 91       	pop	r19
     560:	2f 91       	pop	r18
     562:	0f 90       	pop	r0
     564:	0f be       	out	0x3f, r0	; 63
     566:	0f 90       	pop	r0
     568:	1f 90       	pop	r1
     56a:	18 95       	reti

0000056c <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     56c:	e0 91 8b 05 	lds	r30, 0x058B
     570:	f0 91 8c 05 	lds	r31, 0x058C
     574:	e0 5c       	subi	r30, 0xC0	; 192
     576:	ff 4f       	sbci	r31, 0xFF	; 255
     578:	81 91       	ld	r24, Z+
     57a:	91 91       	ld	r25, Z+
     57c:	20 81       	ld	r18, Z
     57e:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
     580:	82 1b       	sub	r24, r18
     582:	93 0b       	sbc	r25, r19
     584:	8f 73       	andi	r24, 0x3F	; 63
     586:	90 70       	andi	r25, 0x00	; 0
     588:	89 2b       	or	r24, r25
     58a:	11 f0       	breq	.+4      	; 0x590 <_Z14serialEventRunv+0x24>
     58c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <_Z11serialEventv>
     590:	08 95       	ret

00000592 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
     592:	1f 92       	push	r1
     594:	0f 92       	push	r0
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	0f 92       	push	r0
     59a:	11 24       	eor	r1, r1
     59c:	2f 93       	push	r18
     59e:	3f 93       	push	r19
     5a0:	8f 93       	push	r24
     5a2:	9f 93       	push	r25
     5a4:	ef 93       	push	r30
     5a6:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
     5a8:	20 91 7b 05 	lds	r18, 0x057B
     5ac:	30 91 7c 05 	lds	r19, 0x057C
     5b0:	80 91 7d 05 	lds	r24, 0x057D
     5b4:	90 91 7e 05 	lds	r25, 0x057E
     5b8:	28 17       	cp	r18, r24
     5ba:	39 07       	cpc	r19, r25
     5bc:	31 f4       	brne	.+12     	; 0x5ca <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
     5be:	80 91 c1 00 	lds	r24, 0x00C1
     5c2:	8f 7d       	andi	r24, 0xDF	; 223
     5c4:	80 93 c1 00 	sts	0x00C1, r24
     5c8:	14 c0       	rjmp	.+40     	; 0x5f2 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
     5ca:	e0 91 7d 05 	lds	r30, 0x057D
     5ce:	f0 91 7e 05 	lds	r31, 0x057E
     5d2:	e5 5c       	subi	r30, 0xC5	; 197
     5d4:	fa 4f       	sbci	r31, 0xFA	; 250
     5d6:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
     5d8:	80 91 7d 05 	lds	r24, 0x057D
     5dc:	90 91 7e 05 	lds	r25, 0x057E
     5e0:	01 96       	adiw	r24, 0x01	; 1
     5e2:	8f 73       	andi	r24, 0x3F	; 63
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	90 93 7e 05 	sts	0x057E, r25
     5ea:	80 93 7d 05 	sts	0x057D, r24
	
  #if defined(UDR0)
    UDR0 = c;
     5ee:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
     5f2:	ff 91       	pop	r31
     5f4:	ef 91       	pop	r30
     5f6:	9f 91       	pop	r25
     5f8:	8f 91       	pop	r24
     5fa:	3f 91       	pop	r19
     5fc:	2f 91       	pop	r18
     5fe:	0f 90       	pop	r0
     600:	0f be       	out	0x3f, r0	; 63
     602:	0f 90       	pop	r0
     604:	1f 90       	pop	r1
     606:	18 95       	reti

00000608 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
     608:	af 92       	push	r10
     60a:	bf 92       	push	r11
     60c:	df 92       	push	r13
     60e:	ef 92       	push	r14
     610:	ff 92       	push	r15
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	ec 01       	movw	r28, r24
     61c:	7a 01       	movw	r14, r20
     61e:	8b 01       	movw	r16, r22
     620:	dd 24       	eor	r13, r13
     622:	40 30       	cpi	r20, 0x00	; 0
     624:	81 ee       	ldi	r24, 0xE1	; 225
     626:	58 07       	cpc	r21, r24
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	68 07       	cpc	r22, r24
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	78 07       	cpc	r23, r24
     630:	11 f0       	breq	.+4      	; 0x636 <_ZN14HardwareSerial5beginEm+0x2e>
     632:	dd 24       	eor	r13, r13
     634:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
     636:	91 e0       	ldi	r25, 0x01	; 1
     638:	a9 2e       	mov	r10, r25
     63a:	b1 2c       	mov	r11, r1
     63c:	ec 89       	ldd	r30, Y+20	; 0x14
     63e:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
     640:	dd 20       	and	r13, r13
     642:	69 f0       	breq	.+26     	; 0x65e <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
     644:	c5 01       	movw	r24, r10
     646:	08 a0       	ldd	r0, Y+32	; 0x20
     648:	02 c0       	rjmp	.+4      	; 0x64e <_ZN14HardwareSerial5beginEm+0x46>
     64a:	88 0f       	add	r24, r24
     64c:	99 1f       	adc	r25, r25
     64e:	0a 94       	dec	r0
     650:	e2 f7       	brpl	.-8      	; 0x64a <_ZN14HardwareSerial5beginEm+0x42>
     652:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     654:	60 e0       	ldi	r22, 0x00	; 0
     656:	79 e0       	ldi	r23, 0x09	; 9
     658:	8d e3       	ldi	r24, 0x3D	; 61
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	05 c0       	rjmp	.+10     	; 0x668 <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
     65e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     660:	60 e8       	ldi	r22, 0x80	; 128
     662:	74 e8       	ldi	r23, 0x84	; 132
     664:	8e e1       	ldi	r24, 0x1E	; 30
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	a8 01       	movw	r20, r16
     66a:	97 01       	movw	r18, r14
     66c:	0e 94 4c 09 	call	0x1298	; 0x1298 <__udivmodsi4>
     670:	21 50       	subi	r18, 0x01	; 1
     672:	30 40       	sbci	r19, 0x00	; 0
     674:	40 40       	sbci	r20, 0x00	; 0
     676:	50 40       	sbci	r21, 0x00	; 0
     678:	56 95       	lsr	r21
     67a:	47 95       	ror	r20
     67c:	37 95       	ror	r19
     67e:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
     680:	80 e1       	ldi	r24, 0x10	; 16
     682:	20 30       	cpi	r18, 0x00	; 0
     684:	38 07       	cpc	r19, r24
     686:	20 f0       	brcs	.+8      	; 0x690 <_ZN14HardwareSerial5beginEm+0x88>
     688:	dd 20       	and	r13, r13
     68a:	11 f0       	breq	.+4      	; 0x690 <_ZN14HardwareSerial5beginEm+0x88>
     68c:	dd 24       	eor	r13, r13
     68e:	d6 cf       	rjmp	.-84     	; 0x63c <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     690:	e8 89       	ldd	r30, Y+16	; 0x10
     692:	f9 89       	ldd	r31, Y+17	; 0x11
     694:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     696:	ea 89       	ldd	r30, Y+18	; 0x12
     698:	fb 89       	ldd	r31, Y+19	; 0x13
     69a:	20 83       	st	Z, r18

  transmitting = false;
     69c:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
     69e:	ee 89       	ldd	r30, Y+22	; 0x16
     6a0:	ff 89       	ldd	r31, Y+23	; 0x17
     6a2:	40 81       	ld	r20, Z
     6a4:	21 e0       	ldi	r18, 0x01	; 1
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	c9 01       	movw	r24, r18
     6aa:	0c 8c       	ldd	r0, Y+28	; 0x1c
     6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <_ZN14HardwareSerial5beginEm+0xaa>
     6ae:	88 0f       	add	r24, r24
     6b0:	99 1f       	adc	r25, r25
     6b2:	0a 94       	dec	r0
     6b4:	e2 f7       	brpl	.-8      	; 0x6ae <_ZN14HardwareSerial5beginEm+0xa6>
     6b6:	48 2b       	or	r20, r24
     6b8:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
     6ba:	ee 89       	ldd	r30, Y+22	; 0x16
     6bc:	ff 89       	ldd	r31, Y+23	; 0x17
     6be:	40 81       	ld	r20, Z
     6c0:	c9 01       	movw	r24, r18
     6c2:	0d 8c       	ldd	r0, Y+29	; 0x1d
     6c4:	02 c0       	rjmp	.+4      	; 0x6ca <_ZN14HardwareSerial5beginEm+0xc2>
     6c6:	88 0f       	add	r24, r24
     6c8:	99 1f       	adc	r25, r25
     6ca:	0a 94       	dec	r0
     6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <_ZN14HardwareSerial5beginEm+0xbe>
     6ce:	48 2b       	or	r20, r24
     6d0:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
     6d2:	ee 89       	ldd	r30, Y+22	; 0x16
     6d4:	ff 89       	ldd	r31, Y+23	; 0x17
     6d6:	40 81       	ld	r20, Z
     6d8:	c9 01       	movw	r24, r18
     6da:	0e 8c       	ldd	r0, Y+30	; 0x1e
     6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <_ZN14HardwareSerial5beginEm+0xda>
     6de:	88 0f       	add	r24, r24
     6e0:	99 1f       	adc	r25, r25
     6e2:	0a 94       	dec	r0
     6e4:	e2 f7       	brpl	.-8      	; 0x6de <_ZN14HardwareSerial5beginEm+0xd6>
     6e6:	48 2b       	or	r20, r24
     6e8:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
     6ea:	ee 89       	ldd	r30, Y+22	; 0x16
     6ec:	ff 89       	ldd	r31, Y+23	; 0x17
     6ee:	80 81       	ld	r24, Z
     6f0:	0f 8c       	ldd	r0, Y+31	; 0x1f
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <_ZN14HardwareSerial5beginEm+0xf0>
     6f4:	22 0f       	add	r18, r18
     6f6:	33 1f       	adc	r19, r19
     6f8:	0a 94       	dec	r0
     6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <_ZN14HardwareSerial5beginEm+0xec>
     6fc:	20 95       	com	r18
     6fe:	28 23       	and	r18, r24
     700:	20 83       	st	Z, r18
}
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	1f 91       	pop	r17
     708:	0f 91       	pop	r16
     70a:	ff 90       	pop	r15
     70c:	ef 90       	pop	r14
     70e:	df 90       	pop	r13
     710:	bf 90       	pop	r11
     712:	af 90       	pop	r10
     714:	08 95       	ret

00000716 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     716:	dc 01       	movw	r26, r24
     718:	1c 96       	adiw	r26, 0x0c	; 12
     71a:	ed 91       	ld	r30, X+
     71c:	fc 91       	ld	r31, X
     71e:	1d 97       	sbiw	r26, 0x0d	; 13
     720:	e0 5c       	subi	r30, 0xC0	; 192
     722:	ff 4f       	sbci	r31, 0xFF	; 255
     724:	21 91       	ld	r18, Z+
     726:	31 91       	ld	r19, Z+
     728:	80 81       	ld	r24, Z
     72a:	91 81       	ldd	r25, Z+1	; 0x01
     72c:	28 1b       	sub	r18, r24
     72e:	39 0b       	sbc	r19, r25
     730:	2f 73       	andi	r18, 0x3F	; 63
     732:	30 70       	andi	r19, 0x00	; 0
}
     734:	c9 01       	movw	r24, r18
     736:	08 95       	ret

00000738 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     738:	dc 01       	movw	r26, r24
     73a:	1c 96       	adiw	r26, 0x0c	; 12
     73c:	ed 91       	ld	r30, X+
     73e:	fc 91       	ld	r31, X
     740:	1d 97       	sbiw	r26, 0x0d	; 13
     742:	e0 5c       	subi	r30, 0xC0	; 192
     744:	ff 4f       	sbci	r31, 0xFF	; 255
     746:	20 81       	ld	r18, Z
     748:	31 81       	ldd	r19, Z+1	; 0x01
     74a:	e0 54       	subi	r30, 0x40	; 64
     74c:	f0 40       	sbci	r31, 0x00	; 0
     74e:	df 01       	movw	r26, r30
     750:	ae 5b       	subi	r26, 0xBE	; 190
     752:	bf 4f       	sbci	r27, 0xFF	; 255
     754:	8d 91       	ld	r24, X+
     756:	9c 91       	ld	r25, X
     758:	11 97       	sbiw	r26, 0x01	; 1
     75a:	28 17       	cp	r18, r24
     75c:	39 07       	cpc	r19, r25
     75e:	19 f4       	brne	.+6      	; 0x766 <_ZN14HardwareSerial4peekEv+0x2e>
     760:	2f ef       	ldi	r18, 0xFF	; 255
     762:	3f ef       	ldi	r19, 0xFF	; 255
     764:	07 c0       	rjmp	.+14     	; 0x774 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     766:	8d 91       	ld	r24, X+
     768:	9c 91       	ld	r25, X
     76a:	e8 0f       	add	r30, r24
     76c:	f9 1f       	adc	r31, r25
     76e:	80 81       	ld	r24, Z
     770:	28 2f       	mov	r18, r24
     772:	30 e0       	ldi	r19, 0x00	; 0
  }
}
     774:	c9 01       	movw	r24, r18
     776:	08 95       	ret

00000778 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     778:	dc 01       	movw	r26, r24
     77a:	1c 96       	adiw	r26, 0x0c	; 12
     77c:	ed 91       	ld	r30, X+
     77e:	fc 91       	ld	r31, X
     780:	1d 97       	sbiw	r26, 0x0d	; 13
     782:	e0 5c       	subi	r30, 0xC0	; 192
     784:	ff 4f       	sbci	r31, 0xFF	; 255
     786:	20 81       	ld	r18, Z
     788:	31 81       	ldd	r19, Z+1	; 0x01
     78a:	e0 54       	subi	r30, 0x40	; 64
     78c:	f0 40       	sbci	r31, 0x00	; 0
     78e:	df 01       	movw	r26, r30
     790:	ae 5b       	subi	r26, 0xBE	; 190
     792:	bf 4f       	sbci	r27, 0xFF	; 255
     794:	8d 91       	ld	r24, X+
     796:	9c 91       	ld	r25, X
     798:	11 97       	sbiw	r26, 0x01	; 1
     79a:	28 17       	cp	r18, r24
     79c:	39 07       	cpc	r19, r25
     79e:	19 f4       	brne	.+6      	; 0x7a6 <_ZN14HardwareSerial4readEv+0x2e>
     7a0:	2f ef       	ldi	r18, 0xFF	; 255
     7a2:	3f ef       	ldi	r19, 0xFF	; 255
     7a4:	10 c0       	rjmp	.+32     	; 0x7c6 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     7a6:	8d 91       	ld	r24, X+
     7a8:	9c 91       	ld	r25, X
     7aa:	11 97       	sbiw	r26, 0x01	; 1
     7ac:	e8 0f       	add	r30, r24
     7ae:	f9 1f       	adc	r31, r25
     7b0:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
     7b2:	8d 91       	ld	r24, X+
     7b4:	9c 91       	ld	r25, X
     7b6:	11 97       	sbiw	r26, 0x01	; 1
     7b8:	01 96       	adiw	r24, 0x01	; 1
     7ba:	8f 73       	andi	r24, 0x3F	; 63
     7bc:	90 70       	andi	r25, 0x00	; 0
     7be:	11 96       	adiw	r26, 0x01	; 1
     7c0:	9c 93       	st	X, r25
     7c2:	8e 93       	st	-X, r24
    return c;
     7c4:	30 e0       	ldi	r19, 0x00	; 0
  }
}
     7c6:	c9 01       	movw	r24, r18
     7c8:	08 95       	ret

000007ca <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
     7ca:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
     7cc:	91 96       	adiw	r26, 0x21	; 33
     7ce:	8c 91       	ld	r24, X
     7d0:	91 97       	sbiw	r26, 0x21	; 33
     7d2:	88 23       	and	r24, r24
     7d4:	39 f0       	breq	.+14     	; 0x7e4 <_ZN14HardwareSerial5flushEv+0x1a>
     7d6:	54 96       	adiw	r26, 0x14	; 20
     7d8:	ed 91       	ld	r30, X+
     7da:	fc 91       	ld	r31, X
     7dc:	55 97       	sbiw	r26, 0x15	; 21
     7de:	80 81       	ld	r24, Z
     7e0:	86 ff       	sbrs	r24, 6
     7e2:	f9 cf       	rjmp	.-14     	; 0x7d6 <_ZN14HardwareSerial5flushEv+0xc>
  transmitting = false;
     7e4:	91 96       	adiw	r26, 0x21	; 33
     7e6:	1c 92       	st	X, r1
}
     7e8:	08 95       	ret

000007ea <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
     7f0:	ee 85       	ldd	r30, Y+14	; 0x0e
     7f2:	ff 85       	ldd	r31, Y+15	; 0x0f
     7f4:	e0 5c       	subi	r30, 0xC0	; 192
     7f6:	ff 4f       	sbci	r31, 0xFF	; 255
     7f8:	20 81       	ld	r18, Z
     7fa:	31 81       	ldd	r19, Z+1	; 0x01
     7fc:	e0 54       	subi	r30, 0x40	; 64
     7fe:	f0 40       	sbci	r31, 0x00	; 0
     800:	2f 5f       	subi	r18, 0xFF	; 255
     802:	3f 4f       	sbci	r19, 0xFF	; 255
     804:	2f 73       	andi	r18, 0x3F	; 63
     806:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
     808:	df 01       	movw	r26, r30
     80a:	ae 5b       	subi	r26, 0xBE	; 190
     80c:	bf 4f       	sbci	r27, 0xFF	; 255
     80e:	8d 91       	ld	r24, X+
     810:	9c 91       	ld	r25, X
     812:	11 97       	sbiw	r26, 0x01	; 1
     814:	28 17       	cp	r18, r24
     816:	39 07       	cpc	r19, r25
     818:	d1 f3       	breq	.-12     	; 0x80e <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
     81a:	e0 5c       	subi	r30, 0xC0	; 192
     81c:	ff 4f       	sbci	r31, 0xFF	; 255
     81e:	80 81       	ld	r24, Z
     820:	91 81       	ldd	r25, Z+1	; 0x01
     822:	e0 54       	subi	r30, 0x40	; 64
     824:	f0 40       	sbci	r31, 0x00	; 0
     826:	e8 0f       	add	r30, r24
     828:	f9 1f       	adc	r31, r25
     82a:	60 83       	st	Z, r22
  _tx_buffer->head = i;
     82c:	ee 85       	ldd	r30, Y+14	; 0x0e
     82e:	ff 85       	ldd	r31, Y+15	; 0x0f
     830:	e0 5c       	subi	r30, 0xC0	; 192
     832:	ff 4f       	sbci	r31, 0xFF	; 255
     834:	31 83       	std	Z+1, r19	; 0x01
     836:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
     838:	ee 89       	ldd	r30, Y+22	; 0x16
     83a:	ff 89       	ldd	r31, Y+23	; 0x17
     83c:	20 81       	ld	r18, Z
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0f 8c       	ldd	r0, Y+31	; 0x1f
     844:	02 c0       	rjmp	.+4      	; 0x84a <_ZN14HardwareSerial5writeEh+0x60>
     846:	88 0f       	add	r24, r24
     848:	99 1f       	adc	r25, r25
     84a:	0a 94       	dec	r0
     84c:	e2 f7       	brpl	.-8      	; 0x846 <_ZN14HardwareSerial5writeEh+0x5c>
     84e:	28 2b       	or	r18, r24
     850:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
     856:	ec 89       	ldd	r30, Y+20	; 0x14
     858:	fd 89       	ldd	r31, Y+21	; 0x15
     85a:	80 81       	ld	r24, Z
     85c:	80 64       	ori	r24, 0x40	; 64
     85e:	80 83       	st	Z, r24
  
  return 1;
}
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	08 95       	ret

0000086a <_ZN14HardwareSerialcvbEv>:

HardwareSerial::operator bool() {
	return true;
}
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	08 95       	ret

0000086e <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     86e:	10 92 82 05 	sts	0x0582, r1
     872:	10 92 81 05 	sts	0x0581, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     876:	88 ee       	ldi	r24, 0xE8	; 232
     878:	93 e0       	ldi	r25, 0x03	; 3
     87a:	a0 e0       	ldi	r26, 0x00	; 0
     87c:	b0 e0       	ldi	r27, 0x00	; 0
     87e:	80 93 83 05 	sts	0x0583, r24
     882:	90 93 84 05 	sts	0x0584, r25
     886:	a0 93 85 05 	sts	0x0585, r26
     88a:	b0 93 86 05 	sts	0x0586, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
     88e:	88 ee       	ldi	r24, 0xE8	; 232
     890:	94 e0       	ldi	r25, 0x04	; 4
     892:	90 93 80 05 	sts	0x0580, r25
     896:	80 93 7f 05 	sts	0x057F, r24
{
  _rx_buffer = rx_buffer;
     89a:	87 ef       	ldi	r24, 0xF7	; 247
     89c:	94 e0       	ldi	r25, 0x04	; 4
     89e:	90 93 8c 05 	sts	0x058C, r25
     8a2:	80 93 8b 05 	sts	0x058B, r24
  _tx_buffer = tx_buffer;
     8a6:	8b e3       	ldi	r24, 0x3B	; 59
     8a8:	95 e0       	ldi	r25, 0x05	; 5
     8aa:	90 93 8e 05 	sts	0x058E, r25
     8ae:	80 93 8d 05 	sts	0x058D, r24
  _ubrrh = ubrrh;
     8b2:	85 ec       	ldi	r24, 0xC5	; 197
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	90 93 90 05 	sts	0x0590, r25
     8ba:	80 93 8f 05 	sts	0x058F, r24
  _ubrrl = ubrrl;
     8be:	84 ec       	ldi	r24, 0xC4	; 196
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	90 93 92 05 	sts	0x0592, r25
     8c6:	80 93 91 05 	sts	0x0591, r24
  _ucsra = ucsra;
     8ca:	80 ec       	ldi	r24, 0xC0	; 192
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	90 93 94 05 	sts	0x0594, r25
     8d2:	80 93 93 05 	sts	0x0593, r24
  _ucsrb = ucsrb;
     8d6:	81 ec       	ldi	r24, 0xC1	; 193
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	90 93 96 05 	sts	0x0596, r25
     8de:	80 93 95 05 	sts	0x0595, r24
  _ucsrc = ucsrc;
     8e2:	82 ec       	ldi	r24, 0xC2	; 194
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	90 93 98 05 	sts	0x0598, r25
     8ea:	80 93 97 05 	sts	0x0597, r24
  _udr = udr;
     8ee:	86 ec       	ldi	r24, 0xC6	; 198
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	90 93 9a 05 	sts	0x059A, r25
     8f6:	80 93 99 05 	sts	0x0599, r24
  _rxen = rxen;
     8fa:	84 e0       	ldi	r24, 0x04	; 4
     8fc:	80 93 9b 05 	sts	0x059B, r24
  _txen = txen;
     900:	83 e0       	ldi	r24, 0x03	; 3
     902:	80 93 9c 05 	sts	0x059C, r24
  _rxcie = rxcie;
     906:	87 e0       	ldi	r24, 0x07	; 7
     908:	80 93 9d 05 	sts	0x059D, r24
  _udrie = udrie;
     90c:	85 e0       	ldi	r24, 0x05	; 5
     90e:	80 93 9e 05 	sts	0x059E, r24
  _u2x = u2x;
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	80 93 9f 05 	sts	0x059F, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
     918:	08 95       	ret

0000091a <main>:
#include <Arduino.h>

int main(void)
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
{
	init();
     91e:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     922:	0e 94 9f 01 	call	0x33e	; 0x33e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     926:	c6 eb       	ldi	r28, 0xB6	; 182
     928:	d2 e0       	ldi	r29, 0x02	; 2
#endif
	
	setup();
    
	for (;;) {
		loop();
     92a:	0e 94 0c 01 	call	0x218	; 0x218 <loop>
		if (serialEventRun) serialEventRun();
     92e:	20 97       	sbiw	r28, 0x00	; 0
     930:	e1 f3       	breq	.-8      	; 0x92a <main+0x10>
     932:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z14serialEventRunv>
     936:	f9 cf       	rjmp	.-14     	; 0x92a <main+0x10>

00000938 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
     938:	cf 92       	push	r12
     93a:	df 92       	push	r13
     93c:	ef 92       	push	r14
     93e:	ff 92       	push	r15
     940:	0f 93       	push	r16
     942:	1f 93       	push	r17
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	7c 01       	movw	r14, r24
     94a:	6b 01       	movw	r12, r22
     94c:	8a 01       	movw	r16, r20
     94e:	c0 e0       	ldi	r28, 0x00	; 0
     950:	d0 e0       	ldi	r29, 0x00	; 0
     952:	0f c0       	rjmp	.+30     	; 0x972 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
     954:	d6 01       	movw	r26, r12
     956:	6d 91       	ld	r22, X+
     958:	6d 01       	movw	r12, r26
     95a:	d7 01       	movw	r26, r14
     95c:	ed 91       	ld	r30, X+
     95e:	fc 91       	ld	r31, X
     960:	01 90       	ld	r0, Z+
     962:	f0 81       	ld	r31, Z
     964:	e0 2d       	mov	r30, r0
     966:	c7 01       	movw	r24, r14
     968:	09 95       	icall
     96a:	c8 0f       	add	r28, r24
     96c:	d9 1f       	adc	r29, r25
     96e:	01 50       	subi	r16, 0x01	; 1
     970:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     972:	01 15       	cp	r16, r1
     974:	11 05       	cpc	r17, r1
     976:	71 f7       	brne	.-36     	; 0x954 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
     978:	ce 01       	movw	r24, r28
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	1f 91       	pop	r17
     980:	0f 91       	pop	r16
     982:	ff 90       	pop	r15
     984:	ef 90       	pop	r14
     986:	df 90       	pop	r13
     988:	cf 90       	pop	r12
     98a:	08 95       	ret

0000098c <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
     99a:	8b 01       	movw	r16, r22
     99c:	c0 e0       	ldi	r28, 0x00	; 0
     99e:	d0 e0       	ldi	r29, 0x00	; 0
     9a0:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
     9a2:	0f 5f       	subi	r16, 0xFF	; 255
     9a4:	1f 4f       	sbci	r17, 0xFF	; 255
     9a6:	64 91       	lpm	r22, Z+
    if (c == 0) break;
     9a8:	66 23       	and	r22, r22
     9aa:	59 f0       	breq	.+22     	; 0x9c2 <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    n += write(c);
     9ac:	d7 01       	movw	r26, r14
     9ae:	ed 91       	ld	r30, X+
     9b0:	fc 91       	ld	r31, X
     9b2:	01 90       	ld	r0, Z+
     9b4:	f0 81       	ld	r31, Z
     9b6:	e0 2d       	mov	r30, r0
     9b8:	c7 01       	movw	r24, r14
     9ba:	09 95       	icall
     9bc:	c8 0f       	add	r28, r24
     9be:	d9 1f       	adc	r29, r25
     9c0:	ef cf       	rjmp	.-34     	; 0x9a0 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
  }
  return n;
}
     9c2:	ce 01       	movw	r24, r28
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
     9cc:	ff 90       	pop	r15
     9ce:	ef 90       	pop	r14
     9d0:	08 95       	ret

000009d2 <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
     9d2:	dc 01       	movw	r26, r24
{
  return write(c);
     9d4:	ed 91       	ld	r30, X+
     9d6:	fc 91       	ld	r31, X
     9d8:	01 90       	ld	r0, Z+
     9da:	f0 81       	ld	r31, Z
     9dc:	e0 2d       	mov	r30, r0
     9de:	09 95       	icall
}
     9e0:	08 95       	ret

000009e2 <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
     9e2:	ef 92       	push	r14
     9e4:	ff 92       	push	r15
     9e6:	0f 93       	push	r16
     9e8:	1f 93       	push	r17
     9ea:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     9ec:	dc 01       	movw	r26, r24
     9ee:	ed 91       	ld	r30, X+
     9f0:	fc 91       	ld	r31, X
     9f2:	01 90       	ld	r0, Z+
     9f4:	f0 81       	ld	r31, Z
     9f6:	e0 2d       	mov	r30, r0
     9f8:	6d e0       	ldi	r22, 0x0D	; 13
     9fa:	09 95       	icall
     9fc:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
     9fe:	d8 01       	movw	r26, r16
     a00:	ed 91       	ld	r30, X+
     a02:	fc 91       	ld	r31, X
     a04:	01 90       	ld	r0, Z+
     a06:	f0 81       	ld	r31, Z
     a08:	e0 2d       	mov	r30, r0
     a0a:	c8 01       	movw	r24, r16
     a0c:	6a e0       	ldi	r22, 0x0A	; 10
     a0e:	09 95       	icall
     a10:	9c 01       	movw	r18, r24
     a12:	2e 0d       	add	r18, r14
     a14:	3f 1d       	adc	r19, r15
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <_ZN5Print7printlnEPK19__FlashStringHelper>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
     a22:	ef 92       	push	r14
     a24:	ff 92       	push	r15
     a26:	0f 93       	push	r16
     a28:	1f 93       	push	r17
     a2a:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
     a2c:	0e 94 c6 04 	call	0x98c	; 0x98c <_ZN5Print5printEPK19__FlashStringHelper>
     a30:	8c 01       	movw	r16, r24
  n += println();
     a32:	c7 01       	movw	r24, r14
     a34:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_ZN5Print7printlnEv>
     a38:	9c 01       	movw	r18, r24
     a3a:	20 0f       	add	r18, r16
     a3c:	31 1f       	adc	r19, r17
  return n;
}
     a3e:	c9 01       	movw	r24, r18
     a40:	1f 91       	pop	r17
     a42:	0f 91       	pop	r16
     a44:	ff 90       	pop	r15
     a46:	ef 90       	pop	r14
     a48:	08 95       	ret

00000a4a <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
     a50:	61 15       	cp	r22, r1
     a52:	71 05       	cpc	r23, r1
     a54:	19 f4       	brne	.+6      	; 0xa5c <_ZN5Print5writeEPKc+0x12>
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	0f c0       	rjmp	.+30     	; 0xa7a <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
     a5c:	db 01       	movw	r26, r22
     a5e:	0d 90       	ld	r0, X+
     a60:	00 20       	and	r0, r0
     a62:	e9 f7       	brne	.-6      	; 0xa5e <_ZN5Print5writeEPKc+0x14>
     a64:	11 97       	sbiw	r26, 0x01	; 1
     a66:	a6 1b       	sub	r26, r22
     a68:	b7 0b       	sbc	r27, r23
     a6a:	e8 81       	ld	r30, Y
     a6c:	f9 81       	ldd	r31, Y+1	; 0x01
     a6e:	02 80       	ldd	r0, Z+2	; 0x02
     a70:	f3 81       	ldd	r31, Z+3	; 0x03
     a72:	e0 2d       	mov	r30, r0
     a74:	ad 01       	movw	r20, r26
     a76:	09 95       	icall
     a78:	9c 01       	movw	r18, r24
    }
     a7a:	c9 01       	movw	r24, r18
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	08 95       	ret

00000a82 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     a82:	4f 92       	push	r4
     a84:	5f 92       	push	r5
     a86:	7f 92       	push	r7
     a88:	8f 92       	push	r8
     a8a:	9f 92       	push	r9
     a8c:	af 92       	push	r10
     a8e:	bf 92       	push	r11
     a90:	cf 92       	push	r12
     a92:	df 92       	push	r13
     a94:	ef 92       	push	r14
     a96:	ff 92       	push	r15
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	df 93       	push	r29
     a9e:	cf 93       	push	r28
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
     aa4:	a1 97       	sbiw	r28, 0x21	; 33
     aa6:	0f b6       	in	r0, 0x3f	; 63
     aa8:	f8 94       	cli
     aaa:	de bf       	out	0x3e, r29	; 62
     aac:	0f be       	out	0x3f, r0	; 63
     aae:	cd bf       	out	0x3d, r28	; 61
     ab0:	2c 01       	movw	r4, r24
     ab2:	74 2e       	mov	r7, r20
     ab4:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     ab6:	22 30       	cpi	r18, 0x02	; 2
     ab8:	08 f4       	brcc	.+2      	; 0xabc <_ZN5Print11printNumberEmh+0x3a>
     aba:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     abc:	19 a2       	std	Y+33, r1	; 0x21
     abe:	31 e2       	ldi	r19, 0x21	; 33
     ac0:	c3 2e       	mov	r12, r19
     ac2:	d1 2c       	mov	r13, r1
     ac4:	cc 0e       	add	r12, r28
     ac6:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
     ac8:	82 2e       	mov	r8, r18
     aca:	99 24       	eor	r9, r9
     acc:	aa 24       	eor	r10, r10
     ace:	bb 24       	eor	r11, r11
     ad0:	67 2d       	mov	r22, r7
     ad2:	75 2f       	mov	r23, r21
     ad4:	a5 01       	movw	r20, r10
     ad6:	94 01       	movw	r18, r8
     ad8:	0e 94 4c 09 	call	0x1298	; 0x1298 <__udivmodsi4>
     adc:	79 01       	movw	r14, r18
     ade:	8a 01       	movw	r16, r20
    char c = m - base * n;
     ae0:	c8 01       	movw	r24, r16
     ae2:	b7 01       	movw	r22, r14
     ae4:	a5 01       	movw	r20, r10
     ae6:	94 01       	movw	r18, r8
     ae8:	0e 94 2d 09 	call	0x125a	; 0x125a <__mulsi3>
     aec:	47 2d       	mov	r20, r7
     aee:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     af0:	08 94       	sec
     af2:	c1 08       	sbc	r12, r1
     af4:	d1 08       	sbc	r13, r1
     af6:	4a 30       	cpi	r20, 0x0A	; 10
     af8:	14 f4       	brge	.+4      	; 0xafe <_ZN5Print11printNumberEmh+0x7c>
     afa:	40 5d       	subi	r20, 0xD0	; 208
     afc:	01 c0       	rjmp	.+2      	; 0xb00 <_ZN5Print11printNumberEmh+0x7e>
     afe:	49 5c       	subi	r20, 0xC9	; 201
     b00:	f6 01       	movw	r30, r12
     b02:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     b04:	e1 14       	cp	r14, r1
     b06:	f1 04       	cpc	r15, r1
     b08:	01 05       	cpc	r16, r1
     b0a:	11 05       	cpc	r17, r1
     b0c:	21 f0       	breq	.+8      	; 0xb16 <_ZN5Print11printNumberEmh+0x94>
     b0e:	7e 2c       	mov	r7, r14
     b10:	5f 2d       	mov	r21, r15
     b12:	c8 01       	movw	r24, r16
     b14:	dd cf       	rjmp	.-70     	; 0xad0 <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
     b16:	c2 01       	movw	r24, r4
     b18:	b6 01       	movw	r22, r12
     b1a:	0e 94 25 05 	call	0xa4a	; 0xa4a <_ZN5Print5writeEPKc>
}
     b1e:	a1 96       	adiw	r28, 0x21	; 33
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	f8 94       	cli
     b24:	de bf       	out	0x3e, r29	; 62
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	cd bf       	out	0x3d, r28	; 61
     b2a:	cf 91       	pop	r28
     b2c:	df 91       	pop	r29
     b2e:	1f 91       	pop	r17
     b30:	0f 91       	pop	r16
     b32:	ff 90       	pop	r15
     b34:	ef 90       	pop	r14
     b36:	df 90       	pop	r13
     b38:	cf 90       	pop	r12
     b3a:	bf 90       	pop	r11
     b3c:	af 90       	pop	r10
     b3e:	9f 90       	pop	r9
     b40:	8f 90       	pop	r8
     b42:	7f 90       	pop	r7
     b44:	5f 90       	pop	r5
     b46:	4f 90       	pop	r4
     b48:	08 95       	ret

00000b4a <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
     b4a:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
     b4c:	21 15       	cp	r18, r1
     b4e:	31 05       	cpc	r19, r1
     b50:	41 f4       	brne	.+16     	; 0xb62 <_ZN5Print5printEmi+0x18>
     b52:	ed 91       	ld	r30, X+
     b54:	fc 91       	ld	r31, X
     b56:	01 90       	ld	r0, Z+
     b58:	f0 81       	ld	r31, Z
     b5a:	e0 2d       	mov	r30, r0
     b5c:	64 2f       	mov	r22, r20
     b5e:	09 95       	icall
     b60:	08 95       	ret
  else return printNumber(n, base);
     b62:	0e 94 41 05 	call	0xa82	; 0xa82 <_ZN5Print11printNumberEmh>
}
     b66:	08 95       	ret

00000b68 <_ZN5Print5printEji>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
     b68:	ef 92       	push	r14
     b6a:	ff 92       	push	r15
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	9a 01       	movw	r18, r20
{
  return print((unsigned long) n, base);
     b72:	7b 01       	movw	r14, r22
     b74:	00 e0       	ldi	r16, 0x00	; 0
     b76:	10 e0       	ldi	r17, 0x00	; 0
     b78:	b8 01       	movw	r22, r16
     b7a:	a7 01       	movw	r20, r14
     b7c:	0e 94 a5 05 	call	0xb4a	; 0xb4a <_ZN5Print5printEmi>
}
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	ff 90       	pop	r15
     b86:	ef 90       	pop	r14
     b88:	08 95       	ret

00000b8a <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
     b8a:	0e 94 25 05 	call	0xa4a	; 0xa4a <_ZN5Print5writeEPKc>
}
     b8e:	08 95       	ret

00000b90 <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
     b90:	ef 92       	push	r14
     b92:	ff 92       	push	r15
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
     b98:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
     b9a:	0e 94 25 05 	call	0xa4a	; 0xa4a <_ZN5Print5writeEPKc>
     b9e:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
     ba0:	c7 01       	movw	r24, r14
     ba2:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_ZN5Print7printlnEv>
     ba6:	08 0f       	add	r16, r24
     ba8:	19 1f       	adc	r17, r25
  return n;
}
     baa:	c8 01       	movw	r24, r16
     bac:	1f 91       	pop	r17
     bae:	0f 91       	pop	r16
     bb0:	ff 90       	pop	r15
     bb2:	ef 90       	pop	r14
     bb4:	08 95       	ret

00000bb6 <_ZN6String12changeBufferEj>:
		return 1;
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
     bb6:	0f 93       	push	r16
     bb8:	1f 93       	push	r17
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	ec 01       	movw	r28, r24
     bc0:	8b 01       	movw	r16, r22
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     bc2:	6f 5f       	subi	r22, 0xFF	; 255
     bc4:	7f 4f       	sbci	r23, 0xFF	; 255
     bc6:	88 81       	ld	r24, Y
     bc8:	99 81       	ldd	r25, Y+1	; 0x01
     bca:	0e 94 c9 07 	call	0xf92	; 0xf92 <realloc>
	if (newbuffer) {
     bce:	00 97       	sbiw	r24, 0x00	; 0
     bd0:	11 f4       	brne	.+4      	; 0xbd6 <_ZN6String12changeBufferEj+0x20>
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	05 c0       	rjmp	.+10     	; 0xbe0 <_ZN6String12changeBufferEj+0x2a>
		buffer = newbuffer;
     bd6:	99 83       	std	Y+1, r25	; 0x01
     bd8:	88 83       	st	Y, r24
		capacity = maxStrLen;
     bda:	1b 83       	std	Y+3, r17	; 0x03
     bdc:	0a 83       	std	Y+2, r16	; 0x02
     bde:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	08 95       	ret

00000bea <_ZN6String7reserveEj>:
	if (buffer) free(buffer);
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	ec 01       	movw	r28, r24
{
	if (buffer && capacity >= size) return 1;
     bf0:	88 81       	ld	r24, Y
     bf2:	99 81       	ldd	r25, Y+1	; 0x01
     bf4:	89 2b       	or	r24, r25
     bf6:	29 f0       	breq	.+10     	; 0xc02 <_ZN6String7reserveEj+0x18>
     bf8:	8a 81       	ldd	r24, Y+2	; 0x02
     bfa:	9b 81       	ldd	r25, Y+3	; 0x03
     bfc:	86 17       	cp	r24, r22
     bfe:	97 07       	cpc	r25, r23
     c00:	60 f4       	brcc	.+24     	; 0xc1a <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
     c02:	ce 01       	movw	r24, r28
     c04:	0e 94 db 05 	call	0xbb6	; 0xbb6 <_ZN6String12changeBufferEj>
     c08:	88 23       	and	r24, r24
     c0a:	41 f0       	breq	.+16     	; 0xc1c <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
     c0c:	8c 81       	ldd	r24, Y+4	; 0x04
     c0e:	9d 81       	ldd	r25, Y+5	; 0x05
     c10:	89 2b       	or	r24, r25
     c12:	19 f4       	brne	.+6      	; 0xc1a <_ZN6String7reserveEj+0x30>
     c14:	e8 81       	ld	r30, Y
     c16:	f9 81       	ldd	r31, Y+1	; 0x01
     c18:	10 82       	st	Z, r1
     c1a:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	08 95       	ret

00000c22 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
	flags = 0;
}

void String::invalidate(void)
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	ec 01       	movw	r28, r24
{
	if (buffer) free(buffer);
     c28:	88 81       	ld	r24, Y
     c2a:	99 81       	ldd	r25, Y+1	; 0x01
     c2c:	00 97       	sbiw	r24, 0x00	; 0
     c2e:	11 f0       	breq	.+4      	; 0xc34 <_ZN6String10invalidateEv+0x12>
     c30:	0e 94 31 07 	call	0xe62	; 0xe62 <free>
	buffer = NULL;
     c34:	19 82       	std	Y+1, r1	; 0x01
     c36:	18 82       	st	Y, r1
	capacity = len = 0;
     c38:	1d 82       	std	Y+5, r1	; 0x05
     c3a:	1c 82       	std	Y+4, r1	; 0x04
     c3c:	1b 82       	std	Y+3, r1	; 0x03
     c3e:	1a 82       	std	Y+2, r1	; 0x02
}
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	08 95       	ret

00000c46 <_ZN6String4copyEPKcj>:

/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
     c46:	ef 92       	push	r14
     c48:	ff 92       	push	r15
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	ec 01       	movw	r28, r24
     c54:	7b 01       	movw	r14, r22
     c56:	8a 01       	movw	r16, r20
{
	if (!reserve(length)) {
     c58:	ba 01       	movw	r22, r20
     c5a:	0e 94 f5 05 	call	0xbea	; 0xbea <_ZN6String7reserveEj>
     c5e:	88 23       	and	r24, r24
     c60:	21 f4       	brne	.+8      	; 0xc6a <_ZN6String4copyEPKcj+0x24>
		invalidate();
     c62:	ce 01       	movw	r24, r28
     c64:	0e 94 11 06 	call	0xc22	; 0xc22 <_ZN6String10invalidateEv>
     c68:	07 c0       	rjmp	.+14     	; 0xc78 <_ZN6String4copyEPKcj+0x32>
		return *this;
	}
	len = length;
     c6a:	1d 83       	std	Y+5, r17	; 0x05
     c6c:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
     c6e:	88 81       	ld	r24, Y
     c70:	99 81       	ldd	r25, Y+1	; 0x01
     c72:	b7 01       	movw	r22, r14
     c74:	0e 94 df 00 	call	0x1be	; 0x1be <strcpy>
	return *this;
}
     c78:	ce 01       	movw	r24, r28
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	1f 91       	pop	r17
     c80:	0f 91       	pop	r16
     c82:	ff 90       	pop	r15
     c84:	ef 90       	pop	r14
     c86:	08 95       	ret

00000c88 <_ZN6StringaSEPKc>:
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
     c88:	0f 93       	push	r16
     c8a:	1f 93       	push	r17
     c8c:	18 2f       	mov	r17, r24
     c8e:	09 2f       	mov	r16, r25
{
	if (cstr) copy(cstr, strlen(cstr));
     c90:	61 15       	cp	r22, r1
     c92:	71 05       	cpc	r23, r1
     c94:	59 f0       	breq	.+22     	; 0xcac <_ZN6StringaSEPKc+0x24>
     c96:	db 01       	movw	r26, r22
     c98:	0d 90       	ld	r0, X+
     c9a:	00 20       	and	r0, r0
     c9c:	e9 f7       	brne	.-6      	; 0xc98 <_ZN6StringaSEPKc+0x10>
     c9e:	11 97       	sbiw	r26, 0x01	; 1
     ca0:	a6 1b       	sub	r26, r22
     ca2:	b7 0b       	sbc	r27, r23
     ca4:	ad 01       	movw	r20, r26
     ca6:	0e 94 23 06 	call	0xc46	; 0xc46 <_ZN6String4copyEPKcj>
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <_ZN6StringaSEPKc+0x28>
	else invalidate();
     cac:	0e 94 11 06 	call	0xc22	; 0xc22 <_ZN6String10invalidateEv>
	
	return *this;
}
     cb0:	81 2f       	mov	r24, r17
     cb2:	90 2f       	mov	r25, r16
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	08 95       	ret

00000cba <_ZN6StringC1Ejh>:
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
     cba:	ef 92       	push	r14
     cbc:	ff 92       	push	r15
     cbe:	0f 93       	push	r16
     cc0:	1f 93       	push	r17
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	61 97       	sbiw	r28, 0x11	; 17
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	f8 94       	cli
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	cd bf       	out	0x3d, r28	; 61
     cd6:	8c 01       	movw	r16, r24
     cd8:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
     cda:	f8 01       	movw	r30, r16
     cdc:	11 82       	std	Z+1, r1	; 0x01
     cde:	10 82       	st	Z, r1
	capacity = 0;
     ce0:	13 82       	std	Z+3, r1	; 0x03
     ce2:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
     ce4:	15 82       	std	Z+5, r1	; 0x05
     ce6:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
     ce8:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned int value, unsigned char base)
{
	init();
	char buf[17];
	utoa(value, buf, base);
     cea:	7e 01       	movw	r14, r28
     cec:	08 94       	sec
     cee:	e1 1c       	adc	r14, r1
     cf0:	f1 1c       	adc	r15, r1
     cf2:	b7 01       	movw	r22, r14
     cf4:	50 e0       	ldi	r21, 0x00	; 0
     cf6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <utoa>
	*this = buf;
     cfa:	c8 01       	movw	r24, r16
     cfc:	b7 01       	movw	r22, r14
     cfe:	0e 94 44 06 	call	0xc88	; 0xc88 <_ZN6StringaSEPKc>
}
     d02:	61 96       	adiw	r28, 0x11	; 17
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	f8 94       	cli
     d08:	de bf       	out	0x3e, r29	; 62
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	cd bf       	out	0x3d, r28	; 61
     d0e:	cf 91       	pop	r28
     d10:	df 91       	pop	r29
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	ff 90       	pop	r15
     d18:	ef 90       	pop	r14
     d1a:	08 95       	ret

00000d1c <_ZN6StringD1Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
     d1c:	fc 01       	movw	r30, r24
{
	free(buffer);
     d1e:	80 81       	ld	r24, Z
     d20:	91 81       	ldd	r25, Z+1	; 0x01
     d22:	0e 94 31 07 	call	0xe62	; 0xe62 <free>
}
     d26:	08 95       	ret

00000d28 <malloc>:
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	if (len < sizeof(struct __freelist) - sizeof(size_t))
     d28:	0f 93       	push	r16
     d2a:	1f 93       	push	r17
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	bc 01       	movw	r22, r24
     d32:	82 30       	cpi	r24, 0x02	; 2
     d34:	91 05       	cpc	r25, r1
     d36:	10 f4       	brcc	.+4      	; 0xd3c <malloc+0x14>
     d38:	62 e0       	ldi	r22, 0x02	; 2
     d3a:	70 e0       	ldi	r23, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
     d3c:	e0 91 ac 05 	lds	r30, 0x05AC
     d40:	f0 91 ad 05 	lds	r31, 0x05AD
     d44:	a0 e0       	ldi	r26, 0x00	; 0
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	40 e0       	ldi	r20, 0x00	; 0
     d4a:	50 e0       	ldi	r21, 0x00	; 0
     d4c:	24 c0       	rjmp	.+72     	; 0xd96 <malloc+0x6e>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
     d4e:	80 81       	ld	r24, Z
     d50:	91 81       	ldd	r25, Z+1	; 0x01
     d52:	86 17       	cp	r24, r22
     d54:	97 07       	cpc	r25, r23
     d56:	d0 f0       	brcs	.+52     	; 0xd8c <malloc+0x64>
			continue;
		if (fp1->sz == len) {
     d58:	86 17       	cp	r24, r22
     d5a:	97 07       	cpc	r25, r23
     d5c:	71 f4       	brne	.+28     	; 0xd7a <malloc+0x52>
     d5e:	82 81       	ldd	r24, Z+2	; 0x02
     d60:	93 81       	ldd	r25, Z+3	; 0x03
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
     d62:	10 97       	sbiw	r26, 0x00	; 0
     d64:	29 f0       	breq	.+10     	; 0xd70 <malloc+0x48>
				fp2->nx = fp1->nx;
     d66:	13 96       	adiw	r26, 0x03	; 3
     d68:	9c 93       	st	X, r25
     d6a:	8e 93       	st	-X, r24
     d6c:	12 97       	sbiw	r26, 0x02	; 2
     d6e:	2c c0       	rjmp	.+88     	; 0xdc8 <malloc+0xa0>
			else
				__flp = fp1->nx;
     d70:	90 93 ad 05 	sts	0x05AD, r25
     d74:	80 93 ac 05 	sts	0x05AC, r24
     d78:	27 c0       	rjmp	.+78     	; 0xdc8 <malloc+0xa0>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
     d7a:	41 15       	cp	r20, r1
     d7c:	51 05       	cpc	r21, r1
     d7e:	19 f0       	breq	.+6      	; 0xd86 <malloc+0x5e>
     d80:	84 17       	cp	r24, r20
     d82:	95 07       	cpc	r25, r21
     d84:	18 f4       	brcc	.+6      	; 0xd8c <malloc+0x64>
     d86:	ef 01       	movw	r28, r30
     d88:	8d 01       	movw	r16, r26
     d8a:	ac 01       	movw	r20, r24
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
     d8c:	df 01       	movw	r26, r30
     d8e:	82 81       	ldd	r24, Z+2	; 0x02
     d90:	93 81       	ldd	r25, Z+3	; 0x03
     d92:	9c 01       	movw	r18, r24
     d94:	f9 01       	movw	r30, r18
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
     d96:	30 97       	sbiw	r30, 0x00	; 0
     d98:	d1 f6       	brne	.-76     	; 0xd4e <malloc+0x26>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
     d9a:	41 15       	cp	r20, r1
     d9c:	51 05       	cpc	r21, r1
     d9e:	f9 f0       	breq	.+62     	; 0xdde <malloc+0xb6>
		if (s - len < sizeof(struct __freelist)) {
     da0:	ca 01       	movw	r24, r20
     da2:	86 1b       	sub	r24, r22
     da4:	97 0b       	sbc	r25, r23
     da6:	84 30       	cpi	r24, 0x04	; 4
     da8:	91 05       	cpc	r25, r1
     daa:	80 f4       	brcc	.+32     	; 0xdcc <malloc+0xa4>
     dac:	8a 81       	ldd	r24, Y+2	; 0x02
     dae:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
     db0:	01 15       	cp	r16, r1
     db2:	11 05       	cpc	r17, r1
     db4:	21 f0       	breq	.+8      	; 0xdbe <malloc+0x96>
				sfp2->nx = sfp1->nx;
     db6:	f8 01       	movw	r30, r16
     db8:	93 83       	std	Z+3, r25	; 0x03
     dba:	82 83       	std	Z+2, r24	; 0x02
     dbc:	04 c0       	rjmp	.+8      	; 0xdc6 <malloc+0x9e>
			else
				__flp = sfp1->nx;
     dbe:	90 93 ad 05 	sts	0x05AD, r25
     dc2:	80 93 ac 05 	sts	0x05AC, r24
			return &(sfp1->nx);
     dc6:	fe 01       	movw	r30, r28
     dc8:	32 96       	adiw	r30, 0x02	; 2
     dca:	45 c0       	rjmp	.+138    	; 0xe56 <malloc+0x12e>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
     dcc:	fe 01       	movw	r30, r28
     dce:	e8 0f       	add	r30, r24
     dd0:	f9 1f       	adc	r31, r25
     dd2:	61 93       	st	Z+, r22
     dd4:	71 93       	st	Z+, r23
		sfp1->sz = s - sizeof(size_t);
     dd6:	02 97       	sbiw	r24, 0x02	; 2
     dd8:	99 83       	std	Y+1, r25	; 0x01
     dda:	88 83       	st	Y, r24
     ddc:	3c c0       	rjmp	.+120    	; 0xe56 <malloc+0x12e>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
     dde:	80 91 aa 05 	lds	r24, 0x05AA
     de2:	90 91 ab 05 	lds	r25, 0x05AB
     de6:	89 2b       	or	r24, r25
     de8:	41 f4       	brne	.+16     	; 0xdfa <malloc+0xd2>
		__brkval = __malloc_heap_start;
     dea:	80 91 e0 04 	lds	r24, 0x04E0
     dee:	90 91 e1 04 	lds	r25, 0x04E1
     df2:	90 93 ab 05 	sts	0x05AB, r25
     df6:	80 93 aa 05 	sts	0x05AA, r24
	cp = __malloc_heap_end;
     dfa:	40 91 e2 04 	lds	r20, 0x04E2
     dfe:	50 91 e3 04 	lds	r21, 0x04E3
	if (cp == 0)
     e02:	41 15       	cp	r20, r1
     e04:	51 05       	cpc	r21, r1
     e06:	41 f4       	brne	.+16     	; 0xe18 <malloc+0xf0>
		cp = STACK_POINTER() - __malloc_margin;
     e08:	4d b7       	in	r20, 0x3d	; 61
     e0a:	5e b7       	in	r21, 0x3e	; 62
     e0c:	80 91 de 04 	lds	r24, 0x04DE
     e10:	90 91 df 04 	lds	r25, 0x04DF
     e14:	48 1b       	sub	r20, r24
     e16:	59 0b       	sbc	r21, r25
	if (cp <= __brkval)
     e18:	20 91 aa 05 	lds	r18, 0x05AA
     e1c:	30 91 ab 05 	lds	r19, 0x05AB
     e20:	24 17       	cp	r18, r20
     e22:	35 07       	cpc	r19, r21
     e24:	b0 f4       	brcc	.+44     	; 0xe52 <malloc+0x12a>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
     e26:	ca 01       	movw	r24, r20
     e28:	82 1b       	sub	r24, r18
     e2a:	93 0b       	sbc	r25, r19
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
     e2c:	86 17       	cp	r24, r22
     e2e:	97 07       	cpc	r25, r23
     e30:	80 f0       	brcs	.+32     	; 0xe52 <malloc+0x12a>
     e32:	ab 01       	movw	r20, r22
     e34:	4e 5f       	subi	r20, 0xFE	; 254
     e36:	5f 4f       	sbci	r21, 0xFF	; 255
     e38:	84 17       	cp	r24, r20
     e3a:	95 07       	cpc	r25, r21
     e3c:	50 f0       	brcs	.+20     	; 0xe52 <malloc+0x12a>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
     e3e:	42 0f       	add	r20, r18
     e40:	53 1f       	adc	r21, r19
     e42:	50 93 ab 05 	sts	0x05AB, r21
     e46:	40 93 aa 05 	sts	0x05AA, r20
		fp1->sz = len;
     e4a:	f9 01       	movw	r30, r18
     e4c:	61 93       	st	Z+, r22
     e4e:	71 93       	st	Z+, r23
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <malloc+0x12e>
		return &(fp1->nx);
     e52:	e0 e0       	ldi	r30, 0x00	; 0
     e54:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
     e56:	cf 01       	movw	r24, r30
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	1f 91       	pop	r17
     e5e:	0f 91       	pop	r16
     e60:	08 95       	ret

00000e62 <free>:
{
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	9c 01       	movw	r18, r24
     e68:	00 97       	sbiw	r24, 0x00	; 0
     e6a:	09 f4       	brne	.+2      	; 0xe6e <free+0xc>
     e6c:	8f c0       	rjmp	.+286    	; 0xf8c <free+0x12a>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
     e6e:	ec 01       	movw	r28, r24
     e70:	22 97       	sbiw	r28, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
     e72:	1b 82       	std	Y+3, r1	; 0x03
     e74:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
     e76:	60 91 ac 05 	lds	r22, 0x05AC
     e7a:	70 91 ad 05 	lds	r23, 0x05AD
     e7e:	61 15       	cp	r22, r1
     e80:	71 05       	cpc	r23, r1
     e82:	81 f4       	brne	.+32     	; 0xea4 <free+0x42>
		if ((char *)p + fpnew->sz == __brkval)
     e84:	88 81       	ld	r24, Y
     e86:	99 81       	ldd	r25, Y+1	; 0x01
     e88:	82 0f       	add	r24, r18
     e8a:	93 1f       	adc	r25, r19
     e8c:	20 91 aa 05 	lds	r18, 0x05AA
     e90:	30 91 ab 05 	lds	r19, 0x05AB
     e94:	28 17       	cp	r18, r24
     e96:	39 07       	cpc	r19, r25
     e98:	39 f5       	brne	.+78     	; 0xee8 <free+0x86>
			__brkval = cpnew;
     e9a:	d0 93 ab 05 	sts	0x05AB, r29
     e9e:	c0 93 aa 05 	sts	0x05AA, r28
     ea2:	74 c0       	rjmp	.+232    	; 0xf8c <free+0x12a>
		else
			__flp = fpnew;
     ea4:	db 01       	movw	r26, r22
     ea6:	40 e0       	ldi	r20, 0x00	; 0
     ea8:	50 e0       	ldi	r21, 0x00	; 0
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
     eaa:	ac 17       	cp	r26, r28
     eac:	bd 07       	cpc	r27, r29
     eae:	08 f1       	brcs	.+66     	; 0xef2 <free+0x90>
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
     eb0:	bb 83       	std	Y+3, r27	; 0x03
     eb2:	aa 83       	std	Y+2, r26	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
     eb4:	fe 01       	movw	r30, r28
     eb6:	21 91       	ld	r18, Z+
     eb8:	31 91       	ld	r19, Z+
     eba:	e2 0f       	add	r30, r18
     ebc:	f3 1f       	adc	r31, r19
     ebe:	ae 17       	cp	r26, r30
     ec0:	bf 07       	cpc	r27, r31
     ec2:	79 f4       	brne	.+30     	; 0xee2 <free+0x80>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
     ec4:	8d 91       	ld	r24, X+
     ec6:	9c 91       	ld	r25, X
     ec8:	11 97       	sbiw	r26, 0x01	; 1
     eca:	28 0f       	add	r18, r24
     ecc:	39 1f       	adc	r19, r25
     ece:	2e 5f       	subi	r18, 0xFE	; 254
     ed0:	3f 4f       	sbci	r19, 0xFF	; 255
     ed2:	39 83       	std	Y+1, r19	; 0x01
     ed4:	28 83       	st	Y, r18
			fpnew->nx = fp1->nx;
     ed6:	12 96       	adiw	r26, 0x02	; 2
     ed8:	8d 91       	ld	r24, X+
     eda:	9c 91       	ld	r25, X
     edc:	13 97       	sbiw	r26, 0x03	; 3
     ede:	9b 83       	std	Y+3, r25	; 0x03
     ee0:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (fp2 == 0) {
     ee2:	41 15       	cp	r20, r1
     ee4:	51 05       	cpc	r21, r1
     ee6:	71 f4       	brne	.+28     	; 0xf04 <free+0xa2>
			/* new head of freelist */
			__flp = fpnew;
     ee8:	d0 93 ad 05 	sts	0x05AD, r29
     eec:	c0 93 ac 05 	sts	0x05AC, r28
     ef0:	4d c0       	rjmp	.+154    	; 0xf8c <free+0x12a>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
     ef2:	12 96       	adiw	r26, 0x02	; 2
     ef4:	8d 91       	ld	r24, X+
     ef6:	9c 91       	ld	r25, X
     ef8:	13 97       	sbiw	r26, 0x03	; 3
     efa:	ad 01       	movw	r20, r26
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
     efc:	00 97       	sbiw	r24, 0x00	; 0
     efe:	11 f0       	breq	.+4      	; 0xf04 <free+0xa2>
     f00:	dc 01       	movw	r26, r24
     f02:	d3 cf       	rjmp	.-90     	; 0xeaa <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
     f04:	da 01       	movw	r26, r20
     f06:	13 96       	adiw	r26, 0x03	; 3
     f08:	dc 93       	st	X, r29
     f0a:	ce 93       	st	-X, r28
     f0c:	12 97       	sbiw	r26, 0x02	; 2
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
     f0e:	fa 01       	movw	r30, r20
     f10:	21 91       	ld	r18, Z+
     f12:	31 91       	ld	r19, Z+
     f14:	e2 0f       	add	r30, r18
     f16:	f3 1f       	adc	r31, r19
     f18:	ce 17       	cp	r28, r30
     f1a:	df 07       	cpc	r29, r31
     f1c:	69 f4       	brne	.+26     	; 0xf38 <free+0xd6>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
     f1e:	88 81       	ld	r24, Y
     f20:	99 81       	ldd	r25, Y+1	; 0x01
     f22:	28 0f       	add	r18, r24
     f24:	39 1f       	adc	r19, r25
     f26:	2e 5f       	subi	r18, 0xFE	; 254
     f28:	3f 4f       	sbci	r19, 0xFF	; 255
     f2a:	fa 01       	movw	r30, r20
     f2c:	31 83       	std	Z+1, r19	; 0x01
     f2e:	20 83       	st	Z, r18
		fp2->nx = fpnew->nx;
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	9b 81       	ldd	r25, Y+3	; 0x03
     f34:	93 83       	std	Z+3, r25	; 0x03
     f36:	82 83       	std	Z+2, r24	; 0x02
     f38:	e0 e0       	ldi	r30, 0x00	; 0
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1->nx != 0;
     f3c:	db 01       	movw	r26, r22
     f3e:	12 96       	adiw	r26, 0x02	; 2
     f40:	8d 91       	ld	r24, X+
     f42:	9c 91       	ld	r25, X
     f44:	13 97       	sbiw	r26, 0x03	; 3
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	19 f0       	breq	.+6      	; 0xf50 <free+0xee>
     f4a:	bc 01       	movw	r22, r24
     f4c:	fd 01       	movw	r30, r26
     f4e:	f6 cf       	rjmp	.-20     	; 0xf3c <free+0xda>
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
     f50:	ab 01       	movw	r20, r22
     f52:	4e 5f       	subi	r20, 0xFE	; 254
     f54:	5f 4f       	sbci	r21, 0xFF	; 255
	if (cp2 + fp1->sz == __brkval) {
     f56:	db 01       	movw	r26, r22
     f58:	8d 91       	ld	r24, X+
     f5a:	9c 91       	ld	r25, X
     f5c:	84 0f       	add	r24, r20
     f5e:	95 1f       	adc	r25, r21
     f60:	20 91 aa 05 	lds	r18, 0x05AA
     f64:	30 91 ab 05 	lds	r19, 0x05AB
     f68:	28 17       	cp	r18, r24
     f6a:	39 07       	cpc	r19, r25
     f6c:	79 f4       	brne	.+30     	; 0xf8c <free+0x12a>
		if (fp2 == NULL)
     f6e:	30 97       	sbiw	r30, 0x00	; 0
     f70:	29 f4       	brne	.+10     	; 0xf7c <free+0x11a>
			/* Freelist is empty now. */
			__flp = NULL;
     f72:	10 92 ad 05 	sts	0x05AD, r1
     f76:	10 92 ac 05 	sts	0x05AC, r1
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <free+0x11e>
		else
			fp2->nx = NULL;
     f7c:	13 82       	std	Z+3, r1	; 0x03
     f7e:	12 82       	std	Z+2, r1	; 0x02
		__brkval = cp2 - sizeof(size_t);
     f80:	42 50       	subi	r20, 0x02	; 2
     f82:	50 40       	sbci	r21, 0x00	; 0
     f84:	50 93 ab 05 	sts	0x05AB, r21
     f88:	40 93 aa 05 	sts	0x05AA, r20
	}
}
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	08 95       	ret

00000f92 <realloc>:
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
     f92:	6f 92       	push	r6
     f94:	7f 92       	push	r7
     f96:	8f 92       	push	r8
     f98:	9f 92       	push	r9
     f9a:	af 92       	push	r10
     f9c:	bf 92       	push	r11
     f9e:	cf 92       	push	r12
     fa0:	df 92       	push	r13
     fa2:	ef 92       	push	r14
     fa4:	ff 92       	push	r15
     fa6:	0f 93       	push	r16
     fa8:	1f 93       	push	r17
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	8c 01       	movw	r16, r24
     fb0:	00 97       	sbiw	r24, 0x00	; 0
     fb2:	29 f4       	brne	.+10     	; 0xfbe <realloc+0x2c>
		return malloc(len);
     fb4:	cb 01       	movw	r24, r22
     fb6:	0e 94 94 06 	call	0xd28	; 0xd28 <malloc>
     fba:	8c 01       	movw	r16, r24
     fbc:	bb c0       	rjmp	.+374    	; 0x1134 <realloc+0x1a2>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
     fbe:	8e ef       	ldi	r24, 0xFE	; 254
     fc0:	e8 2e       	mov	r14, r24
     fc2:	8f ef       	ldi	r24, 0xFF	; 255
     fc4:	f8 2e       	mov	r15, r24
     fc6:	e0 0e       	add	r14, r16
     fc8:	f1 1e       	adc	r15, r17
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
     fca:	48 01       	movw	r8, r16
     fcc:	86 0e       	add	r8, r22
     fce:	97 1e       	adc	r9, r23
	if (cp < cp1)
     fd0:	8e 14       	cp	r8, r14
     fd2:	9f 04       	cpc	r9, r15
     fd4:	08 f4       	brcc	.+2      	; 0xfd8 <realloc+0x46>
     fd6:	ac c0       	rjmp	.+344    	; 0x1130 <realloc+0x19e>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
     fd8:	d7 01       	movw	r26, r14
     fda:	4d 91       	ld	r20, X+
     fdc:	5c 91       	ld	r21, X
     fde:	11 97       	sbiw	r26, 0x01	; 1
     fe0:	46 17       	cp	r20, r22
     fe2:	57 07       	cpc	r21, r23
     fe4:	b8 f0       	brcs	.+46     	; 0x1014 <realloc+0x82>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
     fe6:	45 30       	cpi	r20, 0x05	; 5
     fe8:	51 05       	cpc	r21, r1
     fea:	08 f4       	brcc	.+2      	; 0xfee <realloc+0x5c>
     fec:	a3 c0       	rjmp	.+326    	; 0x1134 <realloc+0x1a2>
     fee:	ca 01       	movw	r24, r20
     ff0:	04 97       	sbiw	r24, 0x04	; 4
     ff2:	86 17       	cp	r24, r22
     ff4:	97 07       	cpc	r25, r23
     ff6:	08 f4       	brcc	.+2      	; 0xffa <realloc+0x68>
     ff8:	9d c0       	rjmp	.+314    	; 0x1134 <realloc+0x1a2>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
     ffa:	42 50       	subi	r20, 0x02	; 2
     ffc:	50 40       	sbci	r21, 0x00	; 0
     ffe:	46 1b       	sub	r20, r22
    1000:	57 0b       	sbc	r21, r23
    1002:	f4 01       	movw	r30, r8
    1004:	41 93       	st	Z+, r20
    1006:	51 93       	st	Z+, r21
		fp1->sz = len;
    1008:	6d 93       	st	X+, r22
    100a:	7c 93       	st	X, r23
		free(&(fp2->nx));
    100c:	cf 01       	movw	r24, r30
    100e:	0e 94 31 07 	call	0xe62	; 0xe62 <free>
    1012:	90 c0       	rjmp	.+288    	; 0x1134 <realloc+0x1a2>

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
    1014:	5b 01       	movw	r10, r22
    1016:	a4 1a       	sub	r10, r20
    1018:	b5 0a       	sbc	r11, r21
	cp = (char *)ptr + fp1->sz;
    101a:	38 01       	movw	r6, r16
    101c:	64 0e       	add	r6, r20
    101e:	75 1e       	adc	r7, r21
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
    1020:	a0 91 ac 05 	lds	r26, 0x05AC
    1024:	b0 91 ad 05 	lds	r27, 0x05AD
    1028:	cc 24       	eor	r12, r12
    102a:	dd 24       	eor	r13, r13
    102c:	e0 e0       	ldi	r30, 0x00	; 0
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	47 c0       	rjmp	.+142    	; 0x10c0 <realloc+0x12e>
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
    1032:	a6 15       	cp	r26, r6
    1034:	b7 05       	cpc	r27, r7
    1036:	a9 f5       	brne	.+106    	; 0x10a2 <realloc+0x110>
    1038:	cd 91       	ld	r28, X+
    103a:	dc 91       	ld	r29, X
    103c:	11 97       	sbiw	r26, 0x01	; 1
    103e:	ce 01       	movw	r24, r28
    1040:	02 96       	adiw	r24, 0x02	; 2
    1042:	8a 15       	cp	r24, r10
    1044:	9b 05       	cpc	r25, r11
    1046:	68 f1       	brcs	.+90     	; 0x10a2 <realloc+0x110>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
    1048:	ce 01       	movw	r24, r28
    104a:	8a 19       	sub	r24, r10
    104c:	9b 09       	sbc	r25, r11
    104e:	02 96       	adiw	r24, 0x02	; 2
    1050:	12 96       	adiw	r26, 0x02	; 2
    1052:	2c 91       	ld	r18, X
    1054:	12 97       	sbiw	r26, 0x02	; 2
    1056:	13 96       	adiw	r26, 0x03	; 3
    1058:	3c 91       	ld	r19, X
    105a:	05 97       	sbiw	r24, 0x05	; 5
    105c:	58 f0       	brcs	.+22     	; 0x1074 <realloc+0xe2>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
    105e:	f4 01       	movw	r30, r8
				fp2->nx = fp3->nx;
    1060:	22 83       	std	Z+2, r18	; 0x02
    1062:	33 83       	std	Z+3, r19	; 0x03
				fp2->sz = fp3->sz - incr;
    1064:	ca 19       	sub	r28, r10
    1066:	db 09       	sbc	r29, r11
    1068:	d1 83       	std	Z+1, r29	; 0x01
    106a:	c0 83       	st	Z, r28
				fp1->sz = len;
    106c:	d7 01       	movw	r26, r14
    106e:	6d 93       	st	X+, r22
    1070:	7c 93       	st	X, r23
    1072:	09 c0       	rjmp	.+18     	; 0x1086 <realloc+0xf4>
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
    1074:	4e 5f       	subi	r20, 0xFE	; 254
    1076:	5f 4f       	sbci	r21, 0xFF	; 255
    1078:	4c 0f       	add	r20, r28
    107a:	5d 1f       	adc	r21, r29
    107c:	f7 01       	movw	r30, r14
    107e:	51 83       	std	Z+1, r21	; 0x01
    1080:	40 83       	st	Z, r20
				fp2 = fp3->nx;
    1082:	c9 01       	movw	r24, r18
    1084:	fc 01       	movw	r30, r24
			}
			if (ofp3)
    1086:	c1 14       	cp	r12, r1
    1088:	d1 04       	cpc	r13, r1
    108a:	31 f0       	breq	.+12     	; 0x1098 <realloc+0x106>
				ofp3->nx = fp2;
    108c:	d6 01       	movw	r26, r12
    108e:	13 96       	adiw	r26, 0x03	; 3
    1090:	fc 93       	st	X, r31
    1092:	ee 93       	st	-X, r30
    1094:	12 97       	sbiw	r26, 0x02	; 2
    1096:	4e c0       	rjmp	.+156    	; 0x1134 <realloc+0x1a2>
			else
				__flp = fp2;
    1098:	f0 93 ad 05 	sts	0x05AD, r31
    109c:	e0 93 ac 05 	sts	0x05AC, r30
    10a0:	49 c0       	rjmp	.+146    	; 0x1134 <realloc+0x1a2>
    10a2:	8d 91       	ld	r24, X+
    10a4:	9c 91       	ld	r25, X
    10a6:	11 97       	sbiw	r26, 0x01	; 1
    10a8:	e8 17       	cp	r30, r24
    10aa:	f9 07       	cpc	r31, r25
    10ac:	08 f4       	brcc	.+2      	; 0x10b0 <realloc+0x11e>
    10ae:	fc 01       	movw	r30, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
    10b0:	6d 01       	movw	r12, r26
    10b2:	12 96       	adiw	r26, 0x02	; 2
    10b4:	8c 91       	ld	r24, X
    10b6:	12 97       	sbiw	r26, 0x02	; 2
    10b8:	13 96       	adiw	r26, 0x03	; 3
    10ba:	9c 91       	ld	r25, X
    10bc:	9c 01       	movw	r18, r24
    10be:	d9 01       	movw	r26, r18
	 */
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
    10c0:	10 97       	sbiw	r26, 0x00	; 0
    10c2:	09 f0       	breq	.+2      	; 0x10c6 <realloc+0x134>
    10c4:	b6 cf       	rjmp	.-148    	; 0x1032 <realloc+0xa0>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
    10c6:	80 91 aa 05 	lds	r24, 0x05AA
    10ca:	90 91 ab 05 	lds	r25, 0x05AB
    10ce:	86 15       	cp	r24, r6
    10d0:	97 05       	cpc	r25, r7
    10d2:	e9 f4       	brne	.+58     	; 0x110e <realloc+0x17c>
    10d4:	e6 17       	cp	r30, r22
    10d6:	f7 07       	cpc	r31, r23
    10d8:	d0 f4       	brcc	.+52     	; 0x110e <realloc+0x17c>
		cp1 = __malloc_heap_end;
    10da:	20 91 e2 04 	lds	r18, 0x04E2
    10de:	30 91 e3 04 	lds	r19, 0x04E3
		cp = (char *)ptr + len;
		if (cp1 == 0)
    10e2:	21 15       	cp	r18, r1
    10e4:	31 05       	cpc	r19, r1
    10e6:	41 f4       	brne	.+16     	; 0x10f8 <realloc+0x166>
			cp1 = STACK_POINTER() - __malloc_margin;
    10e8:	2d b7       	in	r18, 0x3d	; 61
    10ea:	3e b7       	in	r19, 0x3e	; 62
    10ec:	80 91 de 04 	lds	r24, 0x04DE
    10f0:	90 91 df 04 	lds	r25, 0x04DF
    10f4:	28 1b       	sub	r18, r24
    10f6:	39 0b       	sbc	r19, r25
		if (cp < cp1) {
    10f8:	82 16       	cp	r8, r18
    10fa:	93 06       	cpc	r9, r19
    10fc:	c8 f4       	brcc	.+50     	; 0x1130 <realloc+0x19e>
			__brkval = cp;
    10fe:	90 92 ab 05 	sts	0x05AB, r9
    1102:	80 92 aa 05 	sts	0x05AA, r8
			fp1->sz = len;
    1106:	f7 01       	movw	r30, r14
    1108:	71 83       	std	Z+1, r23	; 0x01
    110a:	60 83       	st	Z, r22
    110c:	13 c0       	rjmp	.+38     	; 0x1134 <realloc+0x1a2>

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
    110e:	cb 01       	movw	r24, r22
    1110:	0e 94 94 06 	call	0xd28	; 0xd28 <malloc>
    1114:	ec 01       	movw	r28, r24
    1116:	00 97       	sbiw	r24, 0x00	; 0
    1118:	59 f0       	breq	.+22     	; 0x1130 <realloc+0x19e>
		return 0;
	memcpy(memp, ptr, fp1->sz);
    111a:	d7 01       	movw	r26, r14
    111c:	4d 91       	ld	r20, X+
    111e:	5c 91       	ld	r21, X
    1120:	b8 01       	movw	r22, r16
    1122:	0e 94 d6 00 	call	0x1ac	; 0x1ac <memcpy>
	free(ptr);
    1126:	c8 01       	movw	r24, r16
    1128:	0e 94 31 07 	call	0xe62	; 0xe62 <free>
    112c:	8e 01       	movw	r16, r28
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <realloc+0x1a2>
	return memp;
    1130:	00 e0       	ldi	r16, 0x00	; 0
    1132:	10 e0       	ldi	r17, 0x00	; 0
}
    1134:	c8 01       	movw	r24, r16
    1136:	df 91       	pop	r29
    1138:	cf 91       	pop	r28
    113a:	1f 91       	pop	r17
    113c:	0f 91       	pop	r16
    113e:	ff 90       	pop	r15
    1140:	ef 90       	pop	r14
    1142:	df 90       	pop	r13
    1144:	cf 90       	pop	r12
    1146:	bf 90       	pop	r11
    1148:	af 90       	pop	r10
    114a:	9f 90       	pop	r9
    114c:	8f 90       	pop	r8
    114e:	7f 90       	pop	r7
    1150:	6f 90       	pop	r6
    1152:	08 95       	ret

00001154 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1154:	1f 92       	push	r1
    1156:	0f 92       	push	r0
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	0f 92       	push	r0
    115c:	11 24       	eor	r1, r1
    115e:	2f 93       	push	r18
    1160:	3f 93       	push	r19
    1162:	8f 93       	push	r24
    1164:	9f 93       	push	r25
    1166:	af 93       	push	r26
    1168:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    116a:	80 91 a5 05 	lds	r24, 0x05A5
    116e:	90 91 a6 05 	lds	r25, 0x05A6
    1172:	a0 91 a7 05 	lds	r26, 0x05A7
    1176:	b0 91 a8 05 	lds	r27, 0x05A8
	unsigned char f = timer0_fract;
    117a:	30 91 a9 05 	lds	r19, 0x05A9

	m += MILLIS_INC;
    117e:	01 96       	adiw	r24, 0x01	; 1
    1180:	a1 1d       	adc	r26, r1
    1182:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    1184:	23 2f       	mov	r18, r19
    1186:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    1188:	2d 37       	cpi	r18, 0x7D	; 125
    118a:	20 f0       	brcs	.+8      	; 0x1194 <__vector_16+0x40>
		f -= FRACT_MAX;
    118c:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    118e:	01 96       	adiw	r24, 0x01	; 1
    1190:	a1 1d       	adc	r26, r1
    1192:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1194:	20 93 a9 05 	sts	0x05A9, r18
	timer0_millis = m;
    1198:	80 93 a5 05 	sts	0x05A5, r24
    119c:	90 93 a6 05 	sts	0x05A6, r25
    11a0:	a0 93 a7 05 	sts	0x05A7, r26
    11a4:	b0 93 a8 05 	sts	0x05A8, r27
	timer0_overflow_count++;
    11a8:	80 91 a1 05 	lds	r24, 0x05A1
    11ac:	90 91 a2 05 	lds	r25, 0x05A2
    11b0:	a0 91 a3 05 	lds	r26, 0x05A3
    11b4:	b0 91 a4 05 	lds	r27, 0x05A4
    11b8:	01 96       	adiw	r24, 0x01	; 1
    11ba:	a1 1d       	adc	r26, r1
    11bc:	b1 1d       	adc	r27, r1
    11be:	80 93 a1 05 	sts	0x05A1, r24
    11c2:	90 93 a2 05 	sts	0x05A2, r25
    11c6:	a0 93 a3 05 	sts	0x05A3, r26
    11ca:	b0 93 a4 05 	sts	0x05A4, r27
}
    11ce:	bf 91       	pop	r27
    11d0:	af 91       	pop	r26
    11d2:	9f 91       	pop	r25
    11d4:	8f 91       	pop	r24
    11d6:	3f 91       	pop	r19
    11d8:	2f 91       	pop	r18
    11da:	0f 90       	pop	r0
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	0f 90       	pop	r0
    11e0:	1f 90       	pop	r1
    11e2:	18 95       	reti

000011e4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    11e4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    11e6:	84 b5       	in	r24, 0x24	; 36
    11e8:	82 60       	ori	r24, 0x02	; 2
    11ea:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    11ec:	84 b5       	in	r24, 0x24	; 36
    11ee:	81 60       	ori	r24, 0x01	; 1
    11f0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    11f2:	85 b5       	in	r24, 0x25	; 37
    11f4:	82 60       	ori	r24, 0x02	; 2
    11f6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    11f8:	85 b5       	in	r24, 0x25	; 37
    11fa:	81 60       	ori	r24, 0x01	; 1
    11fc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    11fe:	ee e6       	ldi	r30, 0x6E	; 110
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	81 60       	ori	r24, 0x01	; 1
    1206:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1208:	e1 e8       	ldi	r30, 0x81	; 129
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    120e:	80 81       	ld	r24, Z
    1210:	82 60       	ori	r24, 0x02	; 2
    1212:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1214:	80 81       	ld	r24, Z
    1216:	81 60       	ori	r24, 0x01	; 1
    1218:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    121a:	e0 e8       	ldi	r30, 0x80	; 128
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	81 60       	ori	r24, 0x01	; 1
    1222:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1224:	e1 eb       	ldi	r30, 0xB1	; 177
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	84 60       	ori	r24, 0x04	; 4
    122c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    122e:	e0 eb       	ldi	r30, 0xB0	; 176
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	81 60       	ori	r24, 0x01	; 1
    1236:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    1238:	ea e7       	ldi	r30, 0x7A	; 122
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	84 60       	ori	r24, 0x04	; 4
    1240:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    1242:	80 81       	ld	r24, Z
    1244:	82 60       	ori	r24, 0x02	; 2
    1246:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    1248:	80 81       	ld	r24, Z
    124a:	81 60       	ori	r24, 0x01	; 1
    124c:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    124e:	80 81       	ld	r24, Z
    1250:	80 68       	ori	r24, 0x80	; 128
    1252:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1254:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    1258:	08 95       	ret

0000125a <__mulsi3>:
    125a:	62 9f       	mul	r22, r18
    125c:	d0 01       	movw	r26, r0
    125e:	73 9f       	mul	r23, r19
    1260:	f0 01       	movw	r30, r0
    1262:	82 9f       	mul	r24, r18
    1264:	e0 0d       	add	r30, r0
    1266:	f1 1d       	adc	r31, r1
    1268:	64 9f       	mul	r22, r20
    126a:	e0 0d       	add	r30, r0
    126c:	f1 1d       	adc	r31, r1
    126e:	92 9f       	mul	r25, r18
    1270:	f0 0d       	add	r31, r0
    1272:	83 9f       	mul	r24, r19
    1274:	f0 0d       	add	r31, r0
    1276:	74 9f       	mul	r23, r20
    1278:	f0 0d       	add	r31, r0
    127a:	65 9f       	mul	r22, r21
    127c:	f0 0d       	add	r31, r0
    127e:	99 27       	eor	r25, r25
    1280:	72 9f       	mul	r23, r18
    1282:	b0 0d       	add	r27, r0
    1284:	e1 1d       	adc	r30, r1
    1286:	f9 1f       	adc	r31, r25
    1288:	63 9f       	mul	r22, r19
    128a:	b0 0d       	add	r27, r0
    128c:	e1 1d       	adc	r30, r1
    128e:	f9 1f       	adc	r31, r25
    1290:	bd 01       	movw	r22, r26
    1292:	cf 01       	movw	r24, r30
    1294:	11 24       	eor	r1, r1
    1296:	08 95       	ret

00001298 <__udivmodsi4>:
    1298:	a1 e2       	ldi	r26, 0x21	; 33
    129a:	1a 2e       	mov	r1, r26
    129c:	aa 1b       	sub	r26, r26
    129e:	bb 1b       	sub	r27, r27
    12a0:	fd 01       	movw	r30, r26
    12a2:	0d c0       	rjmp	.+26     	; 0x12be <__udivmodsi4_ep>

000012a4 <__udivmodsi4_loop>:
    12a4:	aa 1f       	adc	r26, r26
    12a6:	bb 1f       	adc	r27, r27
    12a8:	ee 1f       	adc	r30, r30
    12aa:	ff 1f       	adc	r31, r31
    12ac:	a2 17       	cp	r26, r18
    12ae:	b3 07       	cpc	r27, r19
    12b0:	e4 07       	cpc	r30, r20
    12b2:	f5 07       	cpc	r31, r21
    12b4:	20 f0       	brcs	.+8      	; 0x12be <__udivmodsi4_ep>
    12b6:	a2 1b       	sub	r26, r18
    12b8:	b3 0b       	sbc	r27, r19
    12ba:	e4 0b       	sbc	r30, r20
    12bc:	f5 0b       	sbc	r31, r21

000012be <__udivmodsi4_ep>:
    12be:	66 1f       	adc	r22, r22
    12c0:	77 1f       	adc	r23, r23
    12c2:	88 1f       	adc	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	1a 94       	dec	r1
    12c8:	69 f7       	brne	.-38     	; 0x12a4 <__udivmodsi4_loop>
    12ca:	60 95       	com	r22
    12cc:	70 95       	com	r23
    12ce:	80 95       	com	r24
    12d0:	90 95       	com	r25
    12d2:	9b 01       	movw	r18, r22
    12d4:	ac 01       	movw	r20, r24
    12d6:	bd 01       	movw	r22, r26
    12d8:	cf 01       	movw	r24, r30
    12da:	08 95       	ret

000012dc <__tablejump2__>:
    12dc:	ee 0f       	add	r30, r30
    12de:	ff 1f       	adc	r31, r31

000012e0 <__tablejump__>:
    12e0:	05 90       	lpm	r0, Z+
    12e2:	f4 91       	lpm	r31, Z+
    12e4:	e0 2d       	mov	r30, r0
    12e6:	09 94       	ijmp

000012e8 <__udivmodhi4>:
    12e8:	aa 1b       	sub	r26, r26
    12ea:	bb 1b       	sub	r27, r27
    12ec:	51 e1       	ldi	r21, 0x11	; 17
    12ee:	07 c0       	rjmp	.+14     	; 0x12fe <__udivmodhi4_ep>

000012f0 <__udivmodhi4_loop>:
    12f0:	aa 1f       	adc	r26, r26
    12f2:	bb 1f       	adc	r27, r27
    12f4:	a6 17       	cp	r26, r22
    12f6:	b7 07       	cpc	r27, r23
    12f8:	10 f0       	brcs	.+4      	; 0x12fe <__udivmodhi4_ep>
    12fa:	a6 1b       	sub	r26, r22
    12fc:	b7 0b       	sbc	r27, r23

000012fe <__udivmodhi4_ep>:
    12fe:	88 1f       	adc	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	5a 95       	dec	r21
    1304:	a9 f7       	brne	.-22     	; 0x12f0 <__udivmodhi4_loop>
    1306:	80 95       	com	r24
    1308:	90 95       	com	r25
    130a:	bc 01       	movw	r22, r24
    130c:	cd 01       	movw	r24, r26
    130e:	08 95       	ret

00001310 <_exit>:
    1310:	f8 94       	cli

00001312 <__stop_program>:
    1312:	ff cf       	rjmp	.-2      	; 0x1312 <__stop_program>
