
Growbox.cpp.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <__dtors_end>
    total += 2; /* Add two bytes for the memory block's header  */
    total += (int) current->sz;
  }

  return total;
}
       4:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__bad_interrupt>
   
int month(){
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
       8:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__bad_interrupt>
TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
  for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
     free(id);   // ensure  all Alarms are cleared and available for allocation  
}
       c:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__bad_interrupt>
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
  txBufferLength = 0;
}
      10:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__bad_interrupt>
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
}
      14:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__bad_interrupt>
    exists = false;
    return false;
  }
  exists = true;
  return true;
}
      18:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__bad_interrupt>
void OneWire::depower()
{
	noInterrupts();
	DIRECT_MODE_INPUT(baseReg, bitmask);
	interrupts();
}
      1c:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__bad_interrupt>
  devices = 0;
  parasite = false;
  bitResolution = 9;
  waitForConversion = true;
  checkForConversion = true;
}
      20:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      24:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__bad_interrupt>
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
      28:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__bad_interrupt>
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
      2c:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__bad_interrupt>
	return operator[](loc);
}

void String::setCharAt(unsigned int loc, char c) 
{
	if (loc < len) buffer[loc] = c;
      30:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__bad_interrupt>
      34:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__bad_interrupt>
      38:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__bad_interrupt>
      3c:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__bad_interrupt>
      40:	0c 94 4e 2f 	jmp	0x5e9c	; 0x5e9c <__vector_16>
      44:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__bad_interrupt>
      48:	0c 94 28 31 	jmp	0x6250	; 0x6250 <__vector_18>
      4c:	0c 94 76 31 	jmp	0x62ec	; 0x62ec <__vector_19>
      50:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__bad_interrupt>
      54:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__bad_interrupt>
      58:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__bad_interrupt>
      5c:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__bad_interrupt>
      60:	0c 94 53 26 	jmp	0x4ca6	; 0x4ca6 <__vector_24>
      64:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__bad_interrupt>

00000068 <_ZL7S_table>:
      68:	74 61 62 6c 65 00                                   table.

0000006e <_ZL4S_tr>:
      6e:	74 72 00                                            tr.

00000071 <_ZL4S_td>:
      71:	74 64 00                                            td.

00000074 <_ZL3S_b>:
      74:	62 00                                               b.

00000076 <_ZL4S_0x>:
      76:	30 78 00                                            0x.

00000079 <_ZZN15GB_SerialHelper16sendHttpOKHeaderEhE3__c>:
      79:	48 54 54 50 2f 31 2e 31 20 32 30 30 20 4f 4b 0d     HTTP/1.1 200 OK.
      89:	0a 43 6f 6e 6e 65 63 74 69 6f 6e 3a 20 63 6c 6f     .Connection: clo
      99:	73 65 0d 0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65     se..Content-Type
      a9:	3a 20 74 65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 00     : text/html.....

000000b9 <_ZZN15GB_SerialHelper18sendWifiFrameStartEhjE3__c>:
      b9:	61 74 2b 73 65 6e 64 5f 64 61 74 61 3d 00           at+send_data=.

000000c7 <_ZL18S_WIFI_RESPONSE_OK>:
      c7:	4f 4b 00                                            OK.

000000ca <_ZL6S_CRLF>:
      ca:	0d 0a 00                                            ...

000000cd <_ZL21S_WIFI_RESPONSE_ERROR>:
      cd:	45 52 52 4f 52 00                                   ERROR.

000000d3 <_ZL7S_empty>:
	...

000000d4 <_ZL6S_Next>:
      d4:	20 3e 20 00                                          > .

000000d8 <_ZZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperihE3__c>:
      d8:	65 72 72 6f 72 20 00                                error .

000000df <_ZZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperihE3__c_0>:
      df:	20 28 72 65 62 6f 6f 74 29 00                        (reboot).

000000e9 <_ZZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperihE3__c>:
      e9:	4e 6f 20 72 65 73 70 6f 6e 73 65 00                 No response.

000000f5 <_ZL6S_WIFI>:
      f5:	57 49 46 49 3e 20 00                                WIFI> .

000000fc <_ZZN13GB_PrintDirty16printWithoutCRLFERK6StringE3__c_0>:
      fc:	5c 6e 00                                            \n.

000000ff <_ZZN13GB_PrintDirty16printWithoutCRLFERK6StringE3__c>:
      ff:	5c 72 00                                            \r.

00000102 <_ZL13S_Free_memory>:
     102:	46 72 65 65 20 6d 65 6d 6f 72 79 3a 20 00           Free memory: .

00000110 <_ZL7S_bytes>:
     110:	20 62 79 74 65 73 00                                 bytes.

00000117 <_ZZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhhE3__c_0>:
     117:	4e 4f 54 20 53 54 4f 52 45 44 20 00                 NOT STORED .

00000123 <_ZZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhhE3__c>:
     123:	4c 4f 47 3e 20 00                                   LOG> .

00000129 <_ZZN9GB_Logger18getLogRecordSuffixERK9LogRecordE3__c_0>:
     129:	5d 20 43 00                                         ] C.

0000012d <_ZZN9GB_Logger18getLogRecordSuffixERK9LogRecordE3__c>:
     12d:	20 5b 00                                             [.

00000130 <_ZL24S_WIFI_RESPONSE_WELLCOME>:
     130:	57 65 6c 63 6f 6d 65 20 74 6f 20 52 41 4b 34 31     Welcome to RAK41
     140:	30 0d 0a 00                                         0...

00000144 <_ZL9S_enabled>:
     144:	20 65 6e 61 62 6c 65 64 00                           enabled.

0000014d <_ZL10S_disabled>:
     14d:	20 64 69 73 61 62 6c 65 64 00                        disabled.

00000157 <_ZL11S_connected>:
     157:	20 63 6f 6e 6e 65 63 74 65 64 00                     connected.

00000162 <_ZL14S_disconnected>:
     162:	20 64 69 73 63 6f 6e 6e 65 63 74 65 64 00            disconnected.

00000170 <_ZZN15GB_SerialHelper11checkSerialEhhE3__c_2>:
     170:	53 65 72 69 61 6c 20 57 69 2d 46 69 3a 00           Serial Wi-Fi:.

0000017e <_ZZN15GB_SerialHelper11checkSerialEhhE3__c_1>:
     17e:	53 65 72 69 61 6c 20 6d 6f 6e 69 74 6f 72 3a 20     Serial monitor: 
	...

0000018f <_ZZN15GB_SerialHelper11checkSerialEhhE3__c_0>:
     18f:	4e 6f 74 20 63 6f 72 72 65 6e 74 20 77 65 6c 6c     Not corrent well
     19f:	63 6f 6d 65 20 6d 65 73 73 61 67 65 3a 20 00        come message: .

000001ae <_ZZN15GB_SerialHelper11checkSerialEhhE3__c>:
     1ae:	61 74 2b 72 65 73 65 74 3d 30 00                    at+reset=0.

000001b9 <_ZZN15GB_SerialHelper9startWifiEvE3__c_1>:
     1b9:	53 74 61 72 74 20 66 61 69 6c 65 64 00              Start failed.

000001c6 <_ZZN15GB_SerialHelper9startWifiEvE3__c_0>:
     1c6:	53 74 61 72 74 65 64 00                             Started.

000001ce <_ZZN15GB_SerialHelper9startWifiEvE3__c>:
     1ce:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

000001da <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_7>:
     1da:	61 74 2b 6c 74 63 70 3d 38 30 00                    at+ltcp=80.

000001e5 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_6>:
     1e5:	61 74 2b 61 70 3d 47 72 6f 77 62 6f 78 2c 31 00     at+ap=Growbox,1.

000001f5 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_5>:
     1f5:	61 74 2b 69 70 64 68 63 70 3d 31 00                 at+ipdhcp=1.

00000201 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_4>:
     201:	61 74 2b 69 70 73 74 61 74 69 63 3d 31 39 32 2e     at+ipstatic=192.
     211:	31 36 38 2e 30 2e 31 2c 32 35 35 2e 32 35 35 2e     168.0.1,255.255.
     221:	30 2e 30 2c 30 2e 30 2e 30 2e 30 2c 30 2c 30 00     0.0,0.0.0.0,0,0.

00000231 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_3>:
     231:	61 74 2b 70 73 6b 3d 69 6e 67 6f 64 77 65 74 72     at+psk=ingodwetr
     241:	75 73 74 00                                         ust.

00000245 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_2>:
     245:	61 74 2b 69 70 64 68 63 70 3d 30 00                 at+ipdhcp=0.

00000251 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_1>:
     251:	61 74 2b 63 6f 6e 6e 65 63 74 3d 00                 at+connect=.

0000025d <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_0>:
     25d:	61 74 2b 70 73 6b 3d 00                             at+psk=.

00000265 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c>:
     265:	61 74 2b 73 63 61 6e 3d 30 00                       at+scan=0.

0000026f <_ZL13S_Temperature>:
     26f:	54 65 6d 70 65 72 61 74 75 72 65 00                 Temperature.

0000027b <_ZZ11serialEventvE3__c>:
     27b:	53 65 6e 64 20 72 65 73 70 6f 6e 63 65 20 65 72     Send responce er
     28b:	72 6f 72 00                                         ror.

0000028f <_ZL11S_WIFI_GET_>:
     28f:	47 45 54 20 2f 00                                   GET /.

00000295 <_ZZN15GB_SerialHelper17handleSerialEventER6StringRhS2_E3__c_1>:
     295:	53 45 52 49 41 4c 3e 20 00                          SERIAL> .

0000029e <_ZZN15GB_SerialHelper17handleSerialEventER6StringRhS2_E3__c_0>:
     29e:	43 6c 69 65 6e 74 20 00                             Client .

000002a6 <_ZZN15GB_SerialHelper17handleSerialEventER6StringRhS2_E3__c>:
     2a6:	61 74 2b 72 65 63 76 5f 64 61 74 61 3d 00           at+recv_data=.

000002b4 <_ZZN15GB_SerialHelper15closeConnectionEhE3__c>:
     2b4:	61 74 2b 63 6c 73 3d 00                             at+cls=.

000002bc <_ZL6S_html>:
     2bc:	68 74 6d 6c 00                                      html.

000002c1 <_ZL5S_url>:
     2c1:	2f 00                                               /.

000002c3 <_ZL9S_url_log>:
     2c3:	2f 6c 6f 67 00                                      /log.

000002c8 <_ZL10S_url_conf>:
     2c8:	2f 63 6f 6e 66 00                                   /conf.

000002ce <_ZL13S_url_storage>:
     2ce:	2f 73 74 6f 72 61 67 65 00                          /storage.

000002d7 <_ZL4S_hr>:
     2d7:	68 72 00                                            hr.

000002da <_ZL5S_pre>:
     2da:	70 72 65 00                                         pre.

000002de <_ZZL14executeCommandR6StringE3__c_3>:
     2de:	53 74 6f 72 61 67 65 20 64 75 6d 70 00              Storage dump.

000002eb <_ZZL14executeCommandR6StringE3__c_2>:
     2eb:	43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 00           Configuration.

000002f9 <_ZZL14executeCommandR6StringE3__c_1>:
     2f9:	44 61 69 6c 79 20 6c 6f 67 00                       Daily log.

00000303 <_ZZL14executeCommandR6StringE3__c_0>:
     303:	53 74 61 74 75 73 00                                Status.

0000030a <_ZZL14executeCommandR6StringE3__c>:
     30a:	3c 68 31 3e 47 72 6f 77 62 6f 78 3c 2f 68 31 3e     <h1>Growbox</h1>
	...

0000031b <_ZZL17sendHTTPtagButtonPKcPK19__FlashStringHelperE3__c_1>:
     31b:	22 2f 3e 00                                         "/>.

0000031f <_ZZL17sendHTTPtagButtonPKcPK19__FlashStringHelperE3__c_0>:
     31f:	27 22 20 76 61 6c 75 65 3d 22 00                    '" value=".

0000032a <_ZZL17sendHTTPtagButtonPKcPK19__FlashStringHelperE3__c>:
     32a:	3c 69 6e 70 75 74 20 74 79 70 65 3d 22 62 75 74     <input type="but
     33a:	74 6f 6e 22 20 6f 6e 63 6c 69 63 6b 3d 22 64 6f     ton" onclick="do
     34a:	63 75 6d 65 6e 74 2e 6c 6f 63 61 74 69 6f 6e 3d     cument.location=
     35a:	27 00                                               '.

0000035c <_ZZL14sendBootStatusvE3__c_3>:
     35c:	2c 20 6f 76 65 72 66 6c 6f 77 00                    , overflow.

00000367 <_ZZL14sendBootStatusvE3__c_2>:
     367:	2c 20 72 65 63 6f 72 64 73 20 00                    , records .

00000372 <_ZZL14sendBootStatusvE3__c_1>:
     372:	0d 0a 4c 6f 67 67 65 72 3a 00                       ..Logger:.

0000037c <_ZZL14sendBootStatusvE3__c_0>:
     37c:	2c 20 66 69 72 73 74 20 73 74 61 72 74 75 70 3a     , first startup:
     38c:	20 00                                                .

0000038e <_ZZL14sendBootStatusvE3__c>:
     38e:	43 6f 6e 74 72 6f 6c 6c 65 72 3a 20 73 74 61 72     Controller: star
     39e:	74 75 70 3a 20 00                                   tup: .

000003a4 <_ZZL14sendTimeStatusvE3__c_5>:
     3a4:	3a 30 30 5d 0d 0a 00                                :00]...

000003ab <_ZZL14sendTimeStatusvE3__c_4>:
     3ab:	3a 30 30 5d 2c 20 64 6f 77 6e 20 74 69 6d 65 20     :00], down time 
     3bb:	5b 00                                               [.

000003bd <_ZZL14sendTimeStatusvE3__c_3>:
     3bd:	2c 20 75 70 20 74 69 6d 65 20 5b 00                 , up time [.

000003c9 <_ZZL14sendTimeStatusvE3__c_2>:
     3c9:	20 6d 6f 64 65 2c 20 74 69 6d 65 20 00               mode, time .

000003d6 <_ZZL14sendTimeStatusvE3__c_1>:
     3d6:	4e 49 47 48 54 00                                   NIGHT.

000003dc <_ZZL14sendTimeStatusvE3__c_0>:
     3dc:	44 41 59 00                                         DAY.

000003e0 <_ZZL14sendTimeStatusvE3__c>:
     3e0:	43 6c 6f 63 6b 3a 20 00                             Clock: .

000003e8 <_ZL11S_PlusMinus>:
     3e8:	2b 2f 2d 00                                         +/-.

000003ec <_ZZL21sendTemperatureStatusvE3__c_4>:
     3ec:	2c 20 63 72 69 74 69 63 61 6c 20 00                 , critical .

000003f8 <_ZZL21sendTemperatureStatusvE3__c_3>:
     3f8:	2c 20 6e 69 67 68 74 20 00                          , night .

00000401 <_ZZL21sendTemperatureStatusvE3__c_2>:
     401:	29 2c 20 64 61 79 20 00                             ), day .

00000409 <_ZZL21sendTemperatureStatusvE3__c_1>:
     409:	20 28 63 6f 75 6e 74 20 00                           (count .

00000412 <_ZZL21sendTemperatureStatusvE3__c_0>:
     412:	2c 20 6e 65 78 74 20 00                             , next .

0000041a <_ZZL21sendTemperatureStatusvE3__c>:
     41a:	3a 20 63 75 72 72 65 6e 74 20 00                    : current .

00000425 <_ZZL19printSendPinsStatusvE3__c_13>:
     425:	52 65 73 65 72 76 65 64 20 62 79 20 49 32 43 2e     Reserved by I2C.
     435:	20 43 61 6e 20 62 65 20 75 73 65 64 2c 20 69 66      Can be used, if
     445:	20 53 43 4c 2c 20 53 44 41 20 70 69 6e 73 20 77      SCL, SDA pins w
     455:	69 6c 6c 20 62 65 20 75 73 65 64 00                 ill be used.

00000461 <_ZZL19printSendPinsStatusvE3__c_12>:
     461:	42 72 65 65 7a 65 00                                Breeze.

00000468 <_ZZL19printSendPinsStatusvE3__c_11>:
     468:	45 72 72 6f 72 20 73 74 61 74 75 73 00              Error status.

00000475 <_ZZL19printSendPinsStatusvE3__c_10>:
     475:	55 73 65 20 73 65 72 69 61 6c 20 6d 6f 6e 69 74     Use serial monit
     485:	6f 72 20 6f 6e 28 31 29 2f 6f 66 66 28 30 29 00     or on(1)/off(0).

00000495 <_ZZL19printSendPinsStatusvE3__c_9>:
     495:	31 2d 57 69 72 65 3a 20 74 65 72 6d 6f 6d 65 74     1-Wire: termomet
     4a5:	65 72 00                                            er.

000004a8 <_ZZL19printSendPinsStatusvE3__c_8>:
     4a8:	52 65 6c 61 79 3a 20 66 75 6e 20 6d 61 78 28 30     Relay: fun max(0
     4b8:	29 2f 6d 69 6e 28 31 29 20 73 70 65 65 64 20 73     )/min(1) speed s
     4c8:	77 69 74 63 68 00                                   witch.

000004ce <_ZZL19printSendPinsStatusvE3__c_7>:
     4ce:	52 65 6c 61 79 3a 20 66 75 6e 20 6f 6e 28 30 29     Relay: fun on(0)
     4de:	2f 6f 66 66 28 31 29 00                             /off(1).

000004e6 <_ZZL19printSendPinsStatusvE3__c_6>:
     4e6:	52 65 6c 61 79 3a 20 6c 69 67 68 74 20 6f 6e 28     Relay: light on(
     4f6:	30 29 2f 6f 66 66 28 31 29 00                       0)/off(1).

00000500 <_ZZL19printSendPinsStatusvE3__c_5>:
     500:	52 65 73 65 72 76 65 64 20 62 79 20 53 65 72 69     Reserved by Seri
     510:	61 6c 2f 55 53 42 2e 20 43 61 6e 20 62 65 20 75     al/USB. Can be u
     520:	73 65 64 2c 20 69 66 20 53 65 72 69 61 6c 2f 55     sed, if Serial/U
     530:	53 42 20 77 6f 6e 27 74 20 62 65 20 63 6f 6e 6e     SB won't be conn
     540:	65 63 74 65 64 00                                   ected.

00000546 <_ZZL19printSendPinsStatusvE3__c_4>:
     546:	20 20 20 00                                            .

0000054a <_ZZL19printSendPinsStatusvE3__c_3>:
     54a:	20 20 2d 20 20 20 20 20 00                            -     .

00000553 <_ZZL19printSendPinsStatusvE3__c_2>:
     553:	20 20 20 20 20 2d 20 20 20 00                            -   .

0000055d <_ZZL19printSendPinsStatusvE3__c_1>:
     55d:	20 20 00                                              .

00000560 <_ZZL19printSendPinsStatusvE3__c_0>:
     560:	20 20 00                                              .

00000563 <_ZZL19printSendPinsStatusvE3__c>:
     563:	50 69 6e 20 4f 55 54 50 55 54 20 49 4e 50 55 54     Pin OUTPUT INPUT
	...

00000574 <_ZZL30printSendConfigurationControlsvE3__c_1>:
     574:	3c 2f 66 6f 72 6d 3e 00                             </form>.

0000057c <_ZZL30printSendConfigurationControlsvE3__c_0>:
     57c:	3c 69 6e 70 75 74 20 74 79 70 65 3d 22 73 75 62     <input type="sub
     58c:	6d 69 74 22 20 76 61 6c 75 65 3d 22 53 75 62 6d     mit" value="Subm
     59c:	69 74 22 3e 00                                      it">.

000005a1 <_ZZL30printSendConfigurationControlsvE3__c>:
     5a1:	3c 66 6f 72 6d 20 61 63 74 69 6f 6e 3d 22 2f 22     <form action="/"
     5b1:	20 6d 65 74 68 6f 64 3d 22 70 6f 73 74 22 3e 00      method="post">.

000005c1 <_ZZL16printSendFullLoghhhE3__c>:
     5c1:	4c 6f 67 20 65 6d 70 74 79 00                       Log empty.

000005cb <_ZZN9GB_Logger23getLogRecordDescriptionER9LogRecordE3__c_1>:
     5cb:	55 6e 6b 6e 6f 77 6e 00                             Unknown.

000005d3 <_ZZN9GB_Logger23getLogRecordDescriptionER9LogRecordE3__c_0>:
     5d3:	55 6e 6b 6e 6f 77 6e 20 65 72 72 6f 72 00           Unknown error.

000005e1 <_ZZN9GB_Logger23getLogRecordDescriptionER9LogRecordE3__c>:
     5e1:	55 6e 6b 6e 6f 77 6e 20 65 76 65 6e 74 00           Unknown event.

000005ef <_ZZN15GB_SerialHelper22sendHttpNotFoundHeaderEhE3__c>:
     5ef:	48 54 54 50 2f 31 2e 31 20 34 30 34 20 4e 6f 74     HTTP/1.1 404 Not
     5ff:	20 46 6f 75 6e 64 0d 0a 43 6f 6e 6e 65 63 74 69      Found..Connecti
     60f:	6f 6e 3a 20 63 6c 6f 73 65 0d 0a 0d 0a 00           on: close.....

0000061d <_ZZ5setupE3__c_9>:
     61d:	66 6c 61 74 36 35 72 6f 75 74 65 72 00              flat65router.

0000062a <_ZZ5setupE3__c_8>:
     62a:	48 65 6c 6c 00                                      Hell.

0000062f <_ZZ5setupE3__c_7>:
     62f:	47 72 6f 77 62 6f 78 20 73 75 63 63 65 73 73 66     Growbox successf
     63f:	75 6c 6c 79 20 73 74 61 72 74 65 64 00              ully started.

0000064c <_ZZ5setupE3__c_6>:
     64c:	73 74 6f 72 61 67 65 00                             storage.

00000654 <_ZZ5setupE3__c_5>:
     654:	74 65 72 6d 6f 6d 65 74 65 72 00                    termometer.

0000065f <_ZZ5setupE3__c_4>:
     65f:	63 6c 6f 63 6b 00                                   clock.

00000665 <_ZZ5setupE3__c_1>:
     665:	6e 6f 74 20 61 6c 6c 20 45 76 65 6e 74 73 20 69     not all Events i
     675:	6e 69 74 69 61 6c 69 7a 65 64 00                    nitialized.

00000680 <_ZZ5setupE3__c_0>:
     680:	6e 6f 74 20 61 6c 6c 20 45 72 72 6f 72 73 20 69     not all Errors i
     690:	6e 69 74 69 61 6c 69 7a 65 64 00                    nitialized.

0000069b <_ZZ5setupE3__c>:
     69b:	73 6f 66 74 77 61 72 65 20 63 6f 6e 66 69 67 75     software configu
     6ab:	72 61 74 69 6f 6e 00                                ration.

000006b2 <_ZZL21printFatalErrorOnBootPK19__FlashStringHelperE3__c>:
     6b2:	46 61 74 61 6c 20 65 72 72 6f 72 3a 20 00           Fatal error: .

000006c0 <_ZZL17printStatusOnBootPK19__FlashStringHelperE3__c_0>:
     6c0:	2e 2e 2e 00                                         ....

000006c4 <_ZZL17printStatusOnBootPK19__FlashStringHelperE3__c>:
     6c4:	43 68 65 63 6b 69 6e 67 20 00                       Checking .

000006ce <_ZZ15initLoggerModelvE3__c_14>:
     6ce:	55 6e 6b 6e 6f 77 6e 20 73 65 72 69 61 6c 20 63     Unknown serial c
     6de:	6f 6d 6d 61 6e 64 00                                ommand.

000006e5 <_ZZ15initLoggerModelvE3__c_13>:
     6e5:	46 41 4e 20 74 75 72 6e 65 64 20 4f 4e 20 4d 41     FAN turned ON MA
     6f5:	58 20 73 70 65 65 64 00                             X speed.

000006fd <_ZZ15initLoggerModelvE3__c_12>:
     6fd:	46 41 4e 20 74 75 72 6e 65 64 20 4f 4e 20 4d 49     FAN turned ON MI
     70d:	4e 20 73 70 65 65 64 00                             N speed.

00000715 <_ZZ15initLoggerModelvE3__c_11>:
     715:	46 41 4e 20 74 75 72 6e 65 64 20 4f 46 46 00        FAN turned OFF.

00000724 <_ZZ15initLoggerModelvE3__c_10>:
     724:	4c 49 47 48 54 20 74 75 72 6e 65 64 20 4f 4e 00     LIGHT turned ON.

00000734 <_ZZ15initLoggerModelvE3__c_9>:
     734:	4c 49 47 48 54 20 74 75 72 6e 65 64 20 4f 46 46     LIGHT turned OFF
	...

00000745 <_ZZ15initLoggerModelvE3__c_8>:
     745:	47 72 6f 77 62 6f 78 20 73 77 69 74 63 68 65 64     Growbox switched
     755:	20 74 6f 20 4e 49 47 48 54 20 6d 6f 64 65 00         to NIGHT mode.

00000764 <_ZZ15initLoggerModelvE3__c_7>:
     764:	47 72 6f 77 62 6f 78 20 73 77 69 74 63 68 65 64     Growbox switched
     774:	20 74 6f 20 44 41 59 20 6d 6f 64 65 00               to DAY mode.

00000781 <_ZZ15initLoggerModelvE3__c_6>:
     781:	52 45 53 54 41 52 54 45 44 00                       RESTARTED.

0000078b <_ZZ15initLoggerModelvE3__c_5>:
     78b:	46 49 52 53 54 20 53 54 41 52 54 55 50 00           FIRST STARTUP.

00000799 <_ZZ15initLoggerModelvE3__c_4>:
     799:	45 72 72 6f 72 3a 20 4d 65 6d 6f 72 79 20 72 65     Error: Memory re
     7a9:	6d 61 69 6e 65 64 20 6c 65 73 73 20 32 30 30 20     mained less 200 
     7b9:	62 79 74 65 73 00                                   bytes.

000007bf <_ZZ15initLoggerModelvE3__c_3>:
     7bf:	45 72 72 6f 72 3a 20 54 65 72 6d 6f 6d 65 74 65     Error: Termomete
     7cf:	72 20 72 65 74 75 72 6e 65 64 20 43 52 49 54 49     r returned CRITI
     7df:	43 41 4c 20 76 61 6c 75 65 00                       CAL value.

000007e9 <_ZZ15initLoggerModelvE3__c_2>:
     7e9:	45 72 72 6f 72 3a 20 54 65 72 6d 6f 6d 65 74 65     Error: Termomete
     7f9:	72 20 72 65 74 75 72 6e 65 64 20 5a 45 52 4f 20     r returned ZERO 
     809:	76 61 6c 75 65 00                                   value.

0000080f <_ZZ15initLoggerModelvE3__c_1>:
     80f:	45 72 72 6f 72 3a 20 54 65 72 6d 6f 6d 65 74 65     Error: Termomete
     81f:	72 20 64 69 73 63 6f 6e 6e 65 63 74 65 64 00        r disconnected.

0000082e <_ZZ15initLoggerModelvE3__c_0>:
     82e:	45 72 72 6f 72 3a 20 54 69 6d 65 72 20 6e 65 65     Error: Timer nee
     83e:	64 73 20 73 79 6e 63 00                             ds sync.

00000846 <_ZZ15initLoggerModelvE3__c>:
     846:	45 72 72 6f 72 3a 20 54 69 6d 65 72 20 6e 6f 74     Error: Timer not
     856:	20 73 65 74 00                                       set.

0000085b <_ZL11dscrc_table>:
     85b:	00 5e bc e2 61 3f dd 83 c2 9c 7e 20 a3 fd 1f 41     .^..a?....~ ...A
     86b:	9d c3 21 7f fc a2 40 1e 5f 01 e3 bd 3e 60 82 dc     ..!...@._...>`..
     87b:	23 7d 9f c1 42 1c fe a0 e1 bf 5d 03 80 de 3c 62     #}..B.....]...<b
     88b:	be e0 02 5c df 81 63 3d 7c 22 c0 9e 1d 43 a1 ff     ...\..c=|"...C..
     89b:	46 18 fa a4 27 79 9b c5 84 da 38 66 e5 bb 59 07     F...'y....8f..Y.
     8ab:	db 85 67 39 ba e4 06 58 19 47 a5 fb 78 26 c4 9a     ..g9...X.G..x&..
     8bb:	65 3b d9 87 04 5a b8 e6 a7 f9 1b 45 c6 98 7a 24     e;...Z.....E..z$
     8cb:	f8 a6 44 1a 99 c7 25 7b 3a 64 86 d8 5b 05 e7 b9     ..D...%{:d..[...
     8db:	8c d2 30 6e ed b3 51 0f 4e 10 f2 ac 2f 71 93 cd     ..0n..Q.N.../q..
     8eb:	11 4f ad f3 70 2e cc 92 d3 8d 6f 31 b2 ec 0e 50     .O..p.....o1...P
     8fb:	af f1 13 4d ce 90 72 2c 6d 33 d1 8f 0c 52 b0 ee     ...M..r,m3...R..
     90b:	32 6c 8e d0 53 0d ef b1 f0 ae 4c 12 91 cf 2d 73     2l..S.....L...-s
     91b:	ca 94 76 28 ab f5 17 49 08 56 b4 ea 69 37 d5 8b     ..v(...I.V..i7..
     92b:	57 09 eb b5 36 68 8a d4 95 cb 29 77 f4 aa 48 16     W...6h....)w..H.
     93b:	e9 b7 55 0b 88 d6 34 6a 2b 75 97 c9 4a 14 f6 a8     ..U...4j+u..J...
     94b:	74 2a c8 96 15 4b a9 f7 b6 e8 0a 54 d7 89 6b 35     t*...K.....T..k5

0000095b <port_to_mode_PGM>:
     95b:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000965 <port_to_output_PGM>:
     965:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000096f <port_to_input_PGM>:
     96f:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000979 <digital_pin_to_port_PGM>:
     979:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     989:	03 03 03 03                                         ....

0000098d <digital_pin_to_bit_mask_PGM>:
     98d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     99d:	04 08 10 20                                         ... 

000009a1 <digital_pin_to_timer_PGM>:
     9a1:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     9b1:	00 00 00 00 00                                      .....

000009b6 <__ctors_start>:
     9b6:	90 05       	cpc	r25, r0
     9b8:	25 1d       	adc	r18, r5
     9ba:	f7 1d       	adc	r31, r7
     9bc:	fe 1d       	adc	r31, r14
     9be:	6b 21       	and	r22, r11
     9c0:	ef 24       	eor	r14, r15
     9c2:	c3 28       	or	r12, r3
     9c4:	4a 33       	cpi	r20, 0x3A	; 58

000009c6 <__ctors_end>:
     9c6:	f0 1d       	adc	r31, r0

000009c8 <__dtors_end>:
     9c8:	11 24       	eor	r1, r1
     9ca:	1f be       	out	0x3f, r1	; 63
     9cc:	cf ef       	ldi	r28, 0xFF	; 255
     9ce:	d8 e0       	ldi	r29, 0x08	; 8
     9d0:	de bf       	out	0x3e, r29	; 62
     9d2:	cd bf       	out	0x3d, r28	; 61

000009d4 <__do_copy_data>:
     9d4:	11 e0       	ldi	r17, 0x01	; 1
     9d6:	a0 e0       	ldi	r26, 0x00	; 0
     9d8:	b1 e0       	ldi	r27, 0x01	; 1
     9da:	e4 ed       	ldi	r30, 0xD4	; 212
     9dc:	f8 e7       	ldi	r31, 0x78	; 120
     9de:	02 c0       	rjmp	.+4      	; 0x9e4 <.do_copy_data_start>

000009e0 <.do_copy_data_loop>:
     9e0:	05 90       	lpm	r0, Z+
     9e2:	0d 92       	st	X+, r0

000009e4 <.do_copy_data_start>:
     9e4:	ac 33       	cpi	r26, 0x3C	; 60
     9e6:	b1 07       	cpc	r27, r17
     9e8:	d9 f7       	brne	.-10     	; 0x9e0 <.do_copy_data_loop>

000009ea <__do_clear_bss>:
     9ea:	13 e0       	ldi	r17, 0x03	; 3
     9ec:	ac e3       	ldi	r26, 0x3C	; 60
     9ee:	b1 e0       	ldi	r27, 0x01	; 1
     9f0:	01 c0       	rjmp	.+2      	; 0x9f4 <.do_clear_bss_start>

000009f2 <.do_clear_bss_loop>:
     9f2:	1d 92       	st	X+, r1

000009f4 <.do_clear_bss_start>:
     9f4:	ae 3d       	cpi	r26, 0xDE	; 222
     9f6:	b1 07       	cpc	r27, r17
     9f8:	e1 f7       	brne	.-8      	; 0x9f2 <.do_clear_bss_loop>

000009fa <__do_global_ctors>:
     9fa:	19 e0       	ldi	r17, 0x09	; 9
     9fc:	c6 ec       	ldi	r28, 0xC6	; 198
     9fe:	d9 e0       	ldi	r29, 0x09	; 9
     a00:	04 c0       	rjmp	.+8      	; 0xa0a <.do_global_ctors_start>

00000a02 <.do_global_ctors_loop>:
     a02:	22 97       	sbiw	r28, 0x02	; 2
     a04:	fe 01       	movw	r30, r28
     a06:	0e 94 46 3c 	call	0x788c	; 0x788c <__tablejump__>

00000a0a <.do_global_ctors_start>:
     a0a:	c6 3b       	cpi	r28, 0xB6	; 182
     a0c:	d1 07       	cpc	r29, r17
     a0e:	c9 f7       	brne	.-14     	; 0xa02 <.do_global_ctors_loop>
     a10:	0e 94 a0 33 	call	0x6740	; 0x6740 <main>
     a14:	0c 94 5d 3c 	jmp	0x78ba	; 0x78ba <__do_global_dtors>

00000a18 <__bad_interrupt>:
     a18:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000a1c <strlen_P>:
     a1c:	fc 01       	movw	r30, r24
     a1e:	05 90       	lpm	r0, Z+
     a20:	00 20       	and	r0, r0
     a22:	e9 f7       	brne	.-6      	; 0xa1e <strlen_P+0x2>
     a24:	80 95       	com	r24
     a26:	90 95       	com	r25
     a28:	8e 0f       	add	r24, r30
     a2a:	9f 1f       	adc	r25, r31
     a2c:	08 95       	ret

00000a2e <memcpy>:
     a2e:	fb 01       	movw	r30, r22
     a30:	dc 01       	movw	r26, r24
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <memcpy+0xa>
     a34:	01 90       	ld	r0, Z+
     a36:	0d 92       	st	X+, r0
     a38:	41 50       	subi	r20, 0x01	; 1
     a3a:	50 40       	sbci	r21, 0x00	; 0
     a3c:	d8 f7       	brcc	.-10     	; 0xa34 <memcpy+0x6>
     a3e:	08 95       	ret

00000a40 <strchr>:
     a40:	fc 01       	movw	r30, r24
     a42:	81 91       	ld	r24, Z+
     a44:	86 17       	cp	r24, r22
     a46:	21 f0       	breq	.+8      	; 0xa50 <strchr+0x10>
     a48:	88 23       	and	r24, r24
     a4a:	d9 f7       	brne	.-10     	; 0xa42 <strchr+0x2>
     a4c:	99 27       	eor	r25, r25
     a4e:	08 95       	ret
     a50:	31 97       	sbiw	r30, 0x01	; 1
     a52:	cf 01       	movw	r24, r30
     a54:	08 95       	ret

00000a56 <strcmp>:
     a56:	fb 01       	movw	r30, r22
     a58:	dc 01       	movw	r26, r24
     a5a:	8d 91       	ld	r24, X+
     a5c:	01 90       	ld	r0, Z+
     a5e:	80 19       	sub	r24, r0
     a60:	01 10       	cpse	r0, r1
     a62:	d9 f3       	breq	.-10     	; 0xa5a <strcmp+0x4>
     a64:	99 0b       	sbc	r25, r25
     a66:	08 95       	ret

00000a68 <strcpy>:
     a68:	fb 01       	movw	r30, r22
     a6a:	dc 01       	movw	r26, r24
     a6c:	01 90       	ld	r0, Z+
     a6e:	0d 92       	st	X+, r0
     a70:	00 20       	and	r0, r0
     a72:	e1 f7       	brne	.-8      	; 0xa6c <strcpy+0x4>
     a74:	08 95       	ret

00000a76 <strncmp>:
     a76:	fb 01       	movw	r30, r22
     a78:	dc 01       	movw	r26, r24
     a7a:	41 50       	subi	r20, 0x01	; 1
     a7c:	50 40       	sbci	r21, 0x00	; 0
     a7e:	30 f0       	brcs	.+12     	; 0xa8c <strncmp+0x16>
     a80:	8d 91       	ld	r24, X+
     a82:	01 90       	ld	r0, Z+
     a84:	80 19       	sub	r24, r0
     a86:	19 f4       	brne	.+6      	; 0xa8e <strncmp+0x18>
     a88:	00 20       	and	r0, r0
     a8a:	b9 f7       	brne	.-18     	; 0xa7a <strncmp+0x4>
     a8c:	88 1b       	sub	r24, r24
     a8e:	99 0b       	sbc	r25, r25
     a90:	08 95       	ret

00000a92 <itoa>:
     a92:	fb 01       	movw	r30, r22
     a94:	9f 01       	movw	r18, r30
     a96:	e8 94       	clt
     a98:	42 30       	cpi	r20, 0x02	; 2
     a9a:	c4 f0       	brlt	.+48     	; 0xacc <itoa+0x3a>
     a9c:	45 32       	cpi	r20, 0x25	; 37
     a9e:	b4 f4       	brge	.+44     	; 0xacc <itoa+0x3a>
     aa0:	4a 30       	cpi	r20, 0x0A	; 10
     aa2:	29 f4       	brne	.+10     	; 0xaae <itoa+0x1c>
     aa4:	97 fb       	bst	r25, 7
     aa6:	1e f4       	brtc	.+6      	; 0xaae <itoa+0x1c>
     aa8:	90 95       	com	r25
     aaa:	81 95       	neg	r24
     aac:	9f 4f       	sbci	r25, 0xFF	; 255
     aae:	64 2f       	mov	r22, r20
     ab0:	77 27       	eor	r23, r23
     ab2:	0e 94 fb 3b 	call	0x77f6	; 0x77f6 <__udivmodhi4>
     ab6:	80 5d       	subi	r24, 0xD0	; 208
     ab8:	8a 33       	cpi	r24, 0x3A	; 58
     aba:	0c f0       	brlt	.+2      	; 0xabe <itoa+0x2c>
     abc:	89 5d       	subi	r24, 0xD9	; 217
     abe:	81 93       	st	Z+, r24
     ac0:	cb 01       	movw	r24, r22
     ac2:	00 97       	sbiw	r24, 0x00	; 0
     ac4:	a1 f7       	brne	.-24     	; 0xaae <itoa+0x1c>
     ac6:	16 f4       	brtc	.+4      	; 0xacc <itoa+0x3a>
     ac8:	5d e2       	ldi	r21, 0x2D	; 45
     aca:	51 93       	st	Z+, r21
     acc:	10 82       	st	Z, r1
     ace:	c9 01       	movw	r24, r18
     ad0:	0c 94 80 05 	jmp	0xb00	; 0xb00 <strrev>

00000ad4 <utoa>:
     ad4:	fb 01       	movw	r30, r22
     ad6:	9f 01       	movw	r18, r30
     ad8:	42 30       	cpi	r20, 0x02	; 2
     ada:	74 f0       	brlt	.+28     	; 0xaf8 <utoa+0x24>
     adc:	45 32       	cpi	r20, 0x25	; 37
     ade:	64 f4       	brge	.+24     	; 0xaf8 <utoa+0x24>
     ae0:	64 2f       	mov	r22, r20
     ae2:	77 27       	eor	r23, r23
     ae4:	0e 94 fb 3b 	call	0x77f6	; 0x77f6 <__udivmodhi4>
     ae8:	80 5d       	subi	r24, 0xD0	; 208
     aea:	8a 33       	cpi	r24, 0x3A	; 58
     aec:	0c f0       	brlt	.+2      	; 0xaf0 <utoa+0x1c>
     aee:	89 5d       	subi	r24, 0xD9	; 217
     af0:	81 93       	st	Z+, r24
     af2:	cb 01       	movw	r24, r22
     af4:	00 97       	sbiw	r24, 0x00	; 0
     af6:	a1 f7       	brne	.-24     	; 0xae0 <utoa+0xc>
     af8:	10 82       	st	Z, r1
     afa:	c9 01       	movw	r24, r18
     afc:	0c 94 80 05 	jmp	0xb00	; 0xb00 <strrev>

00000b00 <strrev>:
     b00:	dc 01       	movw	r26, r24
     b02:	fc 01       	movw	r30, r24
     b04:	67 2f       	mov	r22, r23
     b06:	71 91       	ld	r23, Z+
     b08:	77 23       	and	r23, r23
     b0a:	e1 f7       	brne	.-8      	; 0xb04 <strrev+0x4>
     b0c:	32 97       	sbiw	r30, 0x02	; 2
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <strrev+0x18>
     b10:	7c 91       	ld	r23, X
     b12:	6d 93       	st	X+, r22
     b14:	70 83       	st	Z, r23
     b16:	62 91       	ld	r22, -Z
     b18:	ae 17       	cp	r26, r30
     b1a:	bf 07       	cpc	r27, r31
     b1c:	c8 f3       	brcs	.-14     	; 0xb10 <strrev+0x10>
     b1e:	08 95       	ret

00000b20 <_GLOBAL__I_g_oneWirePin>:
     b20:	8c e3       	ldi	r24, 0x3C	; 60
     b22:	91 e0       	ldi	r25, 0x01	; 1
     b24:	68 e0       	ldi	r22, 0x08	; 8
     b26:	0e 94 ad 2a 	call	0x555a	; 0x555a <_ZN7OneWireC1Eh>
     b2a:	08 95       	ret

00000b2c <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord>:
    out += ' '; 
    return out;
  }

  static const __FlashStringHelper* getLogRecordDescription(LogRecord &logRecord) {
    byte data = (logRecord.data & B00111111);   
     b2c:	fc 01       	movw	r30, r24
     b2e:	24 81       	ldd	r18, Z+4	; 0x04
     b30:	42 2f       	mov	r20, r18
     b32:	4f 73       	andi	r20, 0x3F	; 63

    return out;
  }

  static boolean isEvent(const LogRecord &logRecord){
    return (logRecord.data & B11000000) == B00000000;
     b34:	82 2f       	mov	r24, r18
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	80 7c       	andi	r24, 0xC0	; 192
     b3a:	90 70       	andi	r25, 0x00	; 0
    return out;
  }

  static const __FlashStringHelper* getLogRecordDescription(LogRecord &logRecord) {
    byte data = (logRecord.data & B00111111);   
    if (isEvent(logRecord)){
     b3c:	00 97       	sbiw	r24, 0x00	; 0
     b3e:	91 f4       	brne	.+36     	; 0xb64 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x38>
  static Event* findByIndex(byte index){
    //Serial.print("search ev: ");    
    //Serial.println(index);
    // Serial.print("lastAddedEvent ev: ");
    //Serial.println(lastAddedEvent->description);
    Event* currentItemPtr = lastAddedEvent;
     b40:	e0 91 4f 01 	lds	r30, 0x014F
     b44:	f0 91 50 01 	lds	r31, 0x0150
     b48:	07 c0       	rjmp	.+14     	; 0xb58 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x2c>
    while (currentItemPtr != 0){
      //Serial.println(currentItemPtr->description);
      if (currentItemPtr->index == index) {
     b4a:	82 81       	ldd	r24, Z+2	; 0x02
     b4c:	84 17       	cp	r24, r20
     b4e:	39 f0       	breq	.+14     	; 0xb5e <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x32>
        return currentItemPtr;
      }
      currentItemPtr = (Event*)currentItemPtr->nextEvent;
     b50:	80 81       	ld	r24, Z
     b52:	91 81       	ldd	r25, Z+1	; 0x01
     b54:	9c 01       	movw	r18, r24
     b56:	f9 01       	movw	r30, r18
    //Serial.print("search ev: ");    
    //Serial.println(index);
    // Serial.print("lastAddedEvent ev: ");
    //Serial.println(lastAddedEvent->description);
    Event* currentItemPtr = lastAddedEvent;
    while (currentItemPtr != 0){
     b58:	30 97       	sbiw	r30, 0x00	; 0
     b5a:	b9 f7       	brne	.-18     	; 0xb4a <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x1e>
     b5c:	29 c0       	rjmp	.+82     	; 0xbb0 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x84>
      Event* foundItemPtr = Event::findByIndex(data);
      if (foundItemPtr == 0){
        return F("Unknown event");
      } 
      else {
        return foundItemPtr->description;
     b5e:	23 81       	ldd	r18, Z+3	; 0x03
     b60:	34 81       	ldd	r19, Z+4	; 0x04
     b62:	24 c0       	rjmp	.+72     	; 0xbac <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x80>
      }
    } 
    else if (isTemperature(logRecord)){
     b64:	80 3c       	cpi	r24, 0xC0	; 192
     b66:	91 05       	cpc	r25, r1
     b68:	19 f4       	brne	.+6      	; 0xb70 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x44>
      return FS(S_Temperature);
     b6a:	2f e6       	ldi	r18, 0x6F	; 111
     b6c:	32 e0       	ldi	r19, 0x02	; 2
     b6e:	1e c0       	rjmp	.+60     	; 0xbac <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x80>
    } 
    else if (isError(logRecord)){    
     b70:	80 34       	cpi	r24, 0x40	; 64
     b72:	91 05       	cpc	r25, r1
     b74:	c9 f4       	brne	.+50     	; 0xba8 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x7c>
      byte sequence = (data & B00001111); 
     b76:	52 2f       	mov	r21, r18
     b78:	5f 70       	andi	r21, 0x0F	; 15
      byte sequenceSize = (data & B00110000)>>4; 
     b7a:	42 95       	swap	r20
     b7c:	4f 70       	andi	r20, 0x0F	; 15
    this->sequenceSize = sequenceSize;
    this->description = description;
  }
  
  static Error* findByIndex(byte sequence, byte sequenceSize){
    Error* currentItemPtr = lastAddedItem;
     b7e:	e0 91 4d 01 	lds	r30, 0x014D
     b82:	f0 91 4e 01 	lds	r31, 0x014E
     b86:	0a c0       	rjmp	.+20     	; 0xb9c <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x70>
    while (currentItemPtr != 0){
      if (currentItemPtr->sequence == sequence && currentItemPtr->sequenceSize == sequenceSize) {
     b88:	82 81       	ldd	r24, Z+2	; 0x02
     b8a:	85 17       	cp	r24, r21
     b8c:	19 f4       	brne	.+6      	; 0xb94 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x68>
     b8e:	83 81       	ldd	r24, Z+3	; 0x03
     b90:	84 17       	cp	r24, r20
     b92:	39 f0       	breq	.+14     	; 0xba2 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x76>
        return currentItemPtr;
      }
      currentItemPtr = (Error*)currentItemPtr->nextError;
     b94:	80 81       	ld	r24, Z
     b96:	91 81       	ldd	r25, Z+1	; 0x01
     b98:	9c 01       	movw	r18, r24
     b9a:	f9 01       	movw	r30, r18
    this->description = description;
  }
  
  static Error* findByIndex(byte sequence, byte sequenceSize){
    Error* currentItemPtr = lastAddedItem;
    while (currentItemPtr != 0){
     b9c:	30 97       	sbiw	r30, 0x00	; 0
     b9e:	a1 f7       	brne	.-24     	; 0xb88 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x5c>
     ba0:	0a c0       	rjmp	.+20     	; 0xbb6 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x8a>
      Error* foundItemPtr = Error::findByIndex(sequence, sequenceSize);
      if (foundItemPtr == 0){
        return F("Unknown error");
      } 
      else {
        return foundItemPtr->description;
     ba2:	24 81       	ldd	r18, Z+4	; 0x04
     ba4:	35 81       	ldd	r19, Z+5	; 0x05
     ba6:	02 c0       	rjmp	.+4      	; 0xbac <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x80>
      }
    } 
    else {
      return F("Unknown");
     ba8:	2b ec       	ldi	r18, 0xCB	; 203
     baa:	35 e0       	ldi	r19, 0x05	; 5
    }
  }
     bac:	c9 01       	movw	r24, r18
     bae:	08 95       	ret
  static const __FlashStringHelper* getLogRecordDescription(LogRecord &logRecord) {
    byte data = (logRecord.data & B00111111);   
    if (isEvent(logRecord)){
      Event* foundItemPtr = Event::findByIndex(data);
      if (foundItemPtr == 0){
        return F("Unknown event");
     bb0:	21 ee       	ldi	r18, 0xE1	; 225
     bb2:	35 e0       	ldi	r19, 0x05	; 5
     bb4:	fb cf       	rjmp	.-10     	; 0xbac <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x80>
    else if (isError(logRecord)){    
      byte sequence = (data & B00001111); 
      byte sequenceSize = (data & B00110000)>>4; 
      Error* foundItemPtr = Error::findByIndex(sequence, sequenceSize);
      if (foundItemPtr == 0){
        return F("Unknown error");
     bb6:	23 ed       	ldi	r18, 0xD3	; 211
     bb8:	35 e0       	ldi	r19, 0x05	; 5
     bba:	f8 cf       	rjmp	.-16     	; 0xbac <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x80>

00000bbc <_ZN10GB_Storage5writeEjPKvh>:
    else {
      return 0xFF;
    }
  }

  static void write(word address, const void* data, const byte sizeofData) {
     bbc:	af 92       	push	r10
     bbe:	bf 92       	push	r11
     bc0:	df 92       	push	r13
     bc2:	ef 92       	push	r14
     bc4:	ff 92       	push	r15
     bc6:	0f 93       	push	r16
     bc8:	1f 93       	push	r17
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	ec 01       	movw	r28, r24
     bd0:	5b 01       	movw	r10, r22
     bd2:	00 e0       	ldi	r16, 0x00	; 0
     bd4:	10 e0       	ldi	r17, 0x00	; 0
    for (word c = 0; c < sizeofData; c++){
     bd6:	e4 2e       	mov	r14, r20
     bd8:	ff 24       	eor	r15, r15
     bda:	2a c0       	rjmp	.+84     	; 0xc30 <_ZN10GB_Storage5writeEjPKvh+0x74>
      byte value = ((byte*)data)[c];
     bdc:	f5 01       	movw	r30, r10
     bde:	e0 0f       	add	r30, r16
     be0:	f1 1f       	adc	r31, r17
     be2:	d0 80       	ld	r13, Z
      return true;
    return false;
  }

  static void write(const word address, const byte data) {
    if (address >= CAPACITY){
     be4:	80 e1       	ldi	r24, 0x10	; 16
     be6:	c0 30       	cpi	r28, 0x00	; 0
     be8:	d8 07       	cpc	r29, r24
     bea:	f8 f4       	brcc	.+62     	; 0xc2a <_ZN10GB_Storage5writeEjPKvh+0x6e>
      return;
    }
    Wire.beginTransmission(AT24C32);
     bec:	8b ea       	ldi	r24, 0xAB	; 171
     bee:	92 e0       	ldi	r25, 0x02	; 2
     bf0:	60 e5       	ldi	r22, 0x50	; 80
     bf2:	70 e0       	ldi	r23, 0x00	; 0
     bf4:	0e 94 b5 24 	call	0x496a	; 0x496a <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((byte)(address >> 8)); // MSB
     bf8:	8b ea       	ldi	r24, 0xAB	; 171
     bfa:	92 e0       	ldi	r25, 0x02	; 2
     bfc:	6d 2f       	mov	r22, r29
     bfe:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <_ZN7TwoWire5writeEh>
    Wire.write((byte)(address & 0xFF)); // LSB
     c02:	8b ea       	ldi	r24, 0xAB	; 171
     c04:	92 e0       	ldi	r25, 0x02	; 2
     c06:	6c 2f       	mov	r22, r28
     c08:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <_ZN7TwoWire5writeEh>
    Wire.write(data);
     c0c:	8b ea       	ldi	r24, 0xAB	; 171
     c0e:	92 e0       	ldi	r25, 0x02	; 2
     c10:	6d 2d       	mov	r22, r13
     c12:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <_ZN7TwoWire5writeEh>
    Wire.endTransmission();  
     c16:	8b ea       	ldi	r24, 0xAB	; 171
     c18:	92 e0       	ldi	r25, 0x02	; 2
     c1a:	0e 94 7a 25 	call	0x4af4	; 0x4af4 <_ZN7TwoWire15endTransmissionEv>
    delay(10);  // http://www.hobbytronics.co.uk/arduino-external-eeprom
     c1e:	6a e0       	ldi	r22, 0x0A	; 10
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <delay>
      return 0xFF;
    }
  }

  static void write(word address, const void* data, const byte sizeofData) {
    for (word c = 0; c < sizeofData; c++){
     c2a:	0f 5f       	subi	r16, 0xFF	; 255
     c2c:	1f 4f       	sbci	r17, 0xFF	; 255
     c2e:	21 96       	adiw	r28, 0x01	; 1
     c30:	0e 15       	cp	r16, r14
     c32:	1f 05       	cpc	r17, r15
     c34:	98 f2       	brcs	.-90     	; 0xbdc <_ZN10GB_Storage5writeEjPKvh+0x20>
      byte value = ((byte*)data)[c];
      write(address + c, value);
    }
  }
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	bf 90       	pop	r11
     c46:	af 90       	pop	r10
     c48:	08 95       	ret

00000c4a <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord>:

  /////////////////////////////////////////////////////////////////////
  //                            LOG RECORDS                          //
  /////////////////////////////////////////////////////////////////////

  static boolean storeLogRecord(LogRecord &logRecord){ 
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	ec 01       	movw	r28, r24
    boolean storeLog = g_isGrowboxStarted && isBootRecordCorrect() && bootRecord.boolPreferencies.isLoggerEnabled && GB_Storage::isPresent(); // TODO check in another places
     c50:	80 91 4a 01 	lds	r24, 0x014A
     c54:	88 23       	and	r24, r24
     c56:	09 f4       	brne	.+2      	; 0xc5a <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0x10>
     c58:	52 c0       	rjmp	.+164    	; 0xcfe <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb4>
  }

private :

  static boolean isBootRecordCorrect(){ // TODO rename it
    return (bootRecord.first_magic == MAGIC_NUMBER) && (bootRecord.last_magic == MAGIC_NUMBER);
     c5a:	80 91 c1 01 	lds	r24, 0x01C1
     c5e:	90 91 c2 01 	lds	r25, 0x01C2
     c62:	85 55       	subi	r24, 0x55	; 85
     c64:	9a 4a       	sbci	r25, 0xAA	; 170
     c66:	09 f0       	breq	.+2      	; 0xc6a <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0x20>
     c68:	4a c0       	rjmp	.+148    	; 0xcfe <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb4>
     c6a:	80 91 df 01 	lds	r24, 0x01DF
     c6e:	90 91 e0 01 	lds	r25, 0x01E0
     c72:	85 55       	subi	r24, 0x55	; 85
     c74:	9a 4a       	sbci	r25, 0xAA	; 170
     c76:	09 f0       	breq	.+2      	; 0xc7a <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0x30>
     c78:	42 c0       	rjmp	.+132    	; 0xcfe <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb4>
  /////////////////////////////////////////////////////////////////////
  //                            LOG RECORDS                          //
  /////////////////////////////////////////////////////////////////////

  static boolean storeLogRecord(LogRecord &logRecord){ 
    boolean storeLog = g_isGrowboxStarted && isBootRecordCorrect() && bootRecord.boolPreferencies.isLoggerEnabled && GB_Storage::isPresent(); // TODO check in another places
     c7a:	80 91 cd 01 	lds	r24, 0x01CD
     c7e:	86 95       	lsr	r24
     c80:	83 70       	andi	r24, 0x03	; 3
     c82:	e9 f1       	breq	.+122    	; 0xcfe <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb4>
  static const int AT24C32 = 0x50; // External EEPROM I2C address
public:
  static const word CAPACITY = 0x1000; // 4K byte = 32K bit

  static boolean isPresent(void) {     // check if the device is present
    Wire.beginTransmission(AT24C32);
     c84:	8b ea       	ldi	r24, 0xAB	; 171
     c86:	92 e0       	ldi	r25, 0x02	; 2
     c88:	60 e5       	ldi	r22, 0x50	; 80
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	0e 94 b5 24 	call	0x496a	; 0x496a <_ZN7TwoWire17beginTransmissionEi>
    if (Wire.endTransmission() == 0)
     c90:	8b ea       	ldi	r24, 0xAB	; 171
     c92:	92 e0       	ldi	r25, 0x02	; 2
     c94:	0e 94 7a 25 	call	0x4af4	; 0x4af4 <_ZN7TwoWire15endTransmissionEv>
     c98:	88 23       	and	r24, r24
     c9a:	89 f5       	brne	.+98     	; 0xcfe <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb4>
    if (!storeLog){
      return false;
    }
    GB_Storage::write(bootRecord.nextLogRecordAddress, &logRecord, sizeof(LogRecord));
     c9c:	80 91 cb 01 	lds	r24, 0x01CB
     ca0:	90 91 cc 01 	lds	r25, 0x01CC
     ca4:	be 01       	movw	r22, r28
     ca6:	45 e0       	ldi	r20, 0x05	; 5
     ca8:	0e 94 de 05 	call	0xbbc	; 0xbbc <_ZN10GB_Storage5writeEjPKvh>
  static boolean isBootRecordCorrect(){ // TODO rename it
    return (bootRecord.first_magic == MAGIC_NUMBER) && (bootRecord.last_magic == MAGIC_NUMBER);
  }

  static void increaseLogPointer(){
    bootRecord.nextLogRecordAddress += sizeof(LogRecord); 
     cac:	80 91 cb 01 	lds	r24, 0x01CB
     cb0:	90 91 cc 01 	lds	r25, 0x01CC
     cb4:	05 96       	adiw	r24, 0x05	; 5
     cb6:	90 93 cc 01 	sts	0x01CC, r25
     cba:	80 93 cb 01 	sts	0x01CB, r24
    if (bootRecord.nextLogRecordAddress >= (sizeof(BootRecord) + LOG_RECORD_OVERFLOW_OFFSET)){
     cbe:	8c 5f       	subi	r24, 0xFC	; 252
     cc0:	9f 40       	sbci	r25, 0x0F	; 15
     cc2:	a0 f0       	brcs	.+40     	; 0xcec <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xa2>
      bootRecord.nextLogRecordAddress = sizeof(BootRecord);
     cc4:	80 e2       	ldi	r24, 0x20	; 32
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	90 93 cc 01 	sts	0x01CC, r25
     ccc:	80 93 cb 01 	sts	0x01CB, r24
      if (!bootRecord.boolPreferencies.isLogOverflow){
     cd0:	80 91 cd 01 	lds	r24, 0x01CD
     cd4:	80 fd       	sbrc	r24, 0
     cd6:	0a c0       	rjmp	.+20     	; 0xcec <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xa2>
        bootRecord.boolPreferencies.isLogOverflow = true;
     cd8:	81 60       	ori	r24, 0x01	; 1
     cda:	80 93 cd 01 	sts	0x01CD, r24
        GB_Storage::write(OFFSETOF(BootRecord, boolPreferencies), &(bootRecord.boolPreferencies), sizeof(bootRecord.boolPreferencies)); 
     cde:	8c e0       	ldi	r24, 0x0C	; 12
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	6d ec       	ldi	r22, 0xCD	; 205
     ce4:	71 e0       	ldi	r23, 0x01	; 1
     ce6:	41 e0       	ldi	r20, 0x01	; 1
     ce8:	0e 94 de 05 	call	0xbbc	; 0xbbc <_ZN10GB_Storage5writeEjPKvh>
      }
    }
    GB_Storage::write(OFFSETOF(BootRecord, nextLogRecordAddress), &(bootRecord.nextLogRecordAddress), sizeof(bootRecord.nextLogRecordAddress)); 
     cec:	8a e0       	ldi	r24, 0x0A	; 10
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	6b ec       	ldi	r22, 0xCB	; 203
     cf2:	71 e0       	ldi	r23, 0x01	; 1
     cf4:	42 e0       	ldi	r20, 0x02	; 2
     cf6:	0e 94 de 05 	call	0xbbc	; 0xbbc <_ZN10GB_Storage5writeEjPKvh>
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	01 c0       	rjmp	.+2      	; 0xd00 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb6>
    if (!storeLog){
      return false;
    }
    GB_Storage::write(bootRecord.nextLogRecordAddress, &logRecord, sizeof(LogRecord));
    increaseLogPointer();
    return true;
     cfe:	80 e0       	ldi	r24, 0x00	; 0
  }
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	08 95       	ret

00000d06 <_ZN10GB_Storage4readEj>:
    Wire.write(data);
    Wire.endTransmission();  
    delay(10);  // http://www.hobbytronics.co.uk/arduino-external-eeprom
  }

  static byte read(word address) {
     d06:	0f 93       	push	r16
     d08:	1f 93       	push	r17
     d0a:	8c 01       	movw	r16, r24
    Wire.beginTransmission(AT24C32);
     d0c:	8b ea       	ldi	r24, 0xAB	; 171
     d0e:	92 e0       	ldi	r25, 0x02	; 2
     d10:	60 e5       	ldi	r22, 0x50	; 80
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	0e 94 b5 24 	call	0x496a	; 0x496a <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((byte)(address >> 8)); // MSB
     d18:	8b ea       	ldi	r24, 0xAB	; 171
     d1a:	92 e0       	ldi	r25, 0x02	; 2
     d1c:	61 2f       	mov	r22, r17
     d1e:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <_ZN7TwoWire5writeEh>
    Wire.write((byte)(address & 0xFF)); // LSB
     d22:	8b ea       	ldi	r24, 0xAB	; 171
     d24:	92 e0       	ldi	r25, 0x02	; 2
     d26:	60 2f       	mov	r22, r16
     d28:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <_ZN7TwoWire5writeEh>
    Wire.endTransmission();
     d2c:	8b ea       	ldi	r24, 0xAB	; 171
     d2e:	92 e0       	ldi	r25, 0x02	; 2
     d30:	0e 94 7a 25 	call	0x4af4	; 0x4af4 <_ZN7TwoWire15endTransmissionEv>
    delay(10);  // http://www.hobbytronics.co.uk/arduino-external-eeprom
     d34:	6a e0       	ldi	r22, 0x0A	; 10
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <delay>
    Wire.requestFrom(AT24C32, 1);
     d40:	8b ea       	ldi	r24, 0xAB	; 171
     d42:	92 e0       	ldi	r25, 0x02	; 2
     d44:	60 e5       	ldi	r22, 0x50	; 80
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	41 e0       	ldi	r20, 0x01	; 1
     d4a:	50 e0       	ldi	r21, 0x00	; 0
     d4c:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <_ZN7TwoWire11requestFromEii>
    if (Wire.available()) {
     d50:	8b ea       	ldi	r24, 0xAB	; 171
     d52:	92 e0       	ldi	r25, 0x02	; 2
     d54:	0e 94 bf 24 	call	0x497e	; 0x497e <_ZN7TwoWire9availableEv>
     d58:	89 2b       	or	r24, r25
     d5a:	11 f4       	brne	.+4      	; 0xd60 <_ZN10GB_Storage4readEj+0x5a>
     d5c:	8f ef       	ldi	r24, 0xFF	; 255
     d5e:	04 c0       	rjmp	.+8      	; 0xd68 <_ZN10GB_Storage4readEj+0x62>
      return Wire.read();
     d60:	8b ea       	ldi	r24, 0xAB	; 171
     d62:	92 e0       	ldi	r25, 0x02	; 2
     d64:	0e 94 c8 24 	call	0x4990	; 0x4990 <_ZN7TwoWire4readEv>
    } 
    else {
      return 0xFF;
    }
  }
     d68:	1f 91       	pop	r17
     d6a:	0f 91       	pop	r16
     d6c:	08 95       	ret

00000d6e <_ZL15flashStringLoadPK19__FlashStringHelper>:

static boolean flashStringEquals(const char PROGMEM* pstr, const String &str){ 
  return flashStringEquals((const __FlashStringHelper*) pstr, str);
}

static String flashStringLoad(const __FlashStringHelper* fstr){ 
     d6e:	cf 92       	push	r12
     d70:	df 92       	push	r13
     d72:	ef 92       	push	r14
     d74:	ff 92       	push	r15
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	f8 2e       	mov	r15, r24
     d80:	e9 2e       	mov	r14, r25
     d82:	6b 01       	movw	r12, r22
  String str;
     d84:	60 e0       	ldi	r22, 0x00	; 0
     d86:	71 e0       	ldi	r23, 0x01	; 1
     d88:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <_ZN6StringC1EPKc>
  HTTP_TAG_OPEN, HTTP_TAG_CLOSED, HTTP_TAG_SINGLE
};

static int flashStringLength(const __FlashStringHelper* fstr){ 
    const char PROGMEM * pstr = (const char PROGMEM *) fstr;
    return strlen_P(pstr);
     d8c:	c6 01       	movw	r24, r12
     d8e:	0e 94 0e 05 	call	0xa1c	; 0xa1c <strlen_P>
     d92:	ec 01       	movw	r28, r24
     d94:	00 e0       	ldi	r16, 0x00	; 0
     d96:	10 e0       	ldi	r17, 0x00	; 0
     d98:	0b c0       	rjmp	.+22     	; 0xdb0 <_ZL15flashStringLoadPK19__FlashStringHelper+0x42>
static char flashStringCharAt(const __FlashStringHelper* fstr, int index){ 
  if (index >= flashStringLength(fstr)){
    return 0xFF; 
  }
  const char PROGMEM * pstr = (const char PROGMEM *) fstr;
  return pgm_read_byte(pstr+index);
     d9a:	f6 01       	movw	r30, r12
     d9c:	e0 0f       	add	r30, r16
     d9e:	f1 1f       	adc	r31, r17
     da0:	e4 91       	lpm	r30, Z+
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
     da2:	8f 2d       	mov	r24, r15
     da4:	9e 2d       	mov	r25, r14
     da6:	6e 2f       	mov	r22, r30
     da8:	0e 94 7d 37 	call	0x6efa	; 0x6efa <_ZN6String6concatEc>
  return flashStringEquals((const __FlashStringHelper*) pstr, str);
}

static String flashStringLoad(const __FlashStringHelper* fstr){ 
  String str;
  for (int i = 0; i< flashStringLength(fstr); i++){
     dac:	0f 5f       	subi	r16, 0xFF	; 255
     dae:	1f 4f       	sbci	r17, 0xFF	; 255
     db0:	0c 17       	cp	r16, r28
     db2:	1d 07       	cpc	r17, r29
     db4:	94 f3       	brlt	.-28     	; 0xd9a <_ZL15flashStringLoadPK19__FlashStringHelper+0x2c>
    str += flashStringCharAt(fstr, i);
  }
  return str;
}
     db6:	8f 2d       	mov	r24, r15
     db8:	9e 2d       	mov	r25, r14
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	1f 91       	pop	r17
     dc0:	0f 91       	pop	r16
     dc2:	ff 90       	pop	r15
     dc4:	ef 90       	pop	r14
     dc6:	df 90       	pop	r13
     dc8:	cf 90       	pop	r12
     dca:	08 95       	ret

00000dcc <_ZL15flashStringLoadPKc>:

static String flashStringLoad(const char PROGMEM* pstr){ 
     dcc:	0f 93       	push	r16
     dce:	1f 93       	push	r17
     dd0:	8c 01       	movw	r16, r24
  return flashStringLoad((const __FlashStringHelper*) pstr);
     dd2:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_ZL15flashStringLoadPK19__FlashStringHelper>
}
     dd6:	c8 01       	movw	r24, r16
     dd8:	1f 91       	pop	r17
     dda:	0f 91       	pop	r16
     ddc:	08 95       	ret

00000dde <_ZN13GB_PrintDirty6getHEXEhh>:
    }
    out += number;
    return out.substring(out.length()-numberOfDigits);
  }

  static String getHEX(byte number, boolean addPrefix = false){
     dde:	bf 92       	push	r11
     de0:	cf 92       	push	r12
     de2:	df 92       	push	r13
     de4:	ef 92       	push	r14
     de6:	ff 92       	push	r15
     de8:	0f 93       	push	r16
     dea:	1f 93       	push	r17
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	6c 97       	sbiw	r28, 0x1c	; 28
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	f8 94       	cli
     dfa:	de bf       	out	0x3e, r29	; 62
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	cd bf       	out	0x3d, r28	; 61
     e00:	d8 2e       	mov	r13, r24
     e02:	c9 2e       	mov	r12, r25
     e04:	16 2f       	mov	r17, r22
     e06:	b4 2e       	mov	r11, r20
    String out(number, HEX);
     e08:	40 e1       	ldi	r20, 0x10	; 16
     e0a:	0e 94 14 38 	call	0x7028	; 0x7028 <_ZN6StringC1Ehh>
    out.toUpperCase();
     e0e:	8d 2d       	mov	r24, r13
     e10:	9c 2d       	mov	r25, r12
     e12:	0e 94 05 36 	call	0x6c0a	; 0x6c0a <_ZN6String11toUpperCaseEv>
    if(number < 0x10){
     e16:	10 31       	cpi	r17, 0x10	; 16
     e18:	f8 f4       	brcc	.+62     	; 0xe58 <_ZN13GB_PrintDirty6getHEXEhh+0x7a>
      out = String('0') + out;
     e1a:	7e 01       	movw	r14, r28
     e1c:	08 94       	sec
     e1e:	e1 1c       	adc	r14, r1
     e20:	f1 1c       	adc	r15, r1
     e22:	c7 01       	movw	r24, r14
     e24:	60 e3       	ldi	r22, 0x30	; 48
     e26:	0e 94 46 38 	call	0x708c	; 0x708c <_ZN6StringC1Ec>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
     e2a:	8e 01       	movw	r16, r28
     e2c:	08 5f       	subi	r16, 0xF8	; 248
     e2e:	1f 4f       	sbci	r17, 0xFF	; 255
     e30:	c8 01       	movw	r24, r16
     e32:	b7 01       	movw	r22, r14
     e34:	0e 94 c9 38 	call	0x7192	; 0x7192 <_ZN6StringC2ERKS_>
     e38:	c8 01       	movw	r24, r16
     e3a:	6d 2d       	mov	r22, r13
     e3c:	7c 2d       	mov	r23, r12
     e3e:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <_ZplRK15StringSumHelperRK6String>
     e42:	bc 01       	movw	r22, r24
     e44:	8d 2d       	mov	r24, r13
     e46:	9c 2d       	mov	r25, r12
     e48:	0e 94 b2 38 	call	0x7164	; 0x7164 <_ZN6StringaSERKS_>
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
{
     e4c:	c8 01       	movw	r24, r16
     e4e:	0e 94 da 38 	call	0x71b4	; 0x71b4 <_ZN6StringD2Ev>
     e52:	c7 01       	movw	r24, r14
     e54:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    }
    if (addPrefix){
     e58:	bb 20       	and	r11, r11
     e5a:	09 f1       	breq	.+66     	; 0xe9e <_ZN13GB_PrintDirty6getHEXEhh+0xc0>
      out = flashStringLoad(S_0x) + out;
     e5c:	8f e0       	ldi	r24, 0x0F	; 15
     e5e:	e8 2e       	mov	r14, r24
     e60:	f1 2c       	mov	r15, r1
     e62:	ec 0e       	add	r14, r28
     e64:	fd 1e       	adc	r15, r29
     e66:	c7 01       	movw	r24, r14
     e68:	66 e7       	ldi	r22, 0x76	; 118
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZL15flashStringLoadPKc>
public:
	StringSumHelper(const String &s) : String(s) {}
     e70:	8e 01       	movw	r16, r28
     e72:	0a 5e       	subi	r16, 0xEA	; 234
     e74:	1f 4f       	sbci	r17, 0xFF	; 255
     e76:	c8 01       	movw	r24, r16
     e78:	b7 01       	movw	r22, r14
     e7a:	0e 94 c9 38 	call	0x7192	; 0x7192 <_ZN6StringC2ERKS_>
     e7e:	c8 01       	movw	r24, r16
     e80:	6d 2d       	mov	r22, r13
     e82:	7c 2d       	mov	r23, r12
     e84:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <_ZplRK15StringSumHelperRK6String>
     e88:	bc 01       	movw	r22, r24
     e8a:	8d 2d       	mov	r24, r13
     e8c:	9c 2d       	mov	r25, r12
     e8e:	0e 94 b2 38 	call	0x7164	; 0x7164 <_ZN6StringaSERKS_>
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
{
     e92:	c8 01       	movw	r24, r16
     e94:	0e 94 da 38 	call	0x71b4	; 0x71b4 <_ZN6StringD2Ev>
     e98:	c7 01       	movw	r24, r14
     e9a:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    }
    return out;
  }
     e9e:	8d 2d       	mov	r24, r13
     ea0:	9c 2d       	mov	r25, r12
     ea2:	6c 96       	adiw	r28, 0x1c	; 28
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	f8 94       	cli
     ea8:	de bf       	out	0x3e, r29	; 62
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	cd bf       	out	0x3d, r28	; 61
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	1f 91       	pop	r17
     eb4:	0f 91       	pop	r16
     eb6:	ff 90       	pop	r15
     eb8:	ef 90       	pop	r14
     eba:	df 90       	pop	r13
     ebc:	cf 90       	pop	r12
     ebe:	bf 90       	pop	r11
     ec0:	08 95       	ret

00000ec2 <_ZN13GB_PrintDirty8printHEXEhh>:
  // utility function for digital clock display: prints preceding colon and leading 0
  static void print2digits(byte number){
    Serial.print(getFixedDigitsString(number, 2));
  }

  static void printHEX(byte number, boolean addPrefix = false){
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	27 97       	sbiw	r28, 0x07	; 7
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	f8 94       	cli
     ed4:	de bf       	out	0x3e, r29	; 62
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	cd bf       	out	0x3d, r28	; 61
     eda:	68 2f       	mov	r22, r24
    Serial.print(getHEX(number));
     edc:	8e 01       	movw	r16, r28
     ede:	0f 5f       	subi	r16, 0xFF	; 255
     ee0:	1f 4f       	sbci	r17, 0xFF	; 255
     ee2:	c8 01       	movw	r24, r16
     ee4:	40 e0       	ldi	r20, 0x00	; 0
     ee6:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZN13GB_PrintDirty6getHEXEhh>
     eea:	87 eb       	ldi	r24, 0xB7	; 183
     eec:	93 e0       	ldi	r25, 0x03	; 3
     eee:	b8 01       	movw	r22, r16
     ef0:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <_ZN5Print5printERK6String>
     ef4:	c8 01       	movw	r24, r16
     ef6:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
  }
     efa:	27 96       	adiw	r28, 0x07	; 7
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	f8 94       	cli
     f00:	de bf       	out	0x3e, r29	; 62
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	cd bf       	out	0x3d, r28	; 61
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	1f 91       	pop	r17
     f0c:	0f 91       	pop	r16
     f0e:	08 95       	ret

00000f10 <_ZL17flashStringEqualsPK19__FlashStringHelperRK6String>:
  }
  const char PROGMEM * pstr = (const char PROGMEM *) fstr;
  return pgm_read_byte(pstr+index);
}

static boolean flashStringEquals(const __FlashStringHelper* fstr, const String &str){ 
     f10:	af 92       	push	r10
     f12:	bf 92       	push	r11
     f14:	cf 92       	push	r12
     f16:	df 92       	push	r13
     f18:	ef 92       	push	r14
     f1a:	ff 92       	push	r15
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	5c 01       	movw	r10, r24
     f24:	6b 01       	movw	r12, r22
  HTTP_TAG_OPEN, HTTP_TAG_CLOSED, HTTP_TAG_SINGLE
};

static int flashStringLength(const __FlashStringHelper* fstr){ 
    const char PROGMEM * pstr = (const char PROGMEM *) fstr;
    return strlen_P(pstr);
     f26:	0e 94 0e 05 	call	0xa1c	; 0xa1c <strlen_P>
     f2a:	7c 01       	movw	r14, r24
  const char PROGMEM * pstr = (const char PROGMEM *) fstr;
  return pgm_read_byte(pstr+index);
}

static boolean flashStringEquals(const __FlashStringHelper* fstr, const String &str){ 
  if (flashStringLength(fstr) != str.length()) {
     f2c:	f6 01       	movw	r30, r12
     f2e:	84 81       	ldd	r24, Z+4	; 0x04
     f30:	95 81       	ldd	r25, Z+5	; 0x05
     f32:	e8 16       	cp	r14, r24
     f34:	f9 06       	cpc	r15, r25
     f36:	99 f4       	brne	.+38     	; 0xf5e <_ZL17flashStringEqualsPK19__FlashStringHelperRK6String+0x4e>
     f38:	c0 e0       	ldi	r28, 0x00	; 0
     f3a:	d0 e0       	ldi	r29, 0x00	; 0
     f3c:	0b c0       	rjmp	.+22     	; 0xf54 <_ZL17flashStringEqualsPK19__FlashStringHelperRK6String+0x44>
static char flashStringCharAt(const __FlashStringHelper* fstr, int index){ 
  if (index >= flashStringLength(fstr)){
    return 0xFF; 
  }
  const char PROGMEM * pstr = (const char PROGMEM *) fstr;
  return pgm_read_byte(pstr+index);
     f3e:	f5 01       	movw	r30, r10
     f40:	ec 0f       	add	r30, r28
     f42:	fd 1f       	adc	r31, r29
     f44:	14 91       	lpm	r17, Z+
static boolean flashStringEquals(const __FlashStringHelper* fstr, const String &str){ 
  if (flashStringLength(fstr) != str.length()) {
    return false; 
  }
  for (int i = 0; i< flashStringLength(fstr); i++){
    if (flashStringCharAt(fstr, i) != str[i]){
     f46:	c6 01       	movw	r24, r12
     f48:	be 01       	movw	r22, r28
     f4a:	0e 94 99 35 	call	0x6b32	; 0x6b32 <_ZNK6StringixEj>
     f4e:	18 17       	cp	r17, r24
     f50:	31 f4       	brne	.+12     	; 0xf5e <_ZL17flashStringEqualsPK19__FlashStringHelperRK6String+0x4e>

static boolean flashStringEquals(const __FlashStringHelper* fstr, const String &str){ 
  if (flashStringLength(fstr) != str.length()) {
    return false; 
  }
  for (int i = 0; i< flashStringLength(fstr); i++){
     f52:	21 96       	adiw	r28, 0x01	; 1
     f54:	ce 15       	cp	r28, r14
     f56:	df 05       	cpc	r29, r15
     f58:	94 f3       	brlt	.-28     	; 0xf3e <_ZL17flashStringEqualsPK19__FlashStringHelperRK6String+0x2e>
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	01 c0       	rjmp	.+2      	; 0xf60 <_ZL17flashStringEqualsPK19__FlashStringHelperRK6String+0x50>
     f5e:	80 e0       	ldi	r24, 0x00	; 0
    if (flashStringCharAt(fstr, i) != str[i]){
      return false;
    }
  }
  return true;
}
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	1f 91       	pop	r17
     f66:	ff 90       	pop	r15
     f68:	ef 90       	pop	r14
     f6a:	df 90       	pop	r13
     f6c:	cf 90       	pop	r12
     f6e:	bf 90       	pop	r11
     f70:	af 90       	pop	r10
     f72:	08 95       	ret

00000f74 <_ZN13GB_PrintDirty8printHEXERK6String>:


  static void printHEX(const String &input){   
     f74:	0f 93       	push	r16
     f76:	1f 93       	push	r17
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	8c 01       	movw	r16, r24
     f7e:	c0 e0       	ldi	r28, 0x00	; 0
     f80:	d0 e0       	ldi	r29, 0x00	; 0
     f82:	13 c0       	rjmp	.+38     	; 0xfaa <_ZN13GB_PrintDirty8printHEXERK6String+0x36>
    for(int i = 0; i<input.length(); i++){
      byte c = input[i];
     f84:	c8 01       	movw	r24, r16
     f86:	be 01       	movw	r22, r28
     f88:	0e 94 99 35 	call	0x6b32	; 0x6b32 <_ZNK6StringixEj>
      printHEX(c);
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	0e 94 61 07 	call	0xec2	; 0xec2 <_ZN13GB_PrintDirty8printHEXEhh>
      if ((i+1)<input.length()) {
     f92:	21 96       	adiw	r28, 0x01	; 1
     f94:	f8 01       	movw	r30, r16
     f96:	84 81       	ldd	r24, Z+4	; 0x04
     f98:	95 81       	ldd	r25, Z+5	; 0x05
     f9a:	c8 17       	cp	r28, r24
     f9c:	d9 07       	cpc	r29, r25
     f9e:	28 f4       	brcc	.+10     	; 0xfaa <_ZN13GB_PrintDirty8printHEXERK6String+0x36>
        Serial.print(' '); 
     fa0:	87 eb       	ldi	r24, 0xB7	; 183
     fa2:	93 e0       	ldi	r25, 0x03	; 3
     fa4:	60 e2       	ldi	r22, 0x20	; 32
     fa6:	0e 94 fc 33 	call	0x67f8	; 0x67f8 <_ZN5Print5printEc>
    Serial.print(getHEX(number));
  }


  static void printHEX(const String &input){   
    for(int i = 0; i<input.length(); i++){
     faa:	f8 01       	movw	r30, r16
     fac:	84 81       	ldd	r24, Z+4	; 0x04
     fae:	95 81       	ldd	r25, Z+5	; 0x05
     fb0:	c8 17       	cp	r28, r24
     fb2:	d9 07       	cpc	r29, r25
     fb4:	38 f3       	brcs	.-50     	; 0xf84 <_ZN13GB_PrintDirty8printHEXERK6String+0x10>
      printHEX(c);
      if ((i+1)<input.length()) {
        Serial.print(' '); 
      }
    }
  }  
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	1f 91       	pop	r17
     fbc:	0f 91       	pop	r16
     fbe:	08 95       	ret

00000fc0 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String>:

  static void printWithoutCRLF(const String &input){   
     fc0:	0f 93       	push	r16
     fc2:	1f 93       	push	r17
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	8c 01       	movw	r16, r24
     fca:	c0 e0       	ldi	r28, 0x00	; 0
     fcc:	d0 e0       	ldi	r29, 0x00	; 0
     fce:	22 c0       	rjmp	.+68     	; 0x1014 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x54>
    for (int i = 0; i<input.length(); i++){
      if (input[i] == '\r'){
     fd0:	c8 01       	movw	r24, r16
     fd2:	be 01       	movw	r22, r28
     fd4:	0e 94 99 35 	call	0x6b32	; 0x6b32 <_ZNK6StringixEj>
     fd8:	8d 30       	cpi	r24, 0x0D	; 13
     fda:	29 f4       	brne	.+10     	; 0xfe6 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x26>
        Serial.print(F("\\r"));
     fdc:	87 eb       	ldi	r24, 0xB7	; 183
     fde:	93 e0       	ldi	r25, 0x03	; 3
     fe0:	6f ef       	ldi	r22, 0xFF	; 255
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	0a c0       	rjmp	.+20     	; 0xffa <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x3a>
      } 
      else if (input[i] == '\n'){
     fe6:	c8 01       	movw	r24, r16
     fe8:	be 01       	movw	r22, r28
     fea:	0e 94 99 35 	call	0x6b32	; 0x6b32 <_ZNK6StringixEj>
     fee:	8a 30       	cpi	r24, 0x0A	; 10
     ff0:	39 f4       	brne	.+14     	; 0x1000 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x40>
        Serial.print(F("\\n"));
     ff2:	87 eb       	ldi	r24, 0xB7	; 183
     ff4:	93 e0       	ldi	r25, 0x03	; 3
     ff6:	6c ef       	ldi	r22, 0xFC	; 252
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <_ZN5Print5printEPK19__FlashStringHelper>
     ffe:	09 c0       	rjmp	.+18     	; 0x1012 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x52>
      } 
      else {
        Serial.print(input[i]);
    1000:	c8 01       	movw	r24, r16
    1002:	be 01       	movw	r22, r28
    1004:	0e 94 99 35 	call	0x6b32	; 0x6b32 <_ZNK6StringixEj>
    1008:	68 2f       	mov	r22, r24
    100a:	87 eb       	ldi	r24, 0xB7	; 183
    100c:	93 e0       	ldi	r25, 0x03	; 3
    100e:	0e 94 fc 33 	call	0x67f8	; 0x67f8 <_ZN5Print5printEc>
      }
    }
  }  

  static void printWithoutCRLF(const String &input){   
    for (int i = 0; i<input.length(); i++){
    1012:	21 96       	adiw	r28, 0x01	; 1
    1014:	f8 01       	movw	r30, r16
    1016:	84 81       	ldd	r24, Z+4	; 0x04
    1018:	95 81       	ldd	r25, Z+5	; 0x05
    101a:	c8 17       	cp	r28, r24
    101c:	d9 07       	cpc	r29, r25
    101e:	c0 f2       	brcs	.-80     	; 0xfd0 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x10>
      } 
      else {
        Serial.print(input[i]);
      }
    }
  }
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	08 95       	ret

0000102a <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>:
    Serial.print(data);
    sendWifiFrameStop();
  }


  static void sendWifiFrameStart(const byte portDescriptor, word length){ // 1024 bytes max (Wi-Fi module restriction)   
    102a:	df 92       	push	r13
    102c:	ef 92       	push	r14
    102e:	ff 92       	push	r15
    1030:	0f 93       	push	r16
    1032:	1f 93       	push	r17
    1034:	d8 2e       	mov	r13, r24
    1036:	7b 01       	movw	r14, r22
    Serial.print(F("at+send_data="));
    1038:	07 eb       	ldi	r16, 0xB7	; 183
    103a:	13 e0       	ldi	r17, 0x03	; 3
    103c:	c8 01       	movw	r24, r16
    103e:	69 eb       	ldi	r22, 0xB9	; 185
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(portDescriptor);
    1046:	c8 01       	movw	r24, r16
    1048:	6d 2d       	mov	r22, r13
    104a:	4a e0       	ldi	r20, 0x0A	; 10
    104c:	50 e0       	ldi	r21, 0x00	; 0
    104e:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <_ZN5Print5printEhi>
    Serial.print(',');
    1052:	c8 01       	movw	r24, r16
    1054:	6c e2       	ldi	r22, 0x2C	; 44
    1056:	0e 94 fc 33 	call	0x67f8	; 0x67f8 <_ZN5Print5printEc>
    Serial.print(length);
    105a:	c8 01       	movw	r24, r16
    105c:	b7 01       	movw	r22, r14
    105e:	4a e0       	ldi	r20, 0x0A	; 10
    1060:	50 e0       	ldi	r21, 0x00	; 0
    1062:	0e 94 c7 34 	call	0x698e	; 0x698e <_ZN5Print5printEji>
    Serial.print(',');
    1066:	c8 01       	movw	r24, r16
    1068:	6c e2       	ldi	r22, 0x2C	; 44
    106a:	0e 94 fc 33 	call	0x67f8	; 0x67f8 <_ZN5Print5printEc>
  }
    106e:	1f 91       	pop	r17
    1070:	0f 91       	pop	r16
    1072:	ff 90       	pop	r15
    1074:	ef 90       	pop	r14
    1076:	df 90       	pop	r13
    1078:	08 95       	ret

0000107a <_ZL21printFatalErrorOnBootPK19__FlashStringHelper>:
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	ec 01       	movw	r28, r24
    1080:	80 91 ad 01 	lds	r24, 0x01AD
    1084:	88 23       	and	r24, r24
    1086:	59 f0       	breq	.+22     	; 0x109e <_ZL21printFatalErrorOnBootPK19__FlashStringHelper+0x24>
    1088:	87 eb       	ldi	r24, 0xB7	; 183
    108a:	93 e0       	ldi	r25, 0x03	; 3
    108c:	62 eb       	ldi	r22, 0xB2	; 178
    108e:	76 e0       	ldi	r23, 0x06	; 6
    1090:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <_ZN5Print5printEPK19__FlashStringHelper>
    1094:	87 eb       	ldi	r24, 0xB7	; 183
    1096:	93 e0       	ldi	r25, 0x03	; 3
    1098:	be 01       	movw	r22, r28
    109a:	0e 94 24 34 	call	0x6848	; 0x6848 <_ZN5Print7printlnEPK19__FlashStringHelper>
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	08 95       	ret

000010a4 <_ZL17printStatusOnBootPK19__FlashStringHelper>:
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
    10a8:	ec 01       	movw	r28, r24
    10aa:	80 91 ad 01 	lds	r24, 0x01AD
    10ae:	88 23       	and	r24, r24
    10b0:	89 f0       	breq	.+34     	; 0x10d4 <_ZL17printStatusOnBootPK19__FlashStringHelper+0x30>
    10b2:	87 eb       	ldi	r24, 0xB7	; 183
    10b4:	93 e0       	ldi	r25, 0x03	; 3
    10b6:	64 ec       	ldi	r22, 0xC4	; 196
    10b8:	76 e0       	ldi	r23, 0x06	; 6
    10ba:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <_ZN5Print5printEPK19__FlashStringHelper>
    10be:	87 eb       	ldi	r24, 0xB7	; 183
    10c0:	93 e0       	ldi	r25, 0x03	; 3
    10c2:	be 01       	movw	r22, r28
    10c4:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <_ZN5Print5printEPK19__FlashStringHelper>
    10c8:	87 eb       	ldi	r24, 0xB7	; 183
    10ca:	93 e0       	ldi	r25, 0x03	; 3
    10cc:	60 ec       	ldi	r22, 0xC0	; 192
    10ce:	76 e0       	ldi	r23, 0x06	; 6
    10d0:	0e 94 24 34 	call	0x6848	; 0x6848 <_ZN5Print7printlnEPK19__FlashStringHelper>
    10d4:	df 91       	pop	r29
    10d6:	cf 91       	pop	r28
    10d8:	08 95       	ret

000010da <_ZN15GB_SerialHelper24readByteFromSerialBufferERh>:

  /////////////////////////////////////////////////////////////////////
  //                          SERIAL READ                            //
  /////////////////////////////////////////////////////////////////////

  static byte readByteFromSerialBuffer(boolean &isError){
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	ec 01       	movw	r28, r24
    if (Serial.available()){
    10e0:	87 eb       	ldi	r24, 0xB7	; 183
    10e2:	93 e0       	ldi	r25, 0x03	; 3
    10e4:	0e 94 9e 32 	call	0x653c	; 0x653c <_ZN14HardwareSerial9availableEv>
    10e8:	89 2b       	or	r24, r25
    10ea:	59 f0       	breq	.+22     	; 0x1102 <_ZN15GB_SerialHelper24readByteFromSerialBufferERh+0x28>
      delay(5);
    10ec:	65 e0       	ldi	r22, 0x05	; 5
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <delay>
      return Serial.read();
    10f8:	87 eb       	ldi	r24, 0xB7	; 183
    10fa:	93 e0       	ldi	r25, 0x03	; 3
    10fc:	0e 94 cf 32 	call	0x659e	; 0x659e <_ZN14HardwareSerial4readEv>
    1100:	03 c0       	rjmp	.+6      	; 0x1108 <_ZN15GB_SerialHelper24readByteFromSerialBufferERh+0x2e>
    } 
    else {
      isError = true;
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	88 83       	st	Y, r24
    1106:	8f ef       	ldi	r24, 0xFF	; 255
      return 0xFF;
    } 
  }
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	08 95       	ret

0000110e <_ZN15GB_SerialHelper17cleanSerialBufferEv>:
    }
    isError = ((index) == length); 
  }

  static void cleanSerialBuffer(){
    delay(10);
    110e:	6a e0       	ldi	r22, 0x0A	; 10
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <delay>
    111a:	04 c0       	rjmp	.+8      	; 0x1124 <_ZN15GB_SerialHelper17cleanSerialBufferEv+0x16>
    while (Serial.available()){
      Serial.read();
    111c:	87 eb       	ldi	r24, 0xB7	; 183
    111e:	93 e0       	ldi	r25, 0x03	; 3
    1120:	0e 94 cf 32 	call	0x659e	; 0x659e <_ZN14HardwareSerial4readEv>
    isError = ((index) == length); 
  }

  static void cleanSerialBuffer(){
    delay(10);
    while (Serial.available()){
    1124:	87 eb       	ldi	r24, 0xB7	; 183
    1126:	93 e0       	ldi	r25, 0x03	; 3
    1128:	0e 94 9e 32 	call	0x653c	; 0x653c <_ZN14HardwareSerial9availableEv>
    112c:	89 2b       	or	r24, r25
    112e:	b1 f7       	brne	.-20     	; 0x111c <_ZN15GB_SerialHelper17cleanSerialBufferEv+0xe>
      Serial.read();
    }
  }
    1130:	08 95       	ret

00001132 <_ZN15GB_SerialHelper13printDirtyEndEv>:
  static /*volatile*/ boolean useSerialMonitor;
  static /*volatile*/ boolean useSerialWifi;


  static void printDirtyEnd(){
    if (useSerialWifi) {
    1132:	80 91 ae 01 	lds	r24, 0x01AE
    1136:	88 23       	and	r24, r24
    1138:	11 f0       	breq	.+4      	; 0x113e <_ZN15GB_SerialHelper13printDirtyEndEv+0xc>
      cleanSerialBuffer();
    113a:	0e 94 87 08 	call	0x110e	; 0x110e <_ZN15GB_SerialHelper17cleanSerialBufferEv>
    113e:	08 95       	ret

00001140 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>:
  }


private:

  static void showWifiStatus(const __FlashStringHelper* str, boolean newLine = true){ //TODO 
    1140:	1f 93       	push	r17
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	ec 01       	movw	r28, r24
    1148:	16 2f       	mov	r17, r22
    if (useSerialMonitor){
    114a:	80 91 ad 01 	lds	r24, 0x01AD
    114e:	88 23       	and	r24, r24
    1150:	79 f0       	breq	.+30     	; 0x1170 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh+0x30>
      Serial.print(FS(S_WIFI));
    1152:	87 eb       	ldi	r24, 0xB7	; 183
    1154:	93 e0       	ldi	r25, 0x03	; 3
    1156:	65 ef       	ldi	r22, 0xF5	; 245
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.println(str);
    115e:	87 eb       	ldi	r24, 0xB7	; 183
    1160:	93 e0       	ldi	r25, 0x03	; 3
    1162:	be 01       	movw	r22, r28
    1164:	0e 94 24 34 	call	0x6848	; 0x6848 <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (newLine){    
    1168:	11 23       	and	r17, r17
    116a:	11 f0       	breq	.+4      	; 0x1170 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh+0x30>
        printDirtyEnd();
    116c:	0e 94 99 08 	call	0x1132	; 0x1132 <_ZN15GB_SerialHelper13printDirtyEndEv>
      }
    }
  }
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	1f 91       	pop	r17
    1176:	08 95       	ret

00001178 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih>:
    }

    return false;
  }

  static String wifiExecuteRawCommand(const __FlashStringHelper* command = 0, int maxResponseDeleay = -1, boolean rebootOnFalse = true){
    1178:	bf 92       	push	r11
    117a:	cf 92       	push	r12
    117c:	df 92       	push	r13
    117e:	ef 92       	push	r14
    1180:	ff 92       	push	r15
    1182:	0f 93       	push	r16
    1184:	1f 93       	push	r17
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	0f 92       	push	r0
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	d8 2e       	mov	r13, r24
    1192:	c9 2e       	mov	r12, r25
    1194:	7a 01       	movw	r14, r20
    1196:	b2 2e       	mov	r11, r18
    if (command == 0){
    1198:	61 15       	cp	r22, r1
    119a:	71 05       	cpc	r23, r1
    119c:	29 f4       	brne	.+10     	; 0x11a8 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih+0x30>
      Serial.println();
    119e:	87 eb       	ldi	r24, 0xB7	; 183
    11a0:	93 e0       	ldi	r25, 0x03	; 3
    11a2:	0e 94 04 34 	call	0x6808	; 0x6808 <_ZN5Print7printlnEv>
    11a6:	04 c0       	rjmp	.+8      	; 0x11b0 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih+0x38>
    } 
    else {
      Serial.println(command);
    11a8:	87 eb       	ldi	r24, 0xB7	; 183
    11aa:	93 e0       	ldi	r25, 0x03	; 3
    11ac:	0e 94 24 34 	call	0x6848	; 0x6848 <_ZN5Print7printlnEPK19__FlashStringHelper>
    }

    if (maxResponseDeleay < 0){
    11b0:	f7 fe       	sbrs	r15, 7
    11b2:	04 c0       	rjmp	.+8      	; 0x11bc <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih+0x44>
    11b4:	98 e8       	ldi	r25, 0x88	; 136
    11b6:	e9 2e       	mov	r14, r25
    11b8:	93 e1       	ldi	r25, 0x13	; 19
    11ba:	f9 2e       	mov	r15, r25
    11bc:	00 e0       	ldi	r16, 0x00	; 0
    11be:	10 e0       	ldi	r17, 0x00	; 0
      maxResponseDeleay = WIFI_RESPONSE_DELAY_MAX;
    }    

    for (int i=0; i <= maxResponseDeleay; i += WIFI_RESPONSE_CHECK_INTERVAL){
      delay(WIFI_RESPONSE_CHECK_INTERVAL);
    11c0:	6a e0       	ldi	r22, 0x0A	; 10
    11c2:	70 e0       	ldi	r23, 0x00	; 0
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <delay>
      if (Serial.available()){
    11cc:	87 eb       	ldi	r24, 0xB7	; 183
    11ce:	93 e0       	ldi	r25, 0x03	; 3
    11d0:	0e 94 9e 32 	call	0x653c	; 0x653c <_ZN14HardwareSerial9availableEv>
    11d4:	89 2b       	or	r24, r25
    11d6:	29 f4       	brne	.+10     	; 0x11e2 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih+0x6a>

    if (maxResponseDeleay < 0){
      maxResponseDeleay = WIFI_RESPONSE_DELAY_MAX;
    }    

    for (int i=0; i <= maxResponseDeleay; i += WIFI_RESPONSE_CHECK_INTERVAL){
    11d8:	06 5f       	subi	r16, 0xF6	; 246
    11da:	1f 4f       	sbci	r17, 0xFF	; 255
    11dc:	e0 16       	cp	r14, r16
    11de:	f1 06       	cpc	r15, r17
    11e0:	7c f7       	brge	.-34     	; 0x11c0 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih+0x48>
      if (Serial.available()){
        break;
      }
    }

    boolean isReadError = false;
    11e2:	19 82       	std	Y+1, r1	; 0x01
    String input;
    11e4:	0d 2d       	mov	r16, r13
    11e6:	1c 2d       	mov	r17, r12
    11e8:	c8 01       	movw	r24, r16
    11ea:	60 e0       	ldi	r22, 0x00	; 0
    11ec:	71 e0       	ldi	r23, 0x01	; 1
    11ee:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <_ZN6StringC1EPKc>
    while (Serial.available()){
      input += (char) readByteFromSerialBuffer(isReadError);
    11f2:	7e 01       	movw	r14, r28
    11f4:	08 94       	sec
    11f6:	e1 1c       	adc	r14, r1
    11f8:	f1 1c       	adc	r15, r1
    11fa:	07 c0       	rjmp	.+14     	; 0x120a <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih+0x92>
    11fc:	c7 01       	movw	r24, r14
    11fe:	0e 94 6d 08 	call	0x10da	; 0x10da <_ZN15GB_SerialHelper24readByteFromSerialBufferERh>
    1202:	68 2f       	mov	r22, r24
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1204:	c8 01       	movw	r24, r16
    1206:	0e 94 7d 37 	call	0x6efa	; 0x6efa <_ZN6String6concatEc>
      }
    }

    boolean isReadError = false;
    String input;
    while (Serial.available()){
    120a:	87 eb       	ldi	r24, 0xB7	; 183
    120c:	93 e0       	ldi	r25, 0x03	; 3
    120e:	0e 94 9e 32 	call	0x653c	; 0x653c <_ZN14HardwareSerial9availableEv>
    1212:	89 2b       	or	r24, r25
    1214:	99 f7       	brne	.-26     	; 0x11fc <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih+0x84>
      input += (char) readByteFromSerialBuffer(isReadError);
    }

    if (input.length() == 0){
    1216:	f8 01       	movw	r30, r16
    1218:	84 81       	ldd	r24, Z+4	; 0x04
    121a:	95 81       	ldd	r25, Z+5	; 0x05
    121c:	89 2b       	or	r24, r25
    121e:	d1 f4       	brne	.+52     	; 0x1254 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih+0xdc>
      if (useSerialMonitor){   
    1220:	80 91 ad 01 	lds	r24, 0x01AD
    1224:	88 23       	and	r24, r24
    1226:	29 f0       	breq	.+10     	; 0x1232 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih+0xba>
        showWifiStatus(F("No response"), false);
    1228:	89 ee       	ldi	r24, 0xE9	; 233
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	60 e0       	ldi	r22, 0x00	; 0
    122e:	0e 94 a0 08 	call	0x1140	; 0x1140 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>

      }
      if (rebootOnFalse){
    1232:	bb 20       	and	r11, r11
    1234:	49 f0       	breq	.+18     	; 0x1248 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih+0xd0>
        Serial.print(F(" (reboot)"));
    1236:	87 eb       	ldi	r24, 0xB7	; 183
    1238:	93 e0       	ldi	r25, 0x03	; 3
    123a:	6f ed       	ldi	r22, 0xDF	; 223
    123c:	70 e0       	ldi	r23, 0x00	; 0
    123e:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <_ZN5Print5printEPK19__FlashStringHelper>
        s_restartWifi = true;
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	80 93 af 01 	sts	0x01AF, r24
      } 
      Serial.println();
    1248:	87 eb       	ldi	r24, 0xB7	; 183
    124a:	93 e0       	ldi	r25, 0x03	; 3
    124c:	0e 94 04 34 	call	0x6808	; 0x6808 <_ZN5Print7printlnEv>
      printDirtyEnd();
    1250:	0e 94 99 08 	call	0x1132	; 0x1132 <_ZN15GB_SerialHelper13printDirtyEndEv>
    }

    return input;
  }
    1254:	8d 2d       	mov	r24, r13
    1256:	9c 2d       	mov	r25, r12
    1258:	0f 90       	pop	r0
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	1f 91       	pop	r17
    1260:	0f 91       	pop	r16
    1262:	ff 90       	pop	r15
    1264:	ef 90       	pop	r14
    1266:	df 90       	pop	r13
    1268:	cf 90       	pop	r12
    126a:	bf 90       	pop	r11
    126c:	08 95       	ret

0000126e <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>:
    }

    return true;
  }

  static boolean wifiExecuteCommand(const __FlashStringHelper* command = 0, int maxResponseDeleay = -1, boolean rebootOnFalse = true){
    126e:	ef 92       	push	r14
    1270:	ff 92       	push	r15
    1272:	0f 93       	push	r16
    1274:	1f 93       	push	r17
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	a3 97       	sbiw	r28, 0x23	; 35
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	de bf       	out	0x3e, r29	; 62
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	cd bf       	out	0x3d, r28	; 61
    128a:	fc 01       	movw	r30, r24
    128c:	db 01       	movw	r26, r22
    128e:	24 2f       	mov	r18, r20
    String input = wifiExecuteRawCommand(command,maxResponseDeleay, rebootOnFalse);
    1290:	7e 01       	movw	r14, r28
    1292:	08 94       	sec
    1294:	e1 1c       	adc	r14, r1
    1296:	f1 1c       	adc	r15, r1
    1298:	c7 01       	movw	r24, r14
    129a:	bf 01       	movw	r22, r30
    129c:	ad 01       	movw	r20, r26
    129e:	0e 94 bc 08 	call	0x1178	; 0x1178 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih>
    if (input.length() == 0){
    12a2:	8d 81       	ldd	r24, Y+5	; 0x05
    12a4:	9e 81       	ldd	r25, Y+6	; 0x06
    12a6:	89 2b       	or	r24, r25
    12a8:	09 f4       	brne	.+2      	; 0x12ac <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0x3e>
    12aa:	8a c0       	rjmp	.+276    	; 0x13c0 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0x152>
      // Nothing to do
    } 
    else if (input.startsWith(flashStringLoad(S_WIFI_RESPONSE_OK)) && input.endsWith(flashStringLoad(S_CRLF))){
    12ac:	8e 01       	movw	r16, r28
    12ae:	08 5f       	subi	r16, 0xF8	; 248
    12b0:	1f 4f       	sbci	r17, 0xFF	; 255
    12b2:	c8 01       	movw	r24, r16
    12b4:	67 ec       	ldi	r22, 0xC7	; 199
    12b6:	70 e0       	ldi	r23, 0x00	; 0
    12b8:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZL15flashStringLoadPKc>
    12bc:	c7 01       	movw	r24, r14
    12be:	b8 01       	movw	r22, r16
    12c0:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <_ZNK6String10startsWithERKS_>
    12c4:	88 23       	and	r24, r24
    12c6:	11 f4       	brne	.+4      	; 0x12cc <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0x5e>
    12c8:	10 e0       	ldi	r17, 0x00	; 0
    12ca:	13 c0       	rjmp	.+38     	; 0x12f2 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0x84>
    12cc:	8e 01       	movw	r16, r28
    12ce:	01 5f       	subi	r16, 0xF1	; 241
    12d0:	1f 4f       	sbci	r17, 0xFF	; 255
    12d2:	c8 01       	movw	r24, r16
    12d4:	6a ec       	ldi	r22, 0xCA	; 202
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZL15flashStringLoadPKc>
    12dc:	c7 01       	movw	r24, r14
    12de:	b8 01       	movw	r22, r16
    12e0:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <_ZNK6String8endsWithERKS_>
    12e4:	81 11       	cpse	r24, r1
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	18 2f       	mov	r17, r24
    12ea:	ce 01       	movw	r24, r28
    12ec:	0f 96       	adiw	r24, 0x0f	; 15
    12ee:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    12f2:	ce 01       	movw	r24, r28
    12f4:	08 96       	adiw	r24, 0x08	; 8
    12f6:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    12fa:	11 23       	and	r17, r17
    12fc:	11 f0       	breq	.+4      	; 0x1302 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0x94>
    12fe:	11 e0       	ldi	r17, 0x01	; 1
    1300:	60 c0       	rjmp	.+192    	; 0x13c2 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0x154>
      return true;
    } 
    else if (input.startsWith(flashStringLoad(S_WIFI_RESPONSE_ERROR)) && input.endsWith(flashStringLoad(S_CRLF))) {
    1302:	8e 01       	movw	r16, r28
    1304:	0a 5e       	subi	r16, 0xEA	; 234
    1306:	1f 4f       	sbci	r17, 0xFF	; 255
    1308:	c8 01       	movw	r24, r16
    130a:	6d ec       	ldi	r22, 0xCD	; 205
    130c:	70 e0       	ldi	r23, 0x00	; 0
    130e:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZL15flashStringLoadPKc>
    1312:	7e 01       	movw	r14, r28
    1314:	08 94       	sec
    1316:	e1 1c       	adc	r14, r1
    1318:	f1 1c       	adc	r15, r1
    131a:	c7 01       	movw	r24, r14
    131c:	b8 01       	movw	r22, r16
    131e:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <_ZNK6String10startsWithERKS_>
    1322:	88 23       	and	r24, r24
    1324:	11 f4       	brne	.+4      	; 0x132a <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0xbc>
    1326:	10 e0       	ldi	r17, 0x00	; 0
    1328:	13 c0       	rjmp	.+38     	; 0x1350 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0xe2>
    132a:	8e 01       	movw	r16, r28
    132c:	03 5e       	subi	r16, 0xE3	; 227
    132e:	1f 4f       	sbci	r17, 0xFF	; 255
    1330:	c8 01       	movw	r24, r16
    1332:	6a ec       	ldi	r22, 0xCA	; 202
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZL15flashStringLoadPKc>
    133a:	c7 01       	movw	r24, r14
    133c:	b8 01       	movw	r22, r16
    133e:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <_ZNK6String8endsWithERKS_>
    1342:	81 11       	cpse	r24, r1
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	18 2f       	mov	r17, r24
    1348:	ce 01       	movw	r24, r28
    134a:	4d 96       	adiw	r24, 0x1d	; 29
    134c:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    1350:	ce 01       	movw	r24, r28
    1352:	46 96       	adiw	r24, 0x16	; 22
    1354:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    1358:	80 91 ad 01 	lds	r24, 0x01AD
    135c:	11 23       	and	r17, r17
    135e:	a1 f0       	breq	.+40     	; 0x1388 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0x11a>
      if (useSerialMonitor){
    1360:	88 23       	and	r24, r24
    1362:	71 f1       	breq	.+92     	; 0x13c0 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0x152>
        byte errorCode = input[5];
    1364:	ce 01       	movw	r24, r28
    1366:	01 96       	adiw	r24, 0x01	; 1
    1368:	65 e0       	ldi	r22, 0x05	; 5
    136a:	70 e0       	ldi	r23, 0x00	; 0
    136c:	0e 94 84 35 	call	0x6b08	; 0x6b08 <_ZN6StringixEj>
    1370:	fc 01       	movw	r30, r24
    1372:	10 81       	ld	r17, Z
        showWifiStatus(F("error "), false);
    1374:	88 ed       	ldi	r24, 0xD8	; 216
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	60 e0       	ldi	r22, 0x00	; 0
    137a:	0e 94 a0 08 	call	0x1140	; 0x1140 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
        GB_PrintDirty::printHEX(errorCode, true);
    137e:	81 2f       	mov	r24, r17
    1380:	61 e0       	ldi	r22, 0x01	; 1
    1382:	0e 94 61 07 	call	0xec2	; 0xec2 <_ZN13GB_PrintDirty8printHEXEhh>
    1386:	16 c0       	rjmp	.+44     	; 0x13b4 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0x146>
        Serial.println();
        printDirtyEnd();
      }      
    } 
    else {
      if (useSerialMonitor){
    1388:	88 23       	and	r24, r24
    138a:	d1 f0       	breq	.+52     	; 0x13c0 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0x152>
        showWifiStatus(FS(S_empty), false);
    138c:	83 ed       	ldi	r24, 0xD3	; 211
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	0e 94 a0 08 	call	0x1140	; 0x1140 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
        GB_PrintDirty::printWithoutCRLF(input);
    1396:	8e 01       	movw	r16, r28
    1398:	0f 5f       	subi	r16, 0xFF	; 255
    139a:	1f 4f       	sbci	r17, 0xFF	; 255
    139c:	c8 01       	movw	r24, r16
    139e:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String>
        Serial.print(FS(S_Next));
    13a2:	87 eb       	ldi	r24, 0xB7	; 183
    13a4:	93 e0       	ldi	r25, 0x03	; 3
    13a6:	64 ed       	ldi	r22, 0xD4	; 212
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <_ZN5Print5printEPK19__FlashStringHelper>
        GB_PrintDirty::printHEX(input); 
    13ae:	c8 01       	movw	r24, r16
    13b0:	0e 94 ba 07 	call	0xf74	; 0xf74 <_ZN13GB_PrintDirty8printHEXERK6String>
        Serial.println();
    13b4:	87 eb       	ldi	r24, 0xB7	; 183
    13b6:	93 e0       	ldi	r25, 0x03	; 3
    13b8:	0e 94 04 34 	call	0x6808	; 0x6808 <_ZN5Print7printlnEv>
        printDirtyEnd();
    13bc:	0e 94 99 08 	call	0x1132	; 0x1132 <_ZN15GB_SerialHelper13printDirtyEndEv>
    13c0:	10 e0       	ldi	r17, 0x00	; 0
      }
    }

    return false;
    13c2:	ce 01       	movw	r24, r28
    13c4:	01 96       	adiw	r24, 0x01	; 1
    13c6:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
  }
    13ca:	81 2f       	mov	r24, r17
    13cc:	a3 96       	adiw	r28, 0x23	; 35
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	de bf       	out	0x3e, r29	; 62
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	cd bf       	out	0x3d, r28	; 61
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	1f 91       	pop	r17
    13de:	0f 91       	pop	r16
    13e0:	ff 90       	pop	r15
    13e2:	ef 90       	pop	r14
    13e4:	08 95       	ret

000013e6 <_ZN15GB_SerialHelper12sendWifiDataEhPK19__FlashStringHelper>:
      }
    }
    return sendWifiFrameStop(false);
  } 

  static void sendWifiData(const byte portDescriptor, const __FlashStringHelper* data){ // INT_MAX (own test) or 1400 bytes max (Wi-Fi spec restriction)
    13e6:	1f 93       	push	r17
    13e8:	cf 93       	push	r28
    13ea:	df 93       	push	r29
    13ec:	18 2f       	mov	r17, r24
    13ee:	eb 01       	movw	r28, r22
  HTTP_TAG_OPEN, HTTP_TAG_CLOSED, HTTP_TAG_SINGLE
};

static int flashStringLength(const __FlashStringHelper* fstr){ 
    const char PROGMEM * pstr = (const char PROGMEM *) fstr;
    return strlen_P(pstr);
    13f0:	cb 01       	movw	r24, r22
    13f2:	0e 94 0e 05 	call	0xa1c	; 0xa1c <strlen_P>
    13f6:	bc 01       	movw	r22, r24
    int length = flashStringLength(data);
    if (length == 0){
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	79 f0       	breq	.+30     	; 0x141a <_ZN15GB_SerialHelper12sendWifiDataEhPK19__FlashStringHelper+0x34>
      return;
    }
    sendWifiFrameStart(portDescriptor, length);
    13fc:	81 2f       	mov	r24, r17
    13fe:	0e 94 15 08 	call	0x102a	; 0x102a <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>
    Serial.print(data);
    1402:	87 eb       	ldi	r24, 0xB7	; 183
    1404:	93 e0       	ldi	r25, 0x03	; 3
    1406:	be 01       	movw	r22, r28
    1408:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(length);
    Serial.print(',');
  }

  static boolean sendWifiFrameStop(boolean rebootOnFalse = true){
    return wifiExecuteCommand(0,-1,rebootOnFalse);
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	6f ef       	ldi	r22, 0xFF	; 255
    1412:	7f ef       	ldi	r23, 0xFF	; 255
    1414:	41 e0       	ldi	r20, 0x01	; 1
    1416:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
      return;
    }
    sendWifiFrameStart(portDescriptor, length);
    Serial.print(data);
    sendWifiFrameStop();
  }
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	1f 91       	pop	r17
    1420:	08 95       	ret

00001422 <_ZN15GB_SerialHelper16sendHttpOKHeaderEh>:
  /////////////////////////////////////////////////////////////////////
  //                            WEB SERVER                           //
  /////////////////////////////////////////////////////////////////////

  static void sendHttpOKHeader(const byte portDescriptor){ 
    sendWifiData(portDescriptor, F("HTTP/1.1 200 OK\r\nConnection: close\r\nContent-Type: text/html\r\n\r\n"));
    1422:	69 e7       	ldi	r22, 0x79	; 121
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <_ZN15GB_SerialHelper12sendWifiDataEhPK19__FlashStringHelper>
  }
    142a:	08 95       	ret

0000142c <_ZN15GB_SerialHelper22sendHttpNotFoundHeaderEh>:

  static void sendHttpNotFoundHeader(const byte portDescriptor){ 
    sendWifiData(portDescriptor, F("HTTP/1.1 404 Not Found\r\nConnection: close\r\n\r\n"));
    142c:	6f ee       	ldi	r22, 0xEF	; 239
    142e:	75 e0       	ldi	r23, 0x05	; 5
    1430:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <_ZN15GB_SerialHelper12sendWifiDataEhPK19__FlashStringHelper>
     Serial.print(',');
     Serial.print(code); 
     Serial.print(F(",0")); //length of data
     return wifiExecuteCommand(); 
     */
  }
    1434:	08 95       	ret

00001436 <_ZN15GB_SerialHelper15closeConnectionEh>:

  static boolean sendWifiFrameStop(boolean rebootOnFalse = true){
    return wifiExecuteCommand(0,-1,rebootOnFalse);
  }

  static boolean closeConnection(const byte portDescriptor){
    1436:	ff 92       	push	r15
    1438:	0f 93       	push	r16
    143a:	1f 93       	push	r17
    143c:	f8 2e       	mov	r15, r24
    Serial.print(F("at+cls="));
    143e:	07 eb       	ldi	r16, 0xB7	; 183
    1440:	13 e0       	ldi	r17, 0x03	; 3
    1442:	c8 01       	movw	r24, r16
    1444:	64 eb       	ldi	r22, 0xB4	; 180
    1446:	72 e0       	ldi	r23, 0x02	; 2
    1448:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(portDescriptor);
    144c:	c8 01       	movw	r24, r16
    144e:	6f 2d       	mov	r22, r15
    1450:	4a e0       	ldi	r20, 0x0A	; 10
    1452:	50 e0       	ldi	r21, 0x00	; 0
    1454:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <_ZN5Print5printEhi>
    return wifiExecuteCommand(); 
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	6f ef       	ldi	r22, 0xFF	; 255
    145e:	7f ef       	ldi	r23, 0xFF	; 255
    1460:	41 e0       	ldi	r20, 0x01	; 1
    1462:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
  }
    1466:	1f 91       	pop	r17
    1468:	0f 91       	pop	r16
    146a:	ff 90       	pop	r15
    146c:	08 95       	ret

0000146e <_ZN15GB_SerialHelper15startWifiSilentEv>:
  //                             Wi-FI DEVICE                        //
  /////////////////////////////////////////////////////////////////////

  static boolean startWifiSilent(){

    cleanSerialBuffer();
    146e:	0e 94 87 08 	call	0x110e	; 0x110e <_ZN15GB_SerialHelper17cleanSerialBufferEv>

    if (!wifiExecuteCommand(F("at+scan=0"))){
    1472:	85 e6       	ldi	r24, 0x65	; 101
    1474:	92 e0       	ldi	r25, 0x02	; 2
    1476:	6f ef       	ldi	r22, 0xFF	; 255
    1478:	7f ef       	ldi	r23, 0xFF	; 255
    147a:	41 e0       	ldi	r20, 0x01	; 1
    147c:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
    1480:	88 23       	and	r24, r24
    1482:	09 f4       	brne	.+2      	; 0x1486 <_ZN15GB_SerialHelper15startWifiSilentEv+0x18>
    1484:	69 c0       	rjmp	.+210    	; 0x1558 <_ZN15GB_SerialHelper15startWifiSilentEv+0xea>
      return false;
    } 

    boolean isStationMode = (s_wifiSID.length()>0);    
    if (isStationMode){
    1486:	80 91 b4 01 	lds	r24, 0x01B4
    148a:	90 91 b5 01 	lds	r25, 0x01B5
    148e:	89 2b       	or	r24, r25
    1490:	a1 f1       	breq	.+104    	; 0x14fa <_ZN15GB_SerialHelper15startWifiSilentEv+0x8c>
      if (s_wifiPass.length() > 0){
    1492:	80 91 bb 01 	lds	r24, 0x01BB
    1496:	90 91 bc 01 	lds	r25, 0x01BC
    149a:	89 2b       	or	r24, r25
    149c:	b1 f0       	breq	.+44     	; 0x14ca <_ZN15GB_SerialHelper15startWifiSilentEv+0x5c>
        Serial.print(F("at+psk="));
    149e:	87 eb       	ldi	r24, 0xB7	; 183
    14a0:	93 e0       	ldi	r25, 0x03	; 3
    14a2:	6d e5       	ldi	r22, 0x5D	; 93
    14a4:	72 e0       	ldi	r23, 0x02	; 2
    14a6:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.print(s_wifiPass);
    14aa:	87 eb       	ldi	r24, 0xB7	; 183
    14ac:	93 e0       	ldi	r25, 0x03	; 3
    14ae:	67 eb       	ldi	r22, 0xB7	; 183
    14b0:	71 e0       	ldi	r23, 0x01	; 1
    14b2:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <_ZN5Print5printERK6String>
        if (!wifiExecuteCommand()){
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	6f ef       	ldi	r22, 0xFF	; 255
    14bc:	7f ef       	ldi	r23, 0xFF	; 255
    14be:	41 e0       	ldi	r20, 0x01	; 1
    14c0:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
    14c4:	88 23       	and	r24, r24
    14c6:	09 f4       	brne	.+2      	; 0x14ca <_ZN15GB_SerialHelper15startWifiSilentEv+0x5c>
    14c8:	47 c0       	rjmp	.+142    	; 0x1558 <_ZN15GB_SerialHelper15startWifiSilentEv+0xea>
          return false;
        }
      } 

      Serial.print(F("at+connect="));
    14ca:	87 eb       	ldi	r24, 0xB7	; 183
    14cc:	93 e0       	ldi	r25, 0x03	; 3
    14ce:	61 e5       	ldi	r22, 0x51	; 81
    14d0:	72 e0       	ldi	r23, 0x02	; 2
    14d2:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(s_wifiSID);
    14d6:	87 eb       	ldi	r24, 0xB7	; 183
    14d8:	93 e0       	ldi	r25, 0x03	; 3
    14da:	60 eb       	ldi	r22, 0xB0	; 176
    14dc:	71 e0       	ldi	r23, 0x01	; 1
    14de:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <_ZN5Print5printERK6String>
      if (!wifiExecuteCommand()){
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	6f ef       	ldi	r22, 0xFF	; 255
    14e8:	7f ef       	ldi	r23, 0xFF	; 255
    14ea:	41 e0       	ldi	r20, 0x01	; 1
    14ec:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
    14f0:	88 23       	and	r24, r24
    14f2:	91 f1       	breq	.+100    	; 0x1558 <_ZN15GB_SerialHelper15startWifiSilentEv+0xea>
        return false;
      }

      if (!wifiExecuteCommand(F("at+ipdhcp=0"))){
    14f4:	85 e4       	ldi	r24, 0x45	; 69
    14f6:	92 e0       	ldi	r25, 0x02	; 2
    14f8:	1d c0       	rjmp	.+58     	; 0x1534 <_ZN15GB_SerialHelper15startWifiSilentEv+0xc6>
        return false;
      }
    }
    else {
      if (!wifiExecuteCommand(F("at+psk=ingodwetrust"))){
    14fa:	81 e3       	ldi	r24, 0x31	; 49
    14fc:	92 e0       	ldi	r25, 0x02	; 2
    14fe:	6f ef       	ldi	r22, 0xFF	; 255
    1500:	7f ef       	ldi	r23, 0xFF	; 255
    1502:	41 e0       	ldi	r20, 0x01	; 1
    1504:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
    1508:	88 23       	and	r24, r24
    150a:	31 f1       	breq	.+76     	; 0x1558 <_ZN15GB_SerialHelper15startWifiSilentEv+0xea>
        return false;
      }  

      // at+ipstatic=<ip>,<mask>,<gateway>,<dns server1>(0 is valid),<dns server2>(0 is valid)\r\n
      if (!wifiExecuteCommand(F("at+ipstatic=192.168.0.1,255.255.0.0,0.0.0.0,0,0"))){
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	92 e0       	ldi	r25, 0x02	; 2
    1510:	6f ef       	ldi	r22, 0xFF	; 255
    1512:	7f ef       	ldi	r23, 0xFF	; 255
    1514:	41 e0       	ldi	r20, 0x01	; 1
    1516:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
    151a:	88 23       	and	r24, r24
    151c:	e9 f0       	breq	.+58     	; 0x1558 <_ZN15GB_SerialHelper15startWifiSilentEv+0xea>
        return false;
      }

      if (!wifiExecuteCommand(F("at+ipdhcp=1"))){
    151e:	85 ef       	ldi	r24, 0xF5	; 245
    1520:	91 e0       	ldi	r25, 0x01	; 1
    1522:	6f ef       	ldi	r22, 0xFF	; 255
    1524:	7f ef       	ldi	r23, 0xFF	; 255
    1526:	41 e0       	ldi	r20, 0x01	; 1
    1528:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
    152c:	88 23       	and	r24, r24
    152e:	a1 f0       	breq	.+40     	; 0x1558 <_ZN15GB_SerialHelper15startWifiSilentEv+0xea>
        return false;
      }

      if (!wifiExecuteCommand(F("at+ap=Growbox,1"))){ // Hidden
    1530:	85 ee       	ldi	r24, 0xE5	; 229
    1532:	91 e0       	ldi	r25, 0x01	; 1
    1534:	6f ef       	ldi	r22, 0xFF	; 255
    1536:	7f ef       	ldi	r23, 0xFF	; 255
    1538:	41 e0       	ldi	r20, 0x01	; 1
    153a:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
    153e:	88 23       	and	r24, r24
    1540:	59 f0       	breq	.+22     	; 0x1558 <_ZN15GB_SerialHelper15startWifiSilentEv+0xea>
    }

    /*if (!wifiExecuteCommand(F("at+httpd_open"))){
     return false;
     }*/
    if (!wifiExecuteCommand(F("at+ltcp=80"))){
    1542:	8a ed       	ldi	r24, 0xDA	; 218
    1544:	91 e0       	ldi	r25, 0x01	; 1
    1546:	6f ef       	ldi	r22, 0xFF	; 255
    1548:	7f ef       	ldi	r23, 0xFF	; 255
    154a:	41 e0       	ldi	r20, 0x01	; 1
    154c:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
    1550:	88 23       	and	r24, r24
    1552:	19 f0       	breq	.+6      	; 0x155a <_ZN15GB_SerialHelper15startWifiSilentEv+0xec>
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	08 95       	ret
    1558:	80 e0       	ldi	r24, 0x00	; 0
      return false;
    }

    return true;
  }
    155a:	08 95       	ret

0000155c <_ZN15GB_SerialHelper9startWifiEv>:
      startWifi();
    }
  }

  static boolean startWifi(){
    showWifiStatus(F("Starting..."));
    155c:	8e ec       	ldi	r24, 0xCE	; 206
    155e:	91 e0       	ldi	r25, 0x01	; 1
    1560:	61 e0       	ldi	r22, 0x01	; 1
    1562:	0e 94 a0 08 	call	0x1140	; 0x1140 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
    boolean isLoaded = startWifiSilent();
    1566:	0e 94 37 0a 	call	0x146e	; 0x146e <_ZN15GB_SerialHelper15startWifiSilentEv>
    if (isLoaded){
    156a:	88 23       	and	r24, r24
    156c:	31 f0       	breq	.+12     	; 0x157a <_ZN15GB_SerialHelper9startWifiEv+0x1e>
      showWifiStatus(F("Started"));
    156e:	86 ec       	ldi	r24, 0xC6	; 198
    1570:	91 e0       	ldi	r25, 0x01	; 1
    1572:	61 e0       	ldi	r22, 0x01	; 1
    1574:	0e 94 a0 08 	call	0x1140	; 0x1140 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
    1578:	08 95       	ret
    } 
    else {
      showWifiStatus(F("Start failed"));
    157a:	89 eb       	ldi	r24, 0xB9	; 185
    157c:	91 e0       	ldi	r25, 0x01	; 1
    157e:	61 e0       	ldi	r22, 0x01	; 1
    1580:	0e 94 a0 08 	call	0x1140	; 0x1140 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
    }
  }
    1584:	08 95       	ret

00001586 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>:
#define GB_PrintDirty_h

class GB_PrintDirty {
public:

  static String getFixedDigitsString(const int number, const byte numberOfDigits){
    1586:	8f 92       	push	r8
    1588:	9f 92       	push	r9
    158a:	af 92       	push	r10
    158c:	bf 92       	push	r11
    158e:	cf 92       	push	r12
    1590:	df 92       	push	r13
    1592:	ef 92       	push	r14
    1594:	ff 92       	push	r15
    1596:	0f 93       	push	r16
    1598:	1f 93       	push	r17
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	27 97       	sbiw	r28, 0x07	; 7
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	f8 94       	cli
    15a8:	de bf       	out	0x3e, r29	; 62
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	cd bf       	out	0x3d, r28	; 61
    15ae:	4c 01       	movw	r8, r24
    15b0:	5b 01       	movw	r10, r22
    15b2:	f4 2e       	mov	r15, r20
    String out;
    15b4:	8e 01       	movw	r16, r28
    15b6:	0f 5f       	subi	r16, 0xFF	; 255
    15b8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ba:	c8 01       	movw	r24, r16
    15bc:	60 e0       	ldi	r22, 0x00	; 0
    15be:	71 e0       	ldi	r23, 0x01	; 1
    15c0:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <_ZN6StringC1EPKc>
    15c4:	cc 24       	eor	r12, r12
    15c6:	dd 24       	eor	r13, r13
    for (int i = 0; i< numberOfDigits; i++){
    15c8:	ef 2c       	mov	r14, r15
    15ca:	ff 24       	eor	r15, r15
    15cc:	07 c0       	rjmp	.+14     	; 0x15dc <_ZN13GB_PrintDirty20getFixedDigitsStringEih+0x56>
    15ce:	c8 01       	movw	r24, r16
    15d0:	60 e3       	ldi	r22, 0x30	; 48
    15d2:	0e 94 7d 37 	call	0x6efa	; 0x6efa <_ZN6String6concatEc>
    15d6:	08 94       	sec
    15d8:	c1 1c       	adc	r12, r1
    15da:	d1 1c       	adc	r13, r1
    15dc:	ce 14       	cp	r12, r14
    15de:	df 04       	cpc	r13, r15
    15e0:	b4 f3       	brlt	.-20     	; 0x15ce <_ZN13GB_PrintDirty20getFixedDigitsStringEih+0x48>
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
    15e2:	c8 01       	movw	r24, r16
    15e4:	b5 01       	movw	r22, r10
    15e6:	0e 94 20 37 	call	0x6e40	; 0x6e40 <_ZN6String6concatEi>
      out +='0';
    }
    out += number;
    return out.substring(out.length()-numberOfDigits);
    15ea:	4d 81       	ldd	r20, Y+5	; 0x05
    15ec:	5e 81       	ldd	r21, Y+6	; 0x06
    15ee:	4e 19       	sub	r20, r14
    15f0:	5f 09       	sbc	r21, r15
    15f2:	c4 01       	movw	r24, r8
    15f4:	b8 01       	movw	r22, r16
    15f6:	0e 94 a6 38 	call	0x714c	; 0x714c <_ZNK6String9substringEj>
    15fa:	c8 01       	movw	r24, r16
    15fc:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
  }
    1600:	c4 01       	movw	r24, r8
    1602:	27 96       	adiw	r28, 0x07	; 7
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	cd bf       	out	0x3d, r28	; 61
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	1f 91       	pop	r17
    1614:	0f 91       	pop	r16
    1616:	ff 90       	pop	r15
    1618:	ef 90       	pop	r14
    161a:	df 90       	pop	r13
    161c:	cf 90       	pop	r12
    161e:	bf 90       	pop	r11
    1620:	af 90       	pop	r10
    1622:	9f 90       	pop	r9
    1624:	8f 90       	pop	r8
    1626:	08 95       	ret

00001628 <_ZN13GB_PrintDirty13getTimeStringEm>:
    out += getFixedDigitsString(temp,2);
    return out;
  }


  static String getTimeString(time_t time){
    1628:	cf 92       	push	r12
    162a:	df 92       	push	r13
    162c:	ef 92       	push	r14
    162e:	ff 92       	push	r15
    1630:	0f 93       	push	r16
    1632:	1f 93       	push	r17
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	e1 97       	sbiw	r28, 0x31	; 49
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	d8 2e       	mov	r13, r24
    164a:	c9 2e       	mov	r12, r25
    164c:	7a 01       	movw	r14, r20
    164e:	8b 01       	movw	r16, r22
    String out;
    1650:	60 e0       	ldi	r22, 0x00	; 0
    1652:	71 e0       	ldi	r23, 0x01	; 1
    1654:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <_ZN6StringC1EPKc>

    tmElements_t tm;
    breakTime(time, tm);
    1658:	c8 01       	movw	r24, r16
    165a:	b7 01       	movw	r22, r14
    165c:	ae 01       	movw	r20, r28
    165e:	4f 5f       	subi	r20, 0xFF	; 255
    1660:	5f 4f       	sbci	r21, 0xFF	; 255
    1662:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <_Z9breakTimemR12tmElements_t>
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1666:	8d 2d       	mov	r24, r13
    1668:	9c 2d       	mov	r25, r12
    166a:	6b e5       	ldi	r22, 0x5B	; 91
    166c:	0e 94 7d 37 	call	0x6efa	; 0x6efa <_ZN6String6concatEc>

    out += '[';
    out += getFixedDigitsString(tm.Hour, 2);
    1670:	8e 01       	movw	r16, r28
    1672:	08 5f       	subi	r16, 0xF8	; 248
    1674:	1f 4f       	sbci	r17, 0xFF	; 255
    1676:	6b 81       	ldd	r22, Y+3	; 0x03
    1678:	c8 01       	movw	r24, r16
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	42 e0       	ldi	r20, 0x02	; 2
    167e:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1682:	8d 2d       	mov	r24, r13
    1684:	9c 2d       	mov	r25, r12
    1686:	b8 01       	movw	r22, r16
    1688:	0e 94 90 37 	call	0x6f20	; 0x6f20 <_ZN6String6concatERKS_>
    168c:	c8 01       	movw	r24, r16
    168e:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1692:	8d 2d       	mov	r24, r13
    1694:	9c 2d       	mov	r25, r12
    1696:	6a e3       	ldi	r22, 0x3A	; 58
    1698:	0e 94 7d 37 	call	0x6efa	; 0x6efa <_ZN6String6concatEc>
    out += ':';
    out += getFixedDigitsString(tm.Minute, 2);
    169c:	8e 01       	movw	r16, r28
    169e:	01 5f       	subi	r16, 0xF1	; 241
    16a0:	1f 4f       	sbci	r17, 0xFF	; 255
    16a2:	6a 81       	ldd	r22, Y+2	; 0x02
    16a4:	c8 01       	movw	r24, r16
    16a6:	70 e0       	ldi	r23, 0x00	; 0
    16a8:	42 e0       	ldi	r20, 0x02	; 2
    16aa:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    16ae:	8d 2d       	mov	r24, r13
    16b0:	9c 2d       	mov	r25, r12
    16b2:	b8 01       	movw	r22, r16
    16b4:	0e 94 90 37 	call	0x6f20	; 0x6f20 <_ZN6String6concatERKS_>
    16b8:	c8 01       	movw	r24, r16
    16ba:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    16be:	8d 2d       	mov	r24, r13
    16c0:	9c 2d       	mov	r25, r12
    16c2:	6a e3       	ldi	r22, 0x3A	; 58
    16c4:	0e 94 7d 37 	call	0x6efa	; 0x6efa <_ZN6String6concatEc>
    out += ':';
    out += getFixedDigitsString(tm.Second, 2);
    16c8:	8e 01       	movw	r16, r28
    16ca:	0a 5e       	subi	r16, 0xEA	; 234
    16cc:	1f 4f       	sbci	r17, 0xFF	; 255
    16ce:	69 81       	ldd	r22, Y+1	; 0x01
    16d0:	c8 01       	movw	r24, r16
    16d2:	70 e0       	ldi	r23, 0x00	; 0
    16d4:	42 e0       	ldi	r20, 0x02	; 2
    16d6:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    16da:	8d 2d       	mov	r24, r13
    16dc:	9c 2d       	mov	r25, r12
    16de:	b8 01       	movw	r22, r16
    16e0:	0e 94 90 37 	call	0x6f20	; 0x6f20 <_ZN6String6concatERKS_>
    16e4:	c8 01       	movw	r24, r16
    16e6:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    16ea:	8d 2d       	mov	r24, r13
    16ec:	9c 2d       	mov	r25, r12
    16ee:	60 e2       	ldi	r22, 0x20	; 32
    16f0:	0e 94 7d 37 	call	0x6efa	; 0x6efa <_ZN6String6concatEc>
    out += ' ';
    out += getFixedDigitsString(tm.Day, 2);
    16f4:	8e 01       	movw	r16, r28
    16f6:	03 5e       	subi	r16, 0xE3	; 227
    16f8:	1f 4f       	sbci	r17, 0xFF	; 255
    16fa:	6d 81       	ldd	r22, Y+5	; 0x05
    16fc:	c8 01       	movw	r24, r16
    16fe:	70 e0       	ldi	r23, 0x00	; 0
    1700:	42 e0       	ldi	r20, 0x02	; 2
    1702:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1706:	8d 2d       	mov	r24, r13
    1708:	9c 2d       	mov	r25, r12
    170a:	b8 01       	movw	r22, r16
    170c:	0e 94 90 37 	call	0x6f20	; 0x6f20 <_ZN6String6concatERKS_>
    1710:	c8 01       	movw	r24, r16
    1712:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1716:	8d 2d       	mov	r24, r13
    1718:	9c 2d       	mov	r25, r12
    171a:	6e e2       	ldi	r22, 0x2E	; 46
    171c:	0e 94 7d 37 	call	0x6efa	; 0x6efa <_ZN6String6concatEc>
    out +='.';
    out += getFixedDigitsString(tm.Month, 2);
    1720:	8e 01       	movw	r16, r28
    1722:	0c 5d       	subi	r16, 0xDC	; 220
    1724:	1f 4f       	sbci	r17, 0xFF	; 255
    1726:	6e 81       	ldd	r22, Y+6	; 0x06
    1728:	c8 01       	movw	r24, r16
    172a:	70 e0       	ldi	r23, 0x00	; 0
    172c:	42 e0       	ldi	r20, 0x02	; 2
    172e:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1732:	8d 2d       	mov	r24, r13
    1734:	9c 2d       	mov	r25, r12
    1736:	b8 01       	movw	r22, r16
    1738:	0e 94 90 37 	call	0x6f20	; 0x6f20 <_ZN6String6concatERKS_>
    173c:	c8 01       	movw	r24, r16
    173e:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1742:	8d 2d       	mov	r24, r13
    1744:	9c 2d       	mov	r25, r12
    1746:	6e e2       	ldi	r22, 0x2E	; 46
    1748:	0e 94 7d 37 	call	0x6efa	; 0x6efa <_ZN6String6concatEc>
    out += '.';
    out += getFixedDigitsString(tmYearToCalendar(tm.Year), 4); 
    174c:	8e 01       	movw	r16, r28
    174e:	05 5d       	subi	r16, 0xD5	; 213
    1750:	1f 4f       	sbci	r17, 0xFF	; 255
    1752:	6f 81       	ldd	r22, Y+7	; 0x07
    1754:	70 e0       	ldi	r23, 0x00	; 0
    1756:	6e 54       	subi	r22, 0x4E	; 78
    1758:	78 4f       	sbci	r23, 0xF8	; 248
    175a:	c8 01       	movw	r24, r16
    175c:	44 e0       	ldi	r20, 0x04	; 4
    175e:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1762:	8d 2d       	mov	r24, r13
    1764:	9c 2d       	mov	r25, r12
    1766:	b8 01       	movw	r22, r16
    1768:	0e 94 90 37 	call	0x6f20	; 0x6f20 <_ZN6String6concatERKS_>
    176c:	c8 01       	movw	r24, r16
    176e:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1772:	8d 2d       	mov	r24, r13
    1774:	9c 2d       	mov	r25, r12
    1776:	6d e5       	ldi	r22, 0x5D	; 93
    1778:	0e 94 7d 37 	call	0x6efa	; 0x6efa <_ZN6String6concatEc>
    out += ']';
    return out;
  } 
    177c:	8d 2d       	mov	r24, r13
    177e:	9c 2d       	mov	r25, r12
    1780:	e1 96       	adiw	r28, 0x31	; 49
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	f8 94       	cli
    1786:	de bf       	out	0x3e, r29	; 62
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	cd bf       	out	0x3d, r28	; 61
    178c:	cf 91       	pop	r28
    178e:	df 91       	pop	r29
    1790:	1f 91       	pop	r17
    1792:	0f 91       	pop	r16
    1794:	ff 90       	pop	r15
    1796:	ef 90       	pop	r14
    1798:	df 90       	pop	r13
    179a:	cf 90       	pop	r12
    179c:	08 95       	ret

0000179e <_ZN9GB_Logger18getLogRecordSuffixERK9LogRecord>:
    else {
      return F("Unknown");
    }
  }
  
  static String getLogRecordSuffix(const LogRecord &logRecord){        
    179e:	df 92       	push	r13
    17a0:	ef 92       	push	r14
    17a2:	ff 92       	push	r15
    17a4:	0f 93       	push	r16
    17a6:	1f 93       	push	r17
    17a8:	df 93       	push	r29
    17aa:	cf 93       	push	r28
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
    17b0:	2e 97       	sbiw	r28, 0x0e	; 14
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	e8 2e       	mov	r14, r24
    17be:	d9 2e       	mov	r13, r25
    17c0:	8b 01       	movw	r16, r22
    String out;
    17c2:	60 e0       	ldi	r22, 0x00	; 0
    17c4:	71 e0       	ldi	r23, 0x01	; 1
    17c6:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <_ZN6StringC1EPKc>
  }
  static boolean isError(const LogRecord &logRecord){
    return (logRecord.data & B11000000) == B01000000;
  }
  static boolean isTemperature(const LogRecord &logRecord){
    return (logRecord.data & B11000000) == B11000000;
    17ca:	f8 01       	movw	r30, r16
    17cc:	f4 80       	ldd	r15, Z+4	; 0x04
    }
  }
  
  static String getLogRecordSuffix(const LogRecord &logRecord){        
    String out;
    if (isTemperature(logRecord)) {
    17ce:	8f 2d       	mov	r24, r15
    17d0:	80 7c       	andi	r24, 0xC0	; 192
    17d2:	80 3c       	cpi	r24, 0xC0	; 192
    17d4:	39 f5       	brne	.+78     	; 0x1824 <_ZN9GB_Logger18getLogRecordSuffixERK9LogRecord+0x86>
      byte temperature = (logRecord.data & B00111111);
      out += flashStringLoad(F(" ["));
    17d6:	8e 01       	movw	r16, r28
    17d8:	0f 5f       	subi	r16, 0xFF	; 255
    17da:	1f 4f       	sbci	r17, 0xFF	; 255
    17dc:	c8 01       	movw	r24, r16
    17de:	6d e2       	ldi	r22, 0x2D	; 45
    17e0:	71 e0       	ldi	r23, 0x01	; 1
    17e2:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_ZL15flashStringLoadPK19__FlashStringHelper>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    17e6:	8e 2d       	mov	r24, r14
    17e8:	9d 2d       	mov	r25, r13
    17ea:	b8 01       	movw	r22, r16
    17ec:	0e 94 90 37 	call	0x6f20	; 0x6f20 <_ZN6String6concatERKS_>
    17f0:	c8 01       	movw	r24, r16
    17f2:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
    17f6:	ff e3       	ldi	r31, 0x3F	; 63
    17f8:	ff 22       	and	r15, r31
    17fa:	8e 2d       	mov	r24, r14
    17fc:	9d 2d       	mov	r25, r13
    17fe:	6f 2d       	mov	r22, r15
    1800:	0e 94 51 37 	call	0x6ea2	; 0x6ea2 <_ZN6String6concatEh>
      out += temperature;
      out += flashStringLoad(F("] C"));
    1804:	8e 01       	movw	r16, r28
    1806:	08 5f       	subi	r16, 0xF8	; 248
    1808:	1f 4f       	sbci	r17, 0xFF	; 255
    180a:	c8 01       	movw	r24, r16
    180c:	69 e2       	ldi	r22, 0x29	; 41
    180e:	71 e0       	ldi	r23, 0x01	; 1
    1810:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_ZL15flashStringLoadPK19__FlashStringHelper>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1814:	8e 2d       	mov	r24, r14
    1816:	9d 2d       	mov	r25, r13
    1818:	b8 01       	movw	r22, r16
    181a:	0e 94 90 37 	call	0x6f20	; 0x6f20 <_ZN6String6concatERKS_>
    181e:	c8 01       	movw	r24, r16
    1820:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    }
    //Serial.print(F(" HEX: "));
    //GB_PrintDirty::printRAM(&((LogRecord)logRecord), sizeof(LogRecord));  

    return out;
  }
    1824:	8e 2d       	mov	r24, r14
    1826:	9d 2d       	mov	r25, r13
    1828:	2e 96       	adiw	r28, 0x0e	; 14
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	f8 94       	cli
    182e:	de bf       	out	0x3e, r29	; 62
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	cd bf       	out	0x3d, r28	; 61
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	1f 91       	pop	r17
    183a:	0f 91       	pop	r16
    183c:	ff 90       	pop	r15
    183e:	ef 90       	pop	r14
    1840:	df 90       	pop	r13
    1842:	08 95       	ret

00001844 <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh>:
  }


private:

  static void printDirtyLogRecord(const LogRecord &logRecord, const __FlashStringHelper* description, const boolean isStored, const byte temperature = 0xFF){
    1844:	af 92       	push	r10
    1846:	bf 92       	push	r11
    1848:	cf 92       	push	r12
    184a:	df 92       	push	r13
    184c:	ef 92       	push	r14
    184e:	ff 92       	push	r15
    1850:	0f 93       	push	r16
    1852:	1f 93       	push	r17
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
    185c:	6c 97       	sbiw	r28, 0x1c	; 28
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	f8 94       	cli
    1862:	de bf       	out	0x3e, r29	; 62
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	cd bf       	out	0x3d, r28	; 61
    1868:	6c 01       	movw	r12, r24
    186a:	5b 01       	movw	r10, r22
    186c:	04 2f       	mov	r16, r20
    if (!GB_SerialHelper::useSerialMonitor) {
    186e:	80 91 ad 01 	lds	r24, 0x01AD
    1872:	88 23       	and	r24, r24
    1874:	09 f4       	brne	.+2      	; 0x1878 <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh+0x34>
    1876:	61 c0       	rjmp	.+194    	; 0x193a <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh+0xf6>
      return;
    }
    Serial.print(F("LOG> ")); 
    1878:	87 eb       	ldi	r24, 0xB7	; 183
    187a:	93 e0       	ldi	r25, 0x03	; 3
    187c:	63 e2       	ldi	r22, 0x23	; 35
    187e:	71 e0       	ldi	r23, 0x01	; 1
    1880:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <_ZN5Print5printEPK19__FlashStringHelper>
    if (!isStored) {
    1884:	00 23       	and	r16, r16
    1886:	31 f4       	brne	.+12     	; 0x1894 <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh+0x50>
      Serial.print(F("NOT STORED "));
    1888:	87 eb       	ldi	r24, 0xB7	; 183
    188a:	93 e0       	ldi	r25, 0x03	; 3
    188c:	67 e1       	ldi	r22, 0x17	; 23
    188e:	71 e0       	ldi	r23, 0x01	; 1
    1890:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <_ZN5Print5printEPK19__FlashStringHelper>
    GB_StorageHelper::getLogRecordByIndex(index, logRecord);
    return logRecord;
  }

  static String getLogRecordPrefix(const LogRecord &logRecord){        
    String out;
    1894:	7e 01       	movw	r14, r28
    1896:	08 94       	sec
    1898:	e1 1c       	adc	r14, r1
    189a:	f1 1c       	adc	r15, r1
    189c:	c7 01       	movw	r24, r14
    189e:	60 e0       	ldi	r22, 0x00	; 0
    18a0:	71 e0       	ldi	r23, 0x01	; 1
    18a2:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <_ZN6StringC1EPKc>
    out += GB_PrintDirty::getTimeString(logRecord.timeStamp);
    18a6:	8e 01       	movw	r16, r28
    18a8:	01 5f       	subi	r16, 0xF1	; 241
    18aa:	1f 4f       	sbci	r17, 0xFF	; 255
    18ac:	f6 01       	movw	r30, r12
    18ae:	40 81       	ld	r20, Z
    18b0:	51 81       	ldd	r21, Z+1	; 0x01
    18b2:	62 81       	ldd	r22, Z+2	; 0x02
    18b4:	73 81       	ldd	r23, Z+3	; 0x03
    18b6:	c8 01       	movw	r24, r16
    18b8:	0e 94 14 0b 	call	0x1628	; 0x1628 <_ZN13GB_PrintDirty13getTimeStringEm>
    18bc:	c7 01       	movw	r24, r14
    18be:	b8 01       	movw	r22, r16
    18c0:	0e 94 90 37 	call	0x6f20	; 0x6f20 <_ZN6String6concatERKS_>
    18c4:	c8 01       	movw	r24, r16
    18c6:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    18ca:	c7 01       	movw	r24, r14
    18cc:	60 e2       	ldi	r22, 0x20	; 32
    18ce:	0e 94 7d 37 	call	0x6efa	; 0x6efa <_ZN6String6concatEc>
    out += ' '; 
    out += GB_PrintDirty::getHEX(logRecord.data, true);
    18d2:	8e 01       	movw	r16, r28
    18d4:	0a 5e       	subi	r16, 0xEA	; 234
    18d6:	1f 4f       	sbci	r17, 0xFF	; 255
    18d8:	c8 01       	movw	r24, r16
    18da:	f6 01       	movw	r30, r12
    18dc:	64 81       	ldd	r22, Z+4	; 0x04
    18de:	41 e0       	ldi	r20, 0x01	; 1
    18e0:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZN13GB_PrintDirty6getHEXEhh>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    18e4:	c7 01       	movw	r24, r14
    18e6:	b8 01       	movw	r22, r16
    18e8:	0e 94 90 37 	call	0x6f20	; 0x6f20 <_ZN6String6concatERKS_>
    18ec:	c8 01       	movw	r24, r16
    18ee:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    18f2:	c7 01       	movw	r24, r14
    18f4:	60 e2       	ldi	r22, 0x20	; 32
    18f6:	0e 94 7d 37 	call	0x6efa	; 0x6efa <_ZN6String6concatEc>
    }
    Serial.print(F("LOG> ")); 
    if (!isStored) {
      Serial.print(F("NOT STORED "));
    }
    Serial.print(getLogRecordPrefix(logRecord));    
    18fa:	87 eb       	ldi	r24, 0xB7	; 183
    18fc:	93 e0       	ldi	r25, 0x03	; 3
    18fe:	b7 01       	movw	r22, r14
    1900:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <_ZN5Print5printERK6String>
    1904:	c7 01       	movw	r24, r14
    1906:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    Serial.print(description);
    190a:	87 eb       	ldi	r24, 0xB7	; 183
    190c:	93 e0       	ldi	r25, 0x03	; 3
    190e:	b5 01       	movw	r22, r10
    1910:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(getLogRecordSuffix(logRecord));  
    1914:	8e 01       	movw	r16, r28
    1916:	08 5f       	subi	r16, 0xF8	; 248
    1918:	1f 4f       	sbci	r17, 0xFF	; 255
    191a:	c8 01       	movw	r24, r16
    191c:	b6 01       	movw	r22, r12
    191e:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN9GB_Logger18getLogRecordSuffixERK9LogRecord>
    1922:	87 eb       	ldi	r24, 0xB7	; 183
    1924:	93 e0       	ldi	r25, 0x03	; 3
    1926:	b8 01       	movw	r22, r16
    1928:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <_ZN5Print5printERK6String>
    192c:	c8 01       	movw	r24, r16
    192e:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>

    Serial.println();      
    1932:	87 eb       	ldi	r24, 0xB7	; 183
    1934:	93 e0       	ldi	r25, 0x03	; 3
    1936:	0e 94 04 34 	call	0x6808	; 0x6808 <_ZN5Print7printlnEv>
  }
    193a:	6c 96       	adiw	r28, 0x1c	; 28
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	cd bf       	out	0x3d, r28	; 61
    1946:	cf 91       	pop	r28
    1948:	df 91       	pop	r29
    194a:	1f 91       	pop	r17
    194c:	0f 91       	pop	r16
    194e:	ff 90       	pop	r15
    1950:	ef 90       	pop	r14
    1952:	df 90       	pop	r13
    1954:	cf 90       	pop	r12
    1956:	bf 90       	pop	r11
    1958:	af 90       	pop	r10
    195a:	08 95       	ret

0000195c <_ZN9GB_Logger8logEventER5Event>:
public:

  // Normal event uses uses format [00DDDDDD]
  //   00 - prefix for normal events 
  //   DDDDDD - event identificator
  static void logEvent(Event &event){
    195c:	ef 92       	push	r14
    195e:	ff 92       	push	r15
    1960:	0f 93       	push	r16
    1962:	1f 93       	push	r17
    1964:	df 93       	push	r29
    1966:	cf 93       	push	r28
    1968:	00 d0       	rcall	.+0      	; 0x196a <_ZN9GB_Logger8logEventER5Event+0xe>
    196a:	00 d0       	rcall	.+0      	; 0x196c <_ZN9GB_Logger8logEventER5Event+0x10>
    196c:	0f 92       	push	r0
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
    1972:	7c 01       	movw	r14, r24
    LogRecord logRecord(event.index);
    1974:	fc 01       	movw	r30, r24
    1976:	12 81       	ldd	r17, Z+2	; 0x02
struct LogRecord {
  time_t timeStamp;
  byte data;  

  LogRecord (byte data): 
  timeStamp(now()), data(data) {
    1978:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <_Z3nowv>
    197c:	69 83       	std	Y+1, r22	; 0x01
    197e:	7a 83       	std	Y+2, r23	; 0x02
    1980:	8b 83       	std	Y+3, r24	; 0x03
    1982:	9c 83       	std	Y+4, r25	; 0x04
    1984:	1d 83       	std	Y+5, r17	; 0x05
    boolean isStored = GB_StorageHelper::storeLogRecord(logRecord);
    1986:	8e 01       	movw	r16, r28
    1988:	0f 5f       	subi	r16, 0xFF	; 255
    198a:	1f 4f       	sbci	r17, 0xFF	; 255
    198c:	c8 01       	movw	r24, r16
    198e:	0e 94 25 06 	call	0xc4a	; 0xc4a <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord>
    1992:	48 2f       	mov	r20, r24
    printDirtyLogRecord(logRecord, event.description, isStored);
    1994:	f7 01       	movw	r30, r14
    1996:	63 81       	ldd	r22, Z+3	; 0x03
    1998:	74 81       	ldd	r23, Z+4	; 0x04
    199a:	c8 01       	movw	r24, r16
    199c:	2f ef       	ldi	r18, 0xFF	; 255
    199e:	0e 94 22 0c 	call	0x1844	; 0x1844 <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh>
    GB_SerialHelper::printDirtyEnd();
    19a2:	0e 94 99 08 	call	0x1132	; 0x1132 <_ZN15GB_SerialHelper13printDirtyEndEv>
  }
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	cf 91       	pop	r28
    19b2:	df 91       	pop	r29
    19b4:	1f 91       	pop	r17
    19b6:	0f 91       	pop	r16
    19b8:	ff 90       	pop	r15
    19ba:	ef 90       	pop	r14
    19bc:	08 95       	ret

000019be <_Z10turnOffFanv>:
    19be:	84 e0       	ldi	r24, 0x04	; 4
    19c0:	0e 94 d5 30 	call	0x61aa	; 0x61aa <digitalRead>
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	61 f0       	breq	.+24     	; 0x19e0 <_Z10turnOffFanv+0x22>
    19c8:	84 e0       	ldi	r24, 0x04	; 4
    19ca:	61 e0       	ldi	r22, 0x01	; 1
    19cc:	0e 94 81 30 	call	0x6102	; 0x6102 <digitalWrite>
    19d0:	85 e0       	ldi	r24, 0x05	; 5
    19d2:	61 e0       	ldi	r22, 0x01	; 1
    19d4:	0e 94 81 30 	call	0x6102	; 0x6102 <digitalWrite>
    19d8:	89 e9       	ldi	r24, 0x99	; 153
    19da:	91 e0       	ldi	r25, 0x01	; 1
    19dc:	0e 94 ae 0c 	call	0x195c	; 0x195c <_ZN9GB_Logger8logEventER5Event>
    19e0:	08 95       	ret

000019e2 <_Z9turnOnFani>:
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29
    19e6:	ec 01       	movw	r28, r24
    19e8:	84 e0       	ldi	r24, 0x04	; 4
    19ea:	0e 94 d5 30 	call	0x61aa	; 0x61aa <digitalRead>
    19ee:	89 2b       	or	r24, r25
    19f0:	79 f4       	brne	.+30     	; 0x1a10 <_Z9turnOnFani+0x2e>
    19f2:	85 e0       	ldi	r24, 0x05	; 5
    19f4:	0e 94 d5 30 	call	0x61aa	; 0x61aa <digitalRead>
    19f8:	8c 17       	cp	r24, r28
    19fa:	9d 07       	cpc	r25, r29
    19fc:	49 f4       	brne	.+18     	; 0x1a10 <_Z9turnOnFani+0x2e>
    19fe:	13 c0       	rjmp	.+38     	; 0x1a26 <_Z9turnOnFani+0x44>
    1a00:	8e e9       	ldi	r24, 0x9E	; 158
    1a02:	91 e0       	ldi	r25, 0x01	; 1
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <_Z9turnOnFani+0x28>
    1a06:	83 ea       	ldi	r24, 0xA3	; 163
    1a08:	91 e0       	ldi	r25, 0x01	; 1
    1a0a:	0e 94 ae 0c 	call	0x195c	; 0x195c <_ZN9GB_Logger8logEventER5Event>
    1a0e:	0b c0       	rjmp	.+22     	; 0x1a26 <_Z9turnOnFani+0x44>
    1a10:	85 e0       	ldi	r24, 0x05	; 5
    1a12:	6c 2f       	mov	r22, r28
    1a14:	0e 94 81 30 	call	0x6102	; 0x6102 <digitalWrite>
    1a18:	84 e0       	ldi	r24, 0x04	; 4
    1a1a:	60 e0       	ldi	r22, 0x00	; 0
    1a1c:	0e 94 81 30 	call	0x6102	; 0x6102 <digitalWrite>
    1a20:	21 97       	sbiw	r28, 0x01	; 1
    1a22:	89 f7       	brne	.-30     	; 0x1a06 <_Z9turnOnFani+0x24>
    1a24:	ed cf       	rjmp	.-38     	; 0x1a00 <_Z9turnOnFani+0x1e>
    1a26:	df 91       	pop	r29
    1a28:	cf 91       	pop	r28
    1a2a:	08 95       	ret

00001a2c <_Z12turnOffLightv>:
    1a2c:	83 e0       	ldi	r24, 0x03	; 3
    1a2e:	0e 94 d5 30 	call	0x61aa	; 0x61aa <digitalRead>
    1a32:	01 97       	sbiw	r24, 0x01	; 1
    1a34:	41 f0       	breq	.+16     	; 0x1a46 <_Z12turnOffLightv+0x1a>
    1a36:	83 e0       	ldi	r24, 0x03	; 3
    1a38:	61 e0       	ldi	r22, 0x01	; 1
    1a3a:	0e 94 81 30 	call	0x6102	; 0x6102 <digitalWrite>
    1a3e:	8f e8       	ldi	r24, 0x8F	; 143
    1a40:	91 e0       	ldi	r25, 0x01	; 1
    1a42:	0e 94 ae 0c 	call	0x195c	; 0x195c <_ZN9GB_Logger8logEventER5Event>
    1a46:	08 95       	ret

00001a48 <_Z11turnOnLightv>:
    1a48:	83 e0       	ldi	r24, 0x03	; 3
    1a4a:	0e 94 d5 30 	call	0x61aa	; 0x61aa <digitalRead>
    1a4e:	89 2b       	or	r24, r25
    1a50:	41 f0       	breq	.+16     	; 0x1a62 <_Z11turnOnLightv+0x1a>
    1a52:	83 e0       	ldi	r24, 0x03	; 3
    1a54:	60 e0       	ldi	r22, 0x00	; 0
    1a56:	0e 94 81 30 	call	0x6102	; 0x6102 <digitalWrite>
    1a5a:	84 e9       	ldi	r24, 0x94	; 148
    1a5c:	91 e0       	ldi	r25, 0x01	; 1
    1a5e:	0e 94 ae 0c 	call	0x195c	; 0x195c <_ZN9GB_Logger8logEventER5Event>
    1a62:	08 95       	ret

00001a64 <_ZN9GB_Logger8logErrorER5Error>:

  // Error events uses format [01SSDDDD] 
  //   01 - prefix for error events 
  //   SS - length of errir seqence 
  //   DDDD - sequence data
  static void logError(Error &error){
    1a64:	8f 92       	push	r8
    1a66:	9f 92       	push	r9
    1a68:	af 92       	push	r10
    1a6a:	bf 92       	push	r11
    1a6c:	cf 92       	push	r12
    1a6e:	df 92       	push	r13
    1a70:	ef 92       	push	r14
    1a72:	ff 92       	push	r15
    1a74:	0f 93       	push	r16
    1a76:	1f 93       	push	r17
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	00 d0       	rcall	.+0      	; 0x1a7e <_ZN9GB_Logger8logErrorER5Error+0x1a>
    1a7e:	00 d0       	rcall	.+0      	; 0x1a80 <_ZN9GB_Logger8logErrorER5Error+0x1c>
    1a80:	0f 92       	push	r0
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
    1a86:	7c 01       	movw	r14, r24
    LogRecord logRecord(B01000000|(B00000011 | error.sequenceSize-1)<<4 | (B00001111 & error.sequence));
    1a88:	fc 01       	movw	r30, r24
    1a8a:	12 81       	ldd	r17, Z+2	; 0x02
    1a8c:	1f 70       	andi	r17, 0x0F	; 15
    1a8e:	10 64       	ori	r17, 0x40	; 64
    1a90:	83 81       	ldd	r24, Z+3	; 0x03
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	83 60       	ori	r24, 0x03	; 3
    1a98:	24 e0       	ldi	r18, 0x04	; 4
    1a9a:	88 0f       	add	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	2a 95       	dec	r18
    1aa0:	e1 f7       	brne	.-8      	; 0x1a9a <_ZN9GB_Logger8logErrorER5Error+0x36>
    1aa2:	18 2b       	or	r17, r24
    1aa4:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <_Z3nowv>
    1aa8:	69 83       	std	Y+1, r22	; 0x01
    1aaa:	7a 83       	std	Y+2, r23	; 0x02
    1aac:	8b 83       	std	Y+3, r24	; 0x03
    1aae:	9c 83       	std	Y+4, r25	; 0x04
    1ab0:	1d 83       	std	Y+5, r17	; 0x05
    boolean isStoredNow = false;
    if(!error.isStored){
    1ab2:	f7 01       	movw	r30, r14
    1ab4:	86 81       	ldd	r24, Z+6	; 0x06
    1ab6:	88 23       	and	r24, r24
    1ab8:	11 f0       	breq	.+4      	; 0x1abe <_ZN9GB_Logger8logErrorER5Error+0x5a>
    1aba:	40 e0       	ldi	r20, 0x00	; 0
    1abc:	07 c0       	rjmp	.+14     	; 0x1acc <_ZN9GB_Logger8logErrorER5Error+0x68>
      error.isStored = GB_StorageHelper::storeLogRecord(logRecord);
    1abe:	ce 01       	movw	r24, r28
    1ac0:	01 96       	adiw	r24, 0x01	; 1
    1ac2:	0e 94 25 06 	call	0xc4a	; 0xc4a <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord>
    1ac6:	f7 01       	movw	r30, r14
    1ac8:	86 83       	std	Z+6, r24	; 0x06
    1aca:	41 e0       	ldi	r20, 0x01	; 1
      isStoredNow = true;
    } 
    printDirtyLogRecord(logRecord, error.description, isStoredNow);
    1acc:	f7 01       	movw	r30, r14
    1ace:	64 81       	ldd	r22, Z+4	; 0x04
    1ad0:	75 81       	ldd	r23, Z+5	; 0x05
    1ad2:	ce 01       	movw	r24, r28
    1ad4:	01 96       	adiw	r24, 0x01	; 1
    1ad6:	2f ef       	ldi	r18, 0xFF	; 255
    1ad8:	0e 94 22 0c 	call	0x1844	; 0x1844 <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh>
    GB_SerialHelper::printDirtyEnd();
    1adc:	0e 94 99 08 	call	0x1132	; 0x1132 <_ZN15GB_SerialHelper13printDirtyEndEv>
    error.isStored = true;   
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	f7 01       	movw	r30, r14
    1ae4:	86 83       	std	Z+6, r24	; 0x06
    return (findByIndex(0xFF, 0xFF) == 0);
  }
  
  
void notify() {
  digitalWrite(ERROR_PIN, LOW);
    1ae6:	8c e0       	ldi	r24, 0x0C	; 12
    1ae8:	60 e0       	ldi	r22, 0x00	; 0
    1aea:	0e 94 81 30 	call	0x6102	; 0x6102 <digitalWrite>
  delay(1000);
    1aee:	68 ee       	ldi	r22, 0xE8	; 232
    1af0:	73 e0       	ldi	r23, 0x03	; 3
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <delay>
  for (int i = sequenceSize-1; i >= 0; i--){
    1afa:	f7 01       	movw	r30, r14
    1afc:	83 81       	ldd	r24, Z+3	; 0x03
    1afe:	00 e0       	ldi	r16, 0x00	; 0
    1b00:	10 e0       	ldi	r17, 0x00	; 0

  // Error events uses format [01SSDDDD] 
  //   01 - prefix for error events 
  //   SS - length of errir seqence 
  //   DDDD - sequence data
  static void logError(Error &error){
    1b02:	a8 2e       	mov	r10, r24
    1b04:	bb 24       	eor	r11, r11
    1b06:	45 01       	movw	r8, r10
    1b08:	08 94       	sec
    1b0a:	81 08       	sbc	r8, r1
    1b0c:	91 08       	sbc	r9, r1
    1b0e:	25 c0       	rjmp	.+74     	; 0x1b5a <_ZN9GB_Logger8logErrorER5Error+0xf6>
    digitalWrite(ERROR_PIN, HIGH);
    1b10:	8c e0       	ldi	r24, 0x0C	; 12
    1b12:	61 e0       	ldi	r22, 0x01	; 1
    1b14:	0e 94 81 30 	call	0x6102	; 0x6102 <digitalWrite>
    if (bitRead(sequence, i)){
    1b18:	f7 01       	movw	r30, r14
    1b1a:	82 81       	ldd	r24, Z+2	; 0x02
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <_ZN9GB_Logger8logErrorER5Error+0xc0>
    1b20:	95 95       	asr	r25
    1b22:	87 95       	ror	r24
    1b24:	ca 94       	dec	r12
    1b26:	e2 f7       	brpl	.-8      	; 0x1b20 <_ZN9GB_Logger8logErrorER5Error+0xbc>
    1b28:	80 ff       	sbrs	r24, 0
    1b2a:	05 c0       	rjmp	.+10     	; 0x1b36 <_ZN9GB_Logger8logErrorER5Error+0xd2>
      delay(ERROR_LONG_SIGNAL_MS);
    1b2c:	60 e9       	ldi	r22, 0x90	; 144
    1b2e:	71 e0       	ldi	r23, 0x01	; 1
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	04 c0       	rjmp	.+8      	; 0x1b3e <_ZN9GB_Logger8logErrorER5Error+0xda>
    } 
    else {
      delay(ERROR_SHORT_SIGNAL_MS);
    1b36:	64 e6       	ldi	r22, 0x64	; 100
    1b38:	70 e0       	ldi	r23, 0x00	; 0
    1b3a:	80 e0       	ldi	r24, 0x00	; 0
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <delay>
    } 
    digitalWrite(ERROR_PIN, LOW);
    1b42:	8c e0       	ldi	r24, 0x0C	; 12
    1b44:	60 e0       	ldi	r22, 0x00	; 0
    1b46:	0e 94 81 30 	call	0x6102	; 0x6102 <digitalWrite>
    delay(ERROR_DELAY_BETWEEN_SIGNALS_MS);
    1b4a:	66 e9       	ldi	r22, 0x96	; 150
    1b4c:	70 e0       	ldi	r23, 0x00	; 0
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <delay>
    1b56:	0f 5f       	subi	r16, 0xFF	; 255
    1b58:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5a:	64 01       	movw	r12, r8
    1b5c:	c0 1a       	sub	r12, r16
    1b5e:	d1 0a       	sbc	r13, r17
  
  
void notify() {
  digitalWrite(ERROR_PIN, LOW);
  delay(1000);
  for (int i = sequenceSize-1; i >= 0; i--){
    1b60:	0a 15       	cp	r16, r10
    1b62:	1b 05       	cpc	r17, r11
    1b64:	a9 f6       	brne	.-86     	; 0x1b10 <_ZN9GB_Logger8logErrorER5Error+0xac>
      delay(ERROR_SHORT_SIGNAL_MS);
    } 
    digitalWrite(ERROR_PIN, LOW);
    delay(ERROR_DELAY_BETWEEN_SIGNALS_MS);
  }
  digitalWrite(ERROR_PIN, LOW);
    1b66:	8c e0       	ldi	r24, 0x0C	; 12
    1b68:	60 e0       	ldi	r22, 0x00	; 0
    1b6a:	0e 94 81 30 	call	0x6102	; 0x6102 <digitalWrite>
  delay(1000);
    1b6e:	68 ee       	ldi	r22, 0xE8	; 232
    1b70:	73 e0       	ldi	r23, 0x03	; 3
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <delay>
    } 
    printDirtyLogRecord(logRecord, error.description, isStoredNow);
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	cf 91       	pop	r28
    1b86:	df 91       	pop	r29
    1b88:	1f 91       	pop	r17
    1b8a:	0f 91       	pop	r16
    1b8c:	ff 90       	pop	r15
    1b8e:	ef 90       	pop	r14
    1b90:	df 90       	pop	r13
    1b92:	cf 90       	pop	r12
    1b94:	bf 90       	pop	r11
    1b96:	af 90       	pop	r10
    1b98:	9f 90       	pop	r9
    1b9a:	8f 90       	pop	r8
    1b9c:	08 95       	ret

00001b9e <_ZN13GB_Controller15checkFreeMemoryEv>:
    resetFunc(); //call
  }

  // discover-memory-overflow-errors-in-the-arduino-c-code
  static void checkFreeMemory(){
    if(freeMemory() < 200){ 
    1b9e:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <freeMemory>
    1ba2:	88 3c       	cpi	r24, 0xC8	; 200
    1ba4:	91 05       	cpc	r25, r1
    1ba6:	2c f4       	brge	.+10     	; 0x1bb2 <_ZN13GB_Controller15checkFreeMemoryEv+0x14>
      GB_Logger::logError(ERROR_MEMORY_LOW);   
    1ba8:	84 e7       	ldi	r24, 0x74	; 116
    1baa:	91 e0       	ldi	r25, 0x01	; 1
    1bac:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <_ZN9GB_Logger8logErrorER5Error>
    1bb0:	08 95       	ret
  static boolean stopLogError(Error &error){
    if (error.isStored){
    1bb2:	80 91 7a 01 	lds	r24, 0x017A
    1bb6:	88 23       	and	r24, r24
    1bb8:	11 f0       	breq	.+4      	; 0x1bbe <_ZN13GB_Controller15checkFreeMemoryEv+0x20>
      error.isStored = false;
    1bba:	10 92 7a 01 	sts	0x017A, r1
    1bbe:	08 95       	ret

00001bc0 <_ZN14GB_Thermometer14getTemperatureEh>:
    }

    return true;
  }

  static float getTemperature(boolean forceLog = false){
    1bc0:	8f 92       	push	r8
    1bc2:	9f 92       	push	r9
    1bc4:	af 92       	push	r10
    1bc6:	bf 92       	push	r11
    1bc8:	cf 92       	push	r12
    1bca:	df 92       	push	r13
    1bcc:	ef 92       	push	r14
    1bce:	ff 92       	push	r15
    1bd0:	0f 93       	push	r16
    1bd2:	1f 93       	push	r17
    1bd4:	df 93       	push	r29
    1bd6:	cf 93       	push	r28
    1bd8:	00 d0       	rcall	.+0      	; 0x1bda <_ZN14GB_Thermometer14getTemperatureEh+0x1a>
    1bda:	00 d0       	rcall	.+0      	; 0x1bdc <_ZN14GB_Thermometer14getTemperatureEh+0x1c>
    1bdc:	0f 92       	push	r0
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
    1be2:	c8 2e       	mov	r12, r24

    if (statisticsTemperatureCount == 0){
    1be4:	20 91 04 02 	lds	r18, 0x0204
    1be8:	30 91 05 02 	lds	r19, 0x0205
    1bec:	21 15       	cp	r18, r1
    1bee:	31 05       	cpc	r19, r1
    1bf0:	49 f4       	brne	.+18     	; 0x1c04 <_ZN14GB_Thermometer14getTemperatureEh+0x44>
      return workingTemperature; 
    1bf2:	80 90 fc 01 	lds	r8, 0x01FC
    1bf6:	90 90 fd 01 	lds	r9, 0x01FD
    1bfa:	a0 90 fe 01 	lds	r10, 0x01FE
    1bfe:	b0 90 ff 01 	lds	r11, 0x01FF
    1c02:	5e c0       	rjmp	.+188    	; 0x1cc0 <_ZN14GB_Thermometer14getTemperatureEh+0x100>
    }

    float freshTemperature = statisticsTemperatureSumm/statisticsTemperatureCount;
    1c04:	b9 01       	movw	r22, r18
    1c06:	88 27       	eor	r24, r24
    1c08:	77 fd       	sbrc	r23, 7
    1c0a:	80 95       	com	r24
    1c0c:	98 2f       	mov	r25, r24
    1c0e:	0e 94 c5 3a 	call	0x758a	; 0x758a <__floatsisf>
    1c12:	9b 01       	movw	r18, r22
    1c14:	ac 01       	movw	r20, r24
    1c16:	60 91 00 02 	lds	r22, 0x0200
    1c1a:	70 91 01 02 	lds	r23, 0x0201
    1c1e:	80 91 02 02 	lds	r24, 0x0202
    1c22:	90 91 03 02 	lds	r25, 0x0203
    1c26:	0e 94 2a 3a 	call	0x7454	; 0x7454 <__divsf3>
    1c2a:	4b 01       	movw	r8, r22
    1c2c:	5c 01       	movw	r10, r24

    if (((int)freshTemperature != (int)workingTemperature) || forceLog) {          
    1c2e:	0e 94 92 3a 	call	0x7524	; 0x7524 <__fixsfsi>
    1c32:	7b 01       	movw	r14, r22
    1c34:	8c 01       	movw	r16, r24
    1c36:	60 91 fc 01 	lds	r22, 0x01FC
    1c3a:	70 91 fd 01 	lds	r23, 0x01FD
    1c3e:	80 91 fe 01 	lds	r24, 0x01FE
    1c42:	90 91 ff 01 	lds	r25, 0x01FF
    1c46:	0e 94 92 3a 	call	0x7524	; 0x7524 <__fixsfsi>
    1c4a:	e6 16       	cp	r14, r22
    1c4c:	f7 06       	cpc	r15, r23
    1c4e:	11 f4       	brne	.+4      	; 0x1c54 <_ZN14GB_Thermometer14getTemperatureEh+0x94>
    1c50:	cc 20       	and	r12, r12
    1c52:	f1 f0       	breq	.+60     	; 0x1c90 <_ZN14GB_Thermometer14getTemperatureEh+0xd0>
      GB_Logger::logTemperature((byte)freshTemperature);
    1c54:	c5 01       	movw	r24, r10
    1c56:	b4 01       	movw	r22, r8
    1c58:	0e 94 97 3a 	call	0x752e	; 0x752e <__fixunssfsi>
    1c5c:	6b 01       	movw	r12, r22
    1c5e:	7c 01       	movw	r14, r24
    1c60:	16 2f       	mov	r17, r22
    1c62:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <_Z3nowv>
    1c66:	69 83       	std	Y+1, r22	; 0x01
    1c68:	7a 83       	std	Y+2, r23	; 0x02
    1c6a:	8b 83       	std	Y+3, r24	; 0x03
    1c6c:	9c 83       	std	Y+4, r25	; 0x04
    1c6e:	10 6c       	ori	r17, 0xC0	; 192
    1c70:	1d 83       	std	Y+5, r17	; 0x05
  // Termometer events uses format [11TTTTTT].
  //   11 - prefix for termometer events
  //   TTTTTT - temperature [0..2^6] = [0..64]
  static void logTemperature(byte temperature){
    LogRecord logRecord(B11000000|temperature);
    boolean isStored = GB_StorageHelper::storeLogRecord(logRecord);
    1c72:	8e 01       	movw	r16, r28
    1c74:	0f 5f       	subi	r16, 0xFF	; 255
    1c76:	1f 4f       	sbci	r17, 0xFF	; 255
    1c78:	c8 01       	movw	r24, r16
    1c7a:	0e 94 25 06 	call	0xc4a	; 0xc4a <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord>
    1c7e:	48 2f       	mov	r20, r24
    printDirtyLogRecord(logRecord, FS(S_Temperature), isStored, temperature);
    1c80:	c8 01       	movw	r24, r16
    1c82:	6f e6       	ldi	r22, 0x6F	; 111
    1c84:	72 e0       	ldi	r23, 0x02	; 2
    1c86:	2c 2d       	mov	r18, r12
    1c88:	0e 94 22 0c 	call	0x1844	; 0x1844 <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh>
    GB_SerialHelper::printDirtyEnd();
    1c8c:	0e 94 99 08 	call	0x1132	; 0x1132 <_ZN15GB_SerialHelper13printDirtyEndEv>
    }

    workingTemperature = freshTemperature;
    1c90:	80 92 fc 01 	sts	0x01FC, r8
    1c94:	90 92 fd 01 	sts	0x01FD, r9
    1c98:	a0 92 fe 01 	sts	0x01FE, r10
    1c9c:	b0 92 ff 01 	sts	0x01FF, r11

    statisticsTemperatureSumm = 0.0;
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	a0 e0       	ldi	r26, 0x00	; 0
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	80 93 00 02 	sts	0x0200, r24
    1cac:	90 93 01 02 	sts	0x0201, r25
    1cb0:	a0 93 02 02 	sts	0x0202, r26
    1cb4:	b0 93 03 02 	sts	0x0203, r27
    statisticsTemperatureCount = 0;
    1cb8:	10 92 05 02 	sts	0x0205, r1
    1cbc:	10 92 04 02 	sts	0x0204, r1

    return workingTemperature;
  }
    1cc0:	b4 01       	movw	r22, r8
    1cc2:	c5 01       	movw	r24, r10
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	cf 91       	pop	r28
    1cd0:	df 91       	pop	r29
    1cd2:	1f 91       	pop	r17
    1cd4:	0f 91       	pop	r16
    1cd6:	ff 90       	pop	r15
    1cd8:	ef 90       	pop	r14
    1cda:	df 90       	pop	r13
    1cdc:	cf 90       	pop	r12
    1cde:	bf 90       	pop	r11
    1ce0:	af 90       	pop	r10
    1ce2:	9f 90       	pop	r9
    1ce4:	8f 90       	pop	r8
    1ce6:	08 95       	ret

00001ce8 <_Z18updateGrowboxStatev>:
    1ce8:	ef 92       	push	r14
    1cea:	ff 92       	push	r15
    1cec:	0f 93       	push	r16
    1cee:	1f 93       	push	r17
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <_ZN14GB_Thermometer14getTemperatureEh>
    1cf6:	7b 01       	movw	r14, r22
    1cf8:	8c 01       	movw	r16, r24
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	4c e0       	ldi	r20, 0x0C	; 12
    1d00:	52 e4       	ldi	r21, 0x42	; 66
    1d02:	0e 94 75 3b 	call	0x76ea	; 0x76ea <__gesf2>
    1d06:	88 23       	and	r24, r24
    1d08:	5c f0       	brlt	.+22     	; 0x1d20 <_Z18updateGrowboxStatev+0x38>
    1d0a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <_Z12turnOffLightv>
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <_Z9turnOnFani>
    1d16:	8d e6       	ldi	r24, 0x6D	; 109
    1d18:	91 e0       	ldi	r25, 0x01	; 1
    1d1a:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <_ZN9GB_Logger8logErrorER5Error>
    1d1e:	45 c0       	rjmp	.+138    	; 0x1daa <_Z18updateGrowboxStatev+0xc2>
    1d20:	80 91 03 01 	lds	r24, 0x0103
    1d24:	88 23       	and	r24, r24
    1d26:	b9 f0       	breq	.+46     	; 0x1d56 <_Z18updateGrowboxStatev+0x6e>
    1d28:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <_Z11turnOnLightv>
    1d2c:	c8 01       	movw	r24, r16
    1d2e:	b7 01       	movw	r22, r14
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	48 eb       	ldi	r20, 0xB8	; 184
    1d36:	51 e4       	ldi	r21, 0x41	; 65
    1d38:	0e 94 26 3a 	call	0x744c	; 0x744c <__cmpsf2>
    1d3c:	88 23       	and	r24, r24
    1d3e:	74 f1       	brlt	.+92     	; 0x1d9c <_Z18updateGrowboxStatev+0xb4>
    1d40:	c8 01       	movw	r24, r16
    1d42:	b7 01       	movw	r22, r14
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	48 ee       	ldi	r20, 0xE8	; 232
    1d4a:	51 e4       	ldi	r21, 0x41	; 65
    1d4c:	0e 94 75 3b 	call	0x76ea	; 0x76ea <__gesf2>
    1d50:	18 16       	cp	r1, r24
    1d52:	24 f5       	brge	.+72     	; 0x1d9c <_Z18updateGrowboxStatev+0xb4>
    1d54:	16 c0       	rjmp	.+44     	; 0x1d82 <_Z18updateGrowboxStatev+0x9a>
    1d56:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <_Z12turnOffLightv>
    1d5a:	c8 01       	movw	r24, r16
    1d5c:	b7 01       	movw	r22, r14
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	48 e9       	ldi	r20, 0x98	; 152
    1d64:	51 e4       	ldi	r21, 0x41	; 65
    1d66:	0e 94 26 3a 	call	0x744c	; 0x744c <__cmpsf2>
    1d6a:	88 23       	and	r24, r24
    1d6c:	e4 f0       	brlt	.+56     	; 0x1da6 <_Z18updateGrowboxStatev+0xbe>
    1d6e:	c8 01       	movw	r24, r16
    1d70:	b7 01       	movw	r22, r14
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 ee       	ldi	r20, 0xE0	; 224
    1d78:	51 e4       	ldi	r21, 0x41	; 65
    1d7a:	0e 94 75 3b 	call	0x76ea	; 0x76ea <__gesf2>
    1d7e:	18 16       	cp	r1, r24
    1d80:	1c f4       	brge	.+6      	; 0x1d88 <_Z18updateGrowboxStatev+0xa0>
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	0c c0       	rjmp	.+24     	; 0x1da0 <_Z18updateGrowboxStatev+0xb8>
    1d88:	c8 01       	movw	r24, r16
    1d8a:	b7 01       	movw	r22, r14
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	48 ec       	ldi	r20, 0xC8	; 200
    1d92:	51 e4       	ldi	r21, 0x41	; 65
    1d94:	0e 94 75 3b 	call	0x76ea	; 0x76ea <__gesf2>
    1d98:	18 16       	cp	r1, r24
    1d9a:	2c f4       	brge	.+10     	; 0x1da6 <_Z18updateGrowboxStatev+0xbe>
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <_Z9turnOnFani>
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <_Z18updateGrowboxStatev+0xc2>
    1da6:	0e 94 df 0c 	call	0x19be	; 0x19be <_Z10turnOffFanv>
    1daa:	1f 91       	pop	r17
    1dac:	0f 91       	pop	r16
    1dae:	ff 90       	pop	r15
    1db0:	ef 90       	pop	r14
    1db2:	08 95       	ret

00001db4 <_Z17switchToNightModev>:
    1db4:	80 91 03 01 	lds	r24, 0x0103
    1db8:	88 23       	and	r24, r24
    1dba:	41 f0       	breq	.+16     	; 0x1dcc <_Z17switchToNightModev+0x18>
    1dbc:	10 92 03 01 	sts	0x0103, r1
    1dc0:	8a e8       	ldi	r24, 0x8A	; 138
    1dc2:	91 e0       	ldi	r25, 0x01	; 1
    1dc4:	0e 94 ae 0c 	call	0x195c	; 0x195c <_ZN9GB_Logger8logEventER5Event>
    1dc8:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_Z18updateGrowboxStatev>
    1dcc:	08 95       	ret

00001dce <_Z15switchToDayModev>:
    1dce:	80 91 03 01 	lds	r24, 0x0103
    1dd2:	81 30       	cpi	r24, 0x01	; 1
    1dd4:	49 f0       	breq	.+18     	; 0x1de8 <_Z15switchToDayModev+0x1a>
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	80 93 03 01 	sts	0x0103, r24
    1ddc:	85 e8       	ldi	r24, 0x85	; 133
    1dde:	91 e0       	ldi	r25, 0x01	; 1
    1de0:	0e 94 ae 0c 	call	0x195c	; 0x195c <_ZN9GB_Logger8logEventER5Event>
    1de4:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_Z18updateGrowboxStatev>
    1de8:	08 95       	ret

00001dea <_ZN15GB_SerialHelper11checkSerialEhh>:
      checkSerial(false, true);
    }
    //wifiExecuteCommand(F("at+con_status"));
  }

  static void checkSerial(boolean checkSerialMonitor, boolean checkWifi){
    1dea:	af 92       	push	r10
    1dec:	bf 92       	push	r11
    1dee:	cf 92       	push	r12
    1df0:	df 92       	push	r13
    1df2:	ef 92       	push	r14
    1df4:	ff 92       	push	r15
    1df6:	0f 93       	push	r16
    1df8:	1f 93       	push	r17
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	2e 97       	sbiw	r28, 0x0e	; 14
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	f8 94       	cli
    1e08:	de bf       	out	0x3e, r29	; 62
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	cd bf       	out	0x3d, r28	; 61
    1e0e:	06 2f       	mov	r16, r22

    boolean oldUseSerialMonitor  = useSerialMonitor;
    1e10:	a0 90 ad 01 	lds	r10, 0x01AD
    boolean oldUseSerialWifi     = useSerialWifi;
    1e14:	b0 90 ae 01 	lds	r11, 0x01AE
    boolean serialInUse          = (useSerialMonitor || useSerialWifi);
    1e18:	aa 20       	and	r10, r10
    1e1a:	11 f0       	breq	.+4      	; 0x1e20 <_ZN15GB_SerialHelper11checkSerialEhh+0x36>
    1e1c:	11 e0       	ldi	r17, 0x01	; 1
    1e1e:	04 c0       	rjmp	.+8      	; 0x1e28 <_ZN15GB_SerialHelper11checkSerialEhh+0x3e>
    1e20:	9b 2d       	mov	r25, r11
    1e22:	b1 10       	cpse	r11, r1
    1e24:	91 e0       	ldi	r25, 0x01	; 1
    1e26:	19 2f       	mov	r17, r25

    if (checkSerialMonitor){
    1e28:	88 23       	and	r24, r24
    1e2a:	51 f0       	breq	.+20     	; 0x1e40 <_ZN15GB_SerialHelper11checkSerialEhh+0x56>
      useSerialMonitor = (digitalRead(USE_SERIAL_MONOTOR_PIN) == SERIAL_ON);
    1e2c:	8b e0       	ldi	r24, 0x0B	; 11
    1e2e:	0e 94 d5 30 	call	0x61aa	; 0x61aa <digitalRead>
    1e32:	10 92 ad 01 	sts	0x01AD, r1
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	19 f4       	brne	.+6      	; 0x1e40 <_ZN15GB_SerialHelper11checkSerialEhh+0x56>
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	80 93 ad 01 	sts	0x01AD, r24
    }

    // Start serial, if we need
    if (!serialInUse && (useSerialMonitor || checkWifi)){
    1e40:	11 23       	and	r17, r17
    1e42:	a9 f4       	brne	.+42     	; 0x1e6e <_ZN15GB_SerialHelper11checkSerialEhh+0x84>
    1e44:	80 91 ad 01 	lds	r24, 0x01AD
    1e48:	88 23       	and	r24, r24
    1e4a:	19 f4       	brne	.+6      	; 0x1e52 <_ZN15GB_SerialHelper11checkSerialEhh+0x68>
    1e4c:	00 23       	and	r16, r16
    1e4e:	09 f4       	brne	.+2      	; 0x1e52 <_ZN15GB_SerialHelper11checkSerialEhh+0x68>
    1e50:	bc c0       	rjmp	.+376    	; 0x1fca <_ZN15GB_SerialHelper11checkSerialEhh+0x1e0>
      Serial.begin(115200);
    1e52:	87 eb       	ldi	r24, 0xB7	; 183
    1e54:	93 e0       	ldi	r25, 0x03	; 3
    1e56:	40 e0       	ldi	r20, 0x00	; 0
    1e58:	52 ec       	ldi	r21, 0xC2	; 194
    1e5a:	61 e0       	ldi	r22, 0x01	; 1
    1e5c:	70 e0       	ldi	r23, 0x00	; 0
    1e5e:	0e 94 b1 31 	call	0x6362	; 0x6362 <_ZN14HardwareSerial5beginEm>
      while (!Serial) {
    1e62:	87 eb       	ldi	r24, 0xB7	; 183
    1e64:	93 e0       	ldi	r25, 0x03	; 3
    1e66:	0e 94 48 33 	call	0x6690	; 0x6690 <_ZN14HardwareSerialcvbEv>
    1e6a:	88 23       	and	r24, r24
    1e6c:	d1 f3       	breq	.-12     	; 0x1e62 <_ZN15GB_SerialHelper11checkSerialEhh+0x78>
    if (!serialInUse){
      return; 
    }

    boolean loadWifiConfiguration = false;
    if (checkWifi || s_restartWifi){
    1e6e:	00 23       	and	r16, r16
    1e70:	29 f4       	brne	.+10     	; 0x1e7c <_ZN15GB_SerialHelper11checkSerialEhh+0x92>
    1e72:	80 91 af 01 	lds	r24, 0x01AF
    1e76:	88 23       	and	r24, r24
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <_ZN15GB_SerialHelper11checkSerialEhh+0x92>
    1e7a:	5b c0       	rjmp	.+182    	; 0x1f32 <_ZN15GB_SerialHelper11checkSerialEhh+0x148>
    1e7c:	00 e0       	ldi	r16, 0x00	; 0
    1e7e:	10 e0       	ldi	r17, 0x00	; 0
      for (int i = 0; i<2; i++){ // Sometimes first command returns ERROR, two attempts
        cleanSerialBuffer();
        String input = wifiExecuteRawCommand(F("at+reset=0"), 500); // spec boot time 210
    1e80:	7e 01       	movw	r14, r28
    1e82:	08 94       	sec
    1e84:	e1 1c       	adc	r14, r1
    1e86:	f1 1c       	adc	r15, r1
        useSerialWifi = input.startsWith(flashStringLoad(S_WIFI_RESPONSE_WELLCOME));
    1e88:	38 e0       	ldi	r19, 0x08	; 8
    1e8a:	c3 2e       	mov	r12, r19
    1e8c:	d1 2c       	mov	r13, r1
    1e8e:	cc 0e       	add	r12, r28
    1e90:	dd 1e       	adc	r13, r29
    }

    boolean loadWifiConfiguration = false;
    if (checkWifi || s_restartWifi){
      for (int i = 0; i<2; i++){ // Sometimes first command returns ERROR, two attempts
        cleanSerialBuffer();
    1e92:	0e 94 87 08 	call	0x110e	; 0x110e <_ZN15GB_SerialHelper17cleanSerialBufferEv>
        String input = wifiExecuteRawCommand(F("at+reset=0"), 500); // spec boot time 210
    1e96:	c7 01       	movw	r24, r14
    1e98:	6e ea       	ldi	r22, 0xAE	; 174
    1e9a:	71 e0       	ldi	r23, 0x01	; 1
    1e9c:	44 ef       	ldi	r20, 0xF4	; 244
    1e9e:	51 e0       	ldi	r21, 0x01	; 1
    1ea0:	21 e0       	ldi	r18, 0x01	; 1
    1ea2:	0e 94 bc 08 	call	0x1178	; 0x1178 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih>
        useSerialWifi = input.startsWith(flashStringLoad(S_WIFI_RESPONSE_WELLCOME));
    1ea6:	c6 01       	movw	r24, r12
    1ea8:	60 e3       	ldi	r22, 0x30	; 48
    1eaa:	71 e0       	ldi	r23, 0x01	; 1
    1eac:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZL15flashStringLoadPKc>
    1eb0:	c7 01       	movw	r24, r14
    1eb2:	b6 01       	movw	r22, r12
    1eb4:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <_ZNK6String10startsWithERKS_>
    1eb8:	80 93 ae 01 	sts	0x01AE, r24
    1ebc:	c6 01       	movw	r24, r12
    1ebe:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
        if (useSerialWifi) {
    1ec2:	80 91 ae 01 	lds	r24, 0x01AE
    1ec6:	88 23       	and	r24, r24
    1ec8:	61 f0       	breq	.+24     	; 0x1ee2 <_ZN15GB_SerialHelper11checkSerialEhh+0xf8>
          s_restartWifi = false;
    1eca:	10 92 af 01 	sts	0x01AF, r1
    1ece:	80 91 4a 01 	lds	r24, 0x014A
    1ed2:	81 11       	cpse	r24, r1
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	18 2f       	mov	r17, r24
      return; 
    }

    boolean loadWifiConfiguration = false;
    if (checkWifi || s_restartWifi){
      for (int i = 0; i<2; i++){ // Sometimes first command returns ERROR, two attempts
    1ed8:	ce 01       	movw	r24, r28
    1eda:	01 96       	adiw	r24, 0x01	; 1
    1edc:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    1ee0:	29 c0       	rjmp	.+82     	; 0x1f34 <_ZN15GB_SerialHelper11checkSerialEhh+0x14a>
          if(g_isGrowboxStarted){
            loadWifiConfiguration = true;
          }
          break;
        }
        if (useSerialMonitor && input.length() > 0){
    1ee2:	80 91 ad 01 	lds	r24, 0x01AD
    1ee6:	88 23       	and	r24, r24
    1ee8:	d9 f0       	breq	.+54     	; 0x1f20 <_ZN15GB_SerialHelper11checkSerialEhh+0x136>
    1eea:	8d 81       	ldd	r24, Y+5	; 0x05
    1eec:	9e 81       	ldd	r25, Y+6	; 0x06
    1eee:	89 2b       	or	r24, r25
    1ef0:	b9 f0       	breq	.+46     	; 0x1f20 <_ZN15GB_SerialHelper11checkSerialEhh+0x136>
          showWifiStatus(F("Not corrent wellcome message: "), false);
    1ef2:	8f e8       	ldi	r24, 0x8F	; 143
    1ef4:	91 e0       	ldi	r25, 0x01	; 1
    1ef6:	60 e0       	ldi	r22, 0x00	; 0
    1ef8:	0e 94 a0 08 	call	0x1140	; 0x1140 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
          GB_PrintDirty::printWithoutCRLF(input);
    1efc:	c7 01       	movw	r24, r14
    1efe:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String>
          Serial.print(FS(S_Next));
    1f02:	87 eb       	ldi	r24, 0xB7	; 183
    1f04:	93 e0       	ldi	r25, 0x03	; 3
    1f06:	64 ed       	ldi	r22, 0xD4	; 212
    1f08:	70 e0       	ldi	r23, 0x00	; 0
    1f0a:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <_ZN5Print5printEPK19__FlashStringHelper>
          GB_PrintDirty::printHEX(input); 
    1f0e:	c7 01       	movw	r24, r14
    1f10:	0e 94 ba 07 	call	0xf74	; 0xf74 <_ZN13GB_PrintDirty8printHEXERK6String>
          Serial.println();
    1f14:	87 eb       	ldi	r24, 0xB7	; 183
    1f16:	93 e0       	ldi	r25, 0x03	; 3
    1f18:	0e 94 04 34 	call	0x6808	; 0x6808 <_ZN5Print7printlnEv>
          printDirtyEnd();
    1f1c:	0e 94 99 08 	call	0x1132	; 0x1132 <_ZN15GB_SerialHelper13printDirtyEndEv>
      return; 
    }

    boolean loadWifiConfiguration = false;
    if (checkWifi || s_restartWifi){
      for (int i = 0; i<2; i++){ // Sometimes first command returns ERROR, two attempts
    1f20:	c7 01       	movw	r24, r14
    1f22:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    1f26:	0f 5f       	subi	r16, 0xFF	; 255
    1f28:	1f 4f       	sbci	r17, 0xFF	; 255
    1f2a:	02 30       	cpi	r16, 0x02	; 2
    1f2c:	11 05       	cpc	r17, r1
    1f2e:	09 f0       	breq	.+2      	; 0x1f32 <_ZN15GB_SerialHelper11checkSerialEhh+0x148>
    1f30:	b0 cf       	rjmp	.-160    	; 0x1e92 <_ZN15GB_SerialHelper11checkSerialEhh+0xa8>
    1f32:	10 e0       	ldi	r17, 0x00	; 0
          printDirtyEnd();
        }
      }
    }

    if (useSerialMonitor != oldUseSerialMonitor){
    1f34:	80 91 ad 01 	lds	r24, 0x01AD
    1f38:	8a 15       	cp	r24, r10
    1f3a:	b9 f0       	breq	.+46     	; 0x1f6a <_ZN15GB_SerialHelper11checkSerialEhh+0x180>
      Serial.print(F("Serial monitor: "));
    1f3c:	87 eb       	ldi	r24, 0xB7	; 183
    1f3e:	93 e0       	ldi	r25, 0x03	; 3
    1f40:	6e e7       	ldi	r22, 0x7E	; 126
    1f42:	71 e0       	ldi	r23, 0x01	; 1
    1f44:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <_ZN5Print5printEPK19__FlashStringHelper>
      if (useSerialMonitor){
    1f48:	80 91 ad 01 	lds	r24, 0x01AD
    1f4c:	88 23       	and	r24, r24
    1f4e:	29 f0       	breq	.+10     	; 0x1f5a <_ZN15GB_SerialHelper11checkSerialEhh+0x170>
        Serial.println(FS(S_enabled));
    1f50:	87 eb       	ldi	r24, 0xB7	; 183
    1f52:	93 e0       	ldi	r25, 0x03	; 3
    1f54:	64 e4       	ldi	r22, 0x44	; 68
    1f56:	71 e0       	ldi	r23, 0x01	; 1
    1f58:	04 c0       	rjmp	.+8      	; 0x1f62 <_ZN15GB_SerialHelper11checkSerialEhh+0x178>
      } 
      else {
        Serial.println(FS(S_disabled));
    1f5a:	87 eb       	ldi	r24, 0xB7	; 183
    1f5c:	93 e0       	ldi	r25, 0x03	; 3
    1f5e:	6d e4       	ldi	r22, 0x4D	; 77
    1f60:	71 e0       	ldi	r23, 0x01	; 1
    1f62:	0e 94 24 34 	call	0x6848	; 0x6848 <_ZN5Print7printlnEPK19__FlashStringHelper>
      }
      printDirtyEnd();
    1f66:	0e 94 99 08 	call	0x1132	; 0x1132 <_ZN15GB_SerialHelper13printDirtyEndEv>
    }
    if (useSerialWifi != oldUseSerialWifi && (useSerialMonitor || (useSerialMonitor != oldUseSerialMonitor ))){
    1f6a:	90 91 ae 01 	lds	r25, 0x01AE
    1f6e:	9b 15       	cp	r25, r11
    1f70:	d9 f0       	breq	.+54     	; 0x1fa8 <_ZN15GB_SerialHelper11checkSerialEhh+0x1be>
    1f72:	80 91 ad 01 	lds	r24, 0x01AD
    1f76:	88 23       	and	r24, r24
    1f78:	11 f4       	brne	.+4      	; 0x1f7e <_ZN15GB_SerialHelper11checkSerialEhh+0x194>
    1f7a:	aa 20       	and	r10, r10
    1f7c:	a9 f0       	breq	.+42     	; 0x1fa8 <_ZN15GB_SerialHelper11checkSerialEhh+0x1be>
      if(useSerialWifi){ 
    1f7e:	99 23       	and	r25, r25
    1f80:	59 f0       	breq	.+22     	; 0x1f98 <_ZN15GB_SerialHelper11checkSerialEhh+0x1ae>
        Serial.print(F("Serial Wi-Fi:"));
    1f82:	87 eb       	ldi	r24, 0xB7	; 183
    1f84:	93 e0       	ldi	r25, 0x03	; 3
    1f86:	60 e7       	ldi	r22, 0x70	; 112
    1f88:	71 e0       	ldi	r23, 0x01	; 1
    1f8a:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.println(FS(S_connected)); // shows when useSerialMonitor=false
    1f8e:	87 eb       	ldi	r24, 0xB7	; 183
    1f90:	93 e0       	ldi	r25, 0x03	; 3
    1f92:	67 e5       	ldi	r22, 0x57	; 87
    1f94:	71 e0       	ldi	r23, 0x01	; 1
    1f96:	04 c0       	rjmp	.+8      	; 0x1fa0 <_ZN15GB_SerialHelper11checkSerialEhh+0x1b6>
      } 
      else {
        Serial.println(FS(S_disconnected));
    1f98:	87 eb       	ldi	r24, 0xB7	; 183
    1f9a:	93 e0       	ldi	r25, 0x03	; 3
    1f9c:	62 e6       	ldi	r22, 0x62	; 98
    1f9e:	71 e0       	ldi	r23, 0x01	; 1
    1fa0:	0e 94 24 34 	call	0x6848	; 0x6848 <_ZN5Print7printlnEPK19__FlashStringHelper>
      }
      printDirtyEnd();
    1fa4:	0e 94 99 08 	call	0x1132	; 0x1132 <_ZN15GB_SerialHelper13printDirtyEndEv>
    }

    // Close Serial connection if nessesary
    boolean newSerialInUse = (useSerialMonitor || useSerialWifi);
    1fa8:	80 91 ad 01 	lds	r24, 0x01AD
    1fac:	88 23       	and	r24, r24
    1fae:	21 f4       	brne	.+8      	; 0x1fb8 <_ZN15GB_SerialHelper11checkSerialEhh+0x1ce>
    1fb0:	80 91 ae 01 	lds	r24, 0x01AE
    1fb4:	88 23       	and	r24, r24
    1fb6:	29 f0       	breq	.+10     	; 0x1fc2 <_ZN15GB_SerialHelper11checkSerialEhh+0x1d8>
    if (!newSerialInUse){
      Serial.end();
      return;
    } 
    else if (loadWifiConfiguration){
    1fb8:	11 23       	and	r17, r17
    1fba:	39 f0       	breq	.+14     	; 0x1fca <_ZN15GB_SerialHelper11checkSerialEhh+0x1e0>
      startWifi();
    1fbc:	0e 94 ae 0a 	call	0x155c	; 0x155c <_ZN15GB_SerialHelper9startWifiEv>
    1fc0:	04 c0       	rjmp	.+8      	; 0x1fca <_ZN15GB_SerialHelper11checkSerialEhh+0x1e0>
    }

    // Close Serial connection if nessesary
    boolean newSerialInUse = (useSerialMonitor || useSerialWifi);
    if (!newSerialInUse){
      Serial.end();
    1fc2:	87 eb       	ldi	r24, 0xB7	; 183
    1fc4:	93 e0       	ldi	r25, 0x03	; 3
    1fc6:	0e 94 38 32 	call	0x6470	; 0x6470 <_ZN14HardwareSerial3endEv>
      return;
    } 
    else if (loadWifiConfiguration){
      startWifi();
    }
  }
    1fca:	2e 96       	adiw	r28, 0x0e	; 14
    1fcc:	0f b6       	in	r0, 0x3f	; 63
    1fce:	f8 94       	cli
    1fd0:	de bf       	out	0x3e, r29	; 62
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	cd bf       	out	0x3d, r28	; 61
    1fd6:	cf 91       	pop	r28
    1fd8:	df 91       	pop	r29
    1fda:	1f 91       	pop	r17
    1fdc:	0f 91       	pop	r16
    1fde:	ff 90       	pop	r15
    1fe0:	ef 90       	pop	r14
    1fe2:	df 90       	pop	r13
    1fe4:	cf 90       	pop	r12
    1fe6:	bf 90       	pop	r11
    1fe8:	af 90       	pop	r10
    1fea:	08 95       	ret

00001fec <_Z16updateWiFiStatusv>:
  }



  static void updateWiFiStatus(){
    if (s_restartWifi){
    1fec:	80 91 af 01 	lds	r24, 0x01AF
    1ff0:	88 23       	and	r24, r24
    1ff2:	21 f0       	breq	.+8      	; 0x1ffc <_Z16updateWiFiStatusv+0x10>
      checkSerial(false, true);
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	61 e0       	ldi	r22, 0x01	; 1
    1ff8:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN15GB_SerialHelper11checkSerialEhh>
    1ffc:	08 95       	ret

00001ffe <_ZN14GB_Thermometer16updateStatisticsEv>:

    dallasTemperature.getAddress(oneWireAddress, 0); // search for devices on the bus and assign based on an index.
  }

  // TODO rename
  static boolean updateStatistics(){
    1ffe:	ef 92       	push	r14
    2000:	ff 92       	push	r15
    2002:	0f 93       	push	r16
    2004:	1f 93       	push	r17

    if(!dallasTemperature.requestTemperaturesByAddress(oneWireAddress)){
    2006:	81 ee       	ldi	r24, 0xE1	; 225
    2008:	91 e0       	ldi	r25, 0x01	; 1
    200a:	64 ef       	ldi	r22, 0xF4	; 244
    200c:	71 e0       	ldi	r23, 0x01	; 1
    200e:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <_ZN17DallasTemperature28requestTemperaturesByAddressEPh>
    2012:	88 23       	and	r24, r24
    2014:	19 f4       	brne	.+6      	; 0x201c <_ZN14GB_Thermometer16updateStatisticsEv+0x1e>
      GB_Logger::logError(ERROR_TERMOMETER_DISCONNECTED);
    2016:	8f e5       	ldi	r24, 0x5F	; 95
    2018:	91 e0       	ldi	r25, 0x01	; 1
    201a:	0e c0       	rjmp	.+28     	; 0x2038 <_ZN14GB_Thermometer16updateStatisticsEv+0x3a>
      return false;
    };

    float freshTemperature = dallasTemperature.getTempC(oneWireAddress);
    201c:	81 ee       	ldi	r24, 0xE1	; 225
    201e:	91 e0       	ldi	r25, 0x01	; 1
    2020:	64 ef       	ldi	r22, 0xF4	; 244
    2022:	71 e0       	ldi	r23, 0x01	; 1
    2024:	0e 94 be 2c 	call	0x597c	; 0x597c <_ZN17DallasTemperature8getTempCEPh>
    2028:	7b 01       	movw	r14, r22
    202a:	8c 01       	movw	r16, r24

    if ((int)freshTemperature == 0){
    202c:	0e 94 92 3a 	call	0x7524	; 0x7524 <__fixsfsi>
    2030:	67 2b       	or	r22, r23
    2032:	31 f4       	brne	.+12     	; 0x2040 <_ZN14GB_Thermometer16updateStatisticsEv+0x42>
      GB_Logger::logError(ERROR_TERMOMETER_ZERO_VALUE);  
    2034:	86 e6       	ldi	r24, 0x66	; 102
    2036:	91 e0       	ldi	r25, 0x01	; 1
    2038:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <_ZN9GB_Logger8logErrorER5Error>
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	39 c0       	rjmp	.+114    	; 0x20b2 <_ZN14GB_Thermometer16updateStatisticsEv+0xb4>
      return false;
    }

    statisticsTemperatureSumm += freshTemperature;
    2040:	60 91 00 02 	lds	r22, 0x0200
    2044:	70 91 01 02 	lds	r23, 0x0201
    2048:	80 91 02 02 	lds	r24, 0x0202
    204c:	90 91 03 02 	lds	r25, 0x0203
    2050:	a8 01       	movw	r20, r16
    2052:	97 01       	movw	r18, r14
    2054:	0e 94 c2 39 	call	0x7384	; 0x7384 <__addsf3>
    2058:	60 93 00 02 	sts	0x0200, r22
    205c:	70 93 01 02 	sts	0x0201, r23
    2060:	80 93 02 02 	sts	0x0202, r24
    2064:	90 93 03 02 	sts	0x0203, r25
    statisticsTemperatureCount++;
    2068:	20 91 04 02 	lds	r18, 0x0204
    206c:	30 91 05 02 	lds	r19, 0x0205
    2070:	2f 5f       	subi	r18, 0xFF	; 255
    2072:	3f 4f       	sbci	r19, 0xFF	; 255
    2074:	30 93 05 02 	sts	0x0205, r19
    2078:	20 93 04 02 	sts	0x0204, r18
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
  static boolean stopLogError(Error &error){
    if (error.isStored){
    207c:	80 91 6c 01 	lds	r24, 0x016C
    2080:	88 23       	and	r24, r24
    2082:	11 f4       	brne	.+4      	; 0x2088 <_ZN14GB_Thermometer16updateStatisticsEv+0x8a>
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	03 c0       	rjmp	.+6      	; 0x208e <_ZN14GB_Thermometer16updateStatisticsEv+0x90>
      error.isStored = false;
    2088:	10 92 6c 01 	sts	0x016C, r1
    208c:	91 e0       	ldi	r25, 0x01	; 1
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
  static boolean stopLogError(Error &error){
    if (error.isStored){
    208e:	80 91 65 01 	lds	r24, 0x0165
    2092:	88 23       	and	r24, r24
    2094:	19 f0       	breq	.+6      	; 0x209c <_ZN14GB_Thermometer16updateStatisticsEv+0x9e>
      error.isStored = false;
    2096:	10 92 65 01 	sts	0x0165, r1
    209a:	81 e0       	ldi	r24, 0x01	; 1

    boolean forceLog = 
      GB_Logger::stopLogError(ERROR_TERMOMETER_ZERO_VALUE) |
      GB_Logger::stopLogError(ERROR_TERMOMETER_DISCONNECTED); 
    if (forceLog) {
    209c:	89 2b       	or	r24, r25
    209e:	11 f0       	breq	.+4      	; 0x20a4 <_ZN14GB_Thermometer16updateStatisticsEv+0xa6>
      getTemperature(true);
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	04 c0       	rjmp	.+8      	; 0x20ac <_ZN14GB_Thermometer16updateStatisticsEv+0xae>
    }
    else if (statisticsTemperatureCount > 100){
    20a4:	25 36       	cpi	r18, 0x65	; 101
    20a6:	31 05       	cpc	r19, r1
    20a8:	1c f0       	brlt	.+6      	; 0x20b0 <_ZN14GB_Thermometer16updateStatisticsEv+0xb2>
      getTemperature(); // prevents overflow 
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <_ZN14GB_Thermometer14getTemperatureEh>
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    }

    return true;
  }
    20b2:	1f 91       	pop	r17
    20b4:	0f 91       	pop	r16
    20b6:	ff 90       	pop	r15
    20b8:	ef 90       	pop	r14
    20ba:	08 95       	ret

000020bc <_Z27updateThermometerStatisticsv>:
    20bc:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <_ZN14GB_Thermometer16updateStatisticsEv>
    20c0:	08 95       	ret

000020c2 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_>:
    else {
      showWifiStatus(F("Start failed"));
    }
  }

  static boolean handleSerialEvent(String &input, boolean &isWifiRequest, byte &wifiPortDescriptor){
    20c2:	4f 92       	push	r4
    20c4:	5f 92       	push	r5
    20c6:	6f 92       	push	r6
    20c8:	7f 92       	push	r7
    20ca:	8f 92       	push	r8
    20cc:	9f 92       	push	r9
    20ce:	af 92       	push	r10
    20d0:	bf 92       	push	r11
    20d2:	cf 92       	push	r12
    20d4:	df 92       	push	r13
    20d6:	ef 92       	push	r14
    20d8:	ff 92       	push	r15
    20da:	0f 93       	push	r16
    20dc:	1f 93       	push	r17
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	e2 97       	sbiw	r28, 0x32	; 50
    20e8:	0f b6       	in	r0, 0x3f	; 63
    20ea:	f8 94       	cli
    20ec:	de bf       	out	0x3e, r29	; 62
    20ee:	0f be       	out	0x3f, r0	; 63
    20f0:	cd bf       	out	0x3d, r28	; 61
    20f2:	7c 01       	movw	r14, r24
    20f4:	2b 01       	movw	r4, r22
    20f6:	3a 01       	movw	r6, r20

    input = "";  
    20f8:	60 e0       	ldi	r22, 0x00	; 0
    20fa:	71 e0       	ldi	r23, 0x01	; 1
    20fc:	0e 94 fb 37 	call	0x6ff6	; 0x6ff6 <_ZN6StringaSEPKc>
    isWifiRequest = false; 
    2100:	f2 01       	movw	r30, r4
    2102:	10 82       	st	Z, r1
    wifiPortDescriptor = 0xFF;
    2104:	8f ef       	ldi	r24, 0xFF	; 255
    2106:	f3 01       	movw	r30, r6
    2108:	80 83       	st	Z, r24

    boolean isReadError = false;
    210a:	19 82       	std	Y+1, r1	; 0x01

    boolean isWifiRequestClientConnected = false;
    boolean isWifiRequestClientDisconnected = false;

    while (Serial.available()){
      input += (char) readByteFromSerialBuffer(isReadError); // Always use casting to (char) with String object!
    210c:	4e 01       	movw	r8, r28
    210e:	08 94       	sec
    2110:	81 1c       	adc	r8, r1
    2112:	91 1c       	adc	r9, r1
          // Data recive failed or undocumented command
          cleanSerialBuffer();     
        }
        return false;
      }
      else if (input.startsWith(flashStringLoad(S_WIFI_RESPONSE_WELLCOME)) || input.startsWith(flashStringLoad(S_WIFI_RESPONSE_ERROR))){
    2114:	6e e1       	ldi	r22, 0x1E	; 30
    2116:	a6 2e       	mov	r10, r22
    2118:	b1 2c       	mov	r11, r1
    211a:	ac 0e       	add	r10, r28
    211c:	bd 1e       	adc	r11, r29
    211e:	55 e2       	ldi	r21, 0x25	; 37
    2120:	c5 2e       	mov	r12, r21
    2122:	d1 2c       	mov	r13, r1
    2124:	cc 0e       	add	r12, r28
    2126:	dd 1e       	adc	r13, r29
    2128:	ef c0       	rjmp	.+478    	; 0x2308 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x246>

    boolean isWifiRequestClientConnected = false;
    boolean isWifiRequestClientDisconnected = false;

    while (Serial.available()){
      input += (char) readByteFromSerialBuffer(isReadError); // Always use casting to (char) with String object!
    212a:	c4 01       	movw	r24, r8
    212c:	0e 94 6d 08 	call	0x10da	; 0x10da <_ZN15GB_SerialHelper24readByteFromSerialBufferERh>
    2130:	68 2f       	mov	r22, r24
    2132:	c7 01       	movw	r24, r14
    2134:	0e 94 7d 37 	call	0x6efa	; 0x6efa <_ZN6String6concatEc>

      if (flashStringEquals(F("at+recv_data="), input)){ // length compires first 
    2138:	86 ea       	ldi	r24, 0xA6	; 166
    213a:	92 e0       	ldi	r25, 0x02	; 2
    213c:	b7 01       	movw	r22, r14
    213e:	0e 94 88 07 	call	0xf10	; 0xf10 <_ZL17flashStringEqualsPK19__FlashStringHelperRK6String>
    2142:	88 23       	and	r24, r24
    2144:	09 f4       	brne	.+2      	; 0x2148 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x86>
    2146:	ba c0       	rjmp	.+372    	; 0x22bc <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x1fa>
        input = "";     
    2148:	c7 01       	movw	r24, r14
    214a:	60 e0       	ldi	r22, 0x00	; 0
    214c:	71 e0       	ldi	r23, 0x01	; 1
    214e:	0e 94 fb 37 	call	0x6ff6	; 0x6ff6 <_ZN6StringaSEPKc>
        byte firstRequestHeaderByte = readByteFromSerialBuffer(isReadError); // first byte
    2152:	c4 01       	movw	r24, r8
    2154:	0e 94 6d 08 	call	0x10da	; 0x10da <_ZN15GB_SerialHelper24readByteFromSerialBufferERh>
    2158:	98 2f       	mov	r25, r24

        // Serial.print(F("WIFI-T> ")); Serial.println((byte)firstRequestHeaderByte, HEX); printDirtyEnd();

        if (firstRequestHeaderByte <= 0x07) {   
    215a:	88 30       	cpi	r24, 0x08	; 8
    215c:	08 f0       	brcs	.+2      	; 0x2160 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x9e>
    215e:	92 c0       	rjmp	.+292    	; 0x2284 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x1c2>
          // Recive data
          isWifiRequest = true;
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	f2 01       	movw	r30, r4
    2164:	80 83       	st	Z, r24

          wifiPortDescriptor = firstRequestHeaderByte;
    2166:	f3 01       	movw	r30, r6
    2168:	90 83       	st	Z, r25
    216a:	00 e0       	ldi	r16, 0x00	; 0
    216c:	10 e0       	ldi	r17, 0x00	; 0
   return (index) == length; 
   }
   */
  static void skipByteFromSerialBuffer(boolean &isError, byte length = 1){
    int index = 0;
    while ((index < length) && Serial.available()){
    216e:	87 eb       	ldi	r24, 0xB7	; 183
    2170:	93 e0       	ldi	r25, 0x03	; 3
    2172:	0e 94 9e 32 	call	0x653c	; 0x653c <_ZN14HardwareSerial9availableEv>
    2176:	89 2b       	or	r24, r25
    2178:	09 f4       	brne	.+2      	; 0x217c <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0xba>
    217a:	53 c1       	rjmp	.+678    	; 0x2422 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x360>
      Serial.read();
    217c:	87 eb       	ldi	r24, 0xB7	; 183
    217e:	93 e0       	ldi	r25, 0x03	; 3
    2180:	0e 94 cf 32 	call	0x659e	; 0x659e <_ZN14HardwareSerial4readEv>
      index++;
    2184:	0f 5f       	subi	r16, 0xFF	; 255
    2186:	1f 4f       	sbci	r17, 0xFF	; 255
   return (index) == length; 
   }
   */
  static void skipByteFromSerialBuffer(boolean &isError, byte length = 1){
    int index = 0;
    while ((index < length) && Serial.available()){
    2188:	08 30       	cpi	r16, 0x08	; 8
    218a:	11 05       	cpc	r17, r1
    218c:	09 f4       	brne	.+2      	; 0x2190 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0xce>
    218e:	49 c1       	rjmp	.+658    	; 0x2422 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x360>
    2190:	ee cf       	rjmp	.-36     	; 0x216e <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0xac>
          // Optimization
          skipByteFromSerialBuffer(isReadError, 8); // skip Destination port, IP and data length

          // Read first line   
          while (Serial.available() && !input.endsWith(flashStringLoad(S_CRLF))){
            input += (char) readByteFromSerialBuffer(isReadError); // Always use casting to (char) with String object!
    2192:	c5 01       	movw	r24, r10
    2194:	0e 94 6d 08 	call	0x10da	; 0x10da <_ZN15GB_SerialHelper24readByteFromSerialBufferERh>
    2198:	68 2f       	mov	r22, r24
    219a:	c7 01       	movw	r24, r14
    219c:	0e 94 7d 37 	call	0x6efa	; 0x6efa <_ZN6String6concatEc>
    21a0:	09 c0       	rjmp	.+18     	; 0x21b4 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0xf2>
           */
          // Optimization
          skipByteFromSerialBuffer(isReadError, 8); // skip Destination port, IP and data length

          // Read first line   
          while (Serial.available() && !input.endsWith(flashStringLoad(S_CRLF))){
    21a2:	42 e0       	ldi	r20, 0x02	; 2
    21a4:	c4 2e       	mov	r12, r20
    21a6:	d1 2c       	mov	r13, r1
    21a8:	cc 0e       	add	r12, r28
    21aa:	dd 1e       	adc	r13, r29
            input += (char) readByteFromSerialBuffer(isReadError); // Always use casting to (char) with String object!
    21ac:	5e 01       	movw	r10, r28
    21ae:	08 94       	sec
    21b0:	a1 1c       	adc	r10, r1
    21b2:	b1 1c       	adc	r11, r1
           */
          // Optimization
          skipByteFromSerialBuffer(isReadError, 8); // skip Destination port, IP and data length

          // Read first line   
          while (Serial.available() && !input.endsWith(flashStringLoad(S_CRLF))){
    21b4:	87 eb       	ldi	r24, 0xB7	; 183
    21b6:	93 e0       	ldi	r25, 0x03	; 3
    21b8:	0e 94 9e 32 	call	0x653c	; 0x653c <_ZN14HardwareSerial9availableEv>
    21bc:	89 2b       	or	r24, r25
    21be:	79 f0       	breq	.+30     	; 0x21de <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x11c>
    21c0:	c6 01       	movw	r24, r12
    21c2:	6a ec       	ldi	r22, 0xCA	; 202
    21c4:	70 e0       	ldi	r23, 0x00	; 0
    21c6:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZL15flashStringLoadPKc>
    21ca:	c7 01       	movw	r24, r14
    21cc:	b6 01       	movw	r22, r12
    21ce:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <_ZNK6String8endsWithERKS_>
    21d2:	18 2f       	mov	r17, r24
    21d4:	c6 01       	movw	r24, r12
    21d6:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    21da:	11 23       	and	r17, r17
    21dc:	d1 f2       	breq	.-76     	; 0x2192 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0xd0>
            input += (char) readByteFromSerialBuffer(isReadError); // Always use casting to (char) with String object!
          }

          //Serial.print(F("WIFI-T> ")); Serial.println(input); printDirtyEnd(); 

          if (input.startsWith(flashStringLoad(S_WIFI_GET_)) && input.endsWith(flashStringLoad(S_CRLF))){
    21de:	8e 01       	movw	r16, r28
    21e0:	07 5f       	subi	r16, 0xF7	; 247
    21e2:	1f 4f       	sbci	r17, 0xFF	; 255
    21e4:	c8 01       	movw	r24, r16
    21e6:	6f e8       	ldi	r22, 0x8F	; 143
    21e8:	72 e0       	ldi	r23, 0x02	; 2
    21ea:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZL15flashStringLoadPKc>
    21ee:	c7 01       	movw	r24, r14
    21f0:	b8 01       	movw	r22, r16
    21f2:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <_ZNK6String10startsWithERKS_>
    21f6:	88 23       	and	r24, r24
    21f8:	11 f4       	brne	.+4      	; 0x21fe <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x13c>
    21fa:	10 e0       	ldi	r17, 0x00	; 0
    21fc:	13 c0       	rjmp	.+38     	; 0x2224 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x162>
    21fe:	8e 01       	movw	r16, r28
    2200:	00 5f       	subi	r16, 0xF0	; 240
    2202:	1f 4f       	sbci	r17, 0xFF	; 255
    2204:	c8 01       	movw	r24, r16
    2206:	6a ec       	ldi	r22, 0xCA	; 202
    2208:	70 e0       	ldi	r23, 0x00	; 0
    220a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZL15flashStringLoadPKc>
    220e:	c7 01       	movw	r24, r14
    2210:	b8 01       	movw	r22, r16
    2212:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <_ZNK6String8endsWithERKS_>
    2216:	81 11       	cpse	r24, r1
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	18 2f       	mov	r17, r24
    221c:	ce 01       	movw	r24, r28
    221e:	40 96       	adiw	r24, 0x10	; 16
    2220:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    2224:	ce 01       	movw	r24, r28
    2226:	09 96       	adiw	r24, 0x09	; 9
    2228:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    222c:	11 23       	and	r17, r17
    222e:	19 f1       	breq	.+70     	; 0x2276 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x1b4>
            int lastIndex = input.indexOf(' ', 4);
    2230:	c7 01       	movw	r24, r14
    2232:	60 e2       	ldi	r22, 0x20	; 32
    2234:	44 e0       	ldi	r20, 0x04	; 4
    2236:	50 e0       	ldi	r21, 0x00	; 0
    2238:	0e 94 19 36 	call	0x6c32	; 0x6c32 <_ZNK6String7indexOfEcj>
    223c:	9c 01       	movw	r18, r24
            if (lastIndex == -1){
    223e:	ff ef       	ldi	r31, 0xFF	; 255
    2240:	8f 3f       	cpi	r24, 0xFF	; 255
    2242:	9f 07       	cpc	r25, r31
    2244:	29 f4       	brne	.+10     	; 0x2250 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x18e>
              lastIndex = input.length()-2; // \r\n-1
    2246:	f7 01       	movw	r30, r14
    2248:	24 81       	ldd	r18, Z+4	; 0x04
    224a:	35 81       	ldd	r19, Z+5	; 0x05
    224c:	22 50       	subi	r18, 0x02	; 2
    224e:	30 40       	sbci	r19, 0x00	; 0
            }
            input = input.substring(4, lastIndex);             
    2250:	8e 01       	movw	r16, r28
    2252:	09 5e       	subi	r16, 0xE9	; 233
    2254:	1f 4f       	sbci	r17, 0xFF	; 255
    2256:	c8 01       	movw	r24, r16
    2258:	b7 01       	movw	r22, r14
    225a:	44 e0       	ldi	r20, 0x04	; 4
    225c:	50 e0       	ldi	r21, 0x00	; 0
    225e:	0e 94 5f 38 	call	0x70be	; 0x70be <_ZNK6String9substringEjj>
    2262:	c7 01       	movw	r24, r14
    2264:	b8 01       	movw	r22, r16
    2266:	0e 94 b2 38 	call	0x7164	; 0x7164 <_ZN6StringaSERKS_>
    226a:	c8 01       	movw	r24, r16
    226c:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
            //Serial.print(F("WIFI-T> ")); Serial.println(input); printDirtyEnd(); 

            cleanSerialBuffer(); // We are not interested in data which is remained
    2270:	0e 94 87 08 	call	0x110e	; 0x110e <_ZN15GB_SerialHelper17cleanSerialBufferEv>
    2274:	50 c0       	rjmp	.+160    	; 0x2316 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x254>

            break; // outside cicrle
          } 
          cleanSerialBuffer();
    2276:	0e 94 87 08 	call	0x110e	; 0x110e <_ZN15GB_SerialHelper17cleanSerialBufferEv>
          closeConnection(wifiPortDescriptor);  // This is garbage request, only one attempt allowed
    227a:	f3 01       	movw	r30, r6
    227c:	80 81       	ld	r24, Z
    227e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN15GB_SerialHelper15closeConnectionEh>
    2282:	b7 c0       	rjmp	.+366    	; 0x23f2 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x330>
        } 
        else if (firstRequestHeaderByte == 0x80){
    2284:	80 38       	cpi	r24, 0x80	; 128
    2286:	51 f4       	brne	.+20     	; 0x229c <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x1da>
          // TCP client connected
          isWifiRequestClientConnected = true;         
          wifiPortDescriptor = readByteFromSerialBuffer(isReadError); // second byte
    2288:	c4 01       	movw	r24, r8
    228a:	0e 94 6d 08 	call	0x10da	; 0x10da <_ZN15GB_SerialHelper24readByteFromSerialBufferERh>
    228e:	f3 01       	movw	r30, r6
    2290:	80 83       	st	Z, r24
          cleanSerialBuffer();
    2292:	0e 94 87 08 	call	0x110e	; 0x110e <_ZN15GB_SerialHelper17cleanSerialBufferEv>
    2296:	dd 24       	eor	r13, r13
    2298:	d3 94       	inc	r13
    229a:	3e c0       	rjmp	.+124    	; 0x2318 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x256>
          break; // outside cicrle
        }           
        else if (firstRequestHeaderByte == 0x81){
    229c:	81 38       	cpi	r24, 0x81	; 129
    229e:	59 f4       	brne	.+22     	; 0x22b6 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x1f4>
          // TCP client disconnected
          isWifiRequestClientDisconnected = true;
          wifiPortDescriptor = readByteFromSerialBuffer(isReadError); // second byte
    22a0:	c4 01       	movw	r24, r8
    22a2:	0e 94 6d 08 	call	0x10da	; 0x10da <_ZN15GB_SerialHelper24readByteFromSerialBufferERh>
    22a6:	f3 01       	movw	r30, r6
    22a8:	80 83       	st	Z, r24
          cleanSerialBuffer();
    22aa:	0e 94 87 08 	call	0x110e	; 0x110e <_ZN15GB_SerialHelper17cleanSerialBufferEv>
    22ae:	dd 24       	eor	r13, r13
    22b0:	cc 24       	eor	r12, r12
    22b2:	c3 94       	inc	r12
    22b4:	32 c0       	rjmp	.+100    	; 0x231a <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x258>
          break; // outside circle
        } 
        else {
          // Data recive failed or undocumented command
          cleanSerialBuffer();     
    22b6:	0e 94 87 08 	call	0x110e	; 0x110e <_ZN15GB_SerialHelper17cleanSerialBufferEv>
    22ba:	9b c0       	rjmp	.+310    	; 0x23f2 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x330>
        }
        return false;
      }
      else if (input.startsWith(flashStringLoad(S_WIFI_RESPONSE_WELLCOME)) || input.startsWith(flashStringLoad(S_WIFI_RESPONSE_ERROR))){
    22bc:	c5 01       	movw	r24, r10
    22be:	60 e3       	ldi	r22, 0x30	; 48
    22c0:	71 e0       	ldi	r23, 0x01	; 1
    22c2:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZL15flashStringLoadPKc>
    22c6:	c7 01       	movw	r24, r14
    22c8:	b5 01       	movw	r22, r10
    22ca:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <_ZNK6String10startsWithERKS_>
    22ce:	88 23       	and	r24, r24
    22d0:	11 f0       	breq	.+4      	; 0x22d6 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x214>
    22d2:	11 e0       	ldi	r17, 0x01	; 1
    22d4:	0f c0       	rjmp	.+30     	; 0x22f4 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x232>
    22d6:	c6 01       	movw	r24, r12
    22d8:	6d ec       	ldi	r22, 0xCD	; 205
    22da:	70 e0       	ldi	r23, 0x00	; 0
    22dc:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZL15flashStringLoadPKc>
    22e0:	c7 01       	movw	r24, r14
    22e2:	b6 01       	movw	r22, r12
    22e4:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <_ZNK6String10startsWithERKS_>
    22e8:	81 11       	cpse	r24, r1
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	18 2f       	mov	r17, r24
    22ee:	c6 01       	movw	r24, r12
    22f0:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    22f4:	c5 01       	movw	r24, r10
    22f6:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    22fa:	11 23       	and	r17, r17
    22fc:	29 f0       	breq	.+10     	; 0x2308 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x246>
        checkSerial(false, true); // manual restart
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	61 e0       	ldi	r22, 0x01	; 1
    2302:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN15GB_SerialHelper11checkSerialEhh>
    2306:	75 c0       	rjmp	.+234    	; 0x23f2 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x330>
    boolean isReadError = false;

    boolean isWifiRequestClientConnected = false;
    boolean isWifiRequestClientDisconnected = false;

    while (Serial.available()){
    2308:	87 eb       	ldi	r24, 0xB7	; 183
    230a:	93 e0       	ldi	r25, 0x03	; 3
    230c:	0e 94 9e 32 	call	0x653c	; 0x653c <_ZN14HardwareSerial9availableEv>
    2310:	89 2b       	or	r24, r25
    2312:	09 f0       	breq	.+2      	; 0x2316 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x254>
    2314:	0a cf       	rjmp	.-492    	; 0x212a <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x68>
    2316:	dd 24       	eor	r13, r13
    2318:	cc 24       	eor	r12, r12
        return false;
      }

    } // while (Serial.available()) 

    if (!isWifiRequest){
    231a:	f2 01       	movw	r30, r4
    231c:	80 81       	ld	r24, Z
    231e:	88 23       	and	r24, r24
    2320:	19 f4       	brne	.+6      	; 0x2328 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x266>
      input.trim();
    2322:	c7 01       	movw	r24, r14
    2324:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <_ZN6String4trimEv>
    }

    if (useSerialMonitor) {
    2328:	80 91 ad 01 	lds	r24, 0x01AD
    232c:	88 23       	and	r24, r24
    232e:	09 f4       	brne	.+2      	; 0x2332 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x270>
    2330:	52 c0       	rjmp	.+164    	; 0x23d6 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x314>
      if (isWifiRequestClientConnected || isWifiRequestClientDisconnected) {
    2332:	dd 20       	and	r13, r13
    2334:	11 f4       	brne	.+4      	; 0x233a <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x278>
    2336:	cc 20       	and	r12, r12
    2338:	d9 f0       	breq	.+54     	; 0x2370 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x2ae>
        showWifiStatus(F("Client ")); 
    233a:	8e e9       	ldi	r24, 0x9E	; 158
    233c:	92 e0       	ldi	r25, 0x02	; 2
    233e:	61 e0       	ldi	r22, 0x01	; 1
    2340:	0e 94 a0 08 	call	0x1140	; 0x1140 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
        Serial.print(wifiPortDescriptor);
    2344:	87 eb       	ldi	r24, 0xB7	; 183
    2346:	93 e0       	ldi	r25, 0x03	; 3
    2348:	f3 01       	movw	r30, r6
    234a:	60 81       	ld	r22, Z
    234c:	4a e0       	ldi	r20, 0x0A	; 10
    234e:	50 e0       	ldi	r21, 0x00	; 0
    2350:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <_ZN5Print5printEhi>
        if (isWifiRequestClientConnected){
    2354:	dd 20       	and	r13, r13
    2356:	29 f0       	breq	.+10     	; 0x2362 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x2a0>
          Serial.println(FS(S_connected));
    2358:	87 eb       	ldi	r24, 0xB7	; 183
    235a:	93 e0       	ldi	r25, 0x03	; 3
    235c:	67 e5       	ldi	r22, 0x57	; 87
    235e:	71 e0       	ldi	r23, 0x01	; 1
    2360:	04 c0       	rjmp	.+8      	; 0x236a <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x2a8>
        } 
        else {
          Serial.println(FS(S_disconnected));
    2362:	87 eb       	ldi	r24, 0xB7	; 183
    2364:	93 e0       	ldi	r25, 0x03	; 3
    2366:	62 e6       	ldi	r22, 0x62	; 98
    2368:	71 e0       	ldi	r23, 0x01	; 1
    236a:	0e 94 24 34 	call	0x6848	; 0x6848 <_ZN5Print7printlnEPK19__FlashStringHelper>
    236e:	31 c0       	rjmp	.+98     	; 0x23d2 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x310>
        }

      } 
      else {
        if (isWifiRequest){  
    2370:	f2 01       	movw	r30, r4
    2372:	80 81       	ld	r24, Z
    2374:	88 23       	and	r24, r24
    2376:	b9 f0       	breq	.+46     	; 0x23a6 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x2e4>
          showWifiStatus(FS(S_WIFI_GET_), false);
    2378:	8f e8       	ldi	r24, 0x8F	; 143
    237a:	92 e0       	ldi	r25, 0x02	; 2
    237c:	60 e0       	ldi	r22, 0x00	; 0
    237e:	0e 94 a0 08 	call	0x1140	; 0x1140 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
          Serial.println(input.substring(1));
    2382:	8e 01       	movw	r16, r28
    2384:	04 5d       	subi	r16, 0xD4	; 212
    2386:	1f 4f       	sbci	r17, 0xFF	; 255
    2388:	c8 01       	movw	r24, r16
    238a:	b7 01       	movw	r22, r14
    238c:	41 e0       	ldi	r20, 0x01	; 1
    238e:	50 e0       	ldi	r21, 0x00	; 0
    2390:	0e 94 a6 38 	call	0x714c	; 0x714c <_ZNK6String9substringEj>
    2394:	87 eb       	ldi	r24, 0xB7	; 183
    2396:	93 e0       	ldi	r25, 0x03	; 3
    2398:	b8 01       	movw	r22, r16
    239a:	0e 94 70 35 	call	0x6ae0	; 0x6ae0 <_ZN5Print7printlnERK6String>
    239e:	c8 01       	movw	r24, r16
    23a0:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    23a4:	16 c0       	rjmp	.+44     	; 0x23d2 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x310>
        } 
        else {
          Serial.print(F("SERIAL> "));
    23a6:	87 eb       	ldi	r24, 0xB7	; 183
    23a8:	93 e0       	ldi	r25, 0x03	; 3
    23aa:	65 e9       	ldi	r22, 0x95	; 149
    23ac:	72 e0       	ldi	r23, 0x02	; 2
    23ae:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <_ZN5Print5printEPK19__FlashStringHelper>
          GB_PrintDirty::printWithoutCRLF(input);
    23b2:	c7 01       	movw	r24, r14
    23b4:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String>
          Serial.print(FS(S_Next));
    23b8:	87 eb       	ldi	r24, 0xB7	; 183
    23ba:	93 e0       	ldi	r25, 0x03	; 3
    23bc:	64 ed       	ldi	r22, 0xD4	; 212
    23be:	70 e0       	ldi	r23, 0x00	; 0
    23c0:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <_ZN5Print5printEPK19__FlashStringHelper>
          GB_PrintDirty::printHEX(input);
    23c4:	c7 01       	movw	r24, r14
    23c6:	0e 94 ba 07 	call	0xf74	; 0xf74 <_ZN13GB_PrintDirty8printHEXERK6String>
          Serial.println();
    23ca:	87 eb       	ldi	r24, 0xB7	; 183
    23cc:	93 e0       	ldi	r25, 0x03	; 3
    23ce:	0e 94 04 34 	call	0x6808	; 0x6808 <_ZN5Print7printlnEv>
        }  
      }
      printDirtyEnd();
    23d2:	0e 94 99 08 	call	0x1132	; 0x1132 <_ZN15GB_SerialHelper13printDirtyEndEv>
    } 

    if (isWifiRequestClientConnected || isWifiRequestClientDisconnected){
    23d6:	dd 20       	and	r13, r13
    23d8:	61 f4       	brne	.+24     	; 0x23f2 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x330>
    23da:	cc 20       	and	r12, r12
    23dc:	51 f4       	brne	.+20     	; 0x23f2 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x330>
      return false; 
    }
    else if (isWifiRequest){
    23de:	f2 01       	movw	r30, r4
    23e0:	80 81       	ld	r24, Z
    23e2:	88 23       	and	r24, r24
    23e4:	21 f4       	brne	.+8      	; 0x23ee <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x32c>
    23e6:	80 91 ad 01 	lds	r24, 0x01AD
    23ea:	88 23       	and	r24, r24
    23ec:	19 f0       	breq	.+6      	; 0x23f4 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x332>
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	01 c0       	rjmp	.+2      	; 0x23f4 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x332>
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    } 
    else if (useSerialMonitor){
      return true;
    } 
    return false;
  } 
    23f4:	e2 96       	adiw	r28, 0x32	; 50
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	cd bf       	out	0x3d, r28	; 61
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	1f 91       	pop	r17
    2406:	0f 91       	pop	r16
    2408:	ff 90       	pop	r15
    240a:	ef 90       	pop	r14
    240c:	df 90       	pop	r13
    240e:	cf 90       	pop	r12
    2410:	bf 90       	pop	r11
    2412:	af 90       	pop	r10
    2414:	9f 90       	pop	r9
    2416:	8f 90       	pop	r8
    2418:	7f 90       	pop	r7
    241a:	6f 90       	pop	r6
    241c:	5f 90       	pop	r5
    241e:	4f 90       	pop	r4
    2420:	08 95       	ret
    int index = 0;
    while ((index < length) && Serial.available()){
      Serial.read();
      index++;
    }
    isError = ((index) == length); 
    2422:	19 82       	std	Y+1, r1	; 0x01
    2424:	08 30       	cpi	r16, 0x08	; 8
    2426:	11 05       	cpc	r17, r1
    2428:	09 f0       	breq	.+2      	; 0x242c <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x36a>
    242a:	bb ce       	rjmp	.-650    	; 0x21a2 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0xe0>
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	89 83       	std	Y+1, r24	; 0x01
    2430:	b8 ce       	rjmp	.-656    	; 0x21a2 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0xe0>

00002432 <loop>:
    2432:	8d e0       	ldi	r24, 0x0D	; 13
    2434:	0e 94 d5 30 	call	0x61aa	; 0x61aa <digitalRead>
    2438:	60 e0       	ldi	r22, 0x00	; 0
    243a:	89 2b       	or	r24, r25
    243c:	09 f4       	brne	.+2      	; 0x2440 <loop+0xe>
    243e:	61 e0       	ldi	r22, 0x01	; 1
    2440:	8d e0       	ldi	r24, 0x0D	; 13
    2442:	0e 94 81 30 	call	0x6102	; 0x6102 <digitalWrite>
    2446:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <_ZN13GB_Controller15checkFreeMemoryEv>
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	60 e0       	ldi	r22, 0x00	; 0
    244e:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN15GB_SerialHelper11checkSerialEhh>
    2452:	81 e2       	ldi	r24, 0x21	; 33
    2454:	92 e0       	ldi	r25, 0x02	; 2
    2456:	48 ee       	ldi	r20, 0xE8	; 232
    2458:	53 e0       	ldi	r21, 0x03	; 3
    245a:	60 e0       	ldi	r22, 0x00	; 0
    245c:	70 e0       	ldi	r23, 0x00	; 0
    245e:	0e 94 8a 24 	call	0x4914	; 0x4914 <_ZN15TimeAlarmsClass5delayEm>
    2462:	08 95       	ret

00002464 <_Z15printFreeMemoryv>:
    2464:	0f 93       	push	r16
    2466:	1f 93       	push	r17
    2468:	07 eb       	ldi	r16, 0xB7	; 183
    246a:	13 e0       	ldi	r17, 0x03	; 3
    246c:	c8 01       	movw	r24, r16
    246e:	62 e0       	ldi	r22, 0x02	; 2
    2470:	71 e0       	ldi	r23, 0x01	; 1
    2472:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <_ZN5Print5printEPK19__FlashStringHelper>
    2476:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <freeMemory>
    247a:	bc 01       	movw	r22, r24
    247c:	c8 01       	movw	r24, r16
    247e:	4a e0       	ldi	r20, 0x0A	; 10
    2480:	50 e0       	ldi	r21, 0x00	; 0
    2482:	0e 94 2a 35 	call	0x6a54	; 0x6a54 <_ZN5Print5printEii>
    2486:	c8 01       	movw	r24, r16
    2488:	60 e1       	ldi	r22, 0x10	; 16
    248a:	71 e0       	ldi	r23, 0x01	; 1
    248c:	0e 94 24 34 	call	0x6848	; 0x6848 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2490:	1f 91       	pop	r17
    2492:	0f 91       	pop	r16
    2494:	08 95       	ret

00002496 <_Z14isDayInGrowboxv>:
    2496:	0e 94 12 21 	call	0x4224	; 0x4224 <_Z10timeStatusv>
    249a:	01 97       	sbiw	r24, 0x01	; 1
    249c:	29 f4       	brne	.+10     	; 0x24a8 <_Z14isDayInGrowboxv+0x12>
    249e:	88 e5       	ldi	r24, 0x58	; 88
    24a0:	91 e0       	ldi	r25, 0x01	; 1
    24a2:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <_ZN9GB_Logger8logErrorER5Error>
    24a6:	06 c0       	rjmp	.+12     	; 0x24b4 <_Z14isDayInGrowboxv+0x1e>
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
  static boolean stopLogError(Error &error){
    if (error.isStored){
    24a8:	80 91 5e 01 	lds	r24, 0x015E
    24ac:	88 23       	and	r24, r24
    24ae:	11 f0       	breq	.+4      	; 0x24b4 <_Z14isDayInGrowboxv+0x1e>
      error.isStored = false;
    24b0:	10 92 5e 01 	sts	0x015E, r1
    24b4:	0e 94 1e 21 	call	0x423c	; 0x423c <_Z4hourv>
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	02 97       	sbiw	r24, 0x02	; 2
    24bc:	07 97       	sbiw	r24, 0x07	; 7
    24be:	08 f4       	brcc	.+2      	; 0x24c2 <_Z14isDayInGrowboxv+0x2c>
    24c0:	21 e0       	ldi	r18, 0x01	; 1
    24c2:	82 2f       	mov	r24, r18
    24c4:	08 95       	ret

000024c6 <setup>:
    24c6:	ef 92       	push	r14
    24c8:	ff 92       	push	r15
    24ca:	0f 93       	push	r16
    24cc:	1f 93       	push	r17
    24ce:	df 93       	push	r29
    24d0:	cf 93       	push	r28
    24d2:	cd b7       	in	r28, 0x3d	; 61
    24d4:	de b7       	in	r29, 0x3e	; 62
    24d6:	2e 97       	sbiw	r28, 0x0e	; 14
    24d8:	0f b6       	in	r0, 0x3f	; 63
    24da:	f8 94       	cli
    24dc:	de bf       	out	0x3e, r29	; 62
    24de:	0f be       	out	0x3f, r0	; 63
    24e0:	cd bf       	out	0x3d, r28	; 61
    24e2:	8d e0       	ldi	r24, 0x0D	; 13
    24e4:	61 e0       	ldi	r22, 0x01	; 1
    24e6:	0e 94 42 30 	call	0x6084	; 0x6084 <pinMode>
    24ea:	8d e0       	ldi	r24, 0x0D	; 13
    24ec:	61 e0       	ldi	r22, 0x01	; 1
    24ee:	0e 94 42 30 	call	0x6084	; 0x6084 <pinMode>
    24f2:	8c e0       	ldi	r24, 0x0C	; 12
    24f4:	61 e0       	ldi	r22, 0x01	; 1
    24f6:	0e 94 42 30 	call	0x6084	; 0x6084 <pinMode>
    24fa:	8b e0       	ldi	r24, 0x0B	; 11
    24fc:	62 e0       	ldi	r22, 0x02	; 2
    24fe:	0e 94 42 30 	call	0x6084	; 0x6084 <pinMode>
    2502:	83 e0       	ldi	r24, 0x03	; 3
    2504:	61 e0       	ldi	r22, 0x01	; 1
    2506:	0e 94 42 30 	call	0x6084	; 0x6084 <pinMode>
    250a:	84 e0       	ldi	r24, 0x04	; 4
    250c:	61 e0       	ldi	r22, 0x01	; 1
    250e:	0e 94 42 30 	call	0x6084	; 0x6084 <pinMode>
    2512:	85 e0       	ldi	r24, 0x05	; 5
    2514:	61 e0       	ldi	r22, 0x01	; 1
    2516:	0e 94 42 30 	call	0x6084	; 0x6084 <pinMode>
    251a:	83 e0       	ldi	r24, 0x03	; 3
    251c:	61 e0       	ldi	r22, 0x01	; 1
    251e:	0e 94 81 30 	call	0x6102	; 0x6102 <digitalWrite>
    2522:	84 e0       	ldi	r24, 0x04	; 4
    2524:	61 e0       	ldi	r22, 0x01	; 1
    2526:	0e 94 81 30 	call	0x6102	; 0x6102 <digitalWrite>
    252a:	85 e0       	ldi	r24, 0x05	; 5
    252c:	61 e0       	ldi	r22, 0x01	; 1
    252e:	0e 94 81 30 	call	0x6102	; 0x6102 <digitalWrite>
    2532:	10 92 4a 01 	sts	0x014A, r1
    2536:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <freeMemory>
    253a:	7c 01       	movw	r14, r24
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	61 e0       	ldi	r22, 0x01	; 1
    2540:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN15GB_SerialHelper11checkSerialEhh>
    2544:	80 91 ad 01 	lds	r24, 0x01AD
    2548:	88 23       	and	r24, r24
    254a:	31 f0       	breq	.+12     	; 0x2558 <setup+0x92>
    254c:	0e 94 32 12 	call	0x2464	; 0x2464 <_Z15printFreeMemoryv>
    2550:	8b e9       	ldi	r24, 0x9B	; 155
    2552:	96 e0       	ldi	r25, 0x06	; 6
    2554:	0e 94 52 08 	call	0x10a4	; 0x10a4 <_ZL17printStatusOnBootPK19__FlashStringHelper>
    2558:	0e 94 8e 1c 	call	0x391c	; 0x391c <_Z15initLoggerModelv>
    this->sequenceSize = sequenceSize;
    this->description = description;
  }
  
  static Error* findByIndex(byte sequence, byte sequenceSize){
    Error* currentItemPtr = lastAddedItem;
    255c:	e0 91 4d 01 	lds	r30, 0x014D
    2560:	f0 91 4e 01 	lds	r31, 0x014E
    2564:	0a c0       	rjmp	.+20     	; 0x257a <setup+0xb4>
    while (currentItemPtr != 0){
      if (currentItemPtr->sequence == sequence && currentItemPtr->sequenceSize == sequenceSize) {
    2566:	82 81       	ldd	r24, Z+2	; 0x02
    2568:	8f 3f       	cpi	r24, 0xFF	; 255
    256a:	19 f4       	brne	.+6      	; 0x2572 <setup+0xac>
    256c:	83 81       	ldd	r24, Z+3	; 0x03
    256e:	8f 3f       	cpi	r24, 0xFF	; 255
    2570:	39 f0       	breq	.+14     	; 0x2580 <setup+0xba>
        return currentItemPtr;
      }
      currentItemPtr = (Error*)currentItemPtr->nextError;
    2572:	80 81       	ld	r24, Z
    2574:	91 81       	ldd	r25, Z+1	; 0x01
    2576:	9c 01       	movw	r18, r24
    2578:	f9 01       	movw	r30, r18
    this->description = description;
  }
  
  static Error* findByIndex(byte sequence, byte sequenceSize){
    Error* currentItemPtr = lastAddedItem;
    while (currentItemPtr != 0){
    257a:	30 97       	sbiw	r30, 0x00	; 0
    257c:	a1 f7       	brne	.-24     	; 0x2566 <setup+0xa0>
    257e:	7e c1       	rjmp	.+764    	; 0x287c <setup+0x3b6>
    2580:	80 91 ad 01 	lds	r24, 0x01AD
    2584:	88 23       	and	r24, r24
    2586:	21 f0       	breq	.+8      	; 0x2590 <setup+0xca>
    2588:	80 e8       	ldi	r24, 0x80	; 128
    258a:	96 e0       	ldi	r25, 0x06	; 6
    258c:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZL21printFatalErrorOnBootPK19__FlashStringHelper>
    2590:	68 e8       	ldi	r22, 0x88	; 136
    2592:	73 e1       	ldi	r23, 0x13	; 19
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <delay>
    259c:	f9 cf       	rjmp	.-14     	; 0x2590 <setup+0xca>
    // Serial.print("lastAddedEvent ev: ");
    //Serial.println(lastAddedEvent->description);
    Event* currentItemPtr = lastAddedEvent;
    while (currentItemPtr != 0){
      //Serial.println(currentItemPtr->description);
      if (currentItemPtr->index == index) {
    259e:	82 81       	ldd	r24, Z+2	; 0x02
    25a0:	8f 3f       	cpi	r24, 0xFF	; 255
    25a2:	39 f0       	breq	.+14     	; 0x25b2 <setup+0xec>
        return currentItemPtr;
      }
      currentItemPtr = (Event*)currentItemPtr->nextEvent;
    25a4:	80 81       	ld	r24, Z
    25a6:	91 81       	ldd	r25, Z+1	; 0x01
    25a8:	9c 01       	movw	r18, r24
    25aa:	f9 01       	movw	r30, r18
    //Serial.print("search ev: ");    
    //Serial.println(index);
    // Serial.print("lastAddedEvent ev: ");
    //Serial.println(lastAddedEvent->description);
    Event* currentItemPtr = lastAddedEvent;
    while (currentItemPtr != 0){
    25ac:	30 97       	sbiw	r30, 0x00	; 0
    25ae:	b9 f7       	brne	.-18     	; 0x259e <setup+0xd8>
    25b0:	6a c1       	rjmp	.+724    	; 0x2886 <setup+0x3c0>
    25b2:	80 91 ad 01 	lds	r24, 0x01AD
    25b6:	88 23       	and	r24, r24
    25b8:	21 f0       	breq	.+8      	; 0x25c2 <setup+0xfc>
    25ba:	85 e6       	ldi	r24, 0x65	; 101
    25bc:	96 e0       	ldi	r25, 0x06	; 6
    25be:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZL21printFatalErrorOnBootPK19__FlashStringHelper>
    25c2:	68 e8       	ldi	r22, 0x88	; 136
    25c4:	73 e1       	ldi	r23, 0x13	; 19
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <delay>
    25ce:	f9 cf       	rjmp	.-14     	; 0x25c2 <setup+0xfc>
    25d0:	8f e5       	ldi	r24, 0x5F	; 95
    25d2:	96 e0       	ldi	r25, 0x06	; 6
    25d4:	0e 94 52 08 	call	0x10a4	; 0x10a4 <_ZL17printStatusOnBootPK19__FlashStringHelper>
    25d8:	88 e9       	ldi	r24, 0x98	; 152
    25da:	98 e2       	ldi	r25, 0x28	; 40
    25dc:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <_Z15setSyncProviderPFmvE>
    25e0:	0e 94 12 21 	call	0x4224	; 0x4224 <_Z10timeStatusv>
    25e4:	89 2b       	or	r24, r25
    25e6:	59 f0       	breq	.+22     	; 0x25fe <setup+0x138>
    25e8:	0e 94 19 21 	call	0x4232	; 0x4232 <_Z4yearv>
    25ec:	8f 5d       	subi	r24, 0xDF	; 223
    25ee:	97 40       	sbci	r25, 0x07	; 7
    25f0:	34 f4       	brge	.+12     	; 0x25fe <setup+0x138>
    25f2:	0e 94 19 21 	call	0x4232	; 0x4232 <_Z4yearv>
    25f6:	85 5e       	subi	r24, 0xE5	; 229
    25f8:	97 40       	sbci	r25, 0x07	; 7
    25fa:	0c f4       	brge	.+2      	; 0x25fe <setup+0x138>
    25fc:	12 c1       	rjmp	.+548    	; 0x2822 <setup+0x35c>
    25fe:	81 e5       	ldi	r24, 0x51	; 81
    2600:	91 e0       	ldi	r25, 0x01	; 1
    2602:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <_ZN9GB_Logger8logErrorER5Error>
    2606:	e8 cf       	rjmp	.-48     	; 0x25d8 <setup+0x112>
    2608:	10 92 57 01 	sts	0x0157, r1
    260c:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <_ZN13GB_Controller15checkFreeMemoryEv>
    2610:	80 91 ad 01 	lds	r24, 0x01AD
    2614:	88 23       	and	r24, r24
    2616:	49 f0       	breq	.+18     	; 0x262a <setup+0x164>
    2618:	84 e5       	ldi	r24, 0x54	; 84
    261a:	96 e0       	ldi	r25, 0x06	; 6
    261c:	0e 94 52 08 	call	0x10a4	; 0x10a4 <_ZL17printStatusOnBootPK19__FlashStringHelper>
    2620:	04 c0       	rjmp	.+8      	; 0x262a <setup+0x164>
public:

  static void start(){
    dallasTemperature.begin();
    while(dallasTemperature.getDeviceCount() == 0){
      GB_Logger::logError(ERROR_TERMOMETER_DISCONNECTED);
    2622:	8f e5       	ldi	r24, 0x5F	; 95
    2624:	91 e0       	ldi	r25, 0x01	; 1
    2626:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <_ZN9GB_Logger8logErrorER5Error>
      dallasTemperature.begin();
    262a:	81 ee       	ldi	r24, 0xE1	; 225
    262c:	91 e0       	ldi	r25, 0x01	; 1
    262e:	0e 94 b0 2d 	call	0x5b60	; 0x5b60 <_ZN17DallasTemperature5beginEv>

public:

  static void start(){
    dallasTemperature.begin();
    while(dallasTemperature.getDeviceCount() == 0){
    2632:	81 ee       	ldi	r24, 0xE1	; 225
    2634:	91 e0       	ldi	r25, 0x01	; 1
    2636:	0e 94 f2 2a 	call	0x55e4	; 0x55e4 <_ZN17DallasTemperature14getDeviceCountEv>
    263a:	88 23       	and	r24, r24
    263c:	91 f3       	breq	.-28     	; 0x2622 <setup+0x15c>
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
  static boolean stopLogError(Error &error){
    if (error.isStored){
    263e:	80 91 65 01 	lds	r24, 0x0165
    2642:	88 23       	and	r24, r24
    2644:	11 f0       	breq	.+4      	; 0x264a <setup+0x184>
      error.isStored = false;
    2646:	10 92 65 01 	sts	0x0165, r1
      GB_Logger::logError(ERROR_TERMOMETER_DISCONNECTED);
      dallasTemperature.begin();
    }  
    GB_Logger::stopLogError(ERROR_TERMOMETER_DISCONNECTED);

    dallasTemperature.getAddress(oneWireAddress, 0); // search for devices on the bus and assign based on an index.
    264a:	81 ee       	ldi	r24, 0xE1	; 225
    264c:	91 e0       	ldi	r25, 0x01	; 1
    264e:	64 ef       	ldi	r22, 0xF4	; 244
    2650:	71 e0       	ldi	r23, 0x01	; 1
    2652:	40 e0       	ldi	r20, 0x00	; 0
    2654:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <_ZN17DallasTemperature10getAddressEPhh>
    2658:	06 c0       	rjmp	.+12     	; 0x2666 <setup+0x1a0>
    265a:	68 ee       	ldi	r22, 0xE8	; 232
    265c:	73 e0       	ldi	r23, 0x03	; 3
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <delay>
    2666:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <_ZN14GB_Thermometer16updateStatisticsEv>
    266a:	88 23       	and	r24, r24
    266c:	b1 f3       	breq	.-20     	; 0x265a <setup+0x194>
    266e:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <_ZN13GB_Controller15checkFreeMemoryEv>
    2672:	80 91 ad 01 	lds	r24, 0x01AD
    2676:	88 23       	and	r24, r24
    2678:	21 f0       	breq	.+8      	; 0x2682 <setup+0x1bc>
    267a:	8c e4       	ldi	r24, 0x4C	; 76
    267c:	96 e0       	ldi	r25, 0x06	; 6
    267e:	0e 94 52 08 	call	0x10a4	; 0x10a4 <_ZL17printStatusOnBootPK19__FlashStringHelper>
    2682:	00 e0       	ldi	r16, 0x00	; 0
    2684:	10 e0       	ldi	r17, 0x00	; 0
    }
  }

  static void read(word address, void *data, const byte sizeofData) {
    for (word c = 0; c < sizeofData; c++){
      byte value =  read(address + c);
    2686:	c8 01       	movw	r24, r16
    2688:	0e 94 83 06 	call	0xd06	; 0xd06 <_ZN10GB_Storage4readEj>
      ((byte*)data)[c] = value;
    268c:	f8 01       	movw	r30, r16
    268e:	ef 53       	subi	r30, 0x3F	; 63
    2690:	fe 4f       	sbci	r31, 0xFE	; 254
    2692:	80 83       	st	Z, r24
      write(address + c, value);
    }
  }

  static void read(word address, void *data, const byte sizeofData) {
    for (word c = 0; c < sizeofData; c++){
    2694:	0f 5f       	subi	r16, 0xFF	; 255
    2696:	1f 4f       	sbci	r17, 0xFF	; 255
    2698:	00 32       	cpi	r16, 0x20	; 32
    269a:	11 05       	cpc	r17, r1
    269c:	a1 f7       	brne	.-24     	; 0x2686 <setup+0x1c0>
  }

private :

  static boolean isBootRecordCorrect(){ // TODO rename it
    return (bootRecord.first_magic == MAGIC_NUMBER) && (bootRecord.last_magic == MAGIC_NUMBER);
    269e:	80 91 c1 01 	lds	r24, 0x01C1
    26a2:	90 91 c2 01 	lds	r25, 0x01C2
    26a6:	85 55       	subi	r24, 0x55	; 85
    26a8:	9a 4a       	sbci	r25, 0xAA	; 170
    26aa:	09 f0       	breq	.+2      	; 0x26ae <setup+0x1e8>
    26ac:	c0 c0       	rjmp	.+384    	; 0x282e <setup+0x368>
    26ae:	80 91 df 01 	lds	r24, 0x01DF
    26b2:	90 91 e0 01 	lds	r25, 0x01E0
    26b6:	85 55       	subi	r24, 0x55	; 85
    26b8:	9a 4a       	sbci	r25, 0xAA	; 170
    26ba:	09 f0       	breq	.+2      	; 0x26be <setup+0x1f8>
    26bc:	b8 c0       	rjmp	.+368    	; 0x282e <setup+0x368>

  static boolean start(){

    GB_Storage::read(0, &bootRecord, sizeof(BootRecord));
    if (isBootRecordCorrect()){
      bootRecord.lastStartupTimeStamp = now();      
    26be:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <_Z3nowv>
    26c2:	60 93 c7 01 	sts	0x01C7, r22
    26c6:	70 93 c8 01 	sts	0x01C8, r23
    26ca:	80 93 c9 01 	sts	0x01C9, r24
    26ce:	90 93 ca 01 	sts	0x01CA, r25
      GB_Storage::write(OFFSETOF(BootRecord, lastStartupTimeStamp), &(bootRecord.lastStartupTimeStamp), sizeof(bootRecord.lastStartupTimeStamp));      
    26d2:	86 e0       	ldi	r24, 0x06	; 6
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	67 ec       	ldi	r22, 0xC7	; 199
    26d8:	71 e0       	ldi	r23, 0x01	; 1
    26da:	44 e0       	ldi	r20, 0x04	; 4
    26dc:	0e 94 de 05 	call	0xbbc	; 0xbbc <_ZN10GB_Storage5writeEjPKvh>
    26e0:	91 e0       	ldi	r25, 0x01	; 1
    26e2:	11 c0       	rjmp	.+34     	; 0x2706 <setup+0x240>
      bootRecord.lastStartupTimeStamp = bootRecord.firstStartupTimeStamp;
      bootRecord.nextLogRecordAddress = sizeof(BootRecord);
      bootRecord.boolPreferencies.isLogOverflow = false;
      bootRecord.boolPreferencies.isLoggerEnabled = true;
      for(byte i=0; i<sizeof(bootRecord.reserved); i++){
        bootRecord.reserved[i] = 0;
    26e4:	11 92       	st	Z+, r1
      bootRecord.firstStartupTimeStamp = now();
      bootRecord.lastStartupTimeStamp = bootRecord.firstStartupTimeStamp;
      bootRecord.nextLogRecordAddress = sizeof(BootRecord);
      bootRecord.boolPreferencies.isLogOverflow = false;
      bootRecord.boolPreferencies.isLoggerEnabled = true;
      for(byte i=0; i<sizeof(bootRecord.reserved); i++){
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	ef 3d       	cpi	r30, 0xDF	; 223
    26ea:	f8 07       	cpc	r31, r24
    26ec:	d9 f7       	brne	.-10     	; 0x26e4 <setup+0x21e>
        bootRecord.reserved[i] = 0;
      }
      bootRecord.last_magic = MAGIC_NUMBER;
    26ee:	85 e5       	ldi	r24, 0x55	; 85
    26f0:	9a ea       	ldi	r25, 0xAA	; 170
    26f2:	91 83       	std	Z+1, r25	; 0x01
    26f4:	80 83       	st	Z, r24

      GB_Storage::write(0, &bootRecord, sizeof(BootRecord));
    26f6:	7e 97       	sbiw	r30, 0x1e	; 30
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	bf 01       	movw	r22, r30
    26fe:	40 e2       	ldi	r20, 0x20	; 32
    2700:	0e 94 de 05 	call	0xbbc	; 0xbbc <_ZN10GB_Storage5writeEjPKvh>
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	80 93 4a 01 	sts	0x014A, r24
    270c:	99 23       	and	r25, r25
    270e:	19 f0       	breq	.+6      	; 0x2716 <setup+0x250>
    2710:	80 e8       	ldi	r24, 0x80	; 128
    2712:	91 e0       	ldi	r25, 0x01	; 1
    2714:	02 c0       	rjmp	.+4      	; 0x271a <setup+0x254>
    2716:	8b e7       	ldi	r24, 0x7B	; 123
    2718:	91 e0       	ldi	r25, 0x01	; 1
    271a:	0e 94 ae 0c 	call	0x195c	; 0x195c <_ZN9GB_Logger8logEventER5Event>
    271e:	80 e0       	ldi	r24, 0x00	; 0
    2720:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <_ZN14GB_Thermometer14getTemperatureEh>
    2724:	0e 94 4b 12 	call	0x2496	; 0x2496 <_Z14isDayInGrowboxv>
    2728:	88 23       	and	r24, r24
    272a:	19 f0       	breq	.+6      	; 0x2732 <setup+0x26c>
    272c:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_Z15switchToDayModev>
    2730:	02 c0       	rjmp	.+4      	; 0x2736 <setup+0x270>
    2732:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <_Z17switchToNightModev>
    2736:	81 e2       	ldi	r24, 0x21	; 33
    2738:	92 e0       	ldi	r25, 0x02	; 2
    273a:	44 e1       	ldi	r20, 0x14	; 20
    273c:	50 e0       	ldi	r21, 0x00	; 0
    273e:	60 e0       	ldi	r22, 0x00	; 0
    2740:	70 e0       	ldi	r23, 0x00	; 0
    2742:	2e e5       	ldi	r18, 0x5E	; 94
    2744:	30 e1       	ldi	r19, 0x10	; 16
    2746:	0e 94 23 24 	call	0x4846	; 0x4846 <_ZN15TimeAlarmsClass11timerRepeatEmPFvvE>
    274a:	81 e2       	ldi	r24, 0x21	; 33
    274c:	92 e0       	ldi	r25, 0x02	; 2
    274e:	44 e1       	ldi	r20, 0x14	; 20
    2750:	50 e0       	ldi	r21, 0x00	; 0
    2752:	60 e0       	ldi	r22, 0x00	; 0
    2754:	70 e0       	ldi	r23, 0x00	; 0
    2756:	26 ef       	ldi	r18, 0xF6	; 246
    2758:	3f e0       	ldi	r19, 0x0F	; 15
    275a:	0e 94 23 24 	call	0x4846	; 0x4846 <_ZN15TimeAlarmsClass11timerRepeatEmPFvvE>
    275e:	81 e2       	ldi	r24, 0x21	; 33
    2760:	92 e0       	ldi	r25, 0x02	; 2
    2762:	4c e2       	ldi	r20, 0x2C	; 44
    2764:	51 e0       	ldi	r21, 0x01	; 1
    2766:	60 e0       	ldi	r22, 0x00	; 0
    2768:	70 e0       	ldi	r23, 0x00	; 0
    276a:	24 e7       	ldi	r18, 0x74	; 116
    276c:	3e e0       	ldi	r19, 0x0E	; 14
    276e:	0e 94 23 24 	call	0x4846	; 0x4846 <_ZN15TimeAlarmsClass11timerRepeatEmPFvvE>
    2772:	81 e2       	ldi	r24, 0x21	; 33
    2774:	92 e0       	ldi	r25, 0x02	; 2
    2776:	61 e0       	ldi	r22, 0x01	; 1
    2778:	70 e0       	ldi	r23, 0x00	; 0
    277a:	40 e0       	ldi	r20, 0x00	; 0
    277c:	50 e0       	ldi	r21, 0x00	; 0
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	07 ee       	ldi	r16, 0xE7	; 231
    2784:	1e e0       	ldi	r17, 0x0E	; 14
    2786:	0e 94 34 24 	call	0x4868	; 0x4868 <_ZN15TimeAlarmsClass11alarmRepeatEiiiPFvvE>
    278a:	81 e2       	ldi	r24, 0x21	; 33
    278c:	92 e0       	ldi	r25, 0x02	; 2
    278e:	69 e0       	ldi	r22, 0x09	; 9
    2790:	70 e0       	ldi	r23, 0x00	; 0
    2792:	40 e0       	ldi	r20, 0x00	; 0
    2794:	50 e0       	ldi	r21, 0x00	; 0
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	0a ed       	ldi	r16, 0xDA	; 218
    279c:	1e e0       	ldi	r17, 0x0E	; 14
    279e:	0e 94 34 24 	call	0x4868	; 0x4868 <_ZN15TimeAlarmsClass11alarmRepeatEiiiPFvvE>
    27a2:	80 91 ad 01 	lds	r24, 0x01AD
    27a6:	88 23       	and	r24, r24
    27a8:	69 f0       	breq	.+26     	; 0x27c4 <setup+0x2fe>
    27aa:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <freeMemory>
    27ae:	e8 16       	cp	r14, r24
    27b0:	f9 06       	cpc	r15, r25
    27b2:	11 f0       	breq	.+4      	; 0x27b8 <setup+0x2f2>
    27b4:	0e 94 32 12 	call	0x2464	; 0x2464 <_Z15printFreeMemoryv>
    27b8:	87 eb       	ldi	r24, 0xB7	; 183
    27ba:	93 e0       	ldi	r25, 0x03	; 3
    27bc:	6f e2       	ldi	r22, 0x2F	; 47
    27be:	76 e0       	ldi	r23, 0x06	; 6
    27c0:	0e 94 24 34 	call	0x6848	; 0x6848 <_ZN5Print7printlnEPK19__FlashStringHelper>
    27c4:	80 91 ad 01 	lds	r24, 0x01AD
    27c8:	88 23       	and	r24, r24
    27ca:	11 f0       	breq	.+4      	; 0x27d0 <setup+0x30a>
    27cc:	0e 94 99 08 	call	0x1132	; 0x1132 <_ZN15GB_SerialHelper13printDirtyEndEv>
    27d0:	80 91 ae 01 	lds	r24, 0x01AE
    27d4:	88 23       	and	r24, r24
    27d6:	09 f4       	brne	.+2      	; 0x27da <setup+0x314>
    27d8:	5e c0       	rjmp	.+188    	; 0x2896 <setup+0x3d0>
    27da:	7e 01       	movw	r14, r28
    27dc:	08 94       	sec
    27de:	e1 1c       	adc	r14, r1
    27e0:	f1 1c       	adc	r15, r1
    27e2:	c7 01       	movw	r24, r14
    27e4:	6a e2       	ldi	r22, 0x2A	; 42
    27e6:	76 e0       	ldi	r23, 0x06	; 6
    27e8:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_ZL15flashStringLoadPK19__FlashStringHelper>
    27ec:	8e 01       	movw	r16, r28
    27ee:	08 5f       	subi	r16, 0xF8	; 248
    27f0:	1f 4f       	sbci	r17, 0xFF	; 255
    27f2:	c8 01       	movw	r24, r16
    27f4:	6d e1       	ldi	r22, 0x1D	; 29
    27f6:	76 e0       	ldi	r23, 0x06	; 6
    27f8:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_ZL15flashStringLoadPK19__FlashStringHelper>
      cleanSerialBuffer();
    }
  }

  static void setWifiConfiguration(const String& _s_wifiSID, const String& _s_wifiPass){
    s_wifiSID = _s_wifiSID;
    27fc:	80 eb       	ldi	r24, 0xB0	; 176
    27fe:	91 e0       	ldi	r25, 0x01	; 1
    2800:	b7 01       	movw	r22, r14
    2802:	0e 94 b2 38 	call	0x7164	; 0x7164 <_ZN6StringaSERKS_>
    s_wifiPass = _s_wifiPass;
    2806:	87 eb       	ldi	r24, 0xB7	; 183
    2808:	91 e0       	ldi	r25, 0x01	; 1
    280a:	b8 01       	movw	r22, r16
    280c:	0e 94 b2 38 	call	0x7164	; 0x7164 <_ZN6StringaSERKS_>
    2810:	c8 01       	movw	r24, r16
    2812:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    2816:	c7 01       	movw	r24, r14
    2818:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    281c:	0e 94 ae 0a 	call	0x155c	; 0x155c <_ZN15GB_SerialHelper9startWifiEv>
    2820:	3a c0       	rjmp	.+116    	; 0x2896 <setup+0x3d0>
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
  static boolean stopLogError(Error &error){
    if (error.isStored){
    2822:	80 91 57 01 	lds	r24, 0x0157
    2826:	88 23       	and	r24, r24
    2828:	09 f0       	breq	.+2      	; 0x282c <setup+0x366>
    282a:	ee ce       	rjmp	.-548    	; 0x2608 <setup+0x142>
    282c:	ef ce       	rjmp	.-546    	; 0x260c <setup+0x146>
      bootRecord.lastStartupTimeStamp = now();      
      GB_Storage::write(OFFSETOF(BootRecord, lastStartupTimeStamp), &(bootRecord.lastStartupTimeStamp), sizeof(bootRecord.lastStartupTimeStamp));      
      return true;   
    } 
    else {
      bootRecord.first_magic = MAGIC_NUMBER;
    282e:	85 e5       	ldi	r24, 0x55	; 85
    2830:	9a ea       	ldi	r25, 0xAA	; 170
    2832:	90 93 c2 01 	sts	0x01C2, r25
    2836:	80 93 c1 01 	sts	0x01C1, r24
      bootRecord.firstStartupTimeStamp = now();
    283a:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <_Z3nowv>
    283e:	60 93 c3 01 	sts	0x01C3, r22
    2842:	70 93 c4 01 	sts	0x01C4, r23
    2846:	80 93 c5 01 	sts	0x01C5, r24
    284a:	90 93 c6 01 	sts	0x01C6, r25
      bootRecord.lastStartupTimeStamp = bootRecord.firstStartupTimeStamp;
    284e:	60 93 c7 01 	sts	0x01C7, r22
    2852:	70 93 c8 01 	sts	0x01C8, r23
    2856:	80 93 c9 01 	sts	0x01C9, r24
    285a:	90 93 ca 01 	sts	0x01CA, r25
      bootRecord.nextLogRecordAddress = sizeof(BootRecord);
    285e:	80 e2       	ldi	r24, 0x20	; 32
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	90 93 cc 01 	sts	0x01CC, r25
    2866:	80 93 cb 01 	sts	0x01CB, r24
      bootRecord.boolPreferencies.isLogOverflow = false;
    286a:	80 91 cd 01 	lds	r24, 0x01CD
      bootRecord.boolPreferencies.isLoggerEnabled = true;
    286e:	88 7f       	andi	r24, 0xF8	; 248
    2870:	82 60       	ori	r24, 0x02	; 2
    2872:	80 93 cd 01 	sts	0x01CD, r24
    2876:	ee ec       	ldi	r30, 0xCE	; 206
    2878:	f1 e0       	ldi	r31, 0x01	; 1
    287a:	34 cf       	rjmp	.-408    	; 0x26e4 <setup+0x21e>
  static Event* findByIndex(byte index){
    //Serial.print("search ev: ");    
    //Serial.println(index);
    // Serial.print("lastAddedEvent ev: ");
    //Serial.println(lastAddedEvent->description);
    Event* currentItemPtr = lastAddedEvent;
    287c:	e0 91 4f 01 	lds	r30, 0x014F
    2880:	f0 91 50 01 	lds	r31, 0x0150
    2884:	93 ce       	rjmp	.-730    	; 0x25ac <setup+0xe6>
    2886:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <_ZN13GB_Controller15checkFreeMemoryEv>
    288a:	80 91 ad 01 	lds	r24, 0x01AD
    288e:	88 23       	and	r24, r24
    2890:	09 f4       	brne	.+2      	; 0x2894 <setup+0x3ce>
    2892:	a2 ce       	rjmp	.-700    	; 0x25d8 <setup+0x112>
    2894:	9d ce       	rjmp	.-710    	; 0x25d0 <setup+0x10a>
    2896:	2e 96       	adiw	r28, 0x0e	; 14
    2898:	0f b6       	in	r0, 0x3f	; 63
    289a:	f8 94       	cli
    289c:	de bf       	out	0x3e, r29	; 62
    289e:	0f be       	out	0x3f, r0	; 63
    28a0:	cd bf       	out	0x3d, r28	; 61
    28a2:	cf 91       	pop	r28
    28a4:	df 91       	pop	r29
    28a6:	1f 91       	pop	r17
    28a8:	0f 91       	pop	r16
    28aa:	ff 90       	pop	r15
    28ac:	ef 90       	pop	r14
    28ae:	08 95       	ret

000028b0 <_ZN15GB_SerialHelper13stopHttpFrameEv>:
  static void startHttpFrame(const byte &wifiPortDescriptor){
    sendWifiFrameStart(wifiPortDescriptor, WIFI_RESPONSE_FRAME_SIZE);
    s_wifiResponseAutoFlushConut = 0;
  }

  static boolean stopHttpFrame(){
    28b0:	cf 93       	push	r28
    28b2:	df 93       	push	r29
    if (s_wifiResponseAutoFlushConut > 0){
    28b4:	80 91 bf 01 	lds	r24, 0x01BF
    28b8:	90 91 c0 01 	lds	r25, 0x01C0
    28bc:	18 16       	cp	r1, r24
    28be:	19 06       	cpc	r1, r25
    28c0:	64 f0       	brlt	.+24     	; 0x28da <_ZN15GB_SerialHelper13stopHttpFrameEv+0x2a>
    28c2:	13 c0       	rjmp	.+38     	; 0x28ea <_ZN15GB_SerialHelper13stopHttpFrameEv+0x3a>
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    28c4:	87 eb       	ldi	r24, 0xB7	; 183
    28c6:	93 e0       	ldi	r25, 0x03	; 3
    28c8:	60 e0       	ldi	r22, 0x00	; 0
    28ca:	0e 94 08 33 	call	0x6610	; 0x6610 <_ZN14HardwareSerial5writeEh>
      while (s_wifiResponseAutoFlushConut < WIFI_RESPONSE_FRAME_SIZE){
        s_wifiResponseAutoFlushConut += Serial.write(0x00);
    28ce:	c8 0f       	add	r28, r24
    28d0:	d9 1f       	adc	r29, r25
    28d2:	d0 93 c0 01 	sts	0x01C0, r29
    28d6:	c0 93 bf 01 	sts	0x01BF, r28
    s_wifiResponseAutoFlushConut = 0;
  }

  static boolean stopHttpFrame(){
    if (s_wifiResponseAutoFlushConut > 0){
      while (s_wifiResponseAutoFlushConut < WIFI_RESPONSE_FRAME_SIZE){
    28da:	c0 91 bf 01 	lds	r28, 0x01BF
    28de:	d0 91 c0 01 	lds	r29, 0x01C0
    28e2:	85 e0       	ldi	r24, 0x05	; 5
    28e4:	c8 37       	cpi	r28, 0x78	; 120
    28e6:	d8 07       	cpc	r29, r24
    28e8:	6c f3       	brlt	.-38     	; 0x28c4 <_ZN15GB_SerialHelper13stopHttpFrameEv+0x14>
    Serial.print(length);
    Serial.print(',');
  }

  static boolean sendWifiFrameStop(boolean rebootOnFalse = true){
    return wifiExecuteCommand(0,-1,rebootOnFalse);
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	6f ef       	ldi	r22, 0xFF	; 255
    28f0:	7f ef       	ldi	r23, 0xFF	; 255
    28f2:	40 e0       	ldi	r20, 0x00	; 0
    28f4:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
      while (s_wifiResponseAutoFlushConut < WIFI_RESPONSE_FRAME_SIZE){
        s_wifiResponseAutoFlushConut += Serial.write(0x00);
      }
    }
    return sendWifiFrameStop(false);
  } 
    28f8:	df 91       	pop	r29
    28fa:	cf 91       	pop	r28
    28fc:	08 95       	ret

000028fe <_ZL8sendDataRK6String>:
    28fe:	df 92       	push	r13
    2900:	ef 92       	push	r14
    2902:	ff 92       	push	r15
    2904:	0f 93       	push	r16
    2906:	1f 93       	push	r17
    2908:	cf 93       	push	r28
    290a:	df 93       	push	r29
    290c:	7c 01       	movw	r14, r24
    290e:	80 91 4b 01 	lds	r24, 0x014B
    2912:	88 23       	and	r24, r24
    2914:	09 f4       	brne	.+2      	; 0x2918 <_ZL8sendDataRK6String+0x1a>
    2916:	7f c0       	rjmp	.+254    	; 0x2a16 <_ZL8sendDataRK6String+0x118>
    return isSendOK;
  }  

  static boolean sendHttpResponseData(const byte &wifiPortDescriptor, const String &data){
    boolean isSendOK = true;
    if (data.length() == 0){
    2918:	f7 01       	movw	r30, r14
    291a:	84 81       	ldd	r24, Z+4	; 0x04
    291c:	95 81       	ldd	r25, Z+5	; 0x05
    291e:	89 2b       	or	r24, r25
    2920:	09 f4       	brne	.+2      	; 0x2924 <_ZL8sendDataRK6String+0x26>
    2922:	7e c0       	rjmp	.+252    	; 0x2a20 <_ZL8sendDataRK6String+0x122>
      return isSendOK;
    }
    if (!s_wifiIsHeaderSended){
    2924:	80 91 be 01 	lds	r24, 0x01BE
    2928:	88 23       	and	r24, r24
    292a:	89 f4       	brne	.+34     	; 0x294e <_ZL8sendDataRK6String+0x50>
      sendHttpOKHeader(wifiPortDescriptor); 
    292c:	80 91 04 01 	lds	r24, 0x0104
    2930:	0e 94 11 0a 	call	0x1422	; 0x1422 <_ZN15GB_SerialHelper16sendHttpOKHeaderEh>
      s_wifiIsHeaderSended = true;
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	80 93 be 01 	sts	0x01BE, r24
     return wifiExecuteCommand(); 
     */
  }

  static void startHttpFrame(const byte &wifiPortDescriptor){
    sendWifiFrameStart(wifiPortDescriptor, WIFI_RESPONSE_FRAME_SIZE);
    293a:	80 91 04 01 	lds	r24, 0x0104
    293e:	68 e7       	ldi	r22, 0x78	; 120
    2940:	75 e0       	ldi	r23, 0x05	; 5
    2942:	0e 94 15 08 	call	0x102a	; 0x102a <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>
    s_wifiResponseAutoFlushConut = 0;
    2946:	10 92 c0 01 	sts	0x01C0, r1
    294a:	10 92 bf 01 	sts	0x01BF, r1
    if (!s_wifiIsHeaderSended){
      sendHttpOKHeader(wifiPortDescriptor); 
      s_wifiIsHeaderSended = true;
      startHttpFrame(wifiPortDescriptor);
    } 
    if (s_wifiResponseAutoFlushConut + data.length() < WIFI_RESPONSE_FRAME_SIZE){
    294e:	c0 91 bf 01 	lds	r28, 0x01BF
    2952:	d0 91 c0 01 	lds	r29, 0x01C0
    2956:	f7 01       	movw	r30, r14
    2958:	84 81       	ldd	r24, Z+4	; 0x04
    295a:	95 81       	ldd	r25, Z+5	; 0x05
    295c:	8c 0f       	add	r24, r28
    295e:	9d 1f       	adc	r25, r29
    2960:	88 57       	subi	r24, 0x78	; 120
    2962:	95 40       	sbci	r25, 0x05	; 5
    2964:	18 f0       	brcs	.+6      	; 0x296c <_ZL8sendDataRK6String+0x6e>
    2966:	c0 e0       	ldi	r28, 0x00	; 0
    2968:	d0 e0       	ldi	r29, 0x00	; 0
    296a:	20 c0       	rjmp	.+64     	; 0x29ac <_ZL8sendDataRK6String+0xae>
      s_wifiResponseAutoFlushConut += Serial.print(data);
    296c:	87 eb       	ldi	r24, 0xB7	; 183
    296e:	93 e0       	ldi	r25, 0x03	; 3
    2970:	b7 01       	movw	r22, r14
    2972:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <_ZN5Print5printERK6String>
    2976:	c8 0f       	add	r28, r24
    2978:	d9 1f       	adc	r29, r25
    297a:	d0 93 c0 01 	sts	0x01C0, r29
    297e:	c0 93 bf 01 	sts	0x01BF, r28
    2982:	4e c0       	rjmp	.+156    	; 0x2a20 <_ZL8sendDataRK6String+0x122>
    2984:	be 01       	movw	r22, r28
    } 
    else {
      int index = 0;
      while (s_wifiResponseAutoFlushConut < WIFI_RESPONSE_FRAME_SIZE){
        char c = data[index++];
    2986:	21 96       	adiw	r28, 0x01	; 1
    2988:	c7 01       	movw	r24, r14
    298a:	0e 94 99 35 	call	0x6b32	; 0x6b32 <_ZNK6StringixEj>
    298e:	68 2f       	mov	r22, r24
        s_wifiResponseAutoFlushConut += Serial.print(c);
    2990:	00 91 bf 01 	lds	r16, 0x01BF
    2994:	10 91 c0 01 	lds	r17, 0x01C0
    2998:	87 eb       	ldi	r24, 0xB7	; 183
    299a:	93 e0       	ldi	r25, 0x03	; 3
    299c:	0e 94 fc 33 	call	0x67f8	; 0x67f8 <_ZN5Print5printEc>
    29a0:	08 0f       	add	r16, r24
    29a2:	19 1f       	adc	r17, r25
    29a4:	10 93 c0 01 	sts	0x01C0, r17
    29a8:	00 93 bf 01 	sts	0x01BF, r16
    if (s_wifiResponseAutoFlushConut + data.length() < WIFI_RESPONSE_FRAME_SIZE){
      s_wifiResponseAutoFlushConut += Serial.print(data);
    } 
    else {
      int index = 0;
      while (s_wifiResponseAutoFlushConut < WIFI_RESPONSE_FRAME_SIZE){
    29ac:	80 91 bf 01 	lds	r24, 0x01BF
    29b0:	90 91 c0 01 	lds	r25, 0x01C0
    29b4:	88 57       	subi	r24, 0x78	; 120
    29b6:	95 40       	sbci	r25, 0x05	; 5
    29b8:	2c f3       	brlt	.-54     	; 0x2984 <_ZL8sendDataRK6String+0x86>
        char c = data[index++];
        s_wifiResponseAutoFlushConut += Serial.print(c);
      }
      isSendOK = stopHttpFrame();
    29ba:	0e 94 58 14 	call	0x28b0	; 0x28b0 <_ZN15GB_SerialHelper13stopHttpFrameEv>
    29be:	d8 2e       	mov	r13, r24
     return wifiExecuteCommand(); 
     */
  }

  static void startHttpFrame(const byte &wifiPortDescriptor){
    sendWifiFrameStart(wifiPortDescriptor, WIFI_RESPONSE_FRAME_SIZE);
    29c0:	80 91 04 01 	lds	r24, 0x0104
    29c4:	68 e7       	ldi	r22, 0x78	; 120
    29c6:	75 e0       	ldi	r23, 0x05	; 5
    29c8:	0e 94 15 08 	call	0x102a	; 0x102a <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>
    s_wifiResponseAutoFlushConut = 0;
    29cc:	10 92 c0 01 	sts	0x01C0, r1
    29d0:	10 92 bf 01 	sts	0x01BF, r1
    29d4:	13 c0       	rjmp	.+38     	; 0x29fc <_ZL8sendDataRK6String+0xfe>
      }
      isSendOK = stopHttpFrame();
      startHttpFrame(wifiPortDescriptor); 

      while (index < data.length()){
        char c = data[index++];
    29d6:	21 96       	adiw	r28, 0x01	; 1
    29d8:	c7 01       	movw	r24, r14
    29da:	0e 94 99 35 	call	0x6b32	; 0x6b32 <_ZNK6StringixEj>
    29de:	68 2f       	mov	r22, r24
        s_wifiResponseAutoFlushConut += Serial.print(c);
    29e0:	00 91 bf 01 	lds	r16, 0x01BF
    29e4:	10 91 c0 01 	lds	r17, 0x01C0
    29e8:	87 eb       	ldi	r24, 0xB7	; 183
    29ea:	93 e0       	ldi	r25, 0x03	; 3
    29ec:	0e 94 fc 33 	call	0x67f8	; 0x67f8 <_ZN5Print5printEc>
    29f0:	08 0f       	add	r16, r24
    29f2:	19 1f       	adc	r17, r25
    29f4:	10 93 c0 01 	sts	0x01C0, r17
    29f8:	00 93 bf 01 	sts	0x01BF, r16
    29fc:	be 01       	movw	r22, r28
        s_wifiResponseAutoFlushConut += Serial.print(c);
      }
      isSendOK = stopHttpFrame();
      startHttpFrame(wifiPortDescriptor); 

      while (index < data.length()){
    29fe:	f7 01       	movw	r30, r14
    2a00:	84 81       	ldd	r24, Z+4	; 0x04
    2a02:	95 81       	ldd	r25, Z+5	; 0x05
    2a04:	c8 17       	cp	r28, r24
    2a06:	d9 07       	cpc	r29, r25
    2a08:	30 f3       	brcs	.-52     	; 0x29d6 <_ZL8sendDataRK6String+0xd8>
    2a0a:	dd 20       	and	r13, r13
    2a0c:	49 f4       	brne	.+18     	; 0x2a20 <_ZL8sendDataRK6String+0x122>
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	80 93 4c 01 	sts	0x014C, r24
    2a14:	05 c0       	rjmp	.+10     	; 0x2a20 <_ZL8sendDataRK6String+0x122>
    2a16:	87 eb       	ldi	r24, 0xB7	; 183
    2a18:	93 e0       	ldi	r25, 0x03	; 3
    2a1a:	b7 01       	movw	r22, r14
    2a1c:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <_ZN5Print5printERK6String>
    2a20:	df 91       	pop	r29
    2a22:	cf 91       	pop	r28
    2a24:	1f 91       	pop	r17
    2a26:	0f 91       	pop	r16
    2a28:	ff 90       	pop	r15
    2a2a:	ef 90       	pop	r14
    2a2c:	df 90       	pop	r13
    2a2e:	08 95       	ret

00002a30 <_ZL8sendDatac>:
    2a30:	ff 92       	push	r15
    2a32:	0f 93       	push	r16
    2a34:	1f 93       	push	r17
    2a36:	df 93       	push	r29
    2a38:	cf 93       	push	r28
    2a3a:	cd b7       	in	r28, 0x3d	; 61
    2a3c:	de b7       	in	r29, 0x3e	; 62
    2a3e:	27 97       	sbiw	r28, 0x07	; 7
    2a40:	0f b6       	in	r0, 0x3f	; 63
    2a42:	f8 94       	cli
    2a44:	de bf       	out	0x3e, r29	; 62
    2a46:	0f be       	out	0x3f, r0	; 63
    2a48:	cd bf       	out	0x3d, r28	; 61
    2a4a:	f8 2e       	mov	r15, r24
    2a4c:	8e 01       	movw	r16, r28
    2a4e:	0f 5f       	subi	r16, 0xFF	; 255
    2a50:	1f 4f       	sbci	r17, 0xFF	; 255
    2a52:	c8 01       	movw	r24, r16
    2a54:	60 e0       	ldi	r22, 0x00	; 0
    2a56:	71 e0       	ldi	r23, 0x01	; 1
    2a58:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <_ZN6StringC1EPKc>
    2a5c:	c8 01       	movw	r24, r16
    2a5e:	6f 2d       	mov	r22, r15
    2a60:	0e 94 7d 37 	call	0x6efa	; 0x6efa <_ZN6String6concatEc>
    2a64:	c8 01       	movw	r24, r16
    2a66:	0e 94 7f 14 	call	0x28fe	; 0x28fe <_ZL8sendDataRK6String>
    2a6a:	c8 01       	movw	r24, r16
    2a6c:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    2a70:	27 96       	adiw	r28, 0x07	; 7
    2a72:	0f b6       	in	r0, 0x3f	; 63
    2a74:	f8 94       	cli
    2a76:	de bf       	out	0x3e, r29	; 62
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	cd bf       	out	0x3d, r28	; 61
    2a7c:	cf 91       	pop	r28
    2a7e:	df 91       	pop	r29
    2a80:	1f 91       	pop	r17
    2a82:	0f 91       	pop	r16
    2a84:	ff 90       	pop	r15
    2a86:	08 95       	ret

00002a88 <_ZL8sendDatai>:
    2a88:	ef 92       	push	r14
    2a8a:	ff 92       	push	r15
    2a8c:	0f 93       	push	r16
    2a8e:	1f 93       	push	r17
    2a90:	df 93       	push	r29
    2a92:	cf 93       	push	r28
    2a94:	cd b7       	in	r28, 0x3d	; 61
    2a96:	de b7       	in	r29, 0x3e	; 62
    2a98:	27 97       	sbiw	r28, 0x07	; 7
    2a9a:	0f b6       	in	r0, 0x3f	; 63
    2a9c:	f8 94       	cli
    2a9e:	de bf       	out	0x3e, r29	; 62
    2aa0:	0f be       	out	0x3f, r0	; 63
    2aa2:	cd bf       	out	0x3d, r28	; 61
    2aa4:	7c 01       	movw	r14, r24
    2aa6:	8e 01       	movw	r16, r28
    2aa8:	0f 5f       	subi	r16, 0xFF	; 255
    2aaa:	1f 4f       	sbci	r17, 0xFF	; 255
    2aac:	c8 01       	movw	r24, r16
    2aae:	60 e0       	ldi	r22, 0x00	; 0
    2ab0:	71 e0       	ldi	r23, 0x01	; 1
    2ab2:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <_ZN6StringC1EPKc>
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
    2ab6:	c8 01       	movw	r24, r16
    2ab8:	b7 01       	movw	r22, r14
    2aba:	0e 94 20 37 	call	0x6e40	; 0x6e40 <_ZN6String6concatEi>
    2abe:	c8 01       	movw	r24, r16
    2ac0:	0e 94 7f 14 	call	0x28fe	; 0x28fe <_ZL8sendDataRK6String>
    2ac4:	c8 01       	movw	r24, r16
    2ac6:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    2aca:	27 96       	adiw	r28, 0x07	; 7
    2acc:	0f b6       	in	r0, 0x3f	; 63
    2ace:	f8 94       	cli
    2ad0:	de bf       	out	0x3e, r29	; 62
    2ad2:	0f be       	out	0x3f, r0	; 63
    2ad4:	cd bf       	out	0x3d, r28	; 61
    2ad6:	cf 91       	pop	r28
    2ad8:	df 91       	pop	r29
    2ada:	1f 91       	pop	r17
    2adc:	0f 91       	pop	r16
    2ade:	ff 90       	pop	r15
    2ae0:	ef 90       	pop	r14
    2ae2:	08 95       	ret

00002ae4 <_ZL8sendDatam>:
    2ae4:	0f 93       	push	r16
    2ae6:	1f 93       	push	r17
    2ae8:	df 93       	push	r29
    2aea:	cf 93       	push	r28
    2aec:	cd b7       	in	r28, 0x3d	; 61
    2aee:	de b7       	in	r29, 0x3e	; 62
    2af0:	27 97       	sbiw	r28, 0x07	; 7
    2af2:	0f b6       	in	r0, 0x3f	; 63
    2af4:	f8 94       	cli
    2af6:	de bf       	out	0x3e, r29	; 62
    2af8:	0f be       	out	0x3f, r0	; 63
    2afa:	cd bf       	out	0x3d, r28	; 61
    2afc:	ab 01       	movw	r20, r22
    2afe:	bc 01       	movw	r22, r24
    2b00:	8e 01       	movw	r16, r28
    2b02:	0f 5f       	subi	r16, 0xFF	; 255
    2b04:	1f 4f       	sbci	r17, 0xFF	; 255
    2b06:	c8 01       	movw	r24, r16
    2b08:	0e 94 14 0b 	call	0x1628	; 0x1628 <_ZN13GB_PrintDirty13getTimeStringEm>
    2b0c:	c8 01       	movw	r24, r16
    2b0e:	0e 94 7f 14 	call	0x28fe	; 0x28fe <_ZL8sendDataRK6String>
    2b12:	c8 01       	movw	r24, r16
    2b14:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    2b18:	27 96       	adiw	r28, 0x07	; 7
    2b1a:	0f b6       	in	r0, 0x3f	; 63
    2b1c:	f8 94       	cli
    2b1e:	de bf       	out	0x3e, r29	; 62
    2b20:	0f be       	out	0x3f, r0	; 63
    2b22:	cd bf       	out	0x3d, r28	; 61
    2b24:	cf 91       	pop	r28
    2b26:	df 91       	pop	r29
    2b28:	1f 91       	pop	r17
    2b2a:	0f 91       	pop	r16
    2b2c:	08 95       	ret

00002b2e <_ZL8sendDataf>:
    2b2e:	af 92       	push	r10
    2b30:	bf 92       	push	r11
    2b32:	cf 92       	push	r12
    2b34:	df 92       	push	r13
    2b36:	ef 92       	push	r14
    2b38:	ff 92       	push	r15
    2b3a:	0f 93       	push	r16
    2b3c:	1f 93       	push	r17
    2b3e:	df 93       	push	r29
    2b40:	cf 93       	push	r28
    2b42:	cd b7       	in	r28, 0x3d	; 61
    2b44:	de b7       	in	r29, 0x3e	; 62
    2b46:	2e 97       	sbiw	r28, 0x0e	; 14
    2b48:	0f b6       	in	r0, 0x3f	; 63
    2b4a:	f8 94       	cli
    2b4c:	de bf       	out	0x3e, r29	; 62
    2b4e:	0f be       	out	0x3f, r0	; 63
    2b50:	cd bf       	out	0x3d, r28	; 61
    2b52:	7b 01       	movw	r14, r22
    2b54:	8c 01       	movw	r16, r24
      out = flashStringLoad(S_0x) + out;
    }
    return out;
  }
  static String floatToString(float number){
    String out;
    2b56:	5e 01       	movw	r10, r28
    2b58:	08 94       	sec
    2b5a:	a1 1c       	adc	r10, r1
    2b5c:	b1 1c       	adc	r11, r1
    2b5e:	c5 01       	movw	r24, r10
    2b60:	60 e0       	ldi	r22, 0x00	; 0
    2b62:	71 e0       	ldi	r23, 0x01	; 1
    2b64:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <_ZN6StringC1EPKc>

    int temp = number*100;
    2b68:	c8 01       	movw	r24, r16
    2b6a:	b7 01       	movw	r22, r14
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	48 ec       	ldi	r20, 0xC8	; 200
    2b72:	52 e4       	ldi	r21, 0x42	; 66
    2b74:	0e 94 79 3b 	call	0x76f2	; 0x76f2 <__mulsf3>
    2b78:	0e 94 92 3a 	call	0x7524	; 0x7524 <__fixsfsi>
    2b7c:	6b 01       	movw	r12, r22
    2b7e:	7c 01       	movw	r14, r24
    2b80:	cb 01       	movw	r24, r22
    2b82:	64 e6       	ldi	r22, 0x64	; 100
    2b84:	70 e0       	ldi	r23, 0x00	; 0
    2b86:	0e 94 0f 3c 	call	0x781e	; 0x781e <__divmodhi4>
    2b8a:	c5 01       	movw	r24, r10
    2b8c:	0e 94 20 37 	call	0x6e40	; 0x6e40 <_ZN6String6concatEi>
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    2b90:	c5 01       	movw	r24, r10
    2b92:	6e e2       	ldi	r22, 0x2E	; 46
    2b94:	0e 94 7d 37 	call	0x6efa	; 0x6efa <_ZN6String6concatEc>
    int whole = temp/100;
    int fract = temp%100;

    out += whole;
    out += '.';
    out += getFixedDigitsString(temp,2);
    2b98:	8e 01       	movw	r16, r28
    2b9a:	08 5f       	subi	r16, 0xF8	; 248
    2b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b9e:	c8 01       	movw	r24, r16
    2ba0:	b6 01       	movw	r22, r12
    2ba2:	42 e0       	ldi	r20, 0x02	; 2
    2ba4:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    2ba8:	c5 01       	movw	r24, r10
    2baa:	b8 01       	movw	r22, r16
    2bac:	0e 94 90 37 	call	0x6f20	; 0x6f20 <_ZN6String6concatERKS_>
    2bb0:	c8 01       	movw	r24, r16
    2bb2:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    2bb6:	c5 01       	movw	r24, r10
    2bb8:	0e 94 7f 14 	call	0x28fe	; 0x28fe <_ZL8sendDataRK6String>
    2bbc:	c5 01       	movw	r24, r10
    2bbe:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    2bc2:	2e 96       	adiw	r28, 0x0e	; 14
    2bc4:	0f b6       	in	r0, 0x3f	; 63
    2bc6:	f8 94       	cli
    2bc8:	de bf       	out	0x3e, r29	; 62
    2bca:	0f be       	out	0x3f, r0	; 63
    2bcc:	cd bf       	out	0x3d, r28	; 61
    2bce:	cf 91       	pop	r28
    2bd0:	df 91       	pop	r29
    2bd2:	1f 91       	pop	r17
    2bd4:	0f 91       	pop	r16
    2bd6:	ff 90       	pop	r15
    2bd8:	ef 90       	pop	r14
    2bda:	df 90       	pop	r13
    2bdc:	cf 90       	pop	r12
    2bde:	bf 90       	pop	r11
    2be0:	af 90       	pop	r10
    2be2:	08 95       	ret

00002be4 <_ZL8sendDataj>:
    2be4:	ef 92       	push	r14
    2be6:	ff 92       	push	r15
    2be8:	0f 93       	push	r16
    2bea:	1f 93       	push	r17
    2bec:	df 93       	push	r29
    2bee:	cf 93       	push	r28
    2bf0:	cd b7       	in	r28, 0x3d	; 61
    2bf2:	de b7       	in	r29, 0x3e	; 62
    2bf4:	27 97       	sbiw	r28, 0x07	; 7
    2bf6:	0f b6       	in	r0, 0x3f	; 63
    2bf8:	f8 94       	cli
    2bfa:	de bf       	out	0x3e, r29	; 62
    2bfc:	0f be       	out	0x3f, r0	; 63
    2bfe:	cd bf       	out	0x3d, r28	; 61
    2c00:	7c 01       	movw	r14, r24
    2c02:	8e 01       	movw	r16, r28
    2c04:	0f 5f       	subi	r16, 0xFF	; 255
    2c06:	1f 4f       	sbci	r17, 0xFF	; 255
    2c08:	c8 01       	movw	r24, r16
    2c0a:	60 e0       	ldi	r22, 0x00	; 0
    2c0c:	71 e0       	ldi	r23, 0x01	; 1
    2c0e:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <_ZN6StringC1EPKc>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
	String & operator += (unsigned int num)		{concat(num); return (*this);}
    2c12:	c8 01       	movw	r24, r16
    2c14:	b7 01       	movw	r22, r14
    2c16:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <_ZN6String6concatEj>
    2c1a:	c8 01       	movw	r24, r16
    2c1c:	0e 94 7f 14 	call	0x28fe	; 0x28fe <_ZL8sendDataRK6String>
    2c20:	c8 01       	movw	r24, r16
    2c22:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    2c26:	27 96       	adiw	r28, 0x07	; 7
    2c28:	0f b6       	in	r0, 0x3f	; 63
    2c2a:	f8 94       	cli
    2c2c:	de bf       	out	0x3e, r29	; 62
    2c2e:	0f be       	out	0x3f, r0	; 63
    2c30:	cd bf       	out	0x3d, r28	; 61
    2c32:	cf 91       	pop	r28
    2c34:	df 91       	pop	r29
    2c36:	1f 91       	pop	r17
    2c38:	0f 91       	pop	r16
    2c3a:	ff 90       	pop	r15
    2c3c:	ef 90       	pop	r14
    2c3e:	08 95       	ret

00002c40 <_ZL8sendDataPK19__FlashStringHelper>:
    2c40:	bf 92       	push	r11
    2c42:	cf 92       	push	r12
    2c44:	df 92       	push	r13
    2c46:	ef 92       	push	r14
    2c48:	ff 92       	push	r15
    2c4a:	0f 93       	push	r16
    2c4c:	1f 93       	push	r17
    2c4e:	cf 93       	push	r28
    2c50:	df 93       	push	r29
    2c52:	6c 01       	movw	r12, r24
    2c54:	80 91 4b 01 	lds	r24, 0x014B
    2c58:	88 23       	and	r24, r24
    2c5a:	09 f4       	brne	.+2      	; 0x2c5e <_ZL8sendDataPK19__FlashStringHelper+0x1e>
    2c5c:	7a c0       	rjmp	.+244    	; 0x2d52 <_ZL8sendDataPK19__FlashStringHelper+0x112>
  }


  static boolean sendHttpResponseData(const byte &wifiPortDescriptor, const __FlashStringHelper* data){
    boolean isSendOK = true;
    if (!s_wifiIsHeaderSended){
    2c5e:	80 91 be 01 	lds	r24, 0x01BE
    2c62:	88 23       	and	r24, r24
    2c64:	89 f4       	brne	.+34     	; 0x2c88 <_ZL8sendDataPK19__FlashStringHelper+0x48>
      sendHttpOKHeader(wifiPortDescriptor); 
    2c66:	80 91 04 01 	lds	r24, 0x0104
    2c6a:	0e 94 11 0a 	call	0x1422	; 0x1422 <_ZN15GB_SerialHelper16sendHttpOKHeaderEh>
      s_wifiIsHeaderSended = true;
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	80 93 be 01 	sts	0x01BE, r24
     return wifiExecuteCommand(); 
     */
  }

  static void startHttpFrame(const byte &wifiPortDescriptor){
    sendWifiFrameStart(wifiPortDescriptor, WIFI_RESPONSE_FRAME_SIZE);
    2c74:	80 91 04 01 	lds	r24, 0x0104
    2c78:	68 e7       	ldi	r22, 0x78	; 120
    2c7a:	75 e0       	ldi	r23, 0x05	; 5
    2c7c:	0e 94 15 08 	call	0x102a	; 0x102a <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>
    s_wifiResponseAutoFlushConut = 0;
    2c80:	10 92 c0 01 	sts	0x01C0, r1
    2c84:	10 92 bf 01 	sts	0x01BF, r1
    if (!s_wifiIsHeaderSended){
      sendHttpOKHeader(wifiPortDescriptor); 
      s_wifiIsHeaderSended = true;
      startHttpFrame(wifiPortDescriptor);
    } 
    if (s_wifiResponseAutoFlushConut + flashStringLength(data) < WIFI_RESPONSE_FRAME_SIZE){
    2c88:	c0 91 bf 01 	lds	r28, 0x01BF
    2c8c:	d0 91 c0 01 	lds	r29, 0x01C0
    2c90:	c6 01       	movw	r24, r12
    2c92:	0e 94 0e 05 	call	0xa1c	; 0xa1c <strlen_P>
    2c96:	7c 01       	movw	r14, r24
    2c98:	8c 0f       	add	r24, r28
    2c9a:	9d 1f       	adc	r25, r29
    2c9c:	88 57       	subi	r24, 0x78	; 120
    2c9e:	95 40       	sbci	r25, 0x05	; 5
    2ca0:	1c f0       	brlt	.+6      	; 0x2ca8 <_ZL8sendDataPK19__FlashStringHelper+0x68>
    2ca2:	c0 e0       	ldi	r28, 0x00	; 0
    2ca4:	d0 e0       	ldi	r29, 0x00	; 0
    2ca6:	20 c0       	rjmp	.+64     	; 0x2ce8 <_ZL8sendDataPK19__FlashStringHelper+0xa8>
      s_wifiResponseAutoFlushConut += Serial.print(data);
    2ca8:	87 eb       	ldi	r24, 0xB7	; 183
    2caa:	93 e0       	ldi	r25, 0x03	; 3
    2cac:	b6 01       	movw	r22, r12
    2cae:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <_ZN5Print5printEPK19__FlashStringHelper>
    2cb2:	c8 0f       	add	r28, r24
    2cb4:	d9 1f       	adc	r29, r25
    2cb6:	d0 93 c0 01 	sts	0x01C0, r29
    2cba:	c0 93 bf 01 	sts	0x01BF, r28
    2cbe:	4e c0       	rjmp	.+156    	; 0x2d5c <_ZL8sendDataPK19__FlashStringHelper+0x11c>
}

static char flashStringCharAt(const __FlashStringHelper* fstr, int index){ 
  if (index >= flashStringLength(fstr)){
    2cc0:	ce 15       	cp	r28, r14
    2cc2:	df 05       	cpc	r29, r15
    2cc4:	14 f0       	brlt	.+4      	; 0x2cca <_ZL8sendDataPK19__FlashStringHelper+0x8a>
    2cc6:	6f ef       	ldi	r22, 0xFF	; 255
    2cc8:	04 c0       	rjmp	.+8      	; 0x2cd2 <_ZL8sendDataPK19__FlashStringHelper+0x92>
    return 0xFF; 
  }
  const char PROGMEM * pstr = (const char PROGMEM *) fstr;
  return pgm_read_byte(pstr+index);
    2cca:	f6 01       	movw	r30, r12
    2ccc:	ec 0f       	add	r30, r28
    2cce:	fd 1f       	adc	r31, r29
    2cd0:	64 91       	lpm	r22, Z+
    } 
    else {
      int index = 0;
      while (s_wifiResponseAutoFlushConut < WIFI_RESPONSE_FRAME_SIZE){
        char c = flashStringCharAt(data, index++);
    2cd2:	21 96       	adiw	r28, 0x01	; 1
        s_wifiResponseAutoFlushConut += Serial.print(c);
    2cd4:	87 eb       	ldi	r24, 0xB7	; 183
    2cd6:	93 e0       	ldi	r25, 0x03	; 3
    2cd8:	0e 94 fc 33 	call	0x67f8	; 0x67f8 <_ZN5Print5printEc>
    2cdc:	08 0f       	add	r16, r24
    2cde:	19 1f       	adc	r17, r25
    2ce0:	10 93 c0 01 	sts	0x01C0, r17
    2ce4:	00 93 bf 01 	sts	0x01BF, r16
    if (s_wifiResponseAutoFlushConut + flashStringLength(data) < WIFI_RESPONSE_FRAME_SIZE){
      s_wifiResponseAutoFlushConut += Serial.print(data);
    } 
    else {
      int index = 0;
      while (s_wifiResponseAutoFlushConut < WIFI_RESPONSE_FRAME_SIZE){
    2ce8:	00 91 bf 01 	lds	r16, 0x01BF
    2cec:	10 91 c0 01 	lds	r17, 0x01C0
    2cf0:	85 e0       	ldi	r24, 0x05	; 5
    2cf2:	08 37       	cpi	r16, 0x78	; 120
    2cf4:	18 07       	cpc	r17, r24
    2cf6:	24 f3       	brlt	.-56     	; 0x2cc0 <_ZL8sendDataPK19__FlashStringHelper+0x80>
        char c = flashStringCharAt(data, index++);
        s_wifiResponseAutoFlushConut += Serial.print(c);
      }
      isSendOK = stopHttpFrame();
    2cf8:	0e 94 58 14 	call	0x28b0	; 0x28b0 <_ZN15GB_SerialHelper13stopHttpFrameEv>
    2cfc:	b8 2e       	mov	r11, r24
     return wifiExecuteCommand(); 
     */
  }

  static void startHttpFrame(const byte &wifiPortDescriptor){
    sendWifiFrameStart(wifiPortDescriptor, WIFI_RESPONSE_FRAME_SIZE);
    2cfe:	80 91 04 01 	lds	r24, 0x0104
    2d02:	68 e7       	ldi	r22, 0x78	; 120
    2d04:	75 e0       	ldi	r23, 0x05	; 5
    2d06:	0e 94 15 08 	call	0x102a	; 0x102a <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>
    s_wifiResponseAutoFlushConut = 0;
    2d0a:	10 92 c0 01 	sts	0x01C0, r1
    2d0e:	10 92 bf 01 	sts	0x01BF, r1
    2d12:	cc 0e       	add	r12, r28
    2d14:	dd 1e       	adc	r13, r29
    2d16:	14 c0       	rjmp	.+40     	; 0x2d40 <_ZL8sendDataPK19__FlashStringHelper+0x100>
        s_wifiResponseAutoFlushConut += Serial.print(c);
      }
      isSendOK = stopHttpFrame();
      startHttpFrame(wifiPortDescriptor);   
      while (index < flashStringLength(data)){
        char c = flashStringCharAt(data, index++);
    2d18:	21 96       	adiw	r28, 0x01	; 1
    2d1a:	f6 01       	movw	r30, r12
    2d1c:	64 91       	lpm	r22, Z+
        s_wifiResponseAutoFlushConut += Serial.print(c);
    2d1e:	00 91 bf 01 	lds	r16, 0x01BF
    2d22:	10 91 c0 01 	lds	r17, 0x01C0
    2d26:	87 eb       	ldi	r24, 0xB7	; 183
    2d28:	93 e0       	ldi	r25, 0x03	; 3
    2d2a:	0e 94 fc 33 	call	0x67f8	; 0x67f8 <_ZN5Print5printEc>
    2d2e:	08 0f       	add	r16, r24
    2d30:	19 1f       	adc	r17, r25
    2d32:	10 93 c0 01 	sts	0x01C0, r17
    2d36:	00 93 bf 01 	sts	0x01BF, r16
    2d3a:	08 94       	sec
    2d3c:	c1 1c       	adc	r12, r1
    2d3e:	d1 1c       	adc	r13, r1
        char c = flashStringCharAt(data, index++);
        s_wifiResponseAutoFlushConut += Serial.print(c);
      }
      isSendOK = stopHttpFrame();
      startHttpFrame(wifiPortDescriptor);   
      while (index < flashStringLength(data)){
    2d40:	ce 15       	cp	r28, r14
    2d42:	df 05       	cpc	r29, r15
    2d44:	4c f3       	brlt	.-46     	; 0x2d18 <_ZL8sendDataPK19__FlashStringHelper+0xd8>
    2d46:	bb 20       	and	r11, r11
    2d48:	49 f4       	brne	.+18     	; 0x2d5c <_ZL8sendDataPK19__FlashStringHelper+0x11c>
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
    2d4c:	80 93 4c 01 	sts	0x014C, r24
    2d50:	05 c0       	rjmp	.+10     	; 0x2d5c <_ZL8sendDataPK19__FlashStringHelper+0x11c>
    2d52:	87 eb       	ldi	r24, 0xB7	; 183
    2d54:	93 e0       	ldi	r25, 0x03	; 3
    2d56:	b6 01       	movw	r22, r12
    2d58:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <_ZN5Print5printEPK19__FlashStringHelper>
    2d5c:	df 91       	pop	r29
    2d5e:	cf 91       	pop	r28
    2d60:	1f 91       	pop	r17
    2d62:	0f 91       	pop	r16
    2d64:	ff 90       	pop	r15
    2d66:	ef 90       	pop	r14
    2d68:	df 90       	pop	r13
    2d6a:	cf 90       	pop	r12
    2d6c:	bf 90       	pop	r11
    2d6e:	08 95       	ret

00002d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>:
    2d70:	0f 93       	push	r16
    2d72:	1f 93       	push	r17
    2d74:	cf 93       	push	r28
    2d76:	df 93       	push	r29
    2d78:	8c 01       	movw	r16, r24
    2d7a:	eb 01       	movw	r28, r22
    2d7c:	8c e3       	ldi	r24, 0x3C	; 60
    2d7e:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_ZL8sendDatac>
    2d82:	c1 30       	cpi	r28, 0x01	; 1
    2d84:	d1 05       	cpc	r29, r1
    2d86:	19 f4       	brne	.+6      	; 0x2d8e <_ZL11sendHTTPtagPKc8HTTP_TAG+0x1e>
    2d88:	8f e2       	ldi	r24, 0x2F	; 47
    2d8a:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_ZL8sendDatac>
    2d8e:	c8 01       	movw	r24, r16
    2d90:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    2d94:	22 97       	sbiw	r28, 0x02	; 2
    2d96:	19 f4       	brne	.+6      	; 0x2d9e <_ZL11sendHTTPtagPKc8HTTP_TAG+0x2e>
    2d98:	8f e2       	ldi	r24, 0x2F	; 47
    2d9a:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_ZL8sendDatac>
    2d9e:	8e e3       	ldi	r24, 0x3E	; 62
    2da0:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_ZL8sendDatac>
    2da4:	df 91       	pop	r29
    2da6:	cf 91       	pop	r28
    2da8:	1f 91       	pop	r17
    2daa:	0f 91       	pop	r16
    2dac:	08 95       	ret

00002dae <_Z20printSendStorageDumpv>:
    2dae:	bf 92       	push	r11
    2db0:	cf 92       	push	r12
    2db2:	df 92       	push	r13
    2db4:	ef 92       	push	r14
    2db6:	ff 92       	push	r15
    2db8:	0f 93       	push	r16
    2dba:	1f 93       	push	r17
    2dbc:	df 93       	push	r29
    2dbe:	cf 93       	push	r28
    2dc0:	cd b7       	in	r28, 0x3d	; 61
    2dc2:	de b7       	in	r29, 0x3e	; 62
    2dc4:	65 97       	sbiw	r28, 0x15	; 21
    2dc6:	0f b6       	in	r0, 0x3f	; 63
    2dc8:	f8 94       	cli
    2dca:	de bf       	out	0x3e, r29	; 62
    2dcc:	0f be       	out	0x3f, r0	; 63
    2dce:	cd bf       	out	0x3d, r28	; 61
    2dd0:	88 e6       	ldi	r24, 0x68	; 104
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	60 e0       	ldi	r22, 0x00	; 0
    2dd6:	70 e0       	ldi	r23, 0x00	; 0
    2dd8:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2ddc:	8e e6       	ldi	r24, 0x6E	; 110
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	60 e0       	ldi	r22, 0x00	; 0
    2de2:	70 e0       	ldi	r23, 0x00	; 0
    2de4:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2de8:	81 e7       	ldi	r24, 0x71	; 113
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	60 e0       	ldi	r22, 0x00	; 0
    2dee:	70 e0       	ldi	r23, 0x00	; 0
    2df0:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2df4:	81 e7       	ldi	r24, 0x71	; 113
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	61 e0       	ldi	r22, 0x01	; 1
    2dfa:	70 e0       	ldi	r23, 0x00	; 0
    2dfc:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2e00:	10 e0       	ldi	r17, 0x00	; 0
    2e02:	7e 01       	movw	r14, r28
    2e04:	08 94       	sec
    2e06:	e1 1c       	adc	r14, r1
    2e08:	f1 1c       	adc	r15, r1
    2e0a:	81 e7       	ldi	r24, 0x71	; 113
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	60 e0       	ldi	r22, 0x00	; 0
    2e10:	70 e0       	ldi	r23, 0x00	; 0
    2e12:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2e16:	84 e7       	ldi	r24, 0x74	; 116
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	60 e0       	ldi	r22, 0x00	; 0
    2e1c:	70 e0       	ldi	r23, 0x00	; 0
    2e1e:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2e22:	c7 01       	movw	r24, r14
    2e24:	61 2f       	mov	r22, r17
    2e26:	40 e0       	ldi	r20, 0x00	; 0
    2e28:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZN13GB_PrintDirty6getHEXEhh>
    2e2c:	c7 01       	movw	r24, r14
    2e2e:	0e 94 7f 14 	call	0x28fe	; 0x28fe <_ZL8sendDataRK6String>
    2e32:	c7 01       	movw	r24, r14
    2e34:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    2e38:	84 e7       	ldi	r24, 0x74	; 116
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	61 e0       	ldi	r22, 0x01	; 1
    2e3e:	70 e0       	ldi	r23, 0x00	; 0
    2e40:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2e44:	81 e7       	ldi	r24, 0x71	; 113
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	61 e0       	ldi	r22, 0x01	; 1
    2e4a:	70 e0       	ldi	r23, 0x00	; 0
    2e4c:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2e50:	1f 5f       	subi	r17, 0xFF	; 255
    2e52:	10 31       	cpi	r17, 0x10	; 16
    2e54:	d1 f6       	brne	.-76     	; 0x2e0a <_Z20printSendStorageDumpv+0x5c>
    2e56:	8e e6       	ldi	r24, 0x6E	; 110
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	61 e0       	ldi	r22, 0x01	; 1
    2e5c:	70 e0       	ldi	r23, 0x00	; 0
    2e5e:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2e62:	00 e0       	ldi	r16, 0x00	; 0
    2e64:	10 e0       	ldi	r17, 0x00	; 0
    2e66:	a8 e0       	ldi	r26, 0x08	; 8
    2e68:	ca 2e       	mov	r12, r26
    2e6a:	d1 2c       	mov	r13, r1
    2e6c:	cc 0e       	add	r12, r28
    2e6e:	dd 1e       	adc	r13, r29
    2e70:	ff e0       	ldi	r31, 0x0F	; 15
    2e72:	ef 2e       	mov	r14, r31
    2e74:	f1 2c       	mov	r15, r1
    2e76:	ec 0e       	add	r14, r28
    2e78:	fd 1e       	adc	r15, r29
    2e7a:	c8 01       	movw	r24, r16
    2e7c:	0e 94 83 06 	call	0xd06	; 0xd06 <_ZN10GB_Storage4readEj>
    2e80:	b8 2e       	mov	r11, r24
    2e82:	c8 01       	movw	r24, r16
    2e84:	8f 70       	andi	r24, 0x0F	; 15
    2e86:	90 70       	andi	r25, 0x00	; 0
    2e88:	89 2b       	or	r24, r25
    2e8a:	b9 f5       	brne	.+110    	; 0x2efa <_Z20printSendStorageDumpv+0x14c>
    2e8c:	01 15       	cp	r16, r1
    2e8e:	11 05       	cpc	r17, r1
    2e90:	31 f0       	breq	.+12     	; 0x2e9e <_Z20printSendStorageDumpv+0xf0>
    2e92:	8e e6       	ldi	r24, 0x6E	; 110
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	61 e0       	ldi	r22, 0x01	; 1
    2e98:	70 e0       	ldi	r23, 0x00	; 0
    2e9a:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2e9e:	8e e6       	ldi	r24, 0x6E	; 110
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	60 e0       	ldi	r22, 0x00	; 0
    2ea4:	70 e0       	ldi	r23, 0x00	; 0
    2ea6:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2eaa:	81 e7       	ldi	r24, 0x71	; 113
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	60 e0       	ldi	r22, 0x00	; 0
    2eb0:	70 e0       	ldi	r23, 0x00	; 0
    2eb2:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2eb6:	84 e7       	ldi	r24, 0x74	; 116
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	60 e0       	ldi	r22, 0x00	; 0
    2ebc:	70 e0       	ldi	r23, 0x00	; 0
    2ebe:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2ec2:	b8 01       	movw	r22, r16
    2ec4:	e4 e0       	ldi	r30, 0x04	; 4
    2ec6:	76 95       	lsr	r23
    2ec8:	67 95       	ror	r22
    2eca:	ea 95       	dec	r30
    2ecc:	e1 f7       	brne	.-8      	; 0x2ec6 <_Z20printSendStorageDumpv+0x118>
    2ece:	c6 01       	movw	r24, r12
    2ed0:	40 e0       	ldi	r20, 0x00	; 0
    2ed2:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZN13GB_PrintDirty6getHEXEhh>
    2ed6:	c6 01       	movw	r24, r12
    2ed8:	0e 94 7f 14 	call	0x28fe	; 0x28fe <_ZL8sendDataRK6String>
    2edc:	c6 01       	movw	r24, r12
    2ede:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    2ee2:	84 e7       	ldi	r24, 0x74	; 116
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	61 e0       	ldi	r22, 0x01	; 1
    2ee8:	70 e0       	ldi	r23, 0x00	; 0
    2eea:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2eee:	81 e7       	ldi	r24, 0x71	; 113
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	61 e0       	ldi	r22, 0x01	; 1
    2ef4:	70 e0       	ldi	r23, 0x00	; 0
    2ef6:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2efa:	81 e7       	ldi	r24, 0x71	; 113
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	60 e0       	ldi	r22, 0x00	; 0
    2f00:	70 e0       	ldi	r23, 0x00	; 0
    2f02:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2f06:	c7 01       	movw	r24, r14
    2f08:	6b 2d       	mov	r22, r11
    2f0a:	40 e0       	ldi	r20, 0x00	; 0
    2f0c:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZN13GB_PrintDirty6getHEXEhh>
    2f10:	c7 01       	movw	r24, r14
    2f12:	0e 94 7f 14 	call	0x28fe	; 0x28fe <_ZL8sendDataRK6String>
    2f16:	c7 01       	movw	r24, r14
    2f18:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    2f1c:	81 e7       	ldi	r24, 0x71	; 113
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	61 e0       	ldi	r22, 0x01	; 1
    2f22:	70 e0       	ldi	r23, 0x00	; 0
    2f24:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2f28:	80 91 4c 01 	lds	r24, 0x014C
    2f2c:	88 23       	and	r24, r24
    2f2e:	99 f4       	brne	.+38     	; 0x2f56 <_Z20printSendStorageDumpv+0x1a8>
    2f30:	0f 5f       	subi	r16, 0xFF	; 255
    2f32:	1f 4f       	sbci	r17, 0xFF	; 255
    2f34:	80 e1       	ldi	r24, 0x10	; 16
    2f36:	00 30       	cpi	r16, 0x00	; 0
    2f38:	18 07       	cpc	r17, r24
    2f3a:	09 f0       	breq	.+2      	; 0x2f3e <_Z20printSendStorageDumpv+0x190>
    2f3c:	9e cf       	rjmp	.-196    	; 0x2e7a <_Z20printSendStorageDumpv+0xcc>
    2f3e:	8e e6       	ldi	r24, 0x6E	; 110
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	61 e0       	ldi	r22, 0x01	; 1
    2f44:	70 e0       	ldi	r23, 0x00	; 0
    2f46:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2f4a:	88 e6       	ldi	r24, 0x68	; 104
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	61 e0       	ldi	r22, 0x01	; 1
    2f50:	70 e0       	ldi	r23, 0x00	; 0
    2f52:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2f56:	65 96       	adiw	r28, 0x15	; 21
    2f58:	0f b6       	in	r0, 0x3f	; 63
    2f5a:	f8 94       	cli
    2f5c:	de bf       	out	0x3e, r29	; 62
    2f5e:	0f be       	out	0x3f, r0	; 63
    2f60:	cd bf       	out	0x3d, r28	; 61
    2f62:	cf 91       	pop	r28
    2f64:	df 91       	pop	r29
    2f66:	1f 91       	pop	r17
    2f68:	0f 91       	pop	r16
    2f6a:	ff 90       	pop	r15
    2f6c:	ef 90       	pop	r14
    2f6e:	df 90       	pop	r13
    2f70:	cf 90       	pop	r12
    2f72:	bf 90       	pop	r11
    2f74:	08 95       	ret

00002f76 <_ZL17sendHTTPtagButtonPKcPK19__FlashStringHelper>:
    2f76:	ef 92       	push	r14
    2f78:	ff 92       	push	r15
    2f7a:	0f 93       	push	r16
    2f7c:	1f 93       	push	r17
    2f7e:	8c 01       	movw	r16, r24
    2f80:	7b 01       	movw	r14, r22
    2f82:	8a e2       	ldi	r24, 0x2A	; 42
    2f84:	93 e0       	ldi	r25, 0x03	; 3
    2f86:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    2f8a:	c8 01       	movw	r24, r16
    2f8c:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    2f90:	8f e1       	ldi	r24, 0x1F	; 31
    2f92:	93 e0       	ldi	r25, 0x03	; 3
    2f94:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    2f98:	c7 01       	movw	r24, r14
    2f9a:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    2f9e:	8b e1       	ldi	r24, 0x1B	; 27
    2fa0:	93 e0       	ldi	r25, 0x03	; 3
    2fa2:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    2fa6:	1f 91       	pop	r17
    2fa8:	0f 91       	pop	r16
    2faa:	ff 90       	pop	r15
    2fac:	ef 90       	pop	r14
    2fae:	08 95       	ret

00002fb0 <_ZL30printSendConfigurationControlsv>:
    2fb0:	81 ea       	ldi	r24, 0xA1	; 161
    2fb2:	95 e0       	ldi	r25, 0x05	; 5
    2fb4:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    2fb8:	8c e7       	ldi	r24, 0x7C	; 124
    2fba:	95 e0       	ldi	r25, 0x05	; 5
    2fbc:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    2fc0:	84 e7       	ldi	r24, 0x74	; 116
    2fc2:	95 e0       	ldi	r25, 0x05	; 5
    2fc4:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    2fc8:	08 95       	ret

00002fca <_Z14sendFreeMemoryv>:
    2fca:	82 e0       	ldi	r24, 0x02	; 2
    2fcc:	91 e0       	ldi	r25, 0x01	; 1
    2fce:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    2fd2:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <freeMemory>
    2fd6:	0e 94 44 15 	call	0x2a88	; 0x2a88 <_ZL8sendDatai>
    2fda:	80 e1       	ldi	r24, 0x10	; 16
    2fdc:	91 e0       	ldi	r25, 0x01	; 1
    2fde:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    2fe2:	8a ec       	ldi	r24, 0xCA	; 202
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    2fea:	08 95       	ret

00002fec <_ZL19printSendPinsStatusv>:
    2fec:	af 92       	push	r10
    2fee:	bf 92       	push	r11
    2ff0:	cf 92       	push	r12
    2ff2:	df 92       	push	r13
    2ff4:	ef 92       	push	r14
    2ff6:	ff 92       	push	r15
    2ff8:	0f 93       	push	r16
    2ffa:	1f 93       	push	r17
    2ffc:	df 93       	push	r29
    2ffe:	cf 93       	push	r28
    3000:	cd b7       	in	r28, 0x3d	; 61
    3002:	de b7       	in	r29, 0x3e	; 62
    3004:	27 97       	sbiw	r28, 0x07	; 7
    3006:	0f b6       	in	r0, 0x3f	; 63
    3008:	f8 94       	cli
    300a:	de bf       	out	0x3e, r29	; 62
    300c:	0f be       	out	0x3f, r0	; 63
    300e:	cd bf       	out	0x3d, r28	; 61
    3010:	83 e6       	ldi	r24, 0x63	; 99
    3012:	95 e0       	ldi	r25, 0x05	; 5
    3014:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    3018:	8a ec       	ldi	r24, 0xCA	; 202
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    3020:	00 e0       	ldi	r16, 0x00	; 0
    3022:	10 e0       	ldi	r17, 0x00	; 0
    3024:	b2 ef       	ldi	r27, 0xF2	; 242
    3026:	cb 2e       	mov	r12, r27
    3028:	bf ef       	ldi	r27, 0xFF	; 255
    302a:	db 2e       	mov	r13, r27
    302c:	5e 01       	movw	r10, r28
    302e:	08 94       	sec
    3030:	a1 1c       	adc	r10, r1
    3032:	b1 1c       	adc	r11, r1
    3034:	80 e2       	ldi	r24, 0x20	; 32
    3036:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_ZL8sendDatac>
    303a:	0e 30       	cpi	r16, 0x0E	; 14
    303c:	11 05       	cpc	r17, r1
    303e:	3c f0       	brlt	.+14     	; 0x304e <_ZL19printSendPinsStatusv+0x62>
    3040:	81 e4       	ldi	r24, 0x41	; 65
    3042:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_ZL8sendDatac>
    3046:	c6 01       	movw	r24, r12
    3048:	0e 94 44 15 	call	0x2a88	; 0x2a88 <_ZL8sendDatai>
    304c:	0b c0       	rjmp	.+22     	; 0x3064 <_ZL19printSendPinsStatusv+0x78>
    304e:	c5 01       	movw	r24, r10
    3050:	b8 01       	movw	r22, r16
    3052:	42 e0       	ldi	r20, 0x02	; 2
    3054:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
    3058:	c5 01       	movw	r24, r10
    305a:	0e 94 7f 14 	call	0x28fe	; 0x28fe <_ZL8sendDataRK6String>
    305e:	c5 01       	movw	r24, r10
    3060:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    3064:	80 e6       	ldi	r24, 0x60	; 96
    3066:	95 e0       	ldi	r25, 0x05	; 5
    3068:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    306c:	08 30       	cpi	r16, 0x08	; 8
    306e:	11 05       	cpc	r17, r1
    3070:	f4 f4       	brge	.+60     	; 0x30ae <_ZL19printSendPinsStatusv+0xc2>
    3072:	8a b1       	in	r24, 0x0a	; 10
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	00 2e       	mov	r0, r16
    3078:	02 c0       	rjmp	.+4      	; 0x307e <_ZL19printSendPinsStatusv+0x92>
    307a:	95 95       	asr	r25
    307c:	87 95       	ror	r24
    307e:	0a 94       	dec	r0
    3080:	e2 f7       	brpl	.-8      	; 0x307a <_ZL19printSendPinsStatusv+0x8e>
    3082:	38 2f       	mov	r19, r24
    3084:	31 70       	andi	r19, 0x01	; 1
    3086:	8b b1       	in	r24, 0x0b	; 11
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	00 2e       	mov	r0, r16
    308c:	02 c0       	rjmp	.+4      	; 0x3092 <_ZL19printSendPinsStatusv+0xa6>
    308e:	95 95       	asr	r25
    3090:	87 95       	ror	r24
    3092:	0a 94       	dec	r0
    3094:	e2 f7       	brpl	.-8      	; 0x308e <_ZL19printSendPinsStatusv+0xa2>
    3096:	ee 24       	eor	r14, r14
    3098:	e3 94       	inc	r14
    309a:	e8 22       	and	r14, r24
    309c:	89 b1       	in	r24, 0x09	; 9
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	00 2e       	mov	r0, r16
    30a2:	02 c0       	rjmp	.+4      	; 0x30a8 <_ZL19printSendPinsStatusv+0xbc>
    30a4:	95 95       	asr	r25
    30a6:	87 95       	ror	r24
    30a8:	0a 94       	dec	r0
    30aa:	e2 f7       	brpl	.-8      	; 0x30a4 <_ZL19printSendPinsStatusv+0xb8>
    30ac:	3a c0       	rjmp	.+116    	; 0x3122 <_ZL19printSendPinsStatusv+0x136>
    30ae:	0e 30       	cpi	r16, 0x0E	; 14
    30b0:	11 05       	cpc	r17, r1
    30b2:	d4 f4       	brge	.+52     	; 0x30e8 <_ZL19printSendPinsStatusv+0xfc>
    30b4:	84 b1       	in	r24, 0x04	; 4
    30b6:	98 01       	movw	r18, r16
    30b8:	28 50       	subi	r18, 0x08	; 8
    30ba:	30 40       	sbci	r19, 0x00	; 0
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	02 2e       	mov	r0, r18
    30c0:	02 c0       	rjmp	.+4      	; 0x30c6 <_ZL19printSendPinsStatusv+0xda>
    30c2:	95 95       	asr	r25
    30c4:	87 95       	ror	r24
    30c6:	0a 94       	dec	r0
    30c8:	e2 f7       	brpl	.-8      	; 0x30c2 <_ZL19printSendPinsStatusv+0xd6>
    30ca:	38 2f       	mov	r19, r24
    30cc:	31 70       	andi	r19, 0x01	; 1
    30ce:	85 b1       	in	r24, 0x05	; 5
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	02 2e       	mov	r0, r18
    30d4:	02 c0       	rjmp	.+4      	; 0x30da <_ZL19printSendPinsStatusv+0xee>
    30d6:	95 95       	asr	r25
    30d8:	87 95       	ror	r24
    30da:	0a 94       	dec	r0
    30dc:	e2 f7       	brpl	.-8      	; 0x30d6 <_ZL19printSendPinsStatusv+0xea>
    30de:	ee 24       	eor	r14, r14
    30e0:	e3 94       	inc	r14
    30e2:	e8 22       	and	r14, r24
    30e4:	83 b1       	in	r24, 0x03	; 3
    30e6:	17 c0       	rjmp	.+46     	; 0x3116 <_ZL19printSendPinsStatusv+0x12a>
    30e8:	87 b1       	in	r24, 0x07	; 7
    30ea:	2c 2d       	mov	r18, r12
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	0c 2c       	mov	r0, r12
    30f0:	02 c0       	rjmp	.+4      	; 0x30f6 <_ZL19printSendPinsStatusv+0x10a>
    30f2:	95 95       	asr	r25
    30f4:	87 95       	ror	r24
    30f6:	0a 94       	dec	r0
    30f8:	e2 f7       	brpl	.-8      	; 0x30f2 <_ZL19printSendPinsStatusv+0x106>
    30fa:	38 2f       	mov	r19, r24
    30fc:	31 70       	andi	r19, 0x01	; 1
    30fe:	88 b1       	in	r24, 0x08	; 8
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	0c 2c       	mov	r0, r12
    3104:	02 c0       	rjmp	.+4      	; 0x310a <_ZL19printSendPinsStatusv+0x11e>
    3106:	95 95       	asr	r25
    3108:	87 95       	ror	r24
    310a:	0a 94       	dec	r0
    310c:	e2 f7       	brpl	.-8      	; 0x3106 <_ZL19printSendPinsStatusv+0x11a>
    310e:	ee 24       	eor	r14, r14
    3110:	e3 94       	inc	r14
    3112:	e8 22       	and	r14, r24
    3114:	86 b1       	in	r24, 0x06	; 6
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	02 c0       	rjmp	.+4      	; 0x311e <_ZL19printSendPinsStatusv+0x132>
    311a:	95 95       	asr	r25
    311c:	87 95       	ror	r24
    311e:	2a 95       	dec	r18
    3120:	e2 f7       	brpl	.-8      	; 0x311a <_ZL19printSendPinsStatusv+0x12e>
    3122:	ff 24       	eor	r15, r15
    3124:	f3 94       	inc	r15
    3126:	f8 22       	and	r15, r24
    3128:	31 30       	cpi	r19, 0x01	; 1
    312a:	59 f4       	brne	.+22     	; 0x3142 <_ZL19printSendPinsStatusv+0x156>
    312c:	8d e5       	ldi	r24, 0x5D	; 93
    312e:	95 e0       	ldi	r25, 0x05	; 5
    3130:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    3134:	8e 2d       	mov	r24, r14
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	0e 94 44 15 	call	0x2a88	; 0x2a88 <_ZL8sendDatai>
    313c:	83 e5       	ldi	r24, 0x53	; 83
    313e:	95 e0       	ldi	r25, 0x05	; 5
    3140:	0a c0       	rjmp	.+20     	; 0x3156 <_ZL19printSendPinsStatusv+0x16a>
    3142:	8a e4       	ldi	r24, 0x4A	; 74
    3144:	95 e0       	ldi	r25, 0x05	; 5
    3146:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    314a:	8f 2d       	mov	r24, r15
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	0e 94 44 15 	call	0x2a88	; 0x2a88 <_ZL8sendDatai>
    3152:	86 e4       	ldi	r24, 0x46	; 70
    3154:	95 e0       	ldi	r25, 0x05	; 5
    3156:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    315a:	08 30       	cpi	r16, 0x08	; 8
    315c:	11 05       	cpc	r17, r1
    315e:	91 f1       	breq	.+100    	; 0x31c4 <_ZL19printSendPinsStatusv+0x1d8>
    3160:	09 30       	cpi	r16, 0x09	; 9
    3162:	11 05       	cpc	r17, r1
    3164:	8c f4       	brge	.+34     	; 0x3188 <_ZL19printSendPinsStatusv+0x19c>
    3166:	03 30       	cpi	r16, 0x03	; 3
    3168:	11 05       	cpc	r17, r1
    316a:	19 f1       	breq	.+70     	; 0x31b2 <_ZL19printSendPinsStatusv+0x1c6>
    316c:	04 30       	cpi	r16, 0x04	; 4
    316e:	11 05       	cpc	r17, r1
    3170:	24 f4       	brge	.+8      	; 0x317a <_ZL19printSendPinsStatusv+0x18e>
    3172:	02 30       	cpi	r16, 0x02	; 2
    3174:	11 05       	cpc	r17, r1
    3176:	b0 f5       	brcc	.+108    	; 0x31e4 <_ZL19printSendPinsStatusv+0x1f8>
    3178:	19 c0       	rjmp	.+50     	; 0x31ac <_ZL19printSendPinsStatusv+0x1c0>
    317a:	04 30       	cpi	r16, 0x04	; 4
    317c:	11 05       	cpc	r17, r1
    317e:	e1 f0       	breq	.+56     	; 0x31b8 <_ZL19printSendPinsStatusv+0x1cc>
    3180:	05 30       	cpi	r16, 0x05	; 5
    3182:	11 05       	cpc	r17, r1
    3184:	79 f5       	brne	.+94     	; 0x31e4 <_ZL19printSendPinsStatusv+0x1f8>
    3186:	1b c0       	rjmp	.+54     	; 0x31be <_ZL19printSendPinsStatusv+0x1d2>
    3188:	0d 30       	cpi	r16, 0x0D	; 13
    318a:	11 05       	cpc	r17, r1
    318c:	21 f1       	breq	.+72     	; 0x31d6 <_ZL19printSendPinsStatusv+0x1ea>
    318e:	0e 30       	cpi	r16, 0x0E	; 14
    3190:	11 05       	cpc	r17, r1
    3192:	3c f4       	brge	.+14     	; 0x31a2 <_ZL19printSendPinsStatusv+0x1b6>
    3194:	0b 30       	cpi	r16, 0x0B	; 11
    3196:	11 05       	cpc	r17, r1
    3198:	c1 f0       	breq	.+48     	; 0x31ca <_ZL19printSendPinsStatusv+0x1de>
    319a:	0c 30       	cpi	r16, 0x0C	; 12
    319c:	11 05       	cpc	r17, r1
    319e:	11 f5       	brne	.+68     	; 0x31e4 <_ZL19printSendPinsStatusv+0x1f8>
    31a0:	17 c0       	rjmp	.+46     	; 0x31d0 <_ZL19printSendPinsStatusv+0x1e4>
    31a2:	c8 01       	movw	r24, r16
    31a4:	42 97       	sbiw	r24, 0x12	; 18
    31a6:	02 97       	sbiw	r24, 0x02	; 2
    31a8:	e8 f4       	brcc	.+58     	; 0x31e4 <_ZL19printSendPinsStatusv+0x1f8>
    31aa:	18 c0       	rjmp	.+48     	; 0x31dc <_ZL19printSendPinsStatusv+0x1f0>
    31ac:	80 e0       	ldi	r24, 0x00	; 0
    31ae:	95 e0       	ldi	r25, 0x05	; 5
    31b0:	17 c0       	rjmp	.+46     	; 0x31e0 <_ZL19printSendPinsStatusv+0x1f4>
    31b2:	86 ee       	ldi	r24, 0xE6	; 230
    31b4:	94 e0       	ldi	r25, 0x04	; 4
    31b6:	14 c0       	rjmp	.+40     	; 0x31e0 <_ZL19printSendPinsStatusv+0x1f4>
    31b8:	8e ec       	ldi	r24, 0xCE	; 206
    31ba:	94 e0       	ldi	r25, 0x04	; 4
    31bc:	11 c0       	rjmp	.+34     	; 0x31e0 <_ZL19printSendPinsStatusv+0x1f4>
    31be:	88 ea       	ldi	r24, 0xA8	; 168
    31c0:	94 e0       	ldi	r25, 0x04	; 4
    31c2:	0e c0       	rjmp	.+28     	; 0x31e0 <_ZL19printSendPinsStatusv+0x1f4>
    31c4:	85 e9       	ldi	r24, 0x95	; 149
    31c6:	94 e0       	ldi	r25, 0x04	; 4
    31c8:	0b c0       	rjmp	.+22     	; 0x31e0 <_ZL19printSendPinsStatusv+0x1f4>
    31ca:	85 e7       	ldi	r24, 0x75	; 117
    31cc:	94 e0       	ldi	r25, 0x04	; 4
    31ce:	08 c0       	rjmp	.+16     	; 0x31e0 <_ZL19printSendPinsStatusv+0x1f4>
    31d0:	88 e6       	ldi	r24, 0x68	; 104
    31d2:	94 e0       	ldi	r25, 0x04	; 4
    31d4:	05 c0       	rjmp	.+10     	; 0x31e0 <_ZL19printSendPinsStatusv+0x1f4>
    31d6:	81 e6       	ldi	r24, 0x61	; 97
    31d8:	94 e0       	ldi	r25, 0x04	; 4
    31da:	02 c0       	rjmp	.+4      	; 0x31e0 <_ZL19printSendPinsStatusv+0x1f4>
    31dc:	85 e2       	ldi	r24, 0x25	; 37
    31de:	94 e0       	ldi	r25, 0x04	; 4
    31e0:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    31e4:	8a ec       	ldi	r24, 0xCA	; 202
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    31ec:	0f 5f       	subi	r16, 0xFF	; 255
    31ee:	1f 4f       	sbci	r17, 0xFF	; 255
    31f0:	08 94       	sec
    31f2:	c1 1c       	adc	r12, r1
    31f4:	d1 1c       	adc	r13, r1
    31f6:	04 31       	cpi	r16, 0x14	; 20
    31f8:	11 05       	cpc	r17, r1
    31fa:	09 f0       	breq	.+2      	; 0x31fe <_ZL19printSendPinsStatusv+0x212>
    31fc:	1b cf       	rjmp	.-458    	; 0x3034 <_ZL19printSendPinsStatusv+0x48>
    31fe:	27 96       	adiw	r28, 0x07	; 7
    3200:	0f b6       	in	r0, 0x3f	; 63
    3202:	f8 94       	cli
    3204:	de bf       	out	0x3e, r29	; 62
    3206:	0f be       	out	0x3f, r0	; 63
    3208:	cd bf       	out	0x3d, r28	; 61
    320a:	cf 91       	pop	r28
    320c:	df 91       	pop	r29
    320e:	1f 91       	pop	r17
    3210:	0f 91       	pop	r16
    3212:	ff 90       	pop	r15
    3214:	ef 90       	pop	r14
    3216:	df 90       	pop	r13
    3218:	cf 90       	pop	r12
    321a:	bf 90       	pop	r11
    321c:	af 90       	pop	r10
    321e:	08 95       	ret

00003220 <_ZL14sendTimeStatusv>:
    3220:	80 ee       	ldi	r24, 0xE0	; 224
    3222:	93 e0       	ldi	r25, 0x03	; 3
    3224:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    3228:	84 e7       	ldi	r24, 0x74	; 116
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	60 e0       	ldi	r22, 0x00	; 0
    322e:	70 e0       	ldi	r23, 0x00	; 0
    3230:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    3234:	80 91 03 01 	lds	r24, 0x0103
    3238:	88 23       	and	r24, r24
    323a:	19 f0       	breq	.+6      	; 0x3242 <_ZL14sendTimeStatusv+0x22>
    323c:	8c ed       	ldi	r24, 0xDC	; 220
    323e:	93 e0       	ldi	r25, 0x03	; 3
    3240:	02 c0       	rjmp	.+4      	; 0x3246 <_ZL14sendTimeStatusv+0x26>
    3242:	86 ed       	ldi	r24, 0xD6	; 214
    3244:	93 e0       	ldi	r25, 0x03	; 3
    3246:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    324a:	84 e7       	ldi	r24, 0x74	; 116
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	61 e0       	ldi	r22, 0x01	; 1
    3250:	70 e0       	ldi	r23, 0x00	; 0
    3252:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    3256:	89 ec       	ldi	r24, 0xC9	; 201
    3258:	93 e0       	ldi	r25, 0x03	; 3
    325a:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    325e:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <_Z3nowv>
    3262:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <_ZL8sendDatam>
    3266:	8d eb       	ldi	r24, 0xBD	; 189
    3268:	93 e0       	ldi	r25, 0x03	; 3
    326a:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    326e:	81 e0       	ldi	r24, 0x01	; 1
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	0e 94 44 15 	call	0x2a88	; 0x2a88 <_ZL8sendDatai>
    3276:	8b ea       	ldi	r24, 0xAB	; 171
    3278:	93 e0       	ldi	r25, 0x03	; 3
    327a:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    327e:	89 e0       	ldi	r24, 0x09	; 9
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	0e 94 44 15 	call	0x2a88	; 0x2a88 <_ZL8sendDatai>
    3286:	84 ea       	ldi	r24, 0xA4	; 164
    3288:	93 e0       	ldi	r25, 0x03	; 3
    328a:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    328e:	08 95       	ret

00003290 <_ZL21sendTemperatureStatusv>:
    3290:	af 92       	push	r10
    3292:	bf 92       	push	r11
    3294:	cf 92       	push	r12
    3296:	df 92       	push	r13
    3298:	ef 92       	push	r14
    329a:	ff 92       	push	r15
    329c:	0f 93       	push	r16
    329e:	1f 93       	push	r17
    32a0:	cf 93       	push	r28
    32a2:	df 93       	push	r29
  /////////////////////////////////////////////////////////////////////
  //                        GROWBOX COMMANDS                         //
  /////////////////////////////////////////////////////////////////////

  static void getStatistics(float &_workingTemperature, float &_statisticsTemperature, int &_statisticsTemperatureCount){
    _workingTemperature = workingTemperature;
    32a4:	00 91 fc 01 	lds	r16, 0x01FC
    32a8:	f0 90 fd 01 	lds	r15, 0x01FD
    32ac:	e0 90 fe 01 	lds	r14, 0x01FE
    32b0:	d0 90 ff 01 	lds	r13, 0x01FF

    if (statisticsTemperatureCount != 0){
    32b4:	c0 91 04 02 	lds	r28, 0x0204
    32b8:	d0 91 05 02 	lds	r29, 0x0205
    32bc:	20 97       	sbiw	r28, 0x00	; 0
    32be:	29 f4       	brne	.+10     	; 0x32ca <_ZL21sendTemperatureStatusv+0x3a>
    32c0:	a0 2e       	mov	r10, r16
    32c2:	bf 2c       	mov	r11, r15
    32c4:	ce 2c       	mov	r12, r14
    32c6:	1d 2d       	mov	r17, r13
    32c8:	16 c0       	rjmp	.+44     	; 0x32f6 <_ZL21sendTemperatureStatusv+0x66>
      _statisticsTemperature = statisticsTemperatureSumm/statisticsTemperatureCount;
    32ca:	be 01       	movw	r22, r28
    32cc:	88 27       	eor	r24, r24
    32ce:	77 fd       	sbrc	r23, 7
    32d0:	80 95       	com	r24
    32d2:	98 2f       	mov	r25, r24
    32d4:	0e 94 c5 3a 	call	0x758a	; 0x758a <__floatsisf>
    32d8:	9b 01       	movw	r18, r22
    32da:	ac 01       	movw	r20, r24
    32dc:	60 91 00 02 	lds	r22, 0x0200
    32e0:	70 91 01 02 	lds	r23, 0x0201
    32e4:	80 91 02 02 	lds	r24, 0x0202
    32e8:	90 91 03 02 	lds	r25, 0x0203
    32ec:	0e 94 2a 3a 	call	0x7454	; 0x7454 <__divsf3>
    32f0:	5b 01       	movw	r10, r22
    32f2:	c8 2e       	mov	r12, r24
    32f4:	19 2f       	mov	r17, r25
    32f6:	8f e6       	ldi	r24, 0x6F	; 111
    32f8:	92 e0       	ldi	r25, 0x02	; 2
    32fa:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    32fe:	8a e1       	ldi	r24, 0x1A	; 26
    3300:	94 e0       	ldi	r25, 0x04	; 4
    3302:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    3306:	20 2f       	mov	r18, r16
    3308:	3f 2d       	mov	r19, r15
    330a:	4e 2d       	mov	r20, r14
    330c:	5d 2d       	mov	r21, r13
    330e:	b9 01       	movw	r22, r18
    3310:	ca 01       	movw	r24, r20
    3312:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <_ZL8sendDataf>
    3316:	82 e1       	ldi	r24, 0x12	; 18
    3318:	94 e0       	ldi	r25, 0x04	; 4
    331a:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    331e:	4c 2d       	mov	r20, r12
    3320:	51 2f       	mov	r21, r17
    3322:	b5 01       	movw	r22, r10
    3324:	ca 01       	movw	r24, r20
    3326:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <_ZL8sendDataf>
    332a:	89 e0       	ldi	r24, 0x09	; 9
    332c:	94 e0       	ldi	r25, 0x04	; 4
    332e:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    3332:	ce 01       	movw	r24, r28
    3334:	0e 94 44 15 	call	0x2a88	; 0x2a88 <_ZL8sendDatai>
    3338:	81 e0       	ldi	r24, 0x01	; 1
    333a:	94 e0       	ldi	r25, 0x04	; 4
    333c:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    3340:	60 e0       	ldi	r22, 0x00	; 0
    3342:	70 e0       	ldi	r23, 0x00	; 0
    3344:	80 ed       	ldi	r24, 0xD0	; 208
    3346:	91 e4       	ldi	r25, 0x41	; 65
    3348:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <_ZL8sendDataf>
    334c:	88 ee       	ldi	r24, 0xE8	; 232
    334e:	93 e0       	ldi	r25, 0x03	; 3
    3350:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    3354:	60 e0       	ldi	r22, 0x00	; 0
    3356:	70 e0       	ldi	r23, 0x00	; 0
    3358:	80 e4       	ldi	r24, 0x40	; 64
    335a:	90 e4       	ldi	r25, 0x40	; 64
    335c:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <_ZL8sendDataf>
    3360:	88 ef       	ldi	r24, 0xF8	; 248
    3362:	93 e0       	ldi	r25, 0x03	; 3
    3364:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    3368:	60 e0       	ldi	r22, 0x00	; 0
    336a:	70 e0       	ldi	r23, 0x00	; 0
    336c:	80 eb       	ldi	r24, 0xB0	; 176
    336e:	91 e4       	ldi	r25, 0x41	; 65
    3370:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <_ZL8sendDataf>
    3374:	88 ee       	ldi	r24, 0xE8	; 232
    3376:	93 e0       	ldi	r25, 0x03	; 3
    3378:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    337c:	60 e0       	ldi	r22, 0x00	; 0
    337e:	70 e0       	ldi	r23, 0x00	; 0
    3380:	80 ec       	ldi	r24, 0xC0	; 192
    3382:	90 e4       	ldi	r25, 0x40	; 64
    3384:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <_ZL8sendDataf>
    3388:	8c ee       	ldi	r24, 0xEC	; 236
    338a:	93 e0       	ldi	r25, 0x03	; 3
    338c:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    3390:	60 e0       	ldi	r22, 0x00	; 0
    3392:	70 e0       	ldi	r23, 0x00	; 0
    3394:	8c e0       	ldi	r24, 0x0C	; 12
    3396:	92 e4       	ldi	r25, 0x42	; 66
    3398:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <_ZL8sendDataf>
    339c:	8a ec       	ldi	r24, 0xCA	; 202
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    33a4:	df 91       	pop	r29
    33a6:	cf 91       	pop	r28
    33a8:	1f 91       	pop	r17
    33aa:	0f 91       	pop	r16
    33ac:	ff 90       	pop	r15
    33ae:	ef 90       	pop	r14
    33b0:	df 90       	pop	r13
    33b2:	cf 90       	pop	r12
    33b4:	bf 90       	pop	r11
    33b6:	af 90       	pop	r10
    33b8:	08 95       	ret

000033ba <_ZL16printSendFullLoghhh>:
    33ba:	2f 92       	push	r2
    33bc:	3f 92       	push	r3
    33be:	4f 92       	push	r4
    33c0:	5f 92       	push	r5
    33c2:	6f 92       	push	r6
    33c4:	7f 92       	push	r7
    33c6:	8f 92       	push	r8
    33c8:	9f 92       	push	r9
    33ca:	af 92       	push	r10
    33cc:	bf 92       	push	r11
    33ce:	cf 92       	push	r12
    33d0:	df 92       	push	r13
    33d2:	ef 92       	push	r14
    33d4:	ff 92       	push	r15
    33d6:	0f 93       	push	r16
    33d8:	1f 93       	push	r17
    33da:	df 93       	push	r29
    33dc:	cf 93       	push	r28
    33de:	cd b7       	in	r28, 0x3d	; 61
    33e0:	de b7       	in	r29, 0x3e	; 62
    33e2:	af 97       	sbiw	r28, 0x2f	; 47
    33e4:	0f b6       	in	r0, 0x3f	; 63
    33e6:	f8 94       	cli
    33e8:	de bf       	out	0x3e, r29	; 62
    33ea:	0f be       	out	0x3f, r0	; 63
    33ec:	cd bf       	out	0x3d, r28	; 61
    33ee:	8b a7       	std	Y+43, r24	; 0x2b
    33f0:	6c a7       	std	Y+44, r22	; 0x2c
    33f2:	4d a7       	std	Y+45, r20	; 0x2d
    33f4:	88 e6       	ldi	r24, 0x68	; 104
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	60 e0       	ldi	r22, 0x00	; 0
    33fa:	70 e0       	ldi	r23, 0x00	; 0
    33fc:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    3400:	21 e0       	ldi	r18, 0x01	; 1
    3402:	2a a7       	std	Y+42, r18	; 0x2a
    3404:	cc 24       	eor	r12, r12
    3406:	dd 24       	eor	r13, r13
    3408:	aa 24       	eor	r10, r10
    340a:	bb 24       	eor	r11, r11
    340c:	ce 01       	movw	r24, r28
    340e:	0b 96       	adiw	r24, 0x0b	; 11
    3410:	9f a7       	std	Y+47, r25	; 0x2f
    3412:	8e a7       	std	Y+46, r24	; 0x2e
    3414:	1e 01       	movw	r2, r28
    3416:	08 94       	sec
    3418:	21 1c       	adc	r2, r1
    341a:	31 1c       	adc	r3, r1
    341c:	95 e1       	ldi	r25, 0x15	; 21
    341e:	49 2e       	mov	r4, r25
    3420:	51 2c       	mov	r5, r1
    3422:	4c 0e       	add	r4, r28
    3424:	5d 1e       	adc	r5, r29
    3426:	8c e1       	ldi	r24, 0x1C	; 28
    3428:	68 2e       	mov	r6, r24
    342a:	71 2c       	mov	r7, r1
    342c:	6c 0e       	add	r6, r28
    342e:	7d 1e       	adc	r7, r29
    3430:	03 e2       	ldi	r16, 0x23	; 35
    3432:	80 2e       	mov	r8, r16
    3434:	91 2c       	mov	r9, r1
    3436:	8c 0e       	add	r8, r28
    3438:	9d 1e       	adc	r9, r29
    343a:	6b c0       	rjmp	.+214    	; 0x3512 <_ZL16printSendFullLoghhh+0x158>
  static boolean isLogOverflow(){
    return bootRecord.boolPreferencies.isLogOverflow;
  }

  static word getLogRecordsCount(){
    if (bootRecord.boolPreferencies.isLogOverflow){
    343c:	44 23       	and	r20, r20
    343e:	19 f0       	breq	.+6      	; 0x3446 <_ZL16printSendFullLoghhh+0x8c>
    3440:	8c e2       	ldi	r24, 0x2C	; 44
    3442:	93 e0       	ldi	r25, 0x03	; 3
    3444:	0a c0       	rjmp	.+20     	; 0x345a <_ZL16printSendFullLoghhh+0xa0>
      return LOG_CAPACITY; 
    } 
    else {
      return (bootRecord.nextLogRecordAddress - sizeof(BootRecord))/sizeof(LogRecord);
    3446:	80 91 cb 01 	lds	r24, 0x01CB
    344a:	90 91 cc 01 	lds	r25, 0x01CC
    344e:	80 97       	sbiw	r24, 0x20	; 32
    3450:	65 e0       	ldi	r22, 0x05	; 5
    3452:	70 e0       	ldi	r23, 0x00	; 0
    3454:	0e 94 fb 3b 	call	0x77f6	; 0x77f6 <__udivmodhi4>
    3458:	cb 01       	movw	r24, r22
    }
  }
  static boolean getLogRecordByIndex(word index, LogRecord &logRecord){
    if (index >= getLogRecordsCount()){
    345a:	c8 16       	cp	r12, r24
    345c:	d9 06       	cpc	r13, r25
    345e:	40 f5       	brcc	.+80     	; 0x34b0 <_ZL16printSendFullLoghhh+0xf6>
      return false;
    }

    word logRecordOffset = 0;
    if (bootRecord.boolPreferencies.isLogOverflow){
    3460:	44 23       	and	r20, r20
    3462:	19 f4       	brne	.+6      	; 0x346a <_ZL16printSendFullLoghhh+0xb0>
    3464:	80 e0       	ldi	r24, 0x00	; 0
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	05 c0       	rjmp	.+10     	; 0x3474 <_ZL16printSendFullLoghhh+0xba>
      logRecordOffset = bootRecord.nextLogRecordAddress - sizeof(BootRecord);
    346a:	80 91 cb 01 	lds	r24, 0x01CB
    346e:	90 91 cc 01 	lds	r25, 0x01CC
    3472:	80 97       	sbiw	r24, 0x20	; 32
    }
    //Serial.print("logRecordOffset"); Serial.println(logRecordOffset);
    logRecordOffset += index * sizeof(LogRecord);
    3474:	8a 0d       	add	r24, r10
    3476:	9b 1d       	adc	r25, r11

    //Serial.print("logRecordOffset"); Serial.println(logRecordOffset);
    if (logRecordOffset >= LOG_RECORD_OVERFLOW_OFFSET){
    3478:	ef e0       	ldi	r30, 0x0F	; 15
    347a:	8c 3d       	cpi	r24, 0xDC	; 220
    347c:	9e 07       	cpc	r25, r30
    347e:	10 f0       	brcs	.+4      	; 0x3484 <_ZL16printSendFullLoghhh+0xca>
      logRecordOffset -= LOG_RECORD_OVERFLOW_OFFSET;
    3480:	8c 5d       	subi	r24, 0xDC	; 220
    3482:	9f 40       	sbci	r25, 0x0F	; 15
    }
    //Serial.print("logRecordOffset"); Serial.println(logRecordOffset);
    word address = sizeof(BootRecord) + logRecordOffset; 
    3484:	10 e2       	ldi	r17, 0x20	; 32
    3486:	e1 2e       	mov	r14, r17
    3488:	f1 2c       	mov	r15, r1
    348a:	e8 0e       	add	r14, r24
    348c:	f9 1e       	adc	r15, r25
    348e:	8e 01       	movw	r16, r28
    3490:	0a 5f       	subi	r16, 0xFA	; 250
    3492:	1f 4f       	sbci	r17, 0xFF	; 255
      byte value =  read(address + c);
    3494:	c7 01       	movw	r24, r14
    3496:	0e 94 83 06 	call	0xd06	; 0xd06 <_ZN10GB_Storage4readEj>
      ((byte*)data)[c] = value;
    349a:	f8 01       	movw	r30, r16
    349c:	81 93       	st	Z+, r24
    349e:	8f 01       	movw	r16, r30
    34a0:	08 94       	sec
    34a2:	e1 1c       	adc	r14, r1
    34a4:	f1 1c       	adc	r15, r1
      write(address + c, value);
    }
  }

  static void read(word address, void *data, const byte sizeofData) {
    for (word c = 0; c < sizeofData; c++){
    34a6:	8e a5       	ldd	r24, Y+46	; 0x2e
    34a8:	9f a5       	ldd	r25, Y+47	; 0x2f
    34aa:	e8 17       	cp	r30, r24
    34ac:	f9 07       	cpc	r31, r25
    34ae:	91 f7       	brne	.-28     	; 0x3494 <_ZL16printSendFullLoghhh+0xda>
  }  

  static LogRecord getLogRecordByIndex(int index){
    LogRecord logRecord;
    GB_StorageHelper::getLogRecordByIndex(index, logRecord);
    return logRecord;
    34b0:	de 01       	movw	r26, r28
    34b2:	50 96       	adiw	r26, 0x10	; 16
    34b4:	fe 01       	movw	r30, r28
    34b6:	36 96       	adiw	r30, 0x06	; 6
    34b8:	85 e0       	ldi	r24, 0x05	; 5
    34ba:	01 90       	ld	r0, Z+
    34bc:	0d 92       	st	X+, r0
    34be:	81 50       	subi	r24, 0x01	; 1
    34c0:	e1 f7       	brne	.-8      	; 0x34ba <_ZL16printSendFullLoghhh+0x100>
    34c2:	de 01       	movw	r26, r28
    34c4:	1b 96       	adiw	r26, 0x0b	; 11
    34c6:	fe 01       	movw	r30, r28
    34c8:	70 96       	adiw	r30, 0x10	; 16
    34ca:	85 e0       	ldi	r24, 0x05	; 5
    34cc:	01 90       	ld	r0, Z+
    34ce:	0d 92       	st	X+, r0
    34d0:	81 50       	subi	r24, 0x01	; 1
    34d2:	e1 f7       	brne	.-8      	; 0x34cc <_ZL16printSendFullLoghhh+0x112>
    34d4:	d1 01       	movw	r26, r2
    34d6:	fe 01       	movw	r30, r28
    34d8:	3b 96       	adiw	r30, 0x0b	; 11
    34da:	85 e0       	ldi	r24, 0x05	; 5
    34dc:	01 90       	ld	r0, Z+
    34de:	0d 92       	st	X+, r0
    34e0:	81 50       	subi	r24, 0x01	; 1
    34e2:	e1 f7       	brne	.-8      	; 0x34dc <_ZL16printSendFullLoghhh+0x122>
    34e4:	9b a5       	ldd	r25, Y+43	; 0x2b
    34e6:	99 23       	and	r25, r25
    34e8:	d1 f5       	brne	.+116    	; 0x355e <_ZL16printSendFullLoghhh+0x1a4>
    34ea:	8d 81       	ldd	r24, Y+5	; 0x05
    34ec:	80 7c       	andi	r24, 0xC0	; 192
    34ee:	b9 f5       	brne	.+110    	; 0x355e <_ZL16printSendFullLoghhh+0x1a4>
    34f0:	09 c0       	rjmp	.+18     	; 0x3504 <_ZL16printSendFullLoghhh+0x14a>
    34f2:	8d 81       	ldd	r24, Y+5	; 0x05
    34f4:	80 7c       	andi	r24, 0xC0	; 192
    34f6:	80 34       	cpi	r24, 0x40	; 64
    34f8:	a9 f5       	brne	.+106    	; 0x3564 <_ZL16printSendFullLoghhh+0x1aa>
    34fa:	04 c0       	rjmp	.+8      	; 0x3504 <_ZL16printSendFullLoghhh+0x14a>
    34fc:	8d 81       	ldd	r24, Y+5	; 0x05
    34fe:	80 7c       	andi	r24, 0xC0	; 192
    3500:	80 3c       	cpi	r24, 0xC0	; 192
    3502:	99 f5       	brne	.+102    	; 0x356a <_ZL16printSendFullLoghhh+0x1b0>
    3504:	08 94       	sec
    3506:	c1 1c       	adc	r12, r1
    3508:	d1 1c       	adc	r13, r1
    350a:	e5 e0       	ldi	r30, 0x05	; 5
    350c:	f0 e0       	ldi	r31, 0x00	; 0
    350e:	ae 0e       	add	r10, r30
    3510:	bf 1e       	adc	r11, r31
  static boolean isLogOverflow(){
    return bootRecord.boolPreferencies.isLogOverflow;
  }

  static word getLogRecordsCount(){
    if (bootRecord.boolPreferencies.isLogOverflow){
    3512:	80 91 cd 01 	lds	r24, 0x01CD
    3516:	48 2f       	mov	r20, r24
    3518:	41 70       	andi	r20, 0x01	; 1
    351a:	80 ff       	sbrs	r24, 0
    351c:	03 c0       	rjmp	.+6      	; 0x3524 <_ZL16printSendFullLoghhh+0x16a>
    351e:	8c e2       	ldi	r24, 0x2C	; 44
    3520:	93 e0       	ldi	r25, 0x03	; 3
    3522:	0a c0       	rjmp	.+20     	; 0x3538 <_ZL16printSendFullLoghhh+0x17e>
      return LOG_CAPACITY; 
    } 
    else {
      return (bootRecord.nextLogRecordAddress - sizeof(BootRecord))/sizeof(LogRecord);
    3524:	80 91 cb 01 	lds	r24, 0x01CB
    3528:	90 91 cc 01 	lds	r25, 0x01CC
    352c:	80 97       	sbiw	r24, 0x20	; 32
    352e:	65 e0       	ldi	r22, 0x05	; 5
    3530:	70 e0       	ldi	r23, 0x00	; 0
    3532:	0e 94 fb 3b 	call	0x77f6	; 0x77f6 <__udivmodhi4>
    3536:	cb 01       	movw	r24, r22
    3538:	c8 16       	cp	r12, r24
    353a:	d9 06       	cpc	r13, r25
    353c:	0c f4       	brge	.+2      	; 0x3540 <_ZL16printSendFullLoghhh+0x186>
    353e:	7e cf       	rjmp	.-260    	; 0x343c <_ZL16printSendFullLoghhh+0x82>
    3540:	88 e6       	ldi	r24, 0x68	; 104
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	61 e0       	ldi	r22, 0x01	; 1
    3546:	70 e0       	ldi	r23, 0x00	; 0
    3548:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    354c:	fa a5       	ldd	r31, Y+42	; 0x2a
    354e:	ff 23       	and	r31, r31
    3550:	09 f4       	brne	.+2      	; 0x3554 <_ZL16printSendFullLoghhh+0x19a>
    3552:	78 c0       	rjmp	.+240    	; 0x3644 <_ZL16printSendFullLoghhh+0x28a>
    3554:	81 ec       	ldi	r24, 0xC1	; 193
    3556:	95 e0       	ldi	r25, 0x05	; 5
    3558:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    355c:	73 c0       	rjmp	.+230    	; 0x3644 <_ZL16printSendFullLoghhh+0x28a>
    355e:	2c a5       	ldd	r18, Y+44	; 0x2c
    3560:	22 23       	and	r18, r18
    3562:	39 f2       	breq	.-114    	; 0x34f2 <_ZL16printSendFullLoghhh+0x138>
    3564:	8d a5       	ldd	r24, Y+45	; 0x2d
    3566:	88 23       	and	r24, r24
    3568:	49 f2       	breq	.-110    	; 0x34fc <_ZL16printSendFullLoghhh+0x142>
    356a:	8e e6       	ldi	r24, 0x6E	; 110
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	60 e0       	ldi	r22, 0x00	; 0
    3570:	70 e0       	ldi	r23, 0x00	; 0
    3572:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    3576:	81 e7       	ldi	r24, 0x71	; 113
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	60 e0       	ldi	r22, 0x00	; 0
    357c:	70 e0       	ldi	r23, 0x00	; 0
    357e:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    3582:	c6 01       	movw	r24, r12
    3584:	01 96       	adiw	r24, 0x01	; 1
    3586:	0e 94 44 15 	call	0x2a88	; 0x2a88 <_ZL8sendDatai>
    358a:	81 e7       	ldi	r24, 0x71	; 113
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	61 e0       	ldi	r22, 0x01	; 1
    3590:	70 e0       	ldi	r23, 0x00	; 0
    3592:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    3596:	81 e7       	ldi	r24, 0x71	; 113
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	60 e0       	ldi	r22, 0x00	; 0
    359c:	70 e0       	ldi	r23, 0x00	; 0
    359e:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    35a2:	49 81       	ldd	r20, Y+1	; 0x01
    35a4:	5a 81       	ldd	r21, Y+2	; 0x02
    35a6:	6b 81       	ldd	r22, Y+3	; 0x03
    35a8:	7c 81       	ldd	r23, Y+4	; 0x04
    35aa:	c2 01       	movw	r24, r4
    35ac:	0e 94 14 0b 	call	0x1628	; 0x1628 <_ZN13GB_PrintDirty13getTimeStringEm>
    35b0:	c2 01       	movw	r24, r4
    35b2:	0e 94 7f 14 	call	0x28fe	; 0x28fe <_ZL8sendDataRK6String>
    35b6:	c2 01       	movw	r24, r4
    35b8:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    35bc:	81 e7       	ldi	r24, 0x71	; 113
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	61 e0       	ldi	r22, 0x01	; 1
    35c2:	70 e0       	ldi	r23, 0x00	; 0
    35c4:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    35c8:	81 e7       	ldi	r24, 0x71	; 113
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	60 e0       	ldi	r22, 0x00	; 0
    35ce:	70 e0       	ldi	r23, 0x00	; 0
    35d0:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    35d4:	c3 01       	movw	r24, r6
    35d6:	6d 81       	ldd	r22, Y+5	; 0x05
    35d8:	41 e0       	ldi	r20, 0x01	; 1
    35da:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZN13GB_PrintDirty6getHEXEhh>
    35de:	c3 01       	movw	r24, r6
    35e0:	0e 94 7f 14 	call	0x28fe	; 0x28fe <_ZL8sendDataRK6String>
    35e4:	c3 01       	movw	r24, r6
    35e6:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    35ea:	81 e7       	ldi	r24, 0x71	; 113
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	61 e0       	ldi	r22, 0x01	; 1
    35f0:	70 e0       	ldi	r23, 0x00	; 0
    35f2:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    35f6:	81 e7       	ldi	r24, 0x71	; 113
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	60 e0       	ldi	r22, 0x00	; 0
    35fc:	70 e0       	ldi	r23, 0x00	; 0
    35fe:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    3602:	c1 01       	movw	r24, r2
    3604:	0e 94 96 05 	call	0xb2c	; 0xb2c <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord>
    3608:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    360c:	c4 01       	movw	r24, r8
    360e:	b1 01       	movw	r22, r2
    3610:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN9GB_Logger18getLogRecordSuffixERK9LogRecord>
    3614:	c4 01       	movw	r24, r8
    3616:	0e 94 7f 14 	call	0x28fe	; 0x28fe <_ZL8sendDataRK6String>
    361a:	c4 01       	movw	r24, r8
    361c:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    3620:	81 e7       	ldi	r24, 0x71	; 113
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	61 e0       	ldi	r22, 0x01	; 1
    3626:	70 e0       	ldi	r23, 0x00	; 0
    3628:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    362c:	8e e6       	ldi	r24, 0x6E	; 110
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	61 e0       	ldi	r22, 0x01	; 1
    3632:	70 e0       	ldi	r23, 0x00	; 0
    3634:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    3638:	80 91 4c 01 	lds	r24, 0x014C
    363c:	88 23       	and	r24, r24
    363e:	11 f4       	brne	.+4      	; 0x3644 <_ZL16printSendFullLoghhh+0x28a>
    3640:	1a a6       	std	Y+42, r1	; 0x2a
    3642:	60 cf       	rjmp	.-320    	; 0x3504 <_ZL16printSendFullLoghhh+0x14a>
    3644:	af 96       	adiw	r28, 0x2f	; 47
    3646:	0f b6       	in	r0, 0x3f	; 63
    3648:	f8 94       	cli
    364a:	de bf       	out	0x3e, r29	; 62
    364c:	0f be       	out	0x3f, r0	; 63
    364e:	cd bf       	out	0x3d, r28	; 61
    3650:	cf 91       	pop	r28
    3652:	df 91       	pop	r29
    3654:	1f 91       	pop	r17
    3656:	0f 91       	pop	r16
    3658:	ff 90       	pop	r15
    365a:	ef 90       	pop	r14
    365c:	df 90       	pop	r13
    365e:	cf 90       	pop	r12
    3660:	bf 90       	pop	r11
    3662:	af 90       	pop	r10
    3664:	9f 90       	pop	r9
    3666:	8f 90       	pop	r8
    3668:	7f 90       	pop	r7
    366a:	6f 90       	pop	r6
    366c:	5f 90       	pop	r5
    366e:	4f 90       	pop	r4
    3670:	3f 90       	pop	r3
    3672:	2f 90       	pop	r2
    3674:	08 95       	ret

00003676 <_ZL14sendBootStatusv>:
    3676:	8e e8       	ldi	r24, 0x8E	; 142
    3678:	93 e0       	ldi	r25, 0x03	; 3
    367a:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    367e:	60 91 c7 01 	lds	r22, 0x01C7
    3682:	70 91 c8 01 	lds	r23, 0x01C8
    3686:	80 91 c9 01 	lds	r24, 0x01C9
    368a:	90 91 ca 01 	lds	r25, 0x01CA
    368e:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <_ZL8sendDatam>
    3692:	8c e7       	ldi	r24, 0x7C	; 124
    3694:	93 e0       	ldi	r25, 0x03	; 3
    3696:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    369a:	60 91 c3 01 	lds	r22, 0x01C3
    369e:	70 91 c4 01 	lds	r23, 0x01C4
    36a2:	80 91 c5 01 	lds	r24, 0x01C5
    36a6:	90 91 c6 01 	lds	r25, 0x01C6
    36aa:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <_ZL8sendDatam>
    36ae:	82 e7       	ldi	r24, 0x72	; 114
    36b0:	93 e0       	ldi	r25, 0x03	; 3
    36b2:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    36b6:	80 91 cd 01 	lds	r24, 0x01CD
    36ba:	86 95       	lsr	r24
    36bc:	83 70       	andi	r24, 0x03	; 3
    36be:	19 f0       	breq	.+6      	; 0x36c6 <_ZL14sendBootStatusv+0x50>
    36c0:	84 e4       	ldi	r24, 0x44	; 68
    36c2:	91 e0       	ldi	r25, 0x01	; 1
    36c4:	02 c0       	rjmp	.+4      	; 0x36ca <_ZL14sendBootStatusv+0x54>
    36c6:	8d e4       	ldi	r24, 0x4D	; 77
    36c8:	91 e0       	ldi	r25, 0x01	; 1
    36ca:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    36ce:	87 e6       	ldi	r24, 0x67	; 103
    36d0:	93 e0       	ldi	r25, 0x03	; 3
    36d2:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
  static boolean isLogOverflow(){
    return bootRecord.boolPreferencies.isLogOverflow;
  }

  static word getLogRecordsCount(){
    if (bootRecord.boolPreferencies.isLogOverflow){
    36d6:	80 91 cd 01 	lds	r24, 0x01CD
    36da:	80 ff       	sbrs	r24, 0
    36dc:	03 c0       	rjmp	.+6      	; 0x36e4 <_ZL14sendBootStatusv+0x6e>
    36de:	8c e2       	ldi	r24, 0x2C	; 44
    36e0:	93 e0       	ldi	r25, 0x03	; 3
    36e2:	0a c0       	rjmp	.+20     	; 0x36f8 <_ZL14sendBootStatusv+0x82>
      return LOG_CAPACITY; 
    } 
    else {
      return (bootRecord.nextLogRecordAddress - sizeof(BootRecord))/sizeof(LogRecord);
    36e4:	80 91 cb 01 	lds	r24, 0x01CB
    36e8:	90 91 cc 01 	lds	r25, 0x01CC
    36ec:	80 97       	sbiw	r24, 0x20	; 32
    36ee:	65 e0       	ldi	r22, 0x05	; 5
    36f0:	70 e0       	ldi	r23, 0x00	; 0
    36f2:	0e 94 fb 3b 	call	0x77f6	; 0x77f6 <__udivmodhi4>
    36f6:	cb 01       	movw	r24, r22
    36f8:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <_ZL8sendDataj>
    36fc:	8f e2       	ldi	r24, 0x2F	; 47
    36fe:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_ZL8sendDatac>
    3702:	8c e2       	ldi	r24, 0x2C	; 44
    3704:	93 e0       	ldi	r25, 0x03	; 3
    3706:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <_ZL8sendDataj>
    370a:	80 91 cd 01 	lds	r24, 0x01CD
    370e:	80 ff       	sbrs	r24, 0
    3710:	04 c0       	rjmp	.+8      	; 0x371a <_ZL14sendBootStatusv+0xa4>
    3712:	8c e5       	ldi	r24, 0x5C	; 92
    3714:	93 e0       	ldi	r25, 0x03	; 3
    3716:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    371a:	8a ec       	ldi	r24, 0xCA	; 202
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    3722:	08 95       	ret

00003724 <_ZL14executeCommandR6String>:
    3724:	cf 93       	push	r28
    3726:	df 93       	push	r29
    3728:	ec 01       	movw	r28, r24
    372a:	80 91 4b 01 	lds	r24, 0x014B
    372e:	88 23       	and	r24, r24
    3730:	09 f4       	brne	.+2      	; 0x3734 <_ZL14executeCommandR6String+0x10>
    3732:	42 c0       	rjmp	.+132    	; 0x37b8 <_ZL14executeCommandR6String+0x94>
    3734:	8c eb       	ldi	r24, 0xBC	; 188
    3736:	92 e0       	ldi	r25, 0x02	; 2
    3738:	60 e0       	ldi	r22, 0x00	; 0
    373a:	70 e0       	ldi	r23, 0x00	; 0
    373c:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    3740:	8a e0       	ldi	r24, 0x0A	; 10
    3742:	93 e0       	ldi	r25, 0x03	; 3
    3744:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZL8sendDataPK19__FlashStringHelper>
    3748:	81 ec       	ldi	r24, 0xC1	; 193
    374a:	92 e0       	ldi	r25, 0x02	; 2
    374c:	63 e0       	ldi	r22, 0x03	; 3
    374e:	73 e0       	ldi	r23, 0x03	; 3
    3750:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZL17sendHTTPtagButtonPKcPK19__FlashStringHelper>
    3754:	83 ec       	ldi	r24, 0xC3	; 195
    3756:	92 e0       	ldi	r25, 0x02	; 2
    3758:	69 ef       	ldi	r22, 0xF9	; 249
    375a:	72 e0       	ldi	r23, 0x02	; 2
    375c:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZL17sendHTTPtagButtonPKcPK19__FlashStringHelper>
    3760:	88 ec       	ldi	r24, 0xC8	; 200
    3762:	92 e0       	ldi	r25, 0x02	; 2
    3764:	6b ee       	ldi	r22, 0xEB	; 235
    3766:	72 e0       	ldi	r23, 0x02	; 2
    3768:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZL17sendHTTPtagButtonPKcPK19__FlashStringHelper>
    376c:	8e ec       	ldi	r24, 0xCE	; 206
    376e:	92 e0       	ldi	r25, 0x02	; 2
    3770:	6e ed       	ldi	r22, 0xDE	; 222
    3772:	72 e0       	ldi	r23, 0x02	; 2
    3774:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZL17sendHTTPtagButtonPKcPK19__FlashStringHelper>
    3778:	87 ed       	ldi	r24, 0xD7	; 215
    377a:	92 e0       	ldi	r25, 0x02	; 2
    377c:	62 e0       	ldi	r22, 0x02	; 2
    377e:	70 e0       	ldi	r23, 0x00	; 0
    3780:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    3784:	8a ed       	ldi	r24, 0xDA	; 218
    3786:	92 e0       	ldi	r25, 0x02	; 2
    3788:	60 e0       	ldi	r22, 0x00	; 0
    378a:	70 e0       	ldi	r23, 0x00	; 0
    378c:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    3790:	0e 94 e5 17 	call	0x2fca	; 0x2fca <_Z14sendFreeMemoryv>
    3794:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZL14sendBootStatusv>
    3798:	0e 94 10 19 	call	0x3220	; 0x3220 <_ZL14sendTimeStatusv>
    379c:	0e 94 48 19 	call	0x3290	; 0x3290 <_ZL21sendTemperatureStatusv>
    37a0:	87 ed       	ldi	r24, 0xD7	; 215
    37a2:	92 e0       	ldi	r25, 0x02	; 2
    37a4:	62 e0       	ldi	r22, 0x02	; 2
    37a6:	70 e0       	ldi	r23, 0x00	; 0
    37a8:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    37ac:	8a ed       	ldi	r24, 0xDA	; 218
    37ae:	92 e0       	ldi	r25, 0x02	; 2
    37b0:	61 e0       	ldi	r22, 0x01	; 1
    37b2:	70 e0       	ldi	r23, 0x00	; 0
    37b4:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    37b8:	8a ed       	ldi	r24, 0xDA	; 218
    37ba:	92 e0       	ldi	r25, 0x02	; 2
    37bc:	60 e0       	ldi	r22, 0x00	; 0
    37be:	70 e0       	ldi	r23, 0x00	; 0
    37c0:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
  }
  return true;
}

static boolean flashStringEquals(const char PROGMEM* pstr, const String &str){ 
  return flashStringEquals((const __FlashStringHelper*) pstr, str);
    37c4:	81 ec       	ldi	r24, 0xC1	; 193
    37c6:	92 e0       	ldi	r25, 0x02	; 2
    37c8:	be 01       	movw	r22, r28
    37ca:	0e 94 88 07 	call	0xf10	; 0xf10 <_ZL17flashStringEqualsPK19__FlashStringHelperRK6String>
    37ce:	88 23       	and	r24, r24
    37d0:	19 f0       	breq	.+6      	; 0x37d8 <_ZL14executeCommandR6String+0xb4>
    37d2:	0e 94 f6 17 	call	0x2fec	; 0x2fec <_ZL19printSendPinsStatusv>
    37d6:	20 c0       	rjmp	.+64     	; 0x3818 <_ZL14executeCommandR6String+0xf4>
    37d8:	88 ec       	ldi	r24, 0xC8	; 200
    37da:	92 e0       	ldi	r25, 0x02	; 2
    37dc:	be 01       	movw	r22, r28
    37de:	0e 94 88 07 	call	0xf10	; 0xf10 <_ZL17flashStringEqualsPK19__FlashStringHelperRK6String>
    37e2:	88 23       	and	r24, r24
    37e4:	19 f0       	breq	.+6      	; 0x37ec <_ZL14executeCommandR6String+0xc8>
    37e6:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <_ZL30printSendConfigurationControlsv>
    37ea:	16 c0       	rjmp	.+44     	; 0x3818 <_ZL14executeCommandR6String+0xf4>
    37ec:	83 ec       	ldi	r24, 0xC3	; 195
    37ee:	92 e0       	ldi	r25, 0x02	; 2
    37f0:	be 01       	movw	r22, r28
    37f2:	0e 94 88 07 	call	0xf10	; 0xf10 <_ZL17flashStringEqualsPK19__FlashStringHelperRK6String>
    37f6:	88 23       	and	r24, r24
    37f8:	31 f0       	breq	.+12     	; 0x3806 <_ZL14executeCommandR6String+0xe2>
    37fa:	81 e0       	ldi	r24, 0x01	; 1
    37fc:	61 e0       	ldi	r22, 0x01	; 1
    37fe:	41 e0       	ldi	r20, 0x01	; 1
    3800:	0e 94 dd 19 	call	0x33ba	; 0x33ba <_ZL16printSendFullLoghhh>
    3804:	09 c0       	rjmp	.+18     	; 0x3818 <_ZL14executeCommandR6String+0xf4>
    3806:	8e ec       	ldi	r24, 0xCE	; 206
    3808:	92 e0       	ldi	r25, 0x02	; 2
    380a:	be 01       	movw	r22, r28
    380c:	0e 94 88 07 	call	0xf10	; 0xf10 <_ZL17flashStringEqualsPK19__FlashStringHelperRK6String>
    3810:	88 23       	and	r24, r24
    3812:	11 f0       	breq	.+4      	; 0x3818 <_ZL14executeCommandR6String+0xf4>
    3814:	0e 94 d7 16 	call	0x2dae	; 0x2dae <_Z20printSendStorageDumpv>
    3818:	80 91 4c 01 	lds	r24, 0x014C
    381c:	88 23       	and	r24, r24
    381e:	61 f4       	brne	.+24     	; 0x3838 <_ZL14executeCommandR6String+0x114>
    3820:	8a ed       	ldi	r24, 0xDA	; 218
    3822:	92 e0       	ldi	r25, 0x02	; 2
    3824:	61 e0       	ldi	r22, 0x01	; 1
    3826:	70 e0       	ldi	r23, 0x00	; 0
    3828:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    382c:	8c eb       	ldi	r24, 0xBC	; 188
    382e:	92 e0       	ldi	r25, 0x02	; 2
    3830:	61 e0       	ldi	r22, 0x01	; 1
    3832:	70 e0       	ldi	r23, 0x00	; 0
    3834:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZL11sendHTTPtagPKc8HTTP_TAG>
    3838:	df 91       	pop	r29
    383a:	cf 91       	pop	r28
    383c:	08 95       	ret

0000383e <_Z11serialEventv>:
    383e:	0f 93       	push	r16
    3840:	1f 93       	push	r17
    3842:	df 93       	push	r29
    3844:	cf 93       	push	r28
    3846:	cd b7       	in	r28, 0x3d	; 61
    3848:	de b7       	in	r29, 0x3e	; 62
    384a:	27 97       	sbiw	r28, 0x07	; 7
    384c:	0f b6       	in	r0, 0x3f	; 63
    384e:	f8 94       	cli
    3850:	de bf       	out	0x3e, r29	; 62
    3852:	0f be       	out	0x3f, r0	; 63
    3854:	cd bf       	out	0x3d, r28	; 61
    3856:	80 91 4a 01 	lds	r24, 0x014A
    385a:	88 23       	and	r24, r24
    385c:	09 f4       	brne	.+2      	; 0x3860 <_Z11serialEventv+0x22>
    385e:	53 c0       	rjmp	.+166    	; 0x3906 <_Z11serialEventv+0xc8>
    3860:	10 92 4b 01 	sts	0x014B, r1
    3864:	10 92 4c 01 	sts	0x014C, r1
    3868:	10 92 04 01 	sts	0x0104, r1
    386c:	8e 01       	movw	r16, r28
    386e:	0f 5f       	subi	r16, 0xFF	; 255
    3870:	1f 4f       	sbci	r17, 0xFF	; 255
    3872:	c8 01       	movw	r24, r16
    3874:	60 e0       	ldi	r22, 0x00	; 0
    3876:	71 e0       	ldi	r23, 0x01	; 1
    3878:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <_ZN6StringC1EPKc>
    387c:	c8 01       	movw	r24, r16
    387e:	6b e4       	ldi	r22, 0x4B	; 75
    3880:	71 e0       	ldi	r23, 0x01	; 1
    3882:	44 e0       	ldi	r20, 0x04	; 4
    3884:	51 e0       	ldi	r21, 0x01	; 1
    3886:	0e 94 61 10 	call	0x20c2	; 0x20c2 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_>
    388a:	88 23       	and	r24, r24
    388c:	c9 f1       	breq	.+114    	; 0x3900 <_Z11serialEventv+0xc2>
    388e:	80 91 4b 01 	lds	r24, 0x014B
    3892:	88 23       	and	r24, r24
    3894:	11 f0       	breq	.+4      	; 0x389a <_Z11serialEventv+0x5c>
    } 
    return false;
  } 

  static void startHTTPResponse(const byte &wifiPortDescriptor){  
    s_wifiIsHeaderSended = false;
    3896:	10 92 be 01 	sts	0x01BE, r1
    389a:	ce 01       	movw	r24, r28
    389c:	01 96       	adiw	r24, 0x01	; 1
    389e:	0e 94 92 1b 	call	0x3724	; 0x3724 <_ZL14executeCommandR6String>
    38a2:	80 91 4b 01 	lds	r24, 0x014B
    38a6:	88 23       	and	r24, r24
    38a8:	81 f0       	breq	.+32     	; 0x38ca <_Z11serialEventv+0x8c>
  }

  static void finishHTTPResponse(const byte &wifiPortDescriptor){  
    if (s_wifiIsHeaderSended){
    38aa:	80 91 be 01 	lds	r24, 0x01BE
    38ae:	88 23       	and	r24, r24
    38b0:	19 f0       	breq	.+6      	; 0x38b8 <_Z11serialEventv+0x7a>
      stopHttpFrame();
    38b2:	0e 94 58 14 	call	0x28b0	; 0x28b0 <_ZN15GB_SerialHelper13stopHttpFrameEv>
    38b6:	04 c0       	rjmp	.+8      	; 0x38c0 <_Z11serialEventv+0x82>
    } 
    else {
      sendHttpNotFoundHeader(wifiPortDescriptor);
    38b8:	80 91 04 01 	lds	r24, 0x0104
    38bc:	0e 94 16 0a 	call	0x142c	; 0x142c <_ZN15GB_SerialHelper22sendHttpNotFoundHeaderEh>
    }
    closeConnection(wifiPortDescriptor);
    38c0:	80 91 04 01 	lds	r24, 0x0104
    38c4:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN15GB_SerialHelper15closeConnectionEh>
    38c8:	02 c0       	rjmp	.+4      	; 0x38ce <_Z11serialEventv+0x90>
    38ca:	0e 94 99 08 	call	0x1132	; 0x1132 <_ZN15GB_SerialHelper13printDirtyEndEv>
    38ce:	80 91 ad 01 	lds	r24, 0x01AD
    38d2:	88 23       	and	r24, r24
    38d4:	91 f0       	breq	.+36     	; 0x38fa <_Z11serialEventv+0xbc>
    38d6:	80 91 4c 01 	lds	r24, 0x014C
    38da:	88 23       	and	r24, r24
    38dc:	71 f0       	breq	.+28     	; 0x38fa <_Z11serialEventv+0xbc>
    38de:	87 eb       	ldi	r24, 0xB7	; 183
    38e0:	93 e0       	ldi	r25, 0x03	; 3
    38e2:	65 ef       	ldi	r22, 0xF5	; 245
    38e4:	70 e0       	ldi	r23, 0x00	; 0
    38e6:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <_ZN5Print5printEPK19__FlashStringHelper>
    38ea:	87 eb       	ldi	r24, 0xB7	; 183
    38ec:	93 e0       	ldi	r25, 0x03	; 3
    38ee:	6b e7       	ldi	r22, 0x7B	; 123
    38f0:	72 e0       	ldi	r23, 0x02	; 2
    38f2:	0e 94 24 34 	call	0x6848	; 0x6848 <_ZN5Print7printlnEPK19__FlashStringHelper>
    38f6:	0e 94 99 08 	call	0x1132	; 0x1132 <_ZN15GB_SerialHelper13printDirtyEndEv>
    38fa:	ce 01       	movw	r24, r28
    38fc:	01 96       	adiw	r24, 0x01	; 1
    38fe:	01 c0       	rjmp	.+2      	; 0x3902 <_Z11serialEventv+0xc4>
    3900:	c8 01       	movw	r24, r16
    3902:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    3906:	27 96       	adiw	r28, 0x07	; 7
    3908:	0f b6       	in	r0, 0x3f	; 63
    390a:	f8 94       	cli
    390c:	de bf       	out	0x3e, r29	; 62
    390e:	0f be       	out	0x3f, r0	; 63
    3910:	cd bf       	out	0x3d, r28	; 61
    3912:	cf 91       	pop	r28
    3914:	df 91       	pop	r29
    3916:	1f 91       	pop	r17
    3918:	0f 91       	pop	r16
    391a:	08 95       	ret

0000391c <_Z15initLoggerModelv>:
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    391c:	10 92 53 01 	sts	0x0153, r1
    this->sequenceSize = sequenceSize;
    3920:	42 e0       	ldi	r20, 0x02	; 2
    3922:	40 93 54 01 	sts	0x0154, r20
    3926:	86 e4       	ldi	r24, 0x46	; 70
    3928:	98 e0       	ldi	r25, 0x08	; 8
    392a:	90 93 56 01 	sts	0x0156, r25
    392e:	80 93 55 01 	sts	0x0155, r24
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    3932:	31 e0       	ldi	r19, 0x01	; 1
    3934:	30 93 5a 01 	sts	0x015A, r19
    this->sequenceSize = sequenceSize;
    3938:	23 e0       	ldi	r18, 0x03	; 3
    393a:	20 93 5b 01 	sts	0x015B, r18
    393e:	8e e2       	ldi	r24, 0x2E	; 46
    3940:	98 e0       	ldi	r25, 0x08	; 8
    3942:	90 93 5d 01 	sts	0x015D, r25
    3946:	80 93 5c 01 	sts	0x015C, r24
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    394a:	30 93 61 01 	sts	0x0161, r19
    this->sequenceSize = sequenceSize;
    394e:	40 93 62 01 	sts	0x0162, r20
    3952:	8f e0       	ldi	r24, 0x0F	; 15
    3954:	98 e0       	ldi	r25, 0x08	; 8
    3956:	90 93 64 01 	sts	0x0164, r25
    395a:	80 93 63 01 	sts	0x0163, r24
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    395e:	40 93 68 01 	sts	0x0168, r20
    this->sequenceSize = sequenceSize;
    3962:	20 93 69 01 	sts	0x0169, r18
    3966:	89 ee       	ldi	r24, 0xE9	; 233
    3968:	97 e0       	ldi	r25, 0x07	; 7
    396a:	90 93 6b 01 	sts	0x016B, r25
    396e:	80 93 6a 01 	sts	0x016A, r24
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    3972:	10 92 6f 01 	sts	0x016F, r1
    this->sequenceSize = sequenceSize;
    3976:	20 93 70 01 	sts	0x0170, r18
    397a:	8f eb       	ldi	r24, 0xBF	; 191
    397c:	97 e0       	ldi	r25, 0x07	; 7
    397e:	90 93 72 01 	sts	0x0172, r25
    3982:	80 93 71 01 	sts	0x0171, r24
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    3986:	57 e0       	ldi	r21, 0x07	; 7
    3988:	50 93 76 01 	sts	0x0176, r21
    this->sequenceSize = sequenceSize;
    398c:	20 93 77 01 	sts	0x0177, r18
    3990:	89 e9       	ldi	r24, 0x99	; 153
    3992:	97 e0       	ldi	r25, 0x07	; 7
    3994:	90 93 79 01 	sts	0x0179, r25
    3998:	80 93 78 01 	sts	0x0178, r24
  nextEvent(lastAddedEvent), index(0xFF) {
    lastAddedEvent = this;
  }

  void init(byte index, const __FlashStringHelper* description) {
    this->index = index;
    399c:	30 93 7d 01 	sts	0x017D, r19
    39a0:	8b e8       	ldi	r24, 0x8B	; 139
    39a2:	97 e0       	ldi	r25, 0x07	; 7
    39a4:	90 93 7f 01 	sts	0x017F, r25
    39a8:	80 93 7e 01 	sts	0x017E, r24
    39ac:	40 93 82 01 	sts	0x0182, r20
    39b0:	81 e8       	ldi	r24, 0x81	; 129
    39b2:	97 e0       	ldi	r25, 0x07	; 7
    39b4:	90 93 84 01 	sts	0x0184, r25
    39b8:	80 93 83 01 	sts	0x0183, r24
    39bc:	20 93 87 01 	sts	0x0187, r18
    39c0:	84 e6       	ldi	r24, 0x64	; 100
    39c2:	97 e0       	ldi	r25, 0x07	; 7
    39c4:	90 93 89 01 	sts	0x0189, r25
    39c8:	80 93 88 01 	sts	0x0188, r24
    39cc:	84 e0       	ldi	r24, 0x04	; 4
    39ce:	80 93 8c 01 	sts	0x018C, r24
    39d2:	85 e4       	ldi	r24, 0x45	; 69
    39d4:	97 e0       	ldi	r25, 0x07	; 7
    39d6:	90 93 8e 01 	sts	0x018E, r25
    39da:	80 93 8d 01 	sts	0x018D, r24
    39de:	85 e0       	ldi	r24, 0x05	; 5
    39e0:	80 93 91 01 	sts	0x0191, r24
    39e4:	84 e3       	ldi	r24, 0x34	; 52
    39e6:	97 e0       	ldi	r25, 0x07	; 7
    39e8:	90 93 93 01 	sts	0x0193, r25
    39ec:	80 93 92 01 	sts	0x0192, r24
    39f0:	86 e0       	ldi	r24, 0x06	; 6
    39f2:	80 93 96 01 	sts	0x0196, r24
    39f6:	84 e2       	ldi	r24, 0x24	; 36
    39f8:	97 e0       	ldi	r25, 0x07	; 7
    39fa:	90 93 98 01 	sts	0x0198, r25
    39fe:	80 93 97 01 	sts	0x0197, r24
    3a02:	50 93 9b 01 	sts	0x019B, r21
    3a06:	85 e1       	ldi	r24, 0x15	; 21
    3a08:	97 e0       	ldi	r25, 0x07	; 7
    3a0a:	90 93 9d 01 	sts	0x019D, r25
    3a0e:	80 93 9c 01 	sts	0x019C, r24
    3a12:	88 e0       	ldi	r24, 0x08	; 8
    3a14:	80 93 a0 01 	sts	0x01A0, r24
    3a18:	8d ef       	ldi	r24, 0xFD	; 253
    3a1a:	96 e0       	ldi	r25, 0x06	; 6
    3a1c:	90 93 a2 01 	sts	0x01A2, r25
    3a20:	80 93 a1 01 	sts	0x01A1, r24
    3a24:	89 e0       	ldi	r24, 0x09	; 9
    3a26:	80 93 a5 01 	sts	0x01A5, r24
    3a2a:	85 ee       	ldi	r24, 0xE5	; 229
    3a2c:	96 e0       	ldi	r25, 0x06	; 6
    3a2e:	90 93 a7 01 	sts	0x01A7, r25
    3a32:	80 93 a6 01 	sts	0x01A6, r24
    3a36:	8a e0       	ldi	r24, 0x0A	; 10
    3a38:	80 93 aa 01 	sts	0x01AA, r24
    3a3c:	8e ec       	ldi	r24, 0xCE	; 206
    3a3e:	96 e0       	ldi	r25, 0x06	; 6
    3a40:	90 93 ac 01 	sts	0x01AC, r25
    3a44:	80 93 ab 01 	sts	0x01AB, r24
    3a48:	08 95       	ret

00003a4a <_GLOBAL__I__ZN5Error13lastAddedItemE>:
  byte sequenceSize;
  const __FlashStringHelper* description; // FLASH
  boolean isStored; // should be stored in Log only once, but notification should repeated

    Error() : 
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    3a4a:	80 91 4d 01 	lds	r24, 0x014D
    3a4e:	90 91 4e 01 	lds	r25, 0x014E
    3a52:	90 93 52 01 	sts	0x0152, r25
    3a56:	80 93 51 01 	sts	0x0151, r24
    3a5a:	2f ef       	ldi	r18, 0xFF	; 255
    3a5c:	20 93 53 01 	sts	0x0153, r18
    3a60:	20 93 54 01 	sts	0x0154, r18
    3a64:	10 92 57 01 	sts	0x0157, r1
    lastAddedItem = this;
    3a68:	81 e5       	ldi	r24, 0x51	; 81
    3a6a:	91 e0       	ldi	r25, 0x01	; 1
    3a6c:	90 93 59 01 	sts	0x0159, r25
    3a70:	80 93 58 01 	sts	0x0158, r24
    3a74:	20 93 5a 01 	sts	0x015A, r18
    3a78:	20 93 5b 01 	sts	0x015B, r18
    3a7c:	10 92 5e 01 	sts	0x015E, r1
    3a80:	88 e5       	ldi	r24, 0x58	; 88
    3a82:	91 e0       	ldi	r25, 0x01	; 1
    3a84:	90 93 60 01 	sts	0x0160, r25
    3a88:	80 93 5f 01 	sts	0x015F, r24
    3a8c:	20 93 61 01 	sts	0x0161, r18
    3a90:	20 93 62 01 	sts	0x0162, r18
    3a94:	10 92 65 01 	sts	0x0165, r1
    3a98:	8f e5       	ldi	r24, 0x5F	; 95
    3a9a:	91 e0       	ldi	r25, 0x01	; 1
    3a9c:	90 93 67 01 	sts	0x0167, r25
    3aa0:	80 93 66 01 	sts	0x0166, r24
    3aa4:	20 93 68 01 	sts	0x0168, r18
    3aa8:	20 93 69 01 	sts	0x0169, r18
    3aac:	10 92 6c 01 	sts	0x016C, r1
    3ab0:	86 e6       	ldi	r24, 0x66	; 102
    3ab2:	91 e0       	ldi	r25, 0x01	; 1
    3ab4:	90 93 6e 01 	sts	0x016E, r25
    3ab8:	80 93 6d 01 	sts	0x016D, r24
    3abc:	20 93 6f 01 	sts	0x016F, r18
    3ac0:	20 93 70 01 	sts	0x0170, r18
    3ac4:	10 92 73 01 	sts	0x0173, r1
    3ac8:	8d e6       	ldi	r24, 0x6D	; 109
    3aca:	91 e0       	ldi	r25, 0x01	; 1
    3acc:	90 93 75 01 	sts	0x0175, r25
    3ad0:	80 93 74 01 	sts	0x0174, r24
    3ad4:	20 93 76 01 	sts	0x0176, r18
    3ad8:	20 93 77 01 	sts	0x0177, r18
    3adc:	10 92 7a 01 	sts	0x017A, r1
    3ae0:	84 e7       	ldi	r24, 0x74	; 116
    3ae2:	91 e0       	ldi	r25, 0x01	; 1
    3ae4:	90 93 4e 01 	sts	0x014E, r25
    3ae8:	80 93 4d 01 	sts	0x014D, r24
public:
  byte index;
  const __FlashStringHelper* description; // FLASH

  Event() : 
  nextEvent(lastAddedEvent), index(0xFF) {
    3aec:	80 91 4f 01 	lds	r24, 0x014F
    3af0:	90 91 50 01 	lds	r25, 0x0150
    3af4:	90 93 7c 01 	sts	0x017C, r25
    3af8:	80 93 7b 01 	sts	0x017B, r24
    3afc:	20 93 7d 01 	sts	0x017D, r18
    lastAddedEvent = this;
    3b00:	8b e7       	ldi	r24, 0x7B	; 123
    3b02:	91 e0       	ldi	r25, 0x01	; 1
    3b04:	90 93 81 01 	sts	0x0181, r25
    3b08:	80 93 80 01 	sts	0x0180, r24
    3b0c:	20 93 82 01 	sts	0x0182, r18
    3b10:	80 e8       	ldi	r24, 0x80	; 128
    3b12:	91 e0       	ldi	r25, 0x01	; 1
    3b14:	90 93 86 01 	sts	0x0186, r25
    3b18:	80 93 85 01 	sts	0x0185, r24
    3b1c:	20 93 87 01 	sts	0x0187, r18
    3b20:	85 e8       	ldi	r24, 0x85	; 133
    3b22:	91 e0       	ldi	r25, 0x01	; 1
    3b24:	90 93 8b 01 	sts	0x018B, r25
    3b28:	80 93 8a 01 	sts	0x018A, r24
    3b2c:	20 93 8c 01 	sts	0x018C, r18
    3b30:	8a e8       	ldi	r24, 0x8A	; 138
    3b32:	91 e0       	ldi	r25, 0x01	; 1
    3b34:	90 93 90 01 	sts	0x0190, r25
    3b38:	80 93 8f 01 	sts	0x018F, r24
    3b3c:	20 93 91 01 	sts	0x0191, r18
    3b40:	8f e8       	ldi	r24, 0x8F	; 143
    3b42:	91 e0       	ldi	r25, 0x01	; 1
    3b44:	90 93 95 01 	sts	0x0195, r25
    3b48:	80 93 94 01 	sts	0x0194, r24
    3b4c:	20 93 96 01 	sts	0x0196, r18
    3b50:	84 e9       	ldi	r24, 0x94	; 148
    3b52:	91 e0       	ldi	r25, 0x01	; 1
    3b54:	90 93 9a 01 	sts	0x019A, r25
    3b58:	80 93 99 01 	sts	0x0199, r24
    3b5c:	20 93 9b 01 	sts	0x019B, r18
    3b60:	89 e9       	ldi	r24, 0x99	; 153
    3b62:	91 e0       	ldi	r25, 0x01	; 1
    3b64:	90 93 9f 01 	sts	0x019F, r25
    3b68:	80 93 9e 01 	sts	0x019E, r24
    3b6c:	20 93 a0 01 	sts	0x01A0, r18
    3b70:	8e e9       	ldi	r24, 0x9E	; 158
    3b72:	91 e0       	ldi	r25, 0x01	; 1
    3b74:	90 93 a4 01 	sts	0x01A4, r25
    3b78:	80 93 a3 01 	sts	0x01A3, r24
    3b7c:	20 93 a5 01 	sts	0x01A5, r18
    3b80:	83 ea       	ldi	r24, 0xA3	; 163
    3b82:	91 e0       	ldi	r25, 0x01	; 1
    3b84:	90 93 a9 01 	sts	0x01A9, r25
    3b88:	80 93 a8 01 	sts	0x01A8, r24
    3b8c:	20 93 aa 01 	sts	0x01AA, r18
    3b90:	88 ea       	ldi	r24, 0xA8	; 168
    3b92:	91 e0       	ldi	r25, 0x01	; 1
    3b94:	90 93 50 01 	sts	0x0150, r25
    3b98:	80 93 4f 01 	sts	0x014F, r24
    3b9c:	08 95       	ret

00003b9e <_Z41__static_initialization_and_destruction_0ii>:
    3b9e:	81 30       	cpi	r24, 0x01	; 1
    3ba0:	91 05       	cpc	r25, r1
    3ba2:	81 f4       	brne	.+32     	; 0x3bc4 <_Z41__static_initialization_and_destruction_0ii+0x26>
    3ba4:	6f 5f       	subi	r22, 0xFF	; 255
    3ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ba8:	d1 f4       	brne	.+52     	; 0x3bde <_Z41__static_initialization_and_destruction_0ii+0x40>
    3baa:	80 eb       	ldi	r24, 0xB0	; 176
    3bac:	91 e0       	ldi	r25, 0x01	; 1
    3bae:	61 e0       	ldi	r22, 0x01	; 1
    3bb0:	71 e0       	ldi	r23, 0x01	; 1
    3bb2:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <_ZN6StringC1EPKc>
    3bb6:	87 eb       	ldi	r24, 0xB7	; 183
    3bb8:	91 e0       	ldi	r25, 0x01	; 1
    3bba:	61 e0       	ldi	r22, 0x01	; 1
    3bbc:	71 e0       	ldi	r23, 0x01	; 1
    3bbe:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <_ZN6StringC1EPKc>
    3bc2:	08 95       	ret
    3bc4:	89 2b       	or	r24, r25
    3bc6:	59 f4       	brne	.+22     	; 0x3bde <_Z41__static_initialization_and_destruction_0ii+0x40>
    3bc8:	6f 5f       	subi	r22, 0xFF	; 255
    3bca:	7f 4f       	sbci	r23, 0xFF	; 255
    3bcc:	41 f4       	brne	.+16     	; 0x3bde <_Z41__static_initialization_and_destruction_0ii+0x40>
    3bce:	87 eb       	ldi	r24, 0xB7	; 183
    3bd0:	91 e0       	ldi	r25, 0x01	; 1
    3bd2:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    3bd6:	80 eb       	ldi	r24, 0xB0	; 176
    3bd8:	91 e0       	ldi	r25, 0x01	; 1
    3bda:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <_ZN6StringD1Ev>
    3bde:	08 95       	ret

00003be0 <_GLOBAL__D__ZN15GB_SerialHelper16useSerialMonitorE>:
    3be0:	80 e0       	ldi	r24, 0x00	; 0
    3be2:	90 e0       	ldi	r25, 0x00	; 0
    3be4:	6f ef       	ldi	r22, 0xFF	; 255
    3be6:	7f ef       	ldi	r23, 0xFF	; 255
    3be8:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <_Z41__static_initialization_and_destruction_0ii>
    3bec:	08 95       	ret

00003bee <_GLOBAL__I__ZN15GB_SerialHelper16useSerialMonitorE>:
    3bee:	81 e0       	ldi	r24, 0x01	; 1
    3bf0:	90 e0       	ldi	r25, 0x00	; 0
    3bf2:	6f ef       	ldi	r22, 0xFF	; 255
    3bf4:	7f ef       	ldi	r23, 0xFF	; 255
    3bf6:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <_Z41__static_initialization_and_destruction_0ii>
    3bfa:	08 95       	ret

00003bfc <_GLOBAL__I__ZN14GB_Thermometer17dallasTemperatureE>:
    3bfc:	81 ee       	ldi	r24, 0xE1	; 225
    3bfe:	91 e0       	ldi	r25, 0x01	; 1
    3c00:	6c e3       	ldi	r22, 0x3C	; 60
    3c02:	71 e0       	ldi	r23, 0x01	; 1
    3c04:	0e 94 e3 2a 	call	0x55c6	; 0x55c6 <_ZN17DallasTemperatureC1EP7OneWire>
    3c08:	08 95       	ret

00003c0a <freeMemory>:

int freeMemory() {
    3c0a:	df 93       	push	r29
    3c0c:	cf 93       	push	r28
    3c0e:	00 d0       	rcall	.+0      	; 0x3c10 <freeMemory+0x6>
    3c10:	cd b7       	in	r28, 0x3d	; 61
    3c12:	de b7       	in	r29, 0x3e	; 62
  int free_memory;

  if ((int)__brkval == 0) {
    3c14:	20 91 da 03 	lds	r18, 0x03DA
    3c18:	30 91 db 03 	lds	r19, 0x03DB
    3c1c:	ce 01       	movw	r24, r28
    3c1e:	01 96       	adiw	r24, 0x01	; 1
    3c20:	21 15       	cp	r18, r1
    3c22:	31 05       	cpc	r19, r1
    3c24:	29 f4       	brne	.+10     	; 0x3c30 <freeMemory+0x26>
    free_memory = ((int)&free_memory) - ((int)&__heap_start);
    3c26:	8e 5d       	subi	r24, 0xDE	; 222
    3c28:	93 40       	sbci	r25, 0x03	; 3
    3c2a:	9a 83       	std	Y+2, r25	; 0x02
    3c2c:	89 83       	std	Y+1, r24	; 0x01
    3c2e:	18 c0       	rjmp	.+48     	; 0x3c60 <freeMemory+0x56>
  } else {
    free_memory = ((int)&free_memory) - ((int)__brkval);
    3c30:	ac 01       	movw	r20, r24
    3c32:	42 1b       	sub	r20, r18
    3c34:	53 0b       	sbc	r21, r19
/* Calculates the size of the free list */
int freeListSize() {
  struct __freelist* current;
  int total = 0;

  for (current = __flp; current; current = current->nx) {
    3c36:	e0 91 dc 03 	lds	r30, 0x03DC
    3c3a:	f0 91 dd 03 	lds	r31, 0x03DD
    3c3e:	20 e0       	ldi	r18, 0x00	; 0
    3c40:	30 e0       	ldi	r19, 0x00	; 0
    3c42:	08 c0       	rjmp	.+16     	; 0x3c54 <freeMemory+0x4a>
    total += 2; /* Add two bytes for the memory block's header  */
    3c44:	80 81       	ld	r24, Z
    3c46:	91 81       	ldd	r25, Z+1	; 0x01
    3c48:	02 96       	adiw	r24, 0x02	; 2
    total += (int) current->sz;
    3c4a:	28 0f       	add	r18, r24
    3c4c:	39 1f       	adc	r19, r25
/* Calculates the size of the free list */
int freeListSize() {
  struct __freelist* current;
  int total = 0;

  for (current = __flp; current; current = current->nx) {
    3c4e:	02 80       	ldd	r0, Z+2	; 0x02
    3c50:	f3 81       	ldd	r31, Z+3	; 0x03
    3c52:	e0 2d       	mov	r30, r0
    3c54:	30 97       	sbiw	r30, 0x00	; 0
    3c56:	b1 f7       	brne	.-20     	; 0x3c44 <freeMemory+0x3a>

  if ((int)__brkval == 0) {
    free_memory = ((int)&free_memory) - ((int)&__heap_start);
  } else {
    free_memory = ((int)&free_memory) - ((int)__brkval);
    free_memory += freeListSize();
    3c58:	24 0f       	add	r18, r20
    3c5a:	35 1f       	adc	r19, r21
    3c5c:	3a 83       	std	Y+2, r19	; 0x02
    3c5e:	29 83       	std	Y+1, r18	; 0x01
  }
  return free_memory;
    3c60:	89 81       	ldd	r24, Y+1	; 0x01
    3c62:	9a 81       	ldd	r25, Y+2	; 0x02
    3c64:	0f 90       	pop	r0
    3c66:	0f 90       	pop	r0
    3c68:	cf 91       	pop	r28
    3c6a:	df 91       	pop	r29
    3c6c:	08 95       	ret

00003c6e <_Z9breakTimemR12tmElements_t>:
// leap year calulator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+Y)>0) && !((1970+Y)%4) && ( ((1970+Y)%100) || !((1970+Y)%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    3c6e:	8f 92       	push	r8
    3c70:	9f 92       	push	r9
    3c72:	af 92       	push	r10
    3c74:	bf 92       	push	r11
    3c76:	cf 92       	push	r12
    3c78:	df 92       	push	r13
    3c7a:	ef 92       	push	r14
    3c7c:	ff 92       	push	r15
    3c7e:	0f 93       	push	r16
    3c80:	1f 93       	push	r17
    3c82:	cf 93       	push	r28
    3c84:	df 93       	push	r29
    3c86:	7b 01       	movw	r14, r22
    3c88:	8c 01       	movw	r16, r24
    3c8a:	ea 01       	movw	r28, r20
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    3c8c:	2c e3       	ldi	r18, 0x3C	; 60
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	40 e0       	ldi	r20, 0x00	; 0
    3c92:	50 e0       	ldi	r21, 0x00	; 0
    3c94:	0e 94 22 3c 	call	0x7844	; 0x7844 <__udivmodsi4>
    3c98:	68 83       	st	Y, r22
  time /= 60; // now it is minutes
    3c9a:	c8 01       	movw	r24, r16
    3c9c:	b7 01       	movw	r22, r14
    3c9e:	2c e3       	ldi	r18, 0x3C	; 60
    3ca0:	30 e0       	ldi	r19, 0x00	; 0
    3ca2:	40 e0       	ldi	r20, 0x00	; 0
    3ca4:	50 e0       	ldi	r21, 0x00	; 0
    3ca6:	0e 94 22 3c 	call	0x7844	; 0x7844 <__udivmodsi4>
    3caa:	12 2f       	mov	r17, r18
    3cac:	03 2f       	mov	r16, r19
    3cae:	f4 2e       	mov	r15, r20
    3cb0:	e5 2e       	mov	r14, r21
  tm.Minute = time % 60;
    3cb2:	62 2f       	mov	r22, r18
    3cb4:	73 2f       	mov	r23, r19
    3cb6:	84 2f       	mov	r24, r20
    3cb8:	95 2f       	mov	r25, r21
    3cba:	2c e3       	ldi	r18, 0x3C	; 60
    3cbc:	30 e0       	ldi	r19, 0x00	; 0
    3cbe:	40 e0       	ldi	r20, 0x00	; 0
    3cc0:	50 e0       	ldi	r21, 0x00	; 0
    3cc2:	0e 94 22 3c 	call	0x7844	; 0x7844 <__udivmodsi4>
    3cc6:	69 83       	std	Y+1, r22	; 0x01
  time /= 60; // now it is hours
    3cc8:	61 2f       	mov	r22, r17
    3cca:	70 2f       	mov	r23, r16
    3ccc:	8f 2d       	mov	r24, r15
    3cce:	9e 2d       	mov	r25, r14
    3cd0:	2c e3       	ldi	r18, 0x3C	; 60
    3cd2:	30 e0       	ldi	r19, 0x00	; 0
    3cd4:	40 e0       	ldi	r20, 0x00	; 0
    3cd6:	50 e0       	ldi	r21, 0x00	; 0
    3cd8:	0e 94 22 3c 	call	0x7844	; 0x7844 <__udivmodsi4>
    3cdc:	12 2f       	mov	r17, r18
    3cde:	03 2f       	mov	r16, r19
    3ce0:	f4 2e       	mov	r15, r20
    3ce2:	e5 2e       	mov	r14, r21
  tm.Hour = time % 24;
    3ce4:	62 2f       	mov	r22, r18
    3ce6:	73 2f       	mov	r23, r19
    3ce8:	84 2f       	mov	r24, r20
    3cea:	95 2f       	mov	r25, r21
    3cec:	28 e1       	ldi	r18, 0x18	; 24
    3cee:	30 e0       	ldi	r19, 0x00	; 0
    3cf0:	40 e0       	ldi	r20, 0x00	; 0
    3cf2:	50 e0       	ldi	r21, 0x00	; 0
    3cf4:	0e 94 22 3c 	call	0x7844	; 0x7844 <__udivmodsi4>
    3cf8:	6a 83       	std	Y+2, r22	; 0x02
  time /= 24; // now it is days
    3cfa:	61 2f       	mov	r22, r17
    3cfc:	70 2f       	mov	r23, r16
    3cfe:	8f 2d       	mov	r24, r15
    3d00:	9e 2d       	mov	r25, r14
    3d02:	28 e1       	ldi	r18, 0x18	; 24
    3d04:	30 e0       	ldi	r19, 0x00	; 0
    3d06:	40 e0       	ldi	r20, 0x00	; 0
    3d08:	50 e0       	ldi	r21, 0x00	; 0
    3d0a:	0e 94 22 3c 	call	0x7844	; 0x7844 <__udivmodsi4>
    3d0e:	79 01       	movw	r14, r18
    3d10:	8a 01       	movw	r16, r20
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    3d12:	c8 01       	movw	r24, r16
    3d14:	b7 01       	movw	r22, r14
    3d16:	6c 5f       	subi	r22, 0xFC	; 252
    3d18:	7f 4f       	sbci	r23, 0xFF	; 255
    3d1a:	8f 4f       	sbci	r24, 0xFF	; 255
    3d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d1e:	27 e0       	ldi	r18, 0x07	; 7
    3d20:	30 e0       	ldi	r19, 0x00	; 0
    3d22:	40 e0       	ldi	r20, 0x00	; 0
    3d24:	50 e0       	ldi	r21, 0x00	; 0
    3d26:	0e 94 22 3c 	call	0x7844	; 0x7844 <__udivmodsi4>
    3d2a:	6f 5f       	subi	r22, 0xFF	; 255
    3d2c:	6b 83       	std	Y+3, r22	; 0x03
    3d2e:	20 e0       	ldi	r18, 0x00	; 0
    3d30:	aa 24       	eor	r10, r10
    3d32:	bb 24       	eor	r11, r11
    3d34:	65 01       	movw	r12, r10
    3d36:	01 c0       	rjmp	.+2      	; 0x3d3a <_Z9breakTimemR12tmElements_t+0xcc>
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
    3d38:	2f 5f       	subi	r18, 0xFF	; 255
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3d3a:	82 2e       	mov	r8, r18
    3d3c:	99 24       	eor	r9, r9
    3d3e:	f4 01       	movw	r30, r8
    3d40:	ee 54       	subi	r30, 0x4E	; 78
    3d42:	f8 4f       	sbci	r31, 0xF8	; 248
    3d44:	cf 01       	movw	r24, r30
    3d46:	83 70       	andi	r24, 0x03	; 3
    3d48:	90 70       	andi	r25, 0x00	; 0
    3d4a:	89 2b       	or	r24, r25
    3d4c:	99 f4       	brne	.+38     	; 0x3d74 <_Z9breakTimemR12tmElements_t+0x106>
    3d4e:	cf 01       	movw	r24, r30
    3d50:	64 e6       	ldi	r22, 0x64	; 100
    3d52:	70 e0       	ldi	r23, 0x00	; 0
    3d54:	0e 94 0f 3c 	call	0x781e	; 0x781e <__divmodhi4>
    3d58:	89 2b       	or	r24, r25
    3d5a:	39 f4       	brne	.+14     	; 0x3d6a <_Z9breakTimemR12tmElements_t+0xfc>
    3d5c:	cf 01       	movw	r24, r30
    3d5e:	60 e9       	ldi	r22, 0x90	; 144
    3d60:	71 e0       	ldi	r23, 0x01	; 1
    3d62:	0e 94 0f 3c 	call	0x781e	; 0x781e <__divmodhi4>
    3d66:	89 2b       	or	r24, r25
    3d68:	29 f4       	brne	.+10     	; 0x3d74 <_Z9breakTimemR12tmElements_t+0x106>
    3d6a:	8e e6       	ldi	r24, 0x6E	; 110
    3d6c:	91 e0       	ldi	r25, 0x01	; 1
    3d6e:	a0 e0       	ldi	r26, 0x00	; 0
    3d70:	b0 e0       	ldi	r27, 0x00	; 0
    3d72:	04 c0       	rjmp	.+8      	; 0x3d7c <_Z9breakTimemR12tmElements_t+0x10e>
    3d74:	8d e6       	ldi	r24, 0x6D	; 109
    3d76:	91 e0       	ldi	r25, 0x01	; 1
    3d78:	a0 e0       	ldi	r26, 0x00	; 0
    3d7a:	b0 e0       	ldi	r27, 0x00	; 0
    3d7c:	a8 0e       	add	r10, r24
    3d7e:	b9 1e       	adc	r11, r25
    3d80:	ca 1e       	adc	r12, r26
    3d82:	db 1e       	adc	r13, r27
    3d84:	c5 01       	movw	r24, r10
    3d86:	a0 e0       	ldi	r26, 0x00	; 0
    3d88:	b0 e0       	ldi	r27, 0x00	; 0
    3d8a:	e8 16       	cp	r14, r24
    3d8c:	f9 06       	cpc	r15, r25
    3d8e:	0a 07       	cpc	r16, r26
    3d90:	1b 07       	cpc	r17, r27
    3d92:	90 f6       	brcc	.-92     	; 0x3d38 <_Z9breakTimemR12tmElements_t+0xca>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    3d94:	2e 83       	std	Y+6, r18	; 0x06
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    3d96:	f4 01       	movw	r30, r8
    3d98:	ee 54       	subi	r30, 0x4E	; 78
    3d9a:	f8 4f       	sbci	r31, 0xF8	; 248
    3d9c:	83 e0       	ldi	r24, 0x03	; 3
    3d9e:	88 2e       	mov	r8, r24
    3da0:	91 2c       	mov	r9, r1
    3da2:	8e 22       	and	r8, r30
    3da4:	9f 22       	and	r9, r31
    3da6:	81 14       	cp	r8, r1
    3da8:	91 04       	cpc	r9, r1
    3daa:	99 f4       	brne	.+38     	; 0x3dd2 <_Z9breakTimemR12tmElements_t+0x164>
    3dac:	cf 01       	movw	r24, r30
    3dae:	64 e6       	ldi	r22, 0x64	; 100
    3db0:	70 e0       	ldi	r23, 0x00	; 0
    3db2:	0e 94 0f 3c 	call	0x781e	; 0x781e <__divmodhi4>
    3db6:	89 2b       	or	r24, r25
    3db8:	39 f4       	brne	.+14     	; 0x3dc8 <_Z9breakTimemR12tmElements_t+0x15a>
    3dba:	cf 01       	movw	r24, r30
    3dbc:	60 e9       	ldi	r22, 0x90	; 144
    3dbe:	71 e0       	ldi	r23, 0x01	; 1
    3dc0:	0e 94 0f 3c 	call	0x781e	; 0x781e <__divmodhi4>
    3dc4:	89 2b       	or	r24, r25
    3dc6:	29 f4       	brne	.+10     	; 0x3dd2 <_Z9breakTimemR12tmElements_t+0x164>
    3dc8:	8e e6       	ldi	r24, 0x6E	; 110
    3dca:	91 e0       	ldi	r25, 0x01	; 1
    3dcc:	a0 e0       	ldi	r26, 0x00	; 0
    3dce:	b0 e0       	ldi	r27, 0x00	; 0
    3dd0:	04 c0       	rjmp	.+8      	; 0x3dda <_Z9breakTimemR12tmElements_t+0x16c>
    3dd2:	8d e6       	ldi	r24, 0x6D	; 109
    3dd4:	91 e0       	ldi	r25, 0x01	; 1
    3dd6:	a0 e0       	ldi	r26, 0x00	; 0
    3dd8:	b0 e0       	ldi	r27, 0x00	; 0
  time  -= days; // now it is days in this year, starting at 0
    3dda:	a8 1a       	sub	r10, r24
    3ddc:	b9 0a       	sbc	r11, r25
    3dde:	ca 0a       	sbc	r12, r26
    3de0:	db 0a       	sbc	r13, r27
    3de2:	98 01       	movw	r18, r16
    3de4:	87 01       	movw	r16, r14
    3de6:	0a 19       	sub	r16, r10
    3de8:	1b 09       	sbc	r17, r11
    3dea:	2c 09       	sbc	r18, r12
    3dec:	3d 09       	sbc	r19, r13
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    3dee:	cf 01       	movw	r24, r30
    3df0:	64 e6       	ldi	r22, 0x64	; 100
    3df2:	70 e0       	ldi	r23, 0x00	; 0
    3df4:	0e 94 0f 3c 	call	0x781e	; 0x781e <__divmodhi4>
    3df8:	7c 01       	movw	r14, r24
    3dfa:	cf 01       	movw	r24, r30
    3dfc:	60 e9       	ldi	r22, 0x90	; 144
    3dfe:	71 e0       	ldi	r23, 0x01	; 1
    3e00:	0e 94 0f 3c 	call	0x781e	; 0x781e <__divmodhi4>
    3e04:	ac 01       	movw	r20, r24
    3e06:	ef e0       	ldi	r30, 0x0F	; 15
    3e08:	f1 e0       	ldi	r31, 0x01	; 1
    3e0a:	60 e0       	ldi	r22, 0x00	; 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    3e0c:	61 30       	cpi	r22, 0x01	; 1
    3e0e:	51 f4       	brne	.+20     	; 0x3e24 <_Z9breakTimemR12tmElements_t+0x1b6>
      if (LEAP_YEAR(year)) {
    3e10:	81 14       	cp	r8, r1
    3e12:	91 04       	cpc	r9, r1
    3e14:	49 f4       	brne	.+18     	; 0x3e28 <_Z9breakTimemR12tmElements_t+0x1ba>
    3e16:	e1 14       	cp	r14, r1
    3e18:	f1 04       	cpc	r15, r1
    3e1a:	41 f4       	brne	.+16     	; 0x3e2c <_Z9breakTimemR12tmElements_t+0x1be>
    3e1c:	41 15       	cp	r20, r1
    3e1e:	51 05       	cpc	r21, r1
    3e20:	29 f0       	breq	.+10     	; 0x3e2c <_Z9breakTimemR12tmElements_t+0x1be>
    3e22:	02 c0       	rjmp	.+4      	; 0x3e28 <_Z9breakTimemR12tmElements_t+0x1ba>
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    3e24:	80 81       	ld	r24, Z
    3e26:	03 c0       	rjmp	.+6      	; 0x3e2e <_Z9breakTimemR12tmElements_t+0x1c0>
    3e28:	8c e1       	ldi	r24, 0x1C	; 28
    3e2a:	01 c0       	rjmp	.+2      	; 0x3e2e <_Z9breakTimemR12tmElements_t+0x1c0>
    3e2c:	8d e1       	ldi	r24, 0x1D	; 29
    }
    
    if (time >= monthLength) {
    3e2e:	90 e0       	ldi	r25, 0x00	; 0
    3e30:	a0 e0       	ldi	r26, 0x00	; 0
    3e32:	b0 e0       	ldi	r27, 0x00	; 0
    3e34:	08 17       	cp	r16, r24
    3e36:	19 07       	cpc	r17, r25
    3e38:	2a 07       	cpc	r18, r26
    3e3a:	3b 07       	cpc	r19, r27
    3e3c:	40 f0       	brcs	.+16     	; 0x3e4e <_Z9breakTimemR12tmElements_t+0x1e0>
      time -= monthLength;
    3e3e:	08 1b       	sub	r16, r24
    3e40:	19 0b       	sbc	r17, r25
    3e42:	2a 0b       	sbc	r18, r26
    3e44:	3b 0b       	sbc	r19, r27
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    3e46:	6f 5f       	subi	r22, 0xFF	; 255
    3e48:	31 96       	adiw	r30, 0x01	; 1
    3e4a:	6c 30       	cpi	r22, 0x0C	; 12
    3e4c:	f9 f6       	brne	.-66     	; 0x3e0c <_Z9breakTimemR12tmElements_t+0x19e>
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    3e4e:	6f 5f       	subi	r22, 0xFF	; 255
    3e50:	6d 83       	std	Y+5, r22	; 0x05
  tm.Day = time + 1;     // day of month
    3e52:	80 2f       	mov	r24, r16
    3e54:	8f 5f       	subi	r24, 0xFF	; 255
    3e56:	8c 83       	std	Y+4, r24	; 0x04
}
    3e58:	df 91       	pop	r29
    3e5a:	cf 91       	pop	r28
    3e5c:	1f 91       	pop	r17
    3e5e:	0f 91       	pop	r16
    3e60:	ff 90       	pop	r15
    3e62:	ef 90       	pop	r14
    3e64:	df 90       	pop	r13
    3e66:	cf 90       	pop	r12
    3e68:	bf 90       	pop	r11
    3e6a:	af 90       	pop	r10
    3e6c:	9f 90       	pop	r9
    3e6e:	8f 90       	pop	r8
    3e70:	08 95       	ret

00003e72 <_Z12refreshCachem>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    3e72:	ef 92       	push	r14
    3e74:	ff 92       	push	r15
    3e76:	0f 93       	push	r16
    3e78:	1f 93       	push	r17
    3e7a:	7b 01       	movw	r14, r22
    3e7c:	8c 01       	movw	r16, r24
  if (t != cacheTime) {
    3e7e:	80 91 1d 02 	lds	r24, 0x021D
    3e82:	90 91 1e 02 	lds	r25, 0x021E
    3e86:	a0 91 1f 02 	lds	r26, 0x021F
    3e8a:	b0 91 20 02 	lds	r27, 0x0220
    3e8e:	e8 16       	cp	r14, r24
    3e90:	f9 06       	cpc	r15, r25
    3e92:	0a 07       	cpc	r16, r26
    3e94:	1b 07       	cpc	r17, r27
    3e96:	71 f0       	breq	.+28     	; 0x3eb4 <_Z12refreshCachem+0x42>
    breakTime(t, tm); 
    3e98:	c8 01       	movw	r24, r16
    3e9a:	b7 01       	movw	r22, r14
    3e9c:	42 e1       	ldi	r20, 0x12	; 18
    3e9e:	52 e0       	ldi	r21, 0x02	; 2
    3ea0:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <_Z9breakTimemR12tmElements_t>
    cacheTime = t; 
    3ea4:	e0 92 1d 02 	sts	0x021D, r14
    3ea8:	f0 92 1e 02 	sts	0x021E, r15
    3eac:	00 93 1f 02 	sts	0x021F, r16
    3eb0:	10 93 20 02 	sts	0x0220, r17
  }
}
    3eb4:	1f 91       	pop	r17
    3eb6:	0f 91       	pop	r16
    3eb8:	ff 90       	pop	r15
    3eba:	ef 90       	pop	r14
    3ebc:	08 95       	ret

00003ebe <_Z4yearm>:
int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
    3ebe:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <_Z12refreshCachem>
    3ec2:	20 91 18 02 	lds	r18, 0x0218
    3ec6:	30 e0       	ldi	r19, 0x00	; 0
    3ec8:	2e 54       	subi	r18, 0x4E	; 78
    3eca:	38 4f       	sbci	r19, 0xF8	; 248
  return tmYearToCalendar(tm.Year);
}
    3ecc:	c9 01       	movw	r24, r18
    3ece:	08 95       	ret

00003ed0 <_Z8makeTimeR12tmElements_t>:
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
}

time_t makeTime(tmElements_t &tm){   
    3ed0:	4f 92       	push	r4
    3ed2:	5f 92       	push	r5
    3ed4:	6f 92       	push	r6
    3ed6:	7f 92       	push	r7
    3ed8:	8f 92       	push	r8
    3eda:	9f 92       	push	r9
    3edc:	af 92       	push	r10
    3ede:	bf 92       	push	r11
    3ee0:	cf 92       	push	r12
    3ee2:	df 92       	push	r13
    3ee4:	ef 92       	push	r14
    3ee6:	ff 92       	push	r15
    3ee8:	0f 93       	push	r16
    3eea:	1f 93       	push	r17
    3eec:	cf 93       	push	r28
    3eee:	df 93       	push	r29
    3ef0:	4c 01       	movw	r8, r24
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
    3ef2:	dc 01       	movw	r26, r24
    3ef4:	16 96       	adiw	r26, 0x06	; 6
    3ef6:	1c 91       	ld	r17, X
    3ef8:	61 2f       	mov	r22, r17
    3efa:	70 e0       	ldi	r23, 0x00	; 0
    3efc:	80 e0       	ldi	r24, 0x00	; 0
    3efe:	90 e0       	ldi	r25, 0x00	; 0
    3f00:	20 e8       	ldi	r18, 0x80	; 128
    3f02:	33 e3       	ldi	r19, 0x33	; 51
    3f04:	41 ee       	ldi	r20, 0xE1	; 225
    3f06:	51 e0       	ldi	r21, 0x01	; 1
    3f08:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <__mulsi3>
    3f0c:	5b 01       	movw	r10, r22
    3f0e:	6c 01       	movw	r12, r24
    3f10:	22 eb       	ldi	r18, 0xB2	; 178
    3f12:	37 e0       	ldi	r19, 0x07	; 7
  for (i = 0; i < tm.Year; i++) {
    3f14:	e1 2f       	mov	r30, r17
    3f16:	f0 e0       	ldi	r31, 0x00	; 0
    3f18:	ee 54       	subi	r30, 0x4E	; 78
    3f1a:	f8 4f       	sbci	r31, 0xF8	; 248
    3f1c:	1d c0       	rjmp	.+58     	; 0x3f58 <_Z8makeTimeR12tmElements_t+0x88>
    if (LEAP_YEAR(i)) {
    3f1e:	c9 01       	movw	r24, r18
    3f20:	83 70       	andi	r24, 0x03	; 3
    3f22:	90 70       	andi	r25, 0x00	; 0
    3f24:	89 2b       	or	r24, r25
    3f26:	b1 f4       	brne	.+44     	; 0x3f54 <_Z8makeTimeR12tmElements_t+0x84>
    3f28:	c9 01       	movw	r24, r18
    3f2a:	64 e6       	ldi	r22, 0x64	; 100
    3f2c:	70 e0       	ldi	r23, 0x00	; 0
    3f2e:	0e 94 0f 3c 	call	0x781e	; 0x781e <__divmodhi4>
    3f32:	89 2b       	or	r24, r25
    3f34:	39 f4       	brne	.+14     	; 0x3f44 <_Z8makeTimeR12tmElements_t+0x74>
    3f36:	c9 01       	movw	r24, r18
    3f38:	60 e9       	ldi	r22, 0x90	; 144
    3f3a:	71 e0       	ldi	r23, 0x01	; 1
    3f3c:	0e 94 0f 3c 	call	0x781e	; 0x781e <__divmodhi4>
    3f40:	89 2b       	or	r24, r25
    3f42:	41 f4       	brne	.+16     	; 0x3f54 <_Z8makeTimeR12tmElements_t+0x84>
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    3f44:	80 e8       	ldi	r24, 0x80	; 128
    3f46:	91 e5       	ldi	r25, 0x51	; 81
    3f48:	a1 e0       	ldi	r26, 0x01	; 1
    3f4a:	b0 e0       	ldi	r27, 0x00	; 0
    3f4c:	a8 0e       	add	r10, r24
    3f4e:	b9 1e       	adc	r11, r25
    3f50:	ca 1e       	adc	r12, r26
    3f52:	db 1e       	adc	r13, r27
    3f54:	2f 5f       	subi	r18, 0xFF	; 255
    3f56:	3f 4f       	sbci	r19, 0xFF	; 255
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    3f58:	2e 17       	cp	r18, r30
    3f5a:	3f 07       	cpc	r19, r31
    3f5c:	01 f7       	brne	.-64     	; 0x3f1e <_Z8makeTimeR12tmElements_t+0x4e>
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    3f5e:	d4 01       	movw	r26, r8
    3f60:	15 96       	adiw	r26, 0x05	; 5
    3f62:	8c 91       	ld	r24, X
    3f64:	48 2e       	mov	r4, r24
    3f66:	55 24       	eor	r5, r5
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    3f68:	c9 01       	movw	r24, r18
    3f6a:	64 e6       	ldi	r22, 0x64	; 100
    3f6c:	70 e0       	ldi	r23, 0x00	; 0
    3f6e:	0e 94 0f 3c 	call	0x781e	; 0x781e <__divmodhi4>
    3f72:	7c 01       	movw	r14, r24
    3f74:	c9 01       	movw	r24, r18
    3f76:	60 e9       	ldi	r22, 0x90	; 144
    3f78:	71 e0       	ldi	r23, 0x01	; 1
    3f7a:	0e 94 0f 3c 	call	0x781e	; 0x781e <__divmodhi4>
    3f7e:	8c 01       	movw	r16, r24
    3f80:	c1 e0       	ldi	r28, 0x01	; 1
    3f82:	d0 e0       	ldi	r29, 0x00	; 0
    3f84:	93 e0       	ldi	r25, 0x03	; 3
    3f86:	69 2e       	mov	r6, r25
    3f88:	71 2c       	mov	r7, r1
    3f8a:	62 22       	and	r6, r18
    3f8c:	73 22       	and	r7, r19
    3f8e:	27 c0       	rjmp	.+78     	; 0x3fde <_Z8makeTimeR12tmElements_t+0x10e>
    3f90:	c2 30       	cpi	r28, 0x02	; 2
    3f92:	d1 05       	cpc	r29, r1
    3f94:	91 f4       	brne	.+36     	; 0x3fba <_Z8makeTimeR12tmElements_t+0xea>
    3f96:	61 14       	cp	r6, r1
    3f98:	71 04       	cpc	r7, r1
    3f9a:	79 f4       	brne	.+30     	; 0x3fba <_Z8makeTimeR12tmElements_t+0xea>
    3f9c:	e1 14       	cp	r14, r1
    3f9e:	f1 04       	cpc	r15, r1
    3fa0:	19 f4       	brne	.+6      	; 0x3fa8 <_Z8makeTimeR12tmElements_t+0xd8>
    3fa2:	01 15       	cp	r16, r1
    3fa4:	11 05       	cpc	r17, r1
    3fa6:	49 f4       	brne	.+18     	; 0x3fba <_Z8makeTimeR12tmElements_t+0xea>
      seconds += SECS_PER_DAY * 29;
    3fa8:	80 e8       	ldi	r24, 0x80	; 128
    3faa:	9b e3       	ldi	r25, 0x3B	; 59
    3fac:	a6 e2       	ldi	r26, 0x26	; 38
    3fae:	b0 e0       	ldi	r27, 0x00	; 0
    3fb0:	a8 0e       	add	r10, r24
    3fb2:	b9 1e       	adc	r11, r25
    3fb4:	ca 1e       	adc	r12, r26
    3fb6:	db 1e       	adc	r13, r27
    3fb8:	11 c0       	rjmp	.+34     	; 0x3fdc <_Z8makeTimeR12tmElements_t+0x10c>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    3fba:	fe 01       	movw	r30, r28
    3fbc:	e2 5f       	subi	r30, 0xF2	; 242
    3fbe:	fe 4f       	sbci	r31, 0xFE	; 254
    3fc0:	60 81       	ld	r22, Z
    3fc2:	70 e0       	ldi	r23, 0x00	; 0
    3fc4:	80 e0       	ldi	r24, 0x00	; 0
    3fc6:	90 e0       	ldi	r25, 0x00	; 0
    3fc8:	20 e8       	ldi	r18, 0x80	; 128
    3fca:	31 e5       	ldi	r19, 0x51	; 81
    3fcc:	41 e0       	ldi	r20, 0x01	; 1
    3fce:	50 e0       	ldi	r21, 0x00	; 0
    3fd0:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <__mulsi3>
    3fd4:	a6 0e       	add	r10, r22
    3fd6:	b7 1e       	adc	r11, r23
    3fd8:	c8 1e       	adc	r12, r24
    3fda:	d9 1e       	adc	r13, r25
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    3fdc:	21 96       	adiw	r28, 0x01	; 1
    3fde:	c4 15       	cp	r28, r4
    3fe0:	d5 05       	cpc	r29, r5
    3fe2:	b4 f2       	brlt	.-84     	; 0x3f90 <_Z8makeTimeR12tmElements_t+0xc0>
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    }
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
    3fe4:	d4 01       	movw	r26, r8
    3fe6:	12 96       	adiw	r26, 0x02	; 2
    3fe8:	6c 91       	ld	r22, X
    3fea:	70 e0       	ldi	r23, 0x00	; 0
    3fec:	80 e0       	ldi	r24, 0x00	; 0
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	20 e1       	ldi	r18, 0x10	; 16
    3ff2:	3e e0       	ldi	r19, 0x0E	; 14
    3ff4:	40 e0       	ldi	r20, 0x00	; 0
    3ff6:	50 e0       	ldi	r21, 0x00	; 0
    3ff8:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <__mulsi3>
    3ffc:	7b 01       	movw	r14, r22
    3ffe:	8c 01       	movw	r16, r24
    4000:	f4 01       	movw	r30, r8
    4002:	61 81       	ldd	r22, Z+1	; 0x01
    4004:	70 e0       	ldi	r23, 0x00	; 0
    4006:	80 e0       	ldi	r24, 0x00	; 0
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	2c e3       	ldi	r18, 0x3C	; 60
    400c:	30 e0       	ldi	r19, 0x00	; 0
    400e:	40 e0       	ldi	r20, 0x00	; 0
    4010:	50 e0       	ldi	r21, 0x00	; 0
    4012:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <__mulsi3>
    4016:	e6 0e       	add	r14, r22
    4018:	f7 1e       	adc	r15, r23
    401a:	08 1f       	adc	r16, r24
    401c:	19 1f       	adc	r17, r25
  seconds+= tm.Hour * SECS_PER_HOUR;
    401e:	d4 01       	movw	r26, r8
    4020:	8c 91       	ld	r24, X
    4022:	e8 0e       	add	r14, r24
    4024:	f1 1c       	adc	r15, r1
    4026:	01 1d       	adc	r16, r1
    4028:	11 1d       	adc	r17, r1
  seconds+= tm.Minute * SECS_PER_MIN;
    402a:	14 96       	adiw	r26, 0x04	; 4
    402c:	6c 91       	ld	r22, X
    402e:	70 e0       	ldi	r23, 0x00	; 0
    4030:	61 50       	subi	r22, 0x01	; 1
    4032:	70 40       	sbci	r23, 0x00	; 0
    4034:	88 27       	eor	r24, r24
    4036:	77 fd       	sbrc	r23, 7
    4038:	80 95       	com	r24
    403a:	98 2f       	mov	r25, r24
    403c:	20 e8       	ldi	r18, 0x80	; 128
    403e:	31 e5       	ldi	r19, 0x51	; 81
    4040:	41 e0       	ldi	r20, 0x01	; 1
    4042:	50 e0       	ldi	r21, 0x00	; 0
    4044:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <__mulsi3>
    4048:	e6 0e       	add	r14, r22
    404a:	f7 1e       	adc	r15, r23
    404c:	08 1f       	adc	r16, r24
    404e:	19 1f       	adc	r17, r25
    4050:	ea 0c       	add	r14, r10
    4052:	fb 1c       	adc	r15, r11
    4054:	0c 1d       	adc	r16, r12
    4056:	1d 1d       	adc	r17, r13
  seconds+= tm.Second;
  return (time_t)seconds; 
}
    4058:	b7 01       	movw	r22, r14
    405a:	c8 01       	movw	r24, r16
    405c:	df 91       	pop	r29
    405e:	cf 91       	pop	r28
    4060:	1f 91       	pop	r17
    4062:	0f 91       	pop	r16
    4064:	ff 90       	pop	r15
    4066:	ef 90       	pop	r14
    4068:	df 90       	pop	r13
    406a:	cf 90       	pop	r12
    406c:	bf 90       	pop	r11
    406e:	af 90       	pop	r10
    4070:	9f 90       	pop	r9
    4072:	8f 90       	pop	r8
    4074:	7f 90       	pop	r7
    4076:	6f 90       	pop	r6
    4078:	5f 90       	pop	r5
    407a:	4f 90       	pop	r4
    407c:	08 95       	ret

0000407e <_Z7setTimem>:
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    407e:	60 93 08 02 	sts	0x0208, r22
    4082:	70 93 09 02 	sts	0x0209, r23
    4086:	80 93 0a 02 	sts	0x020A, r24
    408a:	90 93 0b 02 	sts	0x020B, r25
  nextSyncTime = (uint32_t)t + syncInterval;
    408e:	20 91 05 01 	lds	r18, 0x0105
    4092:	30 91 06 01 	lds	r19, 0x0106
    4096:	40 91 07 01 	lds	r20, 0x0107
    409a:	50 91 08 01 	lds	r21, 0x0108
    409e:	26 0f       	add	r18, r22
    40a0:	37 1f       	adc	r19, r23
    40a2:	48 1f       	adc	r20, r24
    40a4:	59 1f       	adc	r21, r25
    40a6:	20 93 0c 02 	sts	0x020C, r18
    40aa:	30 93 0d 02 	sts	0x020D, r19
    40ae:	40 93 0e 02 	sts	0x020E, r20
    40b2:	50 93 0f 02 	sts	0x020F, r21
  Status = timeSet;
    40b6:	82 e0       	ldi	r24, 0x02	; 2
    40b8:	90 e0       	ldi	r25, 0x00	; 0
    40ba:	90 93 11 02 	sts	0x0211, r25
    40be:	80 93 10 02 	sts	0x0210, r24
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    40c2:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <millis>
    40c6:	60 93 19 02 	sts	0x0219, r22
    40ca:	70 93 1a 02 	sts	0x021A, r23
    40ce:	80 93 1b 02 	sts	0x021B, r24
    40d2:	90 93 1c 02 	sts	0x021C, r25
} 
    40d6:	08 95       	ret

000040d8 <_Z3nowv>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    40d8:	ef 92       	push	r14
    40da:	ff 92       	push	r15
    40dc:	0f 93       	push	r16
    40de:	1f 93       	push	r17
    40e0:	1c c0       	rjmp	.+56     	; 0x411a <_Z3nowv+0x42>
  while (millis() - prevMillis >= 1000){      
    sysTime++;
    40e2:	2f 5f       	subi	r18, 0xFF	; 255
    40e4:	3f 4f       	sbci	r19, 0xFF	; 255
    40e6:	4f 4f       	sbci	r20, 0xFF	; 255
    40e8:	5f 4f       	sbci	r21, 0xFF	; 255
    40ea:	20 93 08 02 	sts	0x0208, r18
    40ee:	30 93 09 02 	sts	0x0209, r19
    40f2:	40 93 0a 02 	sts	0x020A, r20
    40f6:	50 93 0b 02 	sts	0x020B, r21
    prevMillis += 1000;	
    40fa:	88 ee       	ldi	r24, 0xE8	; 232
    40fc:	93 e0       	ldi	r25, 0x03	; 3
    40fe:	a0 e0       	ldi	r26, 0x00	; 0
    4100:	b0 e0       	ldi	r27, 0x00	; 0
    4102:	e8 0e       	add	r14, r24
    4104:	f9 1e       	adc	r15, r25
    4106:	0a 1f       	adc	r16, r26
    4108:	1b 1f       	adc	r17, r27
    410a:	e0 92 19 02 	sts	0x0219, r14
    410e:	f0 92 1a 02 	sts	0x021A, r15
    4112:	00 93 1b 02 	sts	0x021B, r16
    4116:	10 93 1c 02 	sts	0x021C, r17
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
  while (millis() - prevMillis >= 1000){      
    411a:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <millis>
    411e:	e0 90 19 02 	lds	r14, 0x0219
    4122:	f0 90 1a 02 	lds	r15, 0x021A
    4126:	00 91 1b 02 	lds	r16, 0x021B
    412a:	10 91 1c 02 	lds	r17, 0x021C
    412e:	6e 19       	sub	r22, r14
    4130:	7f 09       	sbc	r23, r15
    4132:	80 0b       	sbc	r24, r16
    4134:	91 0b       	sbc	r25, r17
    4136:	20 91 08 02 	lds	r18, 0x0208
    413a:	30 91 09 02 	lds	r19, 0x0209
    413e:	40 91 0a 02 	lds	r20, 0x020A
    4142:	50 91 0b 02 	lds	r21, 0x020B
    4146:	68 5e       	subi	r22, 0xE8	; 232
    4148:	73 40       	sbci	r23, 0x03	; 3
    414a:	80 40       	sbci	r24, 0x00	; 0
    414c:	90 40       	sbci	r25, 0x00	; 0
    414e:	48 f6       	brcc	.-110    	; 0x40e2 <_Z3nowv+0xa>
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    4150:	80 91 0c 02 	lds	r24, 0x020C
    4154:	90 91 0d 02 	lds	r25, 0x020D
    4158:	a0 91 0e 02 	lds	r26, 0x020E
    415c:	b0 91 0f 02 	lds	r27, 0x020F
    4160:	28 17       	cp	r18, r24
    4162:	39 07       	cpc	r19, r25
    4164:	4a 07       	cpc	r20, r26
    4166:	5b 07       	cpc	r21, r27
    4168:	c8 f1       	brcs	.+114    	; 0x41dc <_Z3nowv+0x104>
    if (getTimePtr != 0) {
    416a:	e0 91 06 02 	lds	r30, 0x0206
    416e:	f0 91 07 02 	lds	r31, 0x0207
    4172:	30 97       	sbiw	r30, 0x00	; 0
    4174:	99 f1       	breq	.+102    	; 0x41dc <_Z3nowv+0x104>
      time_t t = getTimePtr();
    4176:	09 95       	icall
      if (t != 0) {
    4178:	61 15       	cp	r22, r1
    417a:	71 05       	cpc	r23, r1
    417c:	81 05       	cpc	r24, r1
    417e:	91 05       	cpc	r25, r1
    4180:	19 f0       	breq	.+6      	; 0x4188 <_Z3nowv+0xb0>
        setTime(t);
    4182:	0e 94 3f 20 	call	0x407e	; 0x407e <_Z7setTimem>
    4186:	2a c0       	rjmp	.+84     	; 0x41dc <_Z3nowv+0x104>
      } else {
        nextSyncTime = sysTime + syncInterval;
    4188:	80 91 05 01 	lds	r24, 0x0105
    418c:	90 91 06 01 	lds	r25, 0x0106
    4190:	a0 91 07 01 	lds	r26, 0x0107
    4194:	b0 91 08 01 	lds	r27, 0x0108
    4198:	20 91 08 02 	lds	r18, 0x0208
    419c:	30 91 09 02 	lds	r19, 0x0209
    41a0:	40 91 0a 02 	lds	r20, 0x020A
    41a4:	50 91 0b 02 	lds	r21, 0x020B
    41a8:	82 0f       	add	r24, r18
    41aa:	93 1f       	adc	r25, r19
    41ac:	a4 1f       	adc	r26, r20
    41ae:	b5 1f       	adc	r27, r21
    41b0:	80 93 0c 02 	sts	0x020C, r24
    41b4:	90 93 0d 02 	sts	0x020D, r25
    41b8:	a0 93 0e 02 	sts	0x020E, r26
    41bc:	b0 93 0f 02 	sts	0x020F, r27
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    41c0:	20 e0       	ldi	r18, 0x00	; 0
    41c2:	30 e0       	ldi	r19, 0x00	; 0
    41c4:	80 91 10 02 	lds	r24, 0x0210
    41c8:	90 91 11 02 	lds	r25, 0x0211
    41cc:	89 2b       	or	r24, r25
    41ce:	11 f0       	breq	.+4      	; 0x41d4 <_Z3nowv+0xfc>
    41d0:	21 e0       	ldi	r18, 0x01	; 1
    41d2:	30 e0       	ldi	r19, 0x00	; 0
    41d4:	30 93 11 02 	sts	0x0211, r19
    41d8:	20 93 10 02 	sts	0x0210, r18
    41dc:	60 91 08 02 	lds	r22, 0x0208
    41e0:	70 91 09 02 	lds	r23, 0x0209
      }
    }
  }  
  return (time_t)sysTime;
}
    41e4:	80 91 0a 02 	lds	r24, 0x020A
    41e8:	90 91 0b 02 	lds	r25, 0x020B
    41ec:	1f 91       	pop	r17
    41ee:	0f 91       	pop	r16
    41f0:	ff 90       	pop	r15
    41f2:	ef 90       	pop	r14
    41f4:	08 95       	ret

000041f6 <_Z15setSyncProviderPFmvE>:
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    41f6:	90 93 07 02 	sts	0x0207, r25
    41fa:	80 93 06 02 	sts	0x0206, r24
  nextSyncTime = sysTime;
    41fe:	80 91 08 02 	lds	r24, 0x0208
    4202:	90 91 09 02 	lds	r25, 0x0209
    4206:	a0 91 0a 02 	lds	r26, 0x020A
    420a:	b0 91 0b 02 	lds	r27, 0x020B
    420e:	80 93 0c 02 	sts	0x020C, r24
    4212:	90 93 0d 02 	sts	0x020D, r25
    4216:	a0 93 0e 02 	sts	0x020E, r26
    421a:	b0 93 0f 02 	sts	0x020F, r27
  now(); // this will sync the clock
    421e:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <_Z3nowv>
}
    4222:	08 95       	ret

00004224 <_Z10timeStatusv>:
  sysTime += adjustment;
}

// indicates if time has been set and recently synchronized
timeStatus_t timeStatus() {
  now(); // required to actually update the status
    4224:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <_Z3nowv>
  return Status;
}
    4228:	80 91 10 02 	lds	r24, 0x0210
    422c:	90 91 11 02 	lds	r25, 0x0211
    4230:	08 95       	ret

00004232 <_Z4yearv>:
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    4232:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <_Z3nowv>
    4236:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <_Z4yearm>
}
    423a:	08 95       	ret

0000423c <_Z4hourv>:
    cacheTime = t; 
  }
}

int hour() { // the hour now 
  return hour(now()); 
    423c:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <_Z3nowv>
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
    4240:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <_Z12refreshCachem>
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    4244:	80 91 14 02 	lds	r24, 0x0214
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	08 95       	ret

0000424c <_ZN15TimeAlarmsClassC1Ev>:
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    424c:	cf 93       	push	r28
    424e:	df 93       	push	r29
    4250:	dc 01       	movw	r26, r24
    4252:	fc 01       	movw	r30, r24
    4254:	20 e0       	ldi	r18, 0x00	; 0
    4256:	30 e0       	ldi	r19, 0x00	; 0
//**************************************************************
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
    4258:	82 85       	ldd	r24, Z+10	; 0x0a
  Mode.alarmType = dtNotAllocated;
    425a:	80 7c       	andi	r24, 0xC0	; 192
    425c:	82 87       	std	Z+10, r24	; 0x0a
  value = nextTrigger = 0;
    425e:	16 82       	std	Z+6, r1	; 0x06
    4260:	17 82       	std	Z+7, r1	; 0x07
    4262:	10 86       	std	Z+8, r1	; 0x08
    4264:	11 86       	std	Z+9, r1	; 0x09
    4266:	12 82       	std	Z+2, r1	; 0x02
    4268:	13 82       	std	Z+3, r1	; 0x03
    426a:	14 82       	std	Z+4, r1	; 0x04
    426c:	15 82       	std	Z+5, r1	; 0x05
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set 
    426e:	11 82       	std	Z+1, r1	; 0x01
    4270:	10 82       	st	Z, r1
    4272:	25 5f       	subi	r18, 0xF5	; 245
    4274:	3f 4f       	sbci	r19, 0xFF	; 255
    4276:	3b 96       	adiw	r30, 0x0b	; 11
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    4278:	22 34       	cpi	r18, 0x42	; 66
    427a:	31 05       	cpc	r19, r1
    427c:	69 f7       	brne	.-38     	; 0x4258 <_ZN15TimeAlarmsClassC1Ev+0xc>
{
  isServicing = false;
    427e:	ae 5b       	subi	r26, 0xBE	; 190
    4280:	bf 4f       	sbci	r27, 0xFF	; 255
    4282:	1c 92       	st	X, r1
    4284:	a2 54       	subi	r26, 0x42	; 66
    4286:	b0 40       	sbci	r27, 0x00	; 0
    4288:	ed 01       	movw	r28, r26
    428a:	20 e0       	ldi	r18, 0x00	; 0
    428c:	30 e0       	ldi	r19, 0x00	; 0
     }
     
     // returns true if this id is allocated
     bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
     {
        return( ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated );
    428e:	4b e0       	ldi	r20, 0x0B	; 11
    4290:	50 e0       	ldi	r21, 0x00	; 0
    4292:	24 9f       	mul	r18, r20
    4294:	f0 01       	movw	r30, r0
    4296:	25 9f       	mul	r18, r21
    4298:	f0 0d       	add	r31, r0
    429a:	34 9f       	mul	r19, r20
    429c:	f0 0d       	add	r31, r0
    429e:	11 24       	eor	r1, r1
    42a0:	ea 0f       	add	r30, r26
    42a2:	fb 1f       	adc	r31, r27
    42a4:	92 85       	ldd	r25, Z+10	; 0x0a
    42a6:	89 2f       	mov	r24, r25
    42a8:	8f 70       	andi	r24, 0x0F	; 15
    42aa:	61 f0       	breq	.+24     	; 0x42c4 <_ZN15TimeAlarmsClassC1Ev+0x78>
    void TimeAlarmsClass::free(AlarmID_t ID)
    {
      if(isAllocated(ID))
      {
        Alarm[ID].Mode.isEnabled = false;
    	Alarm[ID].Mode.alarmType = dtNotAllocated;
    42ac:	90 7e       	andi	r25, 0xE0	; 224
    42ae:	92 87       	std	Z+10, r25	; 0x0a
        Alarm[ID].onTickHandler = 0;
    42b0:	19 82       	std	Y+1, r1	; 0x01
    42b2:	18 82       	st	Y, r1
    	Alarm[ID].value = 0;
    42b4:	1a 82       	std	Y+2, r1	; 0x02
    42b6:	1b 82       	std	Y+3, r1	; 0x03
    42b8:	1c 82       	std	Y+4, r1	; 0x04
    42ba:	1d 82       	std	Y+5, r1	; 0x05
    	Alarm[ID].nextTrigger = 0;   	
    42bc:	1e 82       	std	Y+6, r1	; 0x06
    42be:	1f 82       	std	Y+7, r1	; 0x07
    42c0:	18 86       	std	Y+8, r1	; 0x08
    42c2:	19 86       	std	Y+9, r1	; 0x09
    42c4:	2f 5f       	subi	r18, 0xFF	; 255
    42c6:	3f 4f       	sbci	r19, 0xFF	; 255
    42c8:	2b 96       	adiw	r28, 0x0b	; 11
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
  for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
    42ca:	26 30       	cpi	r18, 0x06	; 6
    42cc:	31 05       	cpc	r19, r1
    42ce:	09 f7       	brne	.-62     	; 0x4292 <_ZN15TimeAlarmsClassC1Ev+0x46>
     free(id);   // ensure  all Alarms are cleared and available for allocation  
}
    42d0:	df 91       	pop	r29
    42d2:	cf 91       	pop	r28
    42d4:	08 95       	ret

000042d6 <_GLOBAL__I__ZN10AlarmClassC2Ev>:
      }
      return dtINVALID_ALARM_ID; // no IDs available or time is invalid
    }
    
    // make one instance for the user to use
    TimeAlarmsClass Alarm = TimeAlarmsClass() ;
    42d6:	81 e2       	ldi	r24, 0x21	; 33
    42d8:	92 e0       	ldi	r25, 0x02	; 2
    42da:	0e 94 26 21 	call	0x424c	; 0x424c <_ZN15TimeAlarmsClassC1Ev>
    42de:	08 95       	ret

000042e0 <_ZN10AlarmClass17updateNextTriggerEv>:

//**************************************************************
//* Private Methods

 
void AlarmClass::updateNextTrigger()
    42e0:	2f 92       	push	r2
    42e2:	3f 92       	push	r3
    42e4:	4f 92       	push	r4
    42e6:	5f 92       	push	r5
    42e8:	6f 92       	push	r6
    42ea:	7f 92       	push	r7
    42ec:	8f 92       	push	r8
    42ee:	9f 92       	push	r9
    42f0:	af 92       	push	r10
    42f2:	bf 92       	push	r11
    42f4:	cf 92       	push	r12
    42f6:	df 92       	push	r13
    42f8:	ef 92       	push	r14
    42fa:	ff 92       	push	r15
    42fc:	0f 93       	push	r16
    42fe:	1f 93       	push	r17
    4300:	df 93       	push	r29
    4302:	cf 93       	push	r28
    4304:	00 d0       	rcall	.+0      	; 0x4306 <_ZN10AlarmClass17updateNextTriggerEv+0x26>
    4306:	00 d0       	rcall	.+0      	; 0x4308 <_ZN10AlarmClass17updateNextTriggerEv+0x28>
    4308:	00 d0       	rcall	.+0      	; 0x430a <_ZN10AlarmClass17updateNextTriggerEv+0x2a>
    430a:	cd b7       	in	r28, 0x3d	; 61
    430c:	de b7       	in	r29, 0x3e	; 62
    430e:	9e 83       	std	Y+6, r25	; 0x06
    4310:	8d 83       	std	Y+5, r24	; 0x05
{  
  if( (value != 0) && Mode.isEnabled )
    4312:	fc 01       	movw	r30, r24
    4314:	82 81       	ldd	r24, Z+2	; 0x02
    4316:	93 81       	ldd	r25, Z+3	; 0x03
    4318:	a4 81       	ldd	r26, Z+4	; 0x04
    431a:	b5 81       	ldd	r27, Z+5	; 0x05
    431c:	00 97       	sbiw	r24, 0x00	; 0
    431e:	a1 05       	cpc	r26, r1
    4320:	b1 05       	cpc	r27, r1
    4322:	09 f4       	brne	.+2      	; 0x4326 <_ZN10AlarmClass17updateNextTriggerEv+0x46>
    4324:	5b c1       	rjmp	.+694    	; 0x45dc <_ZN10AlarmClass17updateNextTriggerEv+0x2fc>
    4326:	82 85       	ldd	r24, Z+10	; 0x0a
    4328:	84 ff       	sbrs	r24, 4
    432a:	58 c1       	rjmp	.+688    	; 0x45dc <_ZN10AlarmClass17updateNextTriggerEv+0x2fc>
  {
    time_t time = now();
    432c:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <_Z3nowv>
    4330:	69 83       	std	Y+1, r22	; 0x01
    4332:	7a 83       	std	Y+2, r23	; 0x02
    4334:	8b 83       	std	Y+3, r24	; 0x03
    4336:	9c 83       	std	Y+4, r25	; 0x04
    if( dtIsAlarm(Mode.alarmType) && nextTrigger <= time )   // update alarm if next trigger is not yet in the future
    4338:	ad 81       	ldd	r26, Y+5	; 0x05
    433a:	be 81       	ldd	r27, Y+6	; 0x06
    433c:	1a 96       	adiw	r26, 0x0a	; 10
    433e:	3c 91       	ld	r19, X
    4340:	1a 97       	sbiw	r26, 0x0a	; 10
    4342:	23 2f       	mov	r18, r19
    4344:	2f 70       	andi	r18, 0x0F	; 15
    4346:	82 2f       	mov	r24, r18
    4348:	82 5f       	subi	r24, 0xF2	; 242
    434a:	8f 70       	andi	r24, 0x0F	; 15
    434c:	83 30       	cpi	r24, 0x03	; 3
    434e:	08 f0       	brcs	.+2      	; 0x4352 <_ZN10AlarmClass17updateNextTriggerEv+0x72>
    4350:	28 c1       	rjmp	.+592    	; 0x45a2 <_ZN10AlarmClass17updateNextTriggerEv+0x2c2>
    4352:	16 96       	adiw	r26, 0x06	; 6
    4354:	8d 91       	ld	r24, X+
    4356:	9d 91       	ld	r25, X+
    4358:	0d 90       	ld	r0, X+
    435a:	bc 91       	ld	r27, X
    435c:	a0 2d       	mov	r26, r0
    435e:	49 81       	ldd	r20, Y+1	; 0x01
    4360:	5a 81       	ldd	r21, Y+2	; 0x02
    4362:	6b 81       	ldd	r22, Y+3	; 0x03
    4364:	7c 81       	ldd	r23, Y+4	; 0x04
    4366:	48 17       	cp	r20, r24
    4368:	59 07       	cpc	r21, r25
    436a:	6a 07       	cpc	r22, r26
    436c:	7b 07       	cpc	r23, r27
    436e:	08 f4       	brcc	.+2      	; 0x4372 <_ZN10AlarmClass17updateNextTriggerEv+0x92>
    4370:	18 c1       	rjmp	.+560    	; 0x45a2 <_ZN10AlarmClass17updateNextTriggerEv+0x2c2>
    {      
      if(Mode.alarmType == dtExplicitAlarm ) // is the value a specific date and time in the future
    4372:	22 30       	cpi	r18, 0x02	; 2
    4374:	59 f4       	brne	.+22     	; 0x438c <_ZN10AlarmClass17updateNextTriggerEv+0xac>
      {
        nextTrigger = value;  // yes, trigger on this value   
    4376:	ed 81       	ldd	r30, Y+5	; 0x05
    4378:	fe 81       	ldd	r31, Y+6	; 0x06
    437a:	82 81       	ldd	r24, Z+2	; 0x02
    437c:	93 81       	ldd	r25, Z+3	; 0x03
    437e:	a4 81       	ldd	r26, Z+4	; 0x04
    4380:	b5 81       	ldd	r27, Z+5	; 0x05
    4382:	86 83       	std	Z+6, r24	; 0x06
    4384:	97 83       	std	Z+7, r25	; 0x07
    4386:	a0 87       	std	Z+8, r26	; 0x08
    4388:	b1 87       	std	Z+9, r27	; 0x09
    438a:	0b c1       	rjmp	.+534    	; 0x45a2 <_ZN10AlarmClass17updateNextTriggerEv+0x2c2>
      }
      else if(Mode.alarmType == dtDailyAlarm)  //if this is a daily alarm
    438c:	23 30       	cpi	r18, 0x03	; 3
    438e:	09 f0       	breq	.+2      	; 0x4392 <_ZN10AlarmClass17updateNextTriggerEv+0xb2>
    4390:	61 c0       	rjmp	.+194    	; 0x4454 <_ZN10AlarmClass17updateNextTriggerEv+0x174>
      {
        if( value + previousMidnight(now()) <= time)
    4392:	ad 81       	ldd	r26, Y+5	; 0x05
    4394:	be 81       	ldd	r27, Y+6	; 0x06
    4396:	12 96       	adiw	r26, 0x02	; 2
    4398:	ed 90       	ld	r14, X+
    439a:	fd 90       	ld	r15, X+
    439c:	0d 91       	ld	r16, X+
    439e:	1c 91       	ld	r17, X
    43a0:	15 97       	sbiw	r26, 0x05	; 5
    43a2:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <_Z3nowv>
    43a6:	20 e8       	ldi	r18, 0x80	; 128
    43a8:	31 e5       	ldi	r19, 0x51	; 81
    43aa:	41 e0       	ldi	r20, 0x01	; 1
    43ac:	50 e0       	ldi	r21, 0x00	; 0
    43ae:	0e 94 22 3c 	call	0x7844	; 0x7844 <__udivmodsi4>
    43b2:	ca 01       	movw	r24, r20
    43b4:	b9 01       	movw	r22, r18
    43b6:	20 e8       	ldi	r18, 0x80	; 128
    43b8:	31 e5       	ldi	r19, 0x51	; 81
    43ba:	41 e0       	ldi	r20, 0x01	; 1
    43bc:	50 e0       	ldi	r21, 0x00	; 0
    43be:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <__mulsi3>
    43c2:	e6 0e       	add	r14, r22
    43c4:	f7 1e       	adc	r15, r23
    43c6:	08 1f       	adc	r16, r24
    43c8:	19 1f       	adc	r17, r25
    43ca:	ed 81       	ldd	r30, Y+5	; 0x05
    43cc:	fe 81       	ldd	r31, Y+6	; 0x06
    43ce:	a2 80       	ldd	r10, Z+2	; 0x02
    43d0:	b3 80       	ldd	r11, Z+3	; 0x03
    43d2:	c4 80       	ldd	r12, Z+4	; 0x04
    43d4:	d5 80       	ldd	r13, Z+5	; 0x05
    43d6:	29 81       	ldd	r18, Y+1	; 0x01
    43d8:	3a 81       	ldd	r19, Y+2	; 0x02
    43da:	4b 81       	ldd	r20, Y+3	; 0x03
    43dc:	5c 81       	ldd	r21, Y+4	; 0x04
    43de:	2e 15       	cp	r18, r14
    43e0:	3f 05       	cpc	r19, r15
    43e2:	40 07       	cpc	r20, r16
    43e4:	51 07       	cpc	r21, r17
    43e6:	c8 f0       	brcs	.+50     	; 0x441a <_ZN10AlarmClass17updateNextTriggerEv+0x13a>
        {
          nextTrigger = value + nextMidnight(time); // if time has passed then set for tomorrow
    43e8:	ca 01       	movw	r24, r20
    43ea:	b9 01       	movw	r22, r18
    43ec:	20 e8       	ldi	r18, 0x80	; 128
    43ee:	31 e5       	ldi	r19, 0x51	; 81
    43f0:	41 e0       	ldi	r20, 0x01	; 1
    43f2:	50 e0       	ldi	r21, 0x00	; 0
    43f4:	0e 94 22 3c 	call	0x7844	; 0x7844 <__udivmodsi4>
    43f8:	2f 5f       	subi	r18, 0xFF	; 255
    43fa:	3f 4f       	sbci	r19, 0xFF	; 255
    43fc:	4f 4f       	sbci	r20, 0xFF	; 255
    43fe:	5f 4f       	sbci	r21, 0xFF	; 255
    4400:	ca 01       	movw	r24, r20
    4402:	b9 01       	movw	r22, r18
    4404:	20 e8       	ldi	r18, 0x80	; 128
    4406:	31 e5       	ldi	r19, 0x51	; 81
    4408:	41 e0       	ldi	r20, 0x01	; 1
    440a:	50 e0       	ldi	r21, 0x00	; 0
    440c:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <__mulsi3>
    4410:	a6 0e       	add	r10, r22
    4412:	b7 1e       	adc	r11, r23
    4414:	c8 1e       	adc	r12, r24
    4416:	d9 1e       	adc	r13, r25
    4418:	ac c0       	rjmp	.+344    	; 0x4572 <_ZN10AlarmClass17updateNextTriggerEv+0x292>
        }
        else
        {
          nextTrigger = value + previousMidnight(time);  // set the date to today and add the time given in value   
    441a:	69 81       	ldd	r22, Y+1	; 0x01
    441c:	7a 81       	ldd	r23, Y+2	; 0x02
    441e:	8b 81       	ldd	r24, Y+3	; 0x03
    4420:	9c 81       	ldd	r25, Y+4	; 0x04
    4422:	20 e8       	ldi	r18, 0x80	; 128
    4424:	31 e5       	ldi	r19, 0x51	; 81
    4426:	41 e0       	ldi	r20, 0x01	; 1
    4428:	50 e0       	ldi	r21, 0x00	; 0
    442a:	0e 94 22 3c 	call	0x7844	; 0x7844 <__udivmodsi4>
    442e:	ca 01       	movw	r24, r20
    4430:	b9 01       	movw	r22, r18
    4432:	20 e8       	ldi	r18, 0x80	; 128
    4434:	31 e5       	ldi	r19, 0x51	; 81
    4436:	41 e0       	ldi	r20, 0x01	; 1
    4438:	50 e0       	ldi	r21, 0x00	; 0
    443a:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <__mulsi3>
    443e:	a6 0e       	add	r10, r22
    4440:	b7 1e       	adc	r11, r23
    4442:	c8 1e       	adc	r12, r24
    4444:	d9 1e       	adc	r13, r25
    4446:	ed 81       	ldd	r30, Y+5	; 0x05
    4448:	fe 81       	ldd	r31, Y+6	; 0x06
    444a:	a6 82       	std	Z+6, r10	; 0x06
    444c:	b7 82       	std	Z+7, r11	; 0x07
    444e:	c0 86       	std	Z+8, r12	; 0x08
    4450:	d1 86       	std	Z+9, r13	; 0x09
    4452:	a7 c0       	rjmp	.+334    	; 0x45a2 <_ZN10AlarmClass17updateNextTriggerEv+0x2c2>
        }
      }
      else if(Mode.alarmType == dtWeeklyAlarm)  // if this is a weekly alarm
    4454:	24 30       	cpi	r18, 0x04	; 4
    4456:	09 f0       	breq	.+2      	; 0x445a <_ZN10AlarmClass17updateNextTriggerEv+0x17a>
    4458:	a0 c0       	rjmp	.+320    	; 0x459a <_ZN10AlarmClass17updateNextTriggerEv+0x2ba>
      {
        if( (value + previousSunday(now())) <= time)
    445a:	ad 81       	ldd	r26, Y+5	; 0x05
    445c:	be 81       	ldd	r27, Y+6	; 0x06
    445e:	12 96       	adiw	r26, 0x02	; 2
    4460:	6d 90       	ld	r6, X+
    4462:	7d 90       	ld	r7, X+
    4464:	8d 90       	ld	r8, X+
    4466:	9c 90       	ld	r9, X
    4468:	15 97       	sbiw	r26, 0x05	; 5
    446a:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <_Z3nowv>
    446e:	7b 01       	movw	r14, r22
    4470:	8c 01       	movw	r16, r24
    4472:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <_Z3nowv>
    4476:	5b 01       	movw	r10, r22
    4478:	6c 01       	movw	r12, r24
    447a:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <_Z3nowv>
    447e:	1b 01       	movw	r2, r22
    4480:	2c 01       	movw	r4, r24
    4482:	e6 0c       	add	r14, r6
    4484:	f7 1c       	adc	r15, r7
    4486:	08 1d       	adc	r16, r8
    4488:	19 1d       	adc	r17, r9
    448a:	c6 01       	movw	r24, r12
    448c:	b5 01       	movw	r22, r10
    448e:	20 e8       	ldi	r18, 0x80	; 128
    4490:	31 e5       	ldi	r19, 0x51	; 81
    4492:	41 e0       	ldi	r20, 0x01	; 1
    4494:	50 e0       	ldi	r21, 0x00	; 0
    4496:	0e 94 22 3c 	call	0x7844	; 0x7844 <__udivmodsi4>
    449a:	e6 1a       	sub	r14, r22
    449c:	f7 0a       	sbc	r15, r23
    449e:	08 0b       	sbc	r16, r24
    44a0:	19 0b       	sbc	r17, r25
    44a2:	c2 01       	movw	r24, r4
    44a4:	b1 01       	movw	r22, r2
    44a6:	20 e8       	ldi	r18, 0x80	; 128
    44a8:	31 e5       	ldi	r19, 0x51	; 81
    44aa:	41 e0       	ldi	r20, 0x01	; 1
    44ac:	50 e0       	ldi	r21, 0x00	; 0
    44ae:	0e 94 22 3c 	call	0x7844	; 0x7844 <__udivmodsi4>
    44b2:	2c 5f       	subi	r18, 0xFC	; 252
    44b4:	3f 4f       	sbci	r19, 0xFF	; 255
    44b6:	4f 4f       	sbci	r20, 0xFF	; 255
    44b8:	5f 4f       	sbci	r21, 0xFF	; 255
    44ba:	ca 01       	movw	r24, r20
    44bc:	b9 01       	movw	r22, r18
    44be:	27 e0       	ldi	r18, 0x07	; 7
    44c0:	30 e0       	ldi	r19, 0x00	; 0
    44c2:	40 e0       	ldi	r20, 0x00	; 0
    44c4:	50 e0       	ldi	r21, 0x00	; 0
    44c6:	0e 94 22 3c 	call	0x7844	; 0x7844 <__udivmodsi4>
    44ca:	20 e8       	ldi	r18, 0x80	; 128
    44cc:	31 e5       	ldi	r19, 0x51	; 81
    44ce:	41 e0       	ldi	r20, 0x01	; 1
    44d0:	50 e0       	ldi	r21, 0x00	; 0
    44d2:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <__mulsi3>
    44d6:	e6 1a       	sub	r14, r22
    44d8:	f7 0a       	sbc	r15, r23
    44da:	08 0b       	sbc	r16, r24
    44dc:	19 0b       	sbc	r17, r25
    44de:	ed 81       	ldd	r30, Y+5	; 0x05
    44e0:	fe 81       	ldd	r31, Y+6	; 0x06
    44e2:	a2 80       	ldd	r10, Z+2	; 0x02
    44e4:	b3 80       	ldd	r11, Z+3	; 0x03
    44e6:	c4 80       	ldd	r12, Z+4	; 0x04
    44e8:	d5 80       	ldd	r13, Z+5	; 0x05
    44ea:	29 81       	ldd	r18, Y+1	; 0x01
    44ec:	3a 81       	ldd	r19, Y+2	; 0x02
    44ee:	4b 81       	ldd	r20, Y+3	; 0x03
    44f0:	5c 81       	ldd	r21, Y+4	; 0x04
    44f2:	2e 15       	cp	r18, r14
    44f4:	3f 05       	cpc	r19, r15
    44f6:	40 07       	cpc	r20, r16
    44f8:	51 07       	cpc	r21, r17
    44fa:	08 f4       	brcc	.+2      	; 0x44fe <_ZN10AlarmClass17updateNextTriggerEv+0x21e>
    44fc:	43 c0       	rjmp	.+134    	; 0x4584 <_ZN10AlarmClass17updateNextTriggerEv+0x2a4>
        {
          nextTrigger = value + nextSunday(time); // if day has passed then set for the next week.
    44fe:	40 e8       	ldi	r20, 0x80	; 128
    4500:	5a e3       	ldi	r21, 0x3A	; 58
    4502:	69 e0       	ldi	r22, 0x09	; 9
    4504:	70 e0       	ldi	r23, 0x00	; 0
    4506:	a4 0e       	add	r10, r20
    4508:	b5 1e       	adc	r11, r21
    450a:	c6 1e       	adc	r12, r22
    450c:	d7 1e       	adc	r13, r23
    450e:	69 81       	ldd	r22, Y+1	; 0x01
    4510:	7a 81       	ldd	r23, Y+2	; 0x02
    4512:	8b 81       	ldd	r24, Y+3	; 0x03
    4514:	9c 81       	ldd	r25, Y+4	; 0x04
    4516:	a6 0e       	add	r10, r22
    4518:	b7 1e       	adc	r11, r23
    451a:	c8 1e       	adc	r12, r24
    451c:	d9 1e       	adc	r13, r25
    451e:	20 e8       	ldi	r18, 0x80	; 128
    4520:	31 e5       	ldi	r19, 0x51	; 81
    4522:	41 e0       	ldi	r20, 0x01	; 1
    4524:	50 e0       	ldi	r21, 0x00	; 0
    4526:	0e 94 22 3c 	call	0x7844	; 0x7844 <__udivmodsi4>
    452a:	a6 1a       	sub	r10, r22
    452c:	b7 0a       	sbc	r11, r23
    452e:	c8 0a       	sbc	r12, r24
    4530:	d9 0a       	sbc	r13, r25
    4532:	69 81       	ldd	r22, Y+1	; 0x01
    4534:	7a 81       	ldd	r23, Y+2	; 0x02
    4536:	8b 81       	ldd	r24, Y+3	; 0x03
    4538:	9c 81       	ldd	r25, Y+4	; 0x04
    453a:	20 e8       	ldi	r18, 0x80	; 128
    453c:	31 e5       	ldi	r19, 0x51	; 81
    453e:	41 e0       	ldi	r20, 0x01	; 1
    4540:	50 e0       	ldi	r21, 0x00	; 0
    4542:	0e 94 22 3c 	call	0x7844	; 0x7844 <__udivmodsi4>
    4546:	2c 5f       	subi	r18, 0xFC	; 252
    4548:	3f 4f       	sbci	r19, 0xFF	; 255
    454a:	4f 4f       	sbci	r20, 0xFF	; 255
    454c:	5f 4f       	sbci	r21, 0xFF	; 255
    454e:	ca 01       	movw	r24, r20
    4550:	b9 01       	movw	r22, r18
    4552:	27 e0       	ldi	r18, 0x07	; 7
    4554:	30 e0       	ldi	r19, 0x00	; 0
    4556:	40 e0       	ldi	r20, 0x00	; 0
    4558:	50 e0       	ldi	r21, 0x00	; 0
    455a:	0e 94 22 3c 	call	0x7844	; 0x7844 <__udivmodsi4>
    455e:	20 e8       	ldi	r18, 0x80	; 128
    4560:	31 e5       	ldi	r19, 0x51	; 81
    4562:	41 e0       	ldi	r20, 0x01	; 1
    4564:	50 e0       	ldi	r21, 0x00	; 0
    4566:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <__mulsi3>
    456a:	a6 1a       	sub	r10, r22
    456c:	b7 0a       	sbc	r11, r23
    456e:	c8 0a       	sbc	r12, r24
    4570:	d9 0a       	sbc	r13, r25
    4572:	ad 81       	ldd	r26, Y+5	; 0x05
    4574:	be 81       	ldd	r27, Y+6	; 0x06
    4576:	16 96       	adiw	r26, 0x06	; 6
    4578:	ad 92       	st	X+, r10
    457a:	bd 92       	st	X+, r11
    457c:	cd 92       	st	X+, r12
    457e:	dc 92       	st	X, r13
    4580:	19 97       	sbiw	r26, 0x09	; 9
    4582:	0f c0       	rjmp	.+30     	; 0x45a2 <_ZN10AlarmClass17updateNextTriggerEv+0x2c2>
        }
        else
        {
          nextTrigger = value + previousSunday(time);  // set the date to this week today and add the time given in value 
    4584:	29 81       	ldd	r18, Y+1	; 0x01
    4586:	3a 81       	ldd	r19, Y+2	; 0x02
    4588:	4b 81       	ldd	r20, Y+3	; 0x03
    458a:	5c 81       	ldd	r21, Y+4	; 0x04
    458c:	a2 0e       	add	r10, r18
    458e:	b3 1e       	adc	r11, r19
    4590:	c4 1e       	adc	r12, r20
    4592:	d5 1e       	adc	r13, r21
    4594:	ca 01       	movw	r24, r20
    4596:	b9 01       	movw	r22, r18
    4598:	c2 cf       	rjmp	.-124    	; 0x451e <_ZN10AlarmClass17updateNextTriggerEv+0x23e>
        } 
      }
      else  // its not a recognized alarm type - this should not happen 
      {
        Mode.isEnabled = 0;  // Disable the alarm
    459a:	3f 7e       	andi	r19, 0xEF	; 239
    459c:	ed 81       	ldd	r30, Y+5	; 0x05
    459e:	fe 81       	ldd	r31, Y+6	; 0x06
    45a0:	32 87       	std	Z+10, r19	; 0x0a
      }	  
    }
    if( Mode.alarmType == dtTimer)
    45a2:	ad 81       	ldd	r26, Y+5	; 0x05
    45a4:	be 81       	ldd	r27, Y+6	; 0x06
    45a6:	1a 96       	adiw	r26, 0x0a	; 10
    45a8:	8c 91       	ld	r24, X
    45aa:	1a 97       	sbiw	r26, 0x0a	; 10
    45ac:	8f 70       	andi	r24, 0x0F	; 15
    45ae:	81 30       	cpi	r24, 0x01	; 1
    45b0:	e9 f4       	brne	.+58     	; 0x45ec <_ZN10AlarmClass17updateNextTriggerEv+0x30c>
    {
      // its a timer
      nextTrigger = time + value;  // add the value to previous time (this ensures delay always at least Value seconds)
    45b2:	12 96       	adiw	r26, 0x02	; 2
    45b4:	8d 91       	ld	r24, X+
    45b6:	9d 91       	ld	r25, X+
    45b8:	0d 90       	ld	r0, X+
    45ba:	bc 91       	ld	r27, X
    45bc:	a0 2d       	mov	r26, r0
    45be:	29 81       	ldd	r18, Y+1	; 0x01
    45c0:	3a 81       	ldd	r19, Y+2	; 0x02
    45c2:	4b 81       	ldd	r20, Y+3	; 0x03
    45c4:	5c 81       	ldd	r21, Y+4	; 0x04
    45c6:	82 0f       	add	r24, r18
    45c8:	93 1f       	adc	r25, r19
    45ca:	a4 1f       	adc	r26, r20
    45cc:	b5 1f       	adc	r27, r21
    45ce:	ed 81       	ldd	r30, Y+5	; 0x05
    45d0:	fe 81       	ldd	r31, Y+6	; 0x06
    45d2:	86 83       	std	Z+6, r24	; 0x06
    45d4:	97 83       	std	Z+7, r25	; 0x07
    45d6:	a0 87       	std	Z+8, r26	; 0x08
    45d8:	b1 87       	std	Z+9, r27	; 0x09
    45da:	08 c0       	rjmp	.+16     	; 0x45ec <_ZN10AlarmClass17updateNextTriggerEv+0x30c>
    }
  }
  else
  {
    Mode.isEnabled = 0;  // Disable if the value is 0
    45dc:	ad 81       	ldd	r26, Y+5	; 0x05
    45de:	be 81       	ldd	r27, Y+6	; 0x06
    45e0:	1a 96       	adiw	r26, 0x0a	; 10
    45e2:	8c 91       	ld	r24, X
    45e4:	1a 97       	sbiw	r26, 0x0a	; 10
    45e6:	8f 7e       	andi	r24, 0xEF	; 239
    45e8:	1a 96       	adiw	r26, 0x0a	; 10
    45ea:	8c 93       	st	X, r24
  }
}
    45ec:	26 96       	adiw	r28, 0x06	; 6
    45ee:	0f b6       	in	r0, 0x3f	; 63
    45f0:	f8 94       	cli
    45f2:	de bf       	out	0x3e, r29	; 62
    45f4:	0f be       	out	0x3f, r0	; 63
    45f6:	cd bf       	out	0x3d, r28	; 61
    45f8:	cf 91       	pop	r28
    45fa:	df 91       	pop	r29
    45fc:	1f 91       	pop	r17
    45fe:	0f 91       	pop	r16
    4600:	ff 90       	pop	r15
    4602:	ef 90       	pop	r14
    4604:	df 90       	pop	r13
    4606:	cf 90       	pop	r12
    4608:	bf 90       	pop	r11
    460a:	af 90       	pop	r10
    460c:	9f 90       	pop	r9
    460e:	8f 90       	pop	r8
    4610:	7f 90       	pop	r7
    4612:	6f 90       	pop	r6
    4614:	5f 90       	pop	r5
    4616:	4f 90       	pop	r4
    4618:	3f 90       	pop	r3
    461a:	2f 90       	pop	r2
    461c:	08 95       	ret

0000461e <_ZN15TimeAlarmsClass6enableEh>:
    
    AlarmID_t TimeAlarmsClass::timerRepeat(const int H,  const int M,  const int S, OnTick_t onTickHandler){ // trigger after the given number of seconds continuously
         return create( AlarmHMS(H,M,S), onTickHandler, IS_REPEAT, dtTimer);
    }
    
    void TimeAlarmsClass::enable(AlarmID_t ID)
    461e:	ac 01       	movw	r20, r24
     }
     
     // returns true if this id is allocated
     bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
     {
        return( ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated );
    4620:	66 30       	cpi	r22, 0x06	; 6
    4622:	98 f5       	brcc	.+102    	; 0x468a <_ZN15TimeAlarmsClass6enableEh+0x6c>
    4624:	70 e0       	ldi	r23, 0x00	; 0
    4626:	8b e0       	ldi	r24, 0x0B	; 11
    4628:	90 e0       	ldi	r25, 0x00	; 0
    462a:	68 9f       	mul	r22, r24
    462c:	f0 01       	movw	r30, r0
    462e:	69 9f       	mul	r22, r25
    4630:	f0 0d       	add	r31, r0
    4632:	78 9f       	mul	r23, r24
    4634:	f0 0d       	add	r31, r0
    4636:	11 24       	eor	r1, r1
    4638:	e4 0f       	add	r30, r20
    463a:	f5 1f       	adc	r31, r21
    463c:	82 85       	ldd	r24, Z+10	; 0x0a
    463e:	8f 70       	andi	r24, 0x0F	; 15
    4640:	21 f1       	breq	.+72     	; 0x468a <_ZN15TimeAlarmsClass6enableEh+0x6c>
    }
    
    void TimeAlarmsClass::enable(AlarmID_t ID)
    {
      if(isAllocated(ID)) {
        Alarm[ID].Mode.isEnabled = (Alarm[ID].value != 0) && (Alarm[ID].onTickHandler != 0) ;  // only enable if value is non zero and a tick handler has been set
    4642:	82 81       	ldd	r24, Z+2	; 0x02
    4644:	93 81       	ldd	r25, Z+3	; 0x03
    4646:	a4 81       	ldd	r26, Z+4	; 0x04
    4648:	b5 81       	ldd	r27, Z+5	; 0x05
    464a:	00 97       	sbiw	r24, 0x00	; 0
    464c:	a1 05       	cpc	r26, r1
    464e:	b1 05       	cpc	r27, r1
    4650:	11 f4       	brne	.+4      	; 0x4656 <_ZN15TimeAlarmsClass6enableEh+0x38>
    4652:	20 e0       	ldi	r18, 0x00	; 0
    4654:	06 c0       	rjmp	.+12     	; 0x4662 <_ZN15TimeAlarmsClass6enableEh+0x44>
    4656:	20 e0       	ldi	r18, 0x00	; 0
    4658:	80 81       	ld	r24, Z
    465a:	91 81       	ldd	r25, Z+1	; 0x01
    465c:	89 2b       	or	r24, r25
    465e:	09 f0       	breq	.+2      	; 0x4662 <_ZN15TimeAlarmsClass6enableEh+0x44>
    4660:	21 e0       	ldi	r18, 0x01	; 1
    4662:	8b e0       	ldi	r24, 0x0B	; 11
    4664:	90 e0       	ldi	r25, 0x00	; 0
    4666:	68 9f       	mul	r22, r24
    4668:	f0 01       	movw	r30, r0
    466a:	69 9f       	mul	r22, r25
    466c:	f0 0d       	add	r31, r0
    466e:	78 9f       	mul	r23, r24
    4670:	f0 0d       	add	r31, r0
    4672:	11 24       	eor	r1, r1
    4674:	e4 0f       	add	r30, r20
    4676:	f5 1f       	adc	r31, r21
    4678:	22 95       	swap	r18
    467a:	20 7f       	andi	r18, 0xF0	; 240
    467c:	82 85       	ldd	r24, Z+10	; 0x0a
    467e:	8f 7e       	andi	r24, 0xEF	; 239
    4680:	82 2b       	or	r24, r18
    4682:	82 87       	std	Z+10, r24	; 0x0a
        Alarm[ID].updateNextTrigger(); // trigger is updated whenever  this is called, even if already enabled	 
    4684:	cf 01       	movw	r24, r30
    4686:	0e 94 70 21 	call	0x42e0	; 0x42e0 <_ZN10AlarmClass17updateNextTriggerEv>
    468a:	08 95       	ret

0000468c <_ZN15TimeAlarmsClass13serviceAlarmsEv>:
    }
    
    //***********************************************************
    //* Private Methods
    
    void TimeAlarmsClass::serviceAlarms()
    468c:	cf 92       	push	r12
    468e:	df 92       	push	r13
    4690:	ef 92       	push	r14
    4692:	ff 92       	push	r15
    4694:	0f 93       	push	r16
    4696:	1f 93       	push	r17
    4698:	cf 93       	push	r28
    469a:	df 93       	push	r29
    469c:	ec 01       	movw	r28, r24
    {
      if(! isServicing)
    469e:	fc 01       	movw	r30, r24
    46a0:	ee 5b       	subi	r30, 0xBE	; 190
    46a2:	ff 4f       	sbci	r31, 0xFF	; 255
    46a4:	80 81       	ld	r24, Z
    46a6:	88 23       	and	r24, r24
    46a8:	09 f0       	breq	.+2      	; 0x46ac <_ZN15TimeAlarmsClass13serviceAlarmsEv+0x20>
    46aa:	5b c0       	rjmp	.+182    	; 0x4762 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xd6>
      {
        isServicing = true;
    46ac:	81 e0       	ldi	r24, 0x01	; 1
    46ae:	80 83       	st	Z, r24
        for( servicedAlarmId = 0; servicedAlarmId < dtNBR_ALARMS; servicedAlarmId++)
    46b0:	fe 01       	movw	r30, r28
    46b2:	ed 5b       	subi	r30, 0xBD	; 189
    46b4:	ff 4f       	sbci	r31, 0xFF	; 255
    46b6:	10 82       	st	Z, r1
    46b8:	8f 01       	movw	r16, r30
        {
          if( Alarm[servicedAlarmId].Mode.isEnabled && (now() >= Alarm[servicedAlarmId].nextTrigger)  )
    46ba:	9b e0       	ldi	r25, 0x0B	; 11
    46bc:	c9 2e       	mov	r12, r25
    46be:	d1 2c       	mov	r13, r1
    46c0:	48 c0       	rjmp	.+144    	; 0x4752 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xc6>
    46c2:	90 e0       	ldi	r25, 0x00	; 0
    46c4:	8c 9d       	mul	r24, r12
    46c6:	f0 01       	movw	r30, r0
    46c8:	8d 9d       	mul	r24, r13
    46ca:	f0 0d       	add	r31, r0
    46cc:	9c 9d       	mul	r25, r12
    46ce:	f0 0d       	add	r31, r0
    46d0:	11 24       	eor	r1, r1
    46d2:	ec 0f       	add	r30, r28
    46d4:	fd 1f       	adc	r31, r29
    46d6:	82 85       	ldd	r24, Z+10	; 0x0a
    46d8:	84 ff       	sbrs	r24, 4
    46da:	37 c0       	rjmp	.+110    	; 0x474a <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xbe>
    46dc:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <_Z3nowv>
    46e0:	f8 01       	movw	r30, r16
    46e2:	a0 81       	ld	r26, Z
    46e4:	2a 2f       	mov	r18, r26
    46e6:	30 e0       	ldi	r19, 0x00	; 0
    46e8:	2c 9d       	mul	r18, r12
    46ea:	f0 01       	movw	r30, r0
    46ec:	2d 9d       	mul	r18, r13
    46ee:	f0 0d       	add	r31, r0
    46f0:	3c 9d       	mul	r19, r12
    46f2:	f0 0d       	add	r31, r0
    46f4:	11 24       	eor	r1, r1
    46f6:	ec 0f       	add	r30, r28
    46f8:	fd 1f       	adc	r31, r29
    46fa:	26 81       	ldd	r18, Z+6	; 0x06
    46fc:	37 81       	ldd	r19, Z+7	; 0x07
    46fe:	40 85       	ldd	r20, Z+8	; 0x08
    4700:	51 85       	ldd	r21, Z+9	; 0x09
    4702:	62 17       	cp	r22, r18
    4704:	73 07       	cpc	r23, r19
    4706:	84 07       	cpc	r24, r20
    4708:	95 07       	cpc	r25, r21
    470a:	f8 f0       	brcs	.+62     	; 0x474a <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xbe>
          {
            OnTick_t TickHandler = Alarm[servicedAlarmId].onTickHandler;
    470c:	e0 80       	ld	r14, Z
    470e:	f1 80       	ldd	r15, Z+1	; 0x01
            if(Alarm[servicedAlarmId].Mode.isOneShot)
    4710:	92 85       	ldd	r25, Z+10	; 0x0a
    4712:	95 ff       	sbrs	r25, 5
    4714:	12 c0       	rjmp	.+36     	; 0x473a <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xae>
     }
     
     // returns true if this id is allocated
     bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
     {
        return( ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated );
    4716:	a6 30       	cpi	r26, 0x06	; 6
    4718:	98 f4       	brcc	.+38     	; 0x4740 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xb4>
    471a:	89 2f       	mov	r24, r25
    471c:	8f 70       	andi	r24, 0x0F	; 15
    471e:	81 f0       	breq	.+32     	; 0x4740 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xb4>
    void TimeAlarmsClass::free(AlarmID_t ID)
    {
      if(isAllocated(ID))
      {
        Alarm[ID].Mode.isEnabled = false;
    	Alarm[ID].Mode.alarmType = dtNotAllocated;
    4720:	90 7e       	andi	r25, 0xE0	; 224
    4722:	92 87       	std	Z+10, r25	; 0x0a
        Alarm[ID].onTickHandler = 0;
    4724:	11 82       	std	Z+1, r1	; 0x01
    4726:	10 82       	st	Z, r1
    	Alarm[ID].value = 0;
    4728:	12 82       	std	Z+2, r1	; 0x02
    472a:	13 82       	std	Z+3, r1	; 0x03
    472c:	14 82       	std	Z+4, r1	; 0x04
    472e:	15 82       	std	Z+5, r1	; 0x05
    	Alarm[ID].nextTrigger = 0;   	
    4730:	16 82       	std	Z+6, r1	; 0x06
    4732:	17 82       	std	Z+7, r1	; 0x07
    4734:	10 86       	std	Z+8, r1	; 0x08
    4736:	11 86       	std	Z+9, r1	; 0x09
    4738:	03 c0       	rjmp	.+6      	; 0x4740 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xb4>
          {
            OnTick_t TickHandler = Alarm[servicedAlarmId].onTickHandler;
            if(Alarm[servicedAlarmId].Mode.isOneShot)
               free(servicedAlarmId);  // free the ID if mode is OnShot		
            else   
               Alarm[servicedAlarmId].updateNextTrigger();
    473a:	cf 01       	movw	r24, r30
    473c:	0e 94 70 21 	call	0x42e0	; 0x42e0 <_ZN10AlarmClass17updateNextTriggerEv>
            if( TickHandler != NULL) {        
    4740:	e1 14       	cp	r14, r1
    4742:	f1 04       	cpc	r15, r1
    4744:	11 f0       	breq	.+4      	; 0x474a <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xbe>
              (*TickHandler)();     // call the handler  
    4746:	f7 01       	movw	r30, r14
    4748:	09 95       	icall
    void TimeAlarmsClass::serviceAlarms()
    {
      if(! isServicing)
      {
        isServicing = true;
        for( servicedAlarmId = 0; servicedAlarmId < dtNBR_ALARMS; servicedAlarmId++)
    474a:	f8 01       	movw	r30, r16
    474c:	80 81       	ld	r24, Z
    474e:	8f 5f       	subi	r24, 0xFF	; 255
    4750:	80 83       	st	Z, r24
    4752:	f8 01       	movw	r30, r16
    4754:	80 81       	ld	r24, Z
    4756:	86 30       	cpi	r24, 0x06	; 6
    4758:	08 f4       	brcc	.+2      	; 0x475c <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xd0>
    475a:	b3 cf       	rjmp	.-154    	; 0x46c2 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0x36>
            if( TickHandler != NULL) {        
              (*TickHandler)();     // call the handler  
            }
          }
        }
        isServicing = false;
    475c:	ce 5b       	subi	r28, 0xBE	; 190
    475e:	df 4f       	sbci	r29, 0xFF	; 255
    4760:	18 82       	st	Y, r1
      }
    }
    4762:	df 91       	pop	r29
    4764:	cf 91       	pop	r28
    4766:	1f 91       	pop	r17
    4768:	0f 91       	pop	r16
    476a:	ff 90       	pop	r15
    476c:	ef 90       	pop	r14
    476e:	df 90       	pop	r13
    4770:	cf 90       	pop	r12
    4772:	08 95       	ret

00004774 <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th>:
    	}
        return nextTrigger == 0xffffffff ? 0 : nextTrigger;  	
     }
    
    // attempt to create an alarm and return true if successful
    AlarmID_t TimeAlarmsClass::create( time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType, uint8_t isEnabled) 
    4774:	4f 92       	push	r4
    4776:	5f 92       	push	r5
    4778:	6f 92       	push	r6
    477a:	7f 92       	push	r7
    477c:	8f 92       	push	r8
    477e:	9f 92       	push	r9
    4780:	af 92       	push	r10
    4782:	bf 92       	push	r11
    4784:	cf 92       	push	r12
    4786:	ef 92       	push	r14
    4788:	ff 92       	push	r15
    478a:	0f 93       	push	r16
    478c:	1f 93       	push	r17
    478e:	cf 93       	push	r28
    4790:	df 93       	push	r29
    4792:	2c 01       	movw	r4, r24
    4794:	4a 01       	movw	r8, r20
    4796:	5b 01       	movw	r10, r22
    4798:	39 01       	movw	r6, r18
    479a:	e7 01       	movw	r28, r14
    {
      if( ! (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR)) // only create alarm ids if the time is at least Jan 1 1971
    479c:	c7 01       	movw	r24, r14
    479e:	02 97       	sbiw	r24, 0x02	; 2
    47a0:	03 97       	sbiw	r24, 0x03	; 3
    47a2:	38 f4       	brcc	.+14     	; 0x47b2 <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0x3e>
    47a4:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <_Z3nowv>
    47a8:	60 50       	subi	r22, 0x00	; 0
    47aa:	72 4e       	sbci	r23, 0xE2	; 226
    47ac:	8f 4d       	sbci	r24, 0xDF	; 223
    47ae:	91 40       	sbci	r25, 0x01	; 1
    47b0:	c0 f1       	brcs	.+112    	; 0x4822 <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xae>
    47b2:	60 e0       	ldi	r22, 0x00	; 0
    47b4:	70 e0       	ldi	r23, 0x00	; 0
      {  
    	for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
        {
          if( Alarm[id].Mode.alarmType == dtNotAllocated )
    47b6:	2b e0       	ldi	r18, 0x0B	; 11
    47b8:	30 e0       	ldi	r19, 0x00	; 0
     }
    
    // attempt to create an alarm and return true if successful
    AlarmID_t TimeAlarmsClass::create( time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType, uint8_t isEnabled) 
    {
      if( ! (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR)) // only create alarm ids if the time is at least Jan 1 1971
    47ba:	16 2f       	mov	r17, r22
      {  
    	for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
        {
          if( Alarm[id].Mode.alarmType == dtNotAllocated )
    47bc:	62 9f       	mul	r22, r18
    47be:	f0 01       	movw	r30, r0
    47c0:	63 9f       	mul	r22, r19
    47c2:	f0 0d       	add	r31, r0
    47c4:	72 9f       	mul	r23, r18
    47c6:	f0 0d       	add	r31, r0
    47c8:	11 24       	eor	r1, r1
    47ca:	e4 0d       	add	r30, r4
    47cc:	f5 1d       	adc	r31, r5
    47ce:	df 01       	movw	r26, r30
    47d0:	1a 96       	adiw	r26, 0x0a	; 10
    47d2:	82 85       	ldd	r24, Z+10	; 0x0a
    47d4:	8f 70       	andi	r24, 0x0F	; 15
    47d6:	01 f5       	brne	.+64     	; 0x4818 <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xa4>
    	  {
    	  // here if there is an Alarm id that is not allocated
      	    Alarm[id].onTickHandler = onTickHandler;
    47d8:	71 82       	std	Z+1, r7	; 0x01
    47da:	60 82       	st	Z, r6
    	    Alarm[id].Mode.isOneShot = isOneShot;
    47dc:	01 70       	andi	r16, 0x01	; 1
    47de:	02 95       	swap	r16
    47e0:	00 0f       	add	r16, r16
    47e2:	00 7e       	andi	r16, 0xE0	; 224
    47e4:	8c 91       	ld	r24, X
    47e6:	80 7d       	andi	r24, 0xD0	; 208
    	    Alarm[id].Mode.alarmType = alarmType;
    47e8:	9e 01       	movw	r18, r28
    47ea:	2f 70       	andi	r18, 0x0F	; 15
    47ec:	80 2b       	or	r24, r16
    47ee:	82 2b       	or	r24, r18
    47f0:	8c 93       	st	X, r24
    	    Alarm[id].value = value;
    47f2:	82 82       	std	Z+2, r8	; 0x02
    47f4:	93 82       	std	Z+3, r9	; 0x03
    47f6:	a4 82       	std	Z+4, r10	; 0x04
    47f8:	b5 82       	std	Z+5, r11	; 0x05
    	    isEnabled ?  enable(id) : disable(id);   
    47fa:	cc 20       	and	r12, r12
    47fc:	21 f0       	breq	.+8      	; 0x4806 <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0x92>
    47fe:	c2 01       	movw	r24, r4
    4800:	0e 94 0f 23 	call	0x461e	; 0x461e <_ZN15TimeAlarmsClass6enableEh>
    4804:	0f c0       	rjmp	.+30     	; 0x4824 <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xb0>
     }
     
     // returns true if this id is allocated
     bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
     {
        return( ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated );
    4806:	66 30       	cpi	r22, 0x06	; 6
    4808:	68 f4       	brcc	.+26     	; 0x4824 <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xb0>
    480a:	9c 91       	ld	r25, X
    480c:	89 2f       	mov	r24, r25
    480e:	8f 70       	andi	r24, 0x0F	; 15
    4810:	49 f0       	breq	.+18     	; 0x4824 <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xb0>
    }
    
    void TimeAlarmsClass::disable(AlarmID_t ID)
    {
      if(isAllocated(ID))
        Alarm[ID].Mode.isEnabled = false;
    4812:	9f 7e       	andi	r25, 0xEF	; 239
    4814:	9c 93       	st	X, r25
    4816:	06 c0       	rjmp	.+12     	; 0x4824 <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xb0>
    4818:	6f 5f       	subi	r22, 0xFF	; 255
    481a:	7f 4f       	sbci	r23, 0xFF	; 255
    // attempt to create an alarm and return true if successful
    AlarmID_t TimeAlarmsClass::create( time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType, uint8_t isEnabled) 
    {
      if( ! (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR)) // only create alarm ids if the time is at least Jan 1 1971
      {  
    	for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
    481c:	66 30       	cpi	r22, 0x06	; 6
    481e:	71 05       	cpc	r23, r1
    4820:	61 f6       	brne	.-104    	; 0x47ba <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0x46>
    4822:	1f ef       	ldi	r17, 0xFF	; 255
            return id;  // alarm created ok
    	  }  
        }
      }
      return dtINVALID_ALARM_ID; // no IDs available or time is invalid
    }
    4824:	81 2f       	mov	r24, r17
    4826:	df 91       	pop	r29
    4828:	cf 91       	pop	r28
    482a:	1f 91       	pop	r17
    482c:	0f 91       	pop	r16
    482e:	ff 90       	pop	r15
    4830:	ef 90       	pop	r14
    4832:	cf 90       	pop	r12
    4834:	bf 90       	pop	r11
    4836:	af 90       	pop	r10
    4838:	9f 90       	pop	r9
    483a:	8f 90       	pop	r8
    483c:	7f 90       	pop	r7
    483e:	6f 90       	pop	r6
    4840:	5f 90       	pop	r5
    4842:	4f 90       	pop	r4
    4844:	08 95       	ret

00004846 <_ZN15TimeAlarmsClass11timerRepeatEmPFvvE>:
    
    AlarmID_t TimeAlarmsClass::timerOnce(const int H,  const int M,  const int S, OnTick_t onTickHandler){   // As above with HMS arguments
      return create( AlarmHMS(H,M,S), onTickHandler, IS_ONESHOT, dtTimer );
    }
      
    AlarmID_t TimeAlarmsClass::timerRepeat(time_t value, OnTick_t onTickHandler){ // trigger after the given number of seconds continuously
    4846:	cf 92       	push	r12
    4848:	ef 92       	push	r14
    484a:	ff 92       	push	r15
    484c:	0f 93       	push	r16
         return create( value, onTickHandler, IS_REPEAT, dtTimer);
    484e:	00 e0       	ldi	r16, 0x00	; 0
    4850:	f1 e0       	ldi	r31, 0x01	; 1
    4852:	ef 2e       	mov	r14, r31
    4854:	f1 2c       	mov	r15, r1
    4856:	cc 24       	eor	r12, r12
    4858:	c3 94       	inc	r12
    485a:	0e 94 ba 23 	call	0x4774	; 0x4774 <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th>
    }
    485e:	0f 91       	pop	r16
    4860:	ff 90       	pop	r15
    4862:	ef 90       	pop	r14
    4864:	cf 90       	pop	r12
    4866:	08 95       	ret

00004868 <_ZN15TimeAlarmsClass11alarmRepeatEiiiPFvvE>:
       return create( value, onTickHandler, IS_REPEAT, dtDailyAlarm );
    else
       return dtINVALID_ALARM_ID; // dont't allocate if the time is greater than one day 	  
    }
    
    AlarmID_t TimeAlarmsClass::alarmRepeat(const int H,  const int M,  const int S, OnTick_t onTickHandler){ // as above with HMS arguments
    4868:	2f 92       	push	r2
    486a:	3f 92       	push	r3
    486c:	4f 92       	push	r4
    486e:	5f 92       	push	r5
    4870:	6f 92       	push	r6
    4872:	7f 92       	push	r7
    4874:	8f 92       	push	r8
    4876:	9f 92       	push	r9
    4878:	af 92       	push	r10
    487a:	bf 92       	push	r11
    487c:	cf 92       	push	r12
    487e:	df 92       	push	r13
    4880:	ef 92       	push	r14
    4882:	ff 92       	push	r15
    4884:	0f 93       	push	r16
    4886:	1f 93       	push	r17
    4888:	1c 01       	movw	r2, r24
    488a:	2b 01       	movw	r4, r22
    488c:	49 01       	movw	r8, r18
         return create( AlarmHMS(H,M,S), onTickHandler, IS_REPEAT, dtDailyAlarm );
    488e:	66 27       	eor	r22, r22
    4890:	57 fd       	sbrc	r21, 7
    4892:	60 95       	com	r22
    4894:	76 2f       	mov	r23, r22
    4896:	cb 01       	movw	r24, r22
    4898:	ba 01       	movw	r22, r20
    489a:	2c e3       	ldi	r18, 0x3C	; 60
    489c:	30 e0       	ldi	r19, 0x00	; 0
    489e:	40 e0       	ldi	r20, 0x00	; 0
    48a0:	50 e0       	ldi	r21, 0x00	; 0
    48a2:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <__mulsi3>
    48a6:	6b 01       	movw	r12, r22
    48a8:	7c 01       	movw	r14, r24
    48aa:	aa 24       	eor	r10, r10
    48ac:	97 fc       	sbrc	r9, 7
    48ae:	a0 94       	com	r10
    48b0:	ba 2c       	mov	r11, r10
    48b2:	c8 0c       	add	r12, r8
    48b4:	d9 1c       	adc	r13, r9
    48b6:	ea 1c       	adc	r14, r10
    48b8:	fb 1c       	adc	r15, r11
    48ba:	66 24       	eor	r6, r6
    48bc:	57 fc       	sbrc	r5, 7
    48be:	60 94       	com	r6
    48c0:	76 2c       	mov	r7, r6
    48c2:	c3 01       	movw	r24, r6
    48c4:	b2 01       	movw	r22, r4
    48c6:	20 e1       	ldi	r18, 0x10	; 16
    48c8:	3e e0       	ldi	r19, 0x0E	; 14
    48ca:	40 e0       	ldi	r20, 0x00	; 0
    48cc:	50 e0       	ldi	r21, 0x00	; 0
    48ce:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <__mulsi3>
    48d2:	c6 0e       	add	r12, r22
    48d4:	d7 1e       	adc	r13, r23
    48d6:	e8 1e       	adc	r14, r24
    48d8:	f9 1e       	adc	r15, r25
    48da:	c1 01       	movw	r24, r2
    48dc:	b7 01       	movw	r22, r14
    48de:	a6 01       	movw	r20, r12
    48e0:	98 01       	movw	r18, r16
    48e2:	00 e0       	ldi	r16, 0x00	; 0
    48e4:	e3 e0       	ldi	r30, 0x03	; 3
    48e6:	ee 2e       	mov	r14, r30
    48e8:	f1 2c       	mov	r15, r1
    48ea:	cc 24       	eor	r12, r12
    48ec:	c3 94       	inc	r12
    48ee:	0e 94 ba 23 	call	0x4774	; 0x4774 <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th>
    }
    48f2:	1f 91       	pop	r17
    48f4:	0f 91       	pop	r16
    48f6:	ff 90       	pop	r15
    48f8:	ef 90       	pop	r14
    48fa:	df 90       	pop	r13
    48fc:	cf 90       	pop	r12
    48fe:	bf 90       	pop	r11
    4900:	af 90       	pop	r10
    4902:	9f 90       	pop	r9
    4904:	8f 90       	pop	r8
    4906:	7f 90       	pop	r7
    4908:	6f 90       	pop	r6
    490a:	5f 90       	pop	r5
    490c:	4f 90       	pop	r4
    490e:	3f 90       	pop	r3
    4910:	2f 90       	pop	r2
    4912:	08 95       	ret

00004914 <_ZN15TimeAlarmsClass5delayEm>:
      else
         return dtINVALID_ALARM_ID; // valid ids only available when servicing a callback
    }
     
    // following functions are not Alarm ID specific.
    void TimeAlarmsClass::delay(unsigned long ms)
    4914:	af 92       	push	r10
    4916:	bf 92       	push	r11
    4918:	cf 92       	push	r12
    491a:	df 92       	push	r13
    491c:	ef 92       	push	r14
    491e:	ff 92       	push	r15
    4920:	0f 93       	push	r16
    4922:	1f 93       	push	r17
    4924:	cf 93       	push	r28
    4926:	df 93       	push	r29
    4928:	ec 01       	movw	r28, r24
    492a:	5a 01       	movw	r10, r20
    492c:	6b 01       	movw	r12, r22
    {
      unsigned long start = millis();
    492e:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <millis>
    4932:	7b 01       	movw	r14, r22
    4934:	8c 01       	movw	r16, r24
    4936:	03 c0       	rjmp	.+6      	; 0x493e <_ZN15TimeAlarmsClass5delayEm+0x2a>
      while( millis() - start  <= ms)
        serviceAlarms();
    4938:	ce 01       	movw	r24, r28
    493a:	0e 94 46 23 	call	0x468c	; 0x468c <_ZN15TimeAlarmsClass13serviceAlarmsEv>
     
    // following functions are not Alarm ID specific.
    void TimeAlarmsClass::delay(unsigned long ms)
    {
      unsigned long start = millis();
      while( millis() - start  <= ms)
    493e:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <millis>
    4942:	6e 19       	sub	r22, r14
    4944:	7f 09       	sbc	r23, r15
    4946:	80 0b       	sbc	r24, r16
    4948:	91 0b       	sbc	r25, r17
    494a:	a6 16       	cp	r10, r22
    494c:	b7 06       	cpc	r11, r23
    494e:	c8 06       	cpc	r12, r24
    4950:	d9 06       	cpc	r13, r25
    4952:	90 f7       	brcc	.-28     	; 0x4938 <_ZN15TimeAlarmsClass5delayEm+0x24>
        serviceAlarms();
    }
    4954:	df 91       	pop	r29
    4956:	cf 91       	pop	r28
    4958:	1f 91       	pop	r17
    495a:	0f 91       	pop	r16
    495c:	ff 90       	pop	r15
    495e:	ef 90       	pop	r14
    4960:	df 90       	pop	r13
    4962:	cf 90       	pop	r12
    4964:	bf 90       	pop	r11
    4966:	af 90       	pop	r10
    4968:	08 95       	ret

0000496a <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    496a:	81 e0       	ldi	r24, 0x01	; 1
    496c:	80 93 aa 02 	sts	0x02AA, r24
  // set address of targeted slave
  txAddress = address;
    4970:	60 93 87 02 	sts	0x0287, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    4974:	10 92 a8 02 	sts	0x02A8, r1
  txBufferLength = 0;
    4978:	10 92 a9 02 	sts	0x02A9, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
    497c:	08 95       	ret

0000497e <_ZN7TwoWire9availableEv>:
}

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
    497e:	20 91 86 02 	lds	r18, 0x0286
    4982:	30 e0       	ldi	r19, 0x00	; 0
    4984:	80 91 85 02 	lds	r24, 0x0285
    4988:	28 1b       	sub	r18, r24
    498a:	31 09       	sbc	r19, r1
{
  return rxBufferLength - rxBufferIndex;
}
    498c:	c9 01       	movw	r24, r18
    498e:	08 95       	ret

00004990 <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    4990:	40 91 85 02 	lds	r20, 0x0285
    4994:	80 91 86 02 	lds	r24, 0x0286
    4998:	48 17       	cp	r20, r24
    499a:	18 f0       	brcs	.+6      	; 0x49a2 <_ZN7TwoWire4readEv+0x12>
    499c:	2f ef       	ldi	r18, 0xFF	; 255
    499e:	3f ef       	ldi	r19, 0xFF	; 255
    49a0:	0a c0       	rjmp	.+20     	; 0x49b6 <_ZN7TwoWire4readEv+0x26>
    value = rxBuffer[rxBufferIndex];
    49a2:	e4 2f       	mov	r30, r20
    49a4:	f0 e0       	ldi	r31, 0x00	; 0
    49a6:	eb 59       	subi	r30, 0x9B	; 155
    49a8:	fd 4f       	sbci	r31, 0xFD	; 253
    49aa:	80 81       	ld	r24, Z
    49ac:	28 2f       	mov	r18, r24
    49ae:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    49b0:	4f 5f       	subi	r20, 0xFF	; 255
    49b2:	40 93 85 02 	sts	0x0285, r20
  }

  return value;
}
    49b6:	c9 01       	movw	r24, r18
    49b8:	08 95       	ret

000049ba <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    49ba:	e0 91 85 02 	lds	r30, 0x0285
    49be:	80 91 86 02 	lds	r24, 0x0286
    49c2:	e8 17       	cp	r30, r24
    49c4:	18 f0       	brcs	.+6      	; 0x49cc <_ZN7TwoWire4peekEv+0x12>
    49c6:	ef ef       	ldi	r30, 0xFF	; 255
    49c8:	ff ef       	ldi	r31, 0xFF	; 255
    49ca:	06 c0       	rjmp	.+12     	; 0x49d8 <_ZN7TwoWire4peekEv+0x1e>
    value = rxBuffer[rxBufferIndex];
    49cc:	f0 e0       	ldi	r31, 0x00	; 0
    49ce:	eb 59       	subi	r30, 0x9B	; 155
    49d0:	fd 4f       	sbci	r31, 0xFD	; 253
    49d2:	80 81       	ld	r24, Z
    49d4:	e8 2f       	mov	r30, r24
    49d6:	f0 e0       	ldi	r31, 0x00	; 0
  }

  return value;
}
    49d8:	cf 01       	movw	r24, r30
    49da:	08 95       	ret

000049dc <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    49dc:	08 95       	ret

000049de <_GLOBAL__I__ZN7TwoWire8rxBufferE>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    49de:	10 92 ae 02 	sts	0x02AE, r1
    49e2:	10 92 ad 02 	sts	0x02AD, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    49e6:	88 ee       	ldi	r24, 0xE8	; 232
    49e8:	93 e0       	ldi	r25, 0x03	; 3
    49ea:	a0 e0       	ldi	r26, 0x00	; 0
    49ec:	b0 e0       	ldi	r27, 0x00	; 0
    49ee:	80 93 af 02 	sts	0x02AF, r24
    49f2:	90 93 b0 02 	sts	0x02B0, r25
    49f6:	a0 93 b1 02 	sts	0x02B1, r26
    49fa:	b0 93 b2 02 	sts	0x02B2, r27
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    49fe:	8f e1       	ldi	r24, 0x1F	; 31
    4a00:	91 e0       	ldi	r25, 0x01	; 1
    4a02:	90 93 ac 02 	sts	0x02AC, r25
    4a06:	80 93 ab 02 	sts	0x02AB, r24
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    4a0a:	08 95       	ret

00004a0c <_ZN7TwoWire5writeEPKhj>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
    4a0c:	cf 92       	push	r12
    4a0e:	df 92       	push	r13
    4a10:	ef 92       	push	r14
    4a12:	ff 92       	push	r15
    4a14:	0f 93       	push	r16
    4a16:	1f 93       	push	r17
    4a18:	cf 93       	push	r28
    4a1a:	df 93       	push	r29
    4a1c:	7c 01       	movw	r14, r24
    4a1e:	6b 01       	movw	r12, r22
    4a20:	8a 01       	movw	r16, r20
{
  if(transmitting){
    4a22:	80 91 aa 02 	lds	r24, 0x02AA
    4a26:	88 23       	and	r24, r24
    4a28:	a1 f0       	breq	.+40     	; 0x4a52 <_ZN7TwoWire5writeEPKhj+0x46>
    4a2a:	c0 e0       	ldi	r28, 0x00	; 0
    4a2c:	d0 e0       	ldi	r29, 0x00	; 0
    4a2e:	0d c0       	rjmp	.+26     	; 0x4a4a <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
      write(data[i]);
    4a30:	d7 01       	movw	r26, r14
    4a32:	ed 91       	ld	r30, X+
    4a34:	fc 91       	ld	r31, X
    4a36:	d6 01       	movw	r26, r12
    4a38:	ac 0f       	add	r26, r28
    4a3a:	bd 1f       	adc	r27, r29
    4a3c:	01 90       	ld	r0, Z+
    4a3e:	f0 81       	ld	r31, Z
    4a40:	e0 2d       	mov	r30, r0
    4a42:	c7 01       	movw	r24, r14
    4a44:	6c 91       	ld	r22, X
    4a46:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    4a48:	21 96       	adiw	r28, 0x01	; 1
    4a4a:	c0 17       	cp	r28, r16
    4a4c:	d1 07       	cpc	r29, r17
    4a4e:	80 f3       	brcs	.-32     	; 0x4a30 <_ZN7TwoWire5writeEPKhj+0x24>
    4a50:	04 c0       	rjmp	.+8      	; 0x4a5a <_ZN7TwoWire5writeEPKhj+0x4e>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    4a52:	cb 01       	movw	r24, r22
    4a54:	64 2f       	mov	r22, r20
    4a56:	0e 94 38 26 	call	0x4c70	; 0x4c70 <twi_transmit>
  }
  return quantity;
}
    4a5a:	c8 01       	movw	r24, r16
    4a5c:	df 91       	pop	r29
    4a5e:	cf 91       	pop	r28
    4a60:	1f 91       	pop	r17
    4a62:	0f 91       	pop	r16
    4a64:	ff 90       	pop	r15
    4a66:	ef 90       	pop	r14
    4a68:	df 90       	pop	r13
    4a6a:	cf 90       	pop	r12
    4a6c:	08 95       	ret

00004a6e <_ZN7TwoWire5writeEh>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
    4a6e:	df 93       	push	r29
    4a70:	cf 93       	push	r28
    4a72:	0f 92       	push	r0
    4a74:	cd b7       	in	r28, 0x3d	; 61
    4a76:	de b7       	in	r29, 0x3e	; 62
    4a78:	fc 01       	movw	r30, r24
    4a7a:	69 83       	std	Y+1, r22	; 0x01
{
  if(transmitting){
    4a7c:	80 91 aa 02 	lds	r24, 0x02AA
    4a80:	88 23       	and	r24, r24
    4a82:	c9 f0       	breq	.+50     	; 0x4ab6 <_ZN7TwoWire5writeEh+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    4a84:	80 91 a9 02 	lds	r24, 0x02A9
    4a88:	80 32       	cpi	r24, 0x20	; 32
    4a8a:	38 f0       	brcs	.+14     	; 0x4a9a <_ZN7TwoWire5writeEh+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    4a8c:	81 e0       	ldi	r24, 0x01	; 1
    4a8e:	90 e0       	ldi	r25, 0x00	; 0
    4a90:	93 83       	std	Z+3, r25	; 0x03
    4a92:	82 83       	std	Z+2, r24	; 0x02
    4a94:	20 e0       	ldi	r18, 0x00	; 0
    4a96:	30 e0       	ldi	r19, 0x00	; 0
    4a98:	15 c0       	rjmp	.+42     	; 0x4ac4 <_ZN7TwoWire5writeEh+0x56>
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    4a9a:	80 91 a8 02 	lds	r24, 0x02A8
    4a9e:	e8 2f       	mov	r30, r24
    4aa0:	f0 e0       	ldi	r31, 0x00	; 0
    4aa2:	e8 57       	subi	r30, 0x78	; 120
    4aa4:	fd 4f       	sbci	r31, 0xFD	; 253
    4aa6:	99 81       	ldd	r25, Y+1	; 0x01
    4aa8:	90 83       	st	Z, r25
    ++txBufferIndex;
    4aaa:	8f 5f       	subi	r24, 0xFF	; 255
    4aac:	80 93 a8 02 	sts	0x02A8, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    4ab0:	80 93 a9 02 	sts	0x02A9, r24
    4ab4:	05 c0       	rjmp	.+10     	; 0x4ac0 <_ZN7TwoWire5writeEh+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    4ab6:	ce 01       	movw	r24, r28
    4ab8:	01 96       	adiw	r24, 0x01	; 1
    4aba:	61 e0       	ldi	r22, 0x01	; 1
    4abc:	0e 94 38 26 	call	0x4c70	; 0x4c70 <twi_transmit>
    4ac0:	21 e0       	ldi	r18, 0x01	; 1
    4ac2:	30 e0       	ldi	r19, 0x00	; 0
  }
  return 1;
}
    4ac4:	c9 01       	movw	r24, r18
    4ac6:	0f 90       	pop	r0
    4ac8:	cf 91       	pop	r28
    4aca:	df 91       	pop	r29
    4acc:	08 95       	ret

00004ace <_ZN7TwoWire15endTransmissionEh>:
//	the bus tenure has been properly ended with a STOP. It
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
    4ace:	0f 93       	push	r16
    4ad0:	06 2f       	mov	r16, r22
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    4ad2:	80 91 87 02 	lds	r24, 0x0287
    4ad6:	68 e8       	ldi	r22, 0x88	; 136
    4ad8:	72 e0       	ldi	r23, 0x02	; 2
    4ada:	40 91 a9 02 	lds	r20, 0x02A9
    4ade:	21 e0       	ldi	r18, 0x01	; 1
    4ae0:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    4ae4:	10 92 a8 02 	sts	0x02A8, r1
  txBufferLength = 0;
    4ae8:	10 92 a9 02 	sts	0x02A9, r1
  // indicate that we are done transmitting
  transmitting = 0;
    4aec:	10 92 aa 02 	sts	0x02AA, r1
  return ret;
}
    4af0:	0f 91       	pop	r16
    4af2:	08 95       	ret

00004af4 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    4af4:	61 e0       	ldi	r22, 0x01	; 1
    4af6:	0e 94 67 25 	call	0x4ace	; 0x4ace <_ZN7TwoWire15endTransmissionEh>
}
    4afa:	08 95       	ret

00004afc <_ZN7TwoWire11requestFromEhhh>:
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    4afc:	41 32       	cpi	r20, 0x21	; 33
    4afe:	08 f0       	brcs	.+2      	; 0x4b02 <_ZN7TwoWire11requestFromEhhh+0x6>
    4b00:	40 e2       	ldi	r20, 0x20	; 32
    4b02:	86 2f       	mov	r24, r22
    4b04:	65 e6       	ldi	r22, 0x65	; 101
    4b06:	72 e0       	ldi	r23, 0x02	; 2
    4b08:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    4b0c:	10 92 85 02 	sts	0x0285, r1
  rxBufferLength = read;
    4b10:	80 93 86 02 	sts	0x0286, r24

  return read;
}
    4b14:	08 95       	ret

00004b16 <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    4b16:	21 e0       	ldi	r18, 0x01	; 1
    4b18:	0e 94 7e 25 	call	0x4afc	; 0x4afc <_ZN7TwoWire11requestFromEhhh>
}
    4b1c:	08 95       	ret

00004b1e <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    4b1e:	10 92 85 02 	sts	0x0285, r1
  rxBufferLength = 0;
    4b22:	10 92 86 02 	sts	0x0286, r1

  txBufferIndex = 0;
    4b26:	10 92 a8 02 	sts	0x02A8, r1
  txBufferLength = 0;
    4b2a:	10 92 a9 02 	sts	0x02A9, r1

  twi_init();
    4b2e:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <twi_init>
}
    4b32:	08 95       	ret

00004b34 <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    4b34:	38 2f       	mov	r19, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    4b36:	41 32       	cpi	r20, 0x21	; 33
    4b38:	10 f0       	brcs	.+4      	; 0x4b3e <twi_readFrom+0xa>
    4b3a:	40 e0       	ldi	r20, 0x00	; 0
    4b3c:	42 c0       	rjmp	.+132    	; 0x4bc2 <twi_readFrom+0x8e>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    4b3e:	80 91 b7 02 	lds	r24, 0x02B7
    4b42:	88 23       	and	r24, r24
    4b44:	e1 f7       	brne	.-8      	; 0x4b3e <twi_readFrom+0xa>
    continue;
  }
  twi_state = TWI_MRX;
    4b46:	91 e0       	ldi	r25, 0x01	; 1
    4b48:	90 93 b7 02 	sts	0x02B7, r25
  twi_sendStop = sendStop;
    4b4c:	20 93 b9 02 	sts	0x02B9, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    4b50:	8f ef       	ldi	r24, 0xFF	; 255
    4b52:	80 93 24 03 	sts	0x0324, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    4b56:	10 92 df 02 	sts	0x02DF, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    4b5a:	41 50       	subi	r20, 0x01	; 1
    4b5c:	40 93 e0 02 	sts	0x02E0, r20
    4b60:	4f 5f       	subi	r20, 0xFF	; 255
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    4b62:	90 93 b8 02 	sts	0x02B8, r25
  twi_slarw |= address << 1;
    4b66:	80 91 b8 02 	lds	r24, 0x02B8
    4b6a:	33 0f       	add	r19, r19
    4b6c:	83 2b       	or	r24, r19
    4b6e:	80 93 b8 02 	sts	0x02B8, r24

  if (true == twi_inRepStart) {
    4b72:	80 91 ba 02 	lds	r24, 0x02BA
    4b76:	81 30       	cpi	r24, 0x01	; 1
    4b78:	41 f4       	brne	.+16     	; 0x4b8a <twi_readFrom+0x56>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    4b7a:	10 92 ba 02 	sts	0x02BA, r1
    TWDR = twi_slarw;
    4b7e:	80 91 b8 02 	lds	r24, 0x02B8
    4b82:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    4b86:	85 ec       	ldi	r24, 0xC5	; 197
    4b88:	01 c0       	rjmp	.+2      	; 0x4b8c <twi_readFrom+0x58>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    4b8a:	85 ee       	ldi	r24, 0xE5	; 229
    4b8c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    4b90:	80 91 b7 02 	lds	r24, 0x02B7
    4b94:	81 30       	cpi	r24, 0x01	; 1
    4b96:	e1 f3       	breq	.-8      	; 0x4b90 <twi_readFrom+0x5c>
    continue;
  }

  if (twi_masterBufferIndex < length)
    4b98:	80 91 df 02 	lds	r24, 0x02DF
    4b9c:	84 17       	cp	r24, r20
    4b9e:	10 f4       	brcc	.+4      	; 0x4ba4 <twi_readFrom+0x70>
    length = twi_masterBufferIndex;
    4ba0:	40 91 df 02 	lds	r20, 0x02DF
    4ba4:	20 e0       	ldi	r18, 0x00	; 0
    4ba6:	30 e0       	ldi	r19, 0x00	; 0
    4ba8:	0a c0       	rjmp	.+20     	; 0x4bbe <twi_readFrom+0x8a>

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    4baa:	fb 01       	movw	r30, r22
    4bac:	e2 0f       	add	r30, r18
    4bae:	f3 1f       	adc	r31, r19
    4bb0:	d9 01       	movw	r26, r18
    4bb2:	a1 54       	subi	r26, 0x41	; 65
    4bb4:	bd 4f       	sbci	r27, 0xFD	; 253
    4bb6:	8c 91       	ld	r24, X
    4bb8:	80 83       	st	Z, r24
    4bba:	2f 5f       	subi	r18, 0xFF	; 255
    4bbc:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    4bbe:	24 17       	cp	r18, r20
    4bc0:	a0 f3       	brcs	.-24     	; 0x4baa <twi_readFrom+0x76>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    4bc2:	84 2f       	mov	r24, r20
    4bc4:	08 95       	ret

00004bc6 <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    4bc6:	0f 93       	push	r16
    4bc8:	1f 93       	push	r17
    4bca:	58 2f       	mov	r21, r24
    4bcc:	12 2f       	mov	r17, r18
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    4bce:	41 32       	cpi	r20, 0x21	; 33
    4bd0:	10 f0       	brcs	.+4      	; 0x4bd6 <twi_writeTo+0x10>
    4bd2:	81 e0       	ldi	r24, 0x01	; 1
    4bd4:	4a c0       	rjmp	.+148    	; 0x4c6a <twi_writeTo+0xa4>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    4bd6:	80 91 b7 02 	lds	r24, 0x02B7
    4bda:	88 23       	and	r24, r24
    4bdc:	e1 f7       	brne	.-8      	; 0x4bd6 <twi_writeTo+0x10>
    continue;
  }
  twi_state = TWI_MTX;
    4bde:	82 e0       	ldi	r24, 0x02	; 2
    4be0:	80 93 b7 02 	sts	0x02B7, r24
  twi_sendStop = sendStop;
    4be4:	00 93 b9 02 	sts	0x02B9, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    4be8:	8f ef       	ldi	r24, 0xFF	; 255
    4bea:	80 93 24 03 	sts	0x0324, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    4bee:	10 92 df 02 	sts	0x02DF, r1
  twi_masterBufferLength = length;
    4bf2:	40 93 e0 02 	sts	0x02E0, r20
    4bf6:	af eb       	ldi	r26, 0xBF	; 191
    4bf8:	b2 e0       	ldi	r27, 0x02	; 2
    4bfa:	fb 01       	movw	r30, r22
    4bfc:	02 c0       	rjmp	.+4      	; 0x4c02 <twi_writeTo+0x3c>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    4bfe:	81 91       	ld	r24, Z+
    4c00:	8d 93       	st	X+, r24
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    4c02:	8e 2f       	mov	r24, r30
    4c04:	86 1b       	sub	r24, r22
    4c06:	84 17       	cp	r24, r20
    4c08:	d0 f3       	brcs	.-12     	; 0x4bfe <twi_writeTo+0x38>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    4c0a:	10 92 b8 02 	sts	0x02B8, r1
  twi_slarw |= address << 1;
    4c0e:	80 91 b8 02 	lds	r24, 0x02B8
    4c12:	55 0f       	add	r21, r21
    4c14:	85 2b       	or	r24, r21
    4c16:	80 93 b8 02 	sts	0x02B8, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    4c1a:	80 91 ba 02 	lds	r24, 0x02BA
    4c1e:	81 30       	cpi	r24, 0x01	; 1
    4c20:	41 f4       	brne	.+16     	; 0x4c32 <twi_writeTo+0x6c>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    4c22:	10 92 ba 02 	sts	0x02BA, r1
    TWDR = twi_slarw;				
    4c26:	80 91 b8 02 	lds	r24, 0x02B8
    4c2a:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    4c2e:	85 ec       	ldi	r24, 0xC5	; 197
    4c30:	01 c0       	rjmp	.+2      	; 0x4c34 <twi_writeTo+0x6e>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    4c32:	85 ee       	ldi	r24, 0xE5	; 229
    4c34:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    4c38:	11 23       	and	r17, r17
    4c3a:	21 f0       	breq	.+8      	; 0x4c44 <twi_writeTo+0x7e>
    4c3c:	80 91 b7 02 	lds	r24, 0x02B7
    4c40:	82 30       	cpi	r24, 0x02	; 2
    4c42:	e1 f3       	breq	.-8      	; 0x4c3c <twi_writeTo+0x76>
    continue;
  }
  
  if (twi_error == 0xFF)
    4c44:	80 91 24 03 	lds	r24, 0x0324
    4c48:	8f 3f       	cpi	r24, 0xFF	; 255
    4c4a:	11 f4       	brne	.+4      	; 0x4c50 <twi_writeTo+0x8a>
    4c4c:	80 e0       	ldi	r24, 0x00	; 0
    4c4e:	0d c0       	rjmp	.+26     	; 0x4c6a <twi_writeTo+0xa4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    4c50:	80 91 24 03 	lds	r24, 0x0324
    4c54:	80 32       	cpi	r24, 0x20	; 32
    4c56:	11 f4       	brne	.+4      	; 0x4c5c <twi_writeTo+0x96>
    4c58:	82 e0       	ldi	r24, 0x02	; 2
    4c5a:	07 c0       	rjmp	.+14     	; 0x4c6a <twi_writeTo+0xa4>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    4c5c:	80 91 24 03 	lds	r24, 0x0324
    4c60:	80 33       	cpi	r24, 0x30	; 48
    4c62:	11 f0       	breq	.+4      	; 0x4c68 <twi_writeTo+0xa2>
    4c64:	84 e0       	ldi	r24, 0x04	; 4
    4c66:	01 c0       	rjmp	.+2      	; 0x4c6a <twi_writeTo+0xa4>
    4c68:	83 e0       	ldi	r24, 0x03	; 3
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    4c6a:	1f 91       	pop	r17
    4c6c:	0f 91       	pop	r16
    4c6e:	08 95       	ret

00004c70 <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    4c70:	48 2f       	mov	r20, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    4c72:	61 32       	cpi	r22, 0x21	; 33
    4c74:	10 f0       	brcs	.+4      	; 0x4c7a <twi_transmit+0xa>
    4c76:	81 e0       	ldi	r24, 0x01	; 1
    4c78:	08 95       	ret
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    4c7a:	80 91 b7 02 	lds	r24, 0x02B7
    4c7e:	84 30       	cpi	r24, 0x04	; 4
    4c80:	11 f0       	breq	.+4      	; 0x4c86 <twi_transmit+0x16>
    4c82:	82 e0       	ldi	r24, 0x02	; 2
    4c84:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    4c86:	60 93 02 03 	sts	0x0302, r22
    4c8a:	a1 ee       	ldi	r26, 0xE1	; 225
    4c8c:	b2 e0       	ldi	r27, 0x02	; 2
    4c8e:	84 2f       	mov	r24, r20
    4c90:	9c 01       	movw	r18, r24
    4c92:	f9 01       	movw	r30, r18
    4c94:	02 c0       	rjmp	.+4      	; 0x4c9a <twi_transmit+0x2a>
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
    4c96:	81 91       	ld	r24, Z+
    4c98:	8d 93       	st	X+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    4c9a:	8e 2f       	mov	r24, r30
    4c9c:	84 1b       	sub	r24, r20
    4c9e:	86 17       	cp	r24, r22
    4ca0:	d0 f3       	brcs	.-12     	; 0x4c96 <twi_transmit+0x26>
    4ca2:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    4ca4:	08 95       	ret

00004ca6 <__vector_24>:
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    4ca6:	1f 92       	push	r1
    4ca8:	0f 92       	push	r0
    4caa:	0f b6       	in	r0, 0x3f	; 63
    4cac:	0f 92       	push	r0
    4cae:	11 24       	eor	r1, r1
    4cb0:	2f 93       	push	r18
    4cb2:	3f 93       	push	r19
    4cb4:	4f 93       	push	r20
    4cb6:	5f 93       	push	r21
    4cb8:	6f 93       	push	r22
    4cba:	7f 93       	push	r23
    4cbc:	8f 93       	push	r24
    4cbe:	9f 93       	push	r25
    4cc0:	af 93       	push	r26
    4cc2:	bf 93       	push	r27
    4cc4:	ef 93       	push	r30
    4cc6:	ff 93       	push	r31
  switch(TW_STATUS){
    4cc8:	80 91 b9 00 	lds	r24, 0x00B9
    4ccc:	90 e0       	ldi	r25, 0x00	; 0
    4cce:	88 7f       	andi	r24, 0xF8	; 248
    4cd0:	90 70       	andi	r25, 0x00	; 0
    4cd2:	80 36       	cpi	r24, 0x60	; 96
    4cd4:	91 05       	cpc	r25, r1
    4cd6:	09 f4       	brne	.+2      	; 0x4cda <__vector_24+0x34>
    4cd8:	f2 c0       	rjmp	.+484    	; 0x4ebe <__vector_24+0x218>
    4cda:	81 36       	cpi	r24, 0x61	; 97
    4cdc:	91 05       	cpc	r25, r1
    4cde:	cc f5       	brge	.+114    	; 0x4d52 <__vector_24+0xac>
    4ce0:	88 32       	cpi	r24, 0x28	; 40
    4ce2:	91 05       	cpc	r25, r1
    4ce4:	09 f4       	brne	.+2      	; 0x4ce8 <__vector_24+0x42>
    4ce6:	7b c0       	rjmp	.+246    	; 0x4dde <__vector_24+0x138>
    4ce8:	89 32       	cpi	r24, 0x29	; 41
    4cea:	91 05       	cpc	r25, r1
    4cec:	b4 f4       	brge	.+44     	; 0x4d1a <__vector_24+0x74>
    4cee:	80 31       	cpi	r24, 0x10	; 16
    4cf0:	91 05       	cpc	r25, r1
    4cf2:	09 f4       	brne	.+2      	; 0x4cf6 <__vector_24+0x50>
    4cf4:	6f c0       	rjmp	.+222    	; 0x4dd4 <__vector_24+0x12e>
    4cf6:	81 31       	cpi	r24, 0x11	; 17
    4cf8:	91 05       	cpc	r25, r1
    4cfa:	3c f4       	brge	.+14     	; 0x4d0a <__vector_24+0x64>
    4cfc:	00 97       	sbiw	r24, 0x00	; 0
    4cfe:	09 f4       	brne	.+2      	; 0x4d02 <__vector_24+0x5c>
    4d00:	47 c1       	rjmp	.+654    	; 0x4f90 <__vector_24+0x2ea>
    4d02:	08 97       	sbiw	r24, 0x08	; 8
    4d04:	09 f0       	breq	.+2      	; 0x4d08 <__vector_24+0x62>
    4d06:	4f c1       	rjmp	.+670    	; 0x4fa6 <__vector_24+0x300>
    4d08:	65 c0       	rjmp	.+202    	; 0x4dd4 <__vector_24+0x12e>
    4d0a:	88 31       	cpi	r24, 0x18	; 24
    4d0c:	91 05       	cpc	r25, r1
    4d0e:	09 f4       	brne	.+2      	; 0x4d12 <__vector_24+0x6c>
    4d10:	66 c0       	rjmp	.+204    	; 0x4dde <__vector_24+0x138>
    4d12:	80 97       	sbiw	r24, 0x20	; 32
    4d14:	09 f0       	breq	.+2      	; 0x4d18 <__vector_24+0x72>
    4d16:	47 c1       	rjmp	.+654    	; 0x4fa6 <__vector_24+0x300>
    4d18:	82 c0       	rjmp	.+260    	; 0x4e1e <__vector_24+0x178>
    4d1a:	80 34       	cpi	r24, 0x40	; 64
    4d1c:	91 05       	cpc	r25, r1
    4d1e:	09 f4       	brne	.+2      	; 0x4d22 <__vector_24+0x7c>
    4d20:	a4 c0       	rjmp	.+328    	; 0x4e6a <__vector_24+0x1c4>
    4d22:	81 34       	cpi	r24, 0x41	; 65
    4d24:	91 05       	cpc	r25, r1
    4d26:	44 f4       	brge	.+16     	; 0x4d38 <__vector_24+0x92>
    4d28:	80 33       	cpi	r24, 0x30	; 48
    4d2a:	91 05       	cpc	r25, r1
    4d2c:	09 f4       	brne	.+2      	; 0x4d30 <__vector_24+0x8a>
    4d2e:	82 c0       	rjmp	.+260    	; 0x4e34 <__vector_24+0x18e>
    4d30:	c8 97       	sbiw	r24, 0x38	; 56
    4d32:	09 f0       	breq	.+2      	; 0x4d36 <__vector_24+0x90>
    4d34:	38 c1       	rjmp	.+624    	; 0x4fa6 <__vector_24+0x300>
    4d36:	89 c0       	rjmp	.+274    	; 0x4e4a <__vector_24+0x1a4>
    4d38:	80 35       	cpi	r24, 0x50	; 80
    4d3a:	91 05       	cpc	r25, r1
    4d3c:	09 f4       	brne	.+2      	; 0x4d40 <__vector_24+0x9a>
    4d3e:	89 c0       	rjmp	.+274    	; 0x4e52 <__vector_24+0x1ac>
    4d40:	88 35       	cpi	r24, 0x58	; 88
    4d42:	91 05       	cpc	r25, r1
    4d44:	09 f4       	brne	.+2      	; 0x4d48 <__vector_24+0xa2>
    4d46:	96 c0       	rjmp	.+300    	; 0x4e74 <__vector_24+0x1ce>
    4d48:	88 34       	cpi	r24, 0x48	; 72
    4d4a:	91 05       	cpc	r25, r1
    4d4c:	09 f0       	breq	.+2      	; 0x4d50 <__vector_24+0xaa>
    4d4e:	2b c1       	rjmp	.+598    	; 0x4fa6 <__vector_24+0x300>
    4d50:	ae c0       	rjmp	.+348    	; 0x4eae <__vector_24+0x208>
    4d52:	88 39       	cpi	r24, 0x98	; 152
    4d54:	91 05       	cpc	r25, r1
    4d56:	09 f4       	brne	.+2      	; 0x4d5a <__vector_24+0xb4>
    4d58:	13 c1       	rjmp	.+550    	; 0x4f80 <__vector_24+0x2da>
    4d5a:	89 39       	cpi	r24, 0x99	; 153
    4d5c:	91 05       	cpc	r25, r1
    4d5e:	ec f4       	brge	.+58     	; 0x4d9a <__vector_24+0xf4>
    4d60:	88 37       	cpi	r24, 0x78	; 120
    4d62:	91 05       	cpc	r25, r1
    4d64:	09 f4       	brne	.+2      	; 0x4d68 <__vector_24+0xc2>
    4d66:	ab c0       	rjmp	.+342    	; 0x4ebe <__vector_24+0x218>
    4d68:	89 37       	cpi	r24, 0x79	; 121
    4d6a:	91 05       	cpc	r25, r1
    4d6c:	4c f4       	brge	.+18     	; 0x4d80 <__vector_24+0xda>
    4d6e:	88 36       	cpi	r24, 0x68	; 104
    4d70:	91 05       	cpc	r25, r1
    4d72:	09 f4       	brne	.+2      	; 0x4d76 <__vector_24+0xd0>
    4d74:	a4 c0       	rjmp	.+328    	; 0x4ebe <__vector_24+0x218>
    4d76:	80 37       	cpi	r24, 0x70	; 112
    4d78:	91 05       	cpc	r25, r1
    4d7a:	09 f0       	breq	.+2      	; 0x4d7e <__vector_24+0xd8>
    4d7c:	14 c1       	rjmp	.+552    	; 0x4fa6 <__vector_24+0x300>
    4d7e:	9f c0       	rjmp	.+318    	; 0x4ebe <__vector_24+0x218>
    4d80:	88 38       	cpi	r24, 0x88	; 136
    4d82:	91 05       	cpc	r25, r1
    4d84:	09 f4       	brne	.+2      	; 0x4d88 <__vector_24+0xe2>
    4d86:	fc c0       	rjmp	.+504    	; 0x4f80 <__vector_24+0x2da>
    4d88:	80 39       	cpi	r24, 0x90	; 144
    4d8a:	91 05       	cpc	r25, r1
    4d8c:	09 f4       	brne	.+2      	; 0x4d90 <__vector_24+0xea>
    4d8e:	9d c0       	rjmp	.+314    	; 0x4eca <__vector_24+0x224>
    4d90:	80 38       	cpi	r24, 0x80	; 128
    4d92:	91 05       	cpc	r25, r1
    4d94:	09 f0       	breq	.+2      	; 0x4d98 <__vector_24+0xf2>
    4d96:	07 c1       	rjmp	.+526    	; 0x4fa6 <__vector_24+0x300>
    4d98:	98 c0       	rjmp	.+304    	; 0x4eca <__vector_24+0x224>
    4d9a:	80 3b       	cpi	r24, 0xB0	; 176
    4d9c:	91 05       	cpc	r25, r1
    4d9e:	09 f4       	brne	.+2      	; 0x4da2 <__vector_24+0xfc>
    4da0:	c6 c0       	rjmp	.+396    	; 0x4f2e <__vector_24+0x288>
    4da2:	81 3b       	cpi	r24, 0xB1	; 177
    4da4:	91 05       	cpc	r25, r1
    4da6:	4c f4       	brge	.+18     	; 0x4dba <__vector_24+0x114>
    4da8:	80 3a       	cpi	r24, 0xA0	; 160
    4daa:	91 05       	cpc	r25, r1
    4dac:	09 f4       	brne	.+2      	; 0x4db0 <__vector_24+0x10a>
    4dae:	9f c0       	rjmp	.+318    	; 0x4eee <__vector_24+0x248>
    4db0:	88 3a       	cpi	r24, 0xA8	; 168
    4db2:	91 05       	cpc	r25, r1
    4db4:	09 f0       	breq	.+2      	; 0x4db8 <__vector_24+0x112>
    4db6:	f7 c0       	rjmp	.+494    	; 0x4fa6 <__vector_24+0x300>
    4db8:	ba c0       	rjmp	.+372    	; 0x4f2e <__vector_24+0x288>
    4dba:	80 3c       	cpi	r24, 0xC0	; 192
    4dbc:	91 05       	cpc	r25, r1
    4dbe:	09 f4       	brne	.+2      	; 0x4dc2 <__vector_24+0x11c>
    4dc0:	e3 c0       	rjmp	.+454    	; 0x4f88 <__vector_24+0x2e2>
    4dc2:	88 3c       	cpi	r24, 0xC8	; 200
    4dc4:	91 05       	cpc	r25, r1
    4dc6:	09 f4       	brne	.+2      	; 0x4dca <__vector_24+0x124>
    4dc8:	df c0       	rjmp	.+446    	; 0x4f88 <__vector_24+0x2e2>
    4dca:	88 3b       	cpi	r24, 0xB8	; 184
    4dcc:	91 05       	cpc	r25, r1
    4dce:	09 f0       	breq	.+2      	; 0x4dd2 <__vector_24+0x12c>
    4dd0:	ea c0       	rjmp	.+468    	; 0x4fa6 <__vector_24+0x300>
    4dd2:	c2 c0       	rjmp	.+388    	; 0x4f58 <__vector_24+0x2b2>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    4dd4:	80 91 b8 02 	lds	r24, 0x02B8
    4dd8:	80 93 bb 00 	sts	0x00BB, r24
    4ddc:	cf c0       	rjmp	.+414    	; 0x4f7c <__vector_24+0x2d6>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4dde:	90 91 df 02 	lds	r25, 0x02DF
    4de2:	80 91 e0 02 	lds	r24, 0x02E0
    4de6:	98 17       	cp	r25, r24
    4de8:	68 f4       	brcc	.+26     	; 0x4e04 <__vector_24+0x15e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    4dea:	90 91 df 02 	lds	r25, 0x02DF
    4dee:	e9 2f       	mov	r30, r25
    4df0:	f0 e0       	ldi	r31, 0x00	; 0
    4df2:	e1 54       	subi	r30, 0x41	; 65
    4df4:	fd 4f       	sbci	r31, 0xFD	; 253
    4df6:	80 81       	ld	r24, Z
    4df8:	80 93 bb 00 	sts	0x00BB, r24
    4dfc:	9f 5f       	subi	r25, 0xFF	; 255
    4dfe:	90 93 df 02 	sts	0x02DF, r25
    4e02:	bc c0       	rjmp	.+376    	; 0x4f7c <__vector_24+0x2d6>
        twi_reply(1);
      }else{
	if (twi_sendStop)
    4e04:	80 91 b9 02 	lds	r24, 0x02B9
    4e08:	88 23       	and	r24, r24
    4e0a:	09 f4       	brne	.+2      	; 0x4e0e <__vector_24+0x168>
    4e0c:	4b c0       	rjmp	.+150    	; 0x4ea4 <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4e0e:	85 ed       	ldi	r24, 0xD5	; 213
    4e10:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4e14:	80 91 bc 00 	lds	r24, 0x00BC
    4e18:	84 fd       	sbrc	r24, 4
    4e1a:	fc cf       	rjmp	.-8      	; 0x4e14 <__vector_24+0x16e>
    4e1c:	c2 c0       	rjmp	.+388    	; 0x4fa2 <__vector_24+0x2fc>
	  twi_state = TWI_READY;
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    4e1e:	80 e2       	ldi	r24, 0x20	; 32
    4e20:	80 93 24 03 	sts	0x0324, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4e24:	85 ed       	ldi	r24, 0xD5	; 213
    4e26:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4e2a:	80 91 bc 00 	lds	r24, 0x00BC
    4e2e:	84 fd       	sbrc	r24, 4
    4e30:	fc cf       	rjmp	.-8      	; 0x4e2a <__vector_24+0x184>
    4e32:	b7 c0       	rjmp	.+366    	; 0x4fa2 <__vector_24+0x2fc>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4e34:	80 e3       	ldi	r24, 0x30	; 48
    4e36:	80 93 24 03 	sts	0x0324, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4e3a:	85 ed       	ldi	r24, 0xD5	; 213
    4e3c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4e40:	80 91 bc 00 	lds	r24, 0x00BC
    4e44:	84 fd       	sbrc	r24, 4
    4e46:	fc cf       	rjmp	.-8      	; 0x4e40 <__vector_24+0x19a>
    4e48:	ac c0       	rjmp	.+344    	; 0x4fa2 <__vector_24+0x2fc>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    4e4a:	88 e3       	ldi	r24, 0x38	; 56
    4e4c:	80 93 24 03 	sts	0x0324, r24
    4e50:	9b c0       	rjmp	.+310    	; 0x4f88 <__vector_24+0x2e2>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4e52:	80 91 df 02 	lds	r24, 0x02DF
    4e56:	90 91 bb 00 	lds	r25, 0x00BB
    4e5a:	e8 2f       	mov	r30, r24
    4e5c:	f0 e0       	ldi	r31, 0x00	; 0
    4e5e:	e1 54       	subi	r30, 0x41	; 65
    4e60:	fd 4f       	sbci	r31, 0xFD	; 253
    4e62:	90 83       	st	Z, r25
    4e64:	8f 5f       	subi	r24, 0xFF	; 255
    4e66:	80 93 df 02 	sts	0x02DF, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4e6a:	90 91 df 02 	lds	r25, 0x02DF
    4e6e:	80 91 e0 02 	lds	r24, 0x02E0
    4e72:	82 c0       	rjmp	.+260    	; 0x4f78 <__vector_24+0x2d2>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4e74:	80 91 df 02 	lds	r24, 0x02DF
    4e78:	90 91 bb 00 	lds	r25, 0x00BB
    4e7c:	e8 2f       	mov	r30, r24
    4e7e:	f0 e0       	ldi	r31, 0x00	; 0
    4e80:	e1 54       	subi	r30, 0x41	; 65
    4e82:	fd 4f       	sbci	r31, 0xFD	; 253
    4e84:	90 83       	st	Z, r25
    4e86:	8f 5f       	subi	r24, 0xFF	; 255
    4e88:	80 93 df 02 	sts	0x02DF, r24
	if (twi_sendStop)
    4e8c:	80 91 b9 02 	lds	r24, 0x02B9
    4e90:	88 23       	and	r24, r24
    4e92:	41 f0       	breq	.+16     	; 0x4ea4 <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4e94:	85 ed       	ldi	r24, 0xD5	; 213
    4e96:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4e9a:	80 91 bc 00 	lds	r24, 0x00BC
    4e9e:	84 fd       	sbrc	r24, 4
    4ea0:	fc cf       	rjmp	.-8      	; 0x4e9a <__vector_24+0x1f4>
    4ea2:	7f c0       	rjmp	.+254    	; 0x4fa2 <__vector_24+0x2fc>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    4ea4:	81 e0       	ldi	r24, 0x01	; 1
    4ea6:	80 93 ba 02 	sts	0x02BA, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4eaa:	84 ea       	ldi	r24, 0xA4	; 164
    4eac:	6e c0       	rjmp	.+220    	; 0x4f8a <__vector_24+0x2e4>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4eae:	85 ed       	ldi	r24, 0xD5	; 213
    4eb0:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4eb4:	80 91 bc 00 	lds	r24, 0x00BC
    4eb8:	84 fd       	sbrc	r24, 4
    4eba:	fc cf       	rjmp	.-8      	; 0x4eb4 <__vector_24+0x20e>
    4ebc:	72 c0       	rjmp	.+228    	; 0x4fa2 <__vector_24+0x2fc>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    4ebe:	83 e0       	ldi	r24, 0x03	; 3
    4ec0:	80 93 b7 02 	sts	0x02B7, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    4ec4:	10 92 23 03 	sts	0x0323, r1
    4ec8:	59 c0       	rjmp	.+178    	; 0x4f7c <__vector_24+0x2d6>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4eca:	80 91 23 03 	lds	r24, 0x0323
    4ece:	80 32       	cpi	r24, 0x20	; 32
    4ed0:	08 f0       	brcs	.+2      	; 0x4ed4 <__vector_24+0x22e>
    4ed2:	56 c0       	rjmp	.+172    	; 0x4f80 <__vector_24+0x2da>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    4ed4:	80 91 23 03 	lds	r24, 0x0323
    4ed8:	90 91 bb 00 	lds	r25, 0x00BB
    4edc:	e8 2f       	mov	r30, r24
    4ede:	f0 e0       	ldi	r31, 0x00	; 0
    4ee0:	ed 5f       	subi	r30, 0xFD	; 253
    4ee2:	fc 4f       	sbci	r31, 0xFC	; 252
    4ee4:	90 83       	st	Z, r25
    4ee6:	8f 5f       	subi	r24, 0xFF	; 255
    4ee8:	80 93 23 03 	sts	0x0323, r24
    4eec:	47 c0       	rjmp	.+142    	; 0x4f7c <__vector_24+0x2d6>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4eee:	80 91 23 03 	lds	r24, 0x0323
    4ef2:	80 32       	cpi	r24, 0x20	; 32
    4ef4:	30 f4       	brcc	.+12     	; 0x4f02 <__vector_24+0x25c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    4ef6:	e0 91 23 03 	lds	r30, 0x0323
    4efa:	f0 e0       	ldi	r31, 0x00	; 0
    4efc:	ed 5f       	subi	r30, 0xFD	; 253
    4efe:	fc 4f       	sbci	r31, 0xFC	; 252
    4f00:	10 82       	st	Z, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4f02:	85 ed       	ldi	r24, 0xD5	; 213
    4f04:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4f08:	80 91 bc 00 	lds	r24, 0x00BC
    4f0c:	84 fd       	sbrc	r24, 4
    4f0e:	fc cf       	rjmp	.-8      	; 0x4f08 <__vector_24+0x262>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    4f10:	10 92 b7 02 	sts	0x02B7, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    4f14:	60 91 23 03 	lds	r22, 0x0323
    4f18:	e0 91 bd 02 	lds	r30, 0x02BD
    4f1c:	f0 91 be 02 	lds	r31, 0x02BE
    4f20:	83 e0       	ldi	r24, 0x03	; 3
    4f22:	93 e0       	ldi	r25, 0x03	; 3
    4f24:	70 e0       	ldi	r23, 0x00	; 0
    4f26:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    4f28:	10 92 23 03 	sts	0x0323, r1
    4f2c:	2d c0       	rjmp	.+90     	; 0x4f88 <__vector_24+0x2e2>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    4f2e:	84 e0       	ldi	r24, 0x04	; 4
    4f30:	80 93 b7 02 	sts	0x02B7, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    4f34:	10 92 01 03 	sts	0x0301, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    4f38:	10 92 02 03 	sts	0x0302, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    4f3c:	e0 91 bb 02 	lds	r30, 0x02BB
    4f40:	f0 91 bc 02 	lds	r31, 0x02BC
    4f44:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    4f46:	80 91 02 03 	lds	r24, 0x0302
    4f4a:	88 23       	and	r24, r24
    4f4c:	29 f4       	brne	.+10     	; 0x4f58 <__vector_24+0x2b2>
        twi_txBufferLength = 1;
    4f4e:	81 e0       	ldi	r24, 0x01	; 1
    4f50:	80 93 02 03 	sts	0x0302, r24
        twi_txBuffer[0] = 0x00;
    4f54:	10 92 e1 02 	sts	0x02E1, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    4f58:	90 91 01 03 	lds	r25, 0x0301
    4f5c:	e9 2f       	mov	r30, r25
    4f5e:	f0 e0       	ldi	r31, 0x00	; 0
    4f60:	ef 51       	subi	r30, 0x1F	; 31
    4f62:	fd 4f       	sbci	r31, 0xFD	; 253
    4f64:	80 81       	ld	r24, Z
    4f66:	80 93 bb 00 	sts	0x00BB, r24
    4f6a:	9f 5f       	subi	r25, 0xFF	; 255
    4f6c:	90 93 01 03 	sts	0x0301, r25
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    4f70:	90 91 01 03 	lds	r25, 0x0301
    4f74:	80 91 02 03 	lds	r24, 0x0302
    4f78:	98 17       	cp	r25, r24
    4f7a:	10 f4       	brcc	.+4      	; 0x4f80 <__vector_24+0x2da>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4f7c:	85 ec       	ldi	r24, 0xC5	; 197
    4f7e:	01 c0       	rjmp	.+2      	; 0x4f82 <__vector_24+0x2dc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4f80:	85 e8       	ldi	r24, 0x85	; 133
    4f82:	80 93 bc 00 	sts	0x00BC, r24
    4f86:	0f c0       	rjmp	.+30     	; 0x4fa6 <__vector_24+0x300>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4f88:	85 ec       	ldi	r24, 0xC5	; 197
    4f8a:	80 93 bc 00 	sts	0x00BC, r24
    4f8e:	09 c0       	rjmp	.+18     	; 0x4fa2 <__vector_24+0x2fc>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    4f90:	10 92 24 03 	sts	0x0324, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4f94:	85 ed       	ldi	r24, 0xD5	; 213
    4f96:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4f9a:	80 91 bc 00 	lds	r24, 0x00BC
    4f9e:	84 fd       	sbrc	r24, 4
    4fa0:	fc cf       	rjmp	.-8      	; 0x4f9a <__vector_24+0x2f4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    4fa2:	10 92 b7 02 	sts	0x02B7, r1
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    4fa6:	ff 91       	pop	r31
    4fa8:	ef 91       	pop	r30
    4faa:	bf 91       	pop	r27
    4fac:	af 91       	pop	r26
    4fae:	9f 91       	pop	r25
    4fb0:	8f 91       	pop	r24
    4fb2:	7f 91       	pop	r23
    4fb4:	6f 91       	pop	r22
    4fb6:	5f 91       	pop	r21
    4fb8:	4f 91       	pop	r20
    4fba:	3f 91       	pop	r19
    4fbc:	2f 91       	pop	r18
    4fbe:	0f 90       	pop	r0
    4fc0:	0f be       	out	0x3f, r0	; 63
    4fc2:	0f 90       	pop	r0
    4fc4:	1f 90       	pop	r1
    4fc6:	18 95       	reti

00004fc8 <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    4fc8:	10 92 b7 02 	sts	0x02B7, r1
  twi_sendStop = true;		// default value
    4fcc:	81 e0       	ldi	r24, 0x01	; 1
    4fce:	80 93 b9 02 	sts	0x02B9, r24
  twi_inRepStart = false;
    4fd2:	10 92 ba 02 	sts	0x02BA, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    4fd6:	82 e1       	ldi	r24, 0x12	; 18
    4fd8:	61 e0       	ldi	r22, 0x01	; 1
    4fda:	0e 94 81 30 	call	0x6102	; 0x6102 <digitalWrite>
  digitalWrite(SCL, 1);
    4fde:	83 e1       	ldi	r24, 0x13	; 19
    4fe0:	61 e0       	ldi	r22, 0x01	; 1
    4fe2:	0e 94 81 30 	call	0x6102	; 0x6102 <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    4fe6:	e9 eb       	ldi	r30, 0xB9	; 185
    4fe8:	f0 e0       	ldi	r31, 0x00	; 0
    4fea:	80 81       	ld	r24, Z
    4fec:	8e 7f       	andi	r24, 0xFE	; 254
    4fee:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    4ff0:	80 81       	ld	r24, Z
    4ff2:	8d 7f       	andi	r24, 0xFD	; 253
    4ff4:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    4ff6:	88 e4       	ldi	r24, 0x48	; 72
    4ff8:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    4ffc:	85 e4       	ldi	r24, 0x45	; 69
    4ffe:	80 93 bc 00 	sts	0x00BC, r24
}
    5002:	08 95       	ret

00005004 <_ZN9DS1307RTC4readER12tmElements_t>:
  tm.Second &= 0x7f;  // start the clock
  write(tm); 
}

// Aquire data from the RTC chip in BCD format
bool DS1307RTC::read(tmElements_t &tm)
    5004:	0f 93       	push	r16
    5006:	1f 93       	push	r17
    5008:	cf 93       	push	r28
    500a:	df 93       	push	r29
    500c:	ec 01       	movw	r28, r24
{
  uint8_t sec;
  Wire.beginTransmission(DS1307_CTRL_ID);
    500e:	8b ea       	ldi	r24, 0xAB	; 171
    5010:	92 e0       	ldi	r25, 0x02	; 2
    5012:	68 e6       	ldi	r22, 0x68	; 104
    5014:	70 e0       	ldi	r23, 0x00	; 0
    5016:	0e 94 b5 24 	call	0x496a	; 0x496a <_ZN7TwoWire17beginTransmissionEi>
#if ARDUINO >= 100  
  Wire.write((uint8_t)0x00); 
    501a:	8b ea       	ldi	r24, 0xAB	; 171
    501c:	92 e0       	ldi	r25, 0x02	; 2
    501e:	60 e0       	ldi	r22, 0x00	; 0
    5020:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <_ZN7TwoWire5writeEh>
#else
  Wire.send(0x00);
#endif  
  if (Wire.endTransmission() != 0) {
    5024:	8b ea       	ldi	r24, 0xAB	; 171
    5026:	92 e0       	ldi	r25, 0x02	; 2
    5028:	0e 94 7a 25 	call	0x4af4	; 0x4af4 <_ZN7TwoWire15endTransmissionEv>
    502c:	88 23       	and	r24, r24
    502e:	19 f0       	breq	.+6      	; 0x5036 <_ZN9DS1307RTC4readER12tmElements_t+0x32>
    exists = false;
    5030:	10 92 25 03 	sts	0x0325, r1
    5034:	11 c0       	rjmp	.+34     	; 0x5058 <_ZN9DS1307RTC4readER12tmElements_t+0x54>
    return false;
  }
  exists = true;
    5036:	81 e0       	ldi	r24, 0x01	; 1
    5038:	80 93 25 03 	sts	0x0325, r24

  // request the 7 data fields   (secs, min, hr, dow, date, mth, yr)
  Wire.requestFrom(DS1307_CTRL_ID, tmNbrFields);
    503c:	8b ea       	ldi	r24, 0xAB	; 171
    503e:	92 e0       	ldi	r25, 0x02	; 2
    5040:	68 e6       	ldi	r22, 0x68	; 104
    5042:	70 e0       	ldi	r23, 0x00	; 0
    5044:	47 e0       	ldi	r20, 0x07	; 7
    5046:	50 e0       	ldi	r21, 0x00	; 0
    5048:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <_ZN7TwoWire11requestFromEii>
  if (Wire.available() < tmNbrFields) return false;
    504c:	8b ea       	ldi	r24, 0xAB	; 171
    504e:	92 e0       	ldi	r25, 0x02	; 2
    5050:	0e 94 bf 24 	call	0x497e	; 0x497e <_ZN7TwoWire9availableEv>
    5054:	07 97       	sbiw	r24, 0x07	; 7
    5056:	14 f4       	brge	.+4      	; 0x505c <_ZN9DS1307RTC4readER12tmElements_t+0x58>
    5058:	80 e0       	ldi	r24, 0x00	; 0
    505a:	65 c0       	rjmp	.+202    	; 0x5126 <_ZN9DS1307RTC4readER12tmElements_t+0x122>
#if ARDUINO >= 100
  sec = Wire.read();
    505c:	8b ea       	ldi	r24, 0xAB	; 171
    505e:	92 e0       	ldi	r25, 0x02	; 2
    5060:	0e 94 c8 24 	call	0x4990	; 0x4990 <_ZN7TwoWire4readEv>
    5064:	08 2f       	mov	r16, r24
  tm.Second = bcd2dec(sec & 0x7f);   
    5066:	8f 77       	andi	r24, 0x7F	; 127
    5068:	82 95       	swap	r24
    506a:	8f 70       	andi	r24, 0x0F	; 15
    506c:	1a e0       	ldi	r17, 0x0A	; 10
    506e:	81 9f       	mul	r24, r17
    5070:	c0 01       	movw	r24, r0
    5072:	11 24       	eor	r1, r1
    5074:	20 2f       	mov	r18, r16
    5076:	2f 70       	andi	r18, 0x0F	; 15
    5078:	28 0f       	add	r18, r24
    507a:	28 83       	st	Y, r18
  tm.Minute = bcd2dec(Wire.read() );
    507c:	8b ea       	ldi	r24, 0xAB	; 171
    507e:	92 e0       	ldi	r25, 0x02	; 2
    5080:	0e 94 c8 24 	call	0x4990	; 0x4990 <_ZN7TwoWire4readEv>
    5084:	28 2f       	mov	r18, r24
    5086:	22 95       	swap	r18
    5088:	2f 70       	andi	r18, 0x0F	; 15
    508a:	21 9f       	mul	r18, r17
    508c:	90 01       	movw	r18, r0
    508e:	11 24       	eor	r1, r1
    5090:	8f 70       	andi	r24, 0x0F	; 15
    5092:	82 0f       	add	r24, r18
    5094:	89 83       	std	Y+1, r24	; 0x01
  tm.Hour =   bcd2dec(Wire.read() & 0x3f);  // mask assumes 24hr clock
    5096:	8b ea       	ldi	r24, 0xAB	; 171
    5098:	92 e0       	ldi	r25, 0x02	; 2
    509a:	0e 94 c8 24 	call	0x4990	; 0x4990 <_ZN7TwoWire4readEv>
    509e:	28 2f       	mov	r18, r24
    50a0:	2f 73       	andi	r18, 0x3F	; 63
    50a2:	22 95       	swap	r18
    50a4:	2f 70       	andi	r18, 0x0F	; 15
    50a6:	21 9f       	mul	r18, r17
    50a8:	90 01       	movw	r18, r0
    50aa:	11 24       	eor	r1, r1
    50ac:	8f 70       	andi	r24, 0x0F	; 15
    50ae:	82 0f       	add	r24, r18
    50b0:	8a 83       	std	Y+2, r24	; 0x02
  tm.Wday = bcd2dec(Wire.read() );
    50b2:	8b ea       	ldi	r24, 0xAB	; 171
    50b4:	92 e0       	ldi	r25, 0x02	; 2
    50b6:	0e 94 c8 24 	call	0x4990	; 0x4990 <_ZN7TwoWire4readEv>
    50ba:	28 2f       	mov	r18, r24
    50bc:	22 95       	swap	r18
    50be:	2f 70       	andi	r18, 0x0F	; 15
    50c0:	21 9f       	mul	r18, r17
    50c2:	90 01       	movw	r18, r0
    50c4:	11 24       	eor	r1, r1
    50c6:	8f 70       	andi	r24, 0x0F	; 15
    50c8:	82 0f       	add	r24, r18
    50ca:	8b 83       	std	Y+3, r24	; 0x03
  tm.Day = bcd2dec(Wire.read() );
    50cc:	8b ea       	ldi	r24, 0xAB	; 171
    50ce:	92 e0       	ldi	r25, 0x02	; 2
    50d0:	0e 94 c8 24 	call	0x4990	; 0x4990 <_ZN7TwoWire4readEv>
    50d4:	28 2f       	mov	r18, r24
    50d6:	22 95       	swap	r18
    50d8:	2f 70       	andi	r18, 0x0F	; 15
    50da:	21 9f       	mul	r18, r17
    50dc:	90 01       	movw	r18, r0
    50de:	11 24       	eor	r1, r1
    50e0:	8f 70       	andi	r24, 0x0F	; 15
    50e2:	82 0f       	add	r24, r18
    50e4:	8c 83       	std	Y+4, r24	; 0x04
  tm.Month = bcd2dec(Wire.read() );
    50e6:	8b ea       	ldi	r24, 0xAB	; 171
    50e8:	92 e0       	ldi	r25, 0x02	; 2
    50ea:	0e 94 c8 24 	call	0x4990	; 0x4990 <_ZN7TwoWire4readEv>
    50ee:	28 2f       	mov	r18, r24
    50f0:	22 95       	swap	r18
    50f2:	2f 70       	andi	r18, 0x0F	; 15
    50f4:	21 9f       	mul	r18, r17
    50f6:	90 01       	movw	r18, r0
    50f8:	11 24       	eor	r1, r1
    50fa:	8f 70       	andi	r24, 0x0F	; 15
    50fc:	82 0f       	add	r24, r18
    50fe:	8d 83       	std	Y+5, r24	; 0x05
  tm.Year = y2kYearToTm((bcd2dec(Wire.read())));
    5100:	8b ea       	ldi	r24, 0xAB	; 171
    5102:	92 e0       	ldi	r25, 0x02	; 2
    5104:	0e 94 c8 24 	call	0x4990	; 0x4990 <_ZN7TwoWire4readEv>
    5108:	28 2f       	mov	r18, r24
    510a:	2f 70       	andi	r18, 0x0F	; 15
    510c:	22 5e       	subi	r18, 0xE2	; 226
    510e:	82 95       	swap	r24
    5110:	8f 70       	andi	r24, 0x0F	; 15
    5112:	81 9f       	mul	r24, r17
    5114:	c0 01       	movw	r24, r0
    5116:	11 24       	eor	r1, r1
    5118:	28 0f       	add	r18, r24
    511a:	2e 83       	std	Y+6, r18	; 0x06
    511c:	80 2f       	mov	r24, r16
    511e:	80 95       	com	r24
    5120:	88 1f       	adc	r24, r24
    5122:	88 27       	eor	r24, r24
    5124:	88 1f       	adc	r24, r24
  tm.Month = bcd2dec(Wire.receive() );
  tm.Year = y2kYearToTm((bcd2dec(Wire.receive())));
#endif
  if (sec & 0x80) return false; // clock is halted
  return true;
}
    5126:	df 91       	pop	r29
    5128:	cf 91       	pop	r28
    512a:	1f 91       	pop	r17
    512c:	0f 91       	pop	r16
    512e:	08 95       	ret

00005130 <_ZN9DS1307RTC3getEv>:
{
  Wire.begin();
}
  
// PUBLIC FUNCTIONS
time_t DS1307RTC::get()   // Aquire data from buffer and convert to time_t
    5130:	0f 93       	push	r16
    5132:	1f 93       	push	r17
    5134:	df 93       	push	r29
    5136:	cf 93       	push	r28
    5138:	cd b7       	in	r28, 0x3d	; 61
    513a:	de b7       	in	r29, 0x3e	; 62
    513c:	27 97       	sbiw	r28, 0x07	; 7
    513e:	0f b6       	in	r0, 0x3f	; 63
    5140:	f8 94       	cli
    5142:	de bf       	out	0x3e, r29	; 62
    5144:	0f be       	out	0x3f, r0	; 63
    5146:	cd bf       	out	0x3d, r28	; 61
{
  tmElements_t tm;
  if (read(tm) == false) return 0;
    5148:	8e 01       	movw	r16, r28
    514a:	0f 5f       	subi	r16, 0xFF	; 255
    514c:	1f 4f       	sbci	r17, 0xFF	; 255
    514e:	c8 01       	movw	r24, r16
    5150:	0e 94 02 28 	call	0x5004	; 0x5004 <_ZN9DS1307RTC4readER12tmElements_t>
    5154:	88 23       	and	r24, r24
    5156:	29 f4       	brne	.+10     	; 0x5162 <_ZN9DS1307RTC3getEv+0x32>
    5158:	20 e0       	ldi	r18, 0x00	; 0
    515a:	30 e0       	ldi	r19, 0x00	; 0
    515c:	40 e0       	ldi	r20, 0x00	; 0
    515e:	50 e0       	ldi	r21, 0x00	; 0
    5160:	05 c0       	rjmp	.+10     	; 0x516c <_ZN9DS1307RTC3getEv+0x3c>
  return(makeTime(tm));
    5162:	c8 01       	movw	r24, r16
    5164:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <_Z8makeTimeR12tmElements_t>
    5168:	9b 01       	movw	r18, r22
    516a:	ac 01       	movw	r20, r24
}
    516c:	b9 01       	movw	r22, r18
    516e:	ca 01       	movw	r24, r20
    5170:	27 96       	adiw	r28, 0x07	; 7
    5172:	0f b6       	in	r0, 0x3f	; 63
    5174:	f8 94       	cli
    5176:	de bf       	out	0x3e, r29	; 62
    5178:	0f be       	out	0x3f, r0	; 63
    517a:	cd bf       	out	0x3d, r28	; 61
    517c:	cf 91       	pop	r28
    517e:	df 91       	pop	r29
    5180:	1f 91       	pop	r17
    5182:	0f 91       	pop	r16
    5184:	08 95       	ret

00005186 <_GLOBAL__I__ZN9DS1307RTCC2Ev>:

#define DS1307_CTRL_ID 0x68 

DS1307RTC::DS1307RTC()
{
  Wire.begin();
    5186:	8b ea       	ldi	r24, 0xAB	; 171
    5188:	92 e0       	ldi	r25, 0x02	; 2
    518a:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <_ZN7TwoWire5beginEv>
  return ((num/16 * 10) + (num % 16));
}

bool DS1307RTC::exists = false;

DS1307RTC RTC = DS1307RTC(); // create an instance for the user
    518e:	08 95       	ret

00005190 <_ZN7OneWire12reset_searchEv>:

//
// You need to use this function to start a search again from the beginning.
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
    5190:	fc 01       	movw	r30, r24
{
  // reset the search state
  LastDiscrepancy = 0;
    5192:	13 86       	std	Z+11, r1	; 0x0b
  LastDeviceFlag = FALSE;
    5194:	15 86       	std	Z+13, r1	; 0x0d
  LastFamilyDiscrepancy = 0;
    5196:	14 86       	std	Z+12, r1	; 0x0c
    5198:	87 e0       	ldi	r24, 0x07	; 7
    519a:	90 e0       	ldi	r25, 0x00	; 0
  for(int i = 7; ; i--) {
    ROM_NO[i] = 0;
    519c:	12 86       	std	Z+10, r1	; 0x0a
    519e:	31 97       	sbiw	r30, 0x01	; 1
    if ( i == 0) break;
    51a0:	00 97       	sbiw	r24, 0x00	; 0
    51a2:	11 f0       	breq	.+4      	; 0x51a8 <_ZN7OneWire12reset_searchEv+0x18>
{
  // reset the search state
  LastDiscrepancy = 0;
  LastDeviceFlag = FALSE;
  LastFamilyDiscrepancy = 0;
  for(int i = 7; ; i--) {
    51a4:	01 97       	sbiw	r24, 0x01	; 1
    51a6:	fa cf       	rjmp	.-12     	; 0x519c <_ZN7OneWire12reset_searchEv+0xc>
    51a8:	08 95       	ret

000051aa <_ZN7OneWire4crc8EPKhh>:
// and the registers.  (note: this might better be done without to
// table, it would probably be smaller and certainly fast enough
// compared to all those delayMicrosecond() calls.  But I got
// confused, so I use this table from the examples.)
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
    51aa:	dc 01       	movw	r26, r24
    51ac:	80 e0       	ldi	r24, 0x00	; 0
    51ae:	0b c0       	rjmp	.+22     	; 0x51c6 <_ZN7OneWire4crc8EPKhh+0x1c>
{
	uint8_t crc = 0;

	while (len--) {
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
    51b0:	e8 2f       	mov	r30, r24
    51b2:	f0 e0       	ldi	r31, 0x00	; 0
    51b4:	8d 91       	ld	r24, X+
    51b6:	90 e0       	ldi	r25, 0x00	; 0
    51b8:	e8 27       	eor	r30, r24
    51ba:	f9 27       	eor	r31, r25
    51bc:	e5 5a       	subi	r30, 0xA5	; 165
    51be:	f7 4f       	sbci	r31, 0xF7	; 247
    51c0:	e4 91       	lpm	r30, Z+
    51c2:	61 50       	subi	r22, 0x01	; 1
    51c4:	8e 2f       	mov	r24, r30
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;

	while (len--) {
    51c6:	66 23       	and	r22, r22
    51c8:	99 f7       	brne	.-26     	; 0x51b0 <_ZN7OneWire4crc8EPKhh+0x6>
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
	}
	return crc;
}
    51ca:	08 95       	ret

000051cc <_ZN7OneWire8read_bitEv>:

//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
    51cc:	df 92       	push	r13
    51ce:	ef 92       	push	r14
    51d0:	ff 92       	push	r15
    51d2:	0f 93       	push	r16
    51d4:	1f 93       	push	r17
    51d6:	fc 01       	movw	r30, r24
{
	IO_REG_TYPE mask=bitmask;
    51d8:	e0 80       	ld	r14, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    51da:	01 81       	ldd	r16, Z+1	; 0x01
    51dc:	12 81       	ldd	r17, Z+2	; 0x02
	uint8_t r;

	noInterrupts();
    51de:	f8 94       	cli
	DIRECT_MODE_OUTPUT(reg, mask);
    51e0:	f8 01       	movw	r30, r16
    51e2:	81 81       	ldd	r24, Z+1	; 0x01
    51e4:	8e 29       	or	r24, r14
    51e6:	81 83       	std	Z+1, r24	; 0x01
	DIRECT_WRITE_LOW(reg, mask);
    51e8:	82 81       	ldd	r24, Z+2	; 0x02
    51ea:	de 2c       	mov	r13, r14
    51ec:	d0 94       	com	r13
    51ee:	8d 21       	and	r24, r13
    51f0:	82 83       	std	Z+2, r24	; 0x02
	delayMicroseconds(3);
    51f2:	83 e0       	ldi	r24, 0x03	; 3
    51f4:	90 e0       	ldi	r25, 0x00	; 0
    51f6:	0e 94 fd 2f 	call	0x5ffa	; 0x5ffa <delayMicroseconds>
	DIRECT_MODE_INPUT(reg, mask);	// let pin float, pull up will raise
    51fa:	f8 01       	movw	r30, r16
    51fc:	81 81       	ldd	r24, Z+1	; 0x01
    51fe:	8d 21       	and	r24, r13
    5200:	81 83       	std	Z+1, r24	; 0x01
	delayMicroseconds(10);
    5202:	8a e0       	ldi	r24, 0x0A	; 10
    5204:	90 e0       	ldi	r25, 0x00	; 0
    5206:	0e 94 fd 2f 	call	0x5ffa	; 0x5ffa <delayMicroseconds>
	r = DIRECT_READ(reg, mask);
    520a:	f8 01       	movw	r30, r16
    520c:	00 81       	ld	r16, Z
	interrupts();
    520e:	78 94       	sei
	delayMicroseconds(53);
    5210:	85 e3       	ldi	r24, 0x35	; 53
    5212:	90 e0       	ldi	r25, 0x00	; 0
    5214:	0e 94 fd 2f 	call	0x5ffa	; 0x5ffa <delayMicroseconds>
    5218:	80 e0       	ldi	r24, 0x00	; 0
    521a:	10 e0       	ldi	r17, 0x00	; 0
    521c:	ff 24       	eor	r15, r15
    521e:	0e 21       	and	r16, r14
    5220:	1f 21       	and	r17, r15
    5222:	01 2b       	or	r16, r17
    5224:	09 f0       	breq	.+2      	; 0x5228 <_ZN7OneWire8read_bitEv+0x5c>
    5226:	81 e0       	ldi	r24, 0x01	; 1
	return r;
}
    5228:	1f 91       	pop	r17
    522a:	0f 91       	pop	r16
    522c:	ff 90       	pop	r15
    522e:	ef 90       	pop	r14
    5230:	df 90       	pop	r13
    5232:	08 95       	ret

00005234 <_ZN7OneWire4readEv>:
}

//
// Read a byte
//
uint8_t OneWire::read() {
    5234:	ef 92       	push	r14
    5236:	ff 92       	push	r15
    5238:	0f 93       	push	r16
    523a:	1f 93       	push	r17
    523c:	cf 93       	push	r28
    523e:	df 93       	push	r29
    5240:	7c 01       	movw	r14, r24
    5242:	01 e0       	ldi	r16, 0x01	; 1
    5244:	10 e0       	ldi	r17, 0x00	; 0
    5246:	c0 e0       	ldi	r28, 0x00	; 0
    5248:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
	if ( OneWire::read_bit()) r |= bitMask;
    524a:	c7 01       	movw	r24, r14
    524c:	0e 94 e6 28 	call	0x51cc	; 0x51cc <_ZN7OneWire8read_bitEv>
    5250:	81 11       	cpse	r24, r1
    5252:	10 2b       	or	r17, r16
//
uint8_t OneWire::read() {
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    5254:	00 0f       	add	r16, r16
    5256:	21 96       	adiw	r28, 0x01	; 1
    5258:	c8 30       	cpi	r28, 0x08	; 8
    525a:	d1 05       	cpc	r29, r1
    525c:	b1 f7       	brne	.-20     	; 0x524a <_ZN7OneWire4readEv+0x16>
	if ( OneWire::read_bit()) r |= bitMask;
    }
    return r;
}
    525e:	81 2f       	mov	r24, r17
    5260:	df 91       	pop	r29
    5262:	cf 91       	pop	r28
    5264:	1f 91       	pop	r17
    5266:	0f 91       	pop	r16
    5268:	ff 90       	pop	r15
    526a:	ef 90       	pop	r14
    526c:	08 95       	ret

0000526e <_ZN7OneWire9write_bitEh>:

//
// Write a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
void OneWire::write_bit(uint8_t v)
    526e:	1f 93       	push	r17
    5270:	cf 93       	push	r28
    5272:	df 93       	push	r29
    5274:	fc 01       	movw	r30, r24
{
	IO_REG_TYPE mask=bitmask;
    5276:	10 81       	ld	r17, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    5278:	c1 81       	ldd	r28, Z+1	; 0x01
    527a:	d2 81       	ldd	r29, Z+2	; 0x02
    527c:	91 2f       	mov	r25, r17
    527e:	90 95       	com	r25

	if (v & 1) {
    5280:	60 ff       	sbrs	r22, 0
    5282:	12 c0       	rjmp	.+36     	; 0x52a8 <_ZN7OneWire9write_bitEh+0x3a>
		noInterrupts();
    5284:	f8 94       	cli
		DIRECT_WRITE_LOW(reg, mask);
    5286:	8a 81       	ldd	r24, Y+2	; 0x02
    5288:	89 23       	and	r24, r25
    528a:	8a 83       	std	Y+2, r24	; 0x02
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    528c:	89 81       	ldd	r24, Y+1	; 0x01
    528e:	81 2b       	or	r24, r17
    5290:	89 83       	std	Y+1, r24	; 0x01
		delayMicroseconds(10);
    5292:	8a e0       	ldi	r24, 0x0A	; 10
    5294:	90 e0       	ldi	r25, 0x00	; 0
    5296:	0e 94 fd 2f 	call	0x5ffa	; 0x5ffa <delayMicroseconds>
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
    529a:	8a 81       	ldd	r24, Y+2	; 0x02
    529c:	81 2b       	or	r24, r17
    529e:	8a 83       	std	Y+2, r24	; 0x02
		interrupts();
    52a0:	78 94       	sei
		delayMicroseconds(55);
    52a2:	87 e3       	ldi	r24, 0x37	; 55
    52a4:	90 e0       	ldi	r25, 0x00	; 0
    52a6:	11 c0       	rjmp	.+34     	; 0x52ca <_ZN7OneWire9write_bitEh+0x5c>
	} else {
		noInterrupts();
    52a8:	f8 94       	cli
		DIRECT_WRITE_LOW(reg, mask);
    52aa:	8a 81       	ldd	r24, Y+2	; 0x02
    52ac:	89 23       	and	r24, r25
    52ae:	8a 83       	std	Y+2, r24	; 0x02
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    52b0:	89 81       	ldd	r24, Y+1	; 0x01
    52b2:	81 2b       	or	r24, r17
    52b4:	89 83       	std	Y+1, r24	; 0x01
		delayMicroseconds(65);
    52b6:	81 e4       	ldi	r24, 0x41	; 65
    52b8:	90 e0       	ldi	r25, 0x00	; 0
    52ba:	0e 94 fd 2f 	call	0x5ffa	; 0x5ffa <delayMicroseconds>
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
    52be:	8a 81       	ldd	r24, Y+2	; 0x02
    52c0:	81 2b       	or	r24, r17
    52c2:	8a 83       	std	Y+2, r24	; 0x02
		interrupts();
    52c4:	78 94       	sei
		delayMicroseconds(5);
    52c6:	85 e0       	ldi	r24, 0x05	; 5
    52c8:	90 e0       	ldi	r25, 0x00	; 0
    52ca:	0e 94 fd 2f 	call	0x5ffa	; 0x5ffa <delayMicroseconds>
	}
}
    52ce:	df 91       	pop	r29
    52d0:	cf 91       	pop	r28
    52d2:	1f 91       	pop	r17
    52d4:	08 95       	ret

000052d6 <_ZN7OneWire5writeEhh>:
// pin high, if you need power after the write (e.g. DS18S20 in
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) {
    52d6:	cf 92       	push	r12
    52d8:	df 92       	push	r13
    52da:	ef 92       	push	r14
    52dc:	ff 92       	push	r15
    52de:	0f 93       	push	r16
    52e0:	1f 93       	push	r17
    52e2:	cf 93       	push	r28
    52e4:	df 93       	push	r29
    52e6:	8c 01       	movw	r16, r24
    52e8:	e4 2e       	mov	r14, r20
    52ea:	ff 24       	eor	r15, r15
    52ec:	f3 94       	inc	r15
    52ee:	c0 e0       	ldi	r28, 0x00	; 0
    52f0:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
	OneWire::write_bit( (bitMask & v)?1:0);
    52f2:	c6 2e       	mov	r12, r22
    52f4:	dd 24       	eor	r13, r13
    52f6:	60 e0       	ldi	r22, 0x00	; 0
    52f8:	8f 2d       	mov	r24, r15
    52fa:	90 e0       	ldi	r25, 0x00	; 0
    52fc:	8c 21       	and	r24, r12
    52fe:	9d 21       	and	r25, r13
    5300:	89 2b       	or	r24, r25
    5302:	09 f0       	breq	.+2      	; 0x5306 <_ZN7OneWire5writeEhh+0x30>
    5304:	61 e0       	ldi	r22, 0x01	; 1
    5306:	c8 01       	movw	r24, r16
    5308:	0e 94 37 29 	call	0x526e	; 0x526e <_ZN7OneWire9write_bitEh>
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) {
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    530c:	ff 0c       	add	r15, r15
    530e:	21 96       	adiw	r28, 0x01	; 1
    5310:	c8 30       	cpi	r28, 0x08	; 8
    5312:	d1 05       	cpc	r29, r1
    5314:	81 f7       	brne	.-32     	; 0x52f6 <_ZN7OneWire5writeEhh+0x20>
	OneWire::write_bit( (bitMask & v)?1:0);
    }
    if ( !power) {
    5316:	ee 20       	and	r14, r14
    5318:	a9 f4       	brne	.+42     	; 0x5344 <_ZN7OneWire5writeEhh+0x6e>
	noInterrupts();
    531a:	f8 94       	cli
	DIRECT_MODE_INPUT(baseReg, bitmask);
    531c:	d8 01       	movw	r26, r16
    531e:	11 96       	adiw	r26, 0x01	; 1
    5320:	ed 91       	ld	r30, X+
    5322:	fc 91       	ld	r31, X
    5324:	12 97       	sbiw	r26, 0x02	; 2
    5326:	91 81       	ldd	r25, Z+1	; 0x01
    5328:	8c 91       	ld	r24, X
    532a:	80 95       	com	r24
    532c:	98 23       	and	r25, r24
    532e:	91 83       	std	Z+1, r25	; 0x01
	DIRECT_WRITE_LOW(baseReg, bitmask);
    5330:	11 96       	adiw	r26, 0x01	; 1
    5332:	ed 91       	ld	r30, X+
    5334:	fc 91       	ld	r31, X
    5336:	12 97       	sbiw	r26, 0x02	; 2
    5338:	92 81       	ldd	r25, Z+2	; 0x02
    533a:	8c 91       	ld	r24, X
    533c:	80 95       	com	r24
    533e:	98 23       	and	r25, r24
    5340:	92 83       	std	Z+2, r25	; 0x02
	interrupts();
    5342:	78 94       	sei
    }
}
    5344:	df 91       	pop	r29
    5346:	cf 91       	pop	r28
    5348:	1f 91       	pop	r17
    534a:	0f 91       	pop	r16
    534c:	ff 90       	pop	r15
    534e:	ef 90       	pop	r14
    5350:	df 90       	pop	r13
    5352:	cf 90       	pop	r12
    5354:	08 95       	ret

00005356 <_ZN7OneWire6selectEPKh>:
}

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
    5356:	ef 92       	push	r14
    5358:	ff 92       	push	r15
    535a:	0f 93       	push	r16
    535c:	1f 93       	push	r17
    535e:	cf 93       	push	r28
    5360:	df 93       	push	r29
    5362:	8c 01       	movw	r16, r24
    5364:	7b 01       	movw	r14, r22
{
    uint8_t i;

    write(0x55);           // Choose ROM
    5366:	65 e5       	ldi	r22, 0x55	; 85
    5368:	40 e0       	ldi	r20, 0x00	; 0
    536a:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <_ZN7OneWire5writeEhh>
    536e:	c0 e0       	ldi	r28, 0x00	; 0
    5370:	d0 e0       	ldi	r29, 0x00	; 0

    for (i = 0; i < 8; i++) write(rom[i]);
    5372:	f7 01       	movw	r30, r14
    5374:	ec 0f       	add	r30, r28
    5376:	fd 1f       	adc	r31, r29
    5378:	c8 01       	movw	r24, r16
    537a:	60 81       	ld	r22, Z
    537c:	40 e0       	ldi	r20, 0x00	; 0
    537e:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <_ZN7OneWire5writeEhh>
    5382:	21 96       	adiw	r28, 0x01	; 1
    5384:	c8 30       	cpi	r28, 0x08	; 8
    5386:	d1 05       	cpc	r29, r1
    5388:	a1 f7       	brne	.-24     	; 0x5372 <_ZN7OneWire6selectEPKh+0x1c>
}
    538a:	df 91       	pop	r29
    538c:	cf 91       	pop	r28
    538e:	1f 91       	pop	r17
    5390:	0f 91       	pop	r16
    5392:	ff 90       	pop	r15
    5394:	ef 90       	pop	r14
    5396:	08 95       	ret

00005398 <_ZN7OneWire5resetEv>:
// the bus to come high, if it doesn't then it is broken or shorted
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
    5398:	df 92       	push	r13
    539a:	ef 92       	push	r14
    539c:	ff 92       	push	r15
    539e:	0f 93       	push	r16
    53a0:	1f 93       	push	r17
    53a2:	cf 93       	push	r28
    53a4:	df 93       	push	r29
    53a6:	fc 01       	movw	r30, r24
{
	IO_REG_TYPE mask = bitmask;
    53a8:	00 81       	ld	r16, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    53aa:	c1 81       	ldd	r28, Z+1	; 0x01
    53ac:	d2 81       	ldd	r29, Z+2	; 0x02
	uint8_t r;
	uint8_t retries = 125;

	noInterrupts();
    53ae:	f8 94       	cli
	DIRECT_MODE_INPUT(reg, mask);
    53b0:	89 81       	ldd	r24, Y+1	; 0x01
    53b2:	d0 2e       	mov	r13, r16
    53b4:	d0 94       	com	r13
    53b6:	8d 21       	and	r24, r13
    53b8:	89 83       	std	Y+1, r24	; 0x01
	interrupts();
    53ba:	78 94       	sei
    53bc:	1d e7       	ldi	r17, 0x7D	; 125
	// wait until the wire is high... just in case
	do {
    53be:	e0 2e       	mov	r14, r16
    53c0:	ff 24       	eor	r15, r15
		if (--retries == 0) return 0;
    53c2:	11 50       	subi	r17, 0x01	; 1
    53c4:	59 f1       	breq	.+86     	; 0x541c <_ZN7OneWire5resetEv+0x84>
		delayMicroseconds(2);
    53c6:	82 e0       	ldi	r24, 0x02	; 2
    53c8:	90 e0       	ldi	r25, 0x00	; 0
    53ca:	0e 94 fd 2f 	call	0x5ffa	; 0x5ffa <delayMicroseconds>

	noInterrupts();
	DIRECT_MODE_INPUT(reg, mask);
	interrupts();
	// wait until the wire is high... just in case
	do {
    53ce:	88 81       	ld	r24, Y
    53d0:	90 e0       	ldi	r25, 0x00	; 0
    53d2:	8e 21       	and	r24, r14
    53d4:	9f 21       	and	r25, r15
    53d6:	89 2b       	or	r24, r25
    53d8:	a1 f3       	breq	.-24     	; 0x53c2 <_ZN7OneWire5resetEv+0x2a>
		if (--retries == 0) return 0;
		delayMicroseconds(2);
	} while ( !DIRECT_READ(reg, mask));

	noInterrupts();
    53da:	f8 94       	cli
	DIRECT_WRITE_LOW(reg, mask);
    53dc:	8a 81       	ldd	r24, Y+2	; 0x02
    53de:	8d 21       	and	r24, r13
    53e0:	8a 83       	std	Y+2, r24	; 0x02
	DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    53e2:	89 81       	ldd	r24, Y+1	; 0x01
    53e4:	80 2b       	or	r24, r16
    53e6:	89 83       	std	Y+1, r24	; 0x01
	interrupts();
    53e8:	78 94       	sei
	delayMicroseconds(480);
    53ea:	80 ee       	ldi	r24, 0xE0	; 224
    53ec:	91 e0       	ldi	r25, 0x01	; 1
    53ee:	0e 94 fd 2f 	call	0x5ffa	; 0x5ffa <delayMicroseconds>
	noInterrupts();
    53f2:	f8 94       	cli
	DIRECT_MODE_INPUT(reg, mask);	// allow it to float
    53f4:	89 81       	ldd	r24, Y+1	; 0x01
    53f6:	8d 21       	and	r24, r13
    53f8:	89 83       	std	Y+1, r24	; 0x01
	delayMicroseconds(70);
    53fa:	86 e4       	ldi	r24, 0x46	; 70
    53fc:	90 e0       	ldi	r25, 0x00	; 0
    53fe:	0e 94 fd 2f 	call	0x5ffa	; 0x5ffa <delayMicroseconds>
	r = !DIRECT_READ(reg, mask);
    5402:	88 81       	ld	r24, Y
    5404:	10 e0       	ldi	r17, 0x00	; 0
    5406:	90 e0       	ldi	r25, 0x00	; 0
    5408:	e8 22       	and	r14, r24
    540a:	f9 22       	and	r15, r25
    540c:	ef 28       	or	r14, r15
    540e:	09 f4       	brne	.+2      	; 0x5412 <_ZN7OneWire5resetEv+0x7a>
    5410:	11 e0       	ldi	r17, 0x01	; 1
	interrupts();
    5412:	78 94       	sei
	delayMicroseconds(410);
    5414:	8a e9       	ldi	r24, 0x9A	; 154
    5416:	91 e0       	ldi	r25, 0x01	; 1
    5418:	0e 94 fd 2f 	call	0x5ffa	; 0x5ffa <delayMicroseconds>
	return r;
}
    541c:	81 2f       	mov	r24, r17
    541e:	df 91       	pop	r29
    5420:	cf 91       	pop	r28
    5422:	1f 91       	pop	r17
    5424:	0f 91       	pop	r16
    5426:	ff 90       	pop	r15
    5428:	ef 90       	pop	r14
    542a:	df 90       	pop	r13
    542c:	08 95       	ret

0000542e <_ZN7OneWire6searchEPh>:
// Perform the 1-Wire Search Algorithm on the 1-Wire bus using the existing
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
    542e:	af 92       	push	r10
    5430:	bf 92       	push	r11
    5432:	df 92       	push	r13
    5434:	ef 92       	push	r14
    5436:	ff 92       	push	r15
    5438:	0f 93       	push	r16
    543a:	1f 93       	push	r17
    543c:	cf 93       	push	r28
    543e:	df 93       	push	r29
    5440:	ec 01       	movw	r28, r24
    5442:	5b 01       	movw	r10, r22
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = 0;

   // if the last call was not the last one
   if (!LastDeviceFlag)
    5444:	8d 85       	ldd	r24, Y+13	; 0x0d
    5446:	88 23       	and	r24, r24
    5448:	09 f0       	breq	.+2      	; 0x544c <_ZN7OneWire6searchEPh+0x1e>
    544a:	61 c0       	rjmp	.+194    	; 0x550e <_ZN7OneWire6searchEPh+0xe0>
   {
      // 1-Wire reset
      if (!reset())
    544c:	ce 01       	movw	r24, r28
    544e:	0e 94 cc 29 	call	0x5398	; 0x5398 <_ZN7OneWire5resetEv>
    5452:	88 23       	and	r24, r24
    5454:	29 f4       	brne	.+10     	; 0x5460 <_ZN7OneWire6searchEPh+0x32>
      {
         // reset the search
         LastDiscrepancy = 0;
    5456:	1b 86       	std	Y+11, r1	; 0x0b
         LastDeviceFlag = FALSE;
    5458:	1d 86       	std	Y+13, r1	; 0x0d
         LastFamilyDiscrepancy = 0;
    545a:	1c 86       	std	Y+12, r1	; 0x0c
    545c:	90 e0       	ldi	r25, 0x00	; 0
    545e:	6b c0       	rjmp	.+214    	; 0x5536 <_ZN7OneWire6searchEPh+0x108>
         return FALSE;
      }

      // issue the search command
      write(0xF0);
    5460:	ce 01       	movw	r24, r28
    5462:	60 ef       	ldi	r22, 0xF0	; 240
    5464:	40 e0       	ldi	r20, 0x00	; 0
    5466:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <_ZN7OneWire5writeEhh>
    546a:	01 e0       	ldi	r16, 0x01	; 1
    546c:	dd 24       	eor	r13, r13
    546e:	ee 24       	eor	r14, r14
    5470:	ff 24       	eor	r15, r15
    5472:	f3 94       	inc	r15

      // loop to do the search
      do
      {
         // read a bit and its complement
         id_bit = read_bit();
    5474:	ce 01       	movw	r24, r28
    5476:	0e 94 e6 28 	call	0x51cc	; 0x51cc <_ZN7OneWire8read_bitEv>
    547a:	18 2f       	mov	r17, r24
         cmp_id_bit = read_bit();
    547c:	ce 01       	movw	r24, r28
    547e:	0e 94 e6 28 	call	0x51cc	; 0x51cc <_ZN7OneWire8read_bitEv>

         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1))
    5482:	11 30       	cpi	r17, 0x01	; 1
    5484:	19 f4       	brne	.+6      	; 0x548c <_ZN7OneWire6searchEPh+0x5e>
    5486:	81 30       	cpi	r24, 0x01	; 1
    5488:	e1 f4       	brne	.+56     	; 0x54c2 <_ZN7OneWire6searchEPh+0x94>
    548a:	39 c0       	rjmp	.+114    	; 0x54fe <_ZN7OneWire6searchEPh+0xd0>
            break;
         else
         {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit)
    548c:	18 17       	cp	r17, r24
    548e:	09 f5       	brne	.+66     	; 0x54d2 <_ZN7OneWire6searchEPh+0xa4>
               search_direction = id_bit;  // bit write value for search
            else
            {
               // if this discrepancy if before the Last Discrepancy
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy)
    5490:	8b 85       	ldd	r24, Y+11	; 0x0b
    5492:	08 17       	cp	r16, r24
    5494:	70 f4       	brcc	.+28     	; 0x54b2 <_ZN7OneWire6searchEPh+0x84>
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
    5496:	60 e0       	ldi	r22, 0x00	; 0
    5498:	fe 01       	movw	r30, r28
    549a:	ee 0d       	add	r30, r14
    549c:	f1 1d       	adc	r31, r1
    549e:	83 81       	ldd	r24, Z+3	; 0x03
    54a0:	90 e0       	ldi	r25, 0x00	; 0
    54a2:	2f 2d       	mov	r18, r15
    54a4:	30 e0       	ldi	r19, 0x00	; 0
    54a6:	82 23       	and	r24, r18
    54a8:	93 23       	and	r25, r19
    54aa:	18 16       	cp	r1, r24
    54ac:	19 06       	cpc	r1, r25
    54ae:	4c f0       	brlt	.+18     	; 0x54c2 <_ZN7OneWire6searchEPh+0x94>
    54b0:	03 c0       	rjmp	.+6      	; 0x54b8 <_ZN7OneWire6searchEPh+0x8a>
               else
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    54b2:	60 e0       	ldi	r22, 0x00	; 0
    54b4:	08 17       	cp	r16, r24
    54b6:	29 f0       	breq	.+10     	; 0x54c2 <_ZN7OneWire6searchEPh+0x94>
               if (search_direction == 0)
               {
                  last_zero = id_bit_number;

                  // check for Last discrepancy in family
                  if (last_zero < 9)
    54b8:	09 30       	cpi	r16, 0x09	; 9
    54ba:	08 f0       	brcs	.+2      	; 0x54be <_ZN7OneWire6searchEPh+0x90>
    54bc:	4c c0       	rjmp	.+152    	; 0x5556 <_ZN7OneWire6searchEPh+0x128>
                     LastFamilyDiscrepancy = last_zero;
    54be:	0c 87       	std	Y+12, r16	; 0x0c
    54c0:	4a c0       	rjmp	.+148    	; 0x5556 <_ZN7OneWire6searchEPh+0x128>
            }

            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
    54c2:	fe 01       	movw	r30, r28
    54c4:	ee 0d       	add	r30, r14
    54c6:	f1 1d       	adc	r31, r1
    54c8:	83 81       	ldd	r24, Z+3	; 0x03
    54ca:	8f 29       	or	r24, r15
    54cc:	83 83       	std	Z+3, r24	; 0x03
    54ce:	61 e0       	ldi	r22, 0x01	; 1
    54d0:	09 c0       	rjmp	.+18     	; 0x54e4 <_ZN7OneWire6searchEPh+0xb6>
    54d2:	61 2f       	mov	r22, r17
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;
    54d4:	fe 01       	movw	r30, r28
    54d6:	ee 0d       	add	r30, r14
    54d8:	f1 1d       	adc	r31, r1
    54da:	9f 2d       	mov	r25, r15
    54dc:	90 95       	com	r25
    54de:	83 81       	ldd	r24, Z+3	; 0x03
    54e0:	89 23       	and	r24, r25
    54e2:	83 83       	std	Z+3, r24	; 0x03

            // serial number search direction write bit
            write_bit(search_direction);
    54e4:	ce 01       	movw	r24, r28
    54e6:	0e 94 37 29 	call	0x526e	; 0x526e <_ZN7OneWire9write_bitEh>

            // increment the byte counter id_bit_number
            // and shift the mask rom_byte_mask
            id_bit_number++;
    54ea:	0f 5f       	subi	r16, 0xFF	; 255
            rom_byte_mask <<= 1;
    54ec:	ff 0c       	add	r15, r15

            // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
            if (rom_byte_mask == 0)
    54ee:	19 f4       	brne	.+6      	; 0x54f6 <_ZN7OneWire6searchEPh+0xc8>
            {
                rom_byte_number++;
    54f0:	e3 94       	inc	r14
    54f2:	ff 24       	eor	r15, r15
    54f4:	f3 94       	inc	r15

      // issue the search command
      write(0xF0);

      // loop to do the search
      do
    54f6:	87 e0       	ldi	r24, 0x07	; 7
    54f8:	8e 15       	cp	r24, r14
    54fa:	08 f0       	brcs	.+2      	; 0x54fe <_ZN7OneWire6searchEPh+0xd0>
    54fc:	bb cf       	rjmp	.-138    	; 0x5474 <_ZN7OneWire6searchEPh+0x46>
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7

      // if the search was successful then
      if (!(id_bit_number < 65))
    54fe:	01 34       	cpi	r16, 0x41	; 65
    5500:	30 f0       	brcs	.+12     	; 0x550e <_ZN7OneWire6searchEPh+0xe0>
      {
         // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
         LastDiscrepancy = last_zero;
    5502:	db 86       	std	Y+11, r13	; 0x0b

         // check for last device
         if (LastDiscrepancy == 0)
    5504:	dd 20       	and	r13, r13
    5506:	11 f5       	brne	.+68     	; 0x554c <_ZN7OneWire6searchEPh+0x11e>
            LastDeviceFlag = TRUE;
    5508:	81 e0       	ldi	r24, 0x01	; 1
    550a:	8d 87       	std	Y+13, r24	; 0x0d
    550c:	1f c0       	rjmp	.+62     	; 0x554c <_ZN7OneWire6searchEPh+0x11e>
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
   {
      LastDiscrepancy = 0;
    550e:	1b 86       	std	Y+11, r1	; 0x0b
      LastDeviceFlag = FALSE;
    5510:	1d 86       	std	Y+13, r1	; 0x0d
      LastFamilyDiscrepancy = 0;
    5512:	1c 86       	std	Y+12, r1	; 0x0c
    5514:	90 e0       	ldi	r25, 0x00	; 0
    5516:	de 01       	movw	r26, r28
    5518:	20 e0       	ldi	r18, 0x00	; 0
    551a:	30 e0       	ldi	r19, 0x00	; 0
      search_result = FALSE;
   }
   for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
    551c:	f5 01       	movw	r30, r10
    551e:	e2 0f       	add	r30, r18
    5520:	f3 1f       	adc	r31, r19
    5522:	13 96       	adiw	r26, 0x03	; 3
    5524:	8c 91       	ld	r24, X
    5526:	13 97       	sbiw	r26, 0x03	; 3
    5528:	80 83       	st	Z, r24
    552a:	2f 5f       	subi	r18, 0xFF	; 255
    552c:	3f 4f       	sbci	r19, 0xFF	; 255
    552e:	11 96       	adiw	r26, 0x01	; 1
    5530:	28 30       	cpi	r18, 0x08	; 8
    5532:	31 05       	cpc	r19, r1
    5534:	99 f7       	brne	.-26     	; 0x551c <_ZN7OneWire6searchEPh+0xee>
   return search_result;
  }
    5536:	89 2f       	mov	r24, r25
    5538:	df 91       	pop	r29
    553a:	cf 91       	pop	r28
    553c:	1f 91       	pop	r17
    553e:	0f 91       	pop	r16
    5540:	ff 90       	pop	r15
    5542:	ef 90       	pop	r14
    5544:	df 90       	pop	r13
    5546:	bf 90       	pop	r11
    5548:	af 90       	pop	r10
    554a:	08 95       	ret
         search_result = TRUE;
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
    554c:	8b 81       	ldd	r24, Y+3	; 0x03
    554e:	88 23       	and	r24, r24
    5550:	f1 f2       	breq	.-68     	; 0x550e <_ZN7OneWire6searchEPh+0xe0>
    5552:	91 e0       	ldi	r25, 0x01	; 1
    5554:	e0 cf       	rjmp	.-64     	; 0x5516 <_ZN7OneWire6searchEPh+0xe8>
    5556:	d0 2e       	mov	r13, r16
    5558:	bd cf       	rjmp	.-134    	; 0x54d4 <_ZN7OneWire6searchEPh+0xa6>

0000555a <_ZN7OneWireC1Eh>:
*/

#include "OneWire.h"


OneWire::OneWire(uint8_t pin)
    555a:	ff 92       	push	r15
    555c:	0f 93       	push	r16
    555e:	1f 93       	push	r17
    5560:	8c 01       	movw	r16, r24
    5562:	f6 2e       	mov	r15, r22
{
	pinMode(pin, INPUT);
    5564:	86 2f       	mov	r24, r22
    5566:	60 e0       	ldi	r22, 0x00	; 0
    5568:	0e 94 42 30 	call	0x6084	; 0x6084 <pinMode>
	bitmask = PIN_TO_BITMASK(pin);
    556c:	8f 2d       	mov	r24, r15
    556e:	90 e0       	ldi	r25, 0x00	; 0
    5570:	fc 01       	movw	r30, r24
    5572:	e3 57       	subi	r30, 0x73	; 115
    5574:	f6 4f       	sbci	r31, 0xF6	; 246
    5576:	e4 91       	lpm	r30, Z+
    5578:	d8 01       	movw	r26, r16
    557a:	ec 93       	st	X, r30
	baseReg = PIN_TO_BASEREG(pin);
    557c:	87 58       	subi	r24, 0x87	; 135
    557e:	96 4f       	sbci	r25, 0xF6	; 246
    5580:	fc 01       	movw	r30, r24
    5582:	64 91       	lpm	r22, Z+
    5584:	e6 2f       	mov	r30, r22
    5586:	f0 e0       	ldi	r31, 0x00	; 0
    5588:	ee 0f       	add	r30, r30
    558a:	ff 1f       	adc	r31, r31
    558c:	e1 59       	subi	r30, 0x91	; 145
    558e:	f6 4f       	sbci	r31, 0xF6	; 246
    5590:	85 91       	lpm	r24, Z+
    5592:	94 91       	lpm	r25, Z+
    5594:	12 96       	adiw	r26, 0x02	; 2
    5596:	9c 93       	st	X, r25
    5598:	8e 93       	st	-X, r24
    559a:	11 97       	sbiw	r26, 0x01	; 1
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
  // reset the search state
  LastDiscrepancy = 0;
    559c:	1b 96       	adiw	r26, 0x0b	; 11
    559e:	1c 92       	st	X, r1
    55a0:	1b 97       	sbiw	r26, 0x0b	; 11
  LastDeviceFlag = FALSE;
    55a2:	1d 96       	adiw	r26, 0x0d	; 13
    55a4:	1c 92       	st	X, r1
    55a6:	1d 97       	sbiw	r26, 0x0d	; 13
  LastFamilyDiscrepancy = 0;
    55a8:	1c 96       	adiw	r26, 0x0c	; 12
    55aa:	1c 92       	st	X, r1
    55ac:	f8 01       	movw	r30, r16
    55ae:	87 e0       	ldi	r24, 0x07	; 7
    55b0:	90 e0       	ldi	r25, 0x00	; 0
  for(int i = 7; ; i--) {
    ROM_NO[i] = 0;
    55b2:	12 86       	std	Z+10, r1	; 0x0a
    55b4:	31 97       	sbiw	r30, 0x01	; 1
    if ( i == 0) break;
    55b6:	00 97       	sbiw	r24, 0x00	; 0
    55b8:	11 f0       	breq	.+4      	; 0x55be <_ZN7OneWireC1Eh+0x64>
{
  // reset the search state
  LastDiscrepancy = 0;
  LastDeviceFlag = FALSE;
  LastFamilyDiscrepancy = 0;
  for(int i = 7; ; i--) {
    55ba:	01 97       	sbiw	r24, 0x01	; 1
    55bc:	fa cf       	rjmp	.-12     	; 0x55b2 <_ZN7OneWireC1Eh+0x58>
	bitmask = PIN_TO_BITMASK(pin);
	baseReg = PIN_TO_BASEREG(pin);
#if ONEWIRE_SEARCH
	reset_search();
#endif
}
    55be:	1f 91       	pop	r17
    55c0:	0f 91       	pop	r16
    55c2:	ff 90       	pop	r15
    55c4:	08 95       	ret

000055c6 <_ZN17DallasTemperatureC1EP7OneWire>:
extern "C" {
    #include "WConstants.h"
}
#endif

DallasTemperature::DallasTemperature(OneWire* _oneWire)
    55c6:	fc 01       	movw	r30, r24
  #if REQUIRESALARMS
  : _AlarmHandler(&defaultAlarmHandler)
    55c8:	8c ea       	ldi	r24, 0xAC	; 172
    55ca:	9b e2       	ldi	r25, 0x2B	; 43
    55cc:	92 8b       	std	Z+18, r25	; 0x12
    55ce:	81 8b       	std	Z+17, r24	; 0x11
  #endif
{
  _wire = _oneWire;
    55d0:	76 83       	std	Z+6, r23	; 0x06
    55d2:	65 83       	std	Z+5, r22	; 0x05
  devices = 0;
    55d4:	14 82       	std	Z+4, r1	; 0x04
  parasite = false;
    55d6:	10 82       	st	Z, r1
  bitResolution = 9;
    55d8:	89 e0       	ldi	r24, 0x09	; 9
    55da:	81 83       	std	Z+1, r24	; 0x01
  waitForConversion = true;
    55dc:	81 e0       	ldi	r24, 0x01	; 1
    55de:	82 83       	std	Z+2, r24	; 0x02
  checkForConversion = true;
    55e0:	83 83       	std	Z+3, r24	; 0x03
}
    55e2:	08 95       	ret

000055e4 <_ZN17DallasTemperature14getDeviceCountEv>:

// returns the number of devices found on the bus
uint8_t DallasTemperature::getDeviceCount(void)
{
  return devices;
}
    55e4:	fc 01       	movw	r30, r24
    55e6:	84 81       	ldd	r24, Z+4	; 0x04
    55e8:	08 95       	ret

000055ea <_ZN17DallasTemperature20calculateTemperatureEPhS0_>:
{
  return toFahrenheit(getTempCByIndex(deviceIndex));
}

// reads scratchpad and returns the temperature in degrees C
float DallasTemperature::calculateTemperature(uint8_t* deviceAddress, uint8_t* scratchPad)
    55ea:	6f 92       	push	r6
    55ec:	7f 92       	push	r7
    55ee:	8f 92       	push	r8
    55f0:	9f 92       	push	r9
    55f2:	af 92       	push	r10
    55f4:	bf 92       	push	r11
    55f6:	cf 92       	push	r12
    55f8:	df 92       	push	r13
    55fa:	ef 92       	push	r14
    55fc:	ff 92       	push	r15
    55fe:	0f 93       	push	r16
    5600:	1f 93       	push	r17
    5602:	cf 93       	push	r28
    5604:	df 93       	push	r29
    5606:	fb 01       	movw	r30, r22
    5608:	ea 01       	movw	r28, r20
{
  int16_t rawTemperature = (((int16_t)scratchPad[TEMP_MSB]) << 8) | scratchPad[TEMP_LSB];
    560a:	99 81       	ldd	r25, Y+1	; 0x01
    560c:	80 e0       	ldi	r24, 0x00	; 0
    560e:	28 81       	ld	r18, Y
    5610:	30 e0       	ldi	r19, 0x00	; 0
    5612:	28 2b       	or	r18, r24
    5614:	39 2b       	or	r19, r25

  switch (deviceAddress[0])
    5616:	e0 81       	ld	r30, Z
    5618:	e2 32       	cpi	r30, 0x22	; 34
    561a:	31 f0       	breq	.+12     	; 0x5628 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3e>
    561c:	e8 32       	cpi	r30, 0x28	; 40
    561e:	21 f0       	breq	.+8      	; 0x5628 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3e>
    5620:	e0 31       	cpi	r30, 0x10	; 16
    5622:	09 f0       	breq	.+2      	; 0x5626 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3c>
    5624:	84 c0       	rjmp	.+264    	; 0x572e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
    5626:	4b c0       	rjmp	.+150    	; 0x56be <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xd4>
  {
    case DS18B20MODEL:
    case DS1822MODEL:
      switch (scratchPad[CONFIGURATION])
    5628:	4c 81       	ldd	r20, Y+4	; 0x04
    562a:	4f 33       	cpi	r20, 0x3F	; 63
    562c:	29 f1       	breq	.+74     	; 0x5678 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x8e>
    562e:	40 34       	cpi	r20, 0x40	; 64
    5630:	20 f4       	brcc	.+8      	; 0x563a <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x50>
    5632:	4f 31       	cpi	r20, 0x1F	; 31
    5634:	09 f0       	breq	.+2      	; 0x5638 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x4e>
    5636:	7b c0       	rjmp	.+246    	; 0x572e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
    5638:	2f c0       	rjmp	.+94     	; 0x5698 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xae>
    563a:	4f 35       	cpi	r20, 0x5F	; 95
    563c:	79 f0       	breq	.+30     	; 0x565c <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x72>
    563e:	4f 37       	cpi	r20, 0x7F	; 127
    5640:	09 f0       	breq	.+2      	; 0x5644 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x5a>
    5642:	75 c0       	rjmp	.+234    	; 0x572e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
      {
        case TEMP_12_BIT:
          return (float)rawTemperature * 0.0625;
    5644:	b9 01       	movw	r22, r18
    5646:	88 27       	eor	r24, r24
    5648:	77 fd       	sbrc	r23, 7
    564a:	80 95       	com	r24
    564c:	98 2f       	mov	r25, r24
    564e:	0e 94 c5 3a 	call	0x758a	; 0x758a <__floatsisf>
    5652:	20 e0       	ldi	r18, 0x00	; 0
    5654:	30 e0       	ldi	r19, 0x00	; 0
    5656:	40 e8       	ldi	r20, 0x80	; 128
    5658:	5d e3       	ldi	r21, 0x3D	; 61
    565a:	2e c0       	rjmp	.+92     	; 0x56b8 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xce>
          break;
        case TEMP_11_BIT:
          return (float)(rawTemperature >> 1) * 0.125;
    565c:	35 95       	asr	r19
    565e:	27 95       	ror	r18
    5660:	b9 01       	movw	r22, r18
    5662:	88 27       	eor	r24, r24
    5664:	77 fd       	sbrc	r23, 7
    5666:	80 95       	com	r24
    5668:	98 2f       	mov	r25, r24
    566a:	0e 94 c5 3a 	call	0x758a	; 0x758a <__floatsisf>
    566e:	20 e0       	ldi	r18, 0x00	; 0
    5670:	30 e0       	ldi	r19, 0x00	; 0
    5672:	40 e0       	ldi	r20, 0x00	; 0
    5674:	5e e3       	ldi	r21, 0x3E	; 62
    5676:	20 c0       	rjmp	.+64     	; 0x56b8 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xce>
          break;
        case TEMP_10_BIT:
          return (float)(rawTemperature >> 2) * 0.25;
    5678:	35 95       	asr	r19
    567a:	27 95       	ror	r18
    567c:	35 95       	asr	r19
    567e:	27 95       	ror	r18
    5680:	b9 01       	movw	r22, r18
    5682:	88 27       	eor	r24, r24
    5684:	77 fd       	sbrc	r23, 7
    5686:	80 95       	com	r24
    5688:	98 2f       	mov	r25, r24
    568a:	0e 94 c5 3a 	call	0x758a	; 0x758a <__floatsisf>
    568e:	20 e0       	ldi	r18, 0x00	; 0
    5690:	30 e0       	ldi	r19, 0x00	; 0
    5692:	40 e8       	ldi	r20, 0x80	; 128
    5694:	5e e3       	ldi	r21, 0x3E	; 62
    5696:	10 c0       	rjmp	.+32     	; 0x56b8 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xce>
          break;
        case TEMP_9_BIT:
          return (float)(rawTemperature >> 3) * 0.5;
    5698:	93 e0       	ldi	r25, 0x03	; 3
    569a:	35 95       	asr	r19
    569c:	27 95       	ror	r18
    569e:	9a 95       	dec	r25
    56a0:	e1 f7       	brne	.-8      	; 0x569a <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xb0>
    56a2:	b9 01       	movw	r22, r18
    56a4:	88 27       	eor	r24, r24
    56a6:	77 fd       	sbrc	r23, 7
    56a8:	80 95       	com	r24
    56aa:	98 2f       	mov	r25, r24
    56ac:	0e 94 c5 3a 	call	0x758a	; 0x758a <__floatsisf>
    56b0:	20 e0       	ldi	r18, 0x00	; 0
    56b2:	30 e0       	ldi	r19, 0x00	; 0
    56b4:	40 e0       	ldi	r20, 0x00	; 0
    56b6:	5f e3       	ldi	r21, 0x3F	; 63
    56b8:	0e 94 79 3b 	call	0x76f2	; 0x76f2 <__mulsf3>
    56bc:	32 c0       	rjmp	.+100    	; 0x5722 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x138>
      TEMPERATURE = TEMP_READ - 0.25 + --------------------------
                                               COUNT_PER_C
      */

      // Good spot. Thanks Nic Johns for your contribution
      return (float)(rawTemperature >> 1) - 0.25 +((float)(scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) / (float)scratchPad[COUNT_PER_C] );
    56be:	ef 80       	ldd	r14, Y+7	; 0x07
    56c0:	35 95       	asr	r19
    56c2:	27 95       	ror	r18
    56c4:	b9 01       	movw	r22, r18
    56c6:	88 27       	eor	r24, r24
    56c8:	77 fd       	sbrc	r23, 7
    56ca:	80 95       	com	r24
    56cc:	98 2f       	mov	r25, r24
    56ce:	0e 94 c5 3a 	call	0x758a	; 0x758a <__floatsisf>
    56d2:	20 e0       	ldi	r18, 0x00	; 0
    56d4:	30 e0       	ldi	r19, 0x00	; 0
    56d6:	40 e8       	ldi	r20, 0x80	; 128
    56d8:	5e e3       	ldi	r21, 0x3E	; 62
    56da:	0e 94 c1 39 	call	0x7382	; 0x7382 <__subsf3>
    56de:	3b 01       	movw	r6, r22
    56e0:	4c 01       	movw	r8, r24
    56e2:	6e 2d       	mov	r22, r14
    56e4:	70 e0       	ldi	r23, 0x00	; 0
    56e6:	2e 81       	ldd	r18, Y+6	; 0x06
    56e8:	62 1b       	sub	r22, r18
    56ea:	71 09       	sbc	r23, r1
    56ec:	88 27       	eor	r24, r24
    56ee:	77 fd       	sbrc	r23, 7
    56f0:	80 95       	com	r24
    56f2:	98 2f       	mov	r25, r24
    56f4:	0e 94 c5 3a 	call	0x758a	; 0x758a <__floatsisf>
    56f8:	5b 01       	movw	r10, r22
    56fa:	6c 01       	movw	r12, r24
    56fc:	ff 24       	eor	r15, r15
    56fe:	00 e0       	ldi	r16, 0x00	; 0
    5700:	10 e0       	ldi	r17, 0x00	; 0
    5702:	c8 01       	movw	r24, r16
    5704:	b7 01       	movw	r22, r14
    5706:	0e 94 c3 3a 	call	0x7586	; 0x7586 <__floatunsisf>
    570a:	9b 01       	movw	r18, r22
    570c:	ac 01       	movw	r20, r24
    570e:	c6 01       	movw	r24, r12
    5710:	b5 01       	movw	r22, r10
    5712:	0e 94 2a 3a 	call	0x7454	; 0x7454 <__divsf3>
    5716:	9b 01       	movw	r18, r22
    5718:	ac 01       	movw	r20, r24
    571a:	c4 01       	movw	r24, r8
    571c:	b3 01       	movw	r22, r6
    571e:	0e 94 c2 39 	call	0x7384	; 0x7384 <__addsf3>
    5722:	9b 01       	movw	r18, r22
    5724:	ac 01       	movw	r20, r24
      break;
  }
}
    5726:	83 2f       	mov	r24, r19
    5728:	94 2f       	mov	r25, r20
    572a:	75 2f       	mov	r23, r21
    572c:	00 c0       	rjmp	.+0      	; 0x572e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
    572e:	26 2f       	mov	r18, r22
    5730:	38 2f       	mov	r19, r24
    5732:	49 2f       	mov	r20, r25
    5734:	57 2f       	mov	r21, r23
    5736:	b9 01       	movw	r22, r18
    5738:	ca 01       	movw	r24, r20
    573a:	df 91       	pop	r29
    573c:	cf 91       	pop	r28
    573e:	1f 91       	pop	r17
    5740:	0f 91       	pop	r16
    5742:	ff 90       	pop	r15
    5744:	ef 90       	pop	r14
    5746:	df 90       	pop	r13
    5748:	cf 90       	pop	r12
    574a:	bf 90       	pop	r11
    574c:	af 90       	pop	r10
    574e:	9f 90       	pop	r9
    5750:	8f 90       	pop	r8
    5752:	7f 90       	pop	r7
    5754:	6f 90       	pop	r6
    5756:	08 95       	ret

00005758 <_ZN17DallasTemperature19defaultAlarmHandlerEPh>:
}

// The default alarm handler
void DallasTemperature::defaultAlarmHandler(uint8_t* deviceAddress)
{
}
    5758:	08 95       	ret

0000575a <_ZN17DallasTemperature15readPowerSupplyEPh>:
  if (parasite) delay(10); // 10ms delay
  _wire->reset();
}

// reads the device's power requirements
bool DallasTemperature::readPowerSupply(uint8_t* deviceAddress)
    575a:	ef 92       	push	r14
    575c:	ff 92       	push	r15
    575e:	0f 93       	push	r16
    5760:	1f 93       	push	r17
    5762:	8c 01       	movw	r16, r24
    5764:	7b 01       	movw	r14, r22
{
  bool ret = false;
  _wire->reset();
    5766:	fc 01       	movw	r30, r24
    5768:	85 81       	ldd	r24, Z+5	; 0x05
    576a:	96 81       	ldd	r25, Z+6	; 0x06
    576c:	0e 94 cc 29 	call	0x5398	; 0x5398 <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
    5770:	f8 01       	movw	r30, r16
    5772:	85 81       	ldd	r24, Z+5	; 0x05
    5774:	96 81       	ldd	r25, Z+6	; 0x06
    5776:	b7 01       	movw	r22, r14
    5778:	0e 94 ab 29 	call	0x5356	; 0x5356 <_ZN7OneWire6selectEPKh>
  _wire->write(READPOWERSUPPLY);
    577c:	f8 01       	movw	r30, r16
    577e:	85 81       	ldd	r24, Z+5	; 0x05
    5780:	96 81       	ldd	r25, Z+6	; 0x06
    5782:	64 eb       	ldi	r22, 0xB4	; 180
    5784:	40 e0       	ldi	r20, 0x00	; 0
    5786:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <_ZN7OneWire5writeEhh>
  if (_wire->read_bit() == 0) ret = true;
    578a:	f8 01       	movw	r30, r16
    578c:	85 81       	ldd	r24, Z+5	; 0x05
    578e:	96 81       	ldd	r25, Z+6	; 0x06
    5790:	0e 94 e6 28 	call	0x51cc	; 0x51cc <_ZN7OneWire8read_bitEv>
    5794:	f8 2e       	mov	r15, r24
  _wire->reset();
    5796:	f8 01       	movw	r30, r16
    5798:	85 81       	ldd	r24, Z+5	; 0x05
    579a:	96 81       	ldd	r25, Z+6	; 0x06
    579c:	0e 94 cc 29 	call	0x5398	; 0x5398 <_ZN7OneWire5resetEv>
    57a0:	80 e0       	ldi	r24, 0x00	; 0
    57a2:	ff 20       	and	r15, r15
    57a4:	09 f4       	brne	.+2      	; 0x57a8 <_ZN17DallasTemperature15readPowerSupplyEPh+0x4e>
    57a6:	81 e0       	ldi	r24, 0x01	; 1
  return ret;
}
    57a8:	1f 91       	pop	r17
    57aa:	0f 91       	pop	r16
    57ac:	ff 90       	pop	r15
    57ae:	ef 90       	pop	r14
    57b0:	08 95       	ret

000057b2 <_ZN17DallasTemperature14readScratchPadEPhS0_>:
  readScratchPad(deviceAddress, scratchPad);
  return (_wire->crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]);
}

// read device's scratch pad
void DallasTemperature::readScratchPad(uint8_t* deviceAddress, uint8_t* scratchPad)
    57b2:	cf 92       	push	r12
    57b4:	df 92       	push	r13
    57b6:	ef 92       	push	r14
    57b8:	ff 92       	push	r15
    57ba:	0f 93       	push	r16
    57bc:	1f 93       	push	r17
    57be:	8c 01       	movw	r16, r24
    57c0:	6b 01       	movw	r12, r22
    57c2:	7a 01       	movw	r14, r20
{
  // send the command
  _wire->reset();
    57c4:	fc 01       	movw	r30, r24
    57c6:	85 81       	ldd	r24, Z+5	; 0x05
    57c8:	96 81       	ldd	r25, Z+6	; 0x06
    57ca:	0e 94 cc 29 	call	0x5398	; 0x5398 <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
    57ce:	f8 01       	movw	r30, r16
    57d0:	85 81       	ldd	r24, Z+5	; 0x05
    57d2:	96 81       	ldd	r25, Z+6	; 0x06
    57d4:	b6 01       	movw	r22, r12
    57d6:	0e 94 ab 29 	call	0x5356	; 0x5356 <_ZN7OneWire6selectEPKh>
  _wire->write(READSCRATCH);
    57da:	f8 01       	movw	r30, r16
    57dc:	85 81       	ldd	r24, Z+5	; 0x05
    57de:	96 81       	ldd	r25, Z+6	; 0x06
    57e0:	6e eb       	ldi	r22, 0xBE	; 190
    57e2:	40 e0       	ldi	r20, 0x00	; 0
    57e4:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <_ZN7OneWire5writeEhh>

  
  // read the response

  // byte 0: temperature LSB
  scratchPad[TEMP_LSB] = _wire->read();
    57e8:	f8 01       	movw	r30, r16
    57ea:	85 81       	ldd	r24, Z+5	; 0x05
    57ec:	96 81       	ldd	r25, Z+6	; 0x06
    57ee:	0e 94 1a 29 	call	0x5234	; 0x5234 <_ZN7OneWire4readEv>
    57f2:	f7 01       	movw	r30, r14
    57f4:	80 83       	st	Z, r24

  // byte 1: temperature MSB
  scratchPad[TEMP_MSB] = _wire->read();
    57f6:	f8 01       	movw	r30, r16
    57f8:	85 81       	ldd	r24, Z+5	; 0x05
    57fa:	96 81       	ldd	r25, Z+6	; 0x06
    57fc:	0e 94 1a 29 	call	0x5234	; 0x5234 <_ZN7OneWire4readEv>
    5800:	f7 01       	movw	r30, r14
    5802:	81 83       	std	Z+1, r24	; 0x01

  // byte 2: high alarm temp
  scratchPad[HIGH_ALARM_TEMP] = _wire->read();
    5804:	f8 01       	movw	r30, r16
    5806:	85 81       	ldd	r24, Z+5	; 0x05
    5808:	96 81       	ldd	r25, Z+6	; 0x06
    580a:	0e 94 1a 29 	call	0x5234	; 0x5234 <_ZN7OneWire4readEv>
    580e:	f7 01       	movw	r30, r14
    5810:	82 83       	std	Z+2, r24	; 0x02

  // byte 3: low alarm temp
  scratchPad[LOW_ALARM_TEMP] = _wire->read();
    5812:	f8 01       	movw	r30, r16
    5814:	85 81       	ldd	r24, Z+5	; 0x05
    5816:	96 81       	ldd	r25, Z+6	; 0x06
    5818:	0e 94 1a 29 	call	0x5234	; 0x5234 <_ZN7OneWire4readEv>
    581c:	f7 01       	movw	r30, r14
    581e:	83 83       	std	Z+3, r24	; 0x03

  // byte 4:
  // DS18S20: store for crc
  // DS18B20 & DS1822: configuration register
  scratchPad[CONFIGURATION] = _wire->read();
    5820:	f8 01       	movw	r30, r16
    5822:	85 81       	ldd	r24, Z+5	; 0x05
    5824:	96 81       	ldd	r25, Z+6	; 0x06
    5826:	0e 94 1a 29 	call	0x5234	; 0x5234 <_ZN7OneWire4readEv>
    582a:	f7 01       	movw	r30, r14
    582c:	84 83       	std	Z+4, r24	; 0x04

  // byte 5:
  // internal use & crc
  scratchPad[INTERNAL_BYTE] = _wire->read();
    582e:	f8 01       	movw	r30, r16
    5830:	85 81       	ldd	r24, Z+5	; 0x05
    5832:	96 81       	ldd	r25, Z+6	; 0x06
    5834:	0e 94 1a 29 	call	0x5234	; 0x5234 <_ZN7OneWire4readEv>
    5838:	f7 01       	movw	r30, r14
    583a:	85 83       	std	Z+5, r24	; 0x05

  // byte 6:
  // DS18S20: COUNT_REMAIN
  // DS18B20 & DS1822: store for crc
  scratchPad[COUNT_REMAIN] = _wire->read();
    583c:	f8 01       	movw	r30, r16
    583e:	85 81       	ldd	r24, Z+5	; 0x05
    5840:	96 81       	ldd	r25, Z+6	; 0x06
    5842:	0e 94 1a 29 	call	0x5234	; 0x5234 <_ZN7OneWire4readEv>
    5846:	f7 01       	movw	r30, r14
    5848:	86 83       	std	Z+6, r24	; 0x06

  // byte 7:
  // DS18S20: COUNT_PER_C
  // DS18B20 & DS1822: store for crc
  scratchPad[COUNT_PER_C] = _wire->read();
    584a:	f8 01       	movw	r30, r16
    584c:	85 81       	ldd	r24, Z+5	; 0x05
    584e:	96 81       	ldd	r25, Z+6	; 0x06
    5850:	0e 94 1a 29 	call	0x5234	; 0x5234 <_ZN7OneWire4readEv>
    5854:	f7 01       	movw	r30, r14
    5856:	87 83       	std	Z+7, r24	; 0x07

  // byte 8:
  // SCTRACHPAD_CRC
  scratchPad[SCRATCHPAD_CRC] = _wire->read();
    5858:	f8 01       	movw	r30, r16
    585a:	85 81       	ldd	r24, Z+5	; 0x05
    585c:	96 81       	ldd	r25, Z+6	; 0x06
    585e:	0e 94 1a 29 	call	0x5234	; 0x5234 <_ZN7OneWire4readEv>
    5862:	f7 01       	movw	r30, r14
    5864:	80 87       	std	Z+8, r24	; 0x08

  _wire->reset();
    5866:	f8 01       	movw	r30, r16
    5868:	85 81       	ldd	r24, Z+5	; 0x05
    586a:	96 81       	ldd	r25, Z+6	; 0x06
    586c:	0e 94 cc 29 	call	0x5398	; 0x5398 <_ZN7OneWire5resetEv>
}
    5870:	1f 91       	pop	r17
    5872:	0f 91       	pop	r16
    5874:	ff 90       	pop	r15
    5876:	ef 90       	pop	r14
    5878:	df 90       	pop	r13
    587a:	cf 90       	pop	r12
    587c:	08 95       	ret

0000587e <_ZN17DallasTemperature21isConversionAvailableEPh>:
bool DallasTemperature::getCheckForConversion()
{
	return checkForConversion;
}

bool DallasTemperature::isConversionAvailable(uint8_t* deviceAddress)
    587e:	df 93       	push	r29
    5880:	cf 93       	push	r28
    5882:	cd b7       	in	r28, 0x3d	; 61
    5884:	de b7       	in	r29, 0x3e	; 62
    5886:	29 97       	sbiw	r28, 0x09	; 9
    5888:	0f b6       	in	r0, 0x3f	; 63
    588a:	f8 94       	cli
    588c:	de bf       	out	0x3e, r29	; 62
    588e:	0f be       	out	0x3f, r0	; 63
    5890:	cd bf       	out	0x3d, r28	; 61
{
	// Check if the clock has been raised indicating the conversion is complete
  	ScratchPad scratchPad;
  	readScratchPad(deviceAddress, scratchPad);
    5892:	ae 01       	movw	r20, r28
    5894:	4f 5f       	subi	r20, 0xFF	; 255
    5896:	5f 4f       	sbci	r21, 0xFF	; 255
    5898:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN17DallasTemperature14readScratchPadEPhS0_>
    589c:	89 81       	ldd	r24, Y+1	; 0x01
    589e:	81 11       	cpse	r24, r1
    58a0:	81 e0       	ldi	r24, 0x01	; 1
	return scratchPad[0];
}	
    58a2:	29 96       	adiw	r28, 0x09	; 9
    58a4:	0f b6       	in	r0, 0x3f	; 63
    58a6:	f8 94       	cli
    58a8:	de bf       	out	0x3e, r29	; 62
    58aa:	0f be       	out	0x3f, r0	; 63
    58ac:	cd bf       	out	0x3d, r28	; 61
    58ae:	cf 91       	pop	r28
    58b0:	df 91       	pop	r29
    58b2:	08 95       	ret

000058b4 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>:
  
  return true;
}


void DallasTemperature::blockTillConversionComplete(uint8_t* bitResolution, uint8_t* deviceAddress)
    58b4:	cf 92       	push	r12
    58b6:	df 92       	push	r13
    58b8:	ef 92       	push	r14
    58ba:	ff 92       	push	r15
    58bc:	0f 93       	push	r16
    58be:	1f 93       	push	r17
    58c0:	cf 93       	push	r28
    58c2:	df 93       	push	r29
    58c4:	ec 01       	movw	r28, r24
    58c6:	6b 01       	movw	r12, r22
{
	if(deviceAddress != 0 && checkForConversion && !parasite)
    58c8:	45 2b       	or	r20, r21
    58ca:	e1 f0       	breq	.+56     	; 0x5904 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
    58cc:	8b 81       	ldd	r24, Y+3	; 0x03
    58ce:	88 23       	and	r24, r24
    58d0:	c9 f0       	breq	.+50     	; 0x5904 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
    58d2:	88 81       	ld	r24, Y
    58d4:	88 23       	and	r24, r24
    58d6:	b1 f4       	brne	.+44     	; 0x5904 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
	{
	  	// Continue to check if the IC has responded with a temperature
	  	// NB: Could cause issues with multiple devices (one device may respond faster)
	  	unsigned long start = millis();
    58d8:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <millis>
    58dc:	7b 01       	movw	r14, r22
    58de:	8c 01       	movw	r16, r24
		while(!isConversionAvailable(0) && ((millis() - start) < 750));	
    58e0:	ce 01       	movw	r24, r28
    58e2:	60 e0       	ldi	r22, 0x00	; 0
    58e4:	70 e0       	ldi	r23, 0x00	; 0
    58e6:	0e 94 3f 2c 	call	0x587e	; 0x587e <_ZN17DallasTemperature21isConversionAvailableEPh>
    58ea:	88 23       	and	r24, r24
    58ec:	59 f4       	brne	.+22     	; 0x5904 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
    58ee:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <millis>
    58f2:	6e 19       	sub	r22, r14
    58f4:	7f 09       	sbc	r23, r15
    58f6:	80 0b       	sbc	r24, r16
    58f8:	91 0b       	sbc	r25, r17
    58fa:	6e 5e       	subi	r22, 0xEE	; 238
    58fc:	72 40       	sbci	r23, 0x02	; 2
    58fe:	80 40       	sbci	r24, 0x00	; 0
    5900:	90 40       	sbci	r25, 0x00	; 0
    5902:	70 f3       	brcs	.-36     	; 0x58e0 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x2c>
	}
	
  	// Wait a fix number of cycles till conversion is complete (based on IC datasheet)
	  switch (*bitResolution)
    5904:	f6 01       	movw	r30, r12
    5906:	60 81       	ld	r22, Z
    5908:	69 30       	cpi	r22, 0x09	; 9
    590a:	39 f0       	breq	.+14     	; 0x591a <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x66>
    590c:	69 30       	cpi	r22, 0x09	; 9
    590e:	a0 f0       	brcs	.+40     	; 0x5938 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x84>
    5910:	6a 30       	cpi	r22, 0x0A	; 10
    5912:	41 f0       	breq	.+16     	; 0x5924 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x70>
    5914:	6b 30       	cpi	r22, 0x0B	; 11
    5916:	81 f4       	brne	.+32     	; 0x5938 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x84>
    5918:	0a c0       	rjmp	.+20     	; 0x592e <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x7a>
	  {
	    case 9:
	      delay(94);
    591a:	6e e5       	ldi	r22, 0x5E	; 94
    591c:	70 e0       	ldi	r23, 0x00	; 0
    591e:	80 e0       	ldi	r24, 0x00	; 0
    5920:	90 e0       	ldi	r25, 0x00	; 0
    5922:	0e c0       	rjmp	.+28     	; 0x5940 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x8c>
	      break;
	    case 10:
	      delay(188);
    5924:	6c eb       	ldi	r22, 0xBC	; 188
    5926:	70 e0       	ldi	r23, 0x00	; 0
    5928:	80 e0       	ldi	r24, 0x00	; 0
    592a:	90 e0       	ldi	r25, 0x00	; 0
    592c:	09 c0       	rjmp	.+18     	; 0x5940 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x8c>
	      break;
	    case 11:
	      delay(375);
    592e:	67 e7       	ldi	r22, 0x77	; 119
    5930:	71 e0       	ldi	r23, 0x01	; 1
    5932:	80 e0       	ldi	r24, 0x00	; 0
    5934:	90 e0       	ldi	r25, 0x00	; 0
    5936:	04 c0       	rjmp	.+8      	; 0x5940 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x8c>
	      break;
	    case 12:
	    default:
	      delay(750);
    5938:	6e ee       	ldi	r22, 0xEE	; 238
    593a:	72 e0       	ldi	r23, 0x02	; 2
    593c:	80 e0       	ldi	r24, 0x00	; 0
    593e:	90 e0       	ldi	r25, 0x00	; 0
    5940:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <delay>
	      break;
	  }

}
    5944:	df 91       	pop	r29
    5946:	cf 91       	pop	r28
    5948:	1f 91       	pop	r17
    594a:	0f 91       	pop	r16
    594c:	ff 90       	pop	r15
    594e:	ef 90       	pop	r14
    5950:	df 90       	pop	r13
    5952:	cf 90       	pop	r12
    5954:	08 95       	ret

00005956 <_ZN17DallasTemperature11isConnectedEPhS0_>:
  return isConnected(deviceAddress, scratchPad);
}

// attempt to determine if the device at the given address is connected to the bus
// also allows for updating the read scratchpad
bool DallasTemperature::isConnected(uint8_t* deviceAddress, uint8_t* scratchPad)
    5956:	0f 93       	push	r16
    5958:	1f 93       	push	r17
    595a:	8a 01       	movw	r16, r20
{
  readScratchPad(deviceAddress, scratchPad);
    595c:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN17DallasTemperature14readScratchPadEPhS0_>
  return (_wire->crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]);
    5960:	c8 01       	movw	r24, r16
    5962:	68 e0       	ldi	r22, 0x08	; 8
    5964:	0e 94 d5 28 	call	0x51aa	; 0x51aa <_ZN7OneWire4crc8EPKhh>
    5968:	20 e0       	ldi	r18, 0x00	; 0
    596a:	f8 01       	movw	r30, r16
    596c:	90 85       	ldd	r25, Z+8	; 0x08
    596e:	89 17       	cp	r24, r25
    5970:	09 f4       	brne	.+2      	; 0x5974 <_ZN17DallasTemperature11isConnectedEPhS0_+0x1e>
    5972:	21 e0       	ldi	r18, 0x01	; 1
}
    5974:	82 2f       	mov	r24, r18
    5976:	1f 91       	pop	r17
    5978:	0f 91       	pop	r16
    597a:	08 95       	ret

0000597c <_ZN17DallasTemperature8getTempCEPh>:
// returns temperature in degrees C or DEVICE_DISCONNECTED if the
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DallasTemperature::getTempC(uint8_t* deviceAddress)
    597c:	cf 92       	push	r12
    597e:	df 92       	push	r13
    5980:	ef 92       	push	r14
    5982:	ff 92       	push	r15
    5984:	0f 93       	push	r16
    5986:	1f 93       	push	r17
    5988:	df 93       	push	r29
    598a:	cf 93       	push	r28
    598c:	cd b7       	in	r28, 0x3d	; 61
    598e:	de b7       	in	r29, 0x3e	; 62
    5990:	29 97       	sbiw	r28, 0x09	; 9
    5992:	0f b6       	in	r0, 0x3f	; 63
    5994:	f8 94       	cli
    5996:	de bf       	out	0x3e, r29	; 62
    5998:	0f be       	out	0x3f, r0	; 63
    599a:	cd bf       	out	0x3d, r28	; 61
    599c:	8c 01       	movw	r16, r24
    599e:	7b 01       	movw	r14, r22
  // TODO: Multiple devices (up to 64) on the same bus may take 
  //       some time to negotiate a response
  // What happens in case of collision?

  ScratchPad scratchPad;
  if (isConnected(deviceAddress, scratchPad)) return calculateTemperature(deviceAddress, scratchPad);
    59a0:	6e 01       	movw	r12, r28
    59a2:	08 94       	sec
    59a4:	c1 1c       	adc	r12, r1
    59a6:	d1 1c       	adc	r13, r1
    59a8:	a6 01       	movw	r20, r12
    59aa:	0e 94 ab 2c 	call	0x5956	; 0x5956 <_ZN17DallasTemperature11isConnectedEPhS0_>
    59ae:	88 23       	and	r24, r24
    59b0:	29 f4       	brne	.+10     	; 0x59bc <_ZN17DallasTemperature8getTempCEPh+0x40>
    59b2:	60 e0       	ldi	r22, 0x00	; 0
    59b4:	70 e0       	ldi	r23, 0x00	; 0
    59b6:	8e ef       	ldi	r24, 0xFE	; 254
    59b8:	92 ec       	ldi	r25, 0xC2	; 194
    59ba:	05 c0       	rjmp	.+10     	; 0x59c6 <_ZN17DallasTemperature8getTempCEPh+0x4a>
    59bc:	c8 01       	movw	r24, r16
    59be:	b7 01       	movw	r22, r14
    59c0:	a6 01       	movw	r20, r12
    59c2:	0e 94 f5 2a 	call	0x55ea	; 0x55ea <_ZN17DallasTemperature20calculateTemperatureEPhS0_>
  return DEVICE_DISCONNECTED;
}
    59c6:	29 96       	adiw	r28, 0x09	; 9
    59c8:	0f b6       	in	r0, 0x3f	; 63
    59ca:	f8 94       	cli
    59cc:	de bf       	out	0x3e, r29	; 62
    59ce:	0f be       	out	0x3f, r0	; 63
    59d0:	cd bf       	out	0x3d, r28	; 61
    59d2:	cf 91       	pop	r28
    59d4:	df 91       	pop	r29
    59d6:	1f 91       	pop	r17
    59d8:	0f 91       	pop	r16
    59da:	ff 90       	pop	r15
    59dc:	ef 90       	pop	r14
    59de:	df 90       	pop	r13
    59e0:	cf 90       	pop	r12
    59e2:	08 95       	ret

000059e4 <_ZN17DallasTemperature13getResolutionEPh>:
	return bitResolution;
}

// returns the current resolution of the device, 9-12
// returns 0 if device not found
uint8_t DallasTemperature::getResolution(uint8_t* deviceAddress)
    59e4:	df 93       	push	r29
    59e6:	cf 93       	push	r28
    59e8:	cd b7       	in	r28, 0x3d	; 61
    59ea:	de b7       	in	r29, 0x3e	; 62
    59ec:	29 97       	sbiw	r28, 0x09	; 9
    59ee:	0f b6       	in	r0, 0x3f	; 63
    59f0:	f8 94       	cli
    59f2:	de bf       	out	0x3e, r29	; 62
    59f4:	0f be       	out	0x3f, r0	; 63
    59f6:	cd bf       	out	0x3d, r28	; 61
    59f8:	9c 01       	movw	r18, r24
    59fa:	fb 01       	movw	r30, r22
{
  if (deviceAddress[0] == DS18S20MODEL) return 9; // this model has a fixed resolution
    59fc:	80 81       	ld	r24, Z
    59fe:	80 31       	cpi	r24, 0x10	; 16
    5a00:	d9 f0       	breq	.+54     	; 0x5a38 <_ZN17DallasTemperature13getResolutionEPh+0x54>

  ScratchPad scratchPad;
  if (isConnected(deviceAddress, scratchPad))
    5a02:	c9 01       	movw	r24, r18
    5a04:	ae 01       	movw	r20, r28
    5a06:	4f 5f       	subi	r20, 0xFF	; 255
    5a08:	5f 4f       	sbci	r21, 0xFF	; 255
    5a0a:	0e 94 ab 2c 	call	0x5956	; 0x5956 <_ZN17DallasTemperature11isConnectedEPhS0_>
    5a0e:	88 23       	and	r24, r24
    5a10:	a9 f0       	breq	.+42     	; 0x5a3c <_ZN17DallasTemperature13getResolutionEPh+0x58>
  {
	switch (scratchPad[CONFIGURATION])
    5a12:	8d 81       	ldd	r24, Y+5	; 0x05
    5a14:	8f 33       	cpi	r24, 0x3F	; 63
    5a16:	71 f0       	breq	.+28     	; 0x5a34 <_ZN17DallasTemperature13getResolutionEPh+0x50>
    5a18:	80 34       	cpi	r24, 0x40	; 64
    5a1a:	18 f4       	brcc	.+6      	; 0x5a22 <_ZN17DallasTemperature13getResolutionEPh+0x3e>
    5a1c:	8f 31       	cpi	r24, 0x1F	; 31
    5a1e:	71 f4       	brne	.+28     	; 0x5a3c <_ZN17DallasTemperature13getResolutionEPh+0x58>
    5a20:	0b c0       	rjmp	.+22     	; 0x5a38 <_ZN17DallasTemperature13getResolutionEPh+0x54>
    5a22:	8f 35       	cpi	r24, 0x5F	; 95
    5a24:	19 f0       	breq	.+6      	; 0x5a2c <_ZN17DallasTemperature13getResolutionEPh+0x48>
    5a26:	8f 37       	cpi	r24, 0x7F	; 127
    5a28:	49 f4       	brne	.+18     	; 0x5a3c <_ZN17DallasTemperature13getResolutionEPh+0x58>
    5a2a:	02 c0       	rjmp	.+4      	; 0x5a30 <_ZN17DallasTemperature13getResolutionEPh+0x4c>
    5a2c:	8b e0       	ldi	r24, 0x0B	; 11
    5a2e:	07 c0       	rjmp	.+14     	; 0x5a3e <_ZN17DallasTemperature13getResolutionEPh+0x5a>
    5a30:	8c e0       	ldi	r24, 0x0C	; 12
    5a32:	05 c0       	rjmp	.+10     	; 0x5a3e <_ZN17DallasTemperature13getResolutionEPh+0x5a>
    5a34:	8a e0       	ldi	r24, 0x0A	; 10
    5a36:	03 c0       	rjmp	.+6      	; 0x5a3e <_ZN17DallasTemperature13getResolutionEPh+0x5a>
        
      case TEMP_11_BIT:
        return 11;
        
      case TEMP_10_BIT:
        return 10;
    5a38:	89 e0       	ldi	r24, 0x09	; 9
    5a3a:	01 c0       	rjmp	.+2      	; 0x5a3e <_ZN17DallasTemperature13getResolutionEPh+0x5a>
    5a3c:	80 e0       	ldi	r24, 0x00	; 0
        return 9;
        
	}
  }
  return 0;
}
    5a3e:	29 96       	adiw	r28, 0x09	; 9
    5a40:	0f b6       	in	r0, 0x3f	; 63
    5a42:	f8 94       	cli
    5a44:	de bf       	out	0x3e, r29	; 62
    5a46:	0f be       	out	0x3f, r0	; 63
    5a48:	cd bf       	out	0x3d, r28	; 61
    5a4a:	cf 91       	pop	r28
    5a4c:	df 91       	pop	r29
    5a4e:	08 95       	ret

00005a50 <_ZN17DallasTemperature28requestTemperaturesByAddressEPh>:
}

// sends command for one device to perform a temperature by address
// returns FALSE if device is disconnected
// returns TRUE  otherwise
bool DallasTemperature::requestTemperaturesByAddress(uint8_t* deviceAddress)
    5a50:	ef 92       	push	r14
    5a52:	ff 92       	push	r15
    5a54:	0f 93       	push	r16
    5a56:	1f 93       	push	r17
    5a58:	df 93       	push	r29
    5a5a:	cf 93       	push	r28
    5a5c:	cd b7       	in	r28, 0x3d	; 61
    5a5e:	de b7       	in	r29, 0x3e	; 62
    5a60:	2a 97       	sbiw	r28, 0x0a	; 10
    5a62:	0f b6       	in	r0, 0x3f	; 63
    5a64:	f8 94       	cli
    5a66:	de bf       	out	0x3e, r29	; 62
    5a68:	0f be       	out	0x3f, r0	; 63
    5a6a:	cd bf       	out	0x3d, r28	; 61
    5a6c:	8c 01       	movw	r16, r24
    5a6e:	7b 01       	movw	r14, r22
{

  _wire->reset();
    5a70:	fc 01       	movw	r30, r24
    5a72:	85 81       	ldd	r24, Z+5	; 0x05
    5a74:	96 81       	ldd	r25, Z+6	; 0x06
    5a76:	0e 94 cc 29 	call	0x5398	; 0x5398 <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
    5a7a:	f8 01       	movw	r30, r16
    5a7c:	85 81       	ldd	r24, Z+5	; 0x05
    5a7e:	96 81       	ldd	r25, Z+6	; 0x06
    5a80:	b7 01       	movw	r22, r14
    5a82:	0e 94 ab 29 	call	0x5356	; 0x5356 <_ZN7OneWire6selectEPKh>
  _wire->write(STARTCONVO, parasite);
    5a86:	f8 01       	movw	r30, r16
    5a88:	85 81       	ldd	r24, Z+5	; 0x05
    5a8a:	96 81       	ldd	r25, Z+6	; 0x06
    5a8c:	64 e4       	ldi	r22, 0x44	; 68
    5a8e:	40 81       	ld	r20, Z
    5a90:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <_ZN7OneWire5writeEhh>
  
    // check device
  ScratchPad scratchPad;
  if (!isConnected(deviceAddress, scratchPad)) return false;
    5a94:	c8 01       	movw	r24, r16
    5a96:	b7 01       	movw	r22, r14
    5a98:	ae 01       	movw	r20, r28
    5a9a:	4e 5f       	subi	r20, 0xFE	; 254
    5a9c:	5f 4f       	sbci	r21, 0xFF	; 255
    5a9e:	0e 94 ab 2c 	call	0x5956	; 0x5956 <_ZN17DallasTemperature11isConnectedEPhS0_>
    5aa2:	88 23       	and	r24, r24
    5aa4:	89 f0       	breq	.+34     	; 0x5ac8 <_ZN17DallasTemperature28requestTemperaturesByAddressEPh+0x78>
  
  
  // ASYNC mode?
  if (!waitForConversion) return true;   
    5aa6:	f8 01       	movw	r30, r16
    5aa8:	82 81       	ldd	r24, Z+2	; 0x02
    5aaa:	88 23       	and	r24, r24
    5aac:	61 f0       	breq	.+24     	; 0x5ac6 <_ZN17DallasTemperature28requestTemperaturesByAddressEPh+0x76>
  uint8_t bitResolution = getResolution(deviceAddress);
    5aae:	c8 01       	movw	r24, r16
    5ab0:	b7 01       	movw	r22, r14
    5ab2:	0e 94 f2 2c 	call	0x59e4	; 0x59e4 <_ZN17DallasTemperature13getResolutionEPh>
    5ab6:	89 83       	std	Y+1, r24	; 0x01
  blockTillConversionComplete(&bitResolution, deviceAddress);
    5ab8:	c8 01       	movw	r24, r16
    5aba:	be 01       	movw	r22, r28
    5abc:	6f 5f       	subi	r22, 0xFF	; 255
    5abe:	7f 4f       	sbci	r23, 0xFF	; 255
    5ac0:	a7 01       	movw	r20, r14
    5ac2:	0e 94 5a 2c 	call	0x58b4	; 0x58b4 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>
    5ac6:	81 e0       	ldi	r24, 0x01	; 1
  
  return true;
}
    5ac8:	2a 96       	adiw	r28, 0x0a	; 10
    5aca:	0f b6       	in	r0, 0x3f	; 63
    5acc:	f8 94       	cli
    5ace:	de bf       	out	0x3e, r29	; 62
    5ad0:	0f be       	out	0x3f, r0	; 63
    5ad2:	cd bf       	out	0x3d, r28	; 61
    5ad4:	cf 91       	pop	r28
    5ad6:	df 91       	pop	r29
    5ad8:	1f 91       	pop	r17
    5ada:	0f 91       	pop	r16
    5adc:	ff 90       	pop	r15
    5ade:	ef 90       	pop	r14
    5ae0:	08 95       	ret

00005ae2 <_ZN17DallasTemperature12validAddressEPh>:
{
  return devices;
}

// returns true if address is valid
bool DallasTemperature::validAddress(uint8_t* deviceAddress)
    5ae2:	0f 93       	push	r16
    5ae4:	1f 93       	push	r17
    5ae6:	8b 01       	movw	r16, r22
{
  return (_wire->crc8(deviceAddress, 7) == deviceAddress[7]);
    5ae8:	cb 01       	movw	r24, r22
    5aea:	67 e0       	ldi	r22, 0x07	; 7
    5aec:	0e 94 d5 28 	call	0x51aa	; 0x51aa <_ZN7OneWire4crc8EPKhh>
    5af0:	20 e0       	ldi	r18, 0x00	; 0
    5af2:	f8 01       	movw	r30, r16
    5af4:	97 81       	ldd	r25, Z+7	; 0x07
    5af6:	89 17       	cp	r24, r25
    5af8:	09 f4       	brne	.+2      	; 0x5afc <_ZN17DallasTemperature12validAddressEPh+0x1a>
    5afa:	21 e0       	ldi	r18, 0x01	; 1
}
    5afc:	82 2f       	mov	r24, r18
    5afe:	1f 91       	pop	r17
    5b00:	0f 91       	pop	r16
    5b02:	08 95       	ret

00005b04 <_ZN17DallasTemperature10getAddressEPhh>:

// finds an address at a given index on the bus
// returns true if the device was found
bool DallasTemperature::getAddress(uint8_t* deviceAddress, uint8_t index)
    5b04:	ef 92       	push	r14
    5b06:	ff 92       	push	r15
    5b08:	0f 93       	push	r16
    5b0a:	1f 93       	push	r17
    5b0c:	cf 93       	push	r28
    5b0e:	df 93       	push	r29
    5b10:	ec 01       	movw	r28, r24
    5b12:	7b 01       	movw	r14, r22
    5b14:	04 2f       	mov	r16, r20
{
  uint8_t depth = 0;

  _wire->reset_search();
    5b16:	8d 81       	ldd	r24, Y+5	; 0x05
    5b18:	9e 81       	ldd	r25, Y+6	; 0x06
    5b1a:	0e 94 c8 28 	call	0x5190	; 0x5190 <_ZN7OneWire12reset_searchEv>
    5b1e:	10 e0       	ldi	r17, 0x00	; 0
    5b20:	07 c0       	rjmp	.+14     	; 0x5b30 <_ZN17DallasTemperature10getAddressEPhh+0x2c>

  while (depth <= index && _wire->search(deviceAddress))
  {
    if (depth == index && validAddress(deviceAddress)) return true;
    5b22:	ce 01       	movw	r24, r28
    5b24:	b7 01       	movw	r22, r14
    5b26:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <_ZN17DallasTemperature12validAddressEPh>
    5b2a:	88 23       	and	r24, r24
    5b2c:	a9 f0       	breq	.+42     	; 0x5b58 <_ZN17DallasTemperature10getAddressEPhh+0x54>
    5b2e:	0a c0       	rjmp	.+20     	; 0x5b44 <_ZN17DallasTemperature10getAddressEPhh+0x40>
{
  uint8_t depth = 0;

  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
    5b30:	8d 81       	ldd	r24, Y+5	; 0x05
    5b32:	9e 81       	ldd	r25, Y+6	; 0x06
    5b34:	b7 01       	movw	r22, r14
    5b36:	0e 94 17 2a 	call	0x542e	; 0x542e <_ZN7OneWire6searchEPh>
    5b3a:	88 23       	and	r24, r24
    5b3c:	29 f0       	breq	.+10     	; 0x5b48 <_ZN17DallasTemperature10getAddressEPhh+0x44>
  {
    if (depth == index && validAddress(deviceAddress)) return true;
    5b3e:	10 17       	cp	r17, r16
    5b40:	59 f4       	brne	.+22     	; 0x5b58 <_ZN17DallasTemperature10getAddressEPhh+0x54>
    5b42:	ef cf       	rjmp	.-34     	; 0x5b22 <_ZN17DallasTemperature10getAddressEPhh+0x1e>
    5b44:	81 e0       	ldi	r24, 0x01	; 1
    5b46:	01 c0       	rjmp	.+2      	; 0x5b4a <_ZN17DallasTemperature10getAddressEPhh+0x46>
    5b48:	80 e0       	ldi	r24, 0x00	; 0
    depth++;
  }

  return false;
}
    5b4a:	df 91       	pop	r29
    5b4c:	cf 91       	pop	r28
    5b4e:	1f 91       	pop	r17
    5b50:	0f 91       	pop	r16
    5b52:	ff 90       	pop	r15
    5b54:	ef 90       	pop	r14
    5b56:	08 95       	ret
  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
  {
    if (depth == index && validAddress(deviceAddress)) return true;
    depth++;
    5b58:	1f 5f       	subi	r17, 0xFF	; 255
{
  uint8_t depth = 0;

  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
    5b5a:	01 17       	cp	r16, r17
    5b5c:	a8 f3       	brcs	.-22     	; 0x5b48 <_ZN17DallasTemperature10getAddressEPhh+0x44>
    5b5e:	e8 cf       	rjmp	.-48     	; 0x5b30 <_ZN17DallasTemperature10getAddressEPhh+0x2c>

00005b60 <_ZN17DallasTemperature5beginEv>:
  waitForConversion = true;
  checkForConversion = true;
}

// initialise the bus
void DallasTemperature::begin(void)
    5b60:	af 92       	push	r10
    5b62:	bf 92       	push	r11
    5b64:	cf 92       	push	r12
    5b66:	df 92       	push	r13
    5b68:	ef 92       	push	r14
    5b6a:	ff 92       	push	r15
    5b6c:	0f 93       	push	r16
    5b6e:	1f 93       	push	r17
    5b70:	df 93       	push	r29
    5b72:	cf 93       	push	r28
    5b74:	cd b7       	in	r28, 0x3d	; 61
    5b76:	de b7       	in	r29, 0x3e	; 62
    5b78:	61 97       	sbiw	r28, 0x11	; 17
    5b7a:	0f b6       	in	r0, 0x3f	; 63
    5b7c:	f8 94       	cli
    5b7e:	de bf       	out	0x3e, r29	; 62
    5b80:	0f be       	out	0x3f, r0	; 63
    5b82:	cd bf       	out	0x3d, r28	; 61
    5b84:	7c 01       	movw	r14, r24
{
  DeviceAddress deviceAddress;

  _wire->reset_search();
    5b86:	fc 01       	movw	r30, r24
    5b88:	85 81       	ldd	r24, Z+5	; 0x05
    5b8a:	96 81       	ldd	r25, Z+6	; 0x06
    5b8c:	0e 94 c8 28 	call	0x5190	; 0x5190 <_ZN7OneWire12reset_searchEv>
  devices = 0; // Reset the number of devices when we enumerate wire devices
    5b90:	f7 01       	movw	r30, r14
    5b92:	14 82       	std	Z+4, r1	; 0x04

  while (_wire->search(deviceAddress))
    5b94:	6e 01       	movw	r12, r28
    5b96:	08 94       	sec
    5b98:	c1 1c       	adc	r12, r1
    5b9a:	d1 1c       	adc	r13, r1
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;

      ScratchPad scratchPad;

      readScratchPad(deviceAddress, scratchPad);
    5b9c:	79 e0       	ldi	r23, 0x09	; 9
    5b9e:	a7 2e       	mov	r10, r23
    5ba0:	b1 2c       	mov	r11, r1
    5ba2:	ac 0e       	add	r10, r28
    5ba4:	bd 1e       	adc	r11, r29

  while (_wire->search(deviceAddress))
  {
    if (validAddress(deviceAddress))
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;
    5ba6:	01 e0       	ldi	r16, 0x01	; 1
    5ba8:	2b c0       	rjmp	.+86     	; 0x5c00 <_ZN17DallasTemperature5beginEv+0xa0>
  _wire->reset_search();
  devices = 0; // Reset the number of devices when we enumerate wire devices

  while (_wire->search(deviceAddress))
  {
    if (validAddress(deviceAddress))
    5baa:	c7 01       	movw	r24, r14
    5bac:	b6 01       	movw	r22, r12
    5bae:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <_ZN17DallasTemperature12validAddressEPh>
    5bb2:	88 23       	and	r24, r24
    5bb4:	29 f1       	breq	.+74     	; 0x5c00 <_ZN17DallasTemperature5beginEv+0xa0>
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;
    5bb6:	f7 01       	movw	r30, r14
    5bb8:	80 81       	ld	r24, Z
    5bba:	88 23       	and	r24, r24
    5bbc:	41 f4       	brne	.+16     	; 0x5bce <_ZN17DallasTemperature5beginEv+0x6e>
    5bbe:	c7 01       	movw	r24, r14
    5bc0:	b6 01       	movw	r22, r12
    5bc2:	0e 94 ad 2b 	call	0x575a	; 0x575a <_ZN17DallasTemperature15readPowerSupplyEPh>
    5bc6:	88 23       	and	r24, r24
    5bc8:	11 f0       	breq	.+4      	; 0x5bce <_ZN17DallasTemperature5beginEv+0x6e>
    5bca:	f7 01       	movw	r30, r14
    5bcc:	00 83       	st	Z, r16

      ScratchPad scratchPad;

      readScratchPad(deviceAddress, scratchPad);
    5bce:	c7 01       	movw	r24, r14
    5bd0:	b6 01       	movw	r22, r12
    5bd2:	a5 01       	movw	r20, r10
    5bd4:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN17DallasTemperature14readScratchPadEPhS0_>

	  bitResolution = max(bitResolution, getResolution(deviceAddress));
    5bd8:	f7 01       	movw	r30, r14
    5bda:	11 81       	ldd	r17, Z+1	; 0x01
    5bdc:	c7 01       	movw	r24, r14
    5bde:	b6 01       	movw	r22, r12
    5be0:	0e 94 f2 2c 	call	0x59e4	; 0x59e4 <_ZN17DallasTemperature13getResolutionEPh>
    5be4:	81 17       	cp	r24, r17
    5be6:	18 f4       	brcc	.+6      	; 0x5bee <_ZN17DallasTemperature5beginEv+0x8e>
    5be8:	f7 01       	movw	r30, r14
    5bea:	81 81       	ldd	r24, Z+1	; 0x01
    5bec:	04 c0       	rjmp	.+8      	; 0x5bf6 <_ZN17DallasTemperature5beginEv+0x96>
    5bee:	c7 01       	movw	r24, r14
    5bf0:	b6 01       	movw	r22, r12
    5bf2:	0e 94 f2 2c 	call	0x59e4	; 0x59e4 <_ZN17DallasTemperature13getResolutionEPh>
    5bf6:	f7 01       	movw	r30, r14
    5bf8:	81 83       	std	Z+1, r24	; 0x01

      devices++;
    5bfa:	84 81       	ldd	r24, Z+4	; 0x04
    5bfc:	8f 5f       	subi	r24, 0xFF	; 255
    5bfe:	84 83       	std	Z+4, r24	; 0x04
  DeviceAddress deviceAddress;

  _wire->reset_search();
  devices = 0; // Reset the number of devices when we enumerate wire devices

  while (_wire->search(deviceAddress))
    5c00:	f7 01       	movw	r30, r14
    5c02:	85 81       	ldd	r24, Z+5	; 0x05
    5c04:	96 81       	ldd	r25, Z+6	; 0x06
    5c06:	b6 01       	movw	r22, r12
    5c08:	0e 94 17 2a 	call	0x542e	; 0x542e <_ZN7OneWire6searchEPh>
    5c0c:	88 23       	and	r24, r24
    5c0e:	69 f6       	brne	.-102    	; 0x5baa <_ZN17DallasTemperature5beginEv+0x4a>
	  bitResolution = max(bitResolution, getResolution(deviceAddress));

      devices++;
    }
  }
}
    5c10:	61 96       	adiw	r28, 0x11	; 17
    5c12:	0f b6       	in	r0, 0x3f	; 63
    5c14:	f8 94       	cli
    5c16:	de bf       	out	0x3e, r29	; 62
    5c18:	0f be       	out	0x3f, r0	; 63
    5c1a:	cd bf       	out	0x3d, r28	; 61
    5c1c:	cf 91       	pop	r28
    5c1e:	df 91       	pop	r29
    5c20:	1f 91       	pop	r17
    5c22:	0f 91       	pop	r16
    5c24:	ff 90       	pop	r15
    5c26:	ef 90       	pop	r14
    5c28:	df 90       	pop	r13
    5c2a:	cf 90       	pop	r12
    5c2c:	bf 90       	pop	r11
    5c2e:	af 90       	pop	r10
    5c30:	08 95       	ret

00005c32 <malloc>:
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	if (len < sizeof(struct __freelist) - sizeof(size_t))
    5c32:	0f 93       	push	r16
    5c34:	1f 93       	push	r17
    5c36:	cf 93       	push	r28
    5c38:	df 93       	push	r29
    5c3a:	bc 01       	movw	r22, r24
    5c3c:	82 30       	cpi	r24, 0x02	; 2
    5c3e:	91 05       	cpc	r25, r1
    5c40:	10 f4       	brcc	.+4      	; 0x5c46 <malloc+0x14>
    5c42:	62 e0       	ldi	r22, 0x02	; 2
    5c44:	70 e0       	ldi	r23, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    5c46:	e0 91 dc 03 	lds	r30, 0x03DC
    5c4a:	f0 91 dd 03 	lds	r31, 0x03DD
    5c4e:	a0 e0       	ldi	r26, 0x00	; 0
    5c50:	b0 e0       	ldi	r27, 0x00	; 0
    5c52:	40 e0       	ldi	r20, 0x00	; 0
    5c54:	50 e0       	ldi	r21, 0x00	; 0
    5c56:	24 c0       	rjmp	.+72     	; 0x5ca0 <malloc+0x6e>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    5c58:	80 81       	ld	r24, Z
    5c5a:	91 81       	ldd	r25, Z+1	; 0x01
    5c5c:	86 17       	cp	r24, r22
    5c5e:	97 07       	cpc	r25, r23
    5c60:	d0 f0       	brcs	.+52     	; 0x5c96 <malloc+0x64>
			continue;
		if (fp1->sz == len) {
    5c62:	86 17       	cp	r24, r22
    5c64:	97 07       	cpc	r25, r23
    5c66:	71 f4       	brne	.+28     	; 0x5c84 <malloc+0x52>
    5c68:	82 81       	ldd	r24, Z+2	; 0x02
    5c6a:	93 81       	ldd	r25, Z+3	; 0x03
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    5c6c:	10 97       	sbiw	r26, 0x00	; 0
    5c6e:	29 f0       	breq	.+10     	; 0x5c7a <malloc+0x48>
				fp2->nx = fp1->nx;
    5c70:	13 96       	adiw	r26, 0x03	; 3
    5c72:	9c 93       	st	X, r25
    5c74:	8e 93       	st	-X, r24
    5c76:	12 97       	sbiw	r26, 0x02	; 2
    5c78:	2c c0       	rjmp	.+88     	; 0x5cd2 <malloc+0xa0>
			else
				__flp = fp1->nx;
    5c7a:	90 93 dd 03 	sts	0x03DD, r25
    5c7e:	80 93 dc 03 	sts	0x03DC, r24
    5c82:	27 c0       	rjmp	.+78     	; 0x5cd2 <malloc+0xa0>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    5c84:	41 15       	cp	r20, r1
    5c86:	51 05       	cpc	r21, r1
    5c88:	19 f0       	breq	.+6      	; 0x5c90 <malloc+0x5e>
    5c8a:	84 17       	cp	r24, r20
    5c8c:	95 07       	cpc	r25, r21
    5c8e:	18 f4       	brcc	.+6      	; 0x5c96 <malloc+0x64>
    5c90:	ef 01       	movw	r28, r30
    5c92:	8d 01       	movw	r16, r26
    5c94:	ac 01       	movw	r20, r24
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    5c96:	df 01       	movw	r26, r30
    5c98:	82 81       	ldd	r24, Z+2	; 0x02
    5c9a:	93 81       	ldd	r25, Z+3	; 0x03
    5c9c:	9c 01       	movw	r18, r24
    5c9e:	f9 01       	movw	r30, r18
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
    5ca0:	30 97       	sbiw	r30, 0x00	; 0
    5ca2:	d1 f6       	brne	.-76     	; 0x5c58 <malloc+0x26>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    5ca4:	41 15       	cp	r20, r1
    5ca6:	51 05       	cpc	r21, r1
    5ca8:	f9 f0       	breq	.+62     	; 0x5ce8 <malloc+0xb6>
		if (s - len < sizeof(struct __freelist)) {
    5caa:	ca 01       	movw	r24, r20
    5cac:	86 1b       	sub	r24, r22
    5cae:	97 0b       	sbc	r25, r23
    5cb0:	84 30       	cpi	r24, 0x04	; 4
    5cb2:	91 05       	cpc	r25, r1
    5cb4:	80 f4       	brcc	.+32     	; 0x5cd6 <malloc+0xa4>
    5cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    5cb8:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    5cba:	01 15       	cp	r16, r1
    5cbc:	11 05       	cpc	r17, r1
    5cbe:	21 f0       	breq	.+8      	; 0x5cc8 <malloc+0x96>
				sfp2->nx = sfp1->nx;
    5cc0:	f8 01       	movw	r30, r16
    5cc2:	93 83       	std	Z+3, r25	; 0x03
    5cc4:	82 83       	std	Z+2, r24	; 0x02
    5cc6:	04 c0       	rjmp	.+8      	; 0x5cd0 <malloc+0x9e>
			else
				__flp = sfp1->nx;
    5cc8:	90 93 dd 03 	sts	0x03DD, r25
    5ccc:	80 93 dc 03 	sts	0x03DC, r24
			return &(sfp1->nx);
    5cd0:	fe 01       	movw	r30, r28
    5cd2:	32 96       	adiw	r30, 0x02	; 2
    5cd4:	45 c0       	rjmp	.+138    	; 0x5d60 <malloc+0x12e>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    5cd6:	fe 01       	movw	r30, r28
    5cd8:	e8 0f       	add	r30, r24
    5cda:	f9 1f       	adc	r31, r25
    5cdc:	61 93       	st	Z+, r22
    5cde:	71 93       	st	Z+, r23
		sfp1->sz = s - sizeof(size_t);
    5ce0:	02 97       	sbiw	r24, 0x02	; 2
    5ce2:	99 83       	std	Y+1, r25	; 0x01
    5ce4:	88 83       	st	Y, r24
    5ce6:	3c c0       	rjmp	.+120    	; 0x5d60 <malloc+0x12e>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
    5ce8:	80 91 da 03 	lds	r24, 0x03DA
    5cec:	90 91 db 03 	lds	r25, 0x03DB
    5cf0:	89 2b       	or	r24, r25
    5cf2:	41 f4       	brne	.+16     	; 0x5d04 <malloc+0xd2>
		__brkval = __malloc_heap_start;
    5cf4:	80 91 0b 01 	lds	r24, 0x010B
    5cf8:	90 91 0c 01 	lds	r25, 0x010C
    5cfc:	90 93 db 03 	sts	0x03DB, r25
    5d00:	80 93 da 03 	sts	0x03DA, r24
	cp = __malloc_heap_end;
    5d04:	40 91 0d 01 	lds	r20, 0x010D
    5d08:	50 91 0e 01 	lds	r21, 0x010E
	if (cp == 0)
    5d0c:	41 15       	cp	r20, r1
    5d0e:	51 05       	cpc	r21, r1
    5d10:	41 f4       	brne	.+16     	; 0x5d22 <malloc+0xf0>
		cp = STACK_POINTER() - __malloc_margin;
    5d12:	4d b7       	in	r20, 0x3d	; 61
    5d14:	5e b7       	in	r21, 0x3e	; 62
    5d16:	80 91 09 01 	lds	r24, 0x0109
    5d1a:	90 91 0a 01 	lds	r25, 0x010A
    5d1e:	48 1b       	sub	r20, r24
    5d20:	59 0b       	sbc	r21, r25
	if (cp <= __brkval)
    5d22:	20 91 da 03 	lds	r18, 0x03DA
    5d26:	30 91 db 03 	lds	r19, 0x03DB
    5d2a:	24 17       	cp	r18, r20
    5d2c:	35 07       	cpc	r19, r21
    5d2e:	b0 f4       	brcc	.+44     	; 0x5d5c <malloc+0x12a>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    5d30:	ca 01       	movw	r24, r20
    5d32:	82 1b       	sub	r24, r18
    5d34:	93 0b       	sbc	r25, r19
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    5d36:	86 17       	cp	r24, r22
    5d38:	97 07       	cpc	r25, r23
    5d3a:	80 f0       	brcs	.+32     	; 0x5d5c <malloc+0x12a>
    5d3c:	ab 01       	movw	r20, r22
    5d3e:	4e 5f       	subi	r20, 0xFE	; 254
    5d40:	5f 4f       	sbci	r21, 0xFF	; 255
    5d42:	84 17       	cp	r24, r20
    5d44:	95 07       	cpc	r25, r21
    5d46:	50 f0       	brcs	.+20     	; 0x5d5c <malloc+0x12a>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    5d48:	42 0f       	add	r20, r18
    5d4a:	53 1f       	adc	r21, r19
    5d4c:	50 93 db 03 	sts	0x03DB, r21
    5d50:	40 93 da 03 	sts	0x03DA, r20
		fp1->sz = len;
    5d54:	f9 01       	movw	r30, r18
    5d56:	61 93       	st	Z+, r22
    5d58:	71 93       	st	Z+, r23
    5d5a:	02 c0       	rjmp	.+4      	; 0x5d60 <malloc+0x12e>
		return &(fp1->nx);
    5d5c:	e0 e0       	ldi	r30, 0x00	; 0
    5d5e:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
    5d60:	cf 01       	movw	r24, r30
    5d62:	df 91       	pop	r29
    5d64:	cf 91       	pop	r28
    5d66:	1f 91       	pop	r17
    5d68:	0f 91       	pop	r16
    5d6a:	08 95       	ret

00005d6c <free>:
{
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    5d6c:	cf 93       	push	r28
    5d6e:	df 93       	push	r29
    5d70:	9c 01       	movw	r18, r24
    5d72:	00 97       	sbiw	r24, 0x00	; 0
    5d74:	09 f4       	brne	.+2      	; 0x5d78 <free+0xc>
    5d76:	8f c0       	rjmp	.+286    	; 0x5e96 <free+0x12a>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    5d78:	ec 01       	movw	r28, r24
    5d7a:	22 97       	sbiw	r28, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    5d7c:	1b 82       	std	Y+3, r1	; 0x03
    5d7e:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    5d80:	60 91 dc 03 	lds	r22, 0x03DC
    5d84:	70 91 dd 03 	lds	r23, 0x03DD
    5d88:	61 15       	cp	r22, r1
    5d8a:	71 05       	cpc	r23, r1
    5d8c:	81 f4       	brne	.+32     	; 0x5dae <free+0x42>
		if ((char *)p + fpnew->sz == __brkval)
    5d8e:	88 81       	ld	r24, Y
    5d90:	99 81       	ldd	r25, Y+1	; 0x01
    5d92:	82 0f       	add	r24, r18
    5d94:	93 1f       	adc	r25, r19
    5d96:	20 91 da 03 	lds	r18, 0x03DA
    5d9a:	30 91 db 03 	lds	r19, 0x03DB
    5d9e:	28 17       	cp	r18, r24
    5da0:	39 07       	cpc	r19, r25
    5da2:	39 f5       	brne	.+78     	; 0x5df2 <free+0x86>
			__brkval = cpnew;
    5da4:	d0 93 db 03 	sts	0x03DB, r29
    5da8:	c0 93 da 03 	sts	0x03DA, r28
    5dac:	74 c0       	rjmp	.+232    	; 0x5e96 <free+0x12a>
		else
			__flp = fpnew;
    5dae:	db 01       	movw	r26, r22
    5db0:	40 e0       	ldi	r20, 0x00	; 0
    5db2:	50 e0       	ldi	r21, 0x00	; 0
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    5db4:	ac 17       	cp	r26, r28
    5db6:	bd 07       	cpc	r27, r29
    5db8:	08 f1       	brcs	.+66     	; 0x5dfc <free+0x90>
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    5dba:	bb 83       	std	Y+3, r27	; 0x03
    5dbc:	aa 83       	std	Y+2, r26	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    5dbe:	fe 01       	movw	r30, r28
    5dc0:	21 91       	ld	r18, Z+
    5dc2:	31 91       	ld	r19, Z+
    5dc4:	e2 0f       	add	r30, r18
    5dc6:	f3 1f       	adc	r31, r19
    5dc8:	ae 17       	cp	r26, r30
    5dca:	bf 07       	cpc	r27, r31
    5dcc:	79 f4       	brne	.+30     	; 0x5dec <free+0x80>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    5dce:	8d 91       	ld	r24, X+
    5dd0:	9c 91       	ld	r25, X
    5dd2:	11 97       	sbiw	r26, 0x01	; 1
    5dd4:	28 0f       	add	r18, r24
    5dd6:	39 1f       	adc	r19, r25
    5dd8:	2e 5f       	subi	r18, 0xFE	; 254
    5dda:	3f 4f       	sbci	r19, 0xFF	; 255
    5ddc:	39 83       	std	Y+1, r19	; 0x01
    5dde:	28 83       	st	Y, r18
			fpnew->nx = fp1->nx;
    5de0:	12 96       	adiw	r26, 0x02	; 2
    5de2:	8d 91       	ld	r24, X+
    5de4:	9c 91       	ld	r25, X
    5de6:	13 97       	sbiw	r26, 0x03	; 3
    5de8:	9b 83       	std	Y+3, r25	; 0x03
    5dea:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (fp2 == 0) {
    5dec:	41 15       	cp	r20, r1
    5dee:	51 05       	cpc	r21, r1
    5df0:	71 f4       	brne	.+28     	; 0x5e0e <free+0xa2>
			/* new head of freelist */
			__flp = fpnew;
    5df2:	d0 93 dd 03 	sts	0x03DD, r29
    5df6:	c0 93 dc 03 	sts	0x03DC, r28
    5dfa:	4d c0       	rjmp	.+154    	; 0x5e96 <free+0x12a>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    5dfc:	12 96       	adiw	r26, 0x02	; 2
    5dfe:	8d 91       	ld	r24, X+
    5e00:	9c 91       	ld	r25, X
    5e02:	13 97       	sbiw	r26, 0x03	; 3
    5e04:	ad 01       	movw	r20, r26
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
    5e06:	00 97       	sbiw	r24, 0x00	; 0
    5e08:	11 f0       	breq	.+4      	; 0x5e0e <free+0xa2>
    5e0a:	dc 01       	movw	r26, r24
    5e0c:	d3 cf       	rjmp	.-90     	; 0x5db4 <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    5e0e:	da 01       	movw	r26, r20
    5e10:	13 96       	adiw	r26, 0x03	; 3
    5e12:	dc 93       	st	X, r29
    5e14:	ce 93       	st	-X, r28
    5e16:	12 97       	sbiw	r26, 0x02	; 2
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    5e18:	fa 01       	movw	r30, r20
    5e1a:	21 91       	ld	r18, Z+
    5e1c:	31 91       	ld	r19, Z+
    5e1e:	e2 0f       	add	r30, r18
    5e20:	f3 1f       	adc	r31, r19
    5e22:	ce 17       	cp	r28, r30
    5e24:	df 07       	cpc	r29, r31
    5e26:	69 f4       	brne	.+26     	; 0x5e42 <free+0xd6>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    5e28:	88 81       	ld	r24, Y
    5e2a:	99 81       	ldd	r25, Y+1	; 0x01
    5e2c:	28 0f       	add	r18, r24
    5e2e:	39 1f       	adc	r19, r25
    5e30:	2e 5f       	subi	r18, 0xFE	; 254
    5e32:	3f 4f       	sbci	r19, 0xFF	; 255
    5e34:	fa 01       	movw	r30, r20
    5e36:	31 83       	std	Z+1, r19	; 0x01
    5e38:	20 83       	st	Z, r18
		fp2->nx = fpnew->nx;
    5e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    5e3c:	9b 81       	ldd	r25, Y+3	; 0x03
    5e3e:	93 83       	std	Z+3, r25	; 0x03
    5e40:	82 83       	std	Z+2, r24	; 0x02
    5e42:	e0 e0       	ldi	r30, 0x00	; 0
    5e44:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1->nx != 0;
    5e46:	db 01       	movw	r26, r22
    5e48:	12 96       	adiw	r26, 0x02	; 2
    5e4a:	8d 91       	ld	r24, X+
    5e4c:	9c 91       	ld	r25, X
    5e4e:	13 97       	sbiw	r26, 0x03	; 3
    5e50:	00 97       	sbiw	r24, 0x00	; 0
    5e52:	19 f0       	breq	.+6      	; 0x5e5a <free+0xee>
    5e54:	bc 01       	movw	r22, r24
    5e56:	fd 01       	movw	r30, r26
    5e58:	f6 cf       	rjmp	.-20     	; 0x5e46 <free+0xda>
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
    5e5a:	ab 01       	movw	r20, r22
    5e5c:	4e 5f       	subi	r20, 0xFE	; 254
    5e5e:	5f 4f       	sbci	r21, 0xFF	; 255
	if (cp2 + fp1->sz == __brkval) {
    5e60:	db 01       	movw	r26, r22
    5e62:	8d 91       	ld	r24, X+
    5e64:	9c 91       	ld	r25, X
    5e66:	84 0f       	add	r24, r20
    5e68:	95 1f       	adc	r25, r21
    5e6a:	20 91 da 03 	lds	r18, 0x03DA
    5e6e:	30 91 db 03 	lds	r19, 0x03DB
    5e72:	28 17       	cp	r18, r24
    5e74:	39 07       	cpc	r19, r25
    5e76:	79 f4       	brne	.+30     	; 0x5e96 <free+0x12a>
		if (fp2 == NULL)
    5e78:	30 97       	sbiw	r30, 0x00	; 0
    5e7a:	29 f4       	brne	.+10     	; 0x5e86 <free+0x11a>
			/* Freelist is empty now. */
			__flp = NULL;
    5e7c:	10 92 dd 03 	sts	0x03DD, r1
    5e80:	10 92 dc 03 	sts	0x03DC, r1
    5e84:	02 c0       	rjmp	.+4      	; 0x5e8a <free+0x11e>
		else
			fp2->nx = NULL;
    5e86:	13 82       	std	Z+3, r1	; 0x03
    5e88:	12 82       	std	Z+2, r1	; 0x02
		__brkval = cp2 - sizeof(size_t);
    5e8a:	42 50       	subi	r20, 0x02	; 2
    5e8c:	50 40       	sbci	r21, 0x00	; 0
    5e8e:	50 93 db 03 	sts	0x03DB, r21
    5e92:	40 93 da 03 	sts	0x03DA, r20
	}
}
    5e96:	df 91       	pop	r29
    5e98:	cf 91       	pop	r28
    5e9a:	08 95       	ret

00005e9c <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    5e9c:	1f 92       	push	r1
    5e9e:	0f 92       	push	r0
    5ea0:	0f b6       	in	r0, 0x3f	; 63
    5ea2:	0f 92       	push	r0
    5ea4:	11 24       	eor	r1, r1
    5ea6:	2f 93       	push	r18
    5ea8:	3f 93       	push	r19
    5eaa:	8f 93       	push	r24
    5eac:	9f 93       	push	r25
    5eae:	af 93       	push	r26
    5eb0:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    5eb2:	80 91 2a 03 	lds	r24, 0x032A
    5eb6:	90 91 2b 03 	lds	r25, 0x032B
    5eba:	a0 91 2c 03 	lds	r26, 0x032C
    5ebe:	b0 91 2d 03 	lds	r27, 0x032D
	unsigned char f = timer0_fract;
    5ec2:	30 91 2e 03 	lds	r19, 0x032E

	m += MILLIS_INC;
    5ec6:	01 96       	adiw	r24, 0x01	; 1
    5ec8:	a1 1d       	adc	r26, r1
    5eca:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    5ecc:	23 2f       	mov	r18, r19
    5ece:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    5ed0:	2d 37       	cpi	r18, 0x7D	; 125
    5ed2:	20 f0       	brcs	.+8      	; 0x5edc <__vector_16+0x40>
		f -= FRACT_MAX;
    5ed4:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    5ed6:	01 96       	adiw	r24, 0x01	; 1
    5ed8:	a1 1d       	adc	r26, r1
    5eda:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    5edc:	20 93 2e 03 	sts	0x032E, r18
	timer0_millis = m;
    5ee0:	80 93 2a 03 	sts	0x032A, r24
    5ee4:	90 93 2b 03 	sts	0x032B, r25
    5ee8:	a0 93 2c 03 	sts	0x032C, r26
    5eec:	b0 93 2d 03 	sts	0x032D, r27
	timer0_overflow_count++;
    5ef0:	80 91 26 03 	lds	r24, 0x0326
    5ef4:	90 91 27 03 	lds	r25, 0x0327
    5ef8:	a0 91 28 03 	lds	r26, 0x0328
    5efc:	b0 91 29 03 	lds	r27, 0x0329
    5f00:	01 96       	adiw	r24, 0x01	; 1
    5f02:	a1 1d       	adc	r26, r1
    5f04:	b1 1d       	adc	r27, r1
    5f06:	80 93 26 03 	sts	0x0326, r24
    5f0a:	90 93 27 03 	sts	0x0327, r25
    5f0e:	a0 93 28 03 	sts	0x0328, r26
    5f12:	b0 93 29 03 	sts	0x0329, r27
}
    5f16:	bf 91       	pop	r27
    5f18:	af 91       	pop	r26
    5f1a:	9f 91       	pop	r25
    5f1c:	8f 91       	pop	r24
    5f1e:	3f 91       	pop	r19
    5f20:	2f 91       	pop	r18
    5f22:	0f 90       	pop	r0
    5f24:	0f be       	out	0x3f, r0	; 63
    5f26:	0f 90       	pop	r0
    5f28:	1f 90       	pop	r1
    5f2a:	18 95       	reti

00005f2c <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    5f2c:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    5f2e:	f8 94       	cli
	m = timer0_millis;
    5f30:	20 91 2a 03 	lds	r18, 0x032A
    5f34:	30 91 2b 03 	lds	r19, 0x032B
    5f38:	40 91 2c 03 	lds	r20, 0x032C
    5f3c:	50 91 2d 03 	lds	r21, 0x032D
	SREG = oldSREG;
    5f40:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    5f42:	b9 01       	movw	r22, r18
    5f44:	ca 01       	movw	r24, r20
    5f46:	08 95       	ret

00005f48 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    5f48:	9b 01       	movw	r18, r22
    5f4a:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    5f4c:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    5f4e:	f8 94       	cli
	m = timer0_overflow_count;
    5f50:	80 91 26 03 	lds	r24, 0x0326
    5f54:	90 91 27 03 	lds	r25, 0x0327
    5f58:	a0 91 28 03 	lds	r26, 0x0328
    5f5c:	b0 91 29 03 	lds	r27, 0x0329
#if defined(TCNT0)
	t = TCNT0;
    5f60:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    5f62:	a8 9b       	sbis	0x15, 0	; 21
    5f64:	05 c0       	rjmp	.+10     	; 0x5f70 <delay+0x28>
    5f66:	6f 3f       	cpi	r22, 0xFF	; 255
    5f68:	19 f0       	breq	.+6      	; 0x5f70 <delay+0x28>
		m++;
    5f6a:	01 96       	adiw	r24, 0x01	; 1
    5f6c:	a1 1d       	adc	r26, r1
    5f6e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    5f70:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    5f72:	ba 2f       	mov	r27, r26
    5f74:	a9 2f       	mov	r26, r25
    5f76:	98 2f       	mov	r25, r24
    5f78:	88 27       	eor	r24, r24
    5f7a:	86 0f       	add	r24, r22
    5f7c:	91 1d       	adc	r25, r1
    5f7e:	a1 1d       	adc	r26, r1
    5f80:	b1 1d       	adc	r27, r1
    5f82:	62 e0       	ldi	r22, 0x02	; 2
    5f84:	88 0f       	add	r24, r24
    5f86:	99 1f       	adc	r25, r25
    5f88:	aa 1f       	adc	r26, r26
    5f8a:	bb 1f       	adc	r27, r27
    5f8c:	6a 95       	dec	r22
    5f8e:	d1 f7       	brne	.-12     	; 0x5f84 <delay+0x3c>
    5f90:	bc 01       	movw	r22, r24
    5f92:	2d c0       	rjmp	.+90     	; 0x5fee <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    5f94:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    5f96:	f8 94       	cli
	m = timer0_overflow_count;
    5f98:	80 91 26 03 	lds	r24, 0x0326
    5f9c:	90 91 27 03 	lds	r25, 0x0327
    5fa0:	a0 91 28 03 	lds	r26, 0x0328
    5fa4:	b0 91 29 03 	lds	r27, 0x0329
#if defined(TCNT0)
	t = TCNT0;
    5fa8:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    5faa:	a8 9b       	sbis	0x15, 0	; 21
    5fac:	05 c0       	rjmp	.+10     	; 0x5fb8 <delay+0x70>
    5fae:	ef 3f       	cpi	r30, 0xFF	; 255
    5fb0:	19 f0       	breq	.+6      	; 0x5fb8 <delay+0x70>
		m++;
    5fb2:	01 96       	adiw	r24, 0x01	; 1
    5fb4:	a1 1d       	adc	r26, r1
    5fb6:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    5fb8:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    5fba:	ba 2f       	mov	r27, r26
    5fbc:	a9 2f       	mov	r26, r25
    5fbe:	98 2f       	mov	r25, r24
    5fc0:	88 27       	eor	r24, r24
    5fc2:	8e 0f       	add	r24, r30
    5fc4:	91 1d       	adc	r25, r1
    5fc6:	a1 1d       	adc	r26, r1
    5fc8:	b1 1d       	adc	r27, r1
    5fca:	e2 e0       	ldi	r30, 0x02	; 2
    5fcc:	88 0f       	add	r24, r24
    5fce:	99 1f       	adc	r25, r25
    5fd0:	aa 1f       	adc	r26, r26
    5fd2:	bb 1f       	adc	r27, r27
    5fd4:	ea 95       	dec	r30
    5fd6:	d1 f7       	brne	.-12     	; 0x5fcc <delay+0x84>
    5fd8:	86 1b       	sub	r24, r22
    5fda:	97 0b       	sbc	r25, r23
    5fdc:	88 5e       	subi	r24, 0xE8	; 232
    5fde:	93 40       	sbci	r25, 0x03	; 3
    5fe0:	c8 f2       	brcs	.-78     	; 0x5f94 <delay+0x4c>
			ms--;
    5fe2:	21 50       	subi	r18, 0x01	; 1
    5fe4:	30 40       	sbci	r19, 0x00	; 0
    5fe6:	40 40       	sbci	r20, 0x00	; 0
    5fe8:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    5fea:	68 51       	subi	r22, 0x18	; 24
    5fec:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    5fee:	21 15       	cp	r18, r1
    5ff0:	31 05       	cpc	r19, r1
    5ff2:	41 05       	cpc	r20, r1
    5ff4:	51 05       	cpc	r21, r1
    5ff6:	71 f6       	brne	.-100    	; 0x5f94 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    5ff8:	08 95       	ret

00005ffa <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    5ffa:	01 97       	sbiw	r24, 0x01	; 1
    5ffc:	39 f0       	breq	.+14     	; 0x600c <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    5ffe:	88 0f       	add	r24, r24
    6000:	99 1f       	adc	r25, r25
    6002:	88 0f       	add	r24, r24
    6004:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    6006:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    6008:	01 97       	sbiw	r24, 0x01	; 1
    600a:	f1 f7       	brne	.-4      	; 0x6008 <delayMicroseconds+0xe>
    600c:	08 95       	ret

0000600e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    600e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    6010:	84 b5       	in	r24, 0x24	; 36
    6012:	82 60       	ori	r24, 0x02	; 2
    6014:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    6016:	84 b5       	in	r24, 0x24	; 36
    6018:	81 60       	ori	r24, 0x01	; 1
    601a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    601c:	85 b5       	in	r24, 0x25	; 37
    601e:	82 60       	ori	r24, 0x02	; 2
    6020:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    6022:	85 b5       	in	r24, 0x25	; 37
    6024:	81 60       	ori	r24, 0x01	; 1
    6026:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    6028:	ee e6       	ldi	r30, 0x6E	; 110
    602a:	f0 e0       	ldi	r31, 0x00	; 0
    602c:	80 81       	ld	r24, Z
    602e:	81 60       	ori	r24, 0x01	; 1
    6030:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    6032:	e1 e8       	ldi	r30, 0x81	; 129
    6034:	f0 e0       	ldi	r31, 0x00	; 0
    6036:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    6038:	80 81       	ld	r24, Z
    603a:	82 60       	ori	r24, 0x02	; 2
    603c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    603e:	80 81       	ld	r24, Z
    6040:	81 60       	ori	r24, 0x01	; 1
    6042:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    6044:	e0 e8       	ldi	r30, 0x80	; 128
    6046:	f0 e0       	ldi	r31, 0x00	; 0
    6048:	80 81       	ld	r24, Z
    604a:	81 60       	ori	r24, 0x01	; 1
    604c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    604e:	e1 eb       	ldi	r30, 0xB1	; 177
    6050:	f0 e0       	ldi	r31, 0x00	; 0
    6052:	80 81       	ld	r24, Z
    6054:	84 60       	ori	r24, 0x04	; 4
    6056:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    6058:	e0 eb       	ldi	r30, 0xB0	; 176
    605a:	f0 e0       	ldi	r31, 0x00	; 0
    605c:	80 81       	ld	r24, Z
    605e:	81 60       	ori	r24, 0x01	; 1
    6060:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    6062:	ea e7       	ldi	r30, 0x7A	; 122
    6064:	f0 e0       	ldi	r31, 0x00	; 0
    6066:	80 81       	ld	r24, Z
    6068:	84 60       	ori	r24, 0x04	; 4
    606a:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    606c:	80 81       	ld	r24, Z
    606e:	82 60       	ori	r24, 0x02	; 2
    6070:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    6072:	80 81       	ld	r24, Z
    6074:	81 60       	ori	r24, 0x01	; 1
    6076:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    6078:	80 81       	ld	r24, Z
    607a:	80 68       	ori	r24, 0x80	; 128
    607c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    607e:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    6082:	08 95       	ret

00006084 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    6084:	cf 93       	push	r28
    6086:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    6088:	48 2f       	mov	r20, r24
    608a:	50 e0       	ldi	r21, 0x00	; 0
    608c:	ca 01       	movw	r24, r20
    608e:	83 57       	subi	r24, 0x73	; 115
    6090:	96 4f       	sbci	r25, 0xF6	; 246
    6092:	fc 01       	movw	r30, r24
    6094:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    6096:	47 58       	subi	r20, 0x87	; 135
    6098:	56 4f       	sbci	r21, 0xF6	; 246
    609a:	fa 01       	movw	r30, r20
    609c:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    609e:	88 23       	and	r24, r24
    60a0:	69 f1       	breq	.+90     	; 0x60fc <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    60a2:	90 e0       	ldi	r25, 0x00	; 0
    60a4:	88 0f       	add	r24, r24
    60a6:	99 1f       	adc	r25, r25
    60a8:	fc 01       	movw	r30, r24
    60aa:	e5 5a       	subi	r30, 0xA5	; 165
    60ac:	f6 4f       	sbci	r31, 0xF6	; 246
    60ae:	a5 91       	lpm	r26, Z+
    60b0:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    60b2:	fc 01       	movw	r30, r24
    60b4:	eb 59       	subi	r30, 0x9B	; 155
    60b6:	f6 4f       	sbci	r31, 0xF6	; 246
    60b8:	c5 91       	lpm	r28, Z+
    60ba:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    60bc:	66 23       	and	r22, r22
    60be:	51 f4       	brne	.+20     	; 0x60d4 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    60c0:	2f b7       	in	r18, 0x3f	; 63
                cli();
    60c2:	f8 94       	cli
		*reg &= ~bit;
    60c4:	8c 91       	ld	r24, X
    60c6:	93 2f       	mov	r25, r19
    60c8:	90 95       	com	r25
    60ca:	89 23       	and	r24, r25
    60cc:	8c 93       	st	X, r24
		*out &= ~bit;
    60ce:	88 81       	ld	r24, Y
    60d0:	89 23       	and	r24, r25
    60d2:	0b c0       	rjmp	.+22     	; 0x60ea <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    60d4:	62 30       	cpi	r22, 0x02	; 2
    60d6:	61 f4       	brne	.+24     	; 0x60f0 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    60d8:	2f b7       	in	r18, 0x3f	; 63
                cli();
    60da:	f8 94       	cli
		*reg &= ~bit;
    60dc:	8c 91       	ld	r24, X
    60de:	93 2f       	mov	r25, r19
    60e0:	90 95       	com	r25
    60e2:	89 23       	and	r24, r25
    60e4:	8c 93       	st	X, r24
		*out |= bit;
    60e6:	88 81       	ld	r24, Y
    60e8:	83 2b       	or	r24, r19
    60ea:	88 83       	st	Y, r24
		SREG = oldSREG;
    60ec:	2f bf       	out	0x3f, r18	; 63
    60ee:	06 c0       	rjmp	.+12     	; 0x60fc <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    60f0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    60f2:	f8 94       	cli
		*reg |= bit;
    60f4:	8c 91       	ld	r24, X
    60f6:	83 2b       	or	r24, r19
    60f8:	8c 93       	st	X, r24
		SREG = oldSREG;
    60fa:	9f bf       	out	0x3f, r25	; 63
	}
}
    60fc:	df 91       	pop	r29
    60fe:	cf 91       	pop	r28
    6100:	08 95       	ret

00006102 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    6102:	48 2f       	mov	r20, r24
    6104:	50 e0       	ldi	r21, 0x00	; 0
    6106:	ca 01       	movw	r24, r20
    6108:	8f 55       	subi	r24, 0x5F	; 95
    610a:	96 4f       	sbci	r25, 0xF6	; 246
    610c:	fc 01       	movw	r30, r24
    610e:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    6110:	ca 01       	movw	r24, r20
    6112:	83 57       	subi	r24, 0x73	; 115
    6114:	96 4f       	sbci	r25, 0xF6	; 246
    6116:	fc 01       	movw	r30, r24
    6118:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    611a:	47 58       	subi	r20, 0x87	; 135
    611c:	56 4f       	sbci	r21, 0xF6	; 246
    611e:	fa 01       	movw	r30, r20
    6120:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    6122:	33 23       	and	r19, r19
    6124:	09 f4       	brne	.+2      	; 0x6128 <digitalWrite+0x26>
    6126:	40 c0       	rjmp	.+128    	; 0x61a8 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6128:	22 23       	and	r18, r18
    612a:	51 f1       	breq	.+84     	; 0x6180 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    612c:	23 30       	cpi	r18, 0x03	; 3
    612e:	71 f0       	breq	.+28     	; 0x614c <digitalWrite+0x4a>
    6130:	24 30       	cpi	r18, 0x04	; 4
    6132:	28 f4       	brcc	.+10     	; 0x613e <digitalWrite+0x3c>
    6134:	21 30       	cpi	r18, 0x01	; 1
    6136:	a1 f0       	breq	.+40     	; 0x6160 <digitalWrite+0x5e>
    6138:	22 30       	cpi	r18, 0x02	; 2
    613a:	11 f5       	brne	.+68     	; 0x6180 <digitalWrite+0x7e>
    613c:	14 c0       	rjmp	.+40     	; 0x6166 <digitalWrite+0x64>
    613e:	26 30       	cpi	r18, 0x06	; 6
    6140:	b1 f0       	breq	.+44     	; 0x616e <digitalWrite+0x6c>
    6142:	27 30       	cpi	r18, 0x07	; 7
    6144:	c1 f0       	breq	.+48     	; 0x6176 <digitalWrite+0x74>
    6146:	24 30       	cpi	r18, 0x04	; 4
    6148:	d9 f4       	brne	.+54     	; 0x6180 <digitalWrite+0x7e>
    614a:	04 c0       	rjmp	.+8      	; 0x6154 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    614c:	80 91 80 00 	lds	r24, 0x0080
    6150:	8f 77       	andi	r24, 0x7F	; 127
    6152:	03 c0       	rjmp	.+6      	; 0x615a <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    6154:	80 91 80 00 	lds	r24, 0x0080
    6158:	8f 7d       	andi	r24, 0xDF	; 223
    615a:	80 93 80 00 	sts	0x0080, r24
    615e:	10 c0       	rjmp	.+32     	; 0x6180 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    6160:	84 b5       	in	r24, 0x24	; 36
    6162:	8f 77       	andi	r24, 0x7F	; 127
    6164:	02 c0       	rjmp	.+4      	; 0x616a <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    6166:	84 b5       	in	r24, 0x24	; 36
    6168:	8f 7d       	andi	r24, 0xDF	; 223
    616a:	84 bd       	out	0x24, r24	; 36
    616c:	09 c0       	rjmp	.+18     	; 0x6180 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    616e:	80 91 b0 00 	lds	r24, 0x00B0
    6172:	8f 77       	andi	r24, 0x7F	; 127
    6174:	03 c0       	rjmp	.+6      	; 0x617c <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    6176:	80 91 b0 00 	lds	r24, 0x00B0
    617a:	8f 7d       	andi	r24, 0xDF	; 223
    617c:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    6180:	e3 2f       	mov	r30, r19
    6182:	f0 e0       	ldi	r31, 0x00	; 0
    6184:	ee 0f       	add	r30, r30
    6186:	ff 1f       	adc	r31, r31
    6188:	eb 59       	subi	r30, 0x9B	; 155
    618a:	f6 4f       	sbci	r31, 0xF6	; 246
    618c:	a5 91       	lpm	r26, Z+
    618e:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    6190:	2f b7       	in	r18, 0x3f	; 63
	cli();
    6192:	f8 94       	cli

	if (val == LOW) {
    6194:	66 23       	and	r22, r22
    6196:	21 f4       	brne	.+8      	; 0x61a0 <digitalWrite+0x9e>
		*out &= ~bit;
    6198:	8c 91       	ld	r24, X
    619a:	90 95       	com	r25
    619c:	89 23       	and	r24, r25
    619e:	02 c0       	rjmp	.+4      	; 0x61a4 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    61a0:	8c 91       	ld	r24, X
    61a2:	89 2b       	or	r24, r25
    61a4:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    61a6:	2f bf       	out	0x3f, r18	; 63
    61a8:	08 95       	ret

000061aa <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    61aa:	68 2f       	mov	r22, r24
    61ac:	70 e0       	ldi	r23, 0x00	; 0
    61ae:	cb 01       	movw	r24, r22
    61b0:	8f 55       	subi	r24, 0x5F	; 95
    61b2:	96 4f       	sbci	r25, 0xF6	; 246
    61b4:	fc 01       	movw	r30, r24
    61b6:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    61b8:	cb 01       	movw	r24, r22
    61ba:	83 57       	subi	r24, 0x73	; 115
    61bc:	96 4f       	sbci	r25, 0xF6	; 246
    61be:	fc 01       	movw	r30, r24
    61c0:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    61c2:	67 58       	subi	r22, 0x87	; 135
    61c4:	76 4f       	sbci	r23, 0xF6	; 246
    61c6:	fb 01       	movw	r30, r22
    61c8:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
    61ca:	99 23       	and	r25, r25
    61cc:	19 f4       	brne	.+6      	; 0x61d4 <digitalRead+0x2a>
    61ce:	20 e0       	ldi	r18, 0x00	; 0
    61d0:	30 e0       	ldi	r19, 0x00	; 0
    61d2:	3c c0       	rjmp	.+120    	; 0x624c <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    61d4:	22 23       	and	r18, r18
    61d6:	51 f1       	breq	.+84     	; 0x622c <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    61d8:	23 30       	cpi	r18, 0x03	; 3
    61da:	71 f0       	breq	.+28     	; 0x61f8 <digitalRead+0x4e>
    61dc:	24 30       	cpi	r18, 0x04	; 4
    61de:	28 f4       	brcc	.+10     	; 0x61ea <digitalRead+0x40>
    61e0:	21 30       	cpi	r18, 0x01	; 1
    61e2:	a1 f0       	breq	.+40     	; 0x620c <digitalRead+0x62>
    61e4:	22 30       	cpi	r18, 0x02	; 2
    61e6:	11 f5       	brne	.+68     	; 0x622c <digitalRead+0x82>
    61e8:	14 c0       	rjmp	.+40     	; 0x6212 <digitalRead+0x68>
    61ea:	26 30       	cpi	r18, 0x06	; 6
    61ec:	b1 f0       	breq	.+44     	; 0x621a <digitalRead+0x70>
    61ee:	27 30       	cpi	r18, 0x07	; 7
    61f0:	c1 f0       	breq	.+48     	; 0x6222 <digitalRead+0x78>
    61f2:	24 30       	cpi	r18, 0x04	; 4
    61f4:	d9 f4       	brne	.+54     	; 0x622c <digitalRead+0x82>
    61f6:	04 c0       	rjmp	.+8      	; 0x6200 <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    61f8:	80 91 80 00 	lds	r24, 0x0080
    61fc:	8f 77       	andi	r24, 0x7F	; 127
    61fe:	03 c0       	rjmp	.+6      	; 0x6206 <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    6200:	80 91 80 00 	lds	r24, 0x0080
    6204:	8f 7d       	andi	r24, 0xDF	; 223
    6206:	80 93 80 00 	sts	0x0080, r24
    620a:	10 c0       	rjmp	.+32     	; 0x622c <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    620c:	84 b5       	in	r24, 0x24	; 36
    620e:	8f 77       	andi	r24, 0x7F	; 127
    6210:	02 c0       	rjmp	.+4      	; 0x6216 <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    6212:	84 b5       	in	r24, 0x24	; 36
    6214:	8f 7d       	andi	r24, 0xDF	; 223
    6216:	84 bd       	out	0x24, r24	; 36
    6218:	09 c0       	rjmp	.+18     	; 0x622c <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    621a:	80 91 b0 00 	lds	r24, 0x00B0
    621e:	8f 77       	andi	r24, 0x7F	; 127
    6220:	03 c0       	rjmp	.+6      	; 0x6228 <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    6222:	80 91 b0 00 	lds	r24, 0x00B0
    6226:	8f 7d       	andi	r24, 0xDF	; 223
    6228:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    622c:	89 2f       	mov	r24, r25
    622e:	90 e0       	ldi	r25, 0x00	; 0
    6230:	88 0f       	add	r24, r24
    6232:	99 1f       	adc	r25, r25
    6234:	81 59       	subi	r24, 0x91	; 145
    6236:	96 4f       	sbci	r25, 0xF6	; 246
    6238:	fc 01       	movw	r30, r24
    623a:	a5 91       	lpm	r26, Z+
    623c:	b4 91       	lpm	r27, Z+
    623e:	8c 91       	ld	r24, X
    6240:	20 e0       	ldi	r18, 0x00	; 0
    6242:	30 e0       	ldi	r19, 0x00	; 0
    6244:	84 23       	and	r24, r20
    6246:	11 f0       	breq	.+4      	; 0x624c <digitalRead+0xa2>
    6248:	21 e0       	ldi	r18, 0x01	; 1
    624a:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    624c:	c9 01       	movw	r24, r18
    624e:	08 95       	ret

00006250 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
    6250:	1f 92       	push	r1
    6252:	0f 92       	push	r0
    6254:	0f b6       	in	r0, 0x3f	; 63
    6256:	0f 92       	push	r0
    6258:	11 24       	eor	r1, r1
    625a:	2f 93       	push	r18
    625c:	3f 93       	push	r19
    625e:	4f 93       	push	r20
    6260:	8f 93       	push	r24
    6262:	9f 93       	push	r25
    6264:	ef 93       	push	r30
    6266:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    6268:	80 91 c0 00 	lds	r24, 0x00C0
    626c:	82 fd       	sbrc	r24, 2
    626e:	1d c0       	rjmp	.+58     	; 0x62aa <__vector_18+0x5a>
      unsigned char c = UDR0;
    6270:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    6274:	20 91 6f 03 	lds	r18, 0x036F
    6278:	30 91 70 03 	lds	r19, 0x0370

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    627c:	2f 5f       	subi	r18, 0xFF	; 255
    627e:	3f 4f       	sbci	r19, 0xFF	; 255
    6280:	2f 73       	andi	r18, 0x3F	; 63
    6282:	30 70       	andi	r19, 0x00	; 0
    6284:	80 91 71 03 	lds	r24, 0x0371
    6288:	90 91 72 03 	lds	r25, 0x0372
    628c:	28 17       	cp	r18, r24
    628e:	39 07       	cpc	r19, r25
    6290:	71 f0       	breq	.+28     	; 0x62ae <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    6292:	e0 91 6f 03 	lds	r30, 0x036F
    6296:	f0 91 70 03 	lds	r31, 0x0370
    629a:	e1 5d       	subi	r30, 0xD1	; 209
    629c:	fc 4f       	sbci	r31, 0xFC	; 252
    629e:	40 83       	st	Z, r20
    buffer->head = i;
    62a0:	30 93 70 03 	sts	0x0370, r19
    62a4:	20 93 6f 03 	sts	0x036F, r18
    62a8:	02 c0       	rjmp	.+4      	; 0x62ae <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    62aa:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    62ae:	ff 91       	pop	r31
    62b0:	ef 91       	pop	r30
    62b2:	9f 91       	pop	r25
    62b4:	8f 91       	pop	r24
    62b6:	4f 91       	pop	r20
    62b8:	3f 91       	pop	r19
    62ba:	2f 91       	pop	r18
    62bc:	0f 90       	pop	r0
    62be:	0f be       	out	0x3f, r0	; 63
    62c0:	0f 90       	pop	r0
    62c2:	1f 90       	pop	r1
    62c4:	18 95       	reti

000062c6 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    62c6:	e0 91 c3 03 	lds	r30, 0x03C3
    62ca:	f0 91 c4 03 	lds	r31, 0x03C4
    62ce:	e0 5c       	subi	r30, 0xC0	; 192
    62d0:	ff 4f       	sbci	r31, 0xFF	; 255
    62d2:	81 91       	ld	r24, Z+
    62d4:	91 91       	ld	r25, Z+
    62d6:	20 81       	ld	r18, Z
    62d8:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    62da:	82 1b       	sub	r24, r18
    62dc:	93 0b       	sbc	r25, r19
    62de:	8f 73       	andi	r24, 0x3F	; 63
    62e0:	90 70       	andi	r25, 0x00	; 0
    62e2:	89 2b       	or	r24, r25
    62e4:	11 f0       	breq	.+4      	; 0x62ea <_Z14serialEventRunv+0x24>
    62e6:	0e 94 1f 1c 	call	0x383e	; 0x383e <_Z11serialEventv>
    62ea:	08 95       	ret

000062ec <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    62ec:	1f 92       	push	r1
    62ee:	0f 92       	push	r0
    62f0:	0f b6       	in	r0, 0x3f	; 63
    62f2:	0f 92       	push	r0
    62f4:	11 24       	eor	r1, r1
    62f6:	2f 93       	push	r18
    62f8:	3f 93       	push	r19
    62fa:	8f 93       	push	r24
    62fc:	9f 93       	push	r25
    62fe:	ef 93       	push	r30
    6300:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    6302:	20 91 b3 03 	lds	r18, 0x03B3
    6306:	30 91 b4 03 	lds	r19, 0x03B4
    630a:	80 91 b5 03 	lds	r24, 0x03B5
    630e:	90 91 b6 03 	lds	r25, 0x03B6
    6312:	28 17       	cp	r18, r24
    6314:	39 07       	cpc	r19, r25
    6316:	31 f4       	brne	.+12     	; 0x6324 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    6318:	80 91 c1 00 	lds	r24, 0x00C1
    631c:	8f 7d       	andi	r24, 0xDF	; 223
    631e:	80 93 c1 00 	sts	0x00C1, r24
    6322:	14 c0       	rjmp	.+40     	; 0x634c <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    6324:	e0 91 b5 03 	lds	r30, 0x03B5
    6328:	f0 91 b6 03 	lds	r31, 0x03B6
    632c:	ed 58       	subi	r30, 0x8D	; 141
    632e:	fc 4f       	sbci	r31, 0xFC	; 252
    6330:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    6332:	80 91 b5 03 	lds	r24, 0x03B5
    6336:	90 91 b6 03 	lds	r25, 0x03B6
    633a:	01 96       	adiw	r24, 0x01	; 1
    633c:	8f 73       	andi	r24, 0x3F	; 63
    633e:	90 70       	andi	r25, 0x00	; 0
    6340:	90 93 b6 03 	sts	0x03B6, r25
    6344:	80 93 b5 03 	sts	0x03B5, r24
	
  #if defined(UDR0)
    UDR0 = c;
    6348:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    634c:	ff 91       	pop	r31
    634e:	ef 91       	pop	r30
    6350:	9f 91       	pop	r25
    6352:	8f 91       	pop	r24
    6354:	3f 91       	pop	r19
    6356:	2f 91       	pop	r18
    6358:	0f 90       	pop	r0
    635a:	0f be       	out	0x3f, r0	; 63
    635c:	0f 90       	pop	r0
    635e:	1f 90       	pop	r1
    6360:	18 95       	reti

00006362 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    6362:	af 92       	push	r10
    6364:	bf 92       	push	r11
    6366:	df 92       	push	r13
    6368:	ef 92       	push	r14
    636a:	ff 92       	push	r15
    636c:	0f 93       	push	r16
    636e:	1f 93       	push	r17
    6370:	cf 93       	push	r28
    6372:	df 93       	push	r29
    6374:	ec 01       	movw	r28, r24
    6376:	7a 01       	movw	r14, r20
    6378:	8b 01       	movw	r16, r22
    637a:	dd 24       	eor	r13, r13
    637c:	40 30       	cpi	r20, 0x00	; 0
    637e:	81 ee       	ldi	r24, 0xE1	; 225
    6380:	58 07       	cpc	r21, r24
    6382:	80 e0       	ldi	r24, 0x00	; 0
    6384:	68 07       	cpc	r22, r24
    6386:	80 e0       	ldi	r24, 0x00	; 0
    6388:	78 07       	cpc	r23, r24
    638a:	11 f0       	breq	.+4      	; 0x6390 <_ZN14HardwareSerial5beginEm+0x2e>
    638c:	dd 24       	eor	r13, r13
    638e:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    6390:	91 e0       	ldi	r25, 0x01	; 1
    6392:	a9 2e       	mov	r10, r25
    6394:	b1 2c       	mov	r11, r1
    6396:	ec 89       	ldd	r30, Y+20	; 0x14
    6398:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    639a:	dd 20       	and	r13, r13
    639c:	69 f0       	breq	.+26     	; 0x63b8 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    639e:	c5 01       	movw	r24, r10
    63a0:	08 a0       	ldd	r0, Y+32	; 0x20
    63a2:	02 c0       	rjmp	.+4      	; 0x63a8 <_ZN14HardwareSerial5beginEm+0x46>
    63a4:	88 0f       	add	r24, r24
    63a6:	99 1f       	adc	r25, r25
    63a8:	0a 94       	dec	r0
    63aa:	e2 f7       	brpl	.-8      	; 0x63a4 <_ZN14HardwareSerial5beginEm+0x42>
    63ac:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    63ae:	60 e0       	ldi	r22, 0x00	; 0
    63b0:	79 e0       	ldi	r23, 0x09	; 9
    63b2:	8d e3       	ldi	r24, 0x3D	; 61
    63b4:	90 e0       	ldi	r25, 0x00	; 0
    63b6:	05 c0       	rjmp	.+10     	; 0x63c2 <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    63b8:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    63ba:	60 e8       	ldi	r22, 0x80	; 128
    63bc:	74 e8       	ldi	r23, 0x84	; 132
    63be:	8e e1       	ldi	r24, 0x1E	; 30
    63c0:	90 e0       	ldi	r25, 0x00	; 0
    63c2:	a8 01       	movw	r20, r16
    63c4:	97 01       	movw	r18, r14
    63c6:	0e 94 22 3c 	call	0x7844	; 0x7844 <__udivmodsi4>
    63ca:	21 50       	subi	r18, 0x01	; 1
    63cc:	30 40       	sbci	r19, 0x00	; 0
    63ce:	40 40       	sbci	r20, 0x00	; 0
    63d0:	50 40       	sbci	r21, 0x00	; 0
    63d2:	56 95       	lsr	r21
    63d4:	47 95       	ror	r20
    63d6:	37 95       	ror	r19
    63d8:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    63da:	80 e1       	ldi	r24, 0x10	; 16
    63dc:	20 30       	cpi	r18, 0x00	; 0
    63de:	38 07       	cpc	r19, r24
    63e0:	20 f0       	brcs	.+8      	; 0x63ea <_ZN14HardwareSerial5beginEm+0x88>
    63e2:	dd 20       	and	r13, r13
    63e4:	11 f0       	breq	.+4      	; 0x63ea <_ZN14HardwareSerial5beginEm+0x88>
    63e6:	dd 24       	eor	r13, r13
    63e8:	d6 cf       	rjmp	.-84     	; 0x6396 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    63ea:	e8 89       	ldd	r30, Y+16	; 0x10
    63ec:	f9 89       	ldd	r31, Y+17	; 0x11
    63ee:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    63f0:	ea 89       	ldd	r30, Y+18	; 0x12
    63f2:	fb 89       	ldd	r31, Y+19	; 0x13
    63f4:	20 83       	st	Z, r18

  transmitting = false;
    63f6:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    63f8:	ee 89       	ldd	r30, Y+22	; 0x16
    63fa:	ff 89       	ldd	r31, Y+23	; 0x17
    63fc:	40 81       	ld	r20, Z
    63fe:	21 e0       	ldi	r18, 0x01	; 1
    6400:	30 e0       	ldi	r19, 0x00	; 0
    6402:	c9 01       	movw	r24, r18
    6404:	0c 8c       	ldd	r0, Y+28	; 0x1c
    6406:	02 c0       	rjmp	.+4      	; 0x640c <_ZN14HardwareSerial5beginEm+0xaa>
    6408:	88 0f       	add	r24, r24
    640a:	99 1f       	adc	r25, r25
    640c:	0a 94       	dec	r0
    640e:	e2 f7       	brpl	.-8      	; 0x6408 <_ZN14HardwareSerial5beginEm+0xa6>
    6410:	48 2b       	or	r20, r24
    6412:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    6414:	ee 89       	ldd	r30, Y+22	; 0x16
    6416:	ff 89       	ldd	r31, Y+23	; 0x17
    6418:	40 81       	ld	r20, Z
    641a:	c9 01       	movw	r24, r18
    641c:	0d 8c       	ldd	r0, Y+29	; 0x1d
    641e:	02 c0       	rjmp	.+4      	; 0x6424 <_ZN14HardwareSerial5beginEm+0xc2>
    6420:	88 0f       	add	r24, r24
    6422:	99 1f       	adc	r25, r25
    6424:	0a 94       	dec	r0
    6426:	e2 f7       	brpl	.-8      	; 0x6420 <_ZN14HardwareSerial5beginEm+0xbe>
    6428:	48 2b       	or	r20, r24
    642a:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    642c:	ee 89       	ldd	r30, Y+22	; 0x16
    642e:	ff 89       	ldd	r31, Y+23	; 0x17
    6430:	40 81       	ld	r20, Z
    6432:	c9 01       	movw	r24, r18
    6434:	0e 8c       	ldd	r0, Y+30	; 0x1e
    6436:	02 c0       	rjmp	.+4      	; 0x643c <_ZN14HardwareSerial5beginEm+0xda>
    6438:	88 0f       	add	r24, r24
    643a:	99 1f       	adc	r25, r25
    643c:	0a 94       	dec	r0
    643e:	e2 f7       	brpl	.-8      	; 0x6438 <_ZN14HardwareSerial5beginEm+0xd6>
    6440:	48 2b       	or	r20, r24
    6442:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    6444:	ee 89       	ldd	r30, Y+22	; 0x16
    6446:	ff 89       	ldd	r31, Y+23	; 0x17
    6448:	80 81       	ld	r24, Z
    644a:	0f 8c       	ldd	r0, Y+31	; 0x1f
    644c:	02 c0       	rjmp	.+4      	; 0x6452 <_ZN14HardwareSerial5beginEm+0xf0>
    644e:	22 0f       	add	r18, r18
    6450:	33 1f       	adc	r19, r19
    6452:	0a 94       	dec	r0
    6454:	e2 f7       	brpl	.-8      	; 0x644e <_ZN14HardwareSerial5beginEm+0xec>
    6456:	20 95       	com	r18
    6458:	28 23       	and	r18, r24
    645a:	20 83       	st	Z, r18
}
    645c:	df 91       	pop	r29
    645e:	cf 91       	pop	r28
    6460:	1f 91       	pop	r17
    6462:	0f 91       	pop	r16
    6464:	ff 90       	pop	r15
    6466:	ef 90       	pop	r14
    6468:	df 90       	pop	r13
    646a:	bf 90       	pop	r11
    646c:	af 90       	pop	r10
    646e:	08 95       	ret

00006470 <_ZN14HardwareSerial3endEv>:
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
  cbi(*_ucsrb, _udrie);
}

void HardwareSerial::end()
    6470:	cf 93       	push	r28
    6472:	df 93       	push	r29
    6474:	dc 01       	movw	r26, r24
{
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    6476:	1e 96       	adiw	r26, 0x0e	; 14
    6478:	8d 91       	ld	r24, X+
    647a:	9c 91       	ld	r25, X
    647c:	1f 97       	sbiw	r26, 0x0f	; 15
    647e:	ec 01       	movw	r28, r24
    6480:	c0 5c       	subi	r28, 0xC0	; 192
    6482:	df 4f       	sbci	r29, 0xFF	; 255
    6484:	fc 01       	movw	r30, r24
    6486:	ee 5b       	subi	r30, 0xBE	; 190
    6488:	ff 4f       	sbci	r31, 0xFF	; 255
    648a:	28 81       	ld	r18, Y
    648c:	39 81       	ldd	r19, Y+1	; 0x01
    648e:	80 81       	ld	r24, Z
    6490:	91 81       	ldd	r25, Z+1	; 0x01
    6492:	28 17       	cp	r18, r24
    6494:	39 07       	cpc	r19, r25
    6496:	c9 f7       	brne	.-14     	; 0x648a <_ZN14HardwareSerial3endEv+0x1a>
    ;

  cbi(*_ucsrb, _rxen);
    6498:	56 96       	adiw	r26, 0x16	; 22
    649a:	ed 91       	ld	r30, X+
    649c:	fc 91       	ld	r31, X
    649e:	57 97       	sbiw	r26, 0x17	; 23
    64a0:	40 81       	ld	r20, Z
    64a2:	21 e0       	ldi	r18, 0x01	; 1
    64a4:	30 e0       	ldi	r19, 0x00	; 0
    64a6:	c9 01       	movw	r24, r18
    64a8:	5c 96       	adiw	r26, 0x1c	; 28
    64aa:	0c 90       	ld	r0, X
    64ac:	5c 97       	sbiw	r26, 0x1c	; 28
    64ae:	02 c0       	rjmp	.+4      	; 0x64b4 <_ZN14HardwareSerial3endEv+0x44>
    64b0:	88 0f       	add	r24, r24
    64b2:	99 1f       	adc	r25, r25
    64b4:	0a 94       	dec	r0
    64b6:	e2 f7       	brpl	.-8      	; 0x64b0 <_ZN14HardwareSerial3endEv+0x40>
    64b8:	80 95       	com	r24
    64ba:	84 23       	and	r24, r20
    64bc:	80 83       	st	Z, r24
  cbi(*_ucsrb, _txen);
    64be:	56 96       	adiw	r26, 0x16	; 22
    64c0:	ed 91       	ld	r30, X+
    64c2:	fc 91       	ld	r31, X
    64c4:	57 97       	sbiw	r26, 0x17	; 23
    64c6:	40 81       	ld	r20, Z
    64c8:	c9 01       	movw	r24, r18
    64ca:	5d 96       	adiw	r26, 0x1d	; 29
    64cc:	0c 90       	ld	r0, X
    64ce:	5d 97       	sbiw	r26, 0x1d	; 29
    64d0:	02 c0       	rjmp	.+4      	; 0x64d6 <_ZN14HardwareSerial3endEv+0x66>
    64d2:	88 0f       	add	r24, r24
    64d4:	99 1f       	adc	r25, r25
    64d6:	0a 94       	dec	r0
    64d8:	e2 f7       	brpl	.-8      	; 0x64d2 <_ZN14HardwareSerial3endEv+0x62>
    64da:	80 95       	com	r24
    64dc:	84 23       	and	r24, r20
    64de:	80 83       	st	Z, r24
  cbi(*_ucsrb, _rxcie);  
    64e0:	56 96       	adiw	r26, 0x16	; 22
    64e2:	ed 91       	ld	r30, X+
    64e4:	fc 91       	ld	r31, X
    64e6:	57 97       	sbiw	r26, 0x17	; 23
    64e8:	40 81       	ld	r20, Z
    64ea:	c9 01       	movw	r24, r18
    64ec:	5e 96       	adiw	r26, 0x1e	; 30
    64ee:	0c 90       	ld	r0, X
    64f0:	5e 97       	sbiw	r26, 0x1e	; 30
    64f2:	02 c0       	rjmp	.+4      	; 0x64f8 <_ZN14HardwareSerial3endEv+0x88>
    64f4:	88 0f       	add	r24, r24
    64f6:	99 1f       	adc	r25, r25
    64f8:	0a 94       	dec	r0
    64fa:	e2 f7       	brpl	.-8      	; 0x64f4 <_ZN14HardwareSerial3endEv+0x84>
    64fc:	80 95       	com	r24
    64fe:	84 23       	and	r24, r20
    6500:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
    6502:	56 96       	adiw	r26, 0x16	; 22
    6504:	ed 91       	ld	r30, X+
    6506:	fc 91       	ld	r31, X
    6508:	57 97       	sbiw	r26, 0x17	; 23
    650a:	80 81       	ld	r24, Z
    650c:	5f 96       	adiw	r26, 0x1f	; 31
    650e:	0c 90       	ld	r0, X
    6510:	5f 97       	sbiw	r26, 0x1f	; 31
    6512:	02 c0       	rjmp	.+4      	; 0x6518 <_ZN14HardwareSerial3endEv+0xa8>
    6514:	22 0f       	add	r18, r18
    6516:	33 1f       	adc	r19, r19
    6518:	0a 94       	dec	r0
    651a:	e2 f7       	brpl	.-8      	; 0x6514 <_ZN14HardwareSerial3endEv+0xa4>
    651c:	20 95       	com	r18
    651e:	28 23       	and	r18, r24
    6520:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    6522:	1c 96       	adiw	r26, 0x0c	; 12
    6524:	ed 91       	ld	r30, X+
    6526:	fc 91       	ld	r31, X
    6528:	1d 97       	sbiw	r26, 0x0d	; 13
    652a:	ee 5b       	subi	r30, 0xBE	; 190
    652c:	ff 4f       	sbci	r31, 0xFF	; 255
    652e:	80 81       	ld	r24, Z
    6530:	91 81       	ldd	r25, Z+1	; 0x01
    6532:	92 93       	st	-Z, r25
    6534:	82 93       	st	-Z, r24
}
    6536:	df 91       	pop	r29
    6538:	cf 91       	pop	r28
    653a:	08 95       	ret

0000653c <_ZN14HardwareSerial9availableEv>:

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    653c:	dc 01       	movw	r26, r24
    653e:	1c 96       	adiw	r26, 0x0c	; 12
    6540:	ed 91       	ld	r30, X+
    6542:	fc 91       	ld	r31, X
    6544:	1d 97       	sbiw	r26, 0x0d	; 13
    6546:	e0 5c       	subi	r30, 0xC0	; 192
    6548:	ff 4f       	sbci	r31, 0xFF	; 255
    654a:	21 91       	ld	r18, Z+
    654c:	31 91       	ld	r19, Z+
    654e:	80 81       	ld	r24, Z
    6550:	91 81       	ldd	r25, Z+1	; 0x01
    6552:	28 1b       	sub	r18, r24
    6554:	39 0b       	sbc	r19, r25
    6556:	2f 73       	andi	r18, 0x3F	; 63
    6558:	30 70       	andi	r19, 0x00	; 0
}
    655a:	c9 01       	movw	r24, r18
    655c:	08 95       	ret

0000655e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    655e:	dc 01       	movw	r26, r24
    6560:	1c 96       	adiw	r26, 0x0c	; 12
    6562:	ed 91       	ld	r30, X+
    6564:	fc 91       	ld	r31, X
    6566:	1d 97       	sbiw	r26, 0x0d	; 13
    6568:	e0 5c       	subi	r30, 0xC0	; 192
    656a:	ff 4f       	sbci	r31, 0xFF	; 255
    656c:	20 81       	ld	r18, Z
    656e:	31 81       	ldd	r19, Z+1	; 0x01
    6570:	e0 54       	subi	r30, 0x40	; 64
    6572:	f0 40       	sbci	r31, 0x00	; 0
    6574:	df 01       	movw	r26, r30
    6576:	ae 5b       	subi	r26, 0xBE	; 190
    6578:	bf 4f       	sbci	r27, 0xFF	; 255
    657a:	8d 91       	ld	r24, X+
    657c:	9c 91       	ld	r25, X
    657e:	11 97       	sbiw	r26, 0x01	; 1
    6580:	28 17       	cp	r18, r24
    6582:	39 07       	cpc	r19, r25
    6584:	19 f4       	brne	.+6      	; 0x658c <_ZN14HardwareSerial4peekEv+0x2e>
    6586:	2f ef       	ldi	r18, 0xFF	; 255
    6588:	3f ef       	ldi	r19, 0xFF	; 255
    658a:	07 c0       	rjmp	.+14     	; 0x659a <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    658c:	8d 91       	ld	r24, X+
    658e:	9c 91       	ld	r25, X
    6590:	e8 0f       	add	r30, r24
    6592:	f9 1f       	adc	r31, r25
    6594:	80 81       	ld	r24, Z
    6596:	28 2f       	mov	r18, r24
    6598:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    659a:	c9 01       	movw	r24, r18
    659c:	08 95       	ret

0000659e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    659e:	dc 01       	movw	r26, r24
    65a0:	1c 96       	adiw	r26, 0x0c	; 12
    65a2:	ed 91       	ld	r30, X+
    65a4:	fc 91       	ld	r31, X
    65a6:	1d 97       	sbiw	r26, 0x0d	; 13
    65a8:	e0 5c       	subi	r30, 0xC0	; 192
    65aa:	ff 4f       	sbci	r31, 0xFF	; 255
    65ac:	20 81       	ld	r18, Z
    65ae:	31 81       	ldd	r19, Z+1	; 0x01
    65b0:	e0 54       	subi	r30, 0x40	; 64
    65b2:	f0 40       	sbci	r31, 0x00	; 0
    65b4:	df 01       	movw	r26, r30
    65b6:	ae 5b       	subi	r26, 0xBE	; 190
    65b8:	bf 4f       	sbci	r27, 0xFF	; 255
    65ba:	8d 91       	ld	r24, X+
    65bc:	9c 91       	ld	r25, X
    65be:	11 97       	sbiw	r26, 0x01	; 1
    65c0:	28 17       	cp	r18, r24
    65c2:	39 07       	cpc	r19, r25
    65c4:	19 f4       	brne	.+6      	; 0x65cc <_ZN14HardwareSerial4readEv+0x2e>
    65c6:	2f ef       	ldi	r18, 0xFF	; 255
    65c8:	3f ef       	ldi	r19, 0xFF	; 255
    65ca:	10 c0       	rjmp	.+32     	; 0x65ec <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    65cc:	8d 91       	ld	r24, X+
    65ce:	9c 91       	ld	r25, X
    65d0:	11 97       	sbiw	r26, 0x01	; 1
    65d2:	e8 0f       	add	r30, r24
    65d4:	f9 1f       	adc	r31, r25
    65d6:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    65d8:	8d 91       	ld	r24, X+
    65da:	9c 91       	ld	r25, X
    65dc:	11 97       	sbiw	r26, 0x01	; 1
    65de:	01 96       	adiw	r24, 0x01	; 1
    65e0:	8f 73       	andi	r24, 0x3F	; 63
    65e2:	90 70       	andi	r25, 0x00	; 0
    65e4:	11 96       	adiw	r26, 0x01	; 1
    65e6:	9c 93       	st	X, r25
    65e8:	8e 93       	st	-X, r24
    return c;
    65ea:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    65ec:	c9 01       	movw	r24, r18
    65ee:	08 95       	ret

000065f0 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
    65f0:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    65f2:	91 96       	adiw	r26, 0x21	; 33
    65f4:	8c 91       	ld	r24, X
    65f6:	91 97       	sbiw	r26, 0x21	; 33
    65f8:	88 23       	and	r24, r24
    65fa:	39 f0       	breq	.+14     	; 0x660a <_ZN14HardwareSerial5flushEv+0x1a>
    65fc:	54 96       	adiw	r26, 0x14	; 20
    65fe:	ed 91       	ld	r30, X+
    6600:	fc 91       	ld	r31, X
    6602:	55 97       	sbiw	r26, 0x15	; 21
    6604:	80 81       	ld	r24, Z
    6606:	86 ff       	sbrs	r24, 6
    6608:	f9 cf       	rjmp	.-14     	; 0x65fc <_ZN14HardwareSerial5flushEv+0xc>
  transmitting = false;
    660a:	91 96       	adiw	r26, 0x21	; 33
    660c:	1c 92       	st	X, r1
}
    660e:	08 95       	ret

00006610 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    6610:	cf 93       	push	r28
    6612:	df 93       	push	r29
    6614:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    6616:	ee 85       	ldd	r30, Y+14	; 0x0e
    6618:	ff 85       	ldd	r31, Y+15	; 0x0f
    661a:	e0 5c       	subi	r30, 0xC0	; 192
    661c:	ff 4f       	sbci	r31, 0xFF	; 255
    661e:	20 81       	ld	r18, Z
    6620:	31 81       	ldd	r19, Z+1	; 0x01
    6622:	e0 54       	subi	r30, 0x40	; 64
    6624:	f0 40       	sbci	r31, 0x00	; 0
    6626:	2f 5f       	subi	r18, 0xFF	; 255
    6628:	3f 4f       	sbci	r19, 0xFF	; 255
    662a:	2f 73       	andi	r18, 0x3F	; 63
    662c:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    662e:	df 01       	movw	r26, r30
    6630:	ae 5b       	subi	r26, 0xBE	; 190
    6632:	bf 4f       	sbci	r27, 0xFF	; 255
    6634:	8d 91       	ld	r24, X+
    6636:	9c 91       	ld	r25, X
    6638:	11 97       	sbiw	r26, 0x01	; 1
    663a:	28 17       	cp	r18, r24
    663c:	39 07       	cpc	r19, r25
    663e:	d1 f3       	breq	.-12     	; 0x6634 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    6640:	e0 5c       	subi	r30, 0xC0	; 192
    6642:	ff 4f       	sbci	r31, 0xFF	; 255
    6644:	80 81       	ld	r24, Z
    6646:	91 81       	ldd	r25, Z+1	; 0x01
    6648:	e0 54       	subi	r30, 0x40	; 64
    664a:	f0 40       	sbci	r31, 0x00	; 0
    664c:	e8 0f       	add	r30, r24
    664e:	f9 1f       	adc	r31, r25
    6650:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    6652:	ee 85       	ldd	r30, Y+14	; 0x0e
    6654:	ff 85       	ldd	r31, Y+15	; 0x0f
    6656:	e0 5c       	subi	r30, 0xC0	; 192
    6658:	ff 4f       	sbci	r31, 0xFF	; 255
    665a:	31 83       	std	Z+1, r19	; 0x01
    665c:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    665e:	ee 89       	ldd	r30, Y+22	; 0x16
    6660:	ff 89       	ldd	r31, Y+23	; 0x17
    6662:	20 81       	ld	r18, Z
    6664:	81 e0       	ldi	r24, 0x01	; 1
    6666:	90 e0       	ldi	r25, 0x00	; 0
    6668:	0f 8c       	ldd	r0, Y+31	; 0x1f
    666a:	02 c0       	rjmp	.+4      	; 0x6670 <_ZN14HardwareSerial5writeEh+0x60>
    666c:	88 0f       	add	r24, r24
    666e:	99 1f       	adc	r25, r25
    6670:	0a 94       	dec	r0
    6672:	e2 f7       	brpl	.-8      	; 0x666c <_ZN14HardwareSerial5writeEh+0x5c>
    6674:	28 2b       	or	r18, r24
    6676:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    6678:	81 e0       	ldi	r24, 0x01	; 1
    667a:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    667c:	ec 89       	ldd	r30, Y+20	; 0x14
    667e:	fd 89       	ldd	r31, Y+21	; 0x15
    6680:	80 81       	ld	r24, Z
    6682:	80 64       	ori	r24, 0x40	; 64
    6684:	80 83       	st	Z, r24
  
  return 1;
}
    6686:	81 e0       	ldi	r24, 0x01	; 1
    6688:	90 e0       	ldi	r25, 0x00	; 0
    668a:	df 91       	pop	r29
    668c:	cf 91       	pop	r28
    668e:	08 95       	ret

00006690 <_ZN14HardwareSerialcvbEv>:

HardwareSerial::operator bool() {
	return true;
}
    6690:	81 e0       	ldi	r24, 0x01	; 1
    6692:	08 95       	ret

00006694 <_GLOBAL__I_rx_buffer>:
  public:
    Print() : write_error(0) {}
    6694:	10 92 ba 03 	sts	0x03BA, r1
    6698:	10 92 b9 03 	sts	0x03B9, r1
    669c:	88 ee       	ldi	r24, 0xE8	; 232
    669e:	93 e0       	ldi	r25, 0x03	; 3
    66a0:	a0 e0       	ldi	r26, 0x00	; 0
    66a2:	b0 e0       	ldi	r27, 0x00	; 0
    66a4:	80 93 bb 03 	sts	0x03BB, r24
    66a8:	90 93 bc 03 	sts	0x03BC, r25
    66ac:	a0 93 bd 03 	sts	0x03BD, r26
    66b0:	b0 93 be 03 	sts	0x03BE, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    66b4:	8f e2       	ldi	r24, 0x2F	; 47
    66b6:	91 e0       	ldi	r25, 0x01	; 1
    66b8:	90 93 b8 03 	sts	0x03B8, r25
    66bc:	80 93 b7 03 	sts	0x03B7, r24
{
  _rx_buffer = rx_buffer;
    66c0:	8f e2       	ldi	r24, 0x2F	; 47
    66c2:	93 e0       	ldi	r25, 0x03	; 3
    66c4:	90 93 c4 03 	sts	0x03C4, r25
    66c8:	80 93 c3 03 	sts	0x03C3, r24
  _tx_buffer = tx_buffer;
    66cc:	83 e7       	ldi	r24, 0x73	; 115
    66ce:	93 e0       	ldi	r25, 0x03	; 3
    66d0:	90 93 c6 03 	sts	0x03C6, r25
    66d4:	80 93 c5 03 	sts	0x03C5, r24
  _ubrrh = ubrrh;
    66d8:	85 ec       	ldi	r24, 0xC5	; 197
    66da:	90 e0       	ldi	r25, 0x00	; 0
    66dc:	90 93 c8 03 	sts	0x03C8, r25
    66e0:	80 93 c7 03 	sts	0x03C7, r24
  _ubrrl = ubrrl;
    66e4:	84 ec       	ldi	r24, 0xC4	; 196
    66e6:	90 e0       	ldi	r25, 0x00	; 0
    66e8:	90 93 ca 03 	sts	0x03CA, r25
    66ec:	80 93 c9 03 	sts	0x03C9, r24
  _ucsra = ucsra;
    66f0:	80 ec       	ldi	r24, 0xC0	; 192
    66f2:	90 e0       	ldi	r25, 0x00	; 0
    66f4:	90 93 cc 03 	sts	0x03CC, r25
    66f8:	80 93 cb 03 	sts	0x03CB, r24
  _ucsrb = ucsrb;
    66fc:	81 ec       	ldi	r24, 0xC1	; 193
    66fe:	90 e0       	ldi	r25, 0x00	; 0
    6700:	90 93 ce 03 	sts	0x03CE, r25
    6704:	80 93 cd 03 	sts	0x03CD, r24
  _ucsrc = ucsrc;
    6708:	82 ec       	ldi	r24, 0xC2	; 194
    670a:	90 e0       	ldi	r25, 0x00	; 0
    670c:	90 93 d0 03 	sts	0x03D0, r25
    6710:	80 93 cf 03 	sts	0x03CF, r24
  _udr = udr;
    6714:	86 ec       	ldi	r24, 0xC6	; 198
    6716:	90 e0       	ldi	r25, 0x00	; 0
    6718:	90 93 d2 03 	sts	0x03D2, r25
    671c:	80 93 d1 03 	sts	0x03D1, r24
  _rxen = rxen;
    6720:	84 e0       	ldi	r24, 0x04	; 4
    6722:	80 93 d3 03 	sts	0x03D3, r24
  _txen = txen;
    6726:	83 e0       	ldi	r24, 0x03	; 3
    6728:	80 93 d4 03 	sts	0x03D4, r24
  _rxcie = rxcie;
    672c:	87 e0       	ldi	r24, 0x07	; 7
    672e:	80 93 d5 03 	sts	0x03D5, r24
  _udrie = udrie;
    6732:	85 e0       	ldi	r24, 0x05	; 5
    6734:	80 93 d6 03 	sts	0x03D6, r24
  _u2x = u2x;
    6738:	81 e0       	ldi	r24, 0x01	; 1
    673a:	80 93 d7 03 	sts	0x03D7, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    673e:	08 95       	ret

00006740 <main>:
#include <Arduino.h>

int main(void)
    6740:	cf 93       	push	r28
    6742:	df 93       	push	r29
{
	init();
    6744:	0e 94 07 30 	call	0x600e	; 0x600e <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    6748:	0e 94 63 12 	call	0x24c6	; 0x24c6 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    674c:	c3 e6       	ldi	r28, 0x63	; 99
    674e:	d1 e3       	ldi	r29, 0x31	; 49
#endif
	
	setup();
    
	for (;;) {
		loop();
    6750:	0e 94 19 12 	call	0x2432	; 0x2432 <loop>
		if (serialEventRun) serialEventRun();
    6754:	20 97       	sbiw	r28, 0x00	; 0
    6756:	e1 f3       	breq	.-8      	; 0x6750 <main+0x10>
    6758:	0e 94 63 31 	call	0x62c6	; 0x62c6 <_Z14serialEventRunv>
    675c:	f9 cf       	rjmp	.-14     	; 0x6750 <main+0x10>

0000675e <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    675e:	cf 92       	push	r12
    6760:	df 92       	push	r13
    6762:	ef 92       	push	r14
    6764:	ff 92       	push	r15
    6766:	0f 93       	push	r16
    6768:	1f 93       	push	r17
    676a:	cf 93       	push	r28
    676c:	df 93       	push	r29
    676e:	7c 01       	movw	r14, r24
    6770:	6b 01       	movw	r12, r22
    6772:	8a 01       	movw	r16, r20
    6774:	c0 e0       	ldi	r28, 0x00	; 0
    6776:	d0 e0       	ldi	r29, 0x00	; 0
    6778:	0f c0       	rjmp	.+30     	; 0x6798 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    677a:	d6 01       	movw	r26, r12
    677c:	6d 91       	ld	r22, X+
    677e:	6d 01       	movw	r12, r26
    6780:	d7 01       	movw	r26, r14
    6782:	ed 91       	ld	r30, X+
    6784:	fc 91       	ld	r31, X
    6786:	01 90       	ld	r0, Z+
    6788:	f0 81       	ld	r31, Z
    678a:	e0 2d       	mov	r30, r0
    678c:	c7 01       	movw	r24, r14
    678e:	09 95       	icall
    6790:	c8 0f       	add	r28, r24
    6792:	d9 1f       	adc	r29, r25
    6794:	01 50       	subi	r16, 0x01	; 1
    6796:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    6798:	01 15       	cp	r16, r1
    679a:	11 05       	cpc	r17, r1
    679c:	71 f7       	brne	.-36     	; 0x677a <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    679e:	ce 01       	movw	r24, r28
    67a0:	df 91       	pop	r29
    67a2:	cf 91       	pop	r28
    67a4:	1f 91       	pop	r17
    67a6:	0f 91       	pop	r16
    67a8:	ff 90       	pop	r15
    67aa:	ef 90       	pop	r14
    67ac:	df 90       	pop	r13
    67ae:	cf 90       	pop	r12
    67b0:	08 95       	ret

000067b2 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
    67b2:	ef 92       	push	r14
    67b4:	ff 92       	push	r15
    67b6:	0f 93       	push	r16
    67b8:	1f 93       	push	r17
    67ba:	cf 93       	push	r28
    67bc:	df 93       	push	r29
    67be:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    67c0:	8b 01       	movw	r16, r22
    67c2:	c0 e0       	ldi	r28, 0x00	; 0
    67c4:	d0 e0       	ldi	r29, 0x00	; 0
    67c6:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    67c8:	0f 5f       	subi	r16, 0xFF	; 255
    67ca:	1f 4f       	sbci	r17, 0xFF	; 255
    67cc:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    67ce:	66 23       	and	r22, r22
    67d0:	59 f0       	breq	.+22     	; 0x67e8 <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    n += write(c);
    67d2:	d7 01       	movw	r26, r14
    67d4:	ed 91       	ld	r30, X+
    67d6:	fc 91       	ld	r31, X
    67d8:	01 90       	ld	r0, Z+
    67da:	f0 81       	ld	r31, Z
    67dc:	e0 2d       	mov	r30, r0
    67de:	c7 01       	movw	r24, r14
    67e0:	09 95       	icall
    67e2:	c8 0f       	add	r28, r24
    67e4:	d9 1f       	adc	r29, r25
    67e6:	ef cf       	rjmp	.-34     	; 0x67c6 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
  }
  return n;
}
    67e8:	ce 01       	movw	r24, r28
    67ea:	df 91       	pop	r29
    67ec:	cf 91       	pop	r28
    67ee:	1f 91       	pop	r17
    67f0:	0f 91       	pop	r16
    67f2:	ff 90       	pop	r15
    67f4:	ef 90       	pop	r14
    67f6:	08 95       	ret

000067f8 <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    67f8:	dc 01       	movw	r26, r24
{
  return write(c);
    67fa:	ed 91       	ld	r30, X+
    67fc:	fc 91       	ld	r31, X
    67fe:	01 90       	ld	r0, Z+
    6800:	f0 81       	ld	r31, Z
    6802:	e0 2d       	mov	r30, r0
    6804:	09 95       	icall
}
    6806:	08 95       	ret

00006808 <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    6808:	ef 92       	push	r14
    680a:	ff 92       	push	r15
    680c:	0f 93       	push	r16
    680e:	1f 93       	push	r17
    6810:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    6812:	dc 01       	movw	r26, r24
    6814:	ed 91       	ld	r30, X+
    6816:	fc 91       	ld	r31, X
    6818:	01 90       	ld	r0, Z+
    681a:	f0 81       	ld	r31, Z
    681c:	e0 2d       	mov	r30, r0
    681e:	6d e0       	ldi	r22, 0x0D	; 13
    6820:	09 95       	icall
    6822:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    6824:	d8 01       	movw	r26, r16
    6826:	ed 91       	ld	r30, X+
    6828:	fc 91       	ld	r31, X
    682a:	01 90       	ld	r0, Z+
    682c:	f0 81       	ld	r31, Z
    682e:	e0 2d       	mov	r30, r0
    6830:	c8 01       	movw	r24, r16
    6832:	6a e0       	ldi	r22, 0x0A	; 10
    6834:	09 95       	icall
    6836:	9c 01       	movw	r18, r24
    6838:	2e 0d       	add	r18, r14
    683a:	3f 1d       	adc	r19, r15
    683c:	c9 01       	movw	r24, r18
    683e:	1f 91       	pop	r17
    6840:	0f 91       	pop	r16
    6842:	ff 90       	pop	r15
    6844:	ef 90       	pop	r14
    6846:	08 95       	ret

00006848 <_ZN5Print7printlnEPK19__FlashStringHelper>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    6848:	ef 92       	push	r14
    684a:	ff 92       	push	r15
    684c:	0f 93       	push	r16
    684e:	1f 93       	push	r17
    6850:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    6852:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <_ZN5Print5printEPK19__FlashStringHelper>
    6856:	8c 01       	movw	r16, r24
  n += println();
    6858:	c7 01       	movw	r24, r14
    685a:	0e 94 04 34 	call	0x6808	; 0x6808 <_ZN5Print7printlnEv>
    685e:	9c 01       	movw	r18, r24
    6860:	20 0f       	add	r18, r16
    6862:	31 1f       	adc	r19, r17
  return n;
}
    6864:	c9 01       	movw	r24, r18
    6866:	1f 91       	pop	r17
    6868:	0f 91       	pop	r16
    686a:	ff 90       	pop	r15
    686c:	ef 90       	pop	r14
    686e:	08 95       	ret

00006870 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    6870:	cf 93       	push	r28
    6872:	df 93       	push	r29
    6874:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    6876:	61 15       	cp	r22, r1
    6878:	71 05       	cpc	r23, r1
    687a:	19 f4       	brne	.+6      	; 0x6882 <_ZN5Print5writeEPKc+0x12>
    687c:	20 e0       	ldi	r18, 0x00	; 0
    687e:	30 e0       	ldi	r19, 0x00	; 0
    6880:	0f c0       	rjmp	.+30     	; 0x68a0 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
    6882:	db 01       	movw	r26, r22
    6884:	0d 90       	ld	r0, X+
    6886:	00 20       	and	r0, r0
    6888:	e9 f7       	brne	.-6      	; 0x6884 <_ZN5Print5writeEPKc+0x14>
    688a:	11 97       	sbiw	r26, 0x01	; 1
    688c:	a6 1b       	sub	r26, r22
    688e:	b7 0b       	sbc	r27, r23
    6890:	e8 81       	ld	r30, Y
    6892:	f9 81       	ldd	r31, Y+1	; 0x01
    6894:	02 80       	ldd	r0, Z+2	; 0x02
    6896:	f3 81       	ldd	r31, Z+3	; 0x03
    6898:	e0 2d       	mov	r30, r0
    689a:	ad 01       	movw	r20, r26
    689c:	09 95       	icall
    689e:	9c 01       	movw	r18, r24
    }
    68a0:	c9 01       	movw	r24, r18
    68a2:	df 91       	pop	r29
    68a4:	cf 91       	pop	r28
    68a6:	08 95       	ret

000068a8 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    68a8:	4f 92       	push	r4
    68aa:	5f 92       	push	r5
    68ac:	7f 92       	push	r7
    68ae:	8f 92       	push	r8
    68b0:	9f 92       	push	r9
    68b2:	af 92       	push	r10
    68b4:	bf 92       	push	r11
    68b6:	cf 92       	push	r12
    68b8:	df 92       	push	r13
    68ba:	ef 92       	push	r14
    68bc:	ff 92       	push	r15
    68be:	0f 93       	push	r16
    68c0:	1f 93       	push	r17
    68c2:	df 93       	push	r29
    68c4:	cf 93       	push	r28
    68c6:	cd b7       	in	r28, 0x3d	; 61
    68c8:	de b7       	in	r29, 0x3e	; 62
    68ca:	a1 97       	sbiw	r28, 0x21	; 33
    68cc:	0f b6       	in	r0, 0x3f	; 63
    68ce:	f8 94       	cli
    68d0:	de bf       	out	0x3e, r29	; 62
    68d2:	0f be       	out	0x3f, r0	; 63
    68d4:	cd bf       	out	0x3d, r28	; 61
    68d6:	2c 01       	movw	r4, r24
    68d8:	74 2e       	mov	r7, r20
    68da:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    68dc:	22 30       	cpi	r18, 0x02	; 2
    68de:	08 f4       	brcc	.+2      	; 0x68e2 <_ZN5Print11printNumberEmh+0x3a>
    68e0:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    68e2:	19 a2       	std	Y+33, r1	; 0x21
    68e4:	31 e2       	ldi	r19, 0x21	; 33
    68e6:	c3 2e       	mov	r12, r19
    68e8:	d1 2c       	mov	r13, r1
    68ea:	cc 0e       	add	r12, r28
    68ec:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    68ee:	82 2e       	mov	r8, r18
    68f0:	99 24       	eor	r9, r9
    68f2:	aa 24       	eor	r10, r10
    68f4:	bb 24       	eor	r11, r11
    68f6:	67 2d       	mov	r22, r7
    68f8:	75 2f       	mov	r23, r21
    68fa:	a5 01       	movw	r20, r10
    68fc:	94 01       	movw	r18, r8
    68fe:	0e 94 22 3c 	call	0x7844	; 0x7844 <__udivmodsi4>
    6902:	79 01       	movw	r14, r18
    6904:	8a 01       	movw	r16, r20
    char c = m - base * n;
    6906:	c8 01       	movw	r24, r16
    6908:	b7 01       	movw	r22, r14
    690a:	a5 01       	movw	r20, r10
    690c:	94 01       	movw	r18, r8
    690e:	0e 94 dc 3b 	call	0x77b8	; 0x77b8 <__mulsi3>
    6912:	47 2d       	mov	r20, r7
    6914:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    6916:	08 94       	sec
    6918:	c1 08       	sbc	r12, r1
    691a:	d1 08       	sbc	r13, r1
    691c:	4a 30       	cpi	r20, 0x0A	; 10
    691e:	14 f4       	brge	.+4      	; 0x6924 <_ZN5Print11printNumberEmh+0x7c>
    6920:	40 5d       	subi	r20, 0xD0	; 208
    6922:	01 c0       	rjmp	.+2      	; 0x6926 <_ZN5Print11printNumberEmh+0x7e>
    6924:	49 5c       	subi	r20, 0xC9	; 201
    6926:	f6 01       	movw	r30, r12
    6928:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    692a:	e1 14       	cp	r14, r1
    692c:	f1 04       	cpc	r15, r1
    692e:	01 05       	cpc	r16, r1
    6930:	11 05       	cpc	r17, r1
    6932:	21 f0       	breq	.+8      	; 0x693c <_ZN5Print11printNumberEmh+0x94>
    6934:	7e 2c       	mov	r7, r14
    6936:	5f 2d       	mov	r21, r15
    6938:	c8 01       	movw	r24, r16
    693a:	dd cf       	rjmp	.-70     	; 0x68f6 <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    693c:	c2 01       	movw	r24, r4
    693e:	b6 01       	movw	r22, r12
    6940:	0e 94 38 34 	call	0x6870	; 0x6870 <_ZN5Print5writeEPKc>
}
    6944:	a1 96       	adiw	r28, 0x21	; 33
    6946:	0f b6       	in	r0, 0x3f	; 63
    6948:	f8 94       	cli
    694a:	de bf       	out	0x3e, r29	; 62
    694c:	0f be       	out	0x3f, r0	; 63
    694e:	cd bf       	out	0x3d, r28	; 61
    6950:	cf 91       	pop	r28
    6952:	df 91       	pop	r29
    6954:	1f 91       	pop	r17
    6956:	0f 91       	pop	r16
    6958:	ff 90       	pop	r15
    695a:	ef 90       	pop	r14
    695c:	df 90       	pop	r13
    695e:	cf 90       	pop	r12
    6960:	bf 90       	pop	r11
    6962:	af 90       	pop	r10
    6964:	9f 90       	pop	r9
    6966:	8f 90       	pop	r8
    6968:	7f 90       	pop	r7
    696a:	5f 90       	pop	r5
    696c:	4f 90       	pop	r4
    696e:	08 95       	ret

00006970 <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    6970:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    6972:	21 15       	cp	r18, r1
    6974:	31 05       	cpc	r19, r1
    6976:	41 f4       	brne	.+16     	; 0x6988 <_ZN5Print5printEmi+0x18>
    6978:	ed 91       	ld	r30, X+
    697a:	fc 91       	ld	r31, X
    697c:	01 90       	ld	r0, Z+
    697e:	f0 81       	ld	r31, Z
    6980:	e0 2d       	mov	r30, r0
    6982:	64 2f       	mov	r22, r20
    6984:	09 95       	icall
    6986:	08 95       	ret
  else return printNumber(n, base);
    6988:	0e 94 54 34 	call	0x68a8	; 0x68a8 <_ZN5Print11printNumberEmh>
}
    698c:	08 95       	ret

0000698e <_ZN5Print5printEji>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
    698e:	ef 92       	push	r14
    6990:	ff 92       	push	r15
    6992:	0f 93       	push	r16
    6994:	1f 93       	push	r17
    6996:	9a 01       	movw	r18, r20
{
  return print((unsigned long) n, base);
    6998:	7b 01       	movw	r14, r22
    699a:	00 e0       	ldi	r16, 0x00	; 0
    699c:	10 e0       	ldi	r17, 0x00	; 0
    699e:	b8 01       	movw	r22, r16
    69a0:	a7 01       	movw	r20, r14
    69a2:	0e 94 b8 34 	call	0x6970	; 0x6970 <_ZN5Print5printEmi>
}
    69a6:	1f 91       	pop	r17
    69a8:	0f 91       	pop	r16
    69aa:	ff 90       	pop	r15
    69ac:	ef 90       	pop	r14
    69ae:	08 95       	ret

000069b0 <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    69b0:	ef 92       	push	r14
    69b2:	ff 92       	push	r15
    69b4:	0f 93       	push	r16
    69b6:	1f 93       	push	r17
    69b8:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    69ba:	e6 2e       	mov	r14, r22
    69bc:	ff 24       	eor	r15, r15
    69be:	00 e0       	ldi	r16, 0x00	; 0
    69c0:	10 e0       	ldi	r17, 0x00	; 0
    69c2:	b8 01       	movw	r22, r16
    69c4:	a7 01       	movw	r20, r14
    69c6:	0e 94 b8 34 	call	0x6970	; 0x6970 <_ZN5Print5printEmi>
}
    69ca:	1f 91       	pop	r17
    69cc:	0f 91       	pop	r16
    69ce:	ff 90       	pop	r15
    69d0:	ef 90       	pop	r14
    69d2:	08 95       	ret

000069d4 <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    69d4:	cf 92       	push	r12
    69d6:	df 92       	push	r13
    69d8:	ef 92       	push	r14
    69da:	ff 92       	push	r15
    69dc:	0f 93       	push	r16
    69de:	1f 93       	push	r17
    69e0:	cf 93       	push	r28
    69e2:	df 93       	push	r29
    69e4:	ec 01       	movw	r28, r24
    69e6:	6a 01       	movw	r12, r20
    69e8:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    69ea:	21 15       	cp	r18, r1
    69ec:	31 05       	cpc	r19, r1
    69ee:	41 f4       	brne	.+16     	; 0x6a00 <_ZN5Print5printEli+0x2c>
    return write(n);
    69f0:	e8 81       	ld	r30, Y
    69f2:	f9 81       	ldd	r31, Y+1	; 0x01
    69f4:	01 90       	ld	r0, Z+
    69f6:	f0 81       	ld	r31, Z
    69f8:	e0 2d       	mov	r30, r0
    69fa:	64 2f       	mov	r22, r20
    69fc:	09 95       	icall
    69fe:	1f c0       	rjmp	.+62     	; 0x6a3e <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    6a00:	2a 30       	cpi	r18, 0x0A	; 10
    6a02:	31 05       	cpc	r19, r1
    6a04:	d1 f4       	brne	.+52     	; 0x6a3a <_ZN5Print5printEli+0x66>
    if (n < 0) {
    6a06:	77 ff       	sbrs	r23, 7
    6a08:	17 c0       	rjmp	.+46     	; 0x6a38 <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    6a0a:	e8 81       	ld	r30, Y
    6a0c:	f9 81       	ldd	r31, Y+1	; 0x01
    6a0e:	01 90       	ld	r0, Z+
    6a10:	f0 81       	ld	r31, Z
    6a12:	e0 2d       	mov	r30, r0
    6a14:	6d e2       	ldi	r22, 0x2D	; 45
    6a16:	09 95       	icall
    6a18:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    6a1a:	44 27       	eor	r20, r20
    6a1c:	55 27       	eor	r21, r21
    6a1e:	ba 01       	movw	r22, r20
    6a20:	4c 19       	sub	r20, r12
    6a22:	5d 09       	sbc	r21, r13
    6a24:	6e 09       	sbc	r22, r14
    6a26:	7f 09       	sbc	r23, r15
    6a28:	ce 01       	movw	r24, r28
    6a2a:	2a e0       	ldi	r18, 0x0A	; 10
    6a2c:	0e 94 54 34 	call	0x68a8	; 0x68a8 <_ZN5Print11printNumberEmh>
    6a30:	98 01       	movw	r18, r16
    6a32:	28 0f       	add	r18, r24
    6a34:	39 1f       	adc	r19, r25
    6a36:	04 c0       	rjmp	.+8      	; 0x6a40 <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    6a38:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    6a3a:	0e 94 54 34 	call	0x68a8	; 0x68a8 <_ZN5Print11printNumberEmh>
    6a3e:	9c 01       	movw	r18, r24
  }
}
    6a40:	c9 01       	movw	r24, r18
    6a42:	df 91       	pop	r29
    6a44:	cf 91       	pop	r28
    6a46:	1f 91       	pop	r17
    6a48:	0f 91       	pop	r16
    6a4a:	ff 90       	pop	r15
    6a4c:	ef 90       	pop	r14
    6a4e:	df 90       	pop	r13
    6a50:	cf 90       	pop	r12
    6a52:	08 95       	ret

00006a54 <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    6a54:	ef 92       	push	r14
    6a56:	ff 92       	push	r15
    6a58:	0f 93       	push	r16
    6a5a:	1f 93       	push	r17
    6a5c:	7b 01       	movw	r14, r22
    6a5e:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    6a60:	00 27       	eor	r16, r16
    6a62:	f7 fc       	sbrc	r15, 7
    6a64:	00 95       	com	r16
    6a66:	10 2f       	mov	r17, r16
    6a68:	b8 01       	movw	r22, r16
    6a6a:	a7 01       	movw	r20, r14
    6a6c:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <_ZN5Print5printEli>
}
    6a70:	1f 91       	pop	r17
    6a72:	0f 91       	pop	r16
    6a74:	ff 90       	pop	r15
    6a76:	ef 90       	pop	r14
    6a78:	08 95       	ret

00006a7a <_ZN5Print5printERK6String>:
    n += write(c);
  }
  return n;
}

size_t Print::print(const String &s)
    6a7a:	af 92       	push	r10
    6a7c:	bf 92       	push	r11
    6a7e:	cf 92       	push	r12
    6a80:	df 92       	push	r13
    6a82:	ef 92       	push	r14
    6a84:	ff 92       	push	r15
    6a86:	0f 93       	push	r16
    6a88:	1f 93       	push	r17
    6a8a:	cf 93       	push	r28
    6a8c:	df 93       	push	r29
    6a8e:	5c 01       	movw	r10, r24
    6a90:	6b 01       	movw	r12, r22
    6a92:	ee 24       	eor	r14, r14
    6a94:	ff 24       	eor	r15, r15
    6a96:	c0 e0       	ldi	r28, 0x00	; 0
    6a98:	d0 e0       	ldi	r29, 0x00	; 0
    6a9a:	10 c0       	rjmp	.+32     	; 0x6abc <_ZN5Print5printERK6String+0x42>
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    n += write(s[i]);
    6a9c:	d5 01       	movw	r26, r10
    6a9e:	ed 91       	ld	r30, X+
    6aa0:	fc 91       	ld	r31, X
    6aa2:	00 81       	ld	r16, Z
    6aa4:	11 81       	ldd	r17, Z+1	; 0x01
    6aa6:	c6 01       	movw	r24, r12
    6aa8:	be 01       	movw	r22, r28
    6aaa:	0e 94 99 35 	call	0x6b32	; 0x6b32 <_ZNK6StringixEj>
    6aae:	68 2f       	mov	r22, r24
    6ab0:	c5 01       	movw	r24, r10
    6ab2:	f8 01       	movw	r30, r16
    6ab4:	09 95       	icall
    6ab6:	e8 0e       	add	r14, r24
    6ab8:	f9 1e       	adc	r15, r25
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    6aba:	21 96       	adiw	r28, 0x01	; 1
    6abc:	f6 01       	movw	r30, r12
    6abe:	84 81       	ldd	r24, Z+4	; 0x04
    6ac0:	95 81       	ldd	r25, Z+5	; 0x05
    6ac2:	c8 17       	cp	r28, r24
    6ac4:	d9 07       	cpc	r29, r25
    6ac6:	50 f3       	brcs	.-44     	; 0x6a9c <_ZN5Print5printERK6String+0x22>
    n += write(s[i]);
  }
  return n;
}
    6ac8:	c7 01       	movw	r24, r14
    6aca:	df 91       	pop	r29
    6acc:	cf 91       	pop	r28
    6ace:	1f 91       	pop	r17
    6ad0:	0f 91       	pop	r16
    6ad2:	ff 90       	pop	r15
    6ad4:	ef 90       	pop	r14
    6ad6:	df 90       	pop	r13
    6ad8:	cf 90       	pop	r12
    6ada:	bf 90       	pop	r11
    6adc:	af 90       	pop	r10
    6ade:	08 95       	ret

00006ae0 <_ZN5Print7printlnERK6String>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
    6ae0:	ef 92       	push	r14
    6ae2:	ff 92       	push	r15
    6ae4:	0f 93       	push	r16
    6ae6:	1f 93       	push	r17
    6ae8:	7c 01       	movw	r14, r24
{
  size_t n = print(s);
    6aea:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <_ZN5Print5printERK6String>
    6aee:	8c 01       	movw	r16, r24
  n += println();
    6af0:	c7 01       	movw	r24, r14
    6af2:	0e 94 04 34 	call	0x6808	; 0x6808 <_ZN5Print7printlnEv>
    6af6:	9c 01       	movw	r18, r24
    6af8:	20 0f       	add	r18, r16
    6afa:	31 1f       	adc	r19, r17
  return n;
}
    6afc:	c9 01       	movw	r24, r18
    6afe:	1f 91       	pop	r17
    6b00:	0f 91       	pop	r16
    6b02:	ff 90       	pop	r15
    6b04:	ef 90       	pop	r14
    6b06:	08 95       	ret

00006b08 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
    6b08:	fc 01       	movw	r30, r24
    6b0a:	9b 01       	movw	r18, r22
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    6b0c:	84 81       	ldd	r24, Z+4	; 0x04
    6b0e:	95 81       	ldd	r25, Z+5	; 0x05
    6b10:	68 17       	cp	r22, r24
    6b12:	79 07       	cpc	r23, r25
    6b14:	28 f4       	brcc	.+10     	; 0x6b20 <_ZN6StringixEj+0x18>
    6b16:	60 81       	ld	r22, Z
    6b18:	71 81       	ldd	r23, Z+1	; 0x01
    6b1a:	61 15       	cp	r22, r1
    6b1c:	71 05       	cpc	r23, r1
    6b1e:	29 f4       	brne	.+10     	; 0x6b2a <_ZN6StringixEj+0x22>
		dummy_writable_char = 0;
    6b20:	10 92 d9 03 	sts	0x03D9, r1
    6b24:	69 ed       	ldi	r22, 0xD9	; 217
    6b26:	73 e0       	ldi	r23, 0x03	; 3
    6b28:	02 c0       	rjmp	.+4      	; 0x6b2e <_ZN6StringixEj+0x26>
		return dummy_writable_char;
	}
	return buffer[index];
    6b2a:	62 0f       	add	r22, r18
    6b2c:	73 1f       	adc	r23, r19
}
    6b2e:	cb 01       	movw	r24, r22
    6b30:	08 95       	ret

00006b32 <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
    6b32:	fc 01       	movw	r30, r24
{
	if (index >= len || !buffer) return 0;
    6b34:	84 81       	ldd	r24, Z+4	; 0x04
    6b36:	95 81       	ldd	r25, Z+5	; 0x05
    6b38:	68 17       	cp	r22, r24
    6b3a:	79 07       	cpc	r23, r25
    6b3c:	48 f4       	brcc	.+18     	; 0x6b50 <_ZNK6StringixEj+0x1e>
    6b3e:	01 90       	ld	r0, Z+
    6b40:	f0 81       	ld	r31, Z
    6b42:	e0 2d       	mov	r30, r0
    6b44:	30 97       	sbiw	r30, 0x00	; 0
    6b46:	21 f0       	breq	.+8      	; 0x6b50 <_ZNK6StringixEj+0x1e>
	return buffer[index];
    6b48:	e6 0f       	add	r30, r22
    6b4a:	f7 1f       	adc	r31, r23
    6b4c:	80 81       	ld	r24, Z
    6b4e:	08 95       	ret
    6b50:	80 e0       	ldi	r24, 0x00	; 0
}
    6b52:	08 95       	ret

00006b54 <_ZN6String4trimEv>:
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}

void String::trim(void)
    6b54:	cf 92       	push	r12
    6b56:	df 92       	push	r13
    6b58:	ef 92       	push	r14
    6b5a:	ff 92       	push	r15
    6b5c:	0f 93       	push	r16
    6b5e:	1f 93       	push	r17
    6b60:	cf 93       	push	r28
    6b62:	df 93       	push	r29
    6b64:	6c 01       	movw	r12, r24
{
	if (!buffer || len == 0) return;
    6b66:	dc 01       	movw	r26, r24
    6b68:	ed 90       	ld	r14, X+
    6b6a:	fc 90       	ld	r15, X
    6b6c:	11 97       	sbiw	r26, 0x01	; 1
    6b6e:	e1 14       	cp	r14, r1
    6b70:	f1 04       	cpc	r15, r1
    6b72:	09 f4       	brne	.+2      	; 0x6b76 <_ZN6String4trimEv+0x22>
    6b74:	41 c0       	rjmp	.+130    	; 0x6bf8 <_ZN6String4trimEv+0xa4>
    6b76:	14 96       	adiw	r26, 0x04	; 4
    6b78:	cd 91       	ld	r28, X+
    6b7a:	dc 91       	ld	r29, X
    6b7c:	15 97       	sbiw	r26, 0x05	; 5
    6b7e:	20 97       	sbiw	r28, 0x00	; 0
    6b80:	d9 f1       	breq	.+118    	; 0x6bf8 <_ZN6String4trimEv+0xa4>
    6b82:	87 01       	movw	r16, r14
    6b84:	02 c0       	rjmp	.+4      	; 0x6b8a <_ZN6String4trimEv+0x36>
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    6b86:	0f 5f       	subi	r16, 0xFF	; 255
    6b88:	1f 4f       	sbci	r17, 0xFF	; 255
    6b8a:	f8 01       	movw	r30, r16
    6b8c:	80 81       	ld	r24, Z
    6b8e:	99 27       	eor	r25, r25
    6b90:	87 fd       	sbrc	r24, 7
    6b92:	90 95       	com	r25
    6b94:	0e 94 4a 3c 	call	0x7894	; 0x7894 <isspace>
    6b98:	89 2b       	or	r24, r25
    6b9a:	a9 f7       	brne	.-22     	; 0x6b86 <_ZN6String4trimEv+0x32>
	char *end = buffer + len - 1;
    6b9c:	21 97       	sbiw	r28, 0x01	; 1
    6b9e:	ce 0d       	add	r28, r14
    6ba0:	df 1d       	adc	r29, r15
    6ba2:	01 c0       	rjmp	.+2      	; 0x6ba6 <_ZN6String4trimEv+0x52>
	while (isspace(*end) && end >= begin) end--;
    6ba4:	21 97       	sbiw	r28, 0x01	; 1
    6ba6:	88 81       	ld	r24, Y
    6ba8:	99 27       	eor	r25, r25
    6baa:	87 fd       	sbrc	r24, 7
    6bac:	90 95       	com	r25
    6bae:	0e 94 4a 3c 	call	0x7894	; 0x7894 <isspace>
    6bb2:	89 2b       	or	r24, r25
    6bb4:	19 f0       	breq	.+6      	; 0x6bbc <_ZN6String4trimEv+0x68>
    6bb6:	c0 17       	cp	r28, r16
    6bb8:	d1 07       	cpc	r29, r17
    6bba:	a0 f7       	brcc	.-24     	; 0x6ba4 <_ZN6String4trimEv+0x50>
	len = end + 1 - begin;
    6bbc:	fe 01       	movw	r30, r28
    6bbe:	31 96       	adiw	r30, 0x01	; 1
    6bc0:	e0 1b       	sub	r30, r16
    6bc2:	f1 0b       	sbc	r31, r17
    6bc4:	d6 01       	movw	r26, r12
    6bc6:	15 96       	adiw	r26, 0x05	; 5
    6bc8:	fc 93       	st	X, r31
    6bca:	ee 93       	st	-X, r30
    6bcc:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    6bce:	2d 91       	ld	r18, X+
    6bd0:	3c 91       	ld	r19, X
    6bd2:	20 17       	cp	r18, r16
    6bd4:	31 07       	cpc	r19, r17
    6bd6:	28 f4       	brcc	.+10     	; 0x6be2 <_ZN6String4trimEv+0x8e>
    6bd8:	c9 01       	movw	r24, r18
    6bda:	b8 01       	movw	r22, r16
    6bdc:	af 01       	movw	r20, r30
    6bde:	0e 94 17 05 	call	0xa2e	; 0xa2e <memcpy>
	buffer[len] = 0;
    6be2:	d6 01       	movw	r26, r12
    6be4:	ed 91       	ld	r30, X+
    6be6:	fc 91       	ld	r31, X
    6be8:	11 97       	sbiw	r26, 0x01	; 1
    6bea:	14 96       	adiw	r26, 0x04	; 4
    6bec:	8d 91       	ld	r24, X+
    6bee:	9c 91       	ld	r25, X
    6bf0:	15 97       	sbiw	r26, 0x05	; 5
    6bf2:	e8 0f       	add	r30, r24
    6bf4:	f9 1f       	adc	r31, r25
    6bf6:	10 82       	st	Z, r1
}
    6bf8:	df 91       	pop	r29
    6bfa:	cf 91       	pop	r28
    6bfc:	1f 91       	pop	r17
    6bfe:	0f 91       	pop	r16
    6c00:	ff 90       	pop	r15
    6c02:	ef 90       	pop	r14
    6c04:	df 90       	pop	r13
    6c06:	cf 90       	pop	r12
    6c08:	08 95       	ret

00006c0a <_ZN6String11toUpperCaseEv>:
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}

void String::toUpperCase(void)
    6c0a:	cf 93       	push	r28
    6c0c:	df 93       	push	r29
    6c0e:	fc 01       	movw	r30, r24
{
	if (!buffer) return;
    6c10:	c0 81       	ld	r28, Z
    6c12:	d1 81       	ldd	r29, Z+1	; 0x01
    6c14:	20 97       	sbiw	r28, 0x00	; 0
    6c16:	39 f4       	brne	.+14     	; 0x6c26 <_ZN6String11toUpperCaseEv+0x1c>
    6c18:	09 c0       	rjmp	.+18     	; 0x6c2c <_ZN6String11toUpperCaseEv+0x22>
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
    6c1a:	99 27       	eor	r25, r25
    6c1c:	87 fd       	sbrc	r24, 7
    6c1e:	90 95       	com	r25
    6c20:	0e 94 52 3c 	call	0x78a4	; 0x78a4 <toupper>
    6c24:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    6c26:	88 81       	ld	r24, Y
    6c28:	88 23       	and	r24, r24
    6c2a:	b9 f7       	brne	.-18     	; 0x6c1a <_ZN6String11toUpperCaseEv+0x10>
		*p = toupper(*p);
	}
}
    6c2c:	df 91       	pop	r29
    6c2e:	cf 91       	pop	r28
    6c30:	08 95       	ret

00006c32 <_ZNK6String7indexOfEcj>:
int String::indexOf(char c) const
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
    6c32:	cf 93       	push	r28
    6c34:	df 93       	push	r29
    6c36:	fc 01       	movw	r30, r24
{
	if (fromIndex >= len) return -1;
    6c38:	84 81       	ldd	r24, Z+4	; 0x04
    6c3a:	95 81       	ldd	r25, Z+5	; 0x05
    6c3c:	48 17       	cp	r20, r24
    6c3e:	59 07       	cpc	r21, r25
    6c40:	68 f4       	brcc	.+26     	; 0x6c5c <_ZNK6String7indexOfEcj+0x2a>
	const char* temp = strchr(buffer + fromIndex, ch);
    6c42:	c0 81       	ld	r28, Z
    6c44:	d1 81       	ldd	r29, Z+1	; 0x01
    6c46:	77 27       	eor	r23, r23
    6c48:	67 fd       	sbrc	r22, 7
    6c4a:	70 95       	com	r23
    6c4c:	ce 01       	movw	r24, r28
    6c4e:	84 0f       	add	r24, r20
    6c50:	95 1f       	adc	r25, r21
    6c52:	0e 94 20 05 	call	0xa40	; 0xa40 <strchr>
    6c56:	9c 01       	movw	r18, r24
	if (temp == NULL) return -1;
    6c58:	00 97       	sbiw	r24, 0x00	; 0
    6c5a:	19 f4       	brne	.+6      	; 0x6c62 <_ZNK6String7indexOfEcj+0x30>
    6c5c:	2f ef       	ldi	r18, 0xFF	; 255
    6c5e:	3f ef       	ldi	r19, 0xFF	; 255
    6c60:	02 c0       	rjmp	.+4      	; 0x6c66 <_ZNK6String7indexOfEcj+0x34>
	return temp - buffer;
    6c62:	2c 1b       	sub	r18, r28
    6c64:	3d 0b       	sbc	r19, r29
}
    6c66:	c9 01       	movw	r24, r18
    6c68:	df 91       	pop	r29
    6c6a:	cf 91       	pop	r28
    6c6c:	08 95       	ret

00006c6e <_ZNK6String8endsWithERKS_>:
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
    6c6e:	fc 01       	movw	r30, r24
    6c70:	db 01       	movw	r26, r22
{
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    6c72:	24 81       	ldd	r18, Z+4	; 0x04
    6c74:	35 81       	ldd	r19, Z+5	; 0x05
    6c76:	14 96       	adiw	r26, 0x04	; 4
    6c78:	4d 91       	ld	r20, X+
    6c7a:	5c 91       	ld	r21, X
    6c7c:	15 97       	sbiw	r26, 0x05	; 5
    6c7e:	24 17       	cp	r18, r20
    6c80:	35 07       	cpc	r19, r21
    6c82:	a8 f0       	brcs	.+42     	; 0x6cae <_ZNK6String8endsWithERKS_+0x40>
    6c84:	80 81       	ld	r24, Z
    6c86:	91 81       	ldd	r25, Z+1	; 0x01
    6c88:	00 97       	sbiw	r24, 0x00	; 0
    6c8a:	89 f0       	breq	.+34     	; 0x6cae <_ZNK6String8endsWithERKS_+0x40>
    6c8c:	6d 91       	ld	r22, X+
    6c8e:	7c 91       	ld	r23, X
    6c90:	61 15       	cp	r22, r1
    6c92:	71 05       	cpc	r23, r1
    6c94:	61 f0       	breq	.+24     	; 0x6cae <_ZNK6String8endsWithERKS_+0x40>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
    6c96:	24 1b       	sub	r18, r20
    6c98:	35 0b       	sbc	r19, r21
    6c9a:	82 0f       	add	r24, r18
    6c9c:	93 1f       	adc	r25, r19
    6c9e:	0e 94 2b 05 	call	0xa56	; 0xa56 <strcmp>
    6ca2:	9c 01       	movw	r18, r24
    6ca4:	80 e0       	ldi	r24, 0x00	; 0
    6ca6:	23 2b       	or	r18, r19
    6ca8:	19 f4       	brne	.+6      	; 0x6cb0 <_ZNK6String8endsWithERKS_+0x42>
    6caa:	81 e0       	ldi	r24, 0x01	; 1
    6cac:	08 95       	ret
    6cae:	80 e0       	ldi	r24, 0x00	; 0
}
    6cb0:	08 95       	ret

00006cb2 <_ZNK6String10startsWithERKS_j>:
{
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
    6cb2:	fc 01       	movw	r30, r24
    6cb4:	db 01       	movw	r26, r22
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    6cb6:	14 96       	adiw	r26, 0x04	; 4
    6cb8:	2d 91       	ld	r18, X+
    6cba:	3c 91       	ld	r19, X
    6cbc:	15 97       	sbiw	r26, 0x05	; 5
    6cbe:	84 81       	ldd	r24, Z+4	; 0x04
    6cc0:	95 81       	ldd	r25, Z+5	; 0x05
    6cc2:	82 1b       	sub	r24, r18
    6cc4:	93 0b       	sbc	r25, r19
    6cc6:	84 17       	cp	r24, r20
    6cc8:	95 07       	cpc	r25, r21
    6cca:	a0 f0       	brcs	.+40     	; 0x6cf4 <_ZNK6String10startsWithERKS_j+0x42>
    6ccc:	80 81       	ld	r24, Z
    6cce:	91 81       	ldd	r25, Z+1	; 0x01
    6cd0:	00 97       	sbiw	r24, 0x00	; 0
    6cd2:	81 f0       	breq	.+32     	; 0x6cf4 <_ZNK6String10startsWithERKS_j+0x42>
    6cd4:	6d 91       	ld	r22, X+
    6cd6:	7c 91       	ld	r23, X
    6cd8:	61 15       	cp	r22, r1
    6cda:	71 05       	cpc	r23, r1
    6cdc:	59 f0       	breq	.+22     	; 0x6cf4 <_ZNK6String10startsWithERKS_j+0x42>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
    6cde:	84 0f       	add	r24, r20
    6ce0:	95 1f       	adc	r25, r21
    6ce2:	a9 01       	movw	r20, r18
    6ce4:	0e 94 3b 05 	call	0xa76	; 0xa76 <strncmp>
    6ce8:	9c 01       	movw	r18, r24
    6cea:	80 e0       	ldi	r24, 0x00	; 0
    6cec:	23 2b       	or	r18, r19
    6cee:	19 f4       	brne	.+6      	; 0x6cf6 <_ZNK6String10startsWithERKS_j+0x44>
    6cf0:	81 e0       	ldi	r24, 0x01	; 1
    6cf2:	08 95       	ret
    6cf4:	80 e0       	ldi	r24, 0x00	; 0
}
    6cf6:	08 95       	ret

00006cf8 <_ZNK6String10startsWithERKS_>:
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	} 
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
    6cf8:	fc 01       	movw	r30, r24
    6cfa:	db 01       	movw	r26, r22
{
	if (len < s2.len) return 0;
    6cfc:	24 81       	ldd	r18, Z+4	; 0x04
    6cfe:	35 81       	ldd	r19, Z+5	; 0x05
    6d00:	14 96       	adiw	r26, 0x04	; 4
    6d02:	8d 91       	ld	r24, X+
    6d04:	9c 91       	ld	r25, X
    6d06:	15 97       	sbiw	r26, 0x05	; 5
    6d08:	28 17       	cp	r18, r24
    6d0a:	39 07       	cpc	r19, r25
    6d0c:	10 f4       	brcc	.+4      	; 0x6d12 <_ZNK6String10startsWithERKS_+0x1a>
    6d0e:	80 e0       	ldi	r24, 0x00	; 0
    6d10:	08 95       	ret
	return startsWith(s2, 0);
    6d12:	cf 01       	movw	r24, r30
    6d14:	40 e0       	ldi	r20, 0x00	; 0
    6d16:	50 e0       	ldi	r21, 0x00	; 0
    6d18:	0e 94 59 36 	call	0x6cb2	; 0x6cb2 <_ZNK6String10startsWithERKS_j>
}
    6d1c:	08 95       	ret

00006d1e <_ZN6String12changeBufferEj>:
		return 1;
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
    6d1e:	0f 93       	push	r16
    6d20:	1f 93       	push	r17
    6d22:	cf 93       	push	r28
    6d24:	df 93       	push	r29
    6d26:	ec 01       	movw	r28, r24
    6d28:	8b 01       	movw	r16, r22
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    6d2a:	6f 5f       	subi	r22, 0xFF	; 255
    6d2c:	7f 4f       	sbci	r23, 0xFF	; 255
    6d2e:	88 81       	ld	r24, Y
    6d30:	99 81       	ldd	r25, Y+1	; 0x01
    6d32:	0e 94 e0 38 	call	0x71c0	; 0x71c0 <realloc>
	if (newbuffer) {
    6d36:	00 97       	sbiw	r24, 0x00	; 0
    6d38:	11 f4       	brne	.+4      	; 0x6d3e <_ZN6String12changeBufferEj+0x20>
    6d3a:	80 e0       	ldi	r24, 0x00	; 0
    6d3c:	05 c0       	rjmp	.+10     	; 0x6d48 <_ZN6String12changeBufferEj+0x2a>
		buffer = newbuffer;
    6d3e:	99 83       	std	Y+1, r25	; 0x01
    6d40:	88 83       	st	Y, r24
		capacity = maxStrLen;
    6d42:	1b 83       	std	Y+3, r17	; 0x03
    6d44:	0a 83       	std	Y+2, r16	; 0x02
    6d46:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    6d48:	df 91       	pop	r29
    6d4a:	cf 91       	pop	r28
    6d4c:	1f 91       	pop	r17
    6d4e:	0f 91       	pop	r16
    6d50:	08 95       	ret

00006d52 <_ZN6String7reserveEj>:
	if (buffer) free(buffer);
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
    6d52:	cf 93       	push	r28
    6d54:	df 93       	push	r29
    6d56:	ec 01       	movw	r28, r24
{
	if (buffer && capacity >= size) return 1;
    6d58:	88 81       	ld	r24, Y
    6d5a:	99 81       	ldd	r25, Y+1	; 0x01
    6d5c:	89 2b       	or	r24, r25
    6d5e:	29 f0       	breq	.+10     	; 0x6d6a <_ZN6String7reserveEj+0x18>
    6d60:	8a 81       	ldd	r24, Y+2	; 0x02
    6d62:	9b 81       	ldd	r25, Y+3	; 0x03
    6d64:	86 17       	cp	r24, r22
    6d66:	97 07       	cpc	r25, r23
    6d68:	60 f4       	brcc	.+24     	; 0x6d82 <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    6d6a:	ce 01       	movw	r24, r28
    6d6c:	0e 94 8f 36 	call	0x6d1e	; 0x6d1e <_ZN6String12changeBufferEj>
    6d70:	88 23       	and	r24, r24
    6d72:	41 f0       	breq	.+16     	; 0x6d84 <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    6d74:	8c 81       	ldd	r24, Y+4	; 0x04
    6d76:	9d 81       	ldd	r25, Y+5	; 0x05
    6d78:	89 2b       	or	r24, r25
    6d7a:	19 f4       	brne	.+6      	; 0x6d82 <_ZN6String7reserveEj+0x30>
    6d7c:	e8 81       	ld	r30, Y
    6d7e:	f9 81       	ldd	r31, Y+1	; 0x01
    6d80:	10 82       	st	Z, r1
    6d82:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    6d84:	df 91       	pop	r29
    6d86:	cf 91       	pop	r28
    6d88:	08 95       	ret

00006d8a <_ZN6String6concatEPKcj>:
unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
    6d8a:	ef 92       	push	r14
    6d8c:	ff 92       	push	r15
    6d8e:	0f 93       	push	r16
    6d90:	1f 93       	push	r17
    6d92:	cf 93       	push	r28
    6d94:	df 93       	push	r29
    6d96:	ec 01       	movw	r28, r24
    6d98:	7b 01       	movw	r14, r22
{
	unsigned int newlen = len + length;
    6d9a:	6c 81       	ldd	r22, Y+4	; 0x04
    6d9c:	7d 81       	ldd	r23, Y+5	; 0x05
	if (!cstr) return 0;
    6d9e:	e1 14       	cp	r14, r1
    6da0:	f1 04       	cpc	r15, r1
    6da2:	c1 f0       	breq	.+48     	; 0x6dd4 <_ZN6String6concatEPKcj+0x4a>
	if (length == 0) return 1;
    6da4:	41 15       	cp	r20, r1
    6da6:	51 05       	cpc	r21, r1
    6da8:	99 f0       	breq	.+38     	; 0x6dd0 <_ZN6String6concatEPKcj+0x46>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    6daa:	8a 01       	movw	r16, r20
    6dac:	06 0f       	add	r16, r22
    6dae:	17 1f       	adc	r17, r23
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
    6db0:	b8 01       	movw	r22, r16
    6db2:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <_ZN6String7reserveEj>
    6db6:	88 23       	and	r24, r24
    6db8:	69 f0       	breq	.+26     	; 0x6dd4 <_ZN6String6concatEPKcj+0x4a>
	strcpy(buffer + len, cstr);
    6dba:	88 81       	ld	r24, Y
    6dbc:	99 81       	ldd	r25, Y+1	; 0x01
    6dbe:	2c 81       	ldd	r18, Y+4	; 0x04
    6dc0:	3d 81       	ldd	r19, Y+5	; 0x05
    6dc2:	82 0f       	add	r24, r18
    6dc4:	93 1f       	adc	r25, r19
    6dc6:	b7 01       	movw	r22, r14
    6dc8:	0e 94 34 05 	call	0xa68	; 0xa68 <strcpy>
	len = newlen;
    6dcc:	1d 83       	std	Y+5, r17	; 0x05
    6dce:	0c 83       	std	Y+4, r16	; 0x04
    6dd0:	81 e0       	ldi	r24, 0x01	; 1
    6dd2:	01 c0       	rjmp	.+2      	; 0x6dd6 <_ZN6String6concatEPKcj+0x4c>
	return 1;
    6dd4:	80 e0       	ldi	r24, 0x00	; 0
}
    6dd6:	df 91       	pop	r29
    6dd8:	cf 91       	pop	r28
    6dda:	1f 91       	pop	r17
    6ddc:	0f 91       	pop	r16
    6dde:	ff 90       	pop	r15
    6de0:	ef 90       	pop	r14
    6de2:	08 95       	ret

00006de4 <_ZN6String6concatEj>:
	char buf[7];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(unsigned int num)
    6de4:	ef 92       	push	r14
    6de6:	ff 92       	push	r15
    6de8:	0f 93       	push	r16
    6dea:	1f 93       	push	r17
    6dec:	df 93       	push	r29
    6dee:	cf 93       	push	r28
    6df0:	00 d0       	rcall	.+0      	; 0x6df2 <_ZN6String6concatEj+0xe>
    6df2:	00 d0       	rcall	.+0      	; 0x6df4 <_ZN6String6concatEj+0x10>
    6df4:	00 d0       	rcall	.+0      	; 0x6df6 <_ZN6String6concatEj+0x12>
    6df6:	cd b7       	in	r28, 0x3d	; 61
    6df8:	de b7       	in	r29, 0x3e	; 62
    6dfa:	7c 01       	movw	r14, r24
    6dfc:	cb 01       	movw	r24, r22
{
	char buf[6];
	utoa(num, buf, 10);
    6dfe:	8e 01       	movw	r16, r28
    6e00:	0f 5f       	subi	r16, 0xFF	; 255
    6e02:	1f 4f       	sbci	r17, 0xFF	; 255
    6e04:	b8 01       	movw	r22, r16
    6e06:	4a e0       	ldi	r20, 0x0A	; 10
    6e08:	50 e0       	ldi	r21, 0x00	; 0
    6e0a:	0e 94 6a 05 	call	0xad4	; 0xad4 <utoa>
	return concat(buf, strlen(buf));
    6e0e:	f8 01       	movw	r30, r16
    6e10:	01 90       	ld	r0, Z+
    6e12:	00 20       	and	r0, r0
    6e14:	e9 f7       	brne	.-6      	; 0x6e10 <_ZN6String6concatEj+0x2c>
    6e16:	31 97       	sbiw	r30, 0x01	; 1
    6e18:	e0 1b       	sub	r30, r16
    6e1a:	f1 0b       	sbc	r31, r17
    6e1c:	c7 01       	movw	r24, r14
    6e1e:	b8 01       	movw	r22, r16
    6e20:	af 01       	movw	r20, r30
    6e22:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <_ZN6String6concatEPKcj>
}
    6e26:	26 96       	adiw	r28, 0x06	; 6
    6e28:	0f b6       	in	r0, 0x3f	; 63
    6e2a:	f8 94       	cli
    6e2c:	de bf       	out	0x3e, r29	; 62
    6e2e:	0f be       	out	0x3f, r0	; 63
    6e30:	cd bf       	out	0x3d, r28	; 61
    6e32:	cf 91       	pop	r28
    6e34:	df 91       	pop	r29
    6e36:	1f 91       	pop	r17
    6e38:	0f 91       	pop	r16
    6e3a:	ff 90       	pop	r15
    6e3c:	ef 90       	pop	r14
    6e3e:	08 95       	ret

00006e40 <_ZN6String6concatEi>:
	char buf[4];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
    6e40:	ef 92       	push	r14
    6e42:	ff 92       	push	r15
    6e44:	0f 93       	push	r16
    6e46:	1f 93       	push	r17
    6e48:	df 93       	push	r29
    6e4a:	cf 93       	push	r28
    6e4c:	cd b7       	in	r28, 0x3d	; 61
    6e4e:	de b7       	in	r29, 0x3e	; 62
    6e50:	27 97       	sbiw	r28, 0x07	; 7
    6e52:	0f b6       	in	r0, 0x3f	; 63
    6e54:	f8 94       	cli
    6e56:	de bf       	out	0x3e, r29	; 62
    6e58:	0f be       	out	0x3f, r0	; 63
    6e5a:	cd bf       	out	0x3d, r28	; 61
    6e5c:	7c 01       	movw	r14, r24
    6e5e:	cb 01       	movw	r24, r22
{
	char buf[7];
	itoa(num, buf, 10);
    6e60:	8e 01       	movw	r16, r28
    6e62:	0f 5f       	subi	r16, 0xFF	; 255
    6e64:	1f 4f       	sbci	r17, 0xFF	; 255
    6e66:	b8 01       	movw	r22, r16
    6e68:	4a e0       	ldi	r20, 0x0A	; 10
    6e6a:	50 e0       	ldi	r21, 0x00	; 0
    6e6c:	0e 94 49 05 	call	0xa92	; 0xa92 <itoa>
	return concat(buf, strlen(buf));
    6e70:	f8 01       	movw	r30, r16
    6e72:	01 90       	ld	r0, Z+
    6e74:	00 20       	and	r0, r0
    6e76:	e9 f7       	brne	.-6      	; 0x6e72 <_ZN6String6concatEi+0x32>
    6e78:	31 97       	sbiw	r30, 0x01	; 1
    6e7a:	e0 1b       	sub	r30, r16
    6e7c:	f1 0b       	sbc	r31, r17
    6e7e:	c7 01       	movw	r24, r14
    6e80:	b8 01       	movw	r22, r16
    6e82:	af 01       	movw	r20, r30
    6e84:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <_ZN6String6concatEPKcj>
}
    6e88:	27 96       	adiw	r28, 0x07	; 7
    6e8a:	0f b6       	in	r0, 0x3f	; 63
    6e8c:	f8 94       	cli
    6e8e:	de bf       	out	0x3e, r29	; 62
    6e90:	0f be       	out	0x3f, r0	; 63
    6e92:	cd bf       	out	0x3d, r28	; 61
    6e94:	cf 91       	pop	r28
    6e96:	df 91       	pop	r29
    6e98:	1f 91       	pop	r17
    6e9a:	0f 91       	pop	r16
    6e9c:	ff 90       	pop	r15
    6e9e:	ef 90       	pop	r14
    6ea0:	08 95       	ret

00006ea2 <_ZN6String6concatEh>:
	buf[0] = c;
	buf[1] = 0;
	return concat(buf, 1);
}

unsigned char String::concat(unsigned char num)
    6ea2:	ef 92       	push	r14
    6ea4:	ff 92       	push	r15
    6ea6:	0f 93       	push	r16
    6ea8:	1f 93       	push	r17
    6eaa:	df 93       	push	r29
    6eac:	cf 93       	push	r28
    6eae:	00 d0       	rcall	.+0      	; 0x6eb0 <_ZN6String6concatEh+0xe>
    6eb0:	00 d0       	rcall	.+0      	; 0x6eb2 <_ZN6String6concatEh+0x10>
    6eb2:	cd b7       	in	r28, 0x3d	; 61
    6eb4:	de b7       	in	r29, 0x3e	; 62
    6eb6:	7c 01       	movw	r14, r24
    6eb8:	86 2f       	mov	r24, r22
{
	char buf[4];
	itoa(num, buf, 10);
    6eba:	90 e0       	ldi	r25, 0x00	; 0
    6ebc:	8e 01       	movw	r16, r28
    6ebe:	0f 5f       	subi	r16, 0xFF	; 255
    6ec0:	1f 4f       	sbci	r17, 0xFF	; 255
    6ec2:	b8 01       	movw	r22, r16
    6ec4:	4a e0       	ldi	r20, 0x0A	; 10
    6ec6:	50 e0       	ldi	r21, 0x00	; 0
    6ec8:	0e 94 49 05 	call	0xa92	; 0xa92 <itoa>
	return concat(buf, strlen(buf));
    6ecc:	f8 01       	movw	r30, r16
    6ece:	01 90       	ld	r0, Z+
    6ed0:	00 20       	and	r0, r0
    6ed2:	e9 f7       	brne	.-6      	; 0x6ece <_ZN6String6concatEh+0x2c>
    6ed4:	31 97       	sbiw	r30, 0x01	; 1
    6ed6:	e0 1b       	sub	r30, r16
    6ed8:	f1 0b       	sbc	r31, r17
    6eda:	c7 01       	movw	r24, r14
    6edc:	b8 01       	movw	r22, r16
    6ede:	af 01       	movw	r20, r30
    6ee0:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <_ZN6String6concatEPKcj>
}
    6ee4:	0f 90       	pop	r0
    6ee6:	0f 90       	pop	r0
    6ee8:	0f 90       	pop	r0
    6eea:	0f 90       	pop	r0
    6eec:	cf 91       	pop	r28
    6eee:	df 91       	pop	r29
    6ef0:	1f 91       	pop	r17
    6ef2:	0f 91       	pop	r16
    6ef4:	ff 90       	pop	r15
    6ef6:	ef 90       	pop	r14
    6ef8:	08 95       	ret

00006efa <_ZN6String6concatEc>:
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}

unsigned char String::concat(char c)
    6efa:	df 93       	push	r29
    6efc:	cf 93       	push	r28
    6efe:	00 d0       	rcall	.+0      	; 0x6f00 <_ZN6String6concatEc+0x6>
    6f00:	cd b7       	in	r28, 0x3d	; 61
    6f02:	de b7       	in	r29, 0x3e	; 62
{
	char buf[2];
	buf[0] = c;
    6f04:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    6f06:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
    6f08:	be 01       	movw	r22, r28
    6f0a:	6f 5f       	subi	r22, 0xFF	; 255
    6f0c:	7f 4f       	sbci	r23, 0xFF	; 255
    6f0e:	41 e0       	ldi	r20, 0x01	; 1
    6f10:	50 e0       	ldi	r21, 0x00	; 0
    6f12:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <_ZN6String6concatEPKcj>
}
    6f16:	0f 90       	pop	r0
    6f18:	0f 90       	pop	r0
    6f1a:	cf 91       	pop	r28
    6f1c:	df 91       	pop	r29
    6f1e:	08 95       	ret

00006f20 <_ZN6String6concatERKS_>:

/*********************************************/
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
    6f20:	fb 01       	movw	r30, r22
{
	return concat(s.buffer, s.len);
    6f22:	60 81       	ld	r22, Z
    6f24:	71 81       	ldd	r23, Z+1	; 0x01
    6f26:	44 81       	ldd	r20, Z+4	; 0x04
    6f28:	55 81       	ldd	r21, Z+5	; 0x05
    6f2a:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <_ZN6String6concatEPKcj>
}
    6f2e:	08 95       	ret

00006f30 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
	flags = 0;
}

void String::invalidate(void)
    6f30:	cf 93       	push	r28
    6f32:	df 93       	push	r29
    6f34:	ec 01       	movw	r28, r24
{
	if (buffer) free(buffer);
    6f36:	88 81       	ld	r24, Y
    6f38:	99 81       	ldd	r25, Y+1	; 0x01
    6f3a:	00 97       	sbiw	r24, 0x00	; 0
    6f3c:	11 f0       	breq	.+4      	; 0x6f42 <_ZN6String10invalidateEv+0x12>
    6f3e:	0e 94 b6 2e 	call	0x5d6c	; 0x5d6c <free>
	buffer = NULL;
    6f42:	19 82       	std	Y+1, r1	; 0x01
    6f44:	18 82       	st	Y, r1
	capacity = len = 0;
    6f46:	1d 82       	std	Y+5, r1	; 0x05
    6f48:	1c 82       	std	Y+4, r1	; 0x04
    6f4a:	1b 82       	std	Y+3, r1	; 0x03
    6f4c:	1a 82       	std	Y+2, r1	; 0x02
}
    6f4e:	df 91       	pop	r29
    6f50:	cf 91       	pop	r28
    6f52:	08 95       	ret

00006f54 <_ZplRK15StringSumHelperRK6String>:

/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
    6f54:	0f 93       	push	r16
    6f56:	1f 93       	push	r17
    6f58:	18 2f       	mov	r17, r24
    6f5a:	09 2f       	mov	r16, r25
    6f5c:	fb 01       	movw	r30, r22
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    6f5e:	60 81       	ld	r22, Z
    6f60:	71 81       	ldd	r23, Z+1	; 0x01
    6f62:	44 81       	ldd	r20, Z+4	; 0x04
    6f64:	55 81       	ldd	r21, Z+5	; 0x05
    6f66:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <_ZN6String6concatEPKcj>
    6f6a:	88 23       	and	r24, r24
    6f6c:	21 f4       	brne	.+8      	; 0x6f76 <_ZplRK15StringSumHelperRK6String+0x22>
    6f6e:	81 2f       	mov	r24, r17
    6f70:	90 2f       	mov	r25, r16
    6f72:	0e 94 98 37 	call	0x6f30	; 0x6f30 <_ZN6String10invalidateEv>
	return a;
}
    6f76:	81 2f       	mov	r24, r17
    6f78:	90 2f       	mov	r25, r16
    6f7a:	1f 91       	pop	r17
    6f7c:	0f 91       	pop	r16
    6f7e:	08 95       	ret

00006f80 <_ZN6String4copyEPKcj>:

/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
    6f80:	ef 92       	push	r14
    6f82:	ff 92       	push	r15
    6f84:	0f 93       	push	r16
    6f86:	1f 93       	push	r17
    6f88:	cf 93       	push	r28
    6f8a:	df 93       	push	r29
    6f8c:	ec 01       	movw	r28, r24
    6f8e:	7b 01       	movw	r14, r22
    6f90:	8a 01       	movw	r16, r20
{
	if (!reserve(length)) {
    6f92:	ba 01       	movw	r22, r20
    6f94:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <_ZN6String7reserveEj>
    6f98:	88 23       	and	r24, r24
    6f9a:	21 f4       	brne	.+8      	; 0x6fa4 <_ZN6String4copyEPKcj+0x24>
		invalidate();
    6f9c:	ce 01       	movw	r24, r28
    6f9e:	0e 94 98 37 	call	0x6f30	; 0x6f30 <_ZN6String10invalidateEv>
    6fa2:	07 c0       	rjmp	.+14     	; 0x6fb2 <_ZN6String4copyEPKcj+0x32>
		return *this;
	}
	len = length;
    6fa4:	1d 83       	std	Y+5, r17	; 0x05
    6fa6:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    6fa8:	88 81       	ld	r24, Y
    6faa:	99 81       	ldd	r25, Y+1	; 0x01
    6fac:	b7 01       	movw	r22, r14
    6fae:	0e 94 34 05 	call	0xa68	; 0xa68 <strcpy>
	return *this;
}
    6fb2:	ce 01       	movw	r24, r28
    6fb4:	df 91       	pop	r29
    6fb6:	cf 91       	pop	r28
    6fb8:	1f 91       	pop	r17
    6fba:	0f 91       	pop	r16
    6fbc:	ff 90       	pop	r15
    6fbe:	ef 90       	pop	r14
    6fc0:	08 95       	ret

00006fc2 <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    6fc2:	cf 93       	push	r28
    6fc4:	df 93       	push	r29
    6fc6:	ec 01       	movw	r28, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    6fc8:	19 82       	std	Y+1, r1	; 0x01
    6fca:	18 82       	st	Y, r1
	capacity = 0;
    6fcc:	1b 82       	std	Y+3, r1	; 0x03
    6fce:	1a 82       	std	Y+2, r1	; 0x02
	len = 0;
    6fd0:	1d 82       	std	Y+5, r1	; 0x05
    6fd2:	1c 82       	std	Y+4, r1	; 0x04
	flags = 0;
    6fd4:	1e 82       	std	Y+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    6fd6:	61 15       	cp	r22, r1
    6fd8:	71 05       	cpc	r23, r1
    6fda:	51 f0       	breq	.+20     	; 0x6ff0 <_ZN6StringC1EPKc+0x2e>
    6fdc:	db 01       	movw	r26, r22
    6fde:	0d 90       	ld	r0, X+
    6fe0:	00 20       	and	r0, r0
    6fe2:	e9 f7       	brne	.-6      	; 0x6fde <_ZN6StringC1EPKc+0x1c>
    6fe4:	11 97       	sbiw	r26, 0x01	; 1
    6fe6:	a6 1b       	sub	r26, r22
    6fe8:	b7 0b       	sbc	r27, r23
    6fea:	ad 01       	movw	r20, r26
    6fec:	0e 94 c0 37 	call	0x6f80	; 0x6f80 <_ZN6String4copyEPKcj>
}
    6ff0:	df 91       	pop	r29
    6ff2:	cf 91       	pop	r28
    6ff4:	08 95       	ret

00006ff6 <_ZN6StringaSEPKc>:
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    6ff6:	0f 93       	push	r16
    6ff8:	1f 93       	push	r17
    6ffa:	18 2f       	mov	r17, r24
    6ffc:	09 2f       	mov	r16, r25
{
	if (cstr) copy(cstr, strlen(cstr));
    6ffe:	61 15       	cp	r22, r1
    7000:	71 05       	cpc	r23, r1
    7002:	59 f0       	breq	.+22     	; 0x701a <_ZN6StringaSEPKc+0x24>
    7004:	db 01       	movw	r26, r22
    7006:	0d 90       	ld	r0, X+
    7008:	00 20       	and	r0, r0
    700a:	e9 f7       	brne	.-6      	; 0x7006 <_ZN6StringaSEPKc+0x10>
    700c:	11 97       	sbiw	r26, 0x01	; 1
    700e:	a6 1b       	sub	r26, r22
    7010:	b7 0b       	sbc	r27, r23
    7012:	ad 01       	movw	r20, r26
    7014:	0e 94 c0 37 	call	0x6f80	; 0x6f80 <_ZN6String4copyEPKcj>
    7018:	02 c0       	rjmp	.+4      	; 0x701e <_ZN6StringaSEPKc+0x28>
	else invalidate();
    701a:	0e 94 98 37 	call	0x6f30	; 0x6f30 <_ZN6String10invalidateEv>
	
	return *this;
}
    701e:	81 2f       	mov	r24, r17
    7020:	90 2f       	mov	r25, r16
    7022:	1f 91       	pop	r17
    7024:	0f 91       	pop	r16
    7026:	08 95       	ret

00007028 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    7028:	ef 92       	push	r14
    702a:	ff 92       	push	r15
    702c:	0f 93       	push	r16
    702e:	1f 93       	push	r17
    7030:	df 93       	push	r29
    7032:	cf 93       	push	r28
    7034:	cd b7       	in	r28, 0x3d	; 61
    7036:	de b7       	in	r29, 0x3e	; 62
    7038:	29 97       	sbiw	r28, 0x09	; 9
    703a:	0f b6       	in	r0, 0x3f	; 63
    703c:	f8 94       	cli
    703e:	de bf       	out	0x3e, r29	; 62
    7040:	0f be       	out	0x3f, r0	; 63
    7042:	cd bf       	out	0x3d, r28	; 61
    7044:	8c 01       	movw	r16, r24
    7046:	86 2f       	mov	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    7048:	f8 01       	movw	r30, r16
    704a:	11 82       	std	Z+1, r1	; 0x01
    704c:	10 82       	st	Z, r1
	capacity = 0;
    704e:	13 82       	std	Z+3, r1	; 0x03
    7050:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    7052:	15 82       	std	Z+5, r1	; 0x05
    7054:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    7056:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned char value, unsigned char base)
{
	init();
	char buf[9];
	utoa(value, buf, base);
    7058:	90 e0       	ldi	r25, 0x00	; 0
    705a:	7e 01       	movw	r14, r28
    705c:	08 94       	sec
    705e:	e1 1c       	adc	r14, r1
    7060:	f1 1c       	adc	r15, r1
    7062:	b7 01       	movw	r22, r14
    7064:	50 e0       	ldi	r21, 0x00	; 0
    7066:	0e 94 6a 05 	call	0xad4	; 0xad4 <utoa>
	*this = buf;
    706a:	c8 01       	movw	r24, r16
    706c:	b7 01       	movw	r22, r14
    706e:	0e 94 fb 37 	call	0x6ff6	; 0x6ff6 <_ZN6StringaSEPKc>
}
    7072:	29 96       	adiw	r28, 0x09	; 9
    7074:	0f b6       	in	r0, 0x3f	; 63
    7076:	f8 94       	cli
    7078:	de bf       	out	0x3e, r29	; 62
    707a:	0f be       	out	0x3f, r0	; 63
    707c:	cd bf       	out	0x3d, r28	; 61
    707e:	cf 91       	pop	r28
    7080:	df 91       	pop	r29
    7082:	1f 91       	pop	r17
    7084:	0f 91       	pop	r16
    7086:	ff 90       	pop	r15
    7088:	ef 90       	pop	r14
    708a:	08 95       	ret

0000708c <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
    708c:	df 93       	push	r29
    708e:	cf 93       	push	r28
    7090:	00 d0       	rcall	.+0      	; 0x7092 <_ZN6StringC1Ec+0x6>
    7092:	cd b7       	in	r28, 0x3d	; 61
    7094:	de b7       	in	r29, 0x3e	; 62
    7096:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    7098:	11 82       	std	Z+1, r1	; 0x01
    709a:	10 82       	st	Z, r1
	capacity = 0;
    709c:	13 82       	std	Z+3, r1	; 0x03
    709e:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    70a0:	15 82       	std	Z+5, r1	; 0x05
    70a2:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    70a4:	16 82       	std	Z+6, r1	; 0x06

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
    70a6:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    70a8:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
    70aa:	be 01       	movw	r22, r28
    70ac:	6f 5f       	subi	r22, 0xFF	; 255
    70ae:	7f 4f       	sbci	r23, 0xFF	; 255
    70b0:	0e 94 fb 37 	call	0x6ff6	; 0x6ff6 <_ZN6StringaSEPKc>
}
    70b4:	0f 90       	pop	r0
    70b6:	0f 90       	pop	r0
    70b8:	cf 91       	pop	r28
    70ba:	df 91       	pop	r29
    70bc:	08 95       	ret

000070be <_ZNK6String9substringEjj>:
String String::substring( unsigned int left ) const
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
    70be:	bf 92       	push	r11
    70c0:	cf 92       	push	r12
    70c2:	df 92       	push	r13
    70c4:	ef 92       	push	r14
    70c6:	ff 92       	push	r15
    70c8:	0f 93       	push	r16
    70ca:	1f 93       	push	r17
    70cc:	cf 93       	push	r28
    70ce:	df 93       	push	r29
    70d0:	08 2f       	mov	r16, r24
    70d2:	b9 2e       	mov	r11, r25
    70d4:	6b 01       	movw	r12, r22
    70d6:	7a 01       	movw	r14, r20
    70d8:	e9 01       	movw	r28, r18
{
	if (left > right) {
    70da:	24 17       	cp	r18, r20
    70dc:	35 07       	cpc	r19, r21
    70de:	10 f4       	brcc	.+4      	; 0x70e4 <_ZNK6String9substringEjj+0x26>
    70e0:	ea 01       	movw	r28, r20
    70e2:	79 01       	movw	r14, r18
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    70e4:	80 2f       	mov	r24, r16
    70e6:	9b 2d       	mov	r25, r11
    70e8:	62 e0       	ldi	r22, 0x02	; 2
    70ea:	71 e0       	ldi	r23, 0x01	; 1
    70ec:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <_ZN6StringC1EPKc>
	if (left > len) return out;
    70f0:	d6 01       	movw	r26, r12
    70f2:	14 96       	adiw	r26, 0x04	; 4
    70f4:	8d 91       	ld	r24, X+
    70f6:	9c 91       	ld	r25, X
    70f8:	15 97       	sbiw	r26, 0x05	; 5
    70fa:	8e 15       	cp	r24, r14
    70fc:	9f 05       	cpc	r25, r15
    70fe:	d0 f0       	brcs	.+52     	; 0x7134 <_ZNK6String9substringEjj+0x76>
    7100:	8c 17       	cp	r24, r28
    7102:	9d 07       	cpc	r25, r29
    7104:	08 f4       	brcc	.+2      	; 0x7108 <_ZNK6String9substringEjj+0x4a>
    7106:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    7108:	d6 01       	movw	r26, r12
    710a:	ed 91       	ld	r30, X+
    710c:	fc 91       	ld	r31, X
    710e:	11 97       	sbiw	r26, 0x01	; 1
    7110:	ec 0f       	add	r30, r28
    7112:	fd 1f       	adc	r31, r29
    7114:	10 81       	ld	r17, Z
	buffer[right] = '\0';	
    7116:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    7118:	6d 91       	ld	r22, X+
    711a:	7c 91       	ld	r23, X
    711c:	6e 0d       	add	r22, r14
    711e:	7f 1d       	adc	r23, r15
    7120:	80 2f       	mov	r24, r16
    7122:	9b 2d       	mov	r25, r11
    7124:	0e 94 fb 37 	call	0x6ff6	; 0x6ff6 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    7128:	d6 01       	movw	r26, r12
    712a:	ed 91       	ld	r30, X+
    712c:	fc 91       	ld	r31, X
    712e:	ec 0f       	add	r30, r28
    7130:	fd 1f       	adc	r31, r29
    7132:	10 83       	st	Z, r17
	return out;
}
    7134:	80 2f       	mov	r24, r16
    7136:	9b 2d       	mov	r25, r11
    7138:	df 91       	pop	r29
    713a:	cf 91       	pop	r28
    713c:	1f 91       	pop	r17
    713e:	0f 91       	pop	r16
    7140:	ff 90       	pop	r15
    7142:	ef 90       	pop	r14
    7144:	df 90       	pop	r13
    7146:	cf 90       	pop	r12
    7148:	bf 90       	pop	r11
    714a:	08 95       	ret

0000714c <_ZNK6String9substringEj>:
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}

String String::substring( unsigned int left ) const
    714c:	0f 93       	push	r16
    714e:	1f 93       	push	r17
    7150:	8c 01       	movw	r16, r24
    7152:	fb 01       	movw	r30, r22
{
	return substring(left, len);
    7154:	24 81       	ldd	r18, Z+4	; 0x04
    7156:	35 81       	ldd	r19, Z+5	; 0x05
    7158:	0e 94 5f 38 	call	0x70be	; 0x70be <_ZNK6String9substringEjj>
}
    715c:	c8 01       	movw	r24, r16
    715e:	1f 91       	pop	r17
    7160:	0f 91       	pop	r16
    7162:	08 95       	ret

00007164 <_ZN6StringaSERKS_>:
	rhs.capacity = 0;
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
    7164:	cf 93       	push	r28
    7166:	df 93       	push	r29
    7168:	ec 01       	movw	r28, r24
    716a:	fb 01       	movw	r30, r22
{
	if (this == &rhs) return *this;
    716c:	86 17       	cp	r24, r22
    716e:	97 07       	cpc	r25, r23
    7170:	61 f0       	breq	.+24     	; 0x718a <_ZN6StringaSERKS_+0x26>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    7172:	60 81       	ld	r22, Z
    7174:	71 81       	ldd	r23, Z+1	; 0x01
    7176:	61 15       	cp	r22, r1
    7178:	71 05       	cpc	r23, r1
    717a:	29 f0       	breq	.+10     	; 0x7186 <_ZN6StringaSERKS_+0x22>
    717c:	44 81       	ldd	r20, Z+4	; 0x04
    717e:	55 81       	ldd	r21, Z+5	; 0x05
    7180:	0e 94 c0 37 	call	0x6f80	; 0x6f80 <_ZN6String4copyEPKcj>
    7184:	02 c0       	rjmp	.+4      	; 0x718a <_ZN6StringaSERKS_+0x26>
	else invalidate();
    7186:	0e 94 98 37 	call	0x6f30	; 0x6f30 <_ZN6String10invalidateEv>
	
	return *this;
}
    718a:	ce 01       	movw	r24, r28
    718c:	df 91       	pop	r29
    718e:	cf 91       	pop	r28
    7190:	08 95       	ret

00007192 <_ZN6StringC2ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    7192:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    7194:	11 82       	std	Z+1, r1	; 0x01
    7196:	10 82       	st	Z, r1
	capacity = 0;
    7198:	13 82       	std	Z+3, r1	; 0x03
    719a:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    719c:	15 82       	std	Z+5, r1	; 0x05
    719e:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    71a0:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
    71a2:	0e 94 b2 38 	call	0x7164	; 0x7164 <_ZN6StringaSERKS_>
}
    71a6:	08 95       	ret

000071a8 <_ZN6StringD1Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    71a8:	fc 01       	movw	r30, r24
{
	free(buffer);
    71aa:	80 81       	ld	r24, Z
    71ac:	91 81       	ldd	r25, Z+1	; 0x01
    71ae:	0e 94 b6 2e 	call	0x5d6c	; 0x5d6c <free>
}
    71b2:	08 95       	ret

000071b4 <_ZN6StringD2Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    71b4:	fc 01       	movw	r30, r24
{
	free(buffer);
    71b6:	80 81       	ld	r24, Z
    71b8:	91 81       	ldd	r25, Z+1	; 0x01
    71ba:	0e 94 b6 2e 	call	0x5d6c	; 0x5d6c <free>
}
    71be:	08 95       	ret

000071c0 <realloc>:
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
    71c0:	6f 92       	push	r6
    71c2:	7f 92       	push	r7
    71c4:	8f 92       	push	r8
    71c6:	9f 92       	push	r9
    71c8:	af 92       	push	r10
    71ca:	bf 92       	push	r11
    71cc:	cf 92       	push	r12
    71ce:	df 92       	push	r13
    71d0:	ef 92       	push	r14
    71d2:	ff 92       	push	r15
    71d4:	0f 93       	push	r16
    71d6:	1f 93       	push	r17
    71d8:	cf 93       	push	r28
    71da:	df 93       	push	r29
    71dc:	8c 01       	movw	r16, r24
    71de:	00 97       	sbiw	r24, 0x00	; 0
    71e0:	29 f4       	brne	.+10     	; 0x71ec <realloc+0x2c>
		return malloc(len);
    71e2:	cb 01       	movw	r24, r22
    71e4:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <malloc>
    71e8:	8c 01       	movw	r16, r24
    71ea:	bb c0       	rjmp	.+374    	; 0x7362 <realloc+0x1a2>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
    71ec:	8e ef       	ldi	r24, 0xFE	; 254
    71ee:	e8 2e       	mov	r14, r24
    71f0:	8f ef       	ldi	r24, 0xFF	; 255
    71f2:	f8 2e       	mov	r15, r24
    71f4:	e0 0e       	add	r14, r16
    71f6:	f1 1e       	adc	r15, r17
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
    71f8:	48 01       	movw	r8, r16
    71fa:	86 0e       	add	r8, r22
    71fc:	97 1e       	adc	r9, r23
	if (cp < cp1)
    71fe:	8e 14       	cp	r8, r14
    7200:	9f 04       	cpc	r9, r15
    7202:	08 f4       	brcc	.+2      	; 0x7206 <realloc+0x46>
    7204:	ac c0       	rjmp	.+344    	; 0x735e <realloc+0x19e>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
    7206:	d7 01       	movw	r26, r14
    7208:	4d 91       	ld	r20, X+
    720a:	5c 91       	ld	r21, X
    720c:	11 97       	sbiw	r26, 0x01	; 1
    720e:	46 17       	cp	r20, r22
    7210:	57 07       	cpc	r21, r23
    7212:	b8 f0       	brcs	.+46     	; 0x7242 <realloc+0x82>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    7214:	45 30       	cpi	r20, 0x05	; 5
    7216:	51 05       	cpc	r21, r1
    7218:	08 f4       	brcc	.+2      	; 0x721c <realloc+0x5c>
    721a:	a3 c0       	rjmp	.+326    	; 0x7362 <realloc+0x1a2>
    721c:	ca 01       	movw	r24, r20
    721e:	04 97       	sbiw	r24, 0x04	; 4
    7220:	86 17       	cp	r24, r22
    7222:	97 07       	cpc	r25, r23
    7224:	08 f4       	brcc	.+2      	; 0x7228 <realloc+0x68>
    7226:	9d c0       	rjmp	.+314    	; 0x7362 <realloc+0x1a2>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
    7228:	42 50       	subi	r20, 0x02	; 2
    722a:	50 40       	sbci	r21, 0x00	; 0
    722c:	46 1b       	sub	r20, r22
    722e:	57 0b       	sbc	r21, r23
    7230:	f4 01       	movw	r30, r8
    7232:	41 93       	st	Z+, r20
    7234:	51 93       	st	Z+, r21
		fp1->sz = len;
    7236:	6d 93       	st	X+, r22
    7238:	7c 93       	st	X, r23
		free(&(fp2->nx));
    723a:	cf 01       	movw	r24, r30
    723c:	0e 94 b6 2e 	call	0x5d6c	; 0x5d6c <free>
    7240:	90 c0       	rjmp	.+288    	; 0x7362 <realloc+0x1a2>

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
    7242:	5b 01       	movw	r10, r22
    7244:	a4 1a       	sub	r10, r20
    7246:	b5 0a       	sbc	r11, r21
	cp = (char *)ptr + fp1->sz;
    7248:	38 01       	movw	r6, r16
    724a:	64 0e       	add	r6, r20
    724c:	75 1e       	adc	r7, r21
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
    724e:	a0 91 dc 03 	lds	r26, 0x03DC
    7252:	b0 91 dd 03 	lds	r27, 0x03DD
    7256:	cc 24       	eor	r12, r12
    7258:	dd 24       	eor	r13, r13
    725a:	e0 e0       	ldi	r30, 0x00	; 0
    725c:	f0 e0       	ldi	r31, 0x00	; 0
    725e:	47 c0       	rjmp	.+142    	; 0x72ee <realloc+0x12e>
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
    7260:	a6 15       	cp	r26, r6
    7262:	b7 05       	cpc	r27, r7
    7264:	a9 f5       	brne	.+106    	; 0x72d0 <realloc+0x110>
    7266:	cd 91       	ld	r28, X+
    7268:	dc 91       	ld	r29, X
    726a:	11 97       	sbiw	r26, 0x01	; 1
    726c:	ce 01       	movw	r24, r28
    726e:	02 96       	adiw	r24, 0x02	; 2
    7270:	8a 15       	cp	r24, r10
    7272:	9b 05       	cpc	r25, r11
    7274:	68 f1       	brcs	.+90     	; 0x72d0 <realloc+0x110>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
    7276:	ce 01       	movw	r24, r28
    7278:	8a 19       	sub	r24, r10
    727a:	9b 09       	sbc	r25, r11
    727c:	02 96       	adiw	r24, 0x02	; 2
    727e:	12 96       	adiw	r26, 0x02	; 2
    7280:	2c 91       	ld	r18, X
    7282:	12 97       	sbiw	r26, 0x02	; 2
    7284:	13 96       	adiw	r26, 0x03	; 3
    7286:	3c 91       	ld	r19, X
    7288:	05 97       	sbiw	r24, 0x05	; 5
    728a:	58 f0       	brcs	.+22     	; 0x72a2 <realloc+0xe2>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
    728c:	f4 01       	movw	r30, r8
				fp2->nx = fp3->nx;
    728e:	22 83       	std	Z+2, r18	; 0x02
    7290:	33 83       	std	Z+3, r19	; 0x03
				fp2->sz = fp3->sz - incr;
    7292:	ca 19       	sub	r28, r10
    7294:	db 09       	sbc	r29, r11
    7296:	d1 83       	std	Z+1, r29	; 0x01
    7298:	c0 83       	st	Z, r28
				fp1->sz = len;
    729a:	d7 01       	movw	r26, r14
    729c:	6d 93       	st	X+, r22
    729e:	7c 93       	st	X, r23
    72a0:	09 c0       	rjmp	.+18     	; 0x72b4 <realloc+0xf4>
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
    72a2:	4e 5f       	subi	r20, 0xFE	; 254
    72a4:	5f 4f       	sbci	r21, 0xFF	; 255
    72a6:	4c 0f       	add	r20, r28
    72a8:	5d 1f       	adc	r21, r29
    72aa:	f7 01       	movw	r30, r14
    72ac:	51 83       	std	Z+1, r21	; 0x01
    72ae:	40 83       	st	Z, r20
				fp2 = fp3->nx;
    72b0:	c9 01       	movw	r24, r18
    72b2:	fc 01       	movw	r30, r24
			}
			if (ofp3)
    72b4:	c1 14       	cp	r12, r1
    72b6:	d1 04       	cpc	r13, r1
    72b8:	31 f0       	breq	.+12     	; 0x72c6 <realloc+0x106>
				ofp3->nx = fp2;
    72ba:	d6 01       	movw	r26, r12
    72bc:	13 96       	adiw	r26, 0x03	; 3
    72be:	fc 93       	st	X, r31
    72c0:	ee 93       	st	-X, r30
    72c2:	12 97       	sbiw	r26, 0x02	; 2
    72c4:	4e c0       	rjmp	.+156    	; 0x7362 <realloc+0x1a2>
			else
				__flp = fp2;
    72c6:	f0 93 dd 03 	sts	0x03DD, r31
    72ca:	e0 93 dc 03 	sts	0x03DC, r30
    72ce:	49 c0       	rjmp	.+146    	; 0x7362 <realloc+0x1a2>
    72d0:	8d 91       	ld	r24, X+
    72d2:	9c 91       	ld	r25, X
    72d4:	11 97       	sbiw	r26, 0x01	; 1
    72d6:	e8 17       	cp	r30, r24
    72d8:	f9 07       	cpc	r31, r25
    72da:	08 f4       	brcc	.+2      	; 0x72de <realloc+0x11e>
    72dc:	fc 01       	movw	r30, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
    72de:	6d 01       	movw	r12, r26
    72e0:	12 96       	adiw	r26, 0x02	; 2
    72e2:	8c 91       	ld	r24, X
    72e4:	12 97       	sbiw	r26, 0x02	; 2
    72e6:	13 96       	adiw	r26, 0x03	; 3
    72e8:	9c 91       	ld	r25, X
    72ea:	9c 01       	movw	r18, r24
    72ec:	d9 01       	movw	r26, r18
	 */
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
    72ee:	10 97       	sbiw	r26, 0x00	; 0
    72f0:	09 f0       	breq	.+2      	; 0x72f4 <realloc+0x134>
    72f2:	b6 cf       	rjmp	.-148    	; 0x7260 <realloc+0xa0>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
    72f4:	80 91 da 03 	lds	r24, 0x03DA
    72f8:	90 91 db 03 	lds	r25, 0x03DB
    72fc:	86 15       	cp	r24, r6
    72fe:	97 05       	cpc	r25, r7
    7300:	e9 f4       	brne	.+58     	; 0x733c <realloc+0x17c>
    7302:	e6 17       	cp	r30, r22
    7304:	f7 07       	cpc	r31, r23
    7306:	d0 f4       	brcc	.+52     	; 0x733c <realloc+0x17c>
		cp1 = __malloc_heap_end;
    7308:	20 91 0d 01 	lds	r18, 0x010D
    730c:	30 91 0e 01 	lds	r19, 0x010E
		cp = (char *)ptr + len;
		if (cp1 == 0)
    7310:	21 15       	cp	r18, r1
    7312:	31 05       	cpc	r19, r1
    7314:	41 f4       	brne	.+16     	; 0x7326 <realloc+0x166>
			cp1 = STACK_POINTER() - __malloc_margin;
    7316:	2d b7       	in	r18, 0x3d	; 61
    7318:	3e b7       	in	r19, 0x3e	; 62
    731a:	80 91 09 01 	lds	r24, 0x0109
    731e:	90 91 0a 01 	lds	r25, 0x010A
    7322:	28 1b       	sub	r18, r24
    7324:	39 0b       	sbc	r19, r25
		if (cp < cp1) {
    7326:	82 16       	cp	r8, r18
    7328:	93 06       	cpc	r9, r19
    732a:	c8 f4       	brcc	.+50     	; 0x735e <realloc+0x19e>
			__brkval = cp;
    732c:	90 92 db 03 	sts	0x03DB, r9
    7330:	80 92 da 03 	sts	0x03DA, r8
			fp1->sz = len;
    7334:	f7 01       	movw	r30, r14
    7336:	71 83       	std	Z+1, r23	; 0x01
    7338:	60 83       	st	Z, r22
    733a:	13 c0       	rjmp	.+38     	; 0x7362 <realloc+0x1a2>

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
    733c:	cb 01       	movw	r24, r22
    733e:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <malloc>
    7342:	ec 01       	movw	r28, r24
    7344:	00 97       	sbiw	r24, 0x00	; 0
    7346:	59 f0       	breq	.+22     	; 0x735e <realloc+0x19e>
		return 0;
	memcpy(memp, ptr, fp1->sz);
    7348:	d7 01       	movw	r26, r14
    734a:	4d 91       	ld	r20, X+
    734c:	5c 91       	ld	r21, X
    734e:	b8 01       	movw	r22, r16
    7350:	0e 94 17 05 	call	0xa2e	; 0xa2e <memcpy>
	free(ptr);
    7354:	c8 01       	movw	r24, r16
    7356:	0e 94 b6 2e 	call	0x5d6c	; 0x5d6c <free>
    735a:	8e 01       	movw	r16, r28
    735c:	02 c0       	rjmp	.+4      	; 0x7362 <realloc+0x1a2>
	return memp;
    735e:	00 e0       	ldi	r16, 0x00	; 0
    7360:	10 e0       	ldi	r17, 0x00	; 0
}
    7362:	c8 01       	movw	r24, r16
    7364:	df 91       	pop	r29
    7366:	cf 91       	pop	r28
    7368:	1f 91       	pop	r17
    736a:	0f 91       	pop	r16
    736c:	ff 90       	pop	r15
    736e:	ef 90       	pop	r14
    7370:	df 90       	pop	r13
    7372:	cf 90       	pop	r12
    7374:	bf 90       	pop	r11
    7376:	af 90       	pop	r10
    7378:	9f 90       	pop	r9
    737a:	8f 90       	pop	r8
    737c:	7f 90       	pop	r7
    737e:	6f 90       	pop	r6
    7380:	08 95       	ret

00007382 <__subsf3>:
    7382:	50 58       	subi	r21, 0x80	; 128

00007384 <__addsf3>:
    7384:	bb 27       	eor	r27, r27
    7386:	aa 27       	eor	r26, r26
    7388:	0e d0       	rcall	.+28     	; 0x73a6 <__addsf3x>
    738a:	75 c1       	rjmp	.+746    	; 0x7676 <__fp_round>
    738c:	66 d1       	rcall	.+716    	; 0x765a <__fp_pscA>
    738e:	30 f0       	brcs	.+12     	; 0x739c <__addsf3+0x18>
    7390:	6b d1       	rcall	.+726    	; 0x7668 <__fp_pscB>
    7392:	20 f0       	brcs	.+8      	; 0x739c <__addsf3+0x18>
    7394:	31 f4       	brne	.+12     	; 0x73a2 <__addsf3+0x1e>
    7396:	9f 3f       	cpi	r25, 0xFF	; 255
    7398:	11 f4       	brne	.+4      	; 0x739e <__addsf3+0x1a>
    739a:	1e f4       	brtc	.+6      	; 0x73a2 <__addsf3+0x1e>
    739c:	5b c1       	rjmp	.+694    	; 0x7654 <__fp_nan>
    739e:	0e f4       	brtc	.+2      	; 0x73a2 <__addsf3+0x1e>
    73a0:	e0 95       	com	r30
    73a2:	e7 fb       	bst	r30, 7
    73a4:	51 c1       	rjmp	.+674    	; 0x7648 <__fp_inf>

000073a6 <__addsf3x>:
    73a6:	e9 2f       	mov	r30, r25
    73a8:	77 d1       	rcall	.+750    	; 0x7698 <__fp_split3>
    73aa:	80 f3       	brcs	.-32     	; 0x738c <__addsf3+0x8>
    73ac:	ba 17       	cp	r27, r26
    73ae:	62 07       	cpc	r22, r18
    73b0:	73 07       	cpc	r23, r19
    73b2:	84 07       	cpc	r24, r20
    73b4:	95 07       	cpc	r25, r21
    73b6:	18 f0       	brcs	.+6      	; 0x73be <__addsf3x+0x18>
    73b8:	71 f4       	brne	.+28     	; 0x73d6 <__addsf3x+0x30>
    73ba:	9e f5       	brtc	.+102    	; 0x7422 <__addsf3x+0x7c>
    73bc:	8f c1       	rjmp	.+798    	; 0x76dc <__fp_zero>
    73be:	0e f4       	brtc	.+2      	; 0x73c2 <__addsf3x+0x1c>
    73c0:	e0 95       	com	r30
    73c2:	0b 2e       	mov	r0, r27
    73c4:	ba 2f       	mov	r27, r26
    73c6:	a0 2d       	mov	r26, r0
    73c8:	0b 01       	movw	r0, r22
    73ca:	b9 01       	movw	r22, r18
    73cc:	90 01       	movw	r18, r0
    73ce:	0c 01       	movw	r0, r24
    73d0:	ca 01       	movw	r24, r20
    73d2:	a0 01       	movw	r20, r0
    73d4:	11 24       	eor	r1, r1
    73d6:	ff 27       	eor	r31, r31
    73d8:	59 1b       	sub	r21, r25
    73da:	99 f0       	breq	.+38     	; 0x7402 <__addsf3x+0x5c>
    73dc:	59 3f       	cpi	r21, 0xF9	; 249
    73de:	50 f4       	brcc	.+20     	; 0x73f4 <__addsf3x+0x4e>
    73e0:	50 3e       	cpi	r21, 0xE0	; 224
    73e2:	68 f1       	brcs	.+90     	; 0x743e <__addsf3x+0x98>
    73e4:	1a 16       	cp	r1, r26
    73e6:	f0 40       	sbci	r31, 0x00	; 0
    73e8:	a2 2f       	mov	r26, r18
    73ea:	23 2f       	mov	r18, r19
    73ec:	34 2f       	mov	r19, r20
    73ee:	44 27       	eor	r20, r20
    73f0:	58 5f       	subi	r21, 0xF8	; 248
    73f2:	f3 cf       	rjmp	.-26     	; 0x73da <__addsf3x+0x34>
    73f4:	46 95       	lsr	r20
    73f6:	37 95       	ror	r19
    73f8:	27 95       	ror	r18
    73fa:	a7 95       	ror	r26
    73fc:	f0 40       	sbci	r31, 0x00	; 0
    73fe:	53 95       	inc	r21
    7400:	c9 f7       	brne	.-14     	; 0x73f4 <__addsf3x+0x4e>
    7402:	7e f4       	brtc	.+30     	; 0x7422 <__addsf3x+0x7c>
    7404:	1f 16       	cp	r1, r31
    7406:	ba 0b       	sbc	r27, r26
    7408:	62 0b       	sbc	r22, r18
    740a:	73 0b       	sbc	r23, r19
    740c:	84 0b       	sbc	r24, r20
    740e:	ba f0       	brmi	.+46     	; 0x743e <__addsf3x+0x98>
    7410:	91 50       	subi	r25, 0x01	; 1
    7412:	a1 f0       	breq	.+40     	; 0x743c <__addsf3x+0x96>
    7414:	ff 0f       	add	r31, r31
    7416:	bb 1f       	adc	r27, r27
    7418:	66 1f       	adc	r22, r22
    741a:	77 1f       	adc	r23, r23
    741c:	88 1f       	adc	r24, r24
    741e:	c2 f7       	brpl	.-16     	; 0x7410 <__addsf3x+0x6a>
    7420:	0e c0       	rjmp	.+28     	; 0x743e <__addsf3x+0x98>
    7422:	ba 0f       	add	r27, r26
    7424:	62 1f       	adc	r22, r18
    7426:	73 1f       	adc	r23, r19
    7428:	84 1f       	adc	r24, r20
    742a:	48 f4       	brcc	.+18     	; 0x743e <__addsf3x+0x98>
    742c:	87 95       	ror	r24
    742e:	77 95       	ror	r23
    7430:	67 95       	ror	r22
    7432:	b7 95       	ror	r27
    7434:	f7 95       	ror	r31
    7436:	9e 3f       	cpi	r25, 0xFE	; 254
    7438:	08 f0       	brcs	.+2      	; 0x743c <__addsf3x+0x96>
    743a:	b3 cf       	rjmp	.-154    	; 0x73a2 <__addsf3+0x1e>
    743c:	93 95       	inc	r25
    743e:	88 0f       	add	r24, r24
    7440:	08 f0       	brcs	.+2      	; 0x7444 <__addsf3x+0x9e>
    7442:	99 27       	eor	r25, r25
    7444:	ee 0f       	add	r30, r30
    7446:	97 95       	ror	r25
    7448:	87 95       	ror	r24
    744a:	08 95       	ret

0000744c <__cmpsf2>:
    744c:	d9 d0       	rcall	.+434    	; 0x7600 <__fp_cmp>
    744e:	08 f4       	brcc	.+2      	; 0x7452 <__cmpsf2+0x6>
    7450:	81 e0       	ldi	r24, 0x01	; 1
    7452:	08 95       	ret

00007454 <__divsf3>:
    7454:	0c d0       	rcall	.+24     	; 0x746e <__divsf3x>
    7456:	0f c1       	rjmp	.+542    	; 0x7676 <__fp_round>
    7458:	07 d1       	rcall	.+526    	; 0x7668 <__fp_pscB>
    745a:	40 f0       	brcs	.+16     	; 0x746c <__divsf3+0x18>
    745c:	fe d0       	rcall	.+508    	; 0x765a <__fp_pscA>
    745e:	30 f0       	brcs	.+12     	; 0x746c <__divsf3+0x18>
    7460:	21 f4       	brne	.+8      	; 0x746a <__divsf3+0x16>
    7462:	5f 3f       	cpi	r21, 0xFF	; 255
    7464:	19 f0       	breq	.+6      	; 0x746c <__divsf3+0x18>
    7466:	f0 c0       	rjmp	.+480    	; 0x7648 <__fp_inf>
    7468:	51 11       	cpse	r21, r1
    746a:	39 c1       	rjmp	.+626    	; 0x76de <__fp_szero>
    746c:	f3 c0       	rjmp	.+486    	; 0x7654 <__fp_nan>

0000746e <__divsf3x>:
    746e:	14 d1       	rcall	.+552    	; 0x7698 <__fp_split3>
    7470:	98 f3       	brcs	.-26     	; 0x7458 <__divsf3+0x4>

00007472 <__divsf3_pse>:
    7472:	99 23       	and	r25, r25
    7474:	c9 f3       	breq	.-14     	; 0x7468 <__divsf3+0x14>
    7476:	55 23       	and	r21, r21
    7478:	b1 f3       	breq	.-20     	; 0x7466 <__divsf3+0x12>
    747a:	95 1b       	sub	r25, r21
    747c:	55 0b       	sbc	r21, r21
    747e:	bb 27       	eor	r27, r27
    7480:	aa 27       	eor	r26, r26
    7482:	62 17       	cp	r22, r18
    7484:	73 07       	cpc	r23, r19
    7486:	84 07       	cpc	r24, r20
    7488:	38 f0       	brcs	.+14     	; 0x7498 <__divsf3_pse+0x26>
    748a:	9f 5f       	subi	r25, 0xFF	; 255
    748c:	5f 4f       	sbci	r21, 0xFF	; 255
    748e:	22 0f       	add	r18, r18
    7490:	33 1f       	adc	r19, r19
    7492:	44 1f       	adc	r20, r20
    7494:	aa 1f       	adc	r26, r26
    7496:	a9 f3       	breq	.-22     	; 0x7482 <__divsf3_pse+0x10>
    7498:	33 d0       	rcall	.+102    	; 0x7500 <__divsf3_pse+0x8e>
    749a:	0e 2e       	mov	r0, r30
    749c:	3a f0       	brmi	.+14     	; 0x74ac <__divsf3_pse+0x3a>
    749e:	e0 e8       	ldi	r30, 0x80	; 128
    74a0:	30 d0       	rcall	.+96     	; 0x7502 <__divsf3_pse+0x90>
    74a2:	91 50       	subi	r25, 0x01	; 1
    74a4:	50 40       	sbci	r21, 0x00	; 0
    74a6:	e6 95       	lsr	r30
    74a8:	00 1c       	adc	r0, r0
    74aa:	ca f7       	brpl	.-14     	; 0x749e <__divsf3_pse+0x2c>
    74ac:	29 d0       	rcall	.+82     	; 0x7500 <__divsf3_pse+0x8e>
    74ae:	fe 2f       	mov	r31, r30
    74b0:	27 d0       	rcall	.+78     	; 0x7500 <__divsf3_pse+0x8e>
    74b2:	66 0f       	add	r22, r22
    74b4:	77 1f       	adc	r23, r23
    74b6:	88 1f       	adc	r24, r24
    74b8:	bb 1f       	adc	r27, r27
    74ba:	26 17       	cp	r18, r22
    74bc:	37 07       	cpc	r19, r23
    74be:	48 07       	cpc	r20, r24
    74c0:	ab 07       	cpc	r26, r27
    74c2:	b0 e8       	ldi	r27, 0x80	; 128
    74c4:	09 f0       	breq	.+2      	; 0x74c8 <__divsf3_pse+0x56>
    74c6:	bb 0b       	sbc	r27, r27
    74c8:	80 2d       	mov	r24, r0
    74ca:	bf 01       	movw	r22, r30
    74cc:	ff 27       	eor	r31, r31
    74ce:	93 58       	subi	r25, 0x83	; 131
    74d0:	5f 4f       	sbci	r21, 0xFF	; 255
    74d2:	2a f0       	brmi	.+10     	; 0x74de <__divsf3_pse+0x6c>
    74d4:	9e 3f       	cpi	r25, 0xFE	; 254
    74d6:	51 05       	cpc	r21, r1
    74d8:	68 f0       	brcs	.+26     	; 0x74f4 <__divsf3_pse+0x82>
    74da:	b6 c0       	rjmp	.+364    	; 0x7648 <__fp_inf>
    74dc:	00 c1       	rjmp	.+512    	; 0x76de <__fp_szero>
    74de:	5f 3f       	cpi	r21, 0xFF	; 255
    74e0:	ec f3       	brlt	.-6      	; 0x74dc <__divsf3_pse+0x6a>
    74e2:	98 3e       	cpi	r25, 0xE8	; 232
    74e4:	dc f3       	brlt	.-10     	; 0x74dc <__divsf3_pse+0x6a>
    74e6:	86 95       	lsr	r24
    74e8:	77 95       	ror	r23
    74ea:	67 95       	ror	r22
    74ec:	b7 95       	ror	r27
    74ee:	f7 95       	ror	r31
    74f0:	9f 5f       	subi	r25, 0xFF	; 255
    74f2:	c9 f7       	brne	.-14     	; 0x74e6 <__divsf3_pse+0x74>
    74f4:	88 0f       	add	r24, r24
    74f6:	91 1d       	adc	r25, r1
    74f8:	96 95       	lsr	r25
    74fa:	87 95       	ror	r24
    74fc:	97 f9       	bld	r25, 7
    74fe:	08 95       	ret
    7500:	e1 e0       	ldi	r30, 0x01	; 1
    7502:	66 0f       	add	r22, r22
    7504:	77 1f       	adc	r23, r23
    7506:	88 1f       	adc	r24, r24
    7508:	bb 1f       	adc	r27, r27
    750a:	62 17       	cp	r22, r18
    750c:	73 07       	cpc	r23, r19
    750e:	84 07       	cpc	r24, r20
    7510:	ba 07       	cpc	r27, r26
    7512:	20 f0       	brcs	.+8      	; 0x751c <__divsf3_pse+0xaa>
    7514:	62 1b       	sub	r22, r18
    7516:	73 0b       	sbc	r23, r19
    7518:	84 0b       	sbc	r24, r20
    751a:	ba 0b       	sbc	r27, r26
    751c:	ee 1f       	adc	r30, r30
    751e:	88 f7       	brcc	.-30     	; 0x7502 <__divsf3_pse+0x90>
    7520:	e0 95       	com	r30
    7522:	08 95       	ret

00007524 <__fixsfsi>:
    7524:	04 d0       	rcall	.+8      	; 0x752e <__fixunssfsi>
    7526:	68 94       	set
    7528:	b1 11       	cpse	r27, r1
    752a:	d9 c0       	rjmp	.+434    	; 0x76de <__fp_szero>
    752c:	08 95       	ret

0000752e <__fixunssfsi>:
    752e:	bc d0       	rcall	.+376    	; 0x76a8 <__fp_splitA>
    7530:	88 f0       	brcs	.+34     	; 0x7554 <__fixunssfsi+0x26>
    7532:	9f 57       	subi	r25, 0x7F	; 127
    7534:	90 f0       	brcs	.+36     	; 0x755a <__fixunssfsi+0x2c>
    7536:	b9 2f       	mov	r27, r25
    7538:	99 27       	eor	r25, r25
    753a:	b7 51       	subi	r27, 0x17	; 23
    753c:	a0 f0       	brcs	.+40     	; 0x7566 <__fixunssfsi+0x38>
    753e:	d1 f0       	breq	.+52     	; 0x7574 <__fixunssfsi+0x46>
    7540:	66 0f       	add	r22, r22
    7542:	77 1f       	adc	r23, r23
    7544:	88 1f       	adc	r24, r24
    7546:	99 1f       	adc	r25, r25
    7548:	1a f0       	brmi	.+6      	; 0x7550 <__fixunssfsi+0x22>
    754a:	ba 95       	dec	r27
    754c:	c9 f7       	brne	.-14     	; 0x7540 <__fixunssfsi+0x12>
    754e:	12 c0       	rjmp	.+36     	; 0x7574 <__fixunssfsi+0x46>
    7550:	b1 30       	cpi	r27, 0x01	; 1
    7552:	81 f0       	breq	.+32     	; 0x7574 <__fixunssfsi+0x46>
    7554:	c3 d0       	rcall	.+390    	; 0x76dc <__fp_zero>
    7556:	b1 e0       	ldi	r27, 0x01	; 1
    7558:	08 95       	ret
    755a:	c0 c0       	rjmp	.+384    	; 0x76dc <__fp_zero>
    755c:	67 2f       	mov	r22, r23
    755e:	78 2f       	mov	r23, r24
    7560:	88 27       	eor	r24, r24
    7562:	b8 5f       	subi	r27, 0xF8	; 248
    7564:	39 f0       	breq	.+14     	; 0x7574 <__fixunssfsi+0x46>
    7566:	b9 3f       	cpi	r27, 0xF9	; 249
    7568:	cc f3       	brlt	.-14     	; 0x755c <__fixunssfsi+0x2e>
    756a:	86 95       	lsr	r24
    756c:	77 95       	ror	r23
    756e:	67 95       	ror	r22
    7570:	b3 95       	inc	r27
    7572:	d9 f7       	brne	.-10     	; 0x756a <__fixunssfsi+0x3c>
    7574:	3e f4       	brtc	.+14     	; 0x7584 <__fixunssfsi+0x56>
    7576:	90 95       	com	r25
    7578:	80 95       	com	r24
    757a:	70 95       	com	r23
    757c:	61 95       	neg	r22
    757e:	7f 4f       	sbci	r23, 0xFF	; 255
    7580:	8f 4f       	sbci	r24, 0xFF	; 255
    7582:	9f 4f       	sbci	r25, 0xFF	; 255
    7584:	08 95       	ret

00007586 <__floatunsisf>:
    7586:	e8 94       	clt
    7588:	09 c0       	rjmp	.+18     	; 0x759c <__floatsisf+0x12>

0000758a <__floatsisf>:
    758a:	97 fb       	bst	r25, 7
    758c:	3e f4       	brtc	.+14     	; 0x759c <__floatsisf+0x12>
    758e:	90 95       	com	r25
    7590:	80 95       	com	r24
    7592:	70 95       	com	r23
    7594:	61 95       	neg	r22
    7596:	7f 4f       	sbci	r23, 0xFF	; 255
    7598:	8f 4f       	sbci	r24, 0xFF	; 255
    759a:	9f 4f       	sbci	r25, 0xFF	; 255
    759c:	99 23       	and	r25, r25
    759e:	a9 f0       	breq	.+42     	; 0x75ca <__floatsisf+0x40>
    75a0:	f9 2f       	mov	r31, r25
    75a2:	96 e9       	ldi	r25, 0x96	; 150
    75a4:	bb 27       	eor	r27, r27
    75a6:	93 95       	inc	r25
    75a8:	f6 95       	lsr	r31
    75aa:	87 95       	ror	r24
    75ac:	77 95       	ror	r23
    75ae:	67 95       	ror	r22
    75b0:	b7 95       	ror	r27
    75b2:	f1 11       	cpse	r31, r1
    75b4:	f8 cf       	rjmp	.-16     	; 0x75a6 <__floatsisf+0x1c>
    75b6:	fa f4       	brpl	.+62     	; 0x75f6 <__floatsisf+0x6c>
    75b8:	bb 0f       	add	r27, r27
    75ba:	11 f4       	brne	.+4      	; 0x75c0 <__floatsisf+0x36>
    75bc:	60 ff       	sbrs	r22, 0
    75be:	1b c0       	rjmp	.+54     	; 0x75f6 <__floatsisf+0x6c>
    75c0:	6f 5f       	subi	r22, 0xFF	; 255
    75c2:	7f 4f       	sbci	r23, 0xFF	; 255
    75c4:	8f 4f       	sbci	r24, 0xFF	; 255
    75c6:	9f 4f       	sbci	r25, 0xFF	; 255
    75c8:	16 c0       	rjmp	.+44     	; 0x75f6 <__floatsisf+0x6c>
    75ca:	88 23       	and	r24, r24
    75cc:	11 f0       	breq	.+4      	; 0x75d2 <__floatsisf+0x48>
    75ce:	96 e9       	ldi	r25, 0x96	; 150
    75d0:	11 c0       	rjmp	.+34     	; 0x75f4 <__floatsisf+0x6a>
    75d2:	77 23       	and	r23, r23
    75d4:	21 f0       	breq	.+8      	; 0x75de <__floatsisf+0x54>
    75d6:	9e e8       	ldi	r25, 0x8E	; 142
    75d8:	87 2f       	mov	r24, r23
    75da:	76 2f       	mov	r23, r22
    75dc:	05 c0       	rjmp	.+10     	; 0x75e8 <__floatsisf+0x5e>
    75de:	66 23       	and	r22, r22
    75e0:	71 f0       	breq	.+28     	; 0x75fe <__floatsisf+0x74>
    75e2:	96 e8       	ldi	r25, 0x86	; 134
    75e4:	86 2f       	mov	r24, r22
    75e6:	70 e0       	ldi	r23, 0x00	; 0
    75e8:	60 e0       	ldi	r22, 0x00	; 0
    75ea:	2a f0       	brmi	.+10     	; 0x75f6 <__floatsisf+0x6c>
    75ec:	9a 95       	dec	r25
    75ee:	66 0f       	add	r22, r22
    75f0:	77 1f       	adc	r23, r23
    75f2:	88 1f       	adc	r24, r24
    75f4:	da f7       	brpl	.-10     	; 0x75ec <__floatsisf+0x62>
    75f6:	88 0f       	add	r24, r24
    75f8:	96 95       	lsr	r25
    75fa:	87 95       	ror	r24
    75fc:	97 f9       	bld	r25, 7
    75fe:	08 95       	ret

00007600 <__fp_cmp>:
    7600:	99 0f       	add	r25, r25
    7602:	00 08       	sbc	r0, r0
    7604:	55 0f       	add	r21, r21
    7606:	aa 0b       	sbc	r26, r26
    7608:	e0 e8       	ldi	r30, 0x80	; 128
    760a:	fe ef       	ldi	r31, 0xFE	; 254
    760c:	16 16       	cp	r1, r22
    760e:	17 06       	cpc	r1, r23
    7610:	e8 07       	cpc	r30, r24
    7612:	f9 07       	cpc	r31, r25
    7614:	c0 f0       	brcs	.+48     	; 0x7646 <__fp_cmp+0x46>
    7616:	12 16       	cp	r1, r18
    7618:	13 06       	cpc	r1, r19
    761a:	e4 07       	cpc	r30, r20
    761c:	f5 07       	cpc	r31, r21
    761e:	98 f0       	brcs	.+38     	; 0x7646 <__fp_cmp+0x46>
    7620:	62 1b       	sub	r22, r18
    7622:	73 0b       	sbc	r23, r19
    7624:	84 0b       	sbc	r24, r20
    7626:	95 0b       	sbc	r25, r21
    7628:	39 f4       	brne	.+14     	; 0x7638 <__fp_cmp+0x38>
    762a:	0a 26       	eor	r0, r26
    762c:	61 f0       	breq	.+24     	; 0x7646 <__fp_cmp+0x46>
    762e:	23 2b       	or	r18, r19
    7630:	24 2b       	or	r18, r20
    7632:	25 2b       	or	r18, r21
    7634:	21 f4       	brne	.+8      	; 0x763e <__fp_cmp+0x3e>
    7636:	08 95       	ret
    7638:	0a 26       	eor	r0, r26
    763a:	09 f4       	brne	.+2      	; 0x763e <__fp_cmp+0x3e>
    763c:	a1 40       	sbci	r26, 0x01	; 1
    763e:	a6 95       	lsr	r26
    7640:	8f ef       	ldi	r24, 0xFF	; 255
    7642:	81 1d       	adc	r24, r1
    7644:	81 1d       	adc	r24, r1
    7646:	08 95       	ret

00007648 <__fp_inf>:
    7648:	97 f9       	bld	r25, 7
    764a:	9f 67       	ori	r25, 0x7F	; 127
    764c:	80 e8       	ldi	r24, 0x80	; 128
    764e:	70 e0       	ldi	r23, 0x00	; 0
    7650:	60 e0       	ldi	r22, 0x00	; 0
    7652:	08 95       	ret

00007654 <__fp_nan>:
    7654:	9f ef       	ldi	r25, 0xFF	; 255
    7656:	80 ec       	ldi	r24, 0xC0	; 192
    7658:	08 95       	ret

0000765a <__fp_pscA>:
    765a:	00 24       	eor	r0, r0
    765c:	0a 94       	dec	r0
    765e:	16 16       	cp	r1, r22
    7660:	17 06       	cpc	r1, r23
    7662:	18 06       	cpc	r1, r24
    7664:	09 06       	cpc	r0, r25
    7666:	08 95       	ret

00007668 <__fp_pscB>:
    7668:	00 24       	eor	r0, r0
    766a:	0a 94       	dec	r0
    766c:	12 16       	cp	r1, r18
    766e:	13 06       	cpc	r1, r19
    7670:	14 06       	cpc	r1, r20
    7672:	05 06       	cpc	r0, r21
    7674:	08 95       	ret

00007676 <__fp_round>:
    7676:	09 2e       	mov	r0, r25
    7678:	03 94       	inc	r0
    767a:	00 0c       	add	r0, r0
    767c:	11 f4       	brne	.+4      	; 0x7682 <__fp_round+0xc>
    767e:	88 23       	and	r24, r24
    7680:	52 f0       	brmi	.+20     	; 0x7696 <__fp_round+0x20>
    7682:	bb 0f       	add	r27, r27
    7684:	40 f4       	brcc	.+16     	; 0x7696 <__fp_round+0x20>
    7686:	bf 2b       	or	r27, r31
    7688:	11 f4       	brne	.+4      	; 0x768e <__fp_round+0x18>
    768a:	60 ff       	sbrs	r22, 0
    768c:	04 c0       	rjmp	.+8      	; 0x7696 <__fp_round+0x20>
    768e:	6f 5f       	subi	r22, 0xFF	; 255
    7690:	7f 4f       	sbci	r23, 0xFF	; 255
    7692:	8f 4f       	sbci	r24, 0xFF	; 255
    7694:	9f 4f       	sbci	r25, 0xFF	; 255
    7696:	08 95       	ret

00007698 <__fp_split3>:
    7698:	57 fd       	sbrc	r21, 7
    769a:	90 58       	subi	r25, 0x80	; 128
    769c:	44 0f       	add	r20, r20
    769e:	55 1f       	adc	r21, r21
    76a0:	59 f0       	breq	.+22     	; 0x76b8 <__fp_splitA+0x10>
    76a2:	5f 3f       	cpi	r21, 0xFF	; 255
    76a4:	71 f0       	breq	.+28     	; 0x76c2 <__fp_splitA+0x1a>
    76a6:	47 95       	ror	r20

000076a8 <__fp_splitA>:
    76a8:	88 0f       	add	r24, r24
    76aa:	97 fb       	bst	r25, 7
    76ac:	99 1f       	adc	r25, r25
    76ae:	61 f0       	breq	.+24     	; 0x76c8 <__fp_splitA+0x20>
    76b0:	9f 3f       	cpi	r25, 0xFF	; 255
    76b2:	79 f0       	breq	.+30     	; 0x76d2 <__fp_splitA+0x2a>
    76b4:	87 95       	ror	r24
    76b6:	08 95       	ret
    76b8:	12 16       	cp	r1, r18
    76ba:	13 06       	cpc	r1, r19
    76bc:	14 06       	cpc	r1, r20
    76be:	55 1f       	adc	r21, r21
    76c0:	f2 cf       	rjmp	.-28     	; 0x76a6 <__fp_split3+0xe>
    76c2:	46 95       	lsr	r20
    76c4:	f1 df       	rcall	.-30     	; 0x76a8 <__fp_splitA>
    76c6:	08 c0       	rjmp	.+16     	; 0x76d8 <__fp_splitA+0x30>
    76c8:	16 16       	cp	r1, r22
    76ca:	17 06       	cpc	r1, r23
    76cc:	18 06       	cpc	r1, r24
    76ce:	99 1f       	adc	r25, r25
    76d0:	f1 cf       	rjmp	.-30     	; 0x76b4 <__fp_splitA+0xc>
    76d2:	86 95       	lsr	r24
    76d4:	71 05       	cpc	r23, r1
    76d6:	61 05       	cpc	r22, r1
    76d8:	08 94       	sec
    76da:	08 95       	ret

000076dc <__fp_zero>:
    76dc:	e8 94       	clt

000076de <__fp_szero>:
    76de:	bb 27       	eor	r27, r27
    76e0:	66 27       	eor	r22, r22
    76e2:	77 27       	eor	r23, r23
    76e4:	cb 01       	movw	r24, r22
    76e6:	97 f9       	bld	r25, 7
    76e8:	08 95       	ret

000076ea <__gesf2>:
    76ea:	8a df       	rcall	.-236    	; 0x7600 <__fp_cmp>
    76ec:	08 f4       	brcc	.+2      	; 0x76f0 <__gesf2+0x6>
    76ee:	8f ef       	ldi	r24, 0xFF	; 255
    76f0:	08 95       	ret

000076f2 <__mulsf3>:
    76f2:	0b d0       	rcall	.+22     	; 0x770a <__mulsf3x>
    76f4:	c0 cf       	rjmp	.-128    	; 0x7676 <__fp_round>
    76f6:	b1 df       	rcall	.-158    	; 0x765a <__fp_pscA>
    76f8:	28 f0       	brcs	.+10     	; 0x7704 <__mulsf3+0x12>
    76fa:	b6 df       	rcall	.-148    	; 0x7668 <__fp_pscB>
    76fc:	18 f0       	brcs	.+6      	; 0x7704 <__mulsf3+0x12>
    76fe:	95 23       	and	r25, r21
    7700:	09 f0       	breq	.+2      	; 0x7704 <__mulsf3+0x12>
    7702:	a2 cf       	rjmp	.-188    	; 0x7648 <__fp_inf>
    7704:	a7 cf       	rjmp	.-178    	; 0x7654 <__fp_nan>
    7706:	11 24       	eor	r1, r1
    7708:	ea cf       	rjmp	.-44     	; 0x76de <__fp_szero>

0000770a <__mulsf3x>:
    770a:	c6 df       	rcall	.-116    	; 0x7698 <__fp_split3>
    770c:	a0 f3       	brcs	.-24     	; 0x76f6 <__mulsf3+0x4>

0000770e <__mulsf3_pse>:
    770e:	95 9f       	mul	r25, r21
    7710:	d1 f3       	breq	.-12     	; 0x7706 <__mulsf3+0x14>
    7712:	95 0f       	add	r25, r21
    7714:	50 e0       	ldi	r21, 0x00	; 0
    7716:	55 1f       	adc	r21, r21
    7718:	62 9f       	mul	r22, r18
    771a:	f0 01       	movw	r30, r0
    771c:	72 9f       	mul	r23, r18
    771e:	bb 27       	eor	r27, r27
    7720:	f0 0d       	add	r31, r0
    7722:	b1 1d       	adc	r27, r1
    7724:	63 9f       	mul	r22, r19
    7726:	aa 27       	eor	r26, r26
    7728:	f0 0d       	add	r31, r0
    772a:	b1 1d       	adc	r27, r1
    772c:	aa 1f       	adc	r26, r26
    772e:	64 9f       	mul	r22, r20
    7730:	66 27       	eor	r22, r22
    7732:	b0 0d       	add	r27, r0
    7734:	a1 1d       	adc	r26, r1
    7736:	66 1f       	adc	r22, r22
    7738:	82 9f       	mul	r24, r18
    773a:	22 27       	eor	r18, r18
    773c:	b0 0d       	add	r27, r0
    773e:	a1 1d       	adc	r26, r1
    7740:	62 1f       	adc	r22, r18
    7742:	73 9f       	mul	r23, r19
    7744:	b0 0d       	add	r27, r0
    7746:	a1 1d       	adc	r26, r1
    7748:	62 1f       	adc	r22, r18
    774a:	83 9f       	mul	r24, r19
    774c:	a0 0d       	add	r26, r0
    774e:	61 1d       	adc	r22, r1
    7750:	22 1f       	adc	r18, r18
    7752:	74 9f       	mul	r23, r20
    7754:	33 27       	eor	r19, r19
    7756:	a0 0d       	add	r26, r0
    7758:	61 1d       	adc	r22, r1
    775a:	23 1f       	adc	r18, r19
    775c:	84 9f       	mul	r24, r20
    775e:	60 0d       	add	r22, r0
    7760:	21 1d       	adc	r18, r1
    7762:	82 2f       	mov	r24, r18
    7764:	76 2f       	mov	r23, r22
    7766:	6a 2f       	mov	r22, r26
    7768:	11 24       	eor	r1, r1
    776a:	9f 57       	subi	r25, 0x7F	; 127
    776c:	50 40       	sbci	r21, 0x00	; 0
    776e:	8a f0       	brmi	.+34     	; 0x7792 <__mulsf3_pse+0x84>
    7770:	e1 f0       	breq	.+56     	; 0x77aa <__mulsf3_pse+0x9c>
    7772:	88 23       	and	r24, r24
    7774:	4a f0       	brmi	.+18     	; 0x7788 <__mulsf3_pse+0x7a>
    7776:	ee 0f       	add	r30, r30
    7778:	ff 1f       	adc	r31, r31
    777a:	bb 1f       	adc	r27, r27
    777c:	66 1f       	adc	r22, r22
    777e:	77 1f       	adc	r23, r23
    7780:	88 1f       	adc	r24, r24
    7782:	91 50       	subi	r25, 0x01	; 1
    7784:	50 40       	sbci	r21, 0x00	; 0
    7786:	a9 f7       	brne	.-22     	; 0x7772 <__mulsf3_pse+0x64>
    7788:	9e 3f       	cpi	r25, 0xFE	; 254
    778a:	51 05       	cpc	r21, r1
    778c:	70 f0       	brcs	.+28     	; 0x77aa <__mulsf3_pse+0x9c>
    778e:	5c cf       	rjmp	.-328    	; 0x7648 <__fp_inf>
    7790:	a6 cf       	rjmp	.-180    	; 0x76de <__fp_szero>
    7792:	5f 3f       	cpi	r21, 0xFF	; 255
    7794:	ec f3       	brlt	.-6      	; 0x7790 <__mulsf3_pse+0x82>
    7796:	98 3e       	cpi	r25, 0xE8	; 232
    7798:	dc f3       	brlt	.-10     	; 0x7790 <__mulsf3_pse+0x82>
    779a:	86 95       	lsr	r24
    779c:	77 95       	ror	r23
    779e:	67 95       	ror	r22
    77a0:	b7 95       	ror	r27
    77a2:	f7 95       	ror	r31
    77a4:	e7 95       	ror	r30
    77a6:	9f 5f       	subi	r25, 0xFF	; 255
    77a8:	c1 f7       	brne	.-16     	; 0x779a <__mulsf3_pse+0x8c>
    77aa:	fe 2b       	or	r31, r30
    77ac:	88 0f       	add	r24, r24
    77ae:	91 1d       	adc	r25, r1
    77b0:	96 95       	lsr	r25
    77b2:	87 95       	ror	r24
    77b4:	97 f9       	bld	r25, 7
    77b6:	08 95       	ret

000077b8 <__mulsi3>:
    77b8:	62 9f       	mul	r22, r18
    77ba:	d0 01       	movw	r26, r0
    77bc:	73 9f       	mul	r23, r19
    77be:	f0 01       	movw	r30, r0
    77c0:	82 9f       	mul	r24, r18
    77c2:	e0 0d       	add	r30, r0
    77c4:	f1 1d       	adc	r31, r1
    77c6:	64 9f       	mul	r22, r20
    77c8:	e0 0d       	add	r30, r0
    77ca:	f1 1d       	adc	r31, r1
    77cc:	92 9f       	mul	r25, r18
    77ce:	f0 0d       	add	r31, r0
    77d0:	83 9f       	mul	r24, r19
    77d2:	f0 0d       	add	r31, r0
    77d4:	74 9f       	mul	r23, r20
    77d6:	f0 0d       	add	r31, r0
    77d8:	65 9f       	mul	r22, r21
    77da:	f0 0d       	add	r31, r0
    77dc:	99 27       	eor	r25, r25
    77de:	72 9f       	mul	r23, r18
    77e0:	b0 0d       	add	r27, r0
    77e2:	e1 1d       	adc	r30, r1
    77e4:	f9 1f       	adc	r31, r25
    77e6:	63 9f       	mul	r22, r19
    77e8:	b0 0d       	add	r27, r0
    77ea:	e1 1d       	adc	r30, r1
    77ec:	f9 1f       	adc	r31, r25
    77ee:	bd 01       	movw	r22, r26
    77f0:	cf 01       	movw	r24, r30
    77f2:	11 24       	eor	r1, r1
    77f4:	08 95       	ret

000077f6 <__udivmodhi4>:
    77f6:	aa 1b       	sub	r26, r26
    77f8:	bb 1b       	sub	r27, r27
    77fa:	51 e1       	ldi	r21, 0x11	; 17
    77fc:	07 c0       	rjmp	.+14     	; 0x780c <__udivmodhi4_ep>

000077fe <__udivmodhi4_loop>:
    77fe:	aa 1f       	adc	r26, r26
    7800:	bb 1f       	adc	r27, r27
    7802:	a6 17       	cp	r26, r22
    7804:	b7 07       	cpc	r27, r23
    7806:	10 f0       	brcs	.+4      	; 0x780c <__udivmodhi4_ep>
    7808:	a6 1b       	sub	r26, r22
    780a:	b7 0b       	sbc	r27, r23

0000780c <__udivmodhi4_ep>:
    780c:	88 1f       	adc	r24, r24
    780e:	99 1f       	adc	r25, r25
    7810:	5a 95       	dec	r21
    7812:	a9 f7       	brne	.-22     	; 0x77fe <__udivmodhi4_loop>
    7814:	80 95       	com	r24
    7816:	90 95       	com	r25
    7818:	bc 01       	movw	r22, r24
    781a:	cd 01       	movw	r24, r26
    781c:	08 95       	ret

0000781e <__divmodhi4>:
    781e:	97 fb       	bst	r25, 7
    7820:	09 2e       	mov	r0, r25
    7822:	07 26       	eor	r0, r23
    7824:	0a d0       	rcall	.+20     	; 0x783a <__divmodhi4_neg1>
    7826:	77 fd       	sbrc	r23, 7
    7828:	04 d0       	rcall	.+8      	; 0x7832 <__divmodhi4_neg2>
    782a:	e5 df       	rcall	.-54     	; 0x77f6 <__udivmodhi4>
    782c:	06 d0       	rcall	.+12     	; 0x783a <__divmodhi4_neg1>
    782e:	00 20       	and	r0, r0
    7830:	1a f4       	brpl	.+6      	; 0x7838 <__divmodhi4_exit>

00007832 <__divmodhi4_neg2>:
    7832:	70 95       	com	r23
    7834:	61 95       	neg	r22
    7836:	7f 4f       	sbci	r23, 0xFF	; 255

00007838 <__divmodhi4_exit>:
    7838:	08 95       	ret

0000783a <__divmodhi4_neg1>:
    783a:	f6 f7       	brtc	.-4      	; 0x7838 <__divmodhi4_exit>
    783c:	90 95       	com	r25
    783e:	81 95       	neg	r24
    7840:	9f 4f       	sbci	r25, 0xFF	; 255
    7842:	08 95       	ret

00007844 <__udivmodsi4>:
    7844:	a1 e2       	ldi	r26, 0x21	; 33
    7846:	1a 2e       	mov	r1, r26
    7848:	aa 1b       	sub	r26, r26
    784a:	bb 1b       	sub	r27, r27
    784c:	fd 01       	movw	r30, r26
    784e:	0d c0       	rjmp	.+26     	; 0x786a <__udivmodsi4_ep>

00007850 <__udivmodsi4_loop>:
    7850:	aa 1f       	adc	r26, r26
    7852:	bb 1f       	adc	r27, r27
    7854:	ee 1f       	adc	r30, r30
    7856:	ff 1f       	adc	r31, r31
    7858:	a2 17       	cp	r26, r18
    785a:	b3 07       	cpc	r27, r19
    785c:	e4 07       	cpc	r30, r20
    785e:	f5 07       	cpc	r31, r21
    7860:	20 f0       	brcs	.+8      	; 0x786a <__udivmodsi4_ep>
    7862:	a2 1b       	sub	r26, r18
    7864:	b3 0b       	sbc	r27, r19
    7866:	e4 0b       	sbc	r30, r20
    7868:	f5 0b       	sbc	r31, r21

0000786a <__udivmodsi4_ep>:
    786a:	66 1f       	adc	r22, r22
    786c:	77 1f       	adc	r23, r23
    786e:	88 1f       	adc	r24, r24
    7870:	99 1f       	adc	r25, r25
    7872:	1a 94       	dec	r1
    7874:	69 f7       	brne	.-38     	; 0x7850 <__udivmodsi4_loop>
    7876:	60 95       	com	r22
    7878:	70 95       	com	r23
    787a:	80 95       	com	r24
    787c:	90 95       	com	r25
    787e:	9b 01       	movw	r18, r22
    7880:	ac 01       	movw	r20, r24
    7882:	bd 01       	movw	r22, r26
    7884:	cf 01       	movw	r24, r30
    7886:	08 95       	ret

00007888 <__tablejump2__>:
    7888:	ee 0f       	add	r30, r30
    788a:	ff 1f       	adc	r31, r31

0000788c <__tablejump__>:
    788c:	05 90       	lpm	r0, Z+
    788e:	f4 91       	lpm	r31, Z+
    7890:	e0 2d       	mov	r30, r0
    7892:	09 94       	ijmp

00007894 <isspace>:
    7894:	91 11       	cpse	r25, r1
    7896:	0e c0       	rjmp	.+28     	; 0x78b4 <__ctype_isfalse>
    7898:	80 32       	cpi	r24, 0x20	; 32
    789a:	19 f0       	breq	.+6      	; 0x78a2 <isspace+0xe>
    789c:	89 50       	subi	r24, 0x09	; 9
    789e:	85 50       	subi	r24, 0x05	; 5
    78a0:	d0 f7       	brcc	.-12     	; 0x7896 <isspace+0x2>
    78a2:	08 95       	ret

000078a4 <toupper>:
    78a4:	91 11       	cpse	r25, r1
    78a6:	08 95       	ret
    78a8:	81 56       	subi	r24, 0x61	; 97
    78aa:	8a 51       	subi	r24, 0x1A	; 26
    78ac:	08 f4       	brcc	.+2      	; 0x78b0 <toupper+0xc>
    78ae:	80 52       	subi	r24, 0x20	; 32
    78b0:	85 58       	subi	r24, 0x85	; 133
    78b2:	08 95       	ret

000078b4 <__ctype_isfalse>:
    78b4:	99 27       	eor	r25, r25
    78b6:	88 27       	eor	r24, r24

000078b8 <__ctype_istrue>:
    78b8:	08 95       	ret

000078ba <__do_global_dtors>:
    78ba:	19 e0       	ldi	r17, 0x09	; 9
    78bc:	c6 ec       	ldi	r28, 0xC6	; 198
    78be:	d9 e0       	ldi	r29, 0x09	; 9
    78c0:	04 c0       	rjmp	.+8      	; 0x78ca <.do_global_dtors_start>

000078c2 <.do_global_dtors_loop>:
    78c2:	fe 01       	movw	r30, r28
    78c4:	0e 94 46 3c 	call	0x788c	; 0x788c <__tablejump__>
    78c8:	22 96       	adiw	r28, 0x02	; 2

000078ca <.do_global_dtors_start>:
    78ca:	c8 3c       	cpi	r28, 0xC8	; 200
    78cc:	d1 07       	cpc	r29, r17
    78ce:	c9 f7       	brne	.-14     	; 0x78c2 <.do_global_dtors_loop>
    78d0:	f8 94       	cli

000078d2 <__stop_program>:
    78d2:	ff cf       	rjmp	.-2      	; 0x78d2 <__stop_program>
