
Growbox.cpp.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <__dtors_end>
    total += 2; /* Add two bytes for the memory block's header  */
    total += (int) current->sz;
  }

  return total;
}
       4:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__bad_interrupt>
   
int month(){
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
       8:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__bad_interrupt>
TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
  for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
     free(id);   // ensure  all Alarms are cleared and available for allocation  
}
       c:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__bad_interrupt>
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
  txBufferLength = 0;
}
      10:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__bad_interrupt>
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
}
      14:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__bad_interrupt>
    exists = false;
    return false;
  }
  exists = true;
  return true;
}
      18:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__bad_interrupt>
void OneWire::depower()
{
	noInterrupts();
	DIRECT_MODE_INPUT(baseReg, bitmask);
	interrupts();
}
      1c:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__bad_interrupt>
  devices = 0;
  parasite = false;
  bitResolution = 9;
  waitForConversion = true;
  checkForConversion = true;
}
      20:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      24:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__bad_interrupt>
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
      28:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__bad_interrupt>
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
      2c:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__bad_interrupt>
	return operator[](loc);
}

void String::setCharAt(unsigned int loc, char c) 
{
	if (loc < len) buffer[loc] = c;
      30:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__bad_interrupt>
      34:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__bad_interrupt>
      38:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__bad_interrupt>
      3c:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__bad_interrupt>
      40:	0c 94 6b 2f 	jmp	0x5ed6	; 0x5ed6 <__vector_16>
      44:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__bad_interrupt>
      48:	0c 94 45 31 	jmp	0x628a	; 0x628a <__vector_18>
      4c:	0c 94 93 31 	jmp	0x6326	; 0x6326 <__vector_19>
      50:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__bad_interrupt>
      54:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__bad_interrupt>
      58:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__bad_interrupt>
      5c:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__bad_interrupt>
      60:	0c 94 70 26 	jmp	0x4ce0	; 0x4ce0 <__vector_24>
      64:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__bad_interrupt>

00000068 <_ZL7S_table>:
      68:	74 61 62 6c 65 00                                   table.

0000006e <_ZL4S_tr>:
      6e:	74 72 00                                            tr.

00000071 <_ZL4S_td>:
      71:	74 64 00                                            td.

00000074 <_ZL3S_b>:
      74:	62 00                                               b.

00000076 <_ZL4S_0x>:
      76:	30 78 00                                            0x.

00000079 <_ZZN15GB_SerialHelper16sendHttpOKHeaderEhE3__c>:
      79:	48 54 54 50 2f 31 2e 31 20 32 30 30 20 4f 4b 0d     HTTP/1.1 200 OK.
      89:	0a 43 6f 6e 6e 65 63 74 69 6f 6e 3a 20 63 6c 6f     .Connection: clo
      99:	73 65 0d 0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65     se..Content-Type
      a9:	3a 20 74 65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 00     : text/html.....

000000b9 <_ZZN15GB_SerialHelper18sendWifiFrameStartEhjE3__c>:
      b9:	61 74 2b 73 65 6e 64 5f 64 61 74 61 3d 00           at+send_data=.

000000c7 <_ZL6S_CRLF>:
      c7:	0d 0a 00                                            ...

000000ca <_ZL18S_WIFI_RESPONSE_OK>:
      ca:	4f 4b 00                                            OK.

000000cd <_ZL21S_WIFI_RESPONSE_ERROR>:
      cd:	45 52 52 4f 52 00                                   ERROR.

000000d3 <_ZL7S_empty>:
	...

000000d4 <_ZL6S_Next>:
      d4:	20 3e 20 00                                          > .

000000d8 <_ZZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperihE3__c>:
      d8:	65 72 72 6f 72 20 00                                error .

000000df <_ZZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperihE3__c_0>:
      df:	20 28 72 65 62 6f 6f 74 29 00                        (reboot).

000000e9 <_ZZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperihE3__c>:
      e9:	4e 6f 20 72 65 73 70 6f 6e 73 65 00                 No response.

000000f5 <_ZL6S_WIFI>:
      f5:	57 49 46 49 3e 20 00                                WIFI> .

000000fc <_ZZN13GB_PrintDirty16printWithoutCRLFERK6StringE3__c_0>:
      fc:	5c 6e 00                                            \n.

000000ff <_ZZN13GB_PrintDirty16printWithoutCRLFERK6StringE3__c>:
      ff:	5c 72 00                                            \r.

00000102 <_ZL13S_Free_memory>:
     102:	46 72 65 65 20 6d 65 6d 6f 72 79 3a 20 00           Free memory: .

00000110 <_ZL7S_bytes>:
     110:	20 62 79 74 65 73 00                                 bytes.

00000117 <_ZZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhhE3__c_0>:
     117:	4e 4f 54 20 53 54 4f 52 45 44 20 00                 NOT STORED .

00000123 <_ZZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhhE3__c>:
     123:	4c 4f 47 3e 20 00                                   LOG> .

00000129 <_ZZN9GB_Logger18getLogRecordSuffixERK9LogRecordE3__c_0>:
     129:	5d 20 43 00                                         ] C.

0000012d <_ZZN9GB_Logger18getLogRecordSuffixERK9LogRecordE3__c>:
     12d:	20 5b 00                                             [.

00000130 <_ZL24S_WIFI_RESPONSE_WELLCOME>:
     130:	57 65 6c 63 6f 6d 65 20 74 6f 20 52 41 4b 34 31     Welcome to RAK41
     140:	30 0d 0a 00                                         0...

00000144 <_ZL9S_enabled>:
     144:	20 65 6e 61 62 6c 65 64 00                           enabled.

0000014d <_ZL10S_disabled>:
     14d:	20 64 69 73 61 62 6c 65 64 00                        disabled.

00000157 <_ZL11S_connected>:
     157:	20 63 6f 6e 6e 65 63 74 65 64 00                     connected.

00000162 <_ZL14S_disconnected>:
     162:	20 64 69 73 63 6f 6e 6e 65 63 74 65 64 00            disconnected.

00000170 <_ZZN15GB_SerialHelper11checkSerialEhhE3__c_2>:
     170:	53 65 72 69 61 6c 20 57 69 2d 46 69 3a 00           Serial Wi-Fi:.

0000017e <_ZZN15GB_SerialHelper11checkSerialEhhE3__c_1>:
     17e:	53 65 72 69 61 6c 20 6d 6f 6e 69 74 6f 72 3a 20     Serial monitor: 
	...

0000018f <_ZZN15GB_SerialHelper11checkSerialEhhE3__c_0>:
     18f:	4e 6f 74 20 63 6f 72 72 65 6e 74 20 77 65 6c 6c     Not corrent well
     19f:	63 6f 6d 65 20 6d 65 73 73 61 67 65 3a 20 00        come message: .

000001ae <_ZZN15GB_SerialHelper11checkSerialEhhE3__c>:
     1ae:	61 74 2b 72 65 73 65 74 3d 30 00                    at+reset=0.

000001b9 <_ZZN15GB_SerialHelper9startWifiEvE3__c_1>:
     1b9:	53 74 61 72 74 20 66 61 69 6c 65 64 00              Start failed.

000001c6 <_ZZN15GB_SerialHelper9startWifiEvE3__c_0>:
     1c6:	53 74 61 72 74 65 64 00                             Started.

000001ce <_ZZN15GB_SerialHelper9startWifiEvE3__c>:
     1ce:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

000001da <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_7>:
     1da:	61 74 2b 6c 74 63 70 3d 38 30 00                    at+ltcp=80.

000001e5 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_6>:
     1e5:	61 74 2b 61 70 3d 47 72 6f 77 62 6f 78 2c 31 00     at+ap=Growbox,1.

000001f5 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_5>:
     1f5:	61 74 2b 69 70 64 68 63 70 3d 31 00                 at+ipdhcp=1.

00000201 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_4>:
     201:	61 74 2b 69 70 73 74 61 74 69 63 3d 31 39 32 2e     at+ipstatic=192.
     211:	31 36 38 2e 30 2e 31 2c 32 35 35 2e 32 35 35 2e     168.0.1,255.255.
     221:	30 2e 30 2c 30 2e 30 2e 30 2e 30 2c 30 2c 30 00     0.0,0.0.0.0,0,0.

00000231 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_3>:
     231:	61 74 2b 70 73 6b 3d 69 6e 67 6f 64 77 65 74 72     at+psk=ingodwetr
     241:	75 73 74 00                                         ust.

00000245 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_2>:
     245:	61 74 2b 69 70 64 68 63 70 3d 30 00                 at+ipdhcp=0.

00000251 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_1>:
     251:	61 74 2b 63 6f 6e 6e 65 63 74 3d 00                 at+connect=.

0000025d <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_0>:
     25d:	61 74 2b 70 73 6b 3d 00                             at+psk=.

00000265 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c>:
     265:	61 74 2b 73 63 61 6e 3d 30 00                       at+scan=0.

0000026f <_ZL13S_Temperature>:
     26f:	54 65 6d 70 65 72 61 74 75 72 65 00                 Temperature.

0000027b <_ZZ11serialEventvE3__c>:
     27b:	53 65 6e 64 20 72 65 73 70 6f 6e 63 65 20 65 72     Send responce er
     28b:	72 6f 72 00                                         ror.

0000028f <_ZL11S_WIFI_GET_>:
     28f:	47 45 54 20 2f 00                                   GET /.

00000295 <_ZL12S_WIFI_POST_>:
     295:	50 4f 53 54 20 2f 00                                POST /.

0000029c <_ZZN15GB_SerialHelper17handleSerialEventER6StringRhS2_E3__c_1>:
     29c:	53 45 52 49 41 4c 3e 20 00                          SERIAL> .

000002a5 <_ZZN15GB_SerialHelper17handleSerialEventER6StringRhS2_E3__c_0>:
     2a5:	43 6c 69 65 6e 74 20 00                             Client .

000002ad <_ZZN15GB_SerialHelper17handleSerialEventER6StringRhS2_E3__c>:
     2ad:	61 74 2b 72 65 63 76 5f 64 61 74 61 3d 00           at+recv_data=.

000002bb <_ZZN15GB_SerialHelper15closeConnectionEhE3__c>:
     2bb:	61 74 2b 63 6c 73 3d 00                             at+cls=.

000002c3 <_ZL6S_html>:
     2c3:	68 74 6d 6c 00                                      html.

000002c8 <_ZL5S_url>:
     2c8:	2f 00                                               /.

000002ca <_ZL9S_url_log>:
     2ca:	2f 6c 6f 67 00                                      /log.

000002cf <_ZL10S_url_conf>:
     2cf:	2f 63 6f 6e 66 00                                   /conf.

000002d5 <_ZL13S_url_storage>:
     2d5:	2f 73 74 6f 72 61 67 65 00                          /storage.

000002de <_ZL4S_hr>:
     2de:	68 72 00                                            hr.

000002e1 <_ZL5S_pre>:
     2e1:	70 72 65 00                                         pre.

000002e5 <_ZZL14executeCommandR6StringE3__c_3>:
     2e5:	53 74 6f 72 61 67 65 20 64 75 6d 70 00              Storage dump.

000002f2 <_ZZL14executeCommandR6StringE3__c_2>:
     2f2:	43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 00           Configuration.

00000300 <_ZZL14executeCommandR6StringE3__c_1>:
     300:	44 61 69 6c 79 20 6c 6f 67 00                       Daily log.

0000030a <_ZZL14executeCommandR6StringE3__c_0>:
     30a:	53 74 61 74 75 73 00                                Status.

00000311 <_ZZL14executeCommandR6StringE3__c>:
     311:	3c 68 31 3e 47 72 6f 77 62 6f 78 3c 2f 68 31 3e     <h1>Growbox</h1>
	...

00000322 <_ZZL17sendHTTPtagButtonPKcPK19__FlashStringHelperE3__c_1>:
     322:	22 2f 3e 00                                         "/>.

00000326 <_ZZL17sendHTTPtagButtonPKcPK19__FlashStringHelperE3__c_0>:
     326:	27 22 20 76 61 6c 75 65 3d 22 00                    '" value=".

00000331 <_ZZL17sendHTTPtagButtonPKcPK19__FlashStringHelperE3__c>:
     331:	3c 69 6e 70 75 74 20 74 79 70 65 3d 22 62 75 74     <input type="but
     341:	74 6f 6e 22 20 6f 6e 63 6c 69 63 6b 3d 22 64 6f     ton" onclick="do
     351:	63 75 6d 65 6e 74 2e 6c 6f 63 61 74 69 6f 6e 3d     cument.location=
     361:	27 00                                               '.

00000363 <_ZZL14sendBootStatusvE3__c_3>:
     363:	2c 20 6f 76 65 72 66 6c 6f 77 00                    , overflow.

0000036e <_ZZL14sendBootStatusvE3__c_2>:
     36e:	2c 20 72 65 63 6f 72 64 73 20 00                    , records .

00000379 <_ZZL14sendBootStatusvE3__c_1>:
     379:	0d 0a 4c 6f 67 67 65 72 3a 00                       ..Logger:.

00000383 <_ZZL14sendBootStatusvE3__c_0>:
     383:	2c 20 66 69 72 73 74 20 73 74 61 72 74 75 70 3a     , first startup:
     393:	20 00                                                .

00000395 <_ZZL14sendBootStatusvE3__c>:
     395:	43 6f 6e 74 72 6f 6c 6c 65 72 3a 20 73 74 61 72     Controller: star
     3a5:	74 75 70 3a 20 00                                   tup: .

000003ab <_ZZL14sendTimeStatusvE3__c_5>:
     3ab:	3a 30 30 5d 0d 0a 00                                :00]...

000003b2 <_ZZL14sendTimeStatusvE3__c_4>:
     3b2:	3a 30 30 5d 2c 20 64 6f 77 6e 20 74 69 6d 65 20     :00], down time 
     3c2:	5b 00                                               [.

000003c4 <_ZZL14sendTimeStatusvE3__c_3>:
     3c4:	2c 20 75 70 20 74 69 6d 65 20 5b 00                 , up time [.

000003d0 <_ZZL14sendTimeStatusvE3__c_2>:
     3d0:	20 6d 6f 64 65 2c 20 74 69 6d 65 20 00               mode, time .

000003dd <_ZZL14sendTimeStatusvE3__c_1>:
     3dd:	4e 49 47 48 54 00                                   NIGHT.

000003e3 <_ZZL14sendTimeStatusvE3__c_0>:
     3e3:	44 41 59 00                                         DAY.

000003e7 <_ZZL14sendTimeStatusvE3__c>:
     3e7:	43 6c 6f 63 6b 3a 20 00                             Clock: .

000003ef <_ZL11S_PlusMinus>:
     3ef:	2b 2f 2d 00                                         +/-.

000003f3 <_ZZL21sendTemperatureStatusvE3__c_4>:
     3f3:	2c 20 63 72 69 74 69 63 61 6c 20 00                 , critical .

000003ff <_ZZL21sendTemperatureStatusvE3__c_3>:
     3ff:	2c 20 6e 69 67 68 74 20 00                          , night .

00000408 <_ZZL21sendTemperatureStatusvE3__c_2>:
     408:	29 2c 20 64 61 79 20 00                             ), day .

00000410 <_ZZL21sendTemperatureStatusvE3__c_1>:
     410:	20 28 63 6f 75 6e 74 20 00                           (count .

00000419 <_ZZL21sendTemperatureStatusvE3__c_0>:
     419:	2c 20 6e 65 78 74 20 00                             , next .

00000421 <_ZZL21sendTemperatureStatusvE3__c>:
     421:	3a 20 63 75 72 72 65 6e 74 20 00                    : current .

0000042c <_ZZL19printSendPinsStatusvE3__c_13>:
     42c:	52 65 73 65 72 76 65 64 20 62 79 20 49 32 43 2e     Reserved by I2C.
     43c:	20 43 61 6e 20 62 65 20 75 73 65 64 2c 20 69 66      Can be used, if
     44c:	20 53 43 4c 2c 20 53 44 41 20 70 69 6e 73 20 77      SCL, SDA pins w
     45c:	69 6c 6c 20 62 65 20 75 73 65 64 00                 ill be used.

00000468 <_ZZL19printSendPinsStatusvE3__c_12>:
     468:	42 72 65 65 7a 65 00                                Breeze.

0000046f <_ZZL19printSendPinsStatusvE3__c_11>:
     46f:	45 72 72 6f 72 20 73 74 61 74 75 73 00              Error status.

0000047c <_ZZL19printSendPinsStatusvE3__c_10>:
     47c:	55 73 65 20 73 65 72 69 61 6c 20 6d 6f 6e 69 74     Use serial monit
     48c:	6f 72 20 6f 6e 28 31 29 2f 6f 66 66 28 30 29 00     or on(1)/off(0).

0000049c <_ZZL19printSendPinsStatusvE3__c_9>:
     49c:	31 2d 57 69 72 65 3a 20 74 65 72 6d 6f 6d 65 74     1-Wire: termomet
     4ac:	65 72 00                                            er.

000004af <_ZZL19printSendPinsStatusvE3__c_8>:
     4af:	52 65 6c 61 79 3a 20 66 75 6e 20 6d 61 78 28 30     Relay: fun max(0
     4bf:	29 2f 6d 69 6e 28 31 29 20 73 70 65 65 64 20 73     )/min(1) speed s
     4cf:	77 69 74 63 68 00                                   witch.

000004d5 <_ZZL19printSendPinsStatusvE3__c_7>:
     4d5:	52 65 6c 61 79 3a 20 66 75 6e 20 6f 6e 28 30 29     Relay: fun on(0)
     4e5:	2f 6f 66 66 28 31 29 00                             /off(1).

000004ed <_ZZL19printSendPinsStatusvE3__c_6>:
     4ed:	52 65 6c 61 79 3a 20 6c 69 67 68 74 20 6f 6e 28     Relay: light on(
     4fd:	30 29 2f 6f 66 66 28 31 29 00                       0)/off(1).

00000507 <_ZZL19printSendPinsStatusvE3__c_5>:
     507:	52 65 73 65 72 76 65 64 20 62 79 20 53 65 72 69     Reserved by Seri
     517:	61 6c 2f 55 53 42 2e 20 43 61 6e 20 62 65 20 75     al/USB. Can be u
     527:	73 65 64 2c 20 69 66 20 53 65 72 69 61 6c 2f 55     sed, if Serial/U
     537:	53 42 20 77 6f 6e 27 74 20 62 65 20 63 6f 6e 6e     SB won't be conn
     547:	65 63 74 65 64 00                                   ected.

0000054d <_ZZL19printSendPinsStatusvE3__c_4>:
     54d:	20 20 20 00                                            .

00000551 <_ZZL19printSendPinsStatusvE3__c_3>:
     551:	20 20 2d 20 20 20 20 20 00                            -     .

0000055a <_ZZL19printSendPinsStatusvE3__c_2>:
     55a:	20 20 20 20 20 2d 20 20 20 00                            -   .

00000564 <_ZZL19printSendPinsStatusvE3__c_1>:
     564:	20 20 00                                              .

00000567 <_ZZL19printSendPinsStatusvE3__c_0>:
     567:	20 20 00                                              .

0000056a <_ZZL19printSendPinsStatusvE3__c>:
     56a:	50 69 6e 20 4f 55 54 50 55 54 20 49 4e 50 55 54     Pin OUTPUT INPUT
	...

0000057b <_ZZL30printSendConfigurationControlsvE3__c_1>:
     57b:	3c 2f 66 6f 72 6d 3e 00                             </form>.

00000583 <_ZZL30printSendConfigurationControlsvE3__c_0>:
     583:	3c 69 6e 70 75 74 20 74 79 70 65 3d 22 73 75 62     <input type="sub
     593:	6d 69 74 22 20 76 61 6c 75 65 3d 22 53 75 62 6d     mit" value="Subm
     5a3:	69 74 22 3e 00                                      it">.

000005a8 <_ZZL30printSendConfigurationControlsvE3__c>:
     5a8:	3c 66 6f 72 6d 20 61 63 74 69 6f 6e 3d 22 2f 22     <form action="/"
     5b8:	20 6d 65 74 68 6f 64 3d 22 70 6f 73 74 22 3e 00      method="post">.

000005c8 <_ZZL16printSendFullLoghhhE3__c>:
     5c8:	4c 6f 67 20 65 6d 70 74 79 00                       Log empty.

000005d2 <_ZZN9GB_Logger23getLogRecordDescriptionER9LogRecordE3__c_1>:
     5d2:	55 6e 6b 6e 6f 77 6e 00                             Unknown.

000005da <_ZZN9GB_Logger23getLogRecordDescriptionER9LogRecordE3__c_0>:
     5da:	55 6e 6b 6e 6f 77 6e 20 65 72 72 6f 72 00           Unknown error.

000005e8 <_ZZN9GB_Logger23getLogRecordDescriptionER9LogRecordE3__c>:
     5e8:	55 6e 6b 6e 6f 77 6e 20 65 76 65 6e 74 00           Unknown event.

000005f6 <_ZZN15GB_SerialHelper22sendHttpNotFoundHeaderEhE3__c>:
     5f6:	48 54 54 50 2f 31 2e 31 20 34 30 34 20 4e 6f 74     HTTP/1.1 404 Not
     606:	20 46 6f 75 6e 64 0d 0a 43 6f 6e 6e 65 63 74 69      Found..Connecti
     616:	6f 6e 3a 20 63 6c 6f 73 65 0d 0a 0d 0a 00           on: close.....

00000624 <_ZZ5setupE3__c_9>:
     624:	66 6c 61 74 36 35 72 6f 75 74 65 72 00              flat65router.

00000631 <_ZZ5setupE3__c_8>:
     631:	48 65 6c 6c 00                                      Hell.

00000636 <_ZZ5setupE3__c_7>:
     636:	47 72 6f 77 62 6f 78 20 73 75 63 63 65 73 73 66     Growbox successf
     646:	75 6c 6c 79 20 73 74 61 72 74 65 64 00              ully started.

00000653 <_ZZ5setupE3__c_6>:
     653:	73 74 6f 72 61 67 65 00                             storage.

0000065b <_ZZ5setupE3__c_5>:
     65b:	74 65 72 6d 6f 6d 65 74 65 72 00                    termometer.

00000666 <_ZZ5setupE3__c_4>:
     666:	63 6c 6f 63 6b 00                                   clock.

0000066c <_ZZ5setupE3__c_1>:
     66c:	6e 6f 74 20 61 6c 6c 20 45 76 65 6e 74 73 20 69     not all Events i
     67c:	6e 69 74 69 61 6c 69 7a 65 64 00                    nitialized.

00000687 <_ZZ5setupE3__c_0>:
     687:	6e 6f 74 20 61 6c 6c 20 45 72 72 6f 72 73 20 69     not all Errors i
     697:	6e 69 74 69 61 6c 69 7a 65 64 00                    nitialized.

000006a2 <_ZZ5setupE3__c>:
     6a2:	73 6f 66 74 77 61 72 65 20 63 6f 6e 66 69 67 75     software configu
     6b2:	72 61 74 69 6f 6e 00                                ration.

000006b9 <_ZZL21printFatalErrorOnBootPK19__FlashStringHelperE3__c>:
     6b9:	46 61 74 61 6c 20 65 72 72 6f 72 3a 20 00           Fatal error: .

000006c7 <_ZZL17printStatusOnBootPK19__FlashStringHelperE3__c_0>:
     6c7:	2e 2e 2e 00                                         ....

000006cb <_ZZL17printStatusOnBootPK19__FlashStringHelperE3__c>:
     6cb:	43 68 65 63 6b 69 6e 67 20 00                       Checking .

000006d5 <_ZZ15initLoggerModelvE3__c_14>:
     6d5:	55 6e 6b 6e 6f 77 6e 20 73 65 72 69 61 6c 20 63     Unknown serial c
     6e5:	6f 6d 6d 61 6e 64 00                                ommand.

000006ec <_ZZ15initLoggerModelvE3__c_13>:
     6ec:	46 41 4e 20 74 75 72 6e 65 64 20 4f 4e 20 4d 41     FAN turned ON MA
     6fc:	58 20 73 70 65 65 64 00                             X speed.

00000704 <_ZZ15initLoggerModelvE3__c_12>:
     704:	46 41 4e 20 74 75 72 6e 65 64 20 4f 4e 20 4d 49     FAN turned ON MI
     714:	4e 20 73 70 65 65 64 00                             N speed.

0000071c <_ZZ15initLoggerModelvE3__c_11>:
     71c:	46 41 4e 20 74 75 72 6e 65 64 20 4f 46 46 00        FAN turned OFF.

0000072b <_ZZ15initLoggerModelvE3__c_10>:
     72b:	4c 49 47 48 54 20 74 75 72 6e 65 64 20 4f 4e 00     LIGHT turned ON.

0000073b <_ZZ15initLoggerModelvE3__c_9>:
     73b:	4c 49 47 48 54 20 74 75 72 6e 65 64 20 4f 46 46     LIGHT turned OFF
	...

0000074c <_ZZ15initLoggerModelvE3__c_8>:
     74c:	47 72 6f 77 62 6f 78 20 73 77 69 74 63 68 65 64     Growbox switched
     75c:	20 74 6f 20 4e 49 47 48 54 20 6d 6f 64 65 00         to NIGHT mode.

0000076b <_ZZ15initLoggerModelvE3__c_7>:
     76b:	47 72 6f 77 62 6f 78 20 73 77 69 74 63 68 65 64     Growbox switched
     77b:	20 74 6f 20 44 41 59 20 6d 6f 64 65 00               to DAY mode.

00000788 <_ZZ15initLoggerModelvE3__c_6>:
     788:	52 45 53 54 41 52 54 45 44 00                       RESTARTED.

00000792 <_ZZ15initLoggerModelvE3__c_5>:
     792:	46 49 52 53 54 20 53 54 41 52 54 55 50 00           FIRST STARTUP.

000007a0 <_ZZ15initLoggerModelvE3__c_4>:
     7a0:	45 72 72 6f 72 3a 20 4d 65 6d 6f 72 79 20 72 65     Error: Memory re
     7b0:	6d 61 69 6e 65 64 20 6c 65 73 73 20 32 30 30 20     mained less 200 
     7c0:	62 79 74 65 73 00                                   bytes.

000007c6 <_ZZ15initLoggerModelvE3__c_3>:
     7c6:	45 72 72 6f 72 3a 20 54 65 72 6d 6f 6d 65 74 65     Error: Termomete
     7d6:	72 20 72 65 74 75 72 6e 65 64 20 43 52 49 54 49     r returned CRITI
     7e6:	43 41 4c 20 76 61 6c 75 65 00                       CAL value.

000007f0 <_ZZ15initLoggerModelvE3__c_2>:
     7f0:	45 72 72 6f 72 3a 20 54 65 72 6d 6f 6d 65 74 65     Error: Termomete
     800:	72 20 72 65 74 75 72 6e 65 64 20 5a 45 52 4f 20     r returned ZERO 
     810:	76 61 6c 75 65 00                                   value.

00000816 <_ZZ15initLoggerModelvE3__c_1>:
     816:	45 72 72 6f 72 3a 20 54 65 72 6d 6f 6d 65 74 65     Error: Termomete
     826:	72 20 64 69 73 63 6f 6e 6e 65 63 74 65 64 00        r disconnected.

00000835 <_ZZ15initLoggerModelvE3__c_0>:
     835:	45 72 72 6f 72 3a 20 54 69 6d 65 72 20 6e 65 65     Error: Timer nee
     845:	64 73 20 73 79 6e 63 00                             ds sync.

0000084d <_ZZ15initLoggerModelvE3__c>:
     84d:	45 72 72 6f 72 3a 20 54 69 6d 65 72 20 6e 6f 74     Error: Timer not
     85d:	20 73 65 74 00                                       set.

00000862 <_ZL11dscrc_table>:
     862:	00 5e bc e2 61 3f dd 83 c2 9c 7e 20 a3 fd 1f 41     .^..a?....~ ...A
     872:	9d c3 21 7f fc a2 40 1e 5f 01 e3 bd 3e 60 82 dc     ..!...@._...>`..
     882:	23 7d 9f c1 42 1c fe a0 e1 bf 5d 03 80 de 3c 62     #}..B.....]...<b
     892:	be e0 02 5c df 81 63 3d 7c 22 c0 9e 1d 43 a1 ff     ...\..c=|"...C..
     8a2:	46 18 fa a4 27 79 9b c5 84 da 38 66 e5 bb 59 07     F...'y....8f..Y.
     8b2:	db 85 67 39 ba e4 06 58 19 47 a5 fb 78 26 c4 9a     ..g9...X.G..x&..
     8c2:	65 3b d9 87 04 5a b8 e6 a7 f9 1b 45 c6 98 7a 24     e;...Z.....E..z$
     8d2:	f8 a6 44 1a 99 c7 25 7b 3a 64 86 d8 5b 05 e7 b9     ..D...%{:d..[...
     8e2:	8c d2 30 6e ed b3 51 0f 4e 10 f2 ac 2f 71 93 cd     ..0n..Q.N.../q..
     8f2:	11 4f ad f3 70 2e cc 92 d3 8d 6f 31 b2 ec 0e 50     .O..p.....o1...P
     902:	af f1 13 4d ce 90 72 2c 6d 33 d1 8f 0c 52 b0 ee     ...M..r,m3...R..
     912:	32 6c 8e d0 53 0d ef b1 f0 ae 4c 12 91 cf 2d 73     2l..S.....L...-s
     922:	ca 94 76 28 ab f5 17 49 08 56 b4 ea 69 37 d5 8b     ..v(...I.V..i7..
     932:	57 09 eb b5 36 68 8a d4 95 cb 29 77 f4 aa 48 16     W...6h....)w..H.
     942:	e9 b7 55 0b 88 d6 34 6a 2b 75 97 c9 4a 14 f6 a8     ..U...4j+u..J...
     952:	74 2a c8 96 15 4b a9 f7 b6 e8 0a 54 d7 89 6b 35     t*...K.....T..k5

00000962 <port_to_mode_PGM>:
     962:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000096c <port_to_output_PGM>:
     96c:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000976 <port_to_input_PGM>:
     976:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000980 <digital_pin_to_port_PGM>:
     980:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     990:	03 03 03 03                                         ....

00000994 <digital_pin_to_bit_mask_PGM>:
     994:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     9a4:	04 08 10 20                                         ... 

000009a8 <digital_pin_to_timer_PGM>:
     9a8:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     9b8:	00 00 00 00                                         ....

000009bc <__ctors_start>:
     9bc:	93 05       	cpc	r25, r3
     9be:	42 1d       	adc	r20, r2
     9c0:	14 1e       	adc	r1, r20
     9c2:	1b 1e       	adc	r1, r27
     9c4:	88 21       	and	r24, r8
     9c6:	0c 25       	eor	r16, r12
     9c8:	e0 28       	or	r14, r0
     9ca:	67 33       	cpi	r22, 0x37	; 55

000009cc <__ctors_end>:
     9cc:	0d 1e       	adc	r0, r29

000009ce <__dtors_end>:
     9ce:	11 24       	eor	r1, r1
     9d0:	1f be       	out	0x3f, r1	; 63
     9d2:	cf ef       	ldi	r28, 0xFF	; 255
     9d4:	d8 e0       	ldi	r29, 0x08	; 8
     9d6:	de bf       	out	0x3e, r29	; 62
     9d8:	cd bf       	out	0x3d, r28	; 61

000009da <__do_copy_data>:
     9da:	11 e0       	ldi	r17, 0x01	; 1
     9dc:	a0 e0       	ldi	r26, 0x00	; 0
     9de:	b1 e0       	ldi	r27, 0x01	; 1
     9e0:	ee e0       	ldi	r30, 0x0E	; 14
     9e2:	f9 e7       	ldi	r31, 0x79	; 121
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <.do_copy_data_start>

000009e6 <.do_copy_data_loop>:
     9e6:	05 90       	lpm	r0, Z+
     9e8:	0d 92       	st	X+, r0

000009ea <.do_copy_data_start>:
     9ea:	ac 33       	cpi	r26, 0x3C	; 60
     9ec:	b1 07       	cpc	r27, r17
     9ee:	d9 f7       	brne	.-10     	; 0x9e6 <.do_copy_data_loop>

000009f0 <__do_clear_bss>:
     9f0:	13 e0       	ldi	r17, 0x03	; 3
     9f2:	ac e3       	ldi	r26, 0x3C	; 60
     9f4:	b1 e0       	ldi	r27, 0x01	; 1
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <.do_clear_bss_start>

000009f8 <.do_clear_bss_loop>:
     9f8:	1d 92       	st	X+, r1

000009fa <.do_clear_bss_start>:
     9fa:	a2 3d       	cpi	r26, 0xD2	; 210
     9fc:	b1 07       	cpc	r27, r17
     9fe:	e1 f7       	brne	.-8      	; 0x9f8 <.do_clear_bss_loop>

00000a00 <__do_global_ctors>:
     a00:	19 e0       	ldi	r17, 0x09	; 9
     a02:	cc ec       	ldi	r28, 0xCC	; 204
     a04:	d9 e0       	ldi	r29, 0x09	; 9
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <.do_global_ctors_start>

00000a08 <.do_global_ctors_loop>:
     a08:	22 97       	sbiw	r28, 0x02	; 2
     a0a:	fe 01       	movw	r30, r28
     a0c:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <__tablejump__>

00000a10 <.do_global_ctors_start>:
     a10:	cc 3b       	cpi	r28, 0xBC	; 188
     a12:	d1 07       	cpc	r29, r17
     a14:	c9 f7       	brne	.-14     	; 0xa08 <.do_global_ctors_loop>
     a16:	0e 94 bd 33 	call	0x677a	; 0x677a <main>
     a1a:	0c 94 7a 3c 	jmp	0x78f4	; 0x78f4 <__do_global_dtors>

00000a1e <__bad_interrupt>:
     a1e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000a22 <strlen_P>:
     a22:	fc 01       	movw	r30, r24
     a24:	05 90       	lpm	r0, Z+
     a26:	00 20       	and	r0, r0
     a28:	e9 f7       	brne	.-6      	; 0xa24 <strlen_P+0x2>
     a2a:	80 95       	com	r24
     a2c:	90 95       	com	r25
     a2e:	8e 0f       	add	r24, r30
     a30:	9f 1f       	adc	r25, r31
     a32:	08 95       	ret

00000a34 <memcpy>:
     a34:	fb 01       	movw	r30, r22
     a36:	dc 01       	movw	r26, r24
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <memcpy+0xa>
     a3a:	01 90       	ld	r0, Z+
     a3c:	0d 92       	st	X+, r0
     a3e:	41 50       	subi	r20, 0x01	; 1
     a40:	50 40       	sbci	r21, 0x00	; 0
     a42:	d8 f7       	brcc	.-10     	; 0xa3a <memcpy+0x6>
     a44:	08 95       	ret

00000a46 <strchr>:
     a46:	fc 01       	movw	r30, r24
     a48:	81 91       	ld	r24, Z+
     a4a:	86 17       	cp	r24, r22
     a4c:	21 f0       	breq	.+8      	; 0xa56 <strchr+0x10>
     a4e:	88 23       	and	r24, r24
     a50:	d9 f7       	brne	.-10     	; 0xa48 <strchr+0x2>
     a52:	99 27       	eor	r25, r25
     a54:	08 95       	ret
     a56:	31 97       	sbiw	r30, 0x01	; 1
     a58:	cf 01       	movw	r24, r30
     a5a:	08 95       	ret

00000a5c <strcmp>:
     a5c:	fb 01       	movw	r30, r22
     a5e:	dc 01       	movw	r26, r24
     a60:	8d 91       	ld	r24, X+
     a62:	01 90       	ld	r0, Z+
     a64:	80 19       	sub	r24, r0
     a66:	01 10       	cpse	r0, r1
     a68:	d9 f3       	breq	.-10     	; 0xa60 <strcmp+0x4>
     a6a:	99 0b       	sbc	r25, r25
     a6c:	08 95       	ret

00000a6e <strcpy>:
     a6e:	fb 01       	movw	r30, r22
     a70:	dc 01       	movw	r26, r24
     a72:	01 90       	ld	r0, Z+
     a74:	0d 92       	st	X+, r0
     a76:	00 20       	and	r0, r0
     a78:	e1 f7       	brne	.-8      	; 0xa72 <strcpy+0x4>
     a7a:	08 95       	ret

00000a7c <strncmp>:
     a7c:	fb 01       	movw	r30, r22
     a7e:	dc 01       	movw	r26, r24
     a80:	41 50       	subi	r20, 0x01	; 1
     a82:	50 40       	sbci	r21, 0x00	; 0
     a84:	30 f0       	brcs	.+12     	; 0xa92 <strncmp+0x16>
     a86:	8d 91       	ld	r24, X+
     a88:	01 90       	ld	r0, Z+
     a8a:	80 19       	sub	r24, r0
     a8c:	19 f4       	brne	.+6      	; 0xa94 <strncmp+0x18>
     a8e:	00 20       	and	r0, r0
     a90:	b9 f7       	brne	.-18     	; 0xa80 <strncmp+0x4>
     a92:	88 1b       	sub	r24, r24
     a94:	99 0b       	sbc	r25, r25
     a96:	08 95       	ret

00000a98 <itoa>:
     a98:	fb 01       	movw	r30, r22
     a9a:	9f 01       	movw	r18, r30
     a9c:	e8 94       	clt
     a9e:	42 30       	cpi	r20, 0x02	; 2
     aa0:	c4 f0       	brlt	.+48     	; 0xad2 <itoa+0x3a>
     aa2:	45 32       	cpi	r20, 0x25	; 37
     aa4:	b4 f4       	brge	.+44     	; 0xad2 <itoa+0x3a>
     aa6:	4a 30       	cpi	r20, 0x0A	; 10
     aa8:	29 f4       	brne	.+10     	; 0xab4 <itoa+0x1c>
     aaa:	97 fb       	bst	r25, 7
     aac:	1e f4       	brtc	.+6      	; 0xab4 <itoa+0x1c>
     aae:	90 95       	com	r25
     ab0:	81 95       	neg	r24
     ab2:	9f 4f       	sbci	r25, 0xFF	; 255
     ab4:	64 2f       	mov	r22, r20
     ab6:	77 27       	eor	r23, r23
     ab8:	0e 94 18 3c 	call	0x7830	; 0x7830 <__udivmodhi4>
     abc:	80 5d       	subi	r24, 0xD0	; 208
     abe:	8a 33       	cpi	r24, 0x3A	; 58
     ac0:	0c f0       	brlt	.+2      	; 0xac4 <itoa+0x2c>
     ac2:	89 5d       	subi	r24, 0xD9	; 217
     ac4:	81 93       	st	Z+, r24
     ac6:	cb 01       	movw	r24, r22
     ac8:	00 97       	sbiw	r24, 0x00	; 0
     aca:	a1 f7       	brne	.-24     	; 0xab4 <itoa+0x1c>
     acc:	16 f4       	brtc	.+4      	; 0xad2 <itoa+0x3a>
     ace:	5d e2       	ldi	r21, 0x2D	; 45
     ad0:	51 93       	st	Z+, r21
     ad2:	10 82       	st	Z, r1
     ad4:	c9 01       	movw	r24, r18
     ad6:	0c 94 83 05 	jmp	0xb06	; 0xb06 <strrev>

00000ada <utoa>:
     ada:	fb 01       	movw	r30, r22
     adc:	9f 01       	movw	r18, r30
     ade:	42 30       	cpi	r20, 0x02	; 2
     ae0:	74 f0       	brlt	.+28     	; 0xafe <utoa+0x24>
     ae2:	45 32       	cpi	r20, 0x25	; 37
     ae4:	64 f4       	brge	.+24     	; 0xafe <utoa+0x24>
     ae6:	64 2f       	mov	r22, r20
     ae8:	77 27       	eor	r23, r23
     aea:	0e 94 18 3c 	call	0x7830	; 0x7830 <__udivmodhi4>
     aee:	80 5d       	subi	r24, 0xD0	; 208
     af0:	8a 33       	cpi	r24, 0x3A	; 58
     af2:	0c f0       	brlt	.+2      	; 0xaf6 <utoa+0x1c>
     af4:	89 5d       	subi	r24, 0xD9	; 217
     af6:	81 93       	st	Z+, r24
     af8:	cb 01       	movw	r24, r22
     afa:	00 97       	sbiw	r24, 0x00	; 0
     afc:	a1 f7       	brne	.-24     	; 0xae6 <utoa+0xc>
     afe:	10 82       	st	Z, r1
     b00:	c9 01       	movw	r24, r18
     b02:	0c 94 83 05 	jmp	0xb06	; 0xb06 <strrev>

00000b06 <strrev>:
     b06:	dc 01       	movw	r26, r24
     b08:	fc 01       	movw	r30, r24
     b0a:	67 2f       	mov	r22, r23
     b0c:	71 91       	ld	r23, Z+
     b0e:	77 23       	and	r23, r23
     b10:	e1 f7       	brne	.-8      	; 0xb0a <strrev+0x4>
     b12:	32 97       	sbiw	r30, 0x02	; 2
     b14:	04 c0       	rjmp	.+8      	; 0xb1e <strrev+0x18>
     b16:	7c 91       	ld	r23, X
     b18:	6d 93       	st	X+, r22
     b1a:	70 83       	st	Z, r23
     b1c:	62 91       	ld	r22, -Z
     b1e:	ae 17       	cp	r26, r30
     b20:	bf 07       	cpc	r27, r31
     b22:	c8 f3       	brcs	.-14     	; 0xb16 <strrev+0x10>
     b24:	08 95       	ret

00000b26 <_GLOBAL__I_g_oneWirePin>:
     b26:	8c e3       	ldi	r24, 0x3C	; 60
     b28:	91 e0       	ldi	r25, 0x01	; 1
     b2a:	68 e0       	ldi	r22, 0x08	; 8
     b2c:	0e 94 ca 2a 	call	0x5594	; 0x5594 <_ZN7OneWireC1Eh>
     b30:	08 95       	ret

00000b32 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord>:
    out += ' '; 
    return out;
  }

  static const __FlashStringHelper* getLogRecordDescription(LogRecord &logRecord) {
    byte data = (logRecord.data & B00111111);   
     b32:	fc 01       	movw	r30, r24
     b34:	24 81       	ldd	r18, Z+4	; 0x04
     b36:	42 2f       	mov	r20, r18
     b38:	4f 73       	andi	r20, 0x3F	; 63

    return out;
  }

  static boolean isEvent(const LogRecord &logRecord){
    return (logRecord.data & B11000000) == B00000000;
     b3a:	82 2f       	mov	r24, r18
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	80 7c       	andi	r24, 0xC0	; 192
     b40:	90 70       	andi	r25, 0x00	; 0
    return out;
  }

  static const __FlashStringHelper* getLogRecordDescription(LogRecord &logRecord) {
    byte data = (logRecord.data & B00111111);   
    if (isEvent(logRecord)){
     b42:	00 97       	sbiw	r24, 0x00	; 0
     b44:	91 f4       	brne	.+36     	; 0xb6a <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x38>
  static Event* findByIndex(byte index){
    //Serial.print("search ev: ");    
    //Serial.println(index);
    // Serial.print("lastAddedEvent ev: ");
    //Serial.println(lastAddedEvent->description);
    Event* currentItemPtr = lastAddedEvent;
     b46:	e0 91 4f 01 	lds	r30, 0x014F
     b4a:	f0 91 50 01 	lds	r31, 0x0150
     b4e:	07 c0       	rjmp	.+14     	; 0xb5e <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x2c>
    while (currentItemPtr != 0){
      //Serial.println(currentItemPtr->description);
      if (currentItemPtr->index == index) {
     b50:	82 81       	ldd	r24, Z+2	; 0x02
     b52:	84 17       	cp	r24, r20
     b54:	39 f0       	breq	.+14     	; 0xb64 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x32>
        return currentItemPtr;
      }
      currentItemPtr = (Event*)currentItemPtr->nextEvent;
     b56:	80 81       	ld	r24, Z
     b58:	91 81       	ldd	r25, Z+1	; 0x01
     b5a:	9c 01       	movw	r18, r24
     b5c:	f9 01       	movw	r30, r18
    //Serial.print("search ev: ");    
    //Serial.println(index);
    // Serial.print("lastAddedEvent ev: ");
    //Serial.println(lastAddedEvent->description);
    Event* currentItemPtr = lastAddedEvent;
    while (currentItemPtr != 0){
     b5e:	30 97       	sbiw	r30, 0x00	; 0
     b60:	b9 f7       	brne	.-18     	; 0xb50 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x1e>
     b62:	29 c0       	rjmp	.+82     	; 0xbb6 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x84>
      Event* foundItemPtr = Event::findByIndex(data);
      if (foundItemPtr == 0){
        return F("Unknown event");
      } 
      else {
        return foundItemPtr->description;
     b64:	23 81       	ldd	r18, Z+3	; 0x03
     b66:	34 81       	ldd	r19, Z+4	; 0x04
     b68:	24 c0       	rjmp	.+72     	; 0xbb2 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x80>
      }
    } 
    else if (isTemperature(logRecord)){
     b6a:	80 3c       	cpi	r24, 0xC0	; 192
     b6c:	91 05       	cpc	r25, r1
     b6e:	19 f4       	brne	.+6      	; 0xb76 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x44>
      return FS(S_Temperature);
     b70:	2f e6       	ldi	r18, 0x6F	; 111
     b72:	32 e0       	ldi	r19, 0x02	; 2
     b74:	1e c0       	rjmp	.+60     	; 0xbb2 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x80>
    } 
    else if (isError(logRecord)){    
     b76:	80 34       	cpi	r24, 0x40	; 64
     b78:	91 05       	cpc	r25, r1
     b7a:	c9 f4       	brne	.+50     	; 0xbae <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x7c>
      byte sequence = (data & B00001111); 
     b7c:	52 2f       	mov	r21, r18
     b7e:	5f 70       	andi	r21, 0x0F	; 15
      byte sequenceSize = (data & B00110000)>>4; 
     b80:	42 95       	swap	r20
     b82:	4f 70       	andi	r20, 0x0F	; 15
    this->sequenceSize = sequenceSize;
    this->description = description;
  }
  
  static Error* findByIndex(byte sequence, byte sequenceSize){
    Error* currentItemPtr = lastAddedItem;
     b84:	e0 91 4d 01 	lds	r30, 0x014D
     b88:	f0 91 4e 01 	lds	r31, 0x014E
     b8c:	0a c0       	rjmp	.+20     	; 0xba2 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x70>
    while (currentItemPtr != 0){
      if (currentItemPtr->sequence == sequence && currentItemPtr->sequenceSize == sequenceSize) {
     b8e:	82 81       	ldd	r24, Z+2	; 0x02
     b90:	85 17       	cp	r24, r21
     b92:	19 f4       	brne	.+6      	; 0xb9a <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x68>
     b94:	83 81       	ldd	r24, Z+3	; 0x03
     b96:	84 17       	cp	r24, r20
     b98:	39 f0       	breq	.+14     	; 0xba8 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x76>
        return currentItemPtr;
      }
      currentItemPtr = (Error*)currentItemPtr->nextError;
     b9a:	80 81       	ld	r24, Z
     b9c:	91 81       	ldd	r25, Z+1	; 0x01
     b9e:	9c 01       	movw	r18, r24
     ba0:	f9 01       	movw	r30, r18
    this->description = description;
  }
  
  static Error* findByIndex(byte sequence, byte sequenceSize){
    Error* currentItemPtr = lastAddedItem;
    while (currentItemPtr != 0){
     ba2:	30 97       	sbiw	r30, 0x00	; 0
     ba4:	a1 f7       	brne	.-24     	; 0xb8e <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x5c>
     ba6:	0a c0       	rjmp	.+20     	; 0xbbc <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x8a>
      Error* foundItemPtr = Error::findByIndex(sequence, sequenceSize);
      if (foundItemPtr == 0){
        return F("Unknown error");
      } 
      else {
        return foundItemPtr->description;
     ba8:	24 81       	ldd	r18, Z+4	; 0x04
     baa:	35 81       	ldd	r19, Z+5	; 0x05
     bac:	02 c0       	rjmp	.+4      	; 0xbb2 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x80>
      }
    } 
    else {
      return F("Unknown");
     bae:	22 ed       	ldi	r18, 0xD2	; 210
     bb0:	35 e0       	ldi	r19, 0x05	; 5
    }
  }
     bb2:	c9 01       	movw	r24, r18
     bb4:	08 95       	ret
  static const __FlashStringHelper* getLogRecordDescription(LogRecord &logRecord) {
    byte data = (logRecord.data & B00111111);   
    if (isEvent(logRecord)){
      Event* foundItemPtr = Event::findByIndex(data);
      if (foundItemPtr == 0){
        return F("Unknown event");
     bb6:	28 ee       	ldi	r18, 0xE8	; 232
     bb8:	35 e0       	ldi	r19, 0x05	; 5
     bba:	fb cf       	rjmp	.-10     	; 0xbb2 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x80>
    else if (isError(logRecord)){    
      byte sequence = (data & B00001111); 
      byte sequenceSize = (data & B00110000)>>4; 
      Error* foundItemPtr = Error::findByIndex(sequence, sequenceSize);
      if (foundItemPtr == 0){
        return F("Unknown error");
     bbc:	2a ed       	ldi	r18, 0xDA	; 218
     bbe:	35 e0       	ldi	r19, 0x05	; 5
     bc0:	f8 cf       	rjmp	.-16     	; 0xbb2 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x80>

00000bc2 <_ZN10GB_Storage5writeEjPKvh>:
    else {
      return 0xFF;
    }
  }

  static void write(word address, const void* data, const byte sizeofData) {
     bc2:	af 92       	push	r10
     bc4:	bf 92       	push	r11
     bc6:	df 92       	push	r13
     bc8:	ef 92       	push	r14
     bca:	ff 92       	push	r15
     bcc:	0f 93       	push	r16
     bce:	1f 93       	push	r17
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	ec 01       	movw	r28, r24
     bd6:	5b 01       	movw	r10, r22
     bd8:	00 e0       	ldi	r16, 0x00	; 0
     bda:	10 e0       	ldi	r17, 0x00	; 0
    for (word c = 0; c < sizeofData; c++){
     bdc:	e4 2e       	mov	r14, r20
     bde:	ff 24       	eor	r15, r15
     be0:	2a c0       	rjmp	.+84     	; 0xc36 <_ZN10GB_Storage5writeEjPKvh+0x74>
      byte value = ((byte*)data)[c];
     be2:	f5 01       	movw	r30, r10
     be4:	e0 0f       	add	r30, r16
     be6:	f1 1f       	adc	r31, r17
     be8:	d0 80       	ld	r13, Z
      return true;
    return false;
  }

  static void write(const word address, const byte data) {
    if (address >= CAPACITY){
     bea:	80 e1       	ldi	r24, 0x10	; 16
     bec:	c0 30       	cpi	r28, 0x00	; 0
     bee:	d8 07       	cpc	r29, r24
     bf0:	f8 f4       	brcc	.+62     	; 0xc30 <_ZN10GB_Storage5writeEjPKvh+0x6e>
      return;
    }
    Wire.beginTransmission(AT24C32);
     bf2:	8f e9       	ldi	r24, 0x9F	; 159
     bf4:	92 e0       	ldi	r25, 0x02	; 2
     bf6:	60 e5       	ldi	r22, 0x50	; 80
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((byte)(address >> 8)); // MSB
     bfe:	8f e9       	ldi	r24, 0x9F	; 159
     c00:	92 e0       	ldi	r25, 0x02	; 2
     c02:	6d 2f       	mov	r22, r29
     c04:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <_ZN7TwoWire5writeEh>
    Wire.write((byte)(address & 0xFF)); // LSB
     c08:	8f e9       	ldi	r24, 0x9F	; 159
     c0a:	92 e0       	ldi	r25, 0x02	; 2
     c0c:	6c 2f       	mov	r22, r28
     c0e:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <_ZN7TwoWire5writeEh>
    Wire.write(data);
     c12:	8f e9       	ldi	r24, 0x9F	; 159
     c14:	92 e0       	ldi	r25, 0x02	; 2
     c16:	6d 2d       	mov	r22, r13
     c18:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <_ZN7TwoWire5writeEh>
    Wire.endTransmission();  
     c1c:	8f e9       	ldi	r24, 0x9F	; 159
     c1e:	92 e0       	ldi	r25, 0x02	; 2
     c20:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <_ZN7TwoWire15endTransmissionEv>
    delay(10);  // http://www.hobbytronics.co.uk/arduino-external-eeprom
     c24:	6a e0       	ldi	r22, 0x0A	; 10
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <delay>
      return 0xFF;
    }
  }

  static void write(word address, const void* data, const byte sizeofData) {
    for (word c = 0; c < sizeofData; c++){
     c30:	0f 5f       	subi	r16, 0xFF	; 255
     c32:	1f 4f       	sbci	r17, 0xFF	; 255
     c34:	21 96       	adiw	r28, 0x01	; 1
     c36:	0e 15       	cp	r16, r14
     c38:	1f 05       	cpc	r17, r15
     c3a:	98 f2       	brcs	.-90     	; 0xbe2 <_ZN10GB_Storage5writeEjPKvh+0x20>
      byte value = ((byte*)data)[c];
      write(address + c, value);
    }
  }
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	1f 91       	pop	r17
     c42:	0f 91       	pop	r16
     c44:	ff 90       	pop	r15
     c46:	ef 90       	pop	r14
     c48:	df 90       	pop	r13
     c4a:	bf 90       	pop	r11
     c4c:	af 90       	pop	r10
     c4e:	08 95       	ret

00000c50 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord>:

  /////////////////////////////////////////////////////////////////////
  //                            LOG RECORDS                          //
  /////////////////////////////////////////////////////////////////////

  static boolean storeLogRecord(LogRecord &logRecord){ 
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	ec 01       	movw	r28, r24
    boolean storeLog = g_isGrowboxStarted && isBootRecordCorrect() && bootRecord.boolPreferencies.isLoggerEnabled && GB_Storage::isPresent(); // TODO check in another places
     c56:	80 91 4a 01 	lds	r24, 0x014A
     c5a:	88 23       	and	r24, r24
     c5c:	09 f4       	brne	.+2      	; 0xc60 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0x10>
     c5e:	52 c0       	rjmp	.+164    	; 0xd04 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb4>
  }

private :

  static boolean isBootRecordCorrect(){ // TODO rename it
    return (bootRecord.first_magic == MAGIC_NUMBER) && (bootRecord.last_magic == MAGIC_NUMBER);
     c60:	80 91 c1 01 	lds	r24, 0x01C1
     c64:	90 91 c2 01 	lds	r25, 0x01C2
     c68:	85 55       	subi	r24, 0x55	; 85
     c6a:	9a 4a       	sbci	r25, 0xAA	; 170
     c6c:	09 f0       	breq	.+2      	; 0xc70 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0x20>
     c6e:	4a c0       	rjmp	.+148    	; 0xd04 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb4>
     c70:	80 91 df 01 	lds	r24, 0x01DF
     c74:	90 91 e0 01 	lds	r25, 0x01E0
     c78:	85 55       	subi	r24, 0x55	; 85
     c7a:	9a 4a       	sbci	r25, 0xAA	; 170
     c7c:	09 f0       	breq	.+2      	; 0xc80 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0x30>
     c7e:	42 c0       	rjmp	.+132    	; 0xd04 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb4>
  /////////////////////////////////////////////////////////////////////
  //                            LOG RECORDS                          //
  /////////////////////////////////////////////////////////////////////

  static boolean storeLogRecord(LogRecord &logRecord){ 
    boolean storeLog = g_isGrowboxStarted && isBootRecordCorrect() && bootRecord.boolPreferencies.isLoggerEnabled && GB_Storage::isPresent(); // TODO check in another places
     c80:	80 91 cd 01 	lds	r24, 0x01CD
     c84:	86 95       	lsr	r24
     c86:	83 70       	andi	r24, 0x03	; 3
     c88:	e9 f1       	breq	.+122    	; 0xd04 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb4>
  static const int AT24C32 = 0x50; // External EEPROM I2C address
public:
  static const word CAPACITY = 0x1000; // 4K byte = 32K bit

  static boolean isPresent(void) {     // check if the device is present
    Wire.beginTransmission(AT24C32);
     c8a:	8f e9       	ldi	r24, 0x9F	; 159
     c8c:	92 e0       	ldi	r25, 0x02	; 2
     c8e:	60 e5       	ldi	r22, 0x50	; 80
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_ZN7TwoWire17beginTransmissionEi>
    if (Wire.endTransmission() == 0)
     c96:	8f e9       	ldi	r24, 0x9F	; 159
     c98:	92 e0       	ldi	r25, 0x02	; 2
     c9a:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <_ZN7TwoWire15endTransmissionEv>
     c9e:	88 23       	and	r24, r24
     ca0:	89 f5       	brne	.+98     	; 0xd04 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb4>
    if (!storeLog){
      return false;
    }
    GB_Storage::write(bootRecord.nextLogRecordAddress, &logRecord, sizeof(LogRecord));
     ca2:	80 91 cb 01 	lds	r24, 0x01CB
     ca6:	90 91 cc 01 	lds	r25, 0x01CC
     caa:	be 01       	movw	r22, r28
     cac:	45 e0       	ldi	r20, 0x05	; 5
     cae:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <_ZN10GB_Storage5writeEjPKvh>
  static boolean isBootRecordCorrect(){ // TODO rename it
    return (bootRecord.first_magic == MAGIC_NUMBER) && (bootRecord.last_magic == MAGIC_NUMBER);
  }

  static void increaseLogPointer(){
    bootRecord.nextLogRecordAddress += sizeof(LogRecord); 
     cb2:	80 91 cb 01 	lds	r24, 0x01CB
     cb6:	90 91 cc 01 	lds	r25, 0x01CC
     cba:	05 96       	adiw	r24, 0x05	; 5
     cbc:	90 93 cc 01 	sts	0x01CC, r25
     cc0:	80 93 cb 01 	sts	0x01CB, r24
    if (bootRecord.nextLogRecordAddress >= (sizeof(BootRecord) + LOG_RECORD_OVERFLOW_OFFSET)){
     cc4:	8c 5f       	subi	r24, 0xFC	; 252
     cc6:	9f 40       	sbci	r25, 0x0F	; 15
     cc8:	a0 f0       	brcs	.+40     	; 0xcf2 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xa2>
      bootRecord.nextLogRecordAddress = sizeof(BootRecord);
     cca:	80 e2       	ldi	r24, 0x20	; 32
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	90 93 cc 01 	sts	0x01CC, r25
     cd2:	80 93 cb 01 	sts	0x01CB, r24
      if (!bootRecord.boolPreferencies.isLogOverflow){
     cd6:	80 91 cd 01 	lds	r24, 0x01CD
     cda:	80 fd       	sbrc	r24, 0
     cdc:	0a c0       	rjmp	.+20     	; 0xcf2 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xa2>
        bootRecord.boolPreferencies.isLogOverflow = true;
     cde:	81 60       	ori	r24, 0x01	; 1
     ce0:	80 93 cd 01 	sts	0x01CD, r24
        GB_Storage::write(OFFSETOF(BootRecord, boolPreferencies), &(bootRecord.boolPreferencies), sizeof(bootRecord.boolPreferencies)); 
     ce4:	8c e0       	ldi	r24, 0x0C	; 12
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	6d ec       	ldi	r22, 0xCD	; 205
     cea:	71 e0       	ldi	r23, 0x01	; 1
     cec:	41 e0       	ldi	r20, 0x01	; 1
     cee:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <_ZN10GB_Storage5writeEjPKvh>
      }
    }
    GB_Storage::write(OFFSETOF(BootRecord, nextLogRecordAddress), &(bootRecord.nextLogRecordAddress), sizeof(bootRecord.nextLogRecordAddress)); 
     cf2:	8a e0       	ldi	r24, 0x0A	; 10
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	6b ec       	ldi	r22, 0xCB	; 203
     cf8:	71 e0       	ldi	r23, 0x01	; 1
     cfa:	42 e0       	ldi	r20, 0x02	; 2
     cfc:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <_ZN10GB_Storage5writeEjPKvh>
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	01 c0       	rjmp	.+2      	; 0xd06 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb6>
    if (!storeLog){
      return false;
    }
    GB_Storage::write(bootRecord.nextLogRecordAddress, &logRecord, sizeof(LogRecord));
    increaseLogPointer();
    return true;
     d04:	80 e0       	ldi	r24, 0x00	; 0
  }
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	08 95       	ret

00000d0c <_ZN10GB_Storage4readEj>:
    Wire.write(data);
    Wire.endTransmission();  
    delay(10);  // http://www.hobbytronics.co.uk/arduino-external-eeprom
  }

  static byte read(word address) {
     d0c:	0f 93       	push	r16
     d0e:	1f 93       	push	r17
     d10:	8c 01       	movw	r16, r24
    Wire.beginTransmission(AT24C32);
     d12:	8f e9       	ldi	r24, 0x9F	; 159
     d14:	92 e0       	ldi	r25, 0x02	; 2
     d16:	60 e5       	ldi	r22, 0x50	; 80
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((byte)(address >> 8)); // MSB
     d1e:	8f e9       	ldi	r24, 0x9F	; 159
     d20:	92 e0       	ldi	r25, 0x02	; 2
     d22:	61 2f       	mov	r22, r17
     d24:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <_ZN7TwoWire5writeEh>
    Wire.write((byte)(address & 0xFF)); // LSB
     d28:	8f e9       	ldi	r24, 0x9F	; 159
     d2a:	92 e0       	ldi	r25, 0x02	; 2
     d2c:	60 2f       	mov	r22, r16
     d2e:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <_ZN7TwoWire5writeEh>
    Wire.endTransmission();
     d32:	8f e9       	ldi	r24, 0x9F	; 159
     d34:	92 e0       	ldi	r25, 0x02	; 2
     d36:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <_ZN7TwoWire15endTransmissionEv>
    delay(10);  // http://www.hobbytronics.co.uk/arduino-external-eeprom
     d3a:	6a e0       	ldi	r22, 0x0A	; 10
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <delay>
    Wire.requestFrom(AT24C32, 1);
     d46:	8f e9       	ldi	r24, 0x9F	; 159
     d48:	92 e0       	ldi	r25, 0x02	; 2
     d4a:	60 e5       	ldi	r22, 0x50	; 80
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	41 e0       	ldi	r20, 0x01	; 1
     d50:	50 e0       	ldi	r21, 0x00	; 0
     d52:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <_ZN7TwoWire11requestFromEii>
    if (Wire.available()) {
     d56:	8f e9       	ldi	r24, 0x9F	; 159
     d58:	92 e0       	ldi	r25, 0x02	; 2
     d5a:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <_ZN7TwoWire9availableEv>
     d5e:	89 2b       	or	r24, r25
     d60:	11 f4       	brne	.+4      	; 0xd66 <_ZN10GB_Storage4readEj+0x5a>
     d62:	8f ef       	ldi	r24, 0xFF	; 255
     d64:	04 c0       	rjmp	.+8      	; 0xd6e <_ZN10GB_Storage4readEj+0x62>
      return Wire.read();
     d66:	8f e9       	ldi	r24, 0x9F	; 159
     d68:	92 e0       	ldi	r25, 0x02	; 2
     d6a:	0e 94 e5 24 	call	0x49ca	; 0x49ca <_ZN7TwoWire4readEv>
    } 
    else {
      return 0xFF;
    }
  }
     d6e:	1f 91       	pop	r17
     d70:	0f 91       	pop	r16
     d72:	08 95       	ret

00000d74 <_ZL15flashStringLoadPK19__FlashStringHelper>:

static boolean flashStringEquals(const char PROGMEM* pstr, const String &str){ 
  return flashStringEquals((const __FlashStringHelper*) pstr, str);
}

static String flashStringLoad(const __FlashStringHelper* fstr){ 
     d74:	cf 92       	push	r12
     d76:	df 92       	push	r13
     d78:	ef 92       	push	r14
     d7a:	ff 92       	push	r15
     d7c:	0f 93       	push	r16
     d7e:	1f 93       	push	r17
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	f8 2e       	mov	r15, r24
     d86:	e9 2e       	mov	r14, r25
     d88:	6b 01       	movw	r12, r22
  String str;
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	71 e0       	ldi	r23, 0x01	; 1
     d8e:	0e 94 fe 37 	call	0x6ffc	; 0x6ffc <_ZN6StringC1EPKc>
  HTTP_TAG_OPEN, HTTP_TAG_CLOSED, HTTP_TAG_SINGLE
};

static int flashStringLength(const __FlashStringHelper* fstr){ 
    const char PROGMEM * pstr = (const char PROGMEM *) fstr;
    return strlen_P(pstr);
     d92:	c6 01       	movw	r24, r12
     d94:	0e 94 11 05 	call	0xa22	; 0xa22 <strlen_P>
     d98:	ec 01       	movw	r28, r24
     d9a:	00 e0       	ldi	r16, 0x00	; 0
     d9c:	10 e0       	ldi	r17, 0x00	; 0
     d9e:	0b c0       	rjmp	.+22     	; 0xdb6 <_ZL15flashStringLoadPK19__FlashStringHelper+0x42>
static char flashStringCharAt(const __FlashStringHelper* fstr, int index){ 
  if (index >= flashStringLength(fstr)){
    return 0xFF; 
  }
  const char PROGMEM * pstr = (const char PROGMEM *) fstr;
  return pgm_read_byte(pstr+index);
     da0:	f6 01       	movw	r30, r12
     da2:	e0 0f       	add	r30, r16
     da4:	f1 1f       	adc	r31, r17
     da6:	e4 91       	lpm	r30, Z+
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
     da8:	8f 2d       	mov	r24, r15
     daa:	9e 2d       	mov	r25, r14
     dac:	6e 2f       	mov	r22, r30
     dae:	0e 94 9a 37 	call	0x6f34	; 0x6f34 <_ZN6String6concatEc>
  return flashStringEquals((const __FlashStringHelper*) pstr, str);
}

static String flashStringLoad(const __FlashStringHelper* fstr){ 
  String str;
  for (int i = 0; i< flashStringLength(fstr); i++){
     db2:	0f 5f       	subi	r16, 0xFF	; 255
     db4:	1f 4f       	sbci	r17, 0xFF	; 255
     db6:	0c 17       	cp	r16, r28
     db8:	1d 07       	cpc	r17, r29
     dba:	94 f3       	brlt	.-28     	; 0xda0 <_ZL15flashStringLoadPK19__FlashStringHelper+0x2c>
    str += flashStringCharAt(fstr, i);
  }
  return str;
}
     dbc:	8f 2d       	mov	r24, r15
     dbe:	9e 2d       	mov	r25, r14
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	ff 90       	pop	r15
     dca:	ef 90       	pop	r14
     dcc:	df 90       	pop	r13
     dce:	cf 90       	pop	r12
     dd0:	08 95       	ret

00000dd2 <_ZL15flashStringLoadPKc>:

static String flashStringLoad(const char PROGMEM* pstr){ 
     dd2:	0f 93       	push	r16
     dd4:	1f 93       	push	r17
     dd6:	8c 01       	movw	r16, r24
  return flashStringLoad((const __FlashStringHelper*) pstr);
     dd8:	0e 94 ba 06 	call	0xd74	; 0xd74 <_ZL15flashStringLoadPK19__FlashStringHelper>
}
     ddc:	c8 01       	movw	r24, r16
     dde:	1f 91       	pop	r17
     de0:	0f 91       	pop	r16
     de2:	08 95       	ret

00000de4 <_ZN13GB_PrintDirty6getHEXEhh>:
    }
    out += number;
    return out.substring(out.length()-numberOfDigits);
  }

  static String getHEX(byte number, boolean addPrefix = false){
     de4:	bf 92       	push	r11
     de6:	cf 92       	push	r12
     de8:	df 92       	push	r13
     dea:	ef 92       	push	r14
     dec:	ff 92       	push	r15
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	6c 97       	sbiw	r28, 0x1c	; 28
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	f8 94       	cli
     e00:	de bf       	out	0x3e, r29	; 62
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	cd bf       	out	0x3d, r28	; 61
     e06:	d8 2e       	mov	r13, r24
     e08:	c9 2e       	mov	r12, r25
     e0a:	16 2f       	mov	r17, r22
     e0c:	b4 2e       	mov	r11, r20
    String out(number, HEX);
     e0e:	40 e1       	ldi	r20, 0x10	; 16
     e10:	0e 94 31 38 	call	0x7062	; 0x7062 <_ZN6StringC1Ehh>
    out.toUpperCase();
     e14:	8d 2d       	mov	r24, r13
     e16:	9c 2d       	mov	r25, r12
     e18:	0e 94 22 36 	call	0x6c44	; 0x6c44 <_ZN6String11toUpperCaseEv>
    if(number < 0x10){
     e1c:	10 31       	cpi	r17, 0x10	; 16
     e1e:	f8 f4       	brcc	.+62     	; 0xe5e <_ZN13GB_PrintDirty6getHEXEhh+0x7a>
      out = String('0') + out;
     e20:	7e 01       	movw	r14, r28
     e22:	08 94       	sec
     e24:	e1 1c       	adc	r14, r1
     e26:	f1 1c       	adc	r15, r1
     e28:	c7 01       	movw	r24, r14
     e2a:	60 e3       	ldi	r22, 0x30	; 48
     e2c:	0e 94 63 38 	call	0x70c6	; 0x70c6 <_ZN6StringC1Ec>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
     e30:	8e 01       	movw	r16, r28
     e32:	08 5f       	subi	r16, 0xF8	; 248
     e34:	1f 4f       	sbci	r17, 0xFF	; 255
     e36:	c8 01       	movw	r24, r16
     e38:	b7 01       	movw	r22, r14
     e3a:	0e 94 e6 38 	call	0x71cc	; 0x71cc <_ZN6StringC2ERKS_>
     e3e:	c8 01       	movw	r24, r16
     e40:	6d 2d       	mov	r22, r13
     e42:	7c 2d       	mov	r23, r12
     e44:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <_ZplRK15StringSumHelperRK6String>
     e48:	bc 01       	movw	r22, r24
     e4a:	8d 2d       	mov	r24, r13
     e4c:	9c 2d       	mov	r25, r12
     e4e:	0e 94 cf 38 	call	0x719e	; 0x719e <_ZN6StringaSERKS_>
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
{
     e52:	c8 01       	movw	r24, r16
     e54:	0e 94 f7 38 	call	0x71ee	; 0x71ee <_ZN6StringD2Ev>
     e58:	c7 01       	movw	r24, r14
     e5a:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    }
    if (addPrefix){
     e5e:	bb 20       	and	r11, r11
     e60:	09 f1       	breq	.+66     	; 0xea4 <_ZN13GB_PrintDirty6getHEXEhh+0xc0>
      out = flashStringLoad(S_0x) + out;
     e62:	8f e0       	ldi	r24, 0x0F	; 15
     e64:	e8 2e       	mov	r14, r24
     e66:	f1 2c       	mov	r15, r1
     e68:	ec 0e       	add	r14, r28
     e6a:	fd 1e       	adc	r15, r29
     e6c:	c7 01       	movw	r24, r14
     e6e:	66 e7       	ldi	r22, 0x76	; 118
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <_ZL15flashStringLoadPKc>
public:
	StringSumHelper(const String &s) : String(s) {}
     e76:	8e 01       	movw	r16, r28
     e78:	0a 5e       	subi	r16, 0xEA	; 234
     e7a:	1f 4f       	sbci	r17, 0xFF	; 255
     e7c:	c8 01       	movw	r24, r16
     e7e:	b7 01       	movw	r22, r14
     e80:	0e 94 e6 38 	call	0x71cc	; 0x71cc <_ZN6StringC2ERKS_>
     e84:	c8 01       	movw	r24, r16
     e86:	6d 2d       	mov	r22, r13
     e88:	7c 2d       	mov	r23, r12
     e8a:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <_ZplRK15StringSumHelperRK6String>
     e8e:	bc 01       	movw	r22, r24
     e90:	8d 2d       	mov	r24, r13
     e92:	9c 2d       	mov	r25, r12
     e94:	0e 94 cf 38 	call	0x719e	; 0x719e <_ZN6StringaSERKS_>
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
{
     e98:	c8 01       	movw	r24, r16
     e9a:	0e 94 f7 38 	call	0x71ee	; 0x71ee <_ZN6StringD2Ev>
     e9e:	c7 01       	movw	r24, r14
     ea0:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    }
    return out;
  }
     ea4:	8d 2d       	mov	r24, r13
     ea6:	9c 2d       	mov	r25, r12
     ea8:	6c 96       	adiw	r28, 0x1c	; 28
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	de bf       	out	0x3e, r29	; 62
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	cd bf       	out	0x3d, r28	; 61
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	1f 91       	pop	r17
     eba:	0f 91       	pop	r16
     ebc:	ff 90       	pop	r15
     ebe:	ef 90       	pop	r14
     ec0:	df 90       	pop	r13
     ec2:	cf 90       	pop	r12
     ec4:	bf 90       	pop	r11
     ec6:	08 95       	ret

00000ec8 <_ZN13GB_PrintDirty8printHEXEhh>:
  // utility function for digital clock display: prints preceding colon and leading 0
  static void print2digits(byte number){
    Serial.print(getFixedDigitsString(number, 2));
  }

  static void printHEX(byte number, boolean addPrefix = false){
     ec8:	0f 93       	push	r16
     eca:	1f 93       	push	r17
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	27 97       	sbiw	r28, 0x07	; 7
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	f8 94       	cli
     eda:	de bf       	out	0x3e, r29	; 62
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	cd bf       	out	0x3d, r28	; 61
     ee0:	68 2f       	mov	r22, r24
    Serial.print(getHEX(number));
     ee2:	8e 01       	movw	r16, r28
     ee4:	0f 5f       	subi	r16, 0xFF	; 255
     ee6:	1f 4f       	sbci	r17, 0xFF	; 255
     ee8:	c8 01       	movw	r24, r16
     eea:	40 e0       	ldi	r20, 0x00	; 0
     eec:	0e 94 f2 06 	call	0xde4	; 0xde4 <_ZN13GB_PrintDirty6getHEXEhh>
     ef0:	8b ea       	ldi	r24, 0xAB	; 171
     ef2:	93 e0       	ldi	r25, 0x03	; 3
     ef4:	b8 01       	movw	r22, r16
     ef6:	0e 94 5a 35 	call	0x6ab4	; 0x6ab4 <_ZN5Print5printERK6String>
     efa:	c8 01       	movw	r24, r16
     efc:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
  }
     f00:	27 96       	adiw	r28, 0x07	; 7
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	cd bf       	out	0x3d, r28	; 61
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	1f 91       	pop	r17
     f12:	0f 91       	pop	r16
     f14:	08 95       	ret

00000f16 <_ZL17flashStringEqualsPK19__FlashStringHelperRK6String>:
  }
  const char PROGMEM * pstr = (const char PROGMEM *) fstr;
  return pgm_read_byte(pstr+index);
}

static boolean flashStringEquals(const __FlashStringHelper* fstr, const String &str){ 
     f16:	af 92       	push	r10
     f18:	bf 92       	push	r11
     f1a:	cf 92       	push	r12
     f1c:	df 92       	push	r13
     f1e:	ef 92       	push	r14
     f20:	ff 92       	push	r15
     f22:	1f 93       	push	r17
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	5c 01       	movw	r10, r24
     f2a:	6b 01       	movw	r12, r22
  HTTP_TAG_OPEN, HTTP_TAG_CLOSED, HTTP_TAG_SINGLE
};

static int flashStringLength(const __FlashStringHelper* fstr){ 
    const char PROGMEM * pstr = (const char PROGMEM *) fstr;
    return strlen_P(pstr);
     f2c:	0e 94 11 05 	call	0xa22	; 0xa22 <strlen_P>
     f30:	7c 01       	movw	r14, r24
  const char PROGMEM * pstr = (const char PROGMEM *) fstr;
  return pgm_read_byte(pstr+index);
}

static boolean flashStringEquals(const __FlashStringHelper* fstr, const String &str){ 
  if (flashStringLength(fstr) != str.length()) {
     f32:	f6 01       	movw	r30, r12
     f34:	84 81       	ldd	r24, Z+4	; 0x04
     f36:	95 81       	ldd	r25, Z+5	; 0x05
     f38:	e8 16       	cp	r14, r24
     f3a:	f9 06       	cpc	r15, r25
     f3c:	99 f4       	brne	.+38     	; 0xf64 <_ZL17flashStringEqualsPK19__FlashStringHelperRK6String+0x4e>
     f3e:	c0 e0       	ldi	r28, 0x00	; 0
     f40:	d0 e0       	ldi	r29, 0x00	; 0
     f42:	0b c0       	rjmp	.+22     	; 0xf5a <_ZL17flashStringEqualsPK19__FlashStringHelperRK6String+0x44>
static char flashStringCharAt(const __FlashStringHelper* fstr, int index){ 
  if (index >= flashStringLength(fstr)){
    return 0xFF; 
  }
  const char PROGMEM * pstr = (const char PROGMEM *) fstr;
  return pgm_read_byte(pstr+index);
     f44:	f5 01       	movw	r30, r10
     f46:	ec 0f       	add	r30, r28
     f48:	fd 1f       	adc	r31, r29
     f4a:	14 91       	lpm	r17, Z+
static boolean flashStringEquals(const __FlashStringHelper* fstr, const String &str){ 
  if (flashStringLength(fstr) != str.length()) {
    return false; 
  }
  for (int i = 0; i< flashStringLength(fstr); i++){
    if (flashStringCharAt(fstr, i) != str[i]){
     f4c:	c6 01       	movw	r24, r12
     f4e:	be 01       	movw	r22, r28
     f50:	0e 94 b6 35 	call	0x6b6c	; 0x6b6c <_ZNK6StringixEj>
     f54:	18 17       	cp	r17, r24
     f56:	31 f4       	brne	.+12     	; 0xf64 <_ZL17flashStringEqualsPK19__FlashStringHelperRK6String+0x4e>

static boolean flashStringEquals(const __FlashStringHelper* fstr, const String &str){ 
  if (flashStringLength(fstr) != str.length()) {
    return false; 
  }
  for (int i = 0; i< flashStringLength(fstr); i++){
     f58:	21 96       	adiw	r28, 0x01	; 1
     f5a:	ce 15       	cp	r28, r14
     f5c:	df 05       	cpc	r29, r15
     f5e:	94 f3       	brlt	.-28     	; 0xf44 <_ZL17flashStringEqualsPK19__FlashStringHelperRK6String+0x2e>
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	01 c0       	rjmp	.+2      	; 0xf66 <_ZL17flashStringEqualsPK19__FlashStringHelperRK6String+0x50>
     f64:	80 e0       	ldi	r24, 0x00	; 0
    if (flashStringCharAt(fstr, i) != str[i]){
      return false;
    }
  }
  return true;
}
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	1f 91       	pop	r17
     f6c:	ff 90       	pop	r15
     f6e:	ef 90       	pop	r14
     f70:	df 90       	pop	r13
     f72:	cf 90       	pop	r12
     f74:	bf 90       	pop	r11
     f76:	af 90       	pop	r10
     f78:	08 95       	ret

00000f7a <_ZN13GB_PrintDirty8printHEXERK6String>:


  static void printHEX(const String &input){   
     f7a:	0f 93       	push	r16
     f7c:	1f 93       	push	r17
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	8c 01       	movw	r16, r24
     f84:	c0 e0       	ldi	r28, 0x00	; 0
     f86:	d0 e0       	ldi	r29, 0x00	; 0
     f88:	13 c0       	rjmp	.+38     	; 0xfb0 <_ZN13GB_PrintDirty8printHEXERK6String+0x36>
    for(int i = 0; i<input.length(); i++){
      byte c = input[i];
     f8a:	c8 01       	movw	r24, r16
     f8c:	be 01       	movw	r22, r28
     f8e:	0e 94 b6 35 	call	0x6b6c	; 0x6b6c <_ZNK6StringixEj>
      printHEX(c);
     f92:	60 e0       	ldi	r22, 0x00	; 0
     f94:	0e 94 64 07 	call	0xec8	; 0xec8 <_ZN13GB_PrintDirty8printHEXEhh>
      if ((i+1)<input.length()) {
     f98:	21 96       	adiw	r28, 0x01	; 1
     f9a:	f8 01       	movw	r30, r16
     f9c:	84 81       	ldd	r24, Z+4	; 0x04
     f9e:	95 81       	ldd	r25, Z+5	; 0x05
     fa0:	c8 17       	cp	r28, r24
     fa2:	d9 07       	cpc	r29, r25
     fa4:	28 f4       	brcc	.+10     	; 0xfb0 <_ZN13GB_PrintDirty8printHEXERK6String+0x36>
        Serial.print(' '); 
     fa6:	8b ea       	ldi	r24, 0xAB	; 171
     fa8:	93 e0       	ldi	r25, 0x03	; 3
     faa:	60 e2       	ldi	r22, 0x20	; 32
     fac:	0e 94 19 34 	call	0x6832	; 0x6832 <_ZN5Print5printEc>
    Serial.print(getHEX(number));
  }


  static void printHEX(const String &input){   
    for(int i = 0; i<input.length(); i++){
     fb0:	f8 01       	movw	r30, r16
     fb2:	84 81       	ldd	r24, Z+4	; 0x04
     fb4:	95 81       	ldd	r25, Z+5	; 0x05
     fb6:	c8 17       	cp	r28, r24
     fb8:	d9 07       	cpc	r29, r25
     fba:	38 f3       	brcs	.-50     	; 0xf8a <_ZN13GB_PrintDirty8printHEXERK6String+0x10>
      printHEX(c);
      if ((i+1)<input.length()) {
        Serial.print(' '); 
      }
    }
  }  
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	08 95       	ret

00000fc6 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String>:

  static void printWithoutCRLF(const String &input){   
     fc6:	0f 93       	push	r16
     fc8:	1f 93       	push	r17
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	8c 01       	movw	r16, r24
     fd0:	c0 e0       	ldi	r28, 0x00	; 0
     fd2:	d0 e0       	ldi	r29, 0x00	; 0
     fd4:	22 c0       	rjmp	.+68     	; 0x101a <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x54>
    for (int i = 0; i<input.length(); i++){
      if (input[i] == '\r'){
     fd6:	c8 01       	movw	r24, r16
     fd8:	be 01       	movw	r22, r28
     fda:	0e 94 b6 35 	call	0x6b6c	; 0x6b6c <_ZNK6StringixEj>
     fde:	8d 30       	cpi	r24, 0x0D	; 13
     fe0:	29 f4       	brne	.+10     	; 0xfec <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x26>
        Serial.print(F("\\r"));
     fe2:	8b ea       	ldi	r24, 0xAB	; 171
     fe4:	93 e0       	ldi	r25, 0x03	; 3
     fe6:	6f ef       	ldi	r22, 0xFF	; 255
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	0a c0       	rjmp	.+20     	; 0x1000 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x3a>
      } 
      else if (input[i] == '\n'){
     fec:	c8 01       	movw	r24, r16
     fee:	be 01       	movw	r22, r28
     ff0:	0e 94 b6 35 	call	0x6b6c	; 0x6b6c <_ZNK6StringixEj>
     ff4:	8a 30       	cpi	r24, 0x0A	; 10
     ff6:	39 f4       	brne	.+14     	; 0x1006 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x40>
        Serial.print(F("\\n"));
     ff8:	8b ea       	ldi	r24, 0xAB	; 171
     ffa:	93 e0       	ldi	r25, 0x03	; 3
     ffc:	6c ef       	ldi	r22, 0xFC	; 252
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	0e 94 f6 33 	call	0x67ec	; 0x67ec <_ZN5Print5printEPK19__FlashStringHelper>
    1004:	09 c0       	rjmp	.+18     	; 0x1018 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x52>
      } 
      else {
        Serial.print(input[i]);
    1006:	c8 01       	movw	r24, r16
    1008:	be 01       	movw	r22, r28
    100a:	0e 94 b6 35 	call	0x6b6c	; 0x6b6c <_ZNK6StringixEj>
    100e:	68 2f       	mov	r22, r24
    1010:	8b ea       	ldi	r24, 0xAB	; 171
    1012:	93 e0       	ldi	r25, 0x03	; 3
    1014:	0e 94 19 34 	call	0x6832	; 0x6832 <_ZN5Print5printEc>
      }
    }
  }  

  static void printWithoutCRLF(const String &input){   
    for (int i = 0; i<input.length(); i++){
    1018:	21 96       	adiw	r28, 0x01	; 1
    101a:	f8 01       	movw	r30, r16
    101c:	84 81       	ldd	r24, Z+4	; 0x04
    101e:	95 81       	ldd	r25, Z+5	; 0x05
    1020:	c8 17       	cp	r28, r24
    1022:	d9 07       	cpc	r29, r25
    1024:	c0 f2       	brcs	.-80     	; 0xfd6 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x10>
      } 
      else {
        Serial.print(input[i]);
      }
    }
  }
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	0f 91       	pop	r16
    102e:	08 95       	ret

00001030 <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>:
    Serial.print(data);
    sendWifiFrameStop();
  }


  static void sendWifiFrameStart(const byte portDescriptor, word length){ // 1024 bytes max (Wi-Fi module restriction)   
    1030:	df 92       	push	r13
    1032:	ef 92       	push	r14
    1034:	ff 92       	push	r15
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	d8 2e       	mov	r13, r24
    103c:	7b 01       	movw	r14, r22
    Serial.print(F("at+send_data="));
    103e:	0b ea       	ldi	r16, 0xAB	; 171
    1040:	13 e0       	ldi	r17, 0x03	; 3
    1042:	c8 01       	movw	r24, r16
    1044:	69 eb       	ldi	r22, 0xB9	; 185
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	0e 94 f6 33 	call	0x67ec	; 0x67ec <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(portDescriptor);
    104c:	c8 01       	movw	r24, r16
    104e:	6d 2d       	mov	r22, r13
    1050:	4a e0       	ldi	r20, 0x0A	; 10
    1052:	50 e0       	ldi	r21, 0x00	; 0
    1054:	0e 94 f5 34 	call	0x69ea	; 0x69ea <_ZN5Print5printEhi>
    Serial.print(',');
    1058:	c8 01       	movw	r24, r16
    105a:	6c e2       	ldi	r22, 0x2C	; 44
    105c:	0e 94 19 34 	call	0x6832	; 0x6832 <_ZN5Print5printEc>
    Serial.print(length);
    1060:	c8 01       	movw	r24, r16
    1062:	b7 01       	movw	r22, r14
    1064:	4a e0       	ldi	r20, 0x0A	; 10
    1066:	50 e0       	ldi	r21, 0x00	; 0
    1068:	0e 94 e4 34 	call	0x69c8	; 0x69c8 <_ZN5Print5printEji>
    Serial.print(',');
    106c:	c8 01       	movw	r24, r16
    106e:	6c e2       	ldi	r22, 0x2C	; 44
    1070:	0e 94 19 34 	call	0x6832	; 0x6832 <_ZN5Print5printEc>
  }
    1074:	1f 91       	pop	r17
    1076:	0f 91       	pop	r16
    1078:	ff 90       	pop	r15
    107a:	ef 90       	pop	r14
    107c:	df 90       	pop	r13
    107e:	08 95       	ret

00001080 <_ZL21printFatalErrorOnBootPK19__FlashStringHelper>:
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	ec 01       	movw	r28, r24
    1086:	80 91 ad 01 	lds	r24, 0x01AD
    108a:	88 23       	and	r24, r24
    108c:	59 f0       	breq	.+22     	; 0x10a4 <_ZL21printFatalErrorOnBootPK19__FlashStringHelper+0x24>
    108e:	8b ea       	ldi	r24, 0xAB	; 171
    1090:	93 e0       	ldi	r25, 0x03	; 3
    1092:	69 eb       	ldi	r22, 0xB9	; 185
    1094:	76 e0       	ldi	r23, 0x06	; 6
    1096:	0e 94 f6 33 	call	0x67ec	; 0x67ec <_ZN5Print5printEPK19__FlashStringHelper>
    109a:	8b ea       	ldi	r24, 0xAB	; 171
    109c:	93 e0       	ldi	r25, 0x03	; 3
    109e:	be 01       	movw	r22, r28
    10a0:	0e 94 41 34 	call	0x6882	; 0x6882 <_ZN5Print7printlnEPK19__FlashStringHelper>
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	08 95       	ret

000010aa <_ZL17printStatusOnBootPK19__FlashStringHelper>:
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	ec 01       	movw	r28, r24
    10b0:	80 91 ad 01 	lds	r24, 0x01AD
    10b4:	88 23       	and	r24, r24
    10b6:	89 f0       	breq	.+34     	; 0x10da <_ZL17printStatusOnBootPK19__FlashStringHelper+0x30>
    10b8:	8b ea       	ldi	r24, 0xAB	; 171
    10ba:	93 e0       	ldi	r25, 0x03	; 3
    10bc:	6b ec       	ldi	r22, 0xCB	; 203
    10be:	76 e0       	ldi	r23, 0x06	; 6
    10c0:	0e 94 f6 33 	call	0x67ec	; 0x67ec <_ZN5Print5printEPK19__FlashStringHelper>
    10c4:	8b ea       	ldi	r24, 0xAB	; 171
    10c6:	93 e0       	ldi	r25, 0x03	; 3
    10c8:	be 01       	movw	r22, r28
    10ca:	0e 94 f6 33 	call	0x67ec	; 0x67ec <_ZN5Print5printEPK19__FlashStringHelper>
    10ce:	8b ea       	ldi	r24, 0xAB	; 171
    10d0:	93 e0       	ldi	r25, 0x03	; 3
    10d2:	67 ec       	ldi	r22, 0xC7	; 199
    10d4:	76 e0       	ldi	r23, 0x06	; 6
    10d6:	0e 94 41 34 	call	0x6882	; 0x6882 <_ZN5Print7printlnEPK19__FlashStringHelper>
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	08 95       	ret

000010e0 <_ZN15GB_SerialHelper24readByteFromSerialBufferERh>:

  /////////////////////////////////////////////////////////////////////
  //                          SERIAL READ                            //
  /////////////////////////////////////////////////////////////////////

  static byte readByteFromSerialBuffer(boolean &isError){
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	ec 01       	movw	r28, r24
    if (Serial.available()){
    10e6:	8b ea       	ldi	r24, 0xAB	; 171
    10e8:	93 e0       	ldi	r25, 0x03	; 3
    10ea:	0e 94 bb 32 	call	0x6576	; 0x6576 <_ZN14HardwareSerial9availableEv>
    10ee:	89 2b       	or	r24, r25
    10f0:	59 f0       	breq	.+22     	; 0x1108 <_ZN15GB_SerialHelper24readByteFromSerialBufferERh+0x28>
      delay(5);
    10f2:	65 e0       	ldi	r22, 0x05	; 5
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <delay>
      return Serial.read();
    10fe:	8b ea       	ldi	r24, 0xAB	; 171
    1100:	93 e0       	ldi	r25, 0x03	; 3
    1102:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <_ZN14HardwareSerial4readEv>
    1106:	03 c0       	rjmp	.+6      	; 0x110e <_ZN15GB_SerialHelper24readByteFromSerialBufferERh+0x2e>
    } 
    else {
      isError = true;
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	88 83       	st	Y, r24
    110c:	8f ef       	ldi	r24, 0xFF	; 255
      return 0xFF;
    } 
  }
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	08 95       	ret

00001114 <_ZN15GB_SerialHelper17cleanSerialBufferEv>:
    }
    isError = ((index) == length); 
  }

  static void cleanSerialBuffer(){
    delay(10);
    1114:	6a e0       	ldi	r22, 0x0A	; 10
    1116:	70 e0       	ldi	r23, 0x00	; 0
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <delay>
    1120:	04 c0       	rjmp	.+8      	; 0x112a <_ZN15GB_SerialHelper17cleanSerialBufferEv+0x16>
    while (Serial.available()){
      Serial.read();
    1122:	8b ea       	ldi	r24, 0xAB	; 171
    1124:	93 e0       	ldi	r25, 0x03	; 3
    1126:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <_ZN14HardwareSerial4readEv>
    isError = ((index) == length); 
  }

  static void cleanSerialBuffer(){
    delay(10);
    while (Serial.available()){
    112a:	8b ea       	ldi	r24, 0xAB	; 171
    112c:	93 e0       	ldi	r25, 0x03	; 3
    112e:	0e 94 bb 32 	call	0x6576	; 0x6576 <_ZN14HardwareSerial9availableEv>
    1132:	89 2b       	or	r24, r25
    1134:	b1 f7       	brne	.-20     	; 0x1122 <_ZN15GB_SerialHelper17cleanSerialBufferEv+0xe>
      Serial.read();
    }
  }
    1136:	08 95       	ret

00001138 <_ZN15GB_SerialHelper13printDirtyEndEv>:
  static /*volatile*/ boolean useSerialMonitor;
  static /*volatile*/ boolean useSerialWifi;


  static void printDirtyEnd(){
    if (useSerialWifi) {
    1138:	80 91 ae 01 	lds	r24, 0x01AE
    113c:	88 23       	and	r24, r24
    113e:	11 f0       	breq	.+4      	; 0x1144 <_ZN15GB_SerialHelper13printDirtyEndEv+0xc>
      cleanSerialBuffer();
    1140:	0e 94 8a 08 	call	0x1114	; 0x1114 <_ZN15GB_SerialHelper17cleanSerialBufferEv>
    1144:	08 95       	ret

00001146 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>:
  }


private:

  static void showWifiStatus(const __FlashStringHelper* str, boolean newLine = true){ //TODO 
    1146:	1f 93       	push	r17
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29
    114c:	ec 01       	movw	r28, r24
    114e:	16 2f       	mov	r17, r22
    if (useSerialMonitor){
    1150:	80 91 ad 01 	lds	r24, 0x01AD
    1154:	88 23       	and	r24, r24
    1156:	79 f0       	breq	.+30     	; 0x1176 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh+0x30>
      Serial.print(FS(S_WIFI));
    1158:	8b ea       	ldi	r24, 0xAB	; 171
    115a:	93 e0       	ldi	r25, 0x03	; 3
    115c:	65 ef       	ldi	r22, 0xF5	; 245
    115e:	70 e0       	ldi	r23, 0x00	; 0
    1160:	0e 94 f6 33 	call	0x67ec	; 0x67ec <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.println(str);
    1164:	8b ea       	ldi	r24, 0xAB	; 171
    1166:	93 e0       	ldi	r25, 0x03	; 3
    1168:	be 01       	movw	r22, r28
    116a:	0e 94 41 34 	call	0x6882	; 0x6882 <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (newLine){    
    116e:	11 23       	and	r17, r17
    1170:	11 f0       	breq	.+4      	; 0x1176 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh+0x30>
        printDirtyEnd();
    1172:	0e 94 9c 08 	call	0x1138	; 0x1138 <_ZN15GB_SerialHelper13printDirtyEndEv>
      }
    }
  }
    1176:	df 91       	pop	r29
    1178:	cf 91       	pop	r28
    117a:	1f 91       	pop	r17
    117c:	08 95       	ret

0000117e <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih>:
    }

    return false;
  }

  static String wifiExecuteRawCommand(const __FlashStringHelper* command = 0, int maxResponseDeleay = -1, boolean rebootOnFalse = true){
    117e:	bf 92       	push	r11
    1180:	cf 92       	push	r12
    1182:	df 92       	push	r13
    1184:	ef 92       	push	r14
    1186:	ff 92       	push	r15
    1188:	0f 93       	push	r16
    118a:	1f 93       	push	r17
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	0f 92       	push	r0
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	d8 2e       	mov	r13, r24
    1198:	c9 2e       	mov	r12, r25
    119a:	7a 01       	movw	r14, r20
    119c:	b2 2e       	mov	r11, r18
    if (command == 0){
    119e:	61 15       	cp	r22, r1
    11a0:	71 05       	cpc	r23, r1
    11a2:	29 f4       	brne	.+10     	; 0x11ae <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih+0x30>
      Serial.println();
    11a4:	8b ea       	ldi	r24, 0xAB	; 171
    11a6:	93 e0       	ldi	r25, 0x03	; 3
    11a8:	0e 94 21 34 	call	0x6842	; 0x6842 <_ZN5Print7printlnEv>
    11ac:	04 c0       	rjmp	.+8      	; 0x11b6 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih+0x38>
    } 
    else {
      Serial.println(command);
    11ae:	8b ea       	ldi	r24, 0xAB	; 171
    11b0:	93 e0       	ldi	r25, 0x03	; 3
    11b2:	0e 94 41 34 	call	0x6882	; 0x6882 <_ZN5Print7printlnEPK19__FlashStringHelper>
    }

    if (maxResponseDeleay < 0){
    11b6:	f7 fe       	sbrs	r15, 7
    11b8:	04 c0       	rjmp	.+8      	; 0x11c2 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih+0x44>
    11ba:	98 e8       	ldi	r25, 0x88	; 136
    11bc:	e9 2e       	mov	r14, r25
    11be:	93 e1       	ldi	r25, 0x13	; 19
    11c0:	f9 2e       	mov	r15, r25
    11c2:	00 e0       	ldi	r16, 0x00	; 0
    11c4:	10 e0       	ldi	r17, 0x00	; 0
      maxResponseDeleay = WIFI_RESPONSE_DELAY_MAX;
    }    

    for (int i=0; i <= maxResponseDeleay; i += WIFI_RESPONSE_CHECK_INTERVAL){
      delay(WIFI_RESPONSE_CHECK_INTERVAL);
    11c6:	6a e0       	ldi	r22, 0x0A	; 10
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <delay>
      if (Serial.available()){
    11d2:	8b ea       	ldi	r24, 0xAB	; 171
    11d4:	93 e0       	ldi	r25, 0x03	; 3
    11d6:	0e 94 bb 32 	call	0x6576	; 0x6576 <_ZN14HardwareSerial9availableEv>
    11da:	89 2b       	or	r24, r25
    11dc:	29 f4       	brne	.+10     	; 0x11e8 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih+0x6a>

    if (maxResponseDeleay < 0){
      maxResponseDeleay = WIFI_RESPONSE_DELAY_MAX;
    }    

    for (int i=0; i <= maxResponseDeleay; i += WIFI_RESPONSE_CHECK_INTERVAL){
    11de:	06 5f       	subi	r16, 0xF6	; 246
    11e0:	1f 4f       	sbci	r17, 0xFF	; 255
    11e2:	e0 16       	cp	r14, r16
    11e4:	f1 06       	cpc	r15, r17
    11e6:	7c f7       	brge	.-34     	; 0x11c6 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih+0x48>
      if (Serial.available()){
        break;
      }
    }

    boolean isReadError = false;
    11e8:	19 82       	std	Y+1, r1	; 0x01
    String input;
    11ea:	0d 2d       	mov	r16, r13
    11ec:	1c 2d       	mov	r17, r12
    11ee:	c8 01       	movw	r24, r16
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	71 e0       	ldi	r23, 0x01	; 1
    11f4:	0e 94 fe 37 	call	0x6ffc	; 0x6ffc <_ZN6StringC1EPKc>
    while (Serial.available()){
      input += (char) readByteFromSerialBuffer(isReadError);
    11f8:	7e 01       	movw	r14, r28
    11fa:	08 94       	sec
    11fc:	e1 1c       	adc	r14, r1
    11fe:	f1 1c       	adc	r15, r1
    1200:	07 c0       	rjmp	.+14     	; 0x1210 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih+0x92>
    1202:	c7 01       	movw	r24, r14
    1204:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN15GB_SerialHelper24readByteFromSerialBufferERh>
    1208:	68 2f       	mov	r22, r24
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    120a:	c8 01       	movw	r24, r16
    120c:	0e 94 9a 37 	call	0x6f34	; 0x6f34 <_ZN6String6concatEc>
      }
    }

    boolean isReadError = false;
    String input;
    while (Serial.available()){
    1210:	8b ea       	ldi	r24, 0xAB	; 171
    1212:	93 e0       	ldi	r25, 0x03	; 3
    1214:	0e 94 bb 32 	call	0x6576	; 0x6576 <_ZN14HardwareSerial9availableEv>
    1218:	89 2b       	or	r24, r25
    121a:	99 f7       	brne	.-26     	; 0x1202 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih+0x84>
      input += (char) readByteFromSerialBuffer(isReadError);
    }

    if (input.length() == 0){
    121c:	f8 01       	movw	r30, r16
    121e:	84 81       	ldd	r24, Z+4	; 0x04
    1220:	95 81       	ldd	r25, Z+5	; 0x05
    1222:	89 2b       	or	r24, r25
    1224:	d1 f4       	brne	.+52     	; 0x125a <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih+0xdc>
      if (useSerialMonitor){   
    1226:	80 91 ad 01 	lds	r24, 0x01AD
    122a:	88 23       	and	r24, r24
    122c:	29 f0       	breq	.+10     	; 0x1238 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih+0xba>
        showWifiStatus(F("No response"), false);
    122e:	89 ee       	ldi	r24, 0xE9	; 233
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	0e 94 a3 08 	call	0x1146	; 0x1146 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>

      }
      if (rebootOnFalse){
    1238:	bb 20       	and	r11, r11
    123a:	49 f0       	breq	.+18     	; 0x124e <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih+0xd0>
        Serial.print(F(" (reboot)"));
    123c:	8b ea       	ldi	r24, 0xAB	; 171
    123e:	93 e0       	ldi	r25, 0x03	; 3
    1240:	6f ed       	ldi	r22, 0xDF	; 223
    1242:	70 e0       	ldi	r23, 0x00	; 0
    1244:	0e 94 f6 33 	call	0x67ec	; 0x67ec <_ZN5Print5printEPK19__FlashStringHelper>
        s_restartWifi = true;
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	80 93 af 01 	sts	0x01AF, r24
      } 
      Serial.println();
    124e:	8b ea       	ldi	r24, 0xAB	; 171
    1250:	93 e0       	ldi	r25, 0x03	; 3
    1252:	0e 94 21 34 	call	0x6842	; 0x6842 <_ZN5Print7printlnEv>
      printDirtyEnd();
    1256:	0e 94 9c 08 	call	0x1138	; 0x1138 <_ZN15GB_SerialHelper13printDirtyEndEv>
    }

    return input;
  }
    125a:	8d 2d       	mov	r24, r13
    125c:	9c 2d       	mov	r25, r12
    125e:	0f 90       	pop	r0
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	1f 91       	pop	r17
    1266:	0f 91       	pop	r16
    1268:	ff 90       	pop	r15
    126a:	ef 90       	pop	r14
    126c:	df 90       	pop	r13
    126e:	cf 90       	pop	r12
    1270:	bf 90       	pop	r11
    1272:	08 95       	ret

00001274 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>:
    }

    return true;
  }

  static boolean wifiExecuteCommand(const __FlashStringHelper* command = 0, int maxResponseDeleay = -1, boolean rebootOnFalse = true){   
    1274:	8f 92       	push	r8
    1276:	9f 92       	push	r9
    1278:	af 92       	push	r10
    127a:	bf 92       	push	r11
    127c:	df 92       	push	r13
    127e:	ef 92       	push	r14
    1280:	ff 92       	push	r15
    1282:	0f 93       	push	r16
    1284:	1f 93       	push	r17
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	6c 97       	sbiw	r28, 0x1c	; 28
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	de bf       	out	0x3e, r29	; 62
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	cd bf       	out	0x3d, r28	; 61
    129a:	8c 01       	movw	r16, r24
    129c:	7b 01       	movw	r14, r22
    129e:	d4 2e       	mov	r13, r20
    String CRLF = flashStringLoad(S_CRLF);
    12a0:	4e 01       	movw	r8, r28
    12a2:	08 94       	sec
    12a4:	81 1c       	adc	r8, r1
    12a6:	91 1c       	adc	r9, r1
    12a8:	c4 01       	movw	r24, r8
    12aa:	67 ec       	ldi	r22, 0xC7	; 199
    12ac:	70 e0       	ldi	r23, 0x00	; 0
    12ae:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <_ZL15flashStringLoadPKc>
    String input = wifiExecuteRawCommand(command,maxResponseDeleay, rebootOnFalse);
    12b2:	38 e0       	ldi	r19, 0x08	; 8
    12b4:	a3 2e       	mov	r10, r19
    12b6:	b1 2c       	mov	r11, r1
    12b8:	ac 0e       	add	r10, r28
    12ba:	bd 1e       	adc	r11, r29
    12bc:	c5 01       	movw	r24, r10
    12be:	b8 01       	movw	r22, r16
    12c0:	a7 01       	movw	r20, r14
    12c2:	2d 2d       	mov	r18, r13
    12c4:	0e 94 bf 08 	call	0x117e	; 0x117e <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih>
    if (input.length() == 0){
    12c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    12ca:	9d 85       	ldd	r25, Y+13	; 0x0d
    12cc:	89 2b       	or	r24, r25
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0x5e>
    12d0:	75 c0       	rjmp	.+234    	; 0x13bc <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0x148>
      // Nothing to do
    } 
    else if (input.startsWith(flashStringLoad(S_WIFI_RESPONSE_OK)) && input.endsWith(CRLF)){
    12d2:	8e 01       	movw	r16, r28
    12d4:	01 5f       	subi	r16, 0xF1	; 241
    12d6:	1f 4f       	sbci	r17, 0xFF	; 255
    12d8:	c8 01       	movw	r24, r16
    12da:	6a ec       	ldi	r22, 0xCA	; 202
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <_ZL15flashStringLoadPKc>
    12e2:	c5 01       	movw	r24, r10
    12e4:	b8 01       	movw	r22, r16
    12e6:	0e 94 99 36 	call	0x6d32	; 0x6d32 <_ZNK6String10startsWithERKS_>
    12ea:	88 23       	and	r24, r24
    12ec:	41 f0       	breq	.+16     	; 0x12fe <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0x8a>
    12ee:	c5 01       	movw	r24, r10
    12f0:	b4 01       	movw	r22, r8
    12f2:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZNK6String8endsWithERKS_>
    12f6:	88 23       	and	r24, r24
    12f8:	11 f0       	breq	.+4      	; 0x12fe <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0x8a>
    12fa:	11 e0       	ldi	r17, 0x01	; 1
    12fc:	01 c0       	rjmp	.+2      	; 0x1300 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0x8c>
    12fe:	10 e0       	ldi	r17, 0x00	; 0
    1300:	ce 01       	movw	r24, r28
    1302:	0f 96       	adiw	r24, 0x0f	; 15
    1304:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    1308:	11 23       	and	r17, r17
    130a:	11 f0       	breq	.+4      	; 0x1310 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0x9c>
    130c:	11 e0       	ldi	r17, 0x01	; 1
    130e:	57 c0       	rjmp	.+174    	; 0x13be <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0x14a>
      return true;
    } 
    else if (input.startsWith(flashStringLoad(S_WIFI_RESPONSE_ERROR)) && input.endsWith(CRLF)){
    1310:	8e 01       	movw	r16, r28
    1312:	0a 5e       	subi	r16, 0xEA	; 234
    1314:	1f 4f       	sbci	r17, 0xFF	; 255
    1316:	c8 01       	movw	r24, r16
    1318:	6d ec       	ldi	r22, 0xCD	; 205
    131a:	70 e0       	ldi	r23, 0x00	; 0
    131c:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <_ZL15flashStringLoadPKc>
    1320:	28 e0       	ldi	r18, 0x08	; 8
    1322:	e2 2e       	mov	r14, r18
    1324:	f1 2c       	mov	r15, r1
    1326:	ec 0e       	add	r14, r28
    1328:	fd 1e       	adc	r15, r29
    132a:	c7 01       	movw	r24, r14
    132c:	b8 01       	movw	r22, r16
    132e:	0e 94 99 36 	call	0x6d32	; 0x6d32 <_ZNK6String10startsWithERKS_>
    1332:	88 23       	and	r24, r24
    1334:	51 f0       	breq	.+20     	; 0x134a <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0xd6>
    1336:	c7 01       	movw	r24, r14
    1338:	be 01       	movw	r22, r28
    133a:	6f 5f       	subi	r22, 0xFF	; 255
    133c:	7f 4f       	sbci	r23, 0xFF	; 255
    133e:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZNK6String8endsWithERKS_>
    1342:	88 23       	and	r24, r24
    1344:	11 f0       	breq	.+4      	; 0x134a <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0xd6>
    1346:	11 e0       	ldi	r17, 0x01	; 1
    1348:	01 c0       	rjmp	.+2      	; 0x134c <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0xd8>
    134a:	10 e0       	ldi	r17, 0x00	; 0
    134c:	ce 01       	movw	r24, r28
    134e:	46 96       	adiw	r24, 0x16	; 22
    1350:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    1354:	80 91 ad 01 	lds	r24, 0x01AD
    1358:	11 23       	and	r17, r17
    135a:	a1 f0       	breq	.+40     	; 0x1384 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0x110>
      if (useSerialMonitor){
    135c:	88 23       	and	r24, r24
    135e:	71 f1       	breq	.+92     	; 0x13bc <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0x148>
        byte errorCode = input[5];
    1360:	ce 01       	movw	r24, r28
    1362:	08 96       	adiw	r24, 0x08	; 8
    1364:	65 e0       	ldi	r22, 0x05	; 5
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	0e 94 a1 35 	call	0x6b42	; 0x6b42 <_ZN6StringixEj>
    136c:	fc 01       	movw	r30, r24
    136e:	10 81       	ld	r17, Z
        showWifiStatus(F("error "), false);
    1370:	88 ed       	ldi	r24, 0xD8	; 216
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	0e 94 a3 08 	call	0x1146	; 0x1146 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
        GB_PrintDirty::printHEX(errorCode, true);
    137a:	81 2f       	mov	r24, r17
    137c:	61 e0       	ldi	r22, 0x01	; 1
    137e:	0e 94 64 07 	call	0xec8	; 0xec8 <_ZN13GB_PrintDirty8printHEXEhh>
    1382:	16 c0       	rjmp	.+44     	; 0x13b0 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0x13c>
        Serial.println();
        printDirtyEnd();
      }      
    } 
    else {
      if (useSerialMonitor){
    1384:	88 23       	and	r24, r24
    1386:	d1 f0       	breq	.+52     	; 0x13bc <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0x148>
        showWifiStatus(FS(S_empty), false);
    1388:	83 ed       	ldi	r24, 0xD3	; 211
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	60 e0       	ldi	r22, 0x00	; 0
    138e:	0e 94 a3 08 	call	0x1146	; 0x1146 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
        GB_PrintDirty::printWithoutCRLF(input);
    1392:	8e 01       	movw	r16, r28
    1394:	08 5f       	subi	r16, 0xF8	; 248
    1396:	1f 4f       	sbci	r17, 0xFF	; 255
    1398:	c8 01       	movw	r24, r16
    139a:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String>
        Serial.print(FS(S_Next));
    139e:	8b ea       	ldi	r24, 0xAB	; 171
    13a0:	93 e0       	ldi	r25, 0x03	; 3
    13a2:	64 ed       	ldi	r22, 0xD4	; 212
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	0e 94 f6 33 	call	0x67ec	; 0x67ec <_ZN5Print5printEPK19__FlashStringHelper>
        GB_PrintDirty::printHEX(input); 
    13aa:	c8 01       	movw	r24, r16
    13ac:	0e 94 bd 07 	call	0xf7a	; 0xf7a <_ZN13GB_PrintDirty8printHEXERK6String>
        Serial.println();
    13b0:	8b ea       	ldi	r24, 0xAB	; 171
    13b2:	93 e0       	ldi	r25, 0x03	; 3
    13b4:	0e 94 21 34 	call	0x6842	; 0x6842 <_ZN5Print7printlnEv>
        printDirtyEnd();
    13b8:	0e 94 9c 08 	call	0x1138	; 0x1138 <_ZN15GB_SerialHelper13printDirtyEndEv>
    13bc:	10 e0       	ldi	r17, 0x00	; 0
      }
    }

    return false;
    13be:	ce 01       	movw	r24, r28
    13c0:	08 96       	adiw	r24, 0x08	; 8
    13c2:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    13c6:	ce 01       	movw	r24, r28
    13c8:	01 96       	adiw	r24, 0x01	; 1
    13ca:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
  }
    13ce:	81 2f       	mov	r24, r17
    13d0:	6c 96       	adiw	r28, 0x1c	; 28
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	cf 91       	pop	r28
    13de:	df 91       	pop	r29
    13e0:	1f 91       	pop	r17
    13e2:	0f 91       	pop	r16
    13e4:	ff 90       	pop	r15
    13e6:	ef 90       	pop	r14
    13e8:	df 90       	pop	r13
    13ea:	bf 90       	pop	r11
    13ec:	af 90       	pop	r10
    13ee:	9f 90       	pop	r9
    13f0:	8f 90       	pop	r8
    13f2:	08 95       	ret

000013f4 <_ZN15GB_SerialHelper12sendWifiDataEhPK19__FlashStringHelper>:
      }
    }
    return sendWifiFrameStop(false);
  } 

  static void sendWifiData(const byte portDescriptor, const __FlashStringHelper* data){ // INT_MAX (own test) or 1400 bytes max (Wi-Fi spec restriction)
    13f4:	1f 93       	push	r17
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	18 2f       	mov	r17, r24
    13fc:	eb 01       	movw	r28, r22
  HTTP_TAG_OPEN, HTTP_TAG_CLOSED, HTTP_TAG_SINGLE
};

static int flashStringLength(const __FlashStringHelper* fstr){ 
    const char PROGMEM * pstr = (const char PROGMEM *) fstr;
    return strlen_P(pstr);
    13fe:	cb 01       	movw	r24, r22
    1400:	0e 94 11 05 	call	0xa22	; 0xa22 <strlen_P>
    1404:	bc 01       	movw	r22, r24
    int length = flashStringLength(data);
    if (length == 0){
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	79 f0       	breq	.+30     	; 0x1428 <_ZN15GB_SerialHelper12sendWifiDataEhPK19__FlashStringHelper+0x34>
      return;
    }
    sendWifiFrameStart(portDescriptor, length);
    140a:	81 2f       	mov	r24, r17
    140c:	0e 94 18 08 	call	0x1030	; 0x1030 <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>
    Serial.print(data);
    1410:	8b ea       	ldi	r24, 0xAB	; 171
    1412:	93 e0       	ldi	r25, 0x03	; 3
    1414:	be 01       	movw	r22, r28
    1416:	0e 94 f6 33 	call	0x67ec	; 0x67ec <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(length);
    Serial.print(',');
  }

  static boolean sendWifiFrameStop(boolean rebootOnFalse = true){
    return wifiExecuteCommand(0,-1,rebootOnFalse);
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	6f ef       	ldi	r22, 0xFF	; 255
    1420:	7f ef       	ldi	r23, 0xFF	; 255
    1422:	41 e0       	ldi	r20, 0x01	; 1
    1424:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
      return;
    }
    sendWifiFrameStart(portDescriptor, length);
    Serial.print(data);
    sendWifiFrameStop();
  }
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	1f 91       	pop	r17
    142e:	08 95       	ret

00001430 <_ZN15GB_SerialHelper16sendHttpOKHeaderEh>:
  /////////////////////////////////////////////////////////////////////
  //                            WEB SERVER                           //
  /////////////////////////////////////////////////////////////////////

  static void sendHttpOKHeader(const byte portDescriptor){ 
    sendWifiData(portDescriptor, F("HTTP/1.1 200 OK\r\nConnection: close\r\nContent-Type: text/html\r\n\r\n"));
    1430:	69 e7       	ldi	r22, 0x79	; 121
    1432:	70 e0       	ldi	r23, 0x00	; 0
    1434:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <_ZN15GB_SerialHelper12sendWifiDataEhPK19__FlashStringHelper>
  }
    1438:	08 95       	ret

0000143a <_ZN15GB_SerialHelper22sendHttpNotFoundHeaderEh>:

  static void sendHttpNotFoundHeader(const byte portDescriptor){ 
    sendWifiData(portDescriptor, F("HTTP/1.1 404 Not Found\r\nConnection: close\r\n\r\n"));
    143a:	66 ef       	ldi	r22, 0xF6	; 246
    143c:	75 e0       	ldi	r23, 0x05	; 5
    143e:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <_ZN15GB_SerialHelper12sendWifiDataEhPK19__FlashStringHelper>
     Serial.print(',');
     Serial.print(code); 
     Serial.print(F(",0")); //length of data
     return wifiExecuteCommand(); 
     */
  }
    1442:	08 95       	ret

00001444 <_ZN15GB_SerialHelper15closeConnectionEh>:

  static boolean sendWifiFrameStop(boolean rebootOnFalse = true){
    return wifiExecuteCommand(0,-1,rebootOnFalse);
  }

  static boolean closeConnection(const byte portDescriptor){
    1444:	ff 92       	push	r15
    1446:	0f 93       	push	r16
    1448:	1f 93       	push	r17
    144a:	f8 2e       	mov	r15, r24
    Serial.print(F("at+cls="));
    144c:	0b ea       	ldi	r16, 0xAB	; 171
    144e:	13 e0       	ldi	r17, 0x03	; 3
    1450:	c8 01       	movw	r24, r16
    1452:	6b eb       	ldi	r22, 0xBB	; 187
    1454:	72 e0       	ldi	r23, 0x02	; 2
    1456:	0e 94 f6 33 	call	0x67ec	; 0x67ec <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(portDescriptor);
    145a:	c8 01       	movw	r24, r16
    145c:	6f 2d       	mov	r22, r15
    145e:	4a e0       	ldi	r20, 0x0A	; 10
    1460:	50 e0       	ldi	r21, 0x00	; 0
    1462:	0e 94 f5 34 	call	0x69ea	; 0x69ea <_ZN5Print5printEhi>
    return wifiExecuteCommand(); 
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	6f ef       	ldi	r22, 0xFF	; 255
    146c:	7f ef       	ldi	r23, 0xFF	; 255
    146e:	41 e0       	ldi	r20, 0x01	; 1
    1470:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
  }
    1474:	1f 91       	pop	r17
    1476:	0f 91       	pop	r16
    1478:	ff 90       	pop	r15
    147a:	08 95       	ret

0000147c <_ZN15GB_SerialHelper15startWifiSilentEv>:
  //                             Wi-FI DEVICE                        //
  /////////////////////////////////////////////////////////////////////

  static boolean startWifiSilent(){

    cleanSerialBuffer();
    147c:	0e 94 8a 08 	call	0x1114	; 0x1114 <_ZN15GB_SerialHelper17cleanSerialBufferEv>

    if (!wifiExecuteCommand(F("at+scan=0"))){
    1480:	85 e6       	ldi	r24, 0x65	; 101
    1482:	92 e0       	ldi	r25, 0x02	; 2
    1484:	6f ef       	ldi	r22, 0xFF	; 255
    1486:	7f ef       	ldi	r23, 0xFF	; 255
    1488:	41 e0       	ldi	r20, 0x01	; 1
    148a:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
    148e:	88 23       	and	r24, r24
    1490:	09 f4       	brne	.+2      	; 0x1494 <_ZN15GB_SerialHelper15startWifiSilentEv+0x18>
    1492:	69 c0       	rjmp	.+210    	; 0x1566 <_ZN15GB_SerialHelper15startWifiSilentEv+0xea>
      return false;
    } 

    boolean isStationMode = (s_wifiSID.length()>0);    
    if (isStationMode){
    1494:	80 91 b4 01 	lds	r24, 0x01B4
    1498:	90 91 b5 01 	lds	r25, 0x01B5
    149c:	89 2b       	or	r24, r25
    149e:	a1 f1       	breq	.+104    	; 0x1508 <_ZN15GB_SerialHelper15startWifiSilentEv+0x8c>
      if (s_wifiPass.length() > 0){
    14a0:	80 91 bb 01 	lds	r24, 0x01BB
    14a4:	90 91 bc 01 	lds	r25, 0x01BC
    14a8:	89 2b       	or	r24, r25
    14aa:	b1 f0       	breq	.+44     	; 0x14d8 <_ZN15GB_SerialHelper15startWifiSilentEv+0x5c>
        Serial.print(F("at+psk="));
    14ac:	8b ea       	ldi	r24, 0xAB	; 171
    14ae:	93 e0       	ldi	r25, 0x03	; 3
    14b0:	6d e5       	ldi	r22, 0x5D	; 93
    14b2:	72 e0       	ldi	r23, 0x02	; 2
    14b4:	0e 94 f6 33 	call	0x67ec	; 0x67ec <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.print(s_wifiPass);
    14b8:	8b ea       	ldi	r24, 0xAB	; 171
    14ba:	93 e0       	ldi	r25, 0x03	; 3
    14bc:	67 eb       	ldi	r22, 0xB7	; 183
    14be:	71 e0       	ldi	r23, 0x01	; 1
    14c0:	0e 94 5a 35 	call	0x6ab4	; 0x6ab4 <_ZN5Print5printERK6String>
        if (!wifiExecuteCommand()){
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	6f ef       	ldi	r22, 0xFF	; 255
    14ca:	7f ef       	ldi	r23, 0xFF	; 255
    14cc:	41 e0       	ldi	r20, 0x01	; 1
    14ce:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
    14d2:	88 23       	and	r24, r24
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <_ZN15GB_SerialHelper15startWifiSilentEv+0x5c>
    14d6:	47 c0       	rjmp	.+142    	; 0x1566 <_ZN15GB_SerialHelper15startWifiSilentEv+0xea>
          return false;
        }
      } 

      Serial.print(F("at+connect="));
    14d8:	8b ea       	ldi	r24, 0xAB	; 171
    14da:	93 e0       	ldi	r25, 0x03	; 3
    14dc:	61 e5       	ldi	r22, 0x51	; 81
    14de:	72 e0       	ldi	r23, 0x02	; 2
    14e0:	0e 94 f6 33 	call	0x67ec	; 0x67ec <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(s_wifiSID);
    14e4:	8b ea       	ldi	r24, 0xAB	; 171
    14e6:	93 e0       	ldi	r25, 0x03	; 3
    14e8:	60 eb       	ldi	r22, 0xB0	; 176
    14ea:	71 e0       	ldi	r23, 0x01	; 1
    14ec:	0e 94 5a 35 	call	0x6ab4	; 0x6ab4 <_ZN5Print5printERK6String>
      if (!wifiExecuteCommand()){
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	6f ef       	ldi	r22, 0xFF	; 255
    14f6:	7f ef       	ldi	r23, 0xFF	; 255
    14f8:	41 e0       	ldi	r20, 0x01	; 1
    14fa:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
    14fe:	88 23       	and	r24, r24
    1500:	91 f1       	breq	.+100    	; 0x1566 <_ZN15GB_SerialHelper15startWifiSilentEv+0xea>
        return false;
      }

      if (!wifiExecuteCommand(F("at+ipdhcp=0"))){
    1502:	85 e4       	ldi	r24, 0x45	; 69
    1504:	92 e0       	ldi	r25, 0x02	; 2
    1506:	1d c0       	rjmp	.+58     	; 0x1542 <_ZN15GB_SerialHelper15startWifiSilentEv+0xc6>
        return false;
      }
    }
    else {
      if (!wifiExecuteCommand(F("at+psk=ingodwetrust"))){
    1508:	81 e3       	ldi	r24, 0x31	; 49
    150a:	92 e0       	ldi	r25, 0x02	; 2
    150c:	6f ef       	ldi	r22, 0xFF	; 255
    150e:	7f ef       	ldi	r23, 0xFF	; 255
    1510:	41 e0       	ldi	r20, 0x01	; 1
    1512:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
    1516:	88 23       	and	r24, r24
    1518:	31 f1       	breq	.+76     	; 0x1566 <_ZN15GB_SerialHelper15startWifiSilentEv+0xea>
        return false;
      }  

      // at+ipstatic=<ip>,<mask>,<gateway>,<dns server1>(0 is valid),<dns server2>(0 is valid)\r\n
      if (!wifiExecuteCommand(F("at+ipstatic=192.168.0.1,255.255.0.0,0.0.0.0,0,0"))){
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	92 e0       	ldi	r25, 0x02	; 2
    151e:	6f ef       	ldi	r22, 0xFF	; 255
    1520:	7f ef       	ldi	r23, 0xFF	; 255
    1522:	41 e0       	ldi	r20, 0x01	; 1
    1524:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
    1528:	88 23       	and	r24, r24
    152a:	e9 f0       	breq	.+58     	; 0x1566 <_ZN15GB_SerialHelper15startWifiSilentEv+0xea>
        return false;
      }

      if (!wifiExecuteCommand(F("at+ipdhcp=1"))){
    152c:	85 ef       	ldi	r24, 0xF5	; 245
    152e:	91 e0       	ldi	r25, 0x01	; 1
    1530:	6f ef       	ldi	r22, 0xFF	; 255
    1532:	7f ef       	ldi	r23, 0xFF	; 255
    1534:	41 e0       	ldi	r20, 0x01	; 1
    1536:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
    153a:	88 23       	and	r24, r24
    153c:	a1 f0       	breq	.+40     	; 0x1566 <_ZN15GB_SerialHelper15startWifiSilentEv+0xea>
        return false;
      }

      if (!wifiExecuteCommand(F("at+ap=Growbox,1"))){ // Hidden
    153e:	85 ee       	ldi	r24, 0xE5	; 229
    1540:	91 e0       	ldi	r25, 0x01	; 1
    1542:	6f ef       	ldi	r22, 0xFF	; 255
    1544:	7f ef       	ldi	r23, 0xFF	; 255
    1546:	41 e0       	ldi	r20, 0x01	; 1
    1548:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
    154c:	88 23       	and	r24, r24
    154e:	59 f0       	breq	.+22     	; 0x1566 <_ZN15GB_SerialHelper15startWifiSilentEv+0xea>
    }

    /*if (!wifiExecuteCommand(F("at+httpd_open"))){
     return false;
     }*/
    if (!wifiExecuteCommand(F("at+ltcp=80"))){
    1550:	8a ed       	ldi	r24, 0xDA	; 218
    1552:	91 e0       	ldi	r25, 0x01	; 1
    1554:	6f ef       	ldi	r22, 0xFF	; 255
    1556:	7f ef       	ldi	r23, 0xFF	; 255
    1558:	41 e0       	ldi	r20, 0x01	; 1
    155a:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
    155e:	88 23       	and	r24, r24
    1560:	19 f0       	breq	.+6      	; 0x1568 <_ZN15GB_SerialHelper15startWifiSilentEv+0xec>
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	08 95       	ret
    1566:	80 e0       	ldi	r24, 0x00	; 0
      return false;
    }

    return true;
  }
    1568:	08 95       	ret

0000156a <_ZN15GB_SerialHelper9startWifiEv>:
      startWifi();
    }
  }

  static boolean startWifi(){
    showWifiStatus(F("Starting..."));
    156a:	8e ec       	ldi	r24, 0xCE	; 206
    156c:	91 e0       	ldi	r25, 0x01	; 1
    156e:	61 e0       	ldi	r22, 0x01	; 1
    1570:	0e 94 a3 08 	call	0x1146	; 0x1146 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
    boolean isLoaded = startWifiSilent();
    1574:	0e 94 3e 0a 	call	0x147c	; 0x147c <_ZN15GB_SerialHelper15startWifiSilentEv>
    if (isLoaded){
    1578:	88 23       	and	r24, r24
    157a:	31 f0       	breq	.+12     	; 0x1588 <_ZN15GB_SerialHelper9startWifiEv+0x1e>
      showWifiStatus(F("Started"));
    157c:	86 ec       	ldi	r24, 0xC6	; 198
    157e:	91 e0       	ldi	r25, 0x01	; 1
    1580:	61 e0       	ldi	r22, 0x01	; 1
    1582:	0e 94 a3 08 	call	0x1146	; 0x1146 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
    1586:	08 95       	ret
    } 
    else {
      showWifiStatus(F("Start failed"));
    1588:	89 eb       	ldi	r24, 0xB9	; 185
    158a:	91 e0       	ldi	r25, 0x01	; 1
    158c:	61 e0       	ldi	r22, 0x01	; 1
    158e:	0e 94 a3 08 	call	0x1146	; 0x1146 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
    }
  }
    1592:	08 95       	ret

00001594 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>:
#define GB_PrintDirty_h

class GB_PrintDirty {
public:

  static String getFixedDigitsString(const int number, const byte numberOfDigits){
    1594:	8f 92       	push	r8
    1596:	9f 92       	push	r9
    1598:	af 92       	push	r10
    159a:	bf 92       	push	r11
    159c:	cf 92       	push	r12
    159e:	df 92       	push	r13
    15a0:	ef 92       	push	r14
    15a2:	ff 92       	push	r15
    15a4:	0f 93       	push	r16
    15a6:	1f 93       	push	r17
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	27 97       	sbiw	r28, 0x07	; 7
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	f8 94       	cli
    15b6:	de bf       	out	0x3e, r29	; 62
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	cd bf       	out	0x3d, r28	; 61
    15bc:	4c 01       	movw	r8, r24
    15be:	5b 01       	movw	r10, r22
    15c0:	f4 2e       	mov	r15, r20
    String out;
    15c2:	8e 01       	movw	r16, r28
    15c4:	0f 5f       	subi	r16, 0xFF	; 255
    15c6:	1f 4f       	sbci	r17, 0xFF	; 255
    15c8:	c8 01       	movw	r24, r16
    15ca:	60 e0       	ldi	r22, 0x00	; 0
    15cc:	71 e0       	ldi	r23, 0x01	; 1
    15ce:	0e 94 fe 37 	call	0x6ffc	; 0x6ffc <_ZN6StringC1EPKc>
    15d2:	cc 24       	eor	r12, r12
    15d4:	dd 24       	eor	r13, r13
    for (int i = 0; i< numberOfDigits; i++){
    15d6:	ef 2c       	mov	r14, r15
    15d8:	ff 24       	eor	r15, r15
    15da:	07 c0       	rjmp	.+14     	; 0x15ea <_ZN13GB_PrintDirty20getFixedDigitsStringEih+0x56>
    15dc:	c8 01       	movw	r24, r16
    15de:	60 e3       	ldi	r22, 0x30	; 48
    15e0:	0e 94 9a 37 	call	0x6f34	; 0x6f34 <_ZN6String6concatEc>
    15e4:	08 94       	sec
    15e6:	c1 1c       	adc	r12, r1
    15e8:	d1 1c       	adc	r13, r1
    15ea:	ce 14       	cp	r12, r14
    15ec:	df 04       	cpc	r13, r15
    15ee:	b4 f3       	brlt	.-20     	; 0x15dc <_ZN13GB_PrintDirty20getFixedDigitsStringEih+0x48>
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
    15f0:	c8 01       	movw	r24, r16
    15f2:	b5 01       	movw	r22, r10
    15f4:	0e 94 3d 37 	call	0x6e7a	; 0x6e7a <_ZN6String6concatEi>
      out +='0';
    }
    out += number;
    return out.substring(out.length()-numberOfDigits);
    15f8:	4d 81       	ldd	r20, Y+5	; 0x05
    15fa:	5e 81       	ldd	r21, Y+6	; 0x06
    15fc:	4e 19       	sub	r20, r14
    15fe:	5f 09       	sbc	r21, r15
    1600:	c4 01       	movw	r24, r8
    1602:	b8 01       	movw	r22, r16
    1604:	0e 94 c3 38 	call	0x7186	; 0x7186 <_ZNK6String9substringEj>
    1608:	c8 01       	movw	r24, r16
    160a:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
  }
    160e:	c4 01       	movw	r24, r8
    1610:	27 96       	adiw	r28, 0x07	; 7
    1612:	0f b6       	in	r0, 0x3f	; 63
    1614:	f8 94       	cli
    1616:	de bf       	out	0x3e, r29	; 62
    1618:	0f be       	out	0x3f, r0	; 63
    161a:	cd bf       	out	0x3d, r28	; 61
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	1f 91       	pop	r17
    1622:	0f 91       	pop	r16
    1624:	ff 90       	pop	r15
    1626:	ef 90       	pop	r14
    1628:	df 90       	pop	r13
    162a:	cf 90       	pop	r12
    162c:	bf 90       	pop	r11
    162e:	af 90       	pop	r10
    1630:	9f 90       	pop	r9
    1632:	8f 90       	pop	r8
    1634:	08 95       	ret

00001636 <_ZN13GB_PrintDirty13getTimeStringEm>:
    out += getFixedDigitsString(temp,2);
    return out;
  }


  static String getTimeString(time_t time){
    1636:	cf 92       	push	r12
    1638:	df 92       	push	r13
    163a:	ef 92       	push	r14
    163c:	ff 92       	push	r15
    163e:	0f 93       	push	r16
    1640:	1f 93       	push	r17
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	e1 97       	sbiw	r28, 0x31	; 49
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	f8 94       	cli
    1650:	de bf       	out	0x3e, r29	; 62
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	cd bf       	out	0x3d, r28	; 61
    1656:	d8 2e       	mov	r13, r24
    1658:	c9 2e       	mov	r12, r25
    165a:	7a 01       	movw	r14, r20
    165c:	8b 01       	movw	r16, r22
    String out;
    165e:	60 e0       	ldi	r22, 0x00	; 0
    1660:	71 e0       	ldi	r23, 0x01	; 1
    1662:	0e 94 fe 37 	call	0x6ffc	; 0x6ffc <_ZN6StringC1EPKc>

    tmElements_t tm;
    breakTime(time, tm);
    1666:	c8 01       	movw	r24, r16
    1668:	b7 01       	movw	r22, r14
    166a:	ae 01       	movw	r20, r28
    166c:	4f 5f       	subi	r20, 0xFF	; 255
    166e:	5f 4f       	sbci	r21, 0xFF	; 255
    1670:	0e 94 54 1e 	call	0x3ca8	; 0x3ca8 <_Z9breakTimemR12tmElements_t>
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1674:	8d 2d       	mov	r24, r13
    1676:	9c 2d       	mov	r25, r12
    1678:	6b e5       	ldi	r22, 0x5B	; 91
    167a:	0e 94 9a 37 	call	0x6f34	; 0x6f34 <_ZN6String6concatEc>

    out += '[';
    out += getFixedDigitsString(tm.Hour, 2);
    167e:	8e 01       	movw	r16, r28
    1680:	08 5f       	subi	r16, 0xF8	; 248
    1682:	1f 4f       	sbci	r17, 0xFF	; 255
    1684:	6b 81       	ldd	r22, Y+3	; 0x03
    1686:	c8 01       	movw	r24, r16
    1688:	70 e0       	ldi	r23, 0x00	; 0
    168a:	42 e0       	ldi	r20, 0x02	; 2
    168c:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1690:	8d 2d       	mov	r24, r13
    1692:	9c 2d       	mov	r25, r12
    1694:	b8 01       	movw	r22, r16
    1696:	0e 94 ad 37 	call	0x6f5a	; 0x6f5a <_ZN6String6concatERKS_>
    169a:	c8 01       	movw	r24, r16
    169c:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    16a0:	8d 2d       	mov	r24, r13
    16a2:	9c 2d       	mov	r25, r12
    16a4:	6a e3       	ldi	r22, 0x3A	; 58
    16a6:	0e 94 9a 37 	call	0x6f34	; 0x6f34 <_ZN6String6concatEc>
    out += ':';
    out += getFixedDigitsString(tm.Minute, 2);
    16aa:	8e 01       	movw	r16, r28
    16ac:	01 5f       	subi	r16, 0xF1	; 241
    16ae:	1f 4f       	sbci	r17, 0xFF	; 255
    16b0:	6a 81       	ldd	r22, Y+2	; 0x02
    16b2:	c8 01       	movw	r24, r16
    16b4:	70 e0       	ldi	r23, 0x00	; 0
    16b6:	42 e0       	ldi	r20, 0x02	; 2
    16b8:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    16bc:	8d 2d       	mov	r24, r13
    16be:	9c 2d       	mov	r25, r12
    16c0:	b8 01       	movw	r22, r16
    16c2:	0e 94 ad 37 	call	0x6f5a	; 0x6f5a <_ZN6String6concatERKS_>
    16c6:	c8 01       	movw	r24, r16
    16c8:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    16cc:	8d 2d       	mov	r24, r13
    16ce:	9c 2d       	mov	r25, r12
    16d0:	6a e3       	ldi	r22, 0x3A	; 58
    16d2:	0e 94 9a 37 	call	0x6f34	; 0x6f34 <_ZN6String6concatEc>
    out += ':';
    out += getFixedDigitsString(tm.Second, 2);
    16d6:	8e 01       	movw	r16, r28
    16d8:	0a 5e       	subi	r16, 0xEA	; 234
    16da:	1f 4f       	sbci	r17, 0xFF	; 255
    16dc:	69 81       	ldd	r22, Y+1	; 0x01
    16de:	c8 01       	movw	r24, r16
    16e0:	70 e0       	ldi	r23, 0x00	; 0
    16e2:	42 e0       	ldi	r20, 0x02	; 2
    16e4:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    16e8:	8d 2d       	mov	r24, r13
    16ea:	9c 2d       	mov	r25, r12
    16ec:	b8 01       	movw	r22, r16
    16ee:	0e 94 ad 37 	call	0x6f5a	; 0x6f5a <_ZN6String6concatERKS_>
    16f2:	c8 01       	movw	r24, r16
    16f4:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    16f8:	8d 2d       	mov	r24, r13
    16fa:	9c 2d       	mov	r25, r12
    16fc:	60 e2       	ldi	r22, 0x20	; 32
    16fe:	0e 94 9a 37 	call	0x6f34	; 0x6f34 <_ZN6String6concatEc>
    out += ' ';
    out += getFixedDigitsString(tm.Day, 2);
    1702:	8e 01       	movw	r16, r28
    1704:	03 5e       	subi	r16, 0xE3	; 227
    1706:	1f 4f       	sbci	r17, 0xFF	; 255
    1708:	6d 81       	ldd	r22, Y+5	; 0x05
    170a:	c8 01       	movw	r24, r16
    170c:	70 e0       	ldi	r23, 0x00	; 0
    170e:	42 e0       	ldi	r20, 0x02	; 2
    1710:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1714:	8d 2d       	mov	r24, r13
    1716:	9c 2d       	mov	r25, r12
    1718:	b8 01       	movw	r22, r16
    171a:	0e 94 ad 37 	call	0x6f5a	; 0x6f5a <_ZN6String6concatERKS_>
    171e:	c8 01       	movw	r24, r16
    1720:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1724:	8d 2d       	mov	r24, r13
    1726:	9c 2d       	mov	r25, r12
    1728:	6e e2       	ldi	r22, 0x2E	; 46
    172a:	0e 94 9a 37 	call	0x6f34	; 0x6f34 <_ZN6String6concatEc>
    out +='.';
    out += getFixedDigitsString(tm.Month, 2);
    172e:	8e 01       	movw	r16, r28
    1730:	0c 5d       	subi	r16, 0xDC	; 220
    1732:	1f 4f       	sbci	r17, 0xFF	; 255
    1734:	6e 81       	ldd	r22, Y+6	; 0x06
    1736:	c8 01       	movw	r24, r16
    1738:	70 e0       	ldi	r23, 0x00	; 0
    173a:	42 e0       	ldi	r20, 0x02	; 2
    173c:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1740:	8d 2d       	mov	r24, r13
    1742:	9c 2d       	mov	r25, r12
    1744:	b8 01       	movw	r22, r16
    1746:	0e 94 ad 37 	call	0x6f5a	; 0x6f5a <_ZN6String6concatERKS_>
    174a:	c8 01       	movw	r24, r16
    174c:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1750:	8d 2d       	mov	r24, r13
    1752:	9c 2d       	mov	r25, r12
    1754:	6e e2       	ldi	r22, 0x2E	; 46
    1756:	0e 94 9a 37 	call	0x6f34	; 0x6f34 <_ZN6String6concatEc>
    out += '.';
    out += getFixedDigitsString(tmYearToCalendar(tm.Year), 4); 
    175a:	8e 01       	movw	r16, r28
    175c:	05 5d       	subi	r16, 0xD5	; 213
    175e:	1f 4f       	sbci	r17, 0xFF	; 255
    1760:	6f 81       	ldd	r22, Y+7	; 0x07
    1762:	70 e0       	ldi	r23, 0x00	; 0
    1764:	6e 54       	subi	r22, 0x4E	; 78
    1766:	78 4f       	sbci	r23, 0xF8	; 248
    1768:	c8 01       	movw	r24, r16
    176a:	44 e0       	ldi	r20, 0x04	; 4
    176c:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1770:	8d 2d       	mov	r24, r13
    1772:	9c 2d       	mov	r25, r12
    1774:	b8 01       	movw	r22, r16
    1776:	0e 94 ad 37 	call	0x6f5a	; 0x6f5a <_ZN6String6concatERKS_>
    177a:	c8 01       	movw	r24, r16
    177c:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1780:	8d 2d       	mov	r24, r13
    1782:	9c 2d       	mov	r25, r12
    1784:	6d e5       	ldi	r22, 0x5D	; 93
    1786:	0e 94 9a 37 	call	0x6f34	; 0x6f34 <_ZN6String6concatEc>
    out += ']';
    return out;
  } 
    178a:	8d 2d       	mov	r24, r13
    178c:	9c 2d       	mov	r25, r12
    178e:	e1 96       	adiw	r28, 0x31	; 49
    1790:	0f b6       	in	r0, 0x3f	; 63
    1792:	f8 94       	cli
    1794:	de bf       	out	0x3e, r29	; 62
    1796:	0f be       	out	0x3f, r0	; 63
    1798:	cd bf       	out	0x3d, r28	; 61
    179a:	cf 91       	pop	r28
    179c:	df 91       	pop	r29
    179e:	1f 91       	pop	r17
    17a0:	0f 91       	pop	r16
    17a2:	ff 90       	pop	r15
    17a4:	ef 90       	pop	r14
    17a6:	df 90       	pop	r13
    17a8:	cf 90       	pop	r12
    17aa:	08 95       	ret

000017ac <_ZN9GB_Logger18getLogRecordSuffixERK9LogRecord>:
    else {
      return F("Unknown");
    }
  }
  
  static String getLogRecordSuffix(const LogRecord &logRecord){        
    17ac:	df 92       	push	r13
    17ae:	ef 92       	push	r14
    17b0:	ff 92       	push	r15
    17b2:	0f 93       	push	r16
    17b4:	1f 93       	push	r17
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	2e 97       	sbiw	r28, 0x0e	; 14
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	f8 94       	cli
    17c4:	de bf       	out	0x3e, r29	; 62
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	cd bf       	out	0x3d, r28	; 61
    17ca:	e8 2e       	mov	r14, r24
    17cc:	d9 2e       	mov	r13, r25
    17ce:	8b 01       	movw	r16, r22
    String out;
    17d0:	60 e0       	ldi	r22, 0x00	; 0
    17d2:	71 e0       	ldi	r23, 0x01	; 1
    17d4:	0e 94 fe 37 	call	0x6ffc	; 0x6ffc <_ZN6StringC1EPKc>
  }
  static boolean isError(const LogRecord &logRecord){
    return (logRecord.data & B11000000) == B01000000;
  }
  static boolean isTemperature(const LogRecord &logRecord){
    return (logRecord.data & B11000000) == B11000000;
    17d8:	f8 01       	movw	r30, r16
    17da:	f4 80       	ldd	r15, Z+4	; 0x04
    }
  }
  
  static String getLogRecordSuffix(const LogRecord &logRecord){        
    String out;
    if (isTemperature(logRecord)) {
    17dc:	8f 2d       	mov	r24, r15
    17de:	80 7c       	andi	r24, 0xC0	; 192
    17e0:	80 3c       	cpi	r24, 0xC0	; 192
    17e2:	39 f5       	brne	.+78     	; 0x1832 <_ZN9GB_Logger18getLogRecordSuffixERK9LogRecord+0x86>
      byte temperature = (logRecord.data & B00111111);
      out += flashStringLoad(F(" ["));
    17e4:	8e 01       	movw	r16, r28
    17e6:	0f 5f       	subi	r16, 0xFF	; 255
    17e8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ea:	c8 01       	movw	r24, r16
    17ec:	6d e2       	ldi	r22, 0x2D	; 45
    17ee:	71 e0       	ldi	r23, 0x01	; 1
    17f0:	0e 94 ba 06 	call	0xd74	; 0xd74 <_ZL15flashStringLoadPK19__FlashStringHelper>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    17f4:	8e 2d       	mov	r24, r14
    17f6:	9d 2d       	mov	r25, r13
    17f8:	b8 01       	movw	r22, r16
    17fa:	0e 94 ad 37 	call	0x6f5a	; 0x6f5a <_ZN6String6concatERKS_>
    17fe:	c8 01       	movw	r24, r16
    1800:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
    1804:	ff e3       	ldi	r31, 0x3F	; 63
    1806:	ff 22       	and	r15, r31
    1808:	8e 2d       	mov	r24, r14
    180a:	9d 2d       	mov	r25, r13
    180c:	6f 2d       	mov	r22, r15
    180e:	0e 94 6e 37 	call	0x6edc	; 0x6edc <_ZN6String6concatEh>
      out += temperature;
      out += flashStringLoad(F("] C"));
    1812:	8e 01       	movw	r16, r28
    1814:	08 5f       	subi	r16, 0xF8	; 248
    1816:	1f 4f       	sbci	r17, 0xFF	; 255
    1818:	c8 01       	movw	r24, r16
    181a:	69 e2       	ldi	r22, 0x29	; 41
    181c:	71 e0       	ldi	r23, 0x01	; 1
    181e:	0e 94 ba 06 	call	0xd74	; 0xd74 <_ZL15flashStringLoadPK19__FlashStringHelper>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1822:	8e 2d       	mov	r24, r14
    1824:	9d 2d       	mov	r25, r13
    1826:	b8 01       	movw	r22, r16
    1828:	0e 94 ad 37 	call	0x6f5a	; 0x6f5a <_ZN6String6concatERKS_>
    182c:	c8 01       	movw	r24, r16
    182e:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    }
    //Serial.print(F(" HEX: "));
    //GB_PrintDirty::printRAM(&((LogRecord)logRecord), sizeof(LogRecord));  

    return out;
  }
    1832:	8e 2d       	mov	r24, r14
    1834:	9d 2d       	mov	r25, r13
    1836:	2e 96       	adiw	r28, 0x0e	; 14
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	1f 91       	pop	r17
    1848:	0f 91       	pop	r16
    184a:	ff 90       	pop	r15
    184c:	ef 90       	pop	r14
    184e:	df 90       	pop	r13
    1850:	08 95       	ret

00001852 <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh>:
  }


private:

  static void printDirtyLogRecord(const LogRecord &logRecord, const __FlashStringHelper* description, const boolean isStored, const byte temperature = 0xFF){
    1852:	af 92       	push	r10
    1854:	bf 92       	push	r11
    1856:	cf 92       	push	r12
    1858:	df 92       	push	r13
    185a:	ef 92       	push	r14
    185c:	ff 92       	push	r15
    185e:	0f 93       	push	r16
    1860:	1f 93       	push	r17
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	6c 97       	sbiw	r28, 0x1c	; 28
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	de bf       	out	0x3e, r29	; 62
    1872:	0f be       	out	0x3f, r0	; 63
    1874:	cd bf       	out	0x3d, r28	; 61
    1876:	6c 01       	movw	r12, r24
    1878:	5b 01       	movw	r10, r22
    187a:	04 2f       	mov	r16, r20
    if (!GB_SerialHelper::useSerialMonitor) {
    187c:	80 91 ad 01 	lds	r24, 0x01AD
    1880:	88 23       	and	r24, r24
    1882:	09 f4       	brne	.+2      	; 0x1886 <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh+0x34>
    1884:	61 c0       	rjmp	.+194    	; 0x1948 <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh+0xf6>
      return;
    }
    Serial.print(F("LOG> ")); 
    1886:	8b ea       	ldi	r24, 0xAB	; 171
    1888:	93 e0       	ldi	r25, 0x03	; 3
    188a:	63 e2       	ldi	r22, 0x23	; 35
    188c:	71 e0       	ldi	r23, 0x01	; 1
    188e:	0e 94 f6 33 	call	0x67ec	; 0x67ec <_ZN5Print5printEPK19__FlashStringHelper>
    if (!isStored) {
    1892:	00 23       	and	r16, r16
    1894:	31 f4       	brne	.+12     	; 0x18a2 <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh+0x50>
      Serial.print(F("NOT STORED "));
    1896:	8b ea       	ldi	r24, 0xAB	; 171
    1898:	93 e0       	ldi	r25, 0x03	; 3
    189a:	67 e1       	ldi	r22, 0x17	; 23
    189c:	71 e0       	ldi	r23, 0x01	; 1
    189e:	0e 94 f6 33 	call	0x67ec	; 0x67ec <_ZN5Print5printEPK19__FlashStringHelper>
    GB_StorageHelper::getLogRecordByIndex(index, logRecord);
    return logRecord;
  }

  static String getLogRecordPrefix(const LogRecord &logRecord){        
    String out;
    18a2:	7e 01       	movw	r14, r28
    18a4:	08 94       	sec
    18a6:	e1 1c       	adc	r14, r1
    18a8:	f1 1c       	adc	r15, r1
    18aa:	c7 01       	movw	r24, r14
    18ac:	60 e0       	ldi	r22, 0x00	; 0
    18ae:	71 e0       	ldi	r23, 0x01	; 1
    18b0:	0e 94 fe 37 	call	0x6ffc	; 0x6ffc <_ZN6StringC1EPKc>
    out += GB_PrintDirty::getTimeString(logRecord.timeStamp);
    18b4:	8e 01       	movw	r16, r28
    18b6:	01 5f       	subi	r16, 0xF1	; 241
    18b8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ba:	f6 01       	movw	r30, r12
    18bc:	40 81       	ld	r20, Z
    18be:	51 81       	ldd	r21, Z+1	; 0x01
    18c0:	62 81       	ldd	r22, Z+2	; 0x02
    18c2:	73 81       	ldd	r23, Z+3	; 0x03
    18c4:	c8 01       	movw	r24, r16
    18c6:	0e 94 1b 0b 	call	0x1636	; 0x1636 <_ZN13GB_PrintDirty13getTimeStringEm>
    18ca:	c7 01       	movw	r24, r14
    18cc:	b8 01       	movw	r22, r16
    18ce:	0e 94 ad 37 	call	0x6f5a	; 0x6f5a <_ZN6String6concatERKS_>
    18d2:	c8 01       	movw	r24, r16
    18d4:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    18d8:	c7 01       	movw	r24, r14
    18da:	60 e2       	ldi	r22, 0x20	; 32
    18dc:	0e 94 9a 37 	call	0x6f34	; 0x6f34 <_ZN6String6concatEc>
    out += ' '; 
    out += GB_PrintDirty::getHEX(logRecord.data, true);
    18e0:	8e 01       	movw	r16, r28
    18e2:	0a 5e       	subi	r16, 0xEA	; 234
    18e4:	1f 4f       	sbci	r17, 0xFF	; 255
    18e6:	c8 01       	movw	r24, r16
    18e8:	f6 01       	movw	r30, r12
    18ea:	64 81       	ldd	r22, Z+4	; 0x04
    18ec:	41 e0       	ldi	r20, 0x01	; 1
    18ee:	0e 94 f2 06 	call	0xde4	; 0xde4 <_ZN13GB_PrintDirty6getHEXEhh>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    18f2:	c7 01       	movw	r24, r14
    18f4:	b8 01       	movw	r22, r16
    18f6:	0e 94 ad 37 	call	0x6f5a	; 0x6f5a <_ZN6String6concatERKS_>
    18fa:	c8 01       	movw	r24, r16
    18fc:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1900:	c7 01       	movw	r24, r14
    1902:	60 e2       	ldi	r22, 0x20	; 32
    1904:	0e 94 9a 37 	call	0x6f34	; 0x6f34 <_ZN6String6concatEc>
    }
    Serial.print(F("LOG> ")); 
    if (!isStored) {
      Serial.print(F("NOT STORED "));
    }
    Serial.print(getLogRecordPrefix(logRecord));    
    1908:	8b ea       	ldi	r24, 0xAB	; 171
    190a:	93 e0       	ldi	r25, 0x03	; 3
    190c:	b7 01       	movw	r22, r14
    190e:	0e 94 5a 35 	call	0x6ab4	; 0x6ab4 <_ZN5Print5printERK6String>
    1912:	c7 01       	movw	r24, r14
    1914:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    Serial.print(description);
    1918:	8b ea       	ldi	r24, 0xAB	; 171
    191a:	93 e0       	ldi	r25, 0x03	; 3
    191c:	b5 01       	movw	r22, r10
    191e:	0e 94 f6 33 	call	0x67ec	; 0x67ec <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(getLogRecordSuffix(logRecord));  
    1922:	8e 01       	movw	r16, r28
    1924:	08 5f       	subi	r16, 0xF8	; 248
    1926:	1f 4f       	sbci	r17, 0xFF	; 255
    1928:	c8 01       	movw	r24, r16
    192a:	b6 01       	movw	r22, r12
    192c:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <_ZN9GB_Logger18getLogRecordSuffixERK9LogRecord>
    1930:	8b ea       	ldi	r24, 0xAB	; 171
    1932:	93 e0       	ldi	r25, 0x03	; 3
    1934:	b8 01       	movw	r22, r16
    1936:	0e 94 5a 35 	call	0x6ab4	; 0x6ab4 <_ZN5Print5printERK6String>
    193a:	c8 01       	movw	r24, r16
    193c:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>

    Serial.println();      
    1940:	8b ea       	ldi	r24, 0xAB	; 171
    1942:	93 e0       	ldi	r25, 0x03	; 3
    1944:	0e 94 21 34 	call	0x6842	; 0x6842 <_ZN5Print7printlnEv>
  }
    1948:	6c 96       	adiw	r28, 0x1c	; 28
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	f8 94       	cli
    194e:	de bf       	out	0x3e, r29	; 62
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	cd bf       	out	0x3d, r28	; 61
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	ff 90       	pop	r15
    195e:	ef 90       	pop	r14
    1960:	df 90       	pop	r13
    1962:	cf 90       	pop	r12
    1964:	bf 90       	pop	r11
    1966:	af 90       	pop	r10
    1968:	08 95       	ret

0000196a <_ZN9GB_Logger8logEventER5Event>:
public:

  // Normal event uses uses format [00DDDDDD]
  //   00 - prefix for normal events 
  //   DDDDDD - event identificator
  static void logEvent(Event &event){
    196a:	ef 92       	push	r14
    196c:	ff 92       	push	r15
    196e:	0f 93       	push	r16
    1970:	1f 93       	push	r17
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	00 d0       	rcall	.+0      	; 0x1978 <_ZN9GB_Logger8logEventER5Event+0xe>
    1978:	00 d0       	rcall	.+0      	; 0x197a <_ZN9GB_Logger8logEventER5Event+0x10>
    197a:	0f 92       	push	r0
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	7c 01       	movw	r14, r24
    LogRecord logRecord(event.index);
    1982:	fc 01       	movw	r30, r24
    1984:	12 81       	ldd	r17, Z+2	; 0x02
struct LogRecord {
  time_t timeStamp;
  byte data;  

  LogRecord (byte data): 
  timeStamp(now()), data(data) {
    1986:	0e 94 89 20 	call	0x4112	; 0x4112 <_Z3nowv>
    198a:	69 83       	std	Y+1, r22	; 0x01
    198c:	7a 83       	std	Y+2, r23	; 0x02
    198e:	8b 83       	std	Y+3, r24	; 0x03
    1990:	9c 83       	std	Y+4, r25	; 0x04
    1992:	1d 83       	std	Y+5, r17	; 0x05
    boolean isStored = GB_StorageHelper::storeLogRecord(logRecord);
    1994:	8e 01       	movw	r16, r28
    1996:	0f 5f       	subi	r16, 0xFF	; 255
    1998:	1f 4f       	sbci	r17, 0xFF	; 255
    199a:	c8 01       	movw	r24, r16
    199c:	0e 94 28 06 	call	0xc50	; 0xc50 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord>
    19a0:	48 2f       	mov	r20, r24
    printDirtyLogRecord(logRecord, event.description, isStored);
    19a2:	f7 01       	movw	r30, r14
    19a4:	63 81       	ldd	r22, Z+3	; 0x03
    19a6:	74 81       	ldd	r23, Z+4	; 0x04
    19a8:	c8 01       	movw	r24, r16
    19aa:	2f ef       	ldi	r18, 0xFF	; 255
    19ac:	0e 94 29 0c 	call	0x1852	; 0x1852 <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh>
    GB_SerialHelper::printDirtyEnd();
    19b0:	0e 94 9c 08 	call	0x1138	; 0x1138 <_ZN15GB_SerialHelper13printDirtyEndEv>
  }
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	1f 91       	pop	r17
    19c4:	0f 91       	pop	r16
    19c6:	ff 90       	pop	r15
    19c8:	ef 90       	pop	r14
    19ca:	08 95       	ret

000019cc <_Z10turnOffFanv>:
    19cc:	84 e0       	ldi	r24, 0x04	; 4
    19ce:	0e 94 f2 30 	call	0x61e4	; 0x61e4 <digitalRead>
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	61 f0       	breq	.+24     	; 0x19ee <_Z10turnOffFanv+0x22>
    19d6:	84 e0       	ldi	r24, 0x04	; 4
    19d8:	61 e0       	ldi	r22, 0x01	; 1
    19da:	0e 94 9e 30 	call	0x613c	; 0x613c <digitalWrite>
    19de:	85 e0       	ldi	r24, 0x05	; 5
    19e0:	61 e0       	ldi	r22, 0x01	; 1
    19e2:	0e 94 9e 30 	call	0x613c	; 0x613c <digitalWrite>
    19e6:	89 e9       	ldi	r24, 0x99	; 153
    19e8:	91 e0       	ldi	r25, 0x01	; 1
    19ea:	0e 94 b5 0c 	call	0x196a	; 0x196a <_ZN9GB_Logger8logEventER5Event>
    19ee:	08 95       	ret

000019f0 <_Z9turnOnFani>:
    19f0:	cf 93       	push	r28
    19f2:	df 93       	push	r29
    19f4:	ec 01       	movw	r28, r24
    19f6:	84 e0       	ldi	r24, 0x04	; 4
    19f8:	0e 94 f2 30 	call	0x61e4	; 0x61e4 <digitalRead>
    19fc:	89 2b       	or	r24, r25
    19fe:	79 f4       	brne	.+30     	; 0x1a1e <_Z9turnOnFani+0x2e>
    1a00:	85 e0       	ldi	r24, 0x05	; 5
    1a02:	0e 94 f2 30 	call	0x61e4	; 0x61e4 <digitalRead>
    1a06:	8c 17       	cp	r24, r28
    1a08:	9d 07       	cpc	r25, r29
    1a0a:	49 f4       	brne	.+18     	; 0x1a1e <_Z9turnOnFani+0x2e>
    1a0c:	13 c0       	rjmp	.+38     	; 0x1a34 <_Z9turnOnFani+0x44>
    1a0e:	8e e9       	ldi	r24, 0x9E	; 158
    1a10:	91 e0       	ldi	r25, 0x01	; 1
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <_Z9turnOnFani+0x28>
    1a14:	83 ea       	ldi	r24, 0xA3	; 163
    1a16:	91 e0       	ldi	r25, 0x01	; 1
    1a18:	0e 94 b5 0c 	call	0x196a	; 0x196a <_ZN9GB_Logger8logEventER5Event>
    1a1c:	0b c0       	rjmp	.+22     	; 0x1a34 <_Z9turnOnFani+0x44>
    1a1e:	85 e0       	ldi	r24, 0x05	; 5
    1a20:	6c 2f       	mov	r22, r28
    1a22:	0e 94 9e 30 	call	0x613c	; 0x613c <digitalWrite>
    1a26:	84 e0       	ldi	r24, 0x04	; 4
    1a28:	60 e0       	ldi	r22, 0x00	; 0
    1a2a:	0e 94 9e 30 	call	0x613c	; 0x613c <digitalWrite>
    1a2e:	21 97       	sbiw	r28, 0x01	; 1
    1a30:	89 f7       	brne	.-30     	; 0x1a14 <_Z9turnOnFani+0x24>
    1a32:	ed cf       	rjmp	.-38     	; 0x1a0e <_Z9turnOnFani+0x1e>
    1a34:	df 91       	pop	r29
    1a36:	cf 91       	pop	r28
    1a38:	08 95       	ret

00001a3a <_Z12turnOffLightv>:
    1a3a:	83 e0       	ldi	r24, 0x03	; 3
    1a3c:	0e 94 f2 30 	call	0x61e4	; 0x61e4 <digitalRead>
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	41 f0       	breq	.+16     	; 0x1a54 <_Z12turnOffLightv+0x1a>
    1a44:	83 e0       	ldi	r24, 0x03	; 3
    1a46:	61 e0       	ldi	r22, 0x01	; 1
    1a48:	0e 94 9e 30 	call	0x613c	; 0x613c <digitalWrite>
    1a4c:	8f e8       	ldi	r24, 0x8F	; 143
    1a4e:	91 e0       	ldi	r25, 0x01	; 1
    1a50:	0e 94 b5 0c 	call	0x196a	; 0x196a <_ZN9GB_Logger8logEventER5Event>
    1a54:	08 95       	ret

00001a56 <_Z11turnOnLightv>:
    1a56:	83 e0       	ldi	r24, 0x03	; 3
    1a58:	0e 94 f2 30 	call	0x61e4	; 0x61e4 <digitalRead>
    1a5c:	89 2b       	or	r24, r25
    1a5e:	41 f0       	breq	.+16     	; 0x1a70 <_Z11turnOnLightv+0x1a>
    1a60:	83 e0       	ldi	r24, 0x03	; 3
    1a62:	60 e0       	ldi	r22, 0x00	; 0
    1a64:	0e 94 9e 30 	call	0x613c	; 0x613c <digitalWrite>
    1a68:	84 e9       	ldi	r24, 0x94	; 148
    1a6a:	91 e0       	ldi	r25, 0x01	; 1
    1a6c:	0e 94 b5 0c 	call	0x196a	; 0x196a <_ZN9GB_Logger8logEventER5Event>
    1a70:	08 95       	ret

00001a72 <_ZN9GB_Logger8logErrorER5Error>:

  // Error events uses format [01SSDDDD] 
  //   01 - prefix for error events 
  //   SS - length of errir seqence 
  //   DDDD - sequence data
  static void logError(Error &error){
    1a72:	8f 92       	push	r8
    1a74:	9f 92       	push	r9
    1a76:	af 92       	push	r10
    1a78:	bf 92       	push	r11
    1a7a:	cf 92       	push	r12
    1a7c:	df 92       	push	r13
    1a7e:	ef 92       	push	r14
    1a80:	ff 92       	push	r15
    1a82:	0f 93       	push	r16
    1a84:	1f 93       	push	r17
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	00 d0       	rcall	.+0      	; 0x1a8c <_ZN9GB_Logger8logErrorER5Error+0x1a>
    1a8c:	00 d0       	rcall	.+0      	; 0x1a8e <_ZN9GB_Logger8logErrorER5Error+0x1c>
    1a8e:	0f 92       	push	r0
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	7c 01       	movw	r14, r24
    LogRecord logRecord(B01000000|(B00000011 | error.sequenceSize-1)<<4 | (B00001111 & error.sequence));
    1a96:	fc 01       	movw	r30, r24
    1a98:	12 81       	ldd	r17, Z+2	; 0x02
    1a9a:	1f 70       	andi	r17, 0x0F	; 15
    1a9c:	10 64       	ori	r17, 0x40	; 64
    1a9e:	83 81       	ldd	r24, Z+3	; 0x03
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	83 60       	ori	r24, 0x03	; 3
    1aa6:	44 e0       	ldi	r20, 0x04	; 4
    1aa8:	88 0f       	add	r24, r24
    1aaa:	99 1f       	adc	r25, r25
    1aac:	4a 95       	dec	r20
    1aae:	e1 f7       	brne	.-8      	; 0x1aa8 <_ZN9GB_Logger8logErrorER5Error+0x36>
    1ab0:	18 2b       	or	r17, r24
    1ab2:	0e 94 89 20 	call	0x4112	; 0x4112 <_Z3nowv>
    1ab6:	69 83       	std	Y+1, r22	; 0x01
    1ab8:	7a 83       	std	Y+2, r23	; 0x02
    1aba:	8b 83       	std	Y+3, r24	; 0x03
    1abc:	9c 83       	std	Y+4, r25	; 0x04
    1abe:	1d 83       	std	Y+5, r17	; 0x05
    boolean isStoredNow = false;
    if(!error.isStored){
    1ac0:	f7 01       	movw	r30, r14
    1ac2:	86 81       	ldd	r24, Z+6	; 0x06
    1ac4:	88 23       	and	r24, r24
    1ac6:	11 f0       	breq	.+4      	; 0x1acc <_ZN9GB_Logger8logErrorER5Error+0x5a>
    1ac8:	40 e0       	ldi	r20, 0x00	; 0
    1aca:	07 c0       	rjmp	.+14     	; 0x1ada <_ZN9GB_Logger8logErrorER5Error+0x68>
      error.isStored = GB_StorageHelper::storeLogRecord(logRecord);
    1acc:	ce 01       	movw	r24, r28
    1ace:	01 96       	adiw	r24, 0x01	; 1
    1ad0:	0e 94 28 06 	call	0xc50	; 0xc50 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord>
    1ad4:	f7 01       	movw	r30, r14
    1ad6:	86 83       	std	Z+6, r24	; 0x06
    1ad8:	41 e0       	ldi	r20, 0x01	; 1
      isStoredNow = true;
    } 
    printDirtyLogRecord(logRecord, error.description, isStoredNow);
    1ada:	f7 01       	movw	r30, r14
    1adc:	64 81       	ldd	r22, Z+4	; 0x04
    1ade:	75 81       	ldd	r23, Z+5	; 0x05
    1ae0:	ce 01       	movw	r24, r28
    1ae2:	01 96       	adiw	r24, 0x01	; 1
    1ae4:	2f ef       	ldi	r18, 0xFF	; 255
    1ae6:	0e 94 29 0c 	call	0x1852	; 0x1852 <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh>
    GB_SerialHelper::printDirtyEnd();
    1aea:	0e 94 9c 08 	call	0x1138	; 0x1138 <_ZN15GB_SerialHelper13printDirtyEndEv>
    error.isStored = true;   
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	f7 01       	movw	r30, r14
    1af2:	86 83       	std	Z+6, r24	; 0x06
    return (findByIndex(0xFF, 0xFF) == 0);
  }
  
  
void notify() {
  digitalWrite(ERROR_PIN, LOW);
    1af4:	8c e0       	ldi	r24, 0x0C	; 12
    1af6:	60 e0       	ldi	r22, 0x00	; 0
    1af8:	0e 94 9e 30 	call	0x613c	; 0x613c <digitalWrite>
  delay(1000);
    1afc:	68 ee       	ldi	r22, 0xE8	; 232
    1afe:	73 e0       	ldi	r23, 0x03	; 3
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <delay>
  for (int i = sequenceSize-1; i >= 0; i--){
    1b08:	f7 01       	movw	r30, r14
    1b0a:	83 81       	ldd	r24, Z+3	; 0x03
    1b0c:	00 e0       	ldi	r16, 0x00	; 0
    1b0e:	10 e0       	ldi	r17, 0x00	; 0

  // Error events uses format [01SSDDDD] 
  //   01 - prefix for error events 
  //   SS - length of errir seqence 
  //   DDDD - sequence data
  static void logError(Error &error){
    1b10:	a8 2e       	mov	r10, r24
    1b12:	bb 24       	eor	r11, r11
    1b14:	45 01       	movw	r8, r10
    1b16:	08 94       	sec
    1b18:	81 08       	sbc	r8, r1
    1b1a:	91 08       	sbc	r9, r1
    1b1c:	25 c0       	rjmp	.+74     	; 0x1b68 <_ZN9GB_Logger8logErrorER5Error+0xf6>
    digitalWrite(ERROR_PIN, HIGH);
    1b1e:	8c e0       	ldi	r24, 0x0C	; 12
    1b20:	61 e0       	ldi	r22, 0x01	; 1
    1b22:	0e 94 9e 30 	call	0x613c	; 0x613c <digitalWrite>
    if (bitRead(sequence, i)){
    1b26:	f7 01       	movw	r30, r14
    1b28:	82 81       	ldd	r24, Z+2	; 0x02
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	02 c0       	rjmp	.+4      	; 0x1b32 <_ZN9GB_Logger8logErrorER5Error+0xc0>
    1b2e:	95 95       	asr	r25
    1b30:	87 95       	ror	r24
    1b32:	ca 94       	dec	r12
    1b34:	e2 f7       	brpl	.-8      	; 0x1b2e <_ZN9GB_Logger8logErrorER5Error+0xbc>
    1b36:	80 ff       	sbrs	r24, 0
    1b38:	05 c0       	rjmp	.+10     	; 0x1b44 <_ZN9GB_Logger8logErrorER5Error+0xd2>
      delay(ERROR_LONG_SIGNAL_MS);
    1b3a:	60 e9       	ldi	r22, 0x90	; 144
    1b3c:	71 e0       	ldi	r23, 0x01	; 1
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	04 c0       	rjmp	.+8      	; 0x1b4c <_ZN9GB_Logger8logErrorER5Error+0xda>
    } 
    else {
      delay(ERROR_SHORT_SIGNAL_MS);
    1b44:	64 e6       	ldi	r22, 0x64	; 100
    1b46:	70 e0       	ldi	r23, 0x00	; 0
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <delay>
    } 
    digitalWrite(ERROR_PIN, LOW);
    1b50:	8c e0       	ldi	r24, 0x0C	; 12
    1b52:	60 e0       	ldi	r22, 0x00	; 0
    1b54:	0e 94 9e 30 	call	0x613c	; 0x613c <digitalWrite>
    delay(ERROR_DELAY_BETWEEN_SIGNALS_MS);
    1b58:	66 e9       	ldi	r22, 0x96	; 150
    1b5a:	70 e0       	ldi	r23, 0x00	; 0
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <delay>
    1b64:	0f 5f       	subi	r16, 0xFF	; 255
    1b66:	1f 4f       	sbci	r17, 0xFF	; 255
    1b68:	64 01       	movw	r12, r8
    1b6a:	c0 1a       	sub	r12, r16
    1b6c:	d1 0a       	sbc	r13, r17
  
  
void notify() {
  digitalWrite(ERROR_PIN, LOW);
  delay(1000);
  for (int i = sequenceSize-1; i >= 0; i--){
    1b6e:	0a 15       	cp	r16, r10
    1b70:	1b 05       	cpc	r17, r11
    1b72:	a9 f6       	brne	.-86     	; 0x1b1e <_ZN9GB_Logger8logErrorER5Error+0xac>
      delay(ERROR_SHORT_SIGNAL_MS);
    } 
    digitalWrite(ERROR_PIN, LOW);
    delay(ERROR_DELAY_BETWEEN_SIGNALS_MS);
  }
  digitalWrite(ERROR_PIN, LOW);
    1b74:	8c e0       	ldi	r24, 0x0C	; 12
    1b76:	60 e0       	ldi	r22, 0x00	; 0
    1b78:	0e 94 9e 30 	call	0x613c	; 0x613c <digitalWrite>
  delay(1000);
    1b7c:	68 ee       	ldi	r22, 0xE8	; 232
    1b7e:	73 e0       	ldi	r23, 0x03	; 3
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <delay>
    } 
    printDirtyLogRecord(logRecord, error.description, isStoredNow);
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	1f 91       	pop	r17
    1b98:	0f 91       	pop	r16
    1b9a:	ff 90       	pop	r15
    1b9c:	ef 90       	pop	r14
    1b9e:	df 90       	pop	r13
    1ba0:	cf 90       	pop	r12
    1ba2:	bf 90       	pop	r11
    1ba4:	af 90       	pop	r10
    1ba6:	9f 90       	pop	r9
    1ba8:	8f 90       	pop	r8
    1baa:	08 95       	ret

00001bac <_ZN13GB_Controller15checkFreeMemoryEv>:
    resetFunc(); //call
  }

  // discover-memory-overflow-errors-in-the-arduino-c-code
  static void checkFreeMemory(){
    if(freeMemory() < 200){ 
    1bac:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <freeMemory>
    1bb0:	88 3c       	cpi	r24, 0xC8	; 200
    1bb2:	91 05       	cpc	r25, r1
    1bb4:	2c f4       	brge	.+10     	; 0x1bc0 <_ZN13GB_Controller15checkFreeMemoryEv+0x14>
      GB_Logger::logError(ERROR_MEMORY_LOW);   
    1bb6:	84 e7       	ldi	r24, 0x74	; 116
    1bb8:	91 e0       	ldi	r25, 0x01	; 1
    1bba:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <_ZN9GB_Logger8logErrorER5Error>
    1bbe:	08 95       	ret
  static boolean stopLogError(Error &error){
    if (error.isStored){
    1bc0:	80 91 7a 01 	lds	r24, 0x017A
    1bc4:	88 23       	and	r24, r24
    1bc6:	11 f0       	breq	.+4      	; 0x1bcc <_ZN13GB_Controller15checkFreeMemoryEv+0x20>
      error.isStored = false;
    1bc8:	10 92 7a 01 	sts	0x017A, r1
    1bcc:	08 95       	ret

00001bce <_ZN14GB_Thermometer14getTemperatureEh>:
    }

    return true;
  }

  static float getTemperature(boolean forceLog = false){
    1bce:	8f 92       	push	r8
    1bd0:	9f 92       	push	r9
    1bd2:	af 92       	push	r10
    1bd4:	bf 92       	push	r11
    1bd6:	cf 92       	push	r12
    1bd8:	df 92       	push	r13
    1bda:	ef 92       	push	r14
    1bdc:	ff 92       	push	r15
    1bde:	0f 93       	push	r16
    1be0:	1f 93       	push	r17
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	00 d0       	rcall	.+0      	; 0x1be8 <_ZN14GB_Thermometer14getTemperatureEh+0x1a>
    1be8:	00 d0       	rcall	.+0      	; 0x1bea <_ZN14GB_Thermometer14getTemperatureEh+0x1c>
    1bea:	0f 92       	push	r0
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	c8 2e       	mov	r12, r24

    if (statisticsTemperatureCount == 0){
    1bf2:	20 91 f8 01 	lds	r18, 0x01F8
    1bf6:	30 91 f9 01 	lds	r19, 0x01F9
    1bfa:	21 15       	cp	r18, r1
    1bfc:	31 05       	cpc	r19, r1
    1bfe:	49 f4       	brne	.+18     	; 0x1c12 <_ZN14GB_Thermometer14getTemperatureEh+0x44>
      return workingTemperature; 
    1c00:	80 90 f0 01 	lds	r8, 0x01F0
    1c04:	90 90 f1 01 	lds	r9, 0x01F1
    1c08:	a0 90 f2 01 	lds	r10, 0x01F2
    1c0c:	b0 90 f3 01 	lds	r11, 0x01F3
    1c10:	5e c0       	rjmp	.+188    	; 0x1cce <_ZN14GB_Thermometer14getTemperatureEh+0x100>
    }

    float freshTemperature = statisticsTemperatureSumm/statisticsTemperatureCount;
    1c12:	b9 01       	movw	r22, r18
    1c14:	88 27       	eor	r24, r24
    1c16:	77 fd       	sbrc	r23, 7
    1c18:	80 95       	com	r24
    1c1a:	98 2f       	mov	r25, r24
    1c1c:	0e 94 e2 3a 	call	0x75c4	; 0x75c4 <__floatsisf>
    1c20:	9b 01       	movw	r18, r22
    1c22:	ac 01       	movw	r20, r24
    1c24:	60 91 f4 01 	lds	r22, 0x01F4
    1c28:	70 91 f5 01 	lds	r23, 0x01F5
    1c2c:	80 91 f6 01 	lds	r24, 0x01F6
    1c30:	90 91 f7 01 	lds	r25, 0x01F7
    1c34:	0e 94 47 3a 	call	0x748e	; 0x748e <__divsf3>
    1c38:	4b 01       	movw	r8, r22
    1c3a:	5c 01       	movw	r10, r24

    if (((int)freshTemperature != (int)workingTemperature) || forceLog) {          
    1c3c:	0e 94 af 3a 	call	0x755e	; 0x755e <__fixsfsi>
    1c40:	7b 01       	movw	r14, r22
    1c42:	8c 01       	movw	r16, r24
    1c44:	60 91 f0 01 	lds	r22, 0x01F0
    1c48:	70 91 f1 01 	lds	r23, 0x01F1
    1c4c:	80 91 f2 01 	lds	r24, 0x01F2
    1c50:	90 91 f3 01 	lds	r25, 0x01F3
    1c54:	0e 94 af 3a 	call	0x755e	; 0x755e <__fixsfsi>
    1c58:	e6 16       	cp	r14, r22
    1c5a:	f7 06       	cpc	r15, r23
    1c5c:	11 f4       	brne	.+4      	; 0x1c62 <_ZN14GB_Thermometer14getTemperatureEh+0x94>
    1c5e:	cc 20       	and	r12, r12
    1c60:	f1 f0       	breq	.+60     	; 0x1c9e <_ZN14GB_Thermometer14getTemperatureEh+0xd0>
      GB_Logger::logTemperature((byte)freshTemperature);
    1c62:	c5 01       	movw	r24, r10
    1c64:	b4 01       	movw	r22, r8
    1c66:	0e 94 b4 3a 	call	0x7568	; 0x7568 <__fixunssfsi>
    1c6a:	6b 01       	movw	r12, r22
    1c6c:	7c 01       	movw	r14, r24
    1c6e:	16 2f       	mov	r17, r22
    1c70:	0e 94 89 20 	call	0x4112	; 0x4112 <_Z3nowv>
    1c74:	69 83       	std	Y+1, r22	; 0x01
    1c76:	7a 83       	std	Y+2, r23	; 0x02
    1c78:	8b 83       	std	Y+3, r24	; 0x03
    1c7a:	9c 83       	std	Y+4, r25	; 0x04
    1c7c:	10 6c       	ori	r17, 0xC0	; 192
    1c7e:	1d 83       	std	Y+5, r17	; 0x05
  // Termometer events uses format [11TTTTTT].
  //   11 - prefix for termometer events
  //   TTTTTT - temperature [0..2^6] = [0..64]
  static void logTemperature(byte temperature){
    LogRecord logRecord(B11000000|temperature);
    boolean isStored = GB_StorageHelper::storeLogRecord(logRecord);
    1c80:	8e 01       	movw	r16, r28
    1c82:	0f 5f       	subi	r16, 0xFF	; 255
    1c84:	1f 4f       	sbci	r17, 0xFF	; 255
    1c86:	c8 01       	movw	r24, r16
    1c88:	0e 94 28 06 	call	0xc50	; 0xc50 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord>
    1c8c:	48 2f       	mov	r20, r24
    printDirtyLogRecord(logRecord, FS(S_Temperature), isStored, temperature);
    1c8e:	c8 01       	movw	r24, r16
    1c90:	6f e6       	ldi	r22, 0x6F	; 111
    1c92:	72 e0       	ldi	r23, 0x02	; 2
    1c94:	2c 2d       	mov	r18, r12
    1c96:	0e 94 29 0c 	call	0x1852	; 0x1852 <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh>
    GB_SerialHelper::printDirtyEnd();
    1c9a:	0e 94 9c 08 	call	0x1138	; 0x1138 <_ZN15GB_SerialHelper13printDirtyEndEv>
    }

    workingTemperature = freshTemperature;
    1c9e:	80 92 f0 01 	sts	0x01F0, r8
    1ca2:	90 92 f1 01 	sts	0x01F1, r9
    1ca6:	a0 92 f2 01 	sts	0x01F2, r10
    1caa:	b0 92 f3 01 	sts	0x01F3, r11

    statisticsTemperatureSumm = 0.0;
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	a0 e0       	ldi	r26, 0x00	; 0
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	80 93 f4 01 	sts	0x01F4, r24
    1cba:	90 93 f5 01 	sts	0x01F5, r25
    1cbe:	a0 93 f6 01 	sts	0x01F6, r26
    1cc2:	b0 93 f7 01 	sts	0x01F7, r27
    statisticsTemperatureCount = 0;
    1cc6:	10 92 f9 01 	sts	0x01F9, r1
    1cca:	10 92 f8 01 	sts	0x01F8, r1

    return workingTemperature;
  }
    1cce:	b4 01       	movw	r22, r8
    1cd0:	c5 01       	movw	r24, r10
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	1f 91       	pop	r17
    1ce2:	0f 91       	pop	r16
    1ce4:	ff 90       	pop	r15
    1ce6:	ef 90       	pop	r14
    1ce8:	df 90       	pop	r13
    1cea:	cf 90       	pop	r12
    1cec:	bf 90       	pop	r11
    1cee:	af 90       	pop	r10
    1cf0:	9f 90       	pop	r9
    1cf2:	8f 90       	pop	r8
    1cf4:	08 95       	ret

00001cf6 <_Z18updateGrowboxStatev>:
    1cf6:	ef 92       	push	r14
    1cf8:	ff 92       	push	r15
    1cfa:	0f 93       	push	r16
    1cfc:	1f 93       	push	r17
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <_ZN14GB_Thermometer14getTemperatureEh>
    1d04:	7b 01       	movw	r14, r22
    1d06:	8c 01       	movw	r16, r24
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	4c e0       	ldi	r20, 0x0C	; 12
    1d0e:	52 e4       	ldi	r21, 0x42	; 66
    1d10:	0e 94 92 3b 	call	0x7724	; 0x7724 <__gesf2>
    1d14:	88 23       	and	r24, r24
    1d16:	5c f0       	brlt	.+22     	; 0x1d2e <_Z18updateGrowboxStatev+0x38>
    1d18:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <_Z12turnOffLightv>
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <_Z9turnOnFani>
    1d24:	8d e6       	ldi	r24, 0x6D	; 109
    1d26:	91 e0       	ldi	r25, 0x01	; 1
    1d28:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <_ZN9GB_Logger8logErrorER5Error>
    1d2c:	45 c0       	rjmp	.+138    	; 0x1db8 <_Z18updateGrowboxStatev+0xc2>
    1d2e:	80 91 03 01 	lds	r24, 0x0103
    1d32:	88 23       	and	r24, r24
    1d34:	b9 f0       	breq	.+46     	; 0x1d64 <_Z18updateGrowboxStatev+0x6e>
    1d36:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <_Z11turnOnLightv>
    1d3a:	c8 01       	movw	r24, r16
    1d3c:	b7 01       	movw	r22, r14
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	48 eb       	ldi	r20, 0xB8	; 184
    1d44:	51 e4       	ldi	r21, 0x41	; 65
    1d46:	0e 94 43 3a 	call	0x7486	; 0x7486 <__cmpsf2>
    1d4a:	88 23       	and	r24, r24
    1d4c:	74 f1       	brlt	.+92     	; 0x1daa <_Z18updateGrowboxStatev+0xb4>
    1d4e:	c8 01       	movw	r24, r16
    1d50:	b7 01       	movw	r22, r14
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	48 ee       	ldi	r20, 0xE8	; 232
    1d58:	51 e4       	ldi	r21, 0x41	; 65
    1d5a:	0e 94 92 3b 	call	0x7724	; 0x7724 <__gesf2>
    1d5e:	18 16       	cp	r1, r24
    1d60:	24 f5       	brge	.+72     	; 0x1daa <_Z18updateGrowboxStatev+0xb4>
    1d62:	16 c0       	rjmp	.+44     	; 0x1d90 <_Z18updateGrowboxStatev+0x9a>
    1d64:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <_Z12turnOffLightv>
    1d68:	c8 01       	movw	r24, r16
    1d6a:	b7 01       	movw	r22, r14
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	48 e9       	ldi	r20, 0x98	; 152
    1d72:	51 e4       	ldi	r21, 0x41	; 65
    1d74:	0e 94 43 3a 	call	0x7486	; 0x7486 <__cmpsf2>
    1d78:	88 23       	and	r24, r24
    1d7a:	e4 f0       	brlt	.+56     	; 0x1db4 <_Z18updateGrowboxStatev+0xbe>
    1d7c:	c8 01       	movw	r24, r16
    1d7e:	b7 01       	movw	r22, r14
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	40 ee       	ldi	r20, 0xE0	; 224
    1d86:	51 e4       	ldi	r21, 0x41	; 65
    1d88:	0e 94 92 3b 	call	0x7724	; 0x7724 <__gesf2>
    1d8c:	18 16       	cp	r1, r24
    1d8e:	1c f4       	brge	.+6      	; 0x1d96 <_Z18updateGrowboxStatev+0xa0>
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	0c c0       	rjmp	.+24     	; 0x1dae <_Z18updateGrowboxStatev+0xb8>
    1d96:	c8 01       	movw	r24, r16
    1d98:	b7 01       	movw	r22, r14
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	48 ec       	ldi	r20, 0xC8	; 200
    1da0:	51 e4       	ldi	r21, 0x41	; 65
    1da2:	0e 94 92 3b 	call	0x7724	; 0x7724 <__gesf2>
    1da6:	18 16       	cp	r1, r24
    1da8:	2c f4       	brge	.+10     	; 0x1db4 <_Z18updateGrowboxStatev+0xbe>
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <_Z9turnOnFani>
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <_Z18updateGrowboxStatev+0xc2>
    1db4:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <_Z10turnOffFanv>
    1db8:	1f 91       	pop	r17
    1dba:	0f 91       	pop	r16
    1dbc:	ff 90       	pop	r15
    1dbe:	ef 90       	pop	r14
    1dc0:	08 95       	ret

00001dc2 <_Z17switchToNightModev>:
    1dc2:	80 91 03 01 	lds	r24, 0x0103
    1dc6:	88 23       	and	r24, r24
    1dc8:	41 f0       	breq	.+16     	; 0x1dda <_Z17switchToNightModev+0x18>
    1dca:	10 92 03 01 	sts	0x0103, r1
    1dce:	8a e8       	ldi	r24, 0x8A	; 138
    1dd0:	91 e0       	ldi	r25, 0x01	; 1
    1dd2:	0e 94 b5 0c 	call	0x196a	; 0x196a <_ZN9GB_Logger8logEventER5Event>
    1dd6:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_Z18updateGrowboxStatev>
    1dda:	08 95       	ret

00001ddc <_Z15switchToDayModev>:
    1ddc:	80 91 03 01 	lds	r24, 0x0103
    1de0:	81 30       	cpi	r24, 0x01	; 1
    1de2:	49 f0       	breq	.+18     	; 0x1df6 <_Z15switchToDayModev+0x1a>
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	80 93 03 01 	sts	0x0103, r24
    1dea:	85 e8       	ldi	r24, 0x85	; 133
    1dec:	91 e0       	ldi	r25, 0x01	; 1
    1dee:	0e 94 b5 0c 	call	0x196a	; 0x196a <_ZN9GB_Logger8logEventER5Event>
    1df2:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_Z18updateGrowboxStatev>
    1df6:	08 95       	ret

00001df8 <_ZN15GB_SerialHelper11checkSerialEhh>:
      checkSerial(false, true);
    }
    //wifiExecuteCommand(F("at+con_status"));
  }

  static void checkSerial(boolean checkSerialMonitor, boolean checkWifi){
    1df8:	af 92       	push	r10
    1dfa:	bf 92       	push	r11
    1dfc:	cf 92       	push	r12
    1dfe:	df 92       	push	r13
    1e00:	ef 92       	push	r14
    1e02:	ff 92       	push	r15
    1e04:	0f 93       	push	r16
    1e06:	1f 93       	push	r17
    1e08:	df 93       	push	r29
    1e0a:	cf 93       	push	r28
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
    1e10:	2e 97       	sbiw	r28, 0x0e	; 14
    1e12:	0f b6       	in	r0, 0x3f	; 63
    1e14:	f8 94       	cli
    1e16:	de bf       	out	0x3e, r29	; 62
    1e18:	0f be       	out	0x3f, r0	; 63
    1e1a:	cd bf       	out	0x3d, r28	; 61
    1e1c:	06 2f       	mov	r16, r22

    boolean oldUseSerialMonitor  = useSerialMonitor;
    1e1e:	a0 90 ad 01 	lds	r10, 0x01AD
    boolean oldUseSerialWifi     = useSerialWifi;
    1e22:	b0 90 ae 01 	lds	r11, 0x01AE
    boolean serialInUse          = (useSerialMonitor || useSerialWifi);
    1e26:	aa 20       	and	r10, r10
    1e28:	11 f0       	breq	.+4      	; 0x1e2e <_ZN15GB_SerialHelper11checkSerialEhh+0x36>
    1e2a:	11 e0       	ldi	r17, 0x01	; 1
    1e2c:	04 c0       	rjmp	.+8      	; 0x1e36 <_ZN15GB_SerialHelper11checkSerialEhh+0x3e>
    1e2e:	9b 2d       	mov	r25, r11
    1e30:	b1 10       	cpse	r11, r1
    1e32:	91 e0       	ldi	r25, 0x01	; 1
    1e34:	19 2f       	mov	r17, r25

    if (checkSerialMonitor){
    1e36:	88 23       	and	r24, r24
    1e38:	51 f0       	breq	.+20     	; 0x1e4e <_ZN15GB_SerialHelper11checkSerialEhh+0x56>
      useSerialMonitor = (digitalRead(USE_SERIAL_MONOTOR_PIN) == SERIAL_ON);
    1e3a:	8b e0       	ldi	r24, 0x0B	; 11
    1e3c:	0e 94 f2 30 	call	0x61e4	; 0x61e4 <digitalRead>
    1e40:	10 92 ad 01 	sts	0x01AD, r1
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	19 f4       	brne	.+6      	; 0x1e4e <_ZN15GB_SerialHelper11checkSerialEhh+0x56>
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	80 93 ad 01 	sts	0x01AD, r24
    }

    // Start serial, if we need
    if (!serialInUse && (useSerialMonitor || checkWifi)){
    1e4e:	11 23       	and	r17, r17
    1e50:	a9 f4       	brne	.+42     	; 0x1e7c <_ZN15GB_SerialHelper11checkSerialEhh+0x84>
    1e52:	80 91 ad 01 	lds	r24, 0x01AD
    1e56:	88 23       	and	r24, r24
    1e58:	19 f4       	brne	.+6      	; 0x1e60 <_ZN15GB_SerialHelper11checkSerialEhh+0x68>
    1e5a:	00 23       	and	r16, r16
    1e5c:	09 f4       	brne	.+2      	; 0x1e60 <_ZN15GB_SerialHelper11checkSerialEhh+0x68>
    1e5e:	bc c0       	rjmp	.+376    	; 0x1fd8 <_ZN15GB_SerialHelper11checkSerialEhh+0x1e0>
      Serial.begin(115200);
    1e60:	8b ea       	ldi	r24, 0xAB	; 171
    1e62:	93 e0       	ldi	r25, 0x03	; 3
    1e64:	40 e0       	ldi	r20, 0x00	; 0
    1e66:	52 ec       	ldi	r21, 0xC2	; 194
    1e68:	61 e0       	ldi	r22, 0x01	; 1
    1e6a:	70 e0       	ldi	r23, 0x00	; 0
    1e6c:	0e 94 ce 31 	call	0x639c	; 0x639c <_ZN14HardwareSerial5beginEm>
      while (!Serial) {
    1e70:	8b ea       	ldi	r24, 0xAB	; 171
    1e72:	93 e0       	ldi	r25, 0x03	; 3
    1e74:	0e 94 65 33 	call	0x66ca	; 0x66ca <_ZN14HardwareSerialcvbEv>
    1e78:	88 23       	and	r24, r24
    1e7a:	d1 f3       	breq	.-12     	; 0x1e70 <_ZN15GB_SerialHelper11checkSerialEhh+0x78>
    if (!serialInUse){
      return; 
    }

    boolean loadWifiConfiguration = false;
    if (checkWifi || s_restartWifi){
    1e7c:	00 23       	and	r16, r16
    1e7e:	29 f4       	brne	.+10     	; 0x1e8a <_ZN15GB_SerialHelper11checkSerialEhh+0x92>
    1e80:	80 91 af 01 	lds	r24, 0x01AF
    1e84:	88 23       	and	r24, r24
    1e86:	09 f4       	brne	.+2      	; 0x1e8a <_ZN15GB_SerialHelper11checkSerialEhh+0x92>
    1e88:	5b c0       	rjmp	.+182    	; 0x1f40 <_ZN15GB_SerialHelper11checkSerialEhh+0x148>
    1e8a:	00 e0       	ldi	r16, 0x00	; 0
    1e8c:	10 e0       	ldi	r17, 0x00	; 0
      for (int i = 0; i<2; i++){ // Sometimes first command returns ERROR, two attempts
        cleanSerialBuffer();
        String input = wifiExecuteRawCommand(F("at+reset=0"), 500); // spec boot time 210
    1e8e:	7e 01       	movw	r14, r28
    1e90:	08 94       	sec
    1e92:	e1 1c       	adc	r14, r1
    1e94:	f1 1c       	adc	r15, r1
        useSerialWifi = input.startsWith(flashStringLoad(S_WIFI_RESPONSE_WELLCOME));
    1e96:	58 e0       	ldi	r21, 0x08	; 8
    1e98:	c5 2e       	mov	r12, r21
    1e9a:	d1 2c       	mov	r13, r1
    1e9c:	cc 0e       	add	r12, r28
    1e9e:	dd 1e       	adc	r13, r29
    }

    boolean loadWifiConfiguration = false;
    if (checkWifi || s_restartWifi){
      for (int i = 0; i<2; i++){ // Sometimes first command returns ERROR, two attempts
        cleanSerialBuffer();
    1ea0:	0e 94 8a 08 	call	0x1114	; 0x1114 <_ZN15GB_SerialHelper17cleanSerialBufferEv>
        String input = wifiExecuteRawCommand(F("at+reset=0"), 500); // spec boot time 210
    1ea4:	c7 01       	movw	r24, r14
    1ea6:	6e ea       	ldi	r22, 0xAE	; 174
    1ea8:	71 e0       	ldi	r23, 0x01	; 1
    1eaa:	44 ef       	ldi	r20, 0xF4	; 244
    1eac:	51 e0       	ldi	r21, 0x01	; 1
    1eae:	21 e0       	ldi	r18, 0x01	; 1
    1eb0:	0e 94 bf 08 	call	0x117e	; 0x117e <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih>
        useSerialWifi = input.startsWith(flashStringLoad(S_WIFI_RESPONSE_WELLCOME));
    1eb4:	c6 01       	movw	r24, r12
    1eb6:	60 e3       	ldi	r22, 0x30	; 48
    1eb8:	71 e0       	ldi	r23, 0x01	; 1
    1eba:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <_ZL15flashStringLoadPKc>
    1ebe:	c7 01       	movw	r24, r14
    1ec0:	b6 01       	movw	r22, r12
    1ec2:	0e 94 99 36 	call	0x6d32	; 0x6d32 <_ZNK6String10startsWithERKS_>
    1ec6:	80 93 ae 01 	sts	0x01AE, r24
    1eca:	c6 01       	movw	r24, r12
    1ecc:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
        if (useSerialWifi) {
    1ed0:	80 91 ae 01 	lds	r24, 0x01AE
    1ed4:	88 23       	and	r24, r24
    1ed6:	61 f0       	breq	.+24     	; 0x1ef0 <_ZN15GB_SerialHelper11checkSerialEhh+0xf8>
          s_restartWifi = false;
    1ed8:	10 92 af 01 	sts	0x01AF, r1
    1edc:	80 91 4a 01 	lds	r24, 0x014A
    1ee0:	81 11       	cpse	r24, r1
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	18 2f       	mov	r17, r24
      return; 
    }

    boolean loadWifiConfiguration = false;
    if (checkWifi || s_restartWifi){
      for (int i = 0; i<2; i++){ // Sometimes first command returns ERROR, two attempts
    1ee6:	ce 01       	movw	r24, r28
    1ee8:	01 96       	adiw	r24, 0x01	; 1
    1eea:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    1eee:	29 c0       	rjmp	.+82     	; 0x1f42 <_ZN15GB_SerialHelper11checkSerialEhh+0x14a>
          if(g_isGrowboxStarted){
            loadWifiConfiguration = true;
          }
          break;
        }
        if (useSerialMonitor && input.length() > 0){
    1ef0:	80 91 ad 01 	lds	r24, 0x01AD
    1ef4:	88 23       	and	r24, r24
    1ef6:	d9 f0       	breq	.+54     	; 0x1f2e <_ZN15GB_SerialHelper11checkSerialEhh+0x136>
    1ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    1efa:	9e 81       	ldd	r25, Y+6	; 0x06
    1efc:	89 2b       	or	r24, r25
    1efe:	b9 f0       	breq	.+46     	; 0x1f2e <_ZN15GB_SerialHelper11checkSerialEhh+0x136>
          showWifiStatus(F("Not corrent wellcome message: "), false);
    1f00:	8f e8       	ldi	r24, 0x8F	; 143
    1f02:	91 e0       	ldi	r25, 0x01	; 1
    1f04:	60 e0       	ldi	r22, 0x00	; 0
    1f06:	0e 94 a3 08 	call	0x1146	; 0x1146 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
          GB_PrintDirty::printWithoutCRLF(input);
    1f0a:	c7 01       	movw	r24, r14
    1f0c:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String>
          Serial.print(FS(S_Next));
    1f10:	8b ea       	ldi	r24, 0xAB	; 171
    1f12:	93 e0       	ldi	r25, 0x03	; 3
    1f14:	64 ed       	ldi	r22, 0xD4	; 212
    1f16:	70 e0       	ldi	r23, 0x00	; 0
    1f18:	0e 94 f6 33 	call	0x67ec	; 0x67ec <_ZN5Print5printEPK19__FlashStringHelper>
          GB_PrintDirty::printHEX(input); 
    1f1c:	c7 01       	movw	r24, r14
    1f1e:	0e 94 bd 07 	call	0xf7a	; 0xf7a <_ZN13GB_PrintDirty8printHEXERK6String>
          Serial.println();
    1f22:	8b ea       	ldi	r24, 0xAB	; 171
    1f24:	93 e0       	ldi	r25, 0x03	; 3
    1f26:	0e 94 21 34 	call	0x6842	; 0x6842 <_ZN5Print7printlnEv>
          printDirtyEnd();
    1f2a:	0e 94 9c 08 	call	0x1138	; 0x1138 <_ZN15GB_SerialHelper13printDirtyEndEv>
      return; 
    }

    boolean loadWifiConfiguration = false;
    if (checkWifi || s_restartWifi){
      for (int i = 0; i<2; i++){ // Sometimes first command returns ERROR, two attempts
    1f2e:	c7 01       	movw	r24, r14
    1f30:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    1f34:	0f 5f       	subi	r16, 0xFF	; 255
    1f36:	1f 4f       	sbci	r17, 0xFF	; 255
    1f38:	02 30       	cpi	r16, 0x02	; 2
    1f3a:	11 05       	cpc	r17, r1
    1f3c:	09 f0       	breq	.+2      	; 0x1f40 <_ZN15GB_SerialHelper11checkSerialEhh+0x148>
    1f3e:	b0 cf       	rjmp	.-160    	; 0x1ea0 <_ZN15GB_SerialHelper11checkSerialEhh+0xa8>
    1f40:	10 e0       	ldi	r17, 0x00	; 0
          printDirtyEnd();
        }
      }
    }

    if (useSerialMonitor != oldUseSerialMonitor){
    1f42:	80 91 ad 01 	lds	r24, 0x01AD
    1f46:	8a 15       	cp	r24, r10
    1f48:	b9 f0       	breq	.+46     	; 0x1f78 <_ZN15GB_SerialHelper11checkSerialEhh+0x180>
      Serial.print(F("Serial monitor: "));
    1f4a:	8b ea       	ldi	r24, 0xAB	; 171
    1f4c:	93 e0       	ldi	r25, 0x03	; 3
    1f4e:	6e e7       	ldi	r22, 0x7E	; 126
    1f50:	71 e0       	ldi	r23, 0x01	; 1
    1f52:	0e 94 f6 33 	call	0x67ec	; 0x67ec <_ZN5Print5printEPK19__FlashStringHelper>
      if (useSerialMonitor){
    1f56:	80 91 ad 01 	lds	r24, 0x01AD
    1f5a:	88 23       	and	r24, r24
    1f5c:	29 f0       	breq	.+10     	; 0x1f68 <_ZN15GB_SerialHelper11checkSerialEhh+0x170>
        Serial.println(FS(S_enabled));
    1f5e:	8b ea       	ldi	r24, 0xAB	; 171
    1f60:	93 e0       	ldi	r25, 0x03	; 3
    1f62:	64 e4       	ldi	r22, 0x44	; 68
    1f64:	71 e0       	ldi	r23, 0x01	; 1
    1f66:	04 c0       	rjmp	.+8      	; 0x1f70 <_ZN15GB_SerialHelper11checkSerialEhh+0x178>
      } 
      else {
        Serial.println(FS(S_disabled));
    1f68:	8b ea       	ldi	r24, 0xAB	; 171
    1f6a:	93 e0       	ldi	r25, 0x03	; 3
    1f6c:	6d e4       	ldi	r22, 0x4D	; 77
    1f6e:	71 e0       	ldi	r23, 0x01	; 1
    1f70:	0e 94 41 34 	call	0x6882	; 0x6882 <_ZN5Print7printlnEPK19__FlashStringHelper>
      }
      printDirtyEnd();
    1f74:	0e 94 9c 08 	call	0x1138	; 0x1138 <_ZN15GB_SerialHelper13printDirtyEndEv>
    }
    if (useSerialWifi != oldUseSerialWifi && (useSerialMonitor || (useSerialMonitor != oldUseSerialMonitor ))){
    1f78:	90 91 ae 01 	lds	r25, 0x01AE
    1f7c:	9b 15       	cp	r25, r11
    1f7e:	d9 f0       	breq	.+54     	; 0x1fb6 <_ZN15GB_SerialHelper11checkSerialEhh+0x1be>
    1f80:	80 91 ad 01 	lds	r24, 0x01AD
    1f84:	88 23       	and	r24, r24
    1f86:	11 f4       	brne	.+4      	; 0x1f8c <_ZN15GB_SerialHelper11checkSerialEhh+0x194>
    1f88:	aa 20       	and	r10, r10
    1f8a:	a9 f0       	breq	.+42     	; 0x1fb6 <_ZN15GB_SerialHelper11checkSerialEhh+0x1be>
      if(useSerialWifi){ 
    1f8c:	99 23       	and	r25, r25
    1f8e:	59 f0       	breq	.+22     	; 0x1fa6 <_ZN15GB_SerialHelper11checkSerialEhh+0x1ae>
        Serial.print(F("Serial Wi-Fi:"));
    1f90:	8b ea       	ldi	r24, 0xAB	; 171
    1f92:	93 e0       	ldi	r25, 0x03	; 3
    1f94:	60 e7       	ldi	r22, 0x70	; 112
    1f96:	71 e0       	ldi	r23, 0x01	; 1
    1f98:	0e 94 f6 33 	call	0x67ec	; 0x67ec <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.println(FS(S_connected)); // shows when useSerialMonitor=false
    1f9c:	8b ea       	ldi	r24, 0xAB	; 171
    1f9e:	93 e0       	ldi	r25, 0x03	; 3
    1fa0:	67 e5       	ldi	r22, 0x57	; 87
    1fa2:	71 e0       	ldi	r23, 0x01	; 1
    1fa4:	04 c0       	rjmp	.+8      	; 0x1fae <_ZN15GB_SerialHelper11checkSerialEhh+0x1b6>
      } 
      else {
        Serial.println(FS(S_disconnected));
    1fa6:	8b ea       	ldi	r24, 0xAB	; 171
    1fa8:	93 e0       	ldi	r25, 0x03	; 3
    1faa:	62 e6       	ldi	r22, 0x62	; 98
    1fac:	71 e0       	ldi	r23, 0x01	; 1
    1fae:	0e 94 41 34 	call	0x6882	; 0x6882 <_ZN5Print7printlnEPK19__FlashStringHelper>
      }
      printDirtyEnd();
    1fb2:	0e 94 9c 08 	call	0x1138	; 0x1138 <_ZN15GB_SerialHelper13printDirtyEndEv>
    }

    // Close Serial connection if nessesary
    boolean newSerialInUse = (useSerialMonitor || useSerialWifi);
    1fb6:	80 91 ad 01 	lds	r24, 0x01AD
    1fba:	88 23       	and	r24, r24
    1fbc:	21 f4       	brne	.+8      	; 0x1fc6 <_ZN15GB_SerialHelper11checkSerialEhh+0x1ce>
    1fbe:	80 91 ae 01 	lds	r24, 0x01AE
    1fc2:	88 23       	and	r24, r24
    1fc4:	29 f0       	breq	.+10     	; 0x1fd0 <_ZN15GB_SerialHelper11checkSerialEhh+0x1d8>
    if (!newSerialInUse){
      Serial.end();
      return;
    } 
    else if (loadWifiConfiguration){
    1fc6:	11 23       	and	r17, r17
    1fc8:	39 f0       	breq	.+14     	; 0x1fd8 <_ZN15GB_SerialHelper11checkSerialEhh+0x1e0>
      startWifi();
    1fca:	0e 94 b5 0a 	call	0x156a	; 0x156a <_ZN15GB_SerialHelper9startWifiEv>
    1fce:	04 c0       	rjmp	.+8      	; 0x1fd8 <_ZN15GB_SerialHelper11checkSerialEhh+0x1e0>
    }

    // Close Serial connection if nessesary
    boolean newSerialInUse = (useSerialMonitor || useSerialWifi);
    if (!newSerialInUse){
      Serial.end();
    1fd0:	8b ea       	ldi	r24, 0xAB	; 171
    1fd2:	93 e0       	ldi	r25, 0x03	; 3
    1fd4:	0e 94 55 32 	call	0x64aa	; 0x64aa <_ZN14HardwareSerial3endEv>
      return;
    } 
    else if (loadWifiConfiguration){
      startWifi();
    }
  }
    1fd8:	2e 96       	adiw	r28, 0x0e	; 14
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	f8 94       	cli
    1fde:	de bf       	out	0x3e, r29	; 62
    1fe0:	0f be       	out	0x3f, r0	; 63
    1fe2:	cd bf       	out	0x3d, r28	; 61
    1fe4:	cf 91       	pop	r28
    1fe6:	df 91       	pop	r29
    1fe8:	1f 91       	pop	r17
    1fea:	0f 91       	pop	r16
    1fec:	ff 90       	pop	r15
    1fee:	ef 90       	pop	r14
    1ff0:	df 90       	pop	r13
    1ff2:	cf 90       	pop	r12
    1ff4:	bf 90       	pop	r11
    1ff6:	af 90       	pop	r10
    1ff8:	08 95       	ret

00001ffa <_Z16updateWiFiStatusv>:
  }



  static void updateWiFiStatus(){
    if (s_restartWifi){
    1ffa:	80 91 af 01 	lds	r24, 0x01AF
    1ffe:	88 23       	and	r24, r24
    2000:	21 f0       	breq	.+8      	; 0x200a <_Z16updateWiFiStatusv+0x10>
      checkSerial(false, true);
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	61 e0       	ldi	r22, 0x01	; 1
    2006:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <_ZN15GB_SerialHelper11checkSerialEhh>
    200a:	08 95       	ret

0000200c <_ZN14GB_Thermometer16updateStatisticsEv>:

    dallasTemperature.getAddress(oneWireAddress, 0); // search for devices on the bus and assign based on an index.
  }

  // TODO rename
  static boolean updateStatistics(){
    200c:	ef 92       	push	r14
    200e:	ff 92       	push	r15
    2010:	0f 93       	push	r16
    2012:	1f 93       	push	r17

    if(!dallasTemperature.requestTemperaturesByAddress(oneWireAddress)){
    2014:	81 ee       	ldi	r24, 0xE1	; 225
    2016:	91 e0       	ldi	r25, 0x01	; 1
    2018:	68 ee       	ldi	r22, 0xE8	; 232
    201a:	71 e0       	ldi	r23, 0x01	; 1
    201c:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <_ZN17DallasTemperature28requestTemperaturesByAddressEPh>
    2020:	88 23       	and	r24, r24
    2022:	19 f4       	brne	.+6      	; 0x202a <_ZN14GB_Thermometer16updateStatisticsEv+0x1e>
      GB_Logger::logError(ERROR_TERMOMETER_DISCONNECTED);
    2024:	8f e5       	ldi	r24, 0x5F	; 95
    2026:	91 e0       	ldi	r25, 0x01	; 1
    2028:	0e c0       	rjmp	.+28     	; 0x2046 <_ZN14GB_Thermometer16updateStatisticsEv+0x3a>
      return false;
    };

    float freshTemperature = dallasTemperature.getTempC(oneWireAddress);
    202a:	81 ee       	ldi	r24, 0xE1	; 225
    202c:	91 e0       	ldi	r25, 0x01	; 1
    202e:	68 ee       	ldi	r22, 0xE8	; 232
    2030:	71 e0       	ldi	r23, 0x01	; 1
    2032:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <_ZN17DallasTemperature8getTempCEPh>
    2036:	7b 01       	movw	r14, r22
    2038:	8c 01       	movw	r16, r24

    if ((int)freshTemperature == 0){
    203a:	0e 94 af 3a 	call	0x755e	; 0x755e <__fixsfsi>
    203e:	67 2b       	or	r22, r23
    2040:	31 f4       	brne	.+12     	; 0x204e <_ZN14GB_Thermometer16updateStatisticsEv+0x42>
      GB_Logger::logError(ERROR_TERMOMETER_ZERO_VALUE);  
    2042:	86 e6       	ldi	r24, 0x66	; 102
    2044:	91 e0       	ldi	r25, 0x01	; 1
    2046:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <_ZN9GB_Logger8logErrorER5Error>
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	39 c0       	rjmp	.+114    	; 0x20c0 <_ZN14GB_Thermometer16updateStatisticsEv+0xb4>
      return false;
    }

    statisticsTemperatureSumm += freshTemperature;
    204e:	60 91 f4 01 	lds	r22, 0x01F4
    2052:	70 91 f5 01 	lds	r23, 0x01F5
    2056:	80 91 f6 01 	lds	r24, 0x01F6
    205a:	90 91 f7 01 	lds	r25, 0x01F7
    205e:	a8 01       	movw	r20, r16
    2060:	97 01       	movw	r18, r14
    2062:	0e 94 df 39 	call	0x73be	; 0x73be <__addsf3>
    2066:	60 93 f4 01 	sts	0x01F4, r22
    206a:	70 93 f5 01 	sts	0x01F5, r23
    206e:	80 93 f6 01 	sts	0x01F6, r24
    2072:	90 93 f7 01 	sts	0x01F7, r25
    statisticsTemperatureCount++;
    2076:	20 91 f8 01 	lds	r18, 0x01F8
    207a:	30 91 f9 01 	lds	r19, 0x01F9
    207e:	2f 5f       	subi	r18, 0xFF	; 255
    2080:	3f 4f       	sbci	r19, 0xFF	; 255
    2082:	30 93 f9 01 	sts	0x01F9, r19
    2086:	20 93 f8 01 	sts	0x01F8, r18
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
  static boolean stopLogError(Error &error){
    if (error.isStored){
    208a:	80 91 6c 01 	lds	r24, 0x016C
    208e:	88 23       	and	r24, r24
    2090:	11 f4       	brne	.+4      	; 0x2096 <_ZN14GB_Thermometer16updateStatisticsEv+0x8a>
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	03 c0       	rjmp	.+6      	; 0x209c <_ZN14GB_Thermometer16updateStatisticsEv+0x90>
      error.isStored = false;
    2096:	10 92 6c 01 	sts	0x016C, r1
    209a:	91 e0       	ldi	r25, 0x01	; 1
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
  static boolean stopLogError(Error &error){
    if (error.isStored){
    209c:	80 91 65 01 	lds	r24, 0x0165
    20a0:	88 23       	and	r24, r24
    20a2:	19 f0       	breq	.+6      	; 0x20aa <_ZN14GB_Thermometer16updateStatisticsEv+0x9e>
      error.isStored = false;
    20a4:	10 92 65 01 	sts	0x0165, r1
    20a8:	81 e0       	ldi	r24, 0x01	; 1

    boolean forceLog = 
      GB_Logger::stopLogError(ERROR_TERMOMETER_ZERO_VALUE) |
      GB_Logger::stopLogError(ERROR_TERMOMETER_DISCONNECTED); 
    if (forceLog) {
    20aa:	89 2b       	or	r24, r25
    20ac:	11 f0       	breq	.+4      	; 0x20b2 <_ZN14GB_Thermometer16updateStatisticsEv+0xa6>
      getTemperature(true);
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	04 c0       	rjmp	.+8      	; 0x20ba <_ZN14GB_Thermometer16updateStatisticsEv+0xae>
    }
    else if (statisticsTemperatureCount > 100){
    20b2:	25 36       	cpi	r18, 0x65	; 101
    20b4:	31 05       	cpc	r19, r1
    20b6:	1c f0       	brlt	.+6      	; 0x20be <_ZN14GB_Thermometer16updateStatisticsEv+0xb2>
      getTemperature(); // prevents overflow 
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <_ZN14GB_Thermometer14getTemperatureEh>
    20be:	81 e0       	ldi	r24, 0x01	; 1
    }

    return true;
  }
    20c0:	1f 91       	pop	r17
    20c2:	0f 91       	pop	r16
    20c4:	ff 90       	pop	r15
    20c6:	ef 90       	pop	r14
    20c8:	08 95       	ret

000020ca <_Z27updateThermometerStatisticsv>:
    20ca:	0e 94 06 10 	call	0x200c	; 0x200c <_ZN14GB_Thermometer16updateStatisticsEv>
    20ce:	08 95       	ret

000020d0 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_>:
    else {
      showWifiStatus(F("Start failed"));
    }
  }

  static boolean handleSerialEvent(String &input, boolean &isWifiRequest, byte &wifiPortDescriptor){
    20d0:	4f 92       	push	r4
    20d2:	5f 92       	push	r5
    20d4:	6f 92       	push	r6
    20d6:	7f 92       	push	r7
    20d8:	8f 92       	push	r8
    20da:	9f 92       	push	r9
    20dc:	af 92       	push	r10
    20de:	bf 92       	push	r11
    20e0:	cf 92       	push	r12
    20e2:	df 92       	push	r13
    20e4:	ef 92       	push	r14
    20e6:	ff 92       	push	r15
    20e8:	0f 93       	push	r16
    20ea:	1f 93       	push	r17
    20ec:	df 93       	push	r29
    20ee:	cf 93       	push	r28
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62
    20f4:	e2 97       	sbiw	r28, 0x32	; 50
    20f6:	0f b6       	in	r0, 0x3f	; 63
    20f8:	f8 94       	cli
    20fa:	de bf       	out	0x3e, r29	; 62
    20fc:	0f be       	out	0x3f, r0	; 63
    20fe:	cd bf       	out	0x3d, r28	; 61
    2100:	7c 01       	movw	r14, r24
    2102:	2b 01       	movw	r4, r22
    2104:	3a 01       	movw	r6, r20

    input = "";  
    2106:	60 e0       	ldi	r22, 0x00	; 0
    2108:	71 e0       	ldi	r23, 0x01	; 1
    210a:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringaSEPKc>
    isWifiRequest = false; 
    210e:	f2 01       	movw	r30, r4
    2110:	10 82       	st	Z, r1
    wifiPortDescriptor = 0xFF;
    2112:	8f ef       	ldi	r24, 0xFF	; 255
    2114:	f3 01       	movw	r30, r6
    2116:	80 83       	st	Z, r24

    boolean isReadError = false;
    2118:	19 82       	std	Y+1, r1	; 0x01

    boolean isWifiRequestClientConnected = false;
    boolean isWifiRequestClientDisconnected = false;

    while (Serial.available()){
      input += (char) readByteFromSerialBuffer(isReadError); // Always use casting to (char) with String object!
    211a:	4e 01       	movw	r8, r28
    211c:	08 94       	sec
    211e:	81 1c       	adc	r8, r1
    2120:	91 1c       	adc	r9, r1
          // Data recive failed or undocumented command
          cleanSerialBuffer();     
        }
        return false;
      }
      else if (input.startsWith(flashStringLoad(S_WIFI_RESPONSE_WELLCOME)) || input.startsWith(flashStringLoad(S_WIFI_RESPONSE_ERROR))){
    2122:	7e e1       	ldi	r23, 0x1E	; 30
    2124:	a7 2e       	mov	r10, r23
    2126:	b1 2c       	mov	r11, r1
    2128:	ac 0e       	add	r10, r28
    212a:	bd 1e       	adc	r11, r29
    212c:	65 e2       	ldi	r22, 0x25	; 37
    212e:	c6 2e       	mov	r12, r22
    2130:	d1 2c       	mov	r13, r1
    2132:	cc 0e       	add	r12, r28
    2134:	dd 1e       	adc	r13, r29
    2136:	e8 c0       	rjmp	.+464    	; 0x2308 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x238>

    boolean isWifiRequestClientConnected = false;
    boolean isWifiRequestClientDisconnected = false;

    while (Serial.available()){
      input += (char) readByteFromSerialBuffer(isReadError); // Always use casting to (char) with String object!
    2138:	c4 01       	movw	r24, r8
    213a:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN15GB_SerialHelper24readByteFromSerialBufferERh>
    213e:	68 2f       	mov	r22, r24
    2140:	c7 01       	movw	r24, r14
    2142:	0e 94 9a 37 	call	0x6f34	; 0x6f34 <_ZN6String6concatEc>

      if (flashStringEquals(F("at+recv_data="), input)){ // length compires first 
    2146:	8d ea       	ldi	r24, 0xAD	; 173
    2148:	92 e0       	ldi	r25, 0x02	; 2
    214a:	b7 01       	movw	r22, r14
    214c:	0e 94 8b 07 	call	0xf16	; 0xf16 <_ZL17flashStringEqualsPK19__FlashStringHelperRK6String>
    2150:	88 23       	and	r24, r24
    2152:	09 f4       	brne	.+2      	; 0x2156 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x86>
    2154:	b3 c0       	rjmp	.+358    	; 0x22bc <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x1ec>
        input = "";     
    2156:	c7 01       	movw	r24, r14
    2158:	60 e0       	ldi	r22, 0x00	; 0
    215a:	71 e0       	ldi	r23, 0x01	; 1
    215c:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringaSEPKc>
        byte firstRequestHeaderByte = readByteFromSerialBuffer(isReadError); // first byte
    2160:	c4 01       	movw	r24, r8
    2162:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN15GB_SerialHelper24readByteFromSerialBufferERh>
    2166:	98 2f       	mov	r25, r24

        // Serial.print(F("WIFI-T> ")); Serial.println((byte)firstRequestHeaderByte, HEX); printDirtyEnd();

        if (firstRequestHeaderByte <= 0x07) {   
    2168:	88 30       	cpi	r24, 0x08	; 8
    216a:	08 f0       	brcs	.+2      	; 0x216e <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x9e>
    216c:	8b c0       	rjmp	.+278    	; 0x2284 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x1b4>
          // Recive data
          isWifiRequest = true;
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	f2 01       	movw	r30, r4
    2172:	80 83       	st	Z, r24

          wifiPortDescriptor = firstRequestHeaderByte;
    2174:	f3 01       	movw	r30, r6
    2176:	90 83       	st	Z, r25
    2178:	00 e0       	ldi	r16, 0x00	; 0
    217a:	10 e0       	ldi	r17, 0x00	; 0
   return (index) == length; 
   }
   */
  static void skipByteFromSerialBuffer(boolean &isError, byte length = 1){
    int index = 0;
    while ((index < length) && Serial.available()){
    217c:	8b ea       	ldi	r24, 0xAB	; 171
    217e:	93 e0       	ldi	r25, 0x03	; 3
    2180:	0e 94 bb 32 	call	0x6576	; 0x6576 <_ZN14HardwareSerial9availableEv>
    2184:	89 2b       	or	r24, r25
    2186:	09 f4       	brne	.+2      	; 0x218a <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0xba>
    2188:	4c c1       	rjmp	.+664    	; 0x2422 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x352>
      Serial.read();
    218a:	8b ea       	ldi	r24, 0xAB	; 171
    218c:	93 e0       	ldi	r25, 0x03	; 3
    218e:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <_ZN14HardwareSerial4readEv>
      index++;
    2192:	0f 5f       	subi	r16, 0xFF	; 255
    2194:	1f 4f       	sbci	r17, 0xFF	; 255
   return (index) == length; 
   }
   */
  static void skipByteFromSerialBuffer(boolean &isError, byte length = 1){
    int index = 0;
    while ((index < length) && Serial.available()){
    2196:	08 30       	cpi	r16, 0x08	; 8
    2198:	11 05       	cpc	r17, r1
    219a:	09 f4       	brne	.+2      	; 0x219e <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0xce>
    219c:	42 c1       	rjmp	.+644    	; 0x2422 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x352>
    219e:	ee cf       	rjmp	.-36     	; 0x217c <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0xac>
          skipByteFromSerialBuffer(isReadError, 8); // skip Destination port, IP and data length

          String CRLF = flashStringLoad(S_CRLF);

          // Read first line   
          while (Serial.available() && !input.endsWith(CRLF)){
    21a0:	8b ea       	ldi	r24, 0xAB	; 171
    21a2:	93 e0       	ldi	r25, 0x03	; 3
    21a4:	0e 94 bb 32 	call	0x6576	; 0x6576 <_ZN14HardwareSerial9availableEv>
    21a8:	89 2b       	or	r24, r25
    21aa:	09 f4       	brne	.+2      	; 0x21ae <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0xde>
    21ac:	4f c1       	rjmp	.+670    	; 0x244c <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x37c>
    21ae:	c7 01       	movw	r24, r14
    21b0:	6b 2d       	mov	r22, r11
    21b2:	70 2f       	mov	r23, r16
    21b4:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZNK6String8endsWithERKS_>
    21b8:	88 23       	and	r24, r24
    21ba:	09 f0       	breq	.+2      	; 0x21be <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0xee>
    21bc:	47 c1       	rjmp	.+654    	; 0x244c <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x37c>
            input += (char) readByteFromSerialBuffer(isReadError); // Always use casting to (char) with String object!
    21be:	c6 01       	movw	r24, r12
    21c0:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN15GB_SerialHelper24readByteFromSerialBufferERh>
    21c4:	68 2f       	mov	r22, r24
    21c6:	c7 01       	movw	r24, r14
    21c8:	0e 94 9a 37 	call	0x6f34	; 0x6f34 <_ZN6String6concatEc>
    21cc:	e9 cf       	rjmp	.-46     	; 0x21a0 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0xd0>
          }

          //Serial.print(F("WIFI-T> ")); Serial.println(input); printDirtyEnd(); 

          if (input.startsWith(flashStringLoad(S_WIFI_GET_)) && input.endsWith(CRLF)){
    21ce:	c7 01       	movw	r24, r14
    21d0:	be 01       	movw	r22, r28
    21d2:	6e 5f       	subi	r22, 0xFE	; 254
    21d4:	7f 4f       	sbci	r23, 0xFF	; 255
    21d6:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZNK6String8endsWithERKS_>
    21da:	88 23       	and	r24, r24
    21dc:	11 f0       	breq	.+4      	; 0x21e2 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x112>
    21de:	11 e0       	ldi	r17, 0x01	; 1
    21e0:	01 c0       	rjmp	.+2      	; 0x21e4 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x114>
    21e2:	10 e0       	ldi	r17, 0x00	; 0
    21e4:	ce 01       	movw	r24, r28
    21e6:	09 96       	adiw	r24, 0x09	; 9
    21e8:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    21ec:	11 23       	and	r17, r17
    21ee:	39 f1       	breq	.+78     	; 0x223e <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x16e>
            int lastIndex = input.indexOf(' ', 4);
    21f0:	c7 01       	movw	r24, r14
    21f2:	60 e2       	ldi	r22, 0x20	; 32
    21f4:	44 e0       	ldi	r20, 0x04	; 4
    21f6:	50 e0       	ldi	r21, 0x00	; 0
    21f8:	0e 94 36 36 	call	0x6c6c	; 0x6c6c <_ZNK6String7indexOfEcj>
    21fc:	9c 01       	movw	r18, r24
            if (lastIndex == -1){
    21fe:	ff ef       	ldi	r31, 0xFF	; 255
    2200:	8f 3f       	cpi	r24, 0xFF	; 255
    2202:	9f 07       	cpc	r25, r31
    2204:	29 f4       	brne	.+10     	; 0x2210 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x140>
              lastIndex = input.length()-2; // \r\n-1
    2206:	f7 01       	movw	r30, r14
    2208:	24 81       	ldd	r18, Z+4	; 0x04
    220a:	35 81       	ldd	r19, Z+5	; 0x05
    220c:	22 50       	subi	r18, 0x02	; 2
    220e:	30 40       	sbci	r19, 0x00	; 0
            }
            input = input.substring(4, lastIndex);             
    2210:	8e 01       	movw	r16, r28
    2212:	00 5f       	subi	r16, 0xF0	; 240
    2214:	1f 4f       	sbci	r17, 0xFF	; 255
    2216:	c8 01       	movw	r24, r16
    2218:	b7 01       	movw	r22, r14
    221a:	44 e0       	ldi	r20, 0x04	; 4
    221c:	50 e0       	ldi	r21, 0x00	; 0
    221e:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <_ZNK6String9substringEjj>
    2222:	c7 01       	movw	r24, r14
    2224:	b8 01       	movw	r22, r16
    2226:	0e 94 cf 38 	call	0x719e	; 0x719e <_ZN6StringaSERKS_>
    222a:	c8 01       	movw	r24, r16
    222c:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
            //Serial.print(F("WIFI-T> ")); Serial.println(input); printDirtyEnd(); 

            cleanSerialBuffer(); // We are not interested in data which is remained
    2230:	0e 94 8a 08 	call	0x1114	; 0x1114 <_ZN15GB_SerialHelper17cleanSerialBufferEv>
            break; // outside cicrle
          } else if (input.startsWith(flashStringLoad(S_WIFI_POST_)) && input.endsWith(CRLF)){
          
          }
          cleanSerialBuffer();
          closeConnection(wifiPortDescriptor);  // This is garbage request, only one attempt allowed
    2234:	ce 01       	movw	r24, r28
    2236:	02 96       	adiw	r24, 0x02	; 2
    2238:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    223c:	6c c0       	rjmp	.+216    	; 0x2316 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x246>
            //Serial.print(F("WIFI-T> ")); Serial.println(input); printDirtyEnd(); 

            cleanSerialBuffer(); // We are not interested in data which is remained

            break; // outside cicrle
          } else if (input.startsWith(flashStringLoad(S_WIFI_POST_)) && input.endsWith(CRLF)){
    223e:	8e 01       	movw	r16, r28
    2240:	09 5e       	subi	r16, 0xE9	; 233
    2242:	1f 4f       	sbci	r17, 0xFF	; 255
    2244:	c8 01       	movw	r24, r16
    2246:	65 e9       	ldi	r22, 0x95	; 149
    2248:	72 e0       	ldi	r23, 0x02	; 2
    224a:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <_ZL15flashStringLoadPKc>
    224e:	c7 01       	movw	r24, r14
    2250:	b8 01       	movw	r22, r16
    2252:	0e 94 99 36 	call	0x6d32	; 0x6d32 <_ZNK6String10startsWithERKS_>
    2256:	88 23       	and	r24, r24
    2258:	31 f0       	breq	.+12     	; 0x2266 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x196>
    225a:	c7 01       	movw	r24, r14
    225c:	be 01       	movw	r22, r28
    225e:	6e 5f       	subi	r22, 0xFE	; 254
    2260:	7f 4f       	sbci	r23, 0xFF	; 255
    2262:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <_ZNK6String8endsWithERKS_>
    2266:	ce 01       	movw	r24, r28
    2268:	47 96       	adiw	r24, 0x17	; 23
    226a:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
          
          }
          cleanSerialBuffer();
    226e:	0e 94 8a 08 	call	0x1114	; 0x1114 <_ZN15GB_SerialHelper17cleanSerialBufferEv>
          closeConnection(wifiPortDescriptor);  // This is garbage request, only one attempt allowed
    2272:	f3 01       	movw	r30, r6
    2274:	80 81       	ld	r24, Z
    2276:	0e 94 22 0a 	call	0x1444	; 0x1444 <_ZN15GB_SerialHelper15closeConnectionEh>
    227a:	ce 01       	movw	r24, r28
    227c:	02 96       	adiw	r24, 0x02	; 2
    227e:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    2282:	b7 c0       	rjmp	.+366    	; 0x23f2 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x322>
        } 
        else if (firstRequestHeaderByte == 0x80){
    2284:	80 38       	cpi	r24, 0x80	; 128
    2286:	51 f4       	brne	.+20     	; 0x229c <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x1cc>
          // TCP client connected
          isWifiRequestClientConnected = true;         
          wifiPortDescriptor = readByteFromSerialBuffer(isReadError); // second byte
    2288:	c4 01       	movw	r24, r8
    228a:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN15GB_SerialHelper24readByteFromSerialBufferERh>
    228e:	f3 01       	movw	r30, r6
    2290:	80 83       	st	Z, r24
          cleanSerialBuffer();
    2292:	0e 94 8a 08 	call	0x1114	; 0x1114 <_ZN15GB_SerialHelper17cleanSerialBufferEv>
    2296:	dd 24       	eor	r13, r13
    2298:	d3 94       	inc	r13
    229a:	3e c0       	rjmp	.+124    	; 0x2318 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x248>
          break; // outside cicrle
        }           
        else if (firstRequestHeaderByte == 0x81){
    229c:	81 38       	cpi	r24, 0x81	; 129
    229e:	59 f4       	brne	.+22     	; 0x22b6 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x1e6>
          // TCP client disconnected
          isWifiRequestClientDisconnected = true;
          wifiPortDescriptor = readByteFromSerialBuffer(isReadError); // second byte
    22a0:	c4 01       	movw	r24, r8
    22a2:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN15GB_SerialHelper24readByteFromSerialBufferERh>
    22a6:	f3 01       	movw	r30, r6
    22a8:	80 83       	st	Z, r24
          cleanSerialBuffer();
    22aa:	0e 94 8a 08 	call	0x1114	; 0x1114 <_ZN15GB_SerialHelper17cleanSerialBufferEv>
    22ae:	dd 24       	eor	r13, r13
    22b0:	cc 24       	eor	r12, r12
    22b2:	c3 94       	inc	r12
    22b4:	32 c0       	rjmp	.+100    	; 0x231a <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x24a>
          break; // outside circle
        } 
        else {
          // Data recive failed or undocumented command
          cleanSerialBuffer();     
    22b6:	0e 94 8a 08 	call	0x1114	; 0x1114 <_ZN15GB_SerialHelper17cleanSerialBufferEv>
    22ba:	9b c0       	rjmp	.+310    	; 0x23f2 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x322>
        }
        return false;
      }
      else if (input.startsWith(flashStringLoad(S_WIFI_RESPONSE_WELLCOME)) || input.startsWith(flashStringLoad(S_WIFI_RESPONSE_ERROR))){
    22bc:	c5 01       	movw	r24, r10
    22be:	60 e3       	ldi	r22, 0x30	; 48
    22c0:	71 e0       	ldi	r23, 0x01	; 1
    22c2:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <_ZL15flashStringLoadPKc>
    22c6:	c7 01       	movw	r24, r14
    22c8:	b5 01       	movw	r22, r10
    22ca:	0e 94 99 36 	call	0x6d32	; 0x6d32 <_ZNK6String10startsWithERKS_>
    22ce:	88 23       	and	r24, r24
    22d0:	11 f0       	breq	.+4      	; 0x22d6 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x206>
    22d2:	11 e0       	ldi	r17, 0x01	; 1
    22d4:	0f c0       	rjmp	.+30     	; 0x22f4 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x224>
    22d6:	c6 01       	movw	r24, r12
    22d8:	6d ec       	ldi	r22, 0xCD	; 205
    22da:	70 e0       	ldi	r23, 0x00	; 0
    22dc:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <_ZL15flashStringLoadPKc>
    22e0:	c7 01       	movw	r24, r14
    22e2:	b6 01       	movw	r22, r12
    22e4:	0e 94 99 36 	call	0x6d32	; 0x6d32 <_ZNK6String10startsWithERKS_>
    22e8:	81 11       	cpse	r24, r1
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	18 2f       	mov	r17, r24
    22ee:	c6 01       	movw	r24, r12
    22f0:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    22f4:	c5 01       	movw	r24, r10
    22f6:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    22fa:	11 23       	and	r17, r17
    22fc:	29 f0       	breq	.+10     	; 0x2308 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x238>
        checkSerial(false, true); // manual restart
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	61 e0       	ldi	r22, 0x01	; 1
    2302:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <_ZN15GB_SerialHelper11checkSerialEhh>
    2306:	75 c0       	rjmp	.+234    	; 0x23f2 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x322>
    boolean isReadError = false;

    boolean isWifiRequestClientConnected = false;
    boolean isWifiRequestClientDisconnected = false;

    while (Serial.available()){
    2308:	8b ea       	ldi	r24, 0xAB	; 171
    230a:	93 e0       	ldi	r25, 0x03	; 3
    230c:	0e 94 bb 32 	call	0x6576	; 0x6576 <_ZN14HardwareSerial9availableEv>
    2310:	89 2b       	or	r24, r25
    2312:	09 f0       	breq	.+2      	; 0x2316 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x246>
    2314:	11 cf       	rjmp	.-478    	; 0x2138 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x68>
    2316:	dd 24       	eor	r13, r13
    2318:	cc 24       	eor	r12, r12
        return false;
      }

    } // while (Serial.available()) 

    if (!isWifiRequest){
    231a:	f2 01       	movw	r30, r4
    231c:	80 81       	ld	r24, Z
    231e:	88 23       	and	r24, r24
    2320:	19 f4       	brne	.+6      	; 0x2328 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x258>
      input.trim();
    2322:	c7 01       	movw	r24, r14
    2324:	0e 94 c7 35 	call	0x6b8e	; 0x6b8e <_ZN6String4trimEv>
    }

    if (useSerialMonitor) {
    2328:	80 91 ad 01 	lds	r24, 0x01AD
    232c:	88 23       	and	r24, r24
    232e:	09 f4       	brne	.+2      	; 0x2332 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x262>
    2330:	52 c0       	rjmp	.+164    	; 0x23d6 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x306>
      if (isWifiRequestClientConnected || isWifiRequestClientDisconnected) {
    2332:	dd 20       	and	r13, r13
    2334:	11 f4       	brne	.+4      	; 0x233a <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x26a>
    2336:	cc 20       	and	r12, r12
    2338:	d9 f0       	breq	.+54     	; 0x2370 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x2a0>
        showWifiStatus(F("Client ")); 
    233a:	85 ea       	ldi	r24, 0xA5	; 165
    233c:	92 e0       	ldi	r25, 0x02	; 2
    233e:	61 e0       	ldi	r22, 0x01	; 1
    2340:	0e 94 a3 08 	call	0x1146	; 0x1146 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
        Serial.print(wifiPortDescriptor);
    2344:	8b ea       	ldi	r24, 0xAB	; 171
    2346:	93 e0       	ldi	r25, 0x03	; 3
    2348:	f3 01       	movw	r30, r6
    234a:	60 81       	ld	r22, Z
    234c:	4a e0       	ldi	r20, 0x0A	; 10
    234e:	50 e0       	ldi	r21, 0x00	; 0
    2350:	0e 94 f5 34 	call	0x69ea	; 0x69ea <_ZN5Print5printEhi>
        if (isWifiRequestClientConnected){
    2354:	dd 20       	and	r13, r13
    2356:	29 f0       	breq	.+10     	; 0x2362 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x292>
          Serial.println(FS(S_connected));
    2358:	8b ea       	ldi	r24, 0xAB	; 171
    235a:	93 e0       	ldi	r25, 0x03	; 3
    235c:	67 e5       	ldi	r22, 0x57	; 87
    235e:	71 e0       	ldi	r23, 0x01	; 1
    2360:	04 c0       	rjmp	.+8      	; 0x236a <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x29a>
        } 
        else {
          Serial.println(FS(S_disconnected));
    2362:	8b ea       	ldi	r24, 0xAB	; 171
    2364:	93 e0       	ldi	r25, 0x03	; 3
    2366:	62 e6       	ldi	r22, 0x62	; 98
    2368:	71 e0       	ldi	r23, 0x01	; 1
    236a:	0e 94 41 34 	call	0x6882	; 0x6882 <_ZN5Print7printlnEPK19__FlashStringHelper>
    236e:	31 c0       	rjmp	.+98     	; 0x23d2 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x302>
        }

      } 
      else {
        if (isWifiRequest){  
    2370:	f2 01       	movw	r30, r4
    2372:	80 81       	ld	r24, Z
    2374:	88 23       	and	r24, r24
    2376:	b9 f0       	breq	.+46     	; 0x23a6 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x2d6>
          showWifiStatus(FS(S_WIFI_GET_), false);
    2378:	8f e8       	ldi	r24, 0x8F	; 143
    237a:	92 e0       	ldi	r25, 0x02	; 2
    237c:	60 e0       	ldi	r22, 0x00	; 0
    237e:	0e 94 a3 08 	call	0x1146	; 0x1146 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
          Serial.println(input.substring(1));
    2382:	8e 01       	movw	r16, r28
    2384:	04 5d       	subi	r16, 0xD4	; 212
    2386:	1f 4f       	sbci	r17, 0xFF	; 255
    2388:	c8 01       	movw	r24, r16
    238a:	b7 01       	movw	r22, r14
    238c:	41 e0       	ldi	r20, 0x01	; 1
    238e:	50 e0       	ldi	r21, 0x00	; 0
    2390:	0e 94 c3 38 	call	0x7186	; 0x7186 <_ZNK6String9substringEj>
    2394:	8b ea       	ldi	r24, 0xAB	; 171
    2396:	93 e0       	ldi	r25, 0x03	; 3
    2398:	b8 01       	movw	r22, r16
    239a:	0e 94 8d 35 	call	0x6b1a	; 0x6b1a <_ZN5Print7printlnERK6String>
    239e:	c8 01       	movw	r24, r16
    23a0:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    23a4:	16 c0       	rjmp	.+44     	; 0x23d2 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x302>
        } 
        else {
          Serial.print(F("SERIAL> "));
    23a6:	8b ea       	ldi	r24, 0xAB	; 171
    23a8:	93 e0       	ldi	r25, 0x03	; 3
    23aa:	6c e9       	ldi	r22, 0x9C	; 156
    23ac:	72 e0       	ldi	r23, 0x02	; 2
    23ae:	0e 94 f6 33 	call	0x67ec	; 0x67ec <_ZN5Print5printEPK19__FlashStringHelper>
          GB_PrintDirty::printWithoutCRLF(input);
    23b2:	c7 01       	movw	r24, r14
    23b4:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String>
          Serial.print(FS(S_Next));
    23b8:	8b ea       	ldi	r24, 0xAB	; 171
    23ba:	93 e0       	ldi	r25, 0x03	; 3
    23bc:	64 ed       	ldi	r22, 0xD4	; 212
    23be:	70 e0       	ldi	r23, 0x00	; 0
    23c0:	0e 94 f6 33 	call	0x67ec	; 0x67ec <_ZN5Print5printEPK19__FlashStringHelper>
          GB_PrintDirty::printHEX(input);
    23c4:	c7 01       	movw	r24, r14
    23c6:	0e 94 bd 07 	call	0xf7a	; 0xf7a <_ZN13GB_PrintDirty8printHEXERK6String>
          Serial.println();
    23ca:	8b ea       	ldi	r24, 0xAB	; 171
    23cc:	93 e0       	ldi	r25, 0x03	; 3
    23ce:	0e 94 21 34 	call	0x6842	; 0x6842 <_ZN5Print7printlnEv>
        }  
      }
      printDirtyEnd();
    23d2:	0e 94 9c 08 	call	0x1138	; 0x1138 <_ZN15GB_SerialHelper13printDirtyEndEv>
    } 

    if (isWifiRequestClientConnected || isWifiRequestClientDisconnected){
    23d6:	dd 20       	and	r13, r13
    23d8:	61 f4       	brne	.+24     	; 0x23f2 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x322>
    23da:	cc 20       	and	r12, r12
    23dc:	51 f4       	brne	.+20     	; 0x23f2 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x322>
      return false; 
    }
    else if (isWifiRequest){
    23de:	f2 01       	movw	r30, r4
    23e0:	80 81       	ld	r24, Z
    23e2:	88 23       	and	r24, r24
    23e4:	21 f4       	brne	.+8      	; 0x23ee <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x31e>
    23e6:	80 91 ad 01 	lds	r24, 0x01AD
    23ea:	88 23       	and	r24, r24
    23ec:	19 f0       	breq	.+6      	; 0x23f4 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x324>
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	01 c0       	rjmp	.+2      	; 0x23f4 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x324>
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    } 
    else if (useSerialMonitor){
      return true;
    } 
    return false;
  } 
    23f4:	e2 96       	adiw	r28, 0x32	; 50
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	cd bf       	out	0x3d, r28	; 61
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	1f 91       	pop	r17
    2406:	0f 91       	pop	r16
    2408:	ff 90       	pop	r15
    240a:	ef 90       	pop	r14
    240c:	df 90       	pop	r13
    240e:	cf 90       	pop	r12
    2410:	bf 90       	pop	r11
    2412:	af 90       	pop	r10
    2414:	9f 90       	pop	r9
    2416:	8f 90       	pop	r8
    2418:	7f 90       	pop	r7
    241a:	6f 90       	pop	r6
    241c:	5f 90       	pop	r5
    241e:	4f 90       	pop	r4
    2420:	08 95       	ret
    int index = 0;
    while ((index < length) && Serial.available()){
      Serial.read();
      index++;
    }
    isError = ((index) == length); 
    2422:	19 82       	std	Y+1, r1	; 0x01
    2424:	08 30       	cpi	r16, 0x08	; 8
    2426:	11 05       	cpc	r17, r1
    2428:	11 f4       	brne	.+4      	; 0x242e <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x35e>
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	89 83       	std	Y+1, r24	; 0x01
           // Serial.print(F("WIFI-T> ")); Serial.println(dataLength); printDirtyEnd();
           */
          // Optimization
          skipByteFromSerialBuffer(isReadError, 8); // skip Destination port, IP and data length

          String CRLF = flashStringLoad(S_CRLF);
    242e:	8e 01       	movw	r16, r28
    2430:	0e 5f       	subi	r16, 0xFE	; 254
    2432:	1f 4f       	sbci	r17, 0xFF	; 255
    2434:	c8 01       	movw	r24, r16
    2436:	67 ec       	ldi	r22, 0xC7	; 199
    2438:	70 e0       	ldi	r23, 0x00	; 0
    243a:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <_ZL15flashStringLoadPKc>

          // Read first line   
          while (Serial.available() && !input.endsWith(CRLF)){
    243e:	b0 2e       	mov	r11, r16
    2440:	01 2f       	mov	r16, r17
            input += (char) readByteFromSerialBuffer(isReadError); // Always use casting to (char) with String object!
    2442:	6e 01       	movw	r12, r28
    2444:	08 94       	sec
    2446:	c1 1c       	adc	r12, r1
    2448:	d1 1c       	adc	r13, r1
    244a:	aa ce       	rjmp	.-684    	; 0x21a0 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0xd0>
          }

          //Serial.print(F("WIFI-T> ")); Serial.println(input); printDirtyEnd(); 

          if (input.startsWith(flashStringLoad(S_WIFI_GET_)) && input.endsWith(CRLF)){
    244c:	8e 01       	movw	r16, r28
    244e:	07 5f       	subi	r16, 0xF7	; 247
    2450:	1f 4f       	sbci	r17, 0xFF	; 255
    2452:	c8 01       	movw	r24, r16
    2454:	6f e8       	ldi	r22, 0x8F	; 143
    2456:	72 e0       	ldi	r23, 0x02	; 2
    2458:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <_ZL15flashStringLoadPKc>
    245c:	c7 01       	movw	r24, r14
    245e:	b8 01       	movw	r22, r16
    2460:	0e 94 99 36 	call	0x6d32	; 0x6d32 <_ZNK6String10startsWithERKS_>
    2464:	88 23       	and	r24, r24
    2466:	09 f4       	brne	.+2      	; 0x246a <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x39a>
    2468:	bc ce       	rjmp	.-648    	; 0x21e2 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x112>
    246a:	b1 ce       	rjmp	.-670    	; 0x21ce <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0xfe>

0000246c <loop>:
    246c:	8d e0       	ldi	r24, 0x0D	; 13
    246e:	0e 94 f2 30 	call	0x61e4	; 0x61e4 <digitalRead>
    2472:	60 e0       	ldi	r22, 0x00	; 0
    2474:	89 2b       	or	r24, r25
    2476:	09 f4       	brne	.+2      	; 0x247a <loop+0xe>
    2478:	61 e0       	ldi	r22, 0x01	; 1
    247a:	8d e0       	ldi	r24, 0x0D	; 13
    247c:	0e 94 9e 30 	call	0x613c	; 0x613c <digitalWrite>
    2480:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_ZN13GB_Controller15checkFreeMemoryEv>
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	60 e0       	ldi	r22, 0x00	; 0
    2488:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <_ZN15GB_SerialHelper11checkSerialEhh>
    248c:	85 e1       	ldi	r24, 0x15	; 21
    248e:	92 e0       	ldi	r25, 0x02	; 2
    2490:	48 ee       	ldi	r20, 0xE8	; 232
    2492:	53 e0       	ldi	r21, 0x03	; 3
    2494:	60 e0       	ldi	r22, 0x00	; 0
    2496:	70 e0       	ldi	r23, 0x00	; 0
    2498:	0e 94 a7 24 	call	0x494e	; 0x494e <_ZN15TimeAlarmsClass5delayEm>
    249c:	08 95       	ret

0000249e <_Z15printFreeMemoryv>:
    249e:	0f 93       	push	r16
    24a0:	1f 93       	push	r17
    24a2:	0b ea       	ldi	r16, 0xAB	; 171
    24a4:	13 e0       	ldi	r17, 0x03	; 3
    24a6:	c8 01       	movw	r24, r16
    24a8:	62 e0       	ldi	r22, 0x02	; 2
    24aa:	71 e0       	ldi	r23, 0x01	; 1
    24ac:	0e 94 f6 33 	call	0x67ec	; 0x67ec <_ZN5Print5printEPK19__FlashStringHelper>
    24b0:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <freeMemory>
    24b4:	bc 01       	movw	r22, r24
    24b6:	c8 01       	movw	r24, r16
    24b8:	4a e0       	ldi	r20, 0x0A	; 10
    24ba:	50 e0       	ldi	r21, 0x00	; 0
    24bc:	0e 94 47 35 	call	0x6a8e	; 0x6a8e <_ZN5Print5printEii>
    24c0:	c8 01       	movw	r24, r16
    24c2:	60 e1       	ldi	r22, 0x10	; 16
    24c4:	71 e0       	ldi	r23, 0x01	; 1
    24c6:	0e 94 41 34 	call	0x6882	; 0x6882 <_ZN5Print7printlnEPK19__FlashStringHelper>
    24ca:	1f 91       	pop	r17
    24cc:	0f 91       	pop	r16
    24ce:	08 95       	ret

000024d0 <_Z14isDayInGrowboxv>:
    24d0:	0e 94 2f 21 	call	0x425e	; 0x425e <_Z10timeStatusv>
    24d4:	01 97       	sbiw	r24, 0x01	; 1
    24d6:	29 f4       	brne	.+10     	; 0x24e2 <_Z14isDayInGrowboxv+0x12>
    24d8:	88 e5       	ldi	r24, 0x58	; 88
    24da:	91 e0       	ldi	r25, 0x01	; 1
    24dc:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <_ZN9GB_Logger8logErrorER5Error>
    24e0:	06 c0       	rjmp	.+12     	; 0x24ee <_Z14isDayInGrowboxv+0x1e>
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
  static boolean stopLogError(Error &error){
    if (error.isStored){
    24e2:	80 91 5e 01 	lds	r24, 0x015E
    24e6:	88 23       	and	r24, r24
    24e8:	11 f0       	breq	.+4      	; 0x24ee <_Z14isDayInGrowboxv+0x1e>
      error.isStored = false;
    24ea:	10 92 5e 01 	sts	0x015E, r1
    24ee:	0e 94 3b 21 	call	0x4276	; 0x4276 <_Z4hourv>
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	02 97       	sbiw	r24, 0x02	; 2
    24f6:	07 97       	sbiw	r24, 0x07	; 7
    24f8:	08 f4       	brcc	.+2      	; 0x24fc <_Z14isDayInGrowboxv+0x2c>
    24fa:	21 e0       	ldi	r18, 0x01	; 1
    24fc:	82 2f       	mov	r24, r18
    24fe:	08 95       	ret

00002500 <setup>:
    2500:	ef 92       	push	r14
    2502:	ff 92       	push	r15
    2504:	0f 93       	push	r16
    2506:	1f 93       	push	r17
    2508:	df 93       	push	r29
    250a:	cf 93       	push	r28
    250c:	cd b7       	in	r28, 0x3d	; 61
    250e:	de b7       	in	r29, 0x3e	; 62
    2510:	2e 97       	sbiw	r28, 0x0e	; 14
    2512:	0f b6       	in	r0, 0x3f	; 63
    2514:	f8 94       	cli
    2516:	de bf       	out	0x3e, r29	; 62
    2518:	0f be       	out	0x3f, r0	; 63
    251a:	cd bf       	out	0x3d, r28	; 61
    251c:	8d e0       	ldi	r24, 0x0D	; 13
    251e:	61 e0       	ldi	r22, 0x01	; 1
    2520:	0e 94 5f 30 	call	0x60be	; 0x60be <pinMode>
    2524:	8d e0       	ldi	r24, 0x0D	; 13
    2526:	61 e0       	ldi	r22, 0x01	; 1
    2528:	0e 94 5f 30 	call	0x60be	; 0x60be <pinMode>
    252c:	8c e0       	ldi	r24, 0x0C	; 12
    252e:	61 e0       	ldi	r22, 0x01	; 1
    2530:	0e 94 5f 30 	call	0x60be	; 0x60be <pinMode>
    2534:	8b e0       	ldi	r24, 0x0B	; 11
    2536:	62 e0       	ldi	r22, 0x02	; 2
    2538:	0e 94 5f 30 	call	0x60be	; 0x60be <pinMode>
    253c:	83 e0       	ldi	r24, 0x03	; 3
    253e:	61 e0       	ldi	r22, 0x01	; 1
    2540:	0e 94 5f 30 	call	0x60be	; 0x60be <pinMode>
    2544:	84 e0       	ldi	r24, 0x04	; 4
    2546:	61 e0       	ldi	r22, 0x01	; 1
    2548:	0e 94 5f 30 	call	0x60be	; 0x60be <pinMode>
    254c:	85 e0       	ldi	r24, 0x05	; 5
    254e:	61 e0       	ldi	r22, 0x01	; 1
    2550:	0e 94 5f 30 	call	0x60be	; 0x60be <pinMode>
    2554:	83 e0       	ldi	r24, 0x03	; 3
    2556:	61 e0       	ldi	r22, 0x01	; 1
    2558:	0e 94 9e 30 	call	0x613c	; 0x613c <digitalWrite>
    255c:	84 e0       	ldi	r24, 0x04	; 4
    255e:	61 e0       	ldi	r22, 0x01	; 1
    2560:	0e 94 9e 30 	call	0x613c	; 0x613c <digitalWrite>
    2564:	85 e0       	ldi	r24, 0x05	; 5
    2566:	61 e0       	ldi	r22, 0x01	; 1
    2568:	0e 94 9e 30 	call	0x613c	; 0x613c <digitalWrite>
    256c:	10 92 4a 01 	sts	0x014A, r1
    2570:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <freeMemory>
    2574:	7c 01       	movw	r14, r24
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	61 e0       	ldi	r22, 0x01	; 1
    257a:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <_ZN15GB_SerialHelper11checkSerialEhh>
    257e:	80 91 ad 01 	lds	r24, 0x01AD
    2582:	88 23       	and	r24, r24
    2584:	31 f0       	breq	.+12     	; 0x2592 <setup+0x92>
    2586:	0e 94 4f 12 	call	0x249e	; 0x249e <_Z15printFreeMemoryv>
    258a:	82 ea       	ldi	r24, 0xA2	; 162
    258c:	96 e0       	ldi	r25, 0x06	; 6
    258e:	0e 94 55 08 	call	0x10aa	; 0x10aa <_ZL17printStatusOnBootPK19__FlashStringHelper>
    2592:	0e 94 ab 1c 	call	0x3956	; 0x3956 <_Z15initLoggerModelv>
    this->sequenceSize = sequenceSize;
    this->description = description;
  }
  
  static Error* findByIndex(byte sequence, byte sequenceSize){
    Error* currentItemPtr = lastAddedItem;
    2596:	e0 91 4d 01 	lds	r30, 0x014D
    259a:	f0 91 4e 01 	lds	r31, 0x014E
    259e:	0a c0       	rjmp	.+20     	; 0x25b4 <setup+0xb4>
    while (currentItemPtr != 0){
      if (currentItemPtr->sequence == sequence && currentItemPtr->sequenceSize == sequenceSize) {
    25a0:	82 81       	ldd	r24, Z+2	; 0x02
    25a2:	8f 3f       	cpi	r24, 0xFF	; 255
    25a4:	19 f4       	brne	.+6      	; 0x25ac <setup+0xac>
    25a6:	83 81       	ldd	r24, Z+3	; 0x03
    25a8:	8f 3f       	cpi	r24, 0xFF	; 255
    25aa:	39 f0       	breq	.+14     	; 0x25ba <setup+0xba>
        return currentItemPtr;
      }
      currentItemPtr = (Error*)currentItemPtr->nextError;
    25ac:	80 81       	ld	r24, Z
    25ae:	91 81       	ldd	r25, Z+1	; 0x01
    25b0:	9c 01       	movw	r18, r24
    25b2:	f9 01       	movw	r30, r18
    this->description = description;
  }
  
  static Error* findByIndex(byte sequence, byte sequenceSize){
    Error* currentItemPtr = lastAddedItem;
    while (currentItemPtr != 0){
    25b4:	30 97       	sbiw	r30, 0x00	; 0
    25b6:	a1 f7       	brne	.-24     	; 0x25a0 <setup+0xa0>
    25b8:	7e c1       	rjmp	.+764    	; 0x28b6 <setup+0x3b6>
    25ba:	80 91 ad 01 	lds	r24, 0x01AD
    25be:	88 23       	and	r24, r24
    25c0:	21 f0       	breq	.+8      	; 0x25ca <setup+0xca>
    25c2:	87 e8       	ldi	r24, 0x87	; 135
    25c4:	96 e0       	ldi	r25, 0x06	; 6
    25c6:	0e 94 40 08 	call	0x1080	; 0x1080 <_ZL21printFatalErrorOnBootPK19__FlashStringHelper>
    25ca:	68 e8       	ldi	r22, 0x88	; 136
    25cc:	73 e1       	ldi	r23, 0x13	; 19
    25ce:	80 e0       	ldi	r24, 0x00	; 0
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <delay>
    25d6:	f9 cf       	rjmp	.-14     	; 0x25ca <setup+0xca>
    // Serial.print("lastAddedEvent ev: ");
    //Serial.println(lastAddedEvent->description);
    Event* currentItemPtr = lastAddedEvent;
    while (currentItemPtr != 0){
      //Serial.println(currentItemPtr->description);
      if (currentItemPtr->index == index) {
    25d8:	82 81       	ldd	r24, Z+2	; 0x02
    25da:	8f 3f       	cpi	r24, 0xFF	; 255
    25dc:	39 f0       	breq	.+14     	; 0x25ec <setup+0xec>
        return currentItemPtr;
      }
      currentItemPtr = (Event*)currentItemPtr->nextEvent;
    25de:	80 81       	ld	r24, Z
    25e0:	91 81       	ldd	r25, Z+1	; 0x01
    25e2:	9c 01       	movw	r18, r24
    25e4:	f9 01       	movw	r30, r18
    //Serial.print("search ev: ");    
    //Serial.println(index);
    // Serial.print("lastAddedEvent ev: ");
    //Serial.println(lastAddedEvent->description);
    Event* currentItemPtr = lastAddedEvent;
    while (currentItemPtr != 0){
    25e6:	30 97       	sbiw	r30, 0x00	; 0
    25e8:	b9 f7       	brne	.-18     	; 0x25d8 <setup+0xd8>
    25ea:	6a c1       	rjmp	.+724    	; 0x28c0 <setup+0x3c0>
    25ec:	80 91 ad 01 	lds	r24, 0x01AD
    25f0:	88 23       	and	r24, r24
    25f2:	21 f0       	breq	.+8      	; 0x25fc <setup+0xfc>
    25f4:	8c e6       	ldi	r24, 0x6C	; 108
    25f6:	96 e0       	ldi	r25, 0x06	; 6
    25f8:	0e 94 40 08 	call	0x1080	; 0x1080 <_ZL21printFatalErrorOnBootPK19__FlashStringHelper>
    25fc:	68 e8       	ldi	r22, 0x88	; 136
    25fe:	73 e1       	ldi	r23, 0x13	; 19
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <delay>
    2608:	f9 cf       	rjmp	.-14     	; 0x25fc <setup+0xfc>
    260a:	86 e6       	ldi	r24, 0x66	; 102
    260c:	96 e0       	ldi	r25, 0x06	; 6
    260e:	0e 94 55 08 	call	0x10aa	; 0x10aa <_ZL17printStatusOnBootPK19__FlashStringHelper>
    2612:	85 eb       	ldi	r24, 0xB5	; 181
    2614:	98 e2       	ldi	r25, 0x28	; 40
    2616:	0e 94 18 21 	call	0x4230	; 0x4230 <_Z15setSyncProviderPFmvE>
    261a:	0e 94 2f 21 	call	0x425e	; 0x425e <_Z10timeStatusv>
    261e:	89 2b       	or	r24, r25
    2620:	59 f0       	breq	.+22     	; 0x2638 <setup+0x138>
    2622:	0e 94 36 21 	call	0x426c	; 0x426c <_Z4yearv>
    2626:	8f 5d       	subi	r24, 0xDF	; 223
    2628:	97 40       	sbci	r25, 0x07	; 7
    262a:	34 f4       	brge	.+12     	; 0x2638 <setup+0x138>
    262c:	0e 94 36 21 	call	0x426c	; 0x426c <_Z4yearv>
    2630:	85 5e       	subi	r24, 0xE5	; 229
    2632:	97 40       	sbci	r25, 0x07	; 7
    2634:	0c f4       	brge	.+2      	; 0x2638 <setup+0x138>
    2636:	12 c1       	rjmp	.+548    	; 0x285c <setup+0x35c>
    2638:	81 e5       	ldi	r24, 0x51	; 81
    263a:	91 e0       	ldi	r25, 0x01	; 1
    263c:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <_ZN9GB_Logger8logErrorER5Error>
    2640:	e8 cf       	rjmp	.-48     	; 0x2612 <setup+0x112>
    2642:	10 92 57 01 	sts	0x0157, r1
    2646:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_ZN13GB_Controller15checkFreeMemoryEv>
    264a:	80 91 ad 01 	lds	r24, 0x01AD
    264e:	88 23       	and	r24, r24
    2650:	49 f0       	breq	.+18     	; 0x2664 <setup+0x164>
    2652:	8b e5       	ldi	r24, 0x5B	; 91
    2654:	96 e0       	ldi	r25, 0x06	; 6
    2656:	0e 94 55 08 	call	0x10aa	; 0x10aa <_ZL17printStatusOnBootPK19__FlashStringHelper>
    265a:	04 c0       	rjmp	.+8      	; 0x2664 <setup+0x164>
public:

  static void start(){
    dallasTemperature.begin();
    while(dallasTemperature.getDeviceCount() == 0){
      GB_Logger::logError(ERROR_TERMOMETER_DISCONNECTED);
    265c:	8f e5       	ldi	r24, 0x5F	; 95
    265e:	91 e0       	ldi	r25, 0x01	; 1
    2660:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <_ZN9GB_Logger8logErrorER5Error>
      dallasTemperature.begin();
    2664:	81 ee       	ldi	r24, 0xE1	; 225
    2666:	91 e0       	ldi	r25, 0x01	; 1
    2668:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <_ZN17DallasTemperature5beginEv>

public:

  static void start(){
    dallasTemperature.begin();
    while(dallasTemperature.getDeviceCount() == 0){
    266c:	81 ee       	ldi	r24, 0xE1	; 225
    266e:	91 e0       	ldi	r25, 0x01	; 1
    2670:	0e 94 0f 2b 	call	0x561e	; 0x561e <_ZN17DallasTemperature14getDeviceCountEv>
    2674:	88 23       	and	r24, r24
    2676:	91 f3       	breq	.-28     	; 0x265c <setup+0x15c>
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
  static boolean stopLogError(Error &error){
    if (error.isStored){
    2678:	80 91 65 01 	lds	r24, 0x0165
    267c:	88 23       	and	r24, r24
    267e:	11 f0       	breq	.+4      	; 0x2684 <setup+0x184>
      error.isStored = false;
    2680:	10 92 65 01 	sts	0x0165, r1
      GB_Logger::logError(ERROR_TERMOMETER_DISCONNECTED);
      dallasTemperature.begin();
    }  
    GB_Logger::stopLogError(ERROR_TERMOMETER_DISCONNECTED);

    dallasTemperature.getAddress(oneWireAddress, 0); // search for devices on the bus and assign based on an index.
    2684:	81 ee       	ldi	r24, 0xE1	; 225
    2686:	91 e0       	ldi	r25, 0x01	; 1
    2688:	68 ee       	ldi	r22, 0xE8	; 232
    268a:	71 e0       	ldi	r23, 0x01	; 1
    268c:	40 e0       	ldi	r20, 0x00	; 0
    268e:	0e 94 9f 2d 	call	0x5b3e	; 0x5b3e <_ZN17DallasTemperature10getAddressEPhh>
    2692:	06 c0       	rjmp	.+12     	; 0x26a0 <setup+0x1a0>
    2694:	68 ee       	ldi	r22, 0xE8	; 232
    2696:	73 e0       	ldi	r23, 0x03	; 3
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <delay>
    26a0:	0e 94 06 10 	call	0x200c	; 0x200c <_ZN14GB_Thermometer16updateStatisticsEv>
    26a4:	88 23       	and	r24, r24
    26a6:	b1 f3       	breq	.-20     	; 0x2694 <setup+0x194>
    26a8:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_ZN13GB_Controller15checkFreeMemoryEv>
    26ac:	80 91 ad 01 	lds	r24, 0x01AD
    26b0:	88 23       	and	r24, r24
    26b2:	21 f0       	breq	.+8      	; 0x26bc <setup+0x1bc>
    26b4:	83 e5       	ldi	r24, 0x53	; 83
    26b6:	96 e0       	ldi	r25, 0x06	; 6
    26b8:	0e 94 55 08 	call	0x10aa	; 0x10aa <_ZL17printStatusOnBootPK19__FlashStringHelper>
    26bc:	00 e0       	ldi	r16, 0x00	; 0
    26be:	10 e0       	ldi	r17, 0x00	; 0
    }
  }

  static void read(word address, void *data, const byte sizeofData) {
    for (word c = 0; c < sizeofData; c++){
      byte value =  read(address + c);
    26c0:	c8 01       	movw	r24, r16
    26c2:	0e 94 86 06 	call	0xd0c	; 0xd0c <_ZN10GB_Storage4readEj>
      ((byte*)data)[c] = value;
    26c6:	f8 01       	movw	r30, r16
    26c8:	ef 53       	subi	r30, 0x3F	; 63
    26ca:	fe 4f       	sbci	r31, 0xFE	; 254
    26cc:	80 83       	st	Z, r24
      write(address + c, value);
    }
  }

  static void read(word address, void *data, const byte sizeofData) {
    for (word c = 0; c < sizeofData; c++){
    26ce:	0f 5f       	subi	r16, 0xFF	; 255
    26d0:	1f 4f       	sbci	r17, 0xFF	; 255
    26d2:	00 32       	cpi	r16, 0x20	; 32
    26d4:	11 05       	cpc	r17, r1
    26d6:	a1 f7       	brne	.-24     	; 0x26c0 <setup+0x1c0>
  }

private :

  static boolean isBootRecordCorrect(){ // TODO rename it
    return (bootRecord.first_magic == MAGIC_NUMBER) && (bootRecord.last_magic == MAGIC_NUMBER);
    26d8:	80 91 c1 01 	lds	r24, 0x01C1
    26dc:	90 91 c2 01 	lds	r25, 0x01C2
    26e0:	85 55       	subi	r24, 0x55	; 85
    26e2:	9a 4a       	sbci	r25, 0xAA	; 170
    26e4:	09 f0       	breq	.+2      	; 0x26e8 <setup+0x1e8>
    26e6:	c0 c0       	rjmp	.+384    	; 0x2868 <setup+0x368>
    26e8:	80 91 df 01 	lds	r24, 0x01DF
    26ec:	90 91 e0 01 	lds	r25, 0x01E0
    26f0:	85 55       	subi	r24, 0x55	; 85
    26f2:	9a 4a       	sbci	r25, 0xAA	; 170
    26f4:	09 f0       	breq	.+2      	; 0x26f8 <setup+0x1f8>
    26f6:	b8 c0       	rjmp	.+368    	; 0x2868 <setup+0x368>

  static boolean start(){

    GB_Storage::read(0, &bootRecord, sizeof(BootRecord));
    if (isBootRecordCorrect()){
      bootRecord.lastStartupTimeStamp = now();      
    26f8:	0e 94 89 20 	call	0x4112	; 0x4112 <_Z3nowv>
    26fc:	60 93 c7 01 	sts	0x01C7, r22
    2700:	70 93 c8 01 	sts	0x01C8, r23
    2704:	80 93 c9 01 	sts	0x01C9, r24
    2708:	90 93 ca 01 	sts	0x01CA, r25
      GB_Storage::write(OFFSETOF(BootRecord, lastStartupTimeStamp), &(bootRecord.lastStartupTimeStamp), sizeof(bootRecord.lastStartupTimeStamp));      
    270c:	86 e0       	ldi	r24, 0x06	; 6
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	67 ec       	ldi	r22, 0xC7	; 199
    2712:	71 e0       	ldi	r23, 0x01	; 1
    2714:	44 e0       	ldi	r20, 0x04	; 4
    2716:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <_ZN10GB_Storage5writeEjPKvh>
    271a:	91 e0       	ldi	r25, 0x01	; 1
    271c:	11 c0       	rjmp	.+34     	; 0x2740 <setup+0x240>
      bootRecord.lastStartupTimeStamp = bootRecord.firstStartupTimeStamp;
      bootRecord.nextLogRecordAddress = sizeof(BootRecord);
      bootRecord.boolPreferencies.isLogOverflow = false;
      bootRecord.boolPreferencies.isLoggerEnabled = true;
      for(byte i=0; i<sizeof(bootRecord.reserved); i++){
        bootRecord.reserved[i] = 0;
    271e:	11 92       	st	Z+, r1
      bootRecord.firstStartupTimeStamp = now();
      bootRecord.lastStartupTimeStamp = bootRecord.firstStartupTimeStamp;
      bootRecord.nextLogRecordAddress = sizeof(BootRecord);
      bootRecord.boolPreferencies.isLogOverflow = false;
      bootRecord.boolPreferencies.isLoggerEnabled = true;
      for(byte i=0; i<sizeof(bootRecord.reserved); i++){
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	ef 3d       	cpi	r30, 0xDF	; 223
    2724:	f8 07       	cpc	r31, r24
    2726:	d9 f7       	brne	.-10     	; 0x271e <setup+0x21e>
        bootRecord.reserved[i] = 0;
      }
      bootRecord.last_magic = MAGIC_NUMBER;
    2728:	85 e5       	ldi	r24, 0x55	; 85
    272a:	9a ea       	ldi	r25, 0xAA	; 170
    272c:	91 83       	std	Z+1, r25	; 0x01
    272e:	80 83       	st	Z, r24

      GB_Storage::write(0, &bootRecord, sizeof(BootRecord));
    2730:	7e 97       	sbiw	r30, 0x1e	; 30
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	bf 01       	movw	r22, r30
    2738:	40 e2       	ldi	r20, 0x20	; 32
    273a:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <_ZN10GB_Storage5writeEjPKvh>
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	80 93 4a 01 	sts	0x014A, r24
    2746:	99 23       	and	r25, r25
    2748:	19 f0       	breq	.+6      	; 0x2750 <setup+0x250>
    274a:	80 e8       	ldi	r24, 0x80	; 128
    274c:	91 e0       	ldi	r25, 0x01	; 1
    274e:	02 c0       	rjmp	.+4      	; 0x2754 <setup+0x254>
    2750:	8b e7       	ldi	r24, 0x7B	; 123
    2752:	91 e0       	ldi	r25, 0x01	; 1
    2754:	0e 94 b5 0c 	call	0x196a	; 0x196a <_ZN9GB_Logger8logEventER5Event>
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <_ZN14GB_Thermometer14getTemperatureEh>
    275e:	0e 94 68 12 	call	0x24d0	; 0x24d0 <_Z14isDayInGrowboxv>
    2762:	88 23       	and	r24, r24
    2764:	19 f0       	breq	.+6      	; 0x276c <setup+0x26c>
    2766:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_Z15switchToDayModev>
    276a:	02 c0       	rjmp	.+4      	; 0x2770 <setup+0x270>
    276c:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <_Z17switchToNightModev>
    2770:	85 e1       	ldi	r24, 0x15	; 21
    2772:	92 e0       	ldi	r25, 0x02	; 2
    2774:	44 e1       	ldi	r20, 0x14	; 20
    2776:	50 e0       	ldi	r21, 0x00	; 0
    2778:	60 e0       	ldi	r22, 0x00	; 0
    277a:	70 e0       	ldi	r23, 0x00	; 0
    277c:	25 e6       	ldi	r18, 0x65	; 101
    277e:	30 e1       	ldi	r19, 0x10	; 16
    2780:	0e 94 40 24 	call	0x4880	; 0x4880 <_ZN15TimeAlarmsClass11timerRepeatEmPFvvE>
    2784:	85 e1       	ldi	r24, 0x15	; 21
    2786:	92 e0       	ldi	r25, 0x02	; 2
    2788:	44 e1       	ldi	r20, 0x14	; 20
    278a:	50 e0       	ldi	r21, 0x00	; 0
    278c:	60 e0       	ldi	r22, 0x00	; 0
    278e:	70 e0       	ldi	r23, 0x00	; 0
    2790:	2d ef       	ldi	r18, 0xFD	; 253
    2792:	3f e0       	ldi	r19, 0x0F	; 15
    2794:	0e 94 40 24 	call	0x4880	; 0x4880 <_ZN15TimeAlarmsClass11timerRepeatEmPFvvE>
    2798:	85 e1       	ldi	r24, 0x15	; 21
    279a:	92 e0       	ldi	r25, 0x02	; 2
    279c:	4c e2       	ldi	r20, 0x2C	; 44
    279e:	51 e0       	ldi	r21, 0x01	; 1
    27a0:	60 e0       	ldi	r22, 0x00	; 0
    27a2:	70 e0       	ldi	r23, 0x00	; 0
    27a4:	2b e7       	ldi	r18, 0x7B	; 123
    27a6:	3e e0       	ldi	r19, 0x0E	; 14
    27a8:	0e 94 40 24 	call	0x4880	; 0x4880 <_ZN15TimeAlarmsClass11timerRepeatEmPFvvE>
    27ac:	85 e1       	ldi	r24, 0x15	; 21
    27ae:	92 e0       	ldi	r25, 0x02	; 2
    27b0:	61 e0       	ldi	r22, 0x01	; 1
    27b2:	70 e0       	ldi	r23, 0x00	; 0
    27b4:	40 e0       	ldi	r20, 0x00	; 0
    27b6:	50 e0       	ldi	r21, 0x00	; 0
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	0e ee       	ldi	r16, 0xEE	; 238
    27be:	1e e0       	ldi	r17, 0x0E	; 14
    27c0:	0e 94 51 24 	call	0x48a2	; 0x48a2 <_ZN15TimeAlarmsClass11alarmRepeatEiiiPFvvE>
    27c4:	85 e1       	ldi	r24, 0x15	; 21
    27c6:	92 e0       	ldi	r25, 0x02	; 2
    27c8:	69 e0       	ldi	r22, 0x09	; 9
    27ca:	70 e0       	ldi	r23, 0x00	; 0
    27cc:	40 e0       	ldi	r20, 0x00	; 0
    27ce:	50 e0       	ldi	r21, 0x00	; 0
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	01 ee       	ldi	r16, 0xE1	; 225
    27d6:	1e e0       	ldi	r17, 0x0E	; 14
    27d8:	0e 94 51 24 	call	0x48a2	; 0x48a2 <_ZN15TimeAlarmsClass11alarmRepeatEiiiPFvvE>
    27dc:	80 91 ad 01 	lds	r24, 0x01AD
    27e0:	88 23       	and	r24, r24
    27e2:	69 f0       	breq	.+26     	; 0x27fe <setup+0x2fe>
    27e4:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <freeMemory>
    27e8:	e8 16       	cp	r14, r24
    27ea:	f9 06       	cpc	r15, r25
    27ec:	11 f0       	breq	.+4      	; 0x27f2 <setup+0x2f2>
    27ee:	0e 94 4f 12 	call	0x249e	; 0x249e <_Z15printFreeMemoryv>
    27f2:	8b ea       	ldi	r24, 0xAB	; 171
    27f4:	93 e0       	ldi	r25, 0x03	; 3
    27f6:	66 e3       	ldi	r22, 0x36	; 54
    27f8:	76 e0       	ldi	r23, 0x06	; 6
    27fa:	0e 94 41 34 	call	0x6882	; 0x6882 <_ZN5Print7printlnEPK19__FlashStringHelper>
    27fe:	80 91 ad 01 	lds	r24, 0x01AD
    2802:	88 23       	and	r24, r24
    2804:	11 f0       	breq	.+4      	; 0x280a <setup+0x30a>
    2806:	0e 94 9c 08 	call	0x1138	; 0x1138 <_ZN15GB_SerialHelper13printDirtyEndEv>
    280a:	80 91 ae 01 	lds	r24, 0x01AE
    280e:	88 23       	and	r24, r24
    2810:	09 f4       	brne	.+2      	; 0x2814 <setup+0x314>
    2812:	5e c0       	rjmp	.+188    	; 0x28d0 <setup+0x3d0>
    2814:	7e 01       	movw	r14, r28
    2816:	08 94       	sec
    2818:	e1 1c       	adc	r14, r1
    281a:	f1 1c       	adc	r15, r1
    281c:	c7 01       	movw	r24, r14
    281e:	61 e3       	ldi	r22, 0x31	; 49
    2820:	76 e0       	ldi	r23, 0x06	; 6
    2822:	0e 94 ba 06 	call	0xd74	; 0xd74 <_ZL15flashStringLoadPK19__FlashStringHelper>
    2826:	8e 01       	movw	r16, r28
    2828:	08 5f       	subi	r16, 0xF8	; 248
    282a:	1f 4f       	sbci	r17, 0xFF	; 255
    282c:	c8 01       	movw	r24, r16
    282e:	64 e2       	ldi	r22, 0x24	; 36
    2830:	76 e0       	ldi	r23, 0x06	; 6
    2832:	0e 94 ba 06 	call	0xd74	; 0xd74 <_ZL15flashStringLoadPK19__FlashStringHelper>
      cleanSerialBuffer();
    }
  }

  static void setWifiConfiguration(const String& _s_wifiSID, const String& _s_wifiPass){
    s_wifiSID = _s_wifiSID;
    2836:	80 eb       	ldi	r24, 0xB0	; 176
    2838:	91 e0       	ldi	r25, 0x01	; 1
    283a:	b7 01       	movw	r22, r14
    283c:	0e 94 cf 38 	call	0x719e	; 0x719e <_ZN6StringaSERKS_>
    s_wifiPass = _s_wifiPass;
    2840:	87 eb       	ldi	r24, 0xB7	; 183
    2842:	91 e0       	ldi	r25, 0x01	; 1
    2844:	b8 01       	movw	r22, r16
    2846:	0e 94 cf 38 	call	0x719e	; 0x719e <_ZN6StringaSERKS_>
    284a:	c8 01       	movw	r24, r16
    284c:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    2850:	c7 01       	movw	r24, r14
    2852:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    2856:	0e 94 b5 0a 	call	0x156a	; 0x156a <_ZN15GB_SerialHelper9startWifiEv>
    285a:	3a c0       	rjmp	.+116    	; 0x28d0 <setup+0x3d0>
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
  static boolean stopLogError(Error &error){
    if (error.isStored){
    285c:	80 91 57 01 	lds	r24, 0x0157
    2860:	88 23       	and	r24, r24
    2862:	09 f0       	breq	.+2      	; 0x2866 <setup+0x366>
    2864:	ee ce       	rjmp	.-548    	; 0x2642 <setup+0x142>
    2866:	ef ce       	rjmp	.-546    	; 0x2646 <setup+0x146>
      bootRecord.lastStartupTimeStamp = now();      
      GB_Storage::write(OFFSETOF(BootRecord, lastStartupTimeStamp), &(bootRecord.lastStartupTimeStamp), sizeof(bootRecord.lastStartupTimeStamp));      
      return true;   
    } 
    else {
      bootRecord.first_magic = MAGIC_NUMBER;
    2868:	85 e5       	ldi	r24, 0x55	; 85
    286a:	9a ea       	ldi	r25, 0xAA	; 170
    286c:	90 93 c2 01 	sts	0x01C2, r25
    2870:	80 93 c1 01 	sts	0x01C1, r24
      bootRecord.firstStartupTimeStamp = now();
    2874:	0e 94 89 20 	call	0x4112	; 0x4112 <_Z3nowv>
    2878:	60 93 c3 01 	sts	0x01C3, r22
    287c:	70 93 c4 01 	sts	0x01C4, r23
    2880:	80 93 c5 01 	sts	0x01C5, r24
    2884:	90 93 c6 01 	sts	0x01C6, r25
      bootRecord.lastStartupTimeStamp = bootRecord.firstStartupTimeStamp;
    2888:	60 93 c7 01 	sts	0x01C7, r22
    288c:	70 93 c8 01 	sts	0x01C8, r23
    2890:	80 93 c9 01 	sts	0x01C9, r24
    2894:	90 93 ca 01 	sts	0x01CA, r25
      bootRecord.nextLogRecordAddress = sizeof(BootRecord);
    2898:	80 e2       	ldi	r24, 0x20	; 32
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	90 93 cc 01 	sts	0x01CC, r25
    28a0:	80 93 cb 01 	sts	0x01CB, r24
      bootRecord.boolPreferencies.isLogOverflow = false;
    28a4:	80 91 cd 01 	lds	r24, 0x01CD
      bootRecord.boolPreferencies.isLoggerEnabled = true;
    28a8:	88 7f       	andi	r24, 0xF8	; 248
    28aa:	82 60       	ori	r24, 0x02	; 2
    28ac:	80 93 cd 01 	sts	0x01CD, r24
    28b0:	ee ec       	ldi	r30, 0xCE	; 206
    28b2:	f1 e0       	ldi	r31, 0x01	; 1
    28b4:	34 cf       	rjmp	.-408    	; 0x271e <setup+0x21e>
  static Event* findByIndex(byte index){
    //Serial.print("search ev: ");    
    //Serial.println(index);
    // Serial.print("lastAddedEvent ev: ");
    //Serial.println(lastAddedEvent->description);
    Event* currentItemPtr = lastAddedEvent;
    28b6:	e0 91 4f 01 	lds	r30, 0x014F
    28ba:	f0 91 50 01 	lds	r31, 0x0150
    28be:	93 ce       	rjmp	.-730    	; 0x25e6 <setup+0xe6>
    28c0:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_ZN13GB_Controller15checkFreeMemoryEv>
    28c4:	80 91 ad 01 	lds	r24, 0x01AD
    28c8:	88 23       	and	r24, r24
    28ca:	09 f4       	brne	.+2      	; 0x28ce <setup+0x3ce>
    28cc:	a2 ce       	rjmp	.-700    	; 0x2612 <setup+0x112>
    28ce:	9d ce       	rjmp	.-710    	; 0x260a <setup+0x10a>
    28d0:	2e 96       	adiw	r28, 0x0e	; 14
    28d2:	0f b6       	in	r0, 0x3f	; 63
    28d4:	f8 94       	cli
    28d6:	de bf       	out	0x3e, r29	; 62
    28d8:	0f be       	out	0x3f, r0	; 63
    28da:	cd bf       	out	0x3d, r28	; 61
    28dc:	cf 91       	pop	r28
    28de:	df 91       	pop	r29
    28e0:	1f 91       	pop	r17
    28e2:	0f 91       	pop	r16
    28e4:	ff 90       	pop	r15
    28e6:	ef 90       	pop	r14
    28e8:	08 95       	ret

000028ea <_ZN15GB_SerialHelper13stopHttpFrameEv>:
  static void startHttpFrame(const byte &wifiPortDescriptor){
    sendWifiFrameStart(wifiPortDescriptor, WIFI_RESPONSE_FRAME_SIZE);
    s_wifiResponseAutoFlushConut = 0;
  }

  static boolean stopHttpFrame(){
    28ea:	cf 93       	push	r28
    28ec:	df 93       	push	r29
    if (s_wifiResponseAutoFlushConut > 0){
    28ee:	80 91 bf 01 	lds	r24, 0x01BF
    28f2:	90 91 c0 01 	lds	r25, 0x01C0
    28f6:	18 16       	cp	r1, r24
    28f8:	19 06       	cpc	r1, r25
    28fa:	64 f0       	brlt	.+24     	; 0x2914 <_ZN15GB_SerialHelper13stopHttpFrameEv+0x2a>
    28fc:	13 c0       	rjmp	.+38     	; 0x2924 <_ZN15GB_SerialHelper13stopHttpFrameEv+0x3a>
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    28fe:	8b ea       	ldi	r24, 0xAB	; 171
    2900:	93 e0       	ldi	r25, 0x03	; 3
    2902:	60 e0       	ldi	r22, 0x00	; 0
    2904:	0e 94 25 33 	call	0x664a	; 0x664a <_ZN14HardwareSerial5writeEh>
      while (s_wifiResponseAutoFlushConut < WIFI_RESPONSE_FRAME_SIZE){
        s_wifiResponseAutoFlushConut += Serial.write(0x00);
    2908:	c8 0f       	add	r28, r24
    290a:	d9 1f       	adc	r29, r25
    290c:	d0 93 c0 01 	sts	0x01C0, r29
    2910:	c0 93 bf 01 	sts	0x01BF, r28
    s_wifiResponseAutoFlushConut = 0;
  }

  static boolean stopHttpFrame(){
    if (s_wifiResponseAutoFlushConut > 0){
      while (s_wifiResponseAutoFlushConut < WIFI_RESPONSE_FRAME_SIZE){
    2914:	c0 91 bf 01 	lds	r28, 0x01BF
    2918:	d0 91 c0 01 	lds	r29, 0x01C0
    291c:	85 e0       	ldi	r24, 0x05	; 5
    291e:	c8 37       	cpi	r28, 0x78	; 120
    2920:	d8 07       	cpc	r29, r24
    2922:	6c f3       	brlt	.-38     	; 0x28fe <_ZN15GB_SerialHelper13stopHttpFrameEv+0x14>
    Serial.print(length);
    Serial.print(',');
  }

  static boolean sendWifiFrameStop(boolean rebootOnFalse = true){
    return wifiExecuteCommand(0,-1,rebootOnFalse);
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	6f ef       	ldi	r22, 0xFF	; 255
    292a:	7f ef       	ldi	r23, 0xFF	; 255
    292c:	40 e0       	ldi	r20, 0x00	; 0
    292e:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
      while (s_wifiResponseAutoFlushConut < WIFI_RESPONSE_FRAME_SIZE){
        s_wifiResponseAutoFlushConut += Serial.write(0x00);
      }
    }
    return sendWifiFrameStop(false);
  } 
    2932:	df 91       	pop	r29
    2934:	cf 91       	pop	r28
    2936:	08 95       	ret

00002938 <_ZL8sendDataRK6String>:
    2938:	df 92       	push	r13
    293a:	ef 92       	push	r14
    293c:	ff 92       	push	r15
    293e:	0f 93       	push	r16
    2940:	1f 93       	push	r17
    2942:	cf 93       	push	r28
    2944:	df 93       	push	r29
    2946:	7c 01       	movw	r14, r24
    2948:	80 91 4b 01 	lds	r24, 0x014B
    294c:	88 23       	and	r24, r24
    294e:	09 f4       	brne	.+2      	; 0x2952 <_ZL8sendDataRK6String+0x1a>
    2950:	7f c0       	rjmp	.+254    	; 0x2a50 <_ZL8sendDataRK6String+0x118>
    return isSendOK;
  }  

  static boolean sendHttpResponseData(const byte &wifiPortDescriptor, const String &data){
    boolean isSendOK = true;
    if (data.length() == 0){
    2952:	f7 01       	movw	r30, r14
    2954:	84 81       	ldd	r24, Z+4	; 0x04
    2956:	95 81       	ldd	r25, Z+5	; 0x05
    2958:	89 2b       	or	r24, r25
    295a:	09 f4       	brne	.+2      	; 0x295e <_ZL8sendDataRK6String+0x26>
    295c:	7e c0       	rjmp	.+252    	; 0x2a5a <_ZL8sendDataRK6String+0x122>
      return isSendOK;
    }
    if (!s_wifiIsHeaderSended){
    295e:	80 91 be 01 	lds	r24, 0x01BE
    2962:	88 23       	and	r24, r24
    2964:	89 f4       	brne	.+34     	; 0x2988 <_ZL8sendDataRK6String+0x50>
      sendHttpOKHeader(wifiPortDescriptor); 
    2966:	80 91 04 01 	lds	r24, 0x0104
    296a:	0e 94 18 0a 	call	0x1430	; 0x1430 <_ZN15GB_SerialHelper16sendHttpOKHeaderEh>
      s_wifiIsHeaderSended = true;
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	80 93 be 01 	sts	0x01BE, r24
     return wifiExecuteCommand(); 
     */
  }

  static void startHttpFrame(const byte &wifiPortDescriptor){
    sendWifiFrameStart(wifiPortDescriptor, WIFI_RESPONSE_FRAME_SIZE);
    2974:	80 91 04 01 	lds	r24, 0x0104
    2978:	68 e7       	ldi	r22, 0x78	; 120
    297a:	75 e0       	ldi	r23, 0x05	; 5
    297c:	0e 94 18 08 	call	0x1030	; 0x1030 <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>
    s_wifiResponseAutoFlushConut = 0;
    2980:	10 92 c0 01 	sts	0x01C0, r1
    2984:	10 92 bf 01 	sts	0x01BF, r1
    if (!s_wifiIsHeaderSended){
      sendHttpOKHeader(wifiPortDescriptor); 
      s_wifiIsHeaderSended = true;
      startHttpFrame(wifiPortDescriptor);
    } 
    if (s_wifiResponseAutoFlushConut + data.length() < WIFI_RESPONSE_FRAME_SIZE){
    2988:	c0 91 bf 01 	lds	r28, 0x01BF
    298c:	d0 91 c0 01 	lds	r29, 0x01C0
    2990:	f7 01       	movw	r30, r14
    2992:	84 81       	ldd	r24, Z+4	; 0x04
    2994:	95 81       	ldd	r25, Z+5	; 0x05
    2996:	8c 0f       	add	r24, r28
    2998:	9d 1f       	adc	r25, r29
    299a:	88 57       	subi	r24, 0x78	; 120
    299c:	95 40       	sbci	r25, 0x05	; 5
    299e:	18 f0       	brcs	.+6      	; 0x29a6 <_ZL8sendDataRK6String+0x6e>
    29a0:	c0 e0       	ldi	r28, 0x00	; 0
    29a2:	d0 e0       	ldi	r29, 0x00	; 0
    29a4:	20 c0       	rjmp	.+64     	; 0x29e6 <_ZL8sendDataRK6String+0xae>
      s_wifiResponseAutoFlushConut += Serial.print(data);
    29a6:	8b ea       	ldi	r24, 0xAB	; 171
    29a8:	93 e0       	ldi	r25, 0x03	; 3
    29aa:	b7 01       	movw	r22, r14
    29ac:	0e 94 5a 35 	call	0x6ab4	; 0x6ab4 <_ZN5Print5printERK6String>
    29b0:	c8 0f       	add	r28, r24
    29b2:	d9 1f       	adc	r29, r25
    29b4:	d0 93 c0 01 	sts	0x01C0, r29
    29b8:	c0 93 bf 01 	sts	0x01BF, r28
    29bc:	4e c0       	rjmp	.+156    	; 0x2a5a <_ZL8sendDataRK6String+0x122>
    29be:	be 01       	movw	r22, r28
    } 
    else {
      int index = 0;
      while (s_wifiResponseAutoFlushConut < WIFI_RESPONSE_FRAME_SIZE){
        char c = data[index++];
    29c0:	21 96       	adiw	r28, 0x01	; 1
    29c2:	c7 01       	movw	r24, r14
    29c4:	0e 94 b6 35 	call	0x6b6c	; 0x6b6c <_ZNK6StringixEj>
    29c8:	68 2f       	mov	r22, r24
        s_wifiResponseAutoFlushConut += Serial.print(c);
    29ca:	00 91 bf 01 	lds	r16, 0x01BF
    29ce:	10 91 c0 01 	lds	r17, 0x01C0
    29d2:	8b ea       	ldi	r24, 0xAB	; 171
    29d4:	93 e0       	ldi	r25, 0x03	; 3
    29d6:	0e 94 19 34 	call	0x6832	; 0x6832 <_ZN5Print5printEc>
    29da:	08 0f       	add	r16, r24
    29dc:	19 1f       	adc	r17, r25
    29de:	10 93 c0 01 	sts	0x01C0, r17
    29e2:	00 93 bf 01 	sts	0x01BF, r16
    if (s_wifiResponseAutoFlushConut + data.length() < WIFI_RESPONSE_FRAME_SIZE){
      s_wifiResponseAutoFlushConut += Serial.print(data);
    } 
    else {
      int index = 0;
      while (s_wifiResponseAutoFlushConut < WIFI_RESPONSE_FRAME_SIZE){
    29e6:	80 91 bf 01 	lds	r24, 0x01BF
    29ea:	90 91 c0 01 	lds	r25, 0x01C0
    29ee:	88 57       	subi	r24, 0x78	; 120
    29f0:	95 40       	sbci	r25, 0x05	; 5
    29f2:	2c f3       	brlt	.-54     	; 0x29be <_ZL8sendDataRK6String+0x86>
        char c = data[index++];
        s_wifiResponseAutoFlushConut += Serial.print(c);
      }
      isSendOK = stopHttpFrame();
    29f4:	0e 94 75 14 	call	0x28ea	; 0x28ea <_ZN15GB_SerialHelper13stopHttpFrameEv>
    29f8:	d8 2e       	mov	r13, r24
     return wifiExecuteCommand(); 
     */
  }

  static void startHttpFrame(const byte &wifiPortDescriptor){
    sendWifiFrameStart(wifiPortDescriptor, WIFI_RESPONSE_FRAME_SIZE);
    29fa:	80 91 04 01 	lds	r24, 0x0104
    29fe:	68 e7       	ldi	r22, 0x78	; 120
    2a00:	75 e0       	ldi	r23, 0x05	; 5
    2a02:	0e 94 18 08 	call	0x1030	; 0x1030 <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>
    s_wifiResponseAutoFlushConut = 0;
    2a06:	10 92 c0 01 	sts	0x01C0, r1
    2a0a:	10 92 bf 01 	sts	0x01BF, r1
    2a0e:	13 c0       	rjmp	.+38     	; 0x2a36 <_ZL8sendDataRK6String+0xfe>
      }
      isSendOK = stopHttpFrame();
      startHttpFrame(wifiPortDescriptor); 

      while (index < data.length()){
        char c = data[index++];
    2a10:	21 96       	adiw	r28, 0x01	; 1
    2a12:	c7 01       	movw	r24, r14
    2a14:	0e 94 b6 35 	call	0x6b6c	; 0x6b6c <_ZNK6StringixEj>
    2a18:	68 2f       	mov	r22, r24
        s_wifiResponseAutoFlushConut += Serial.print(c);
    2a1a:	00 91 bf 01 	lds	r16, 0x01BF
    2a1e:	10 91 c0 01 	lds	r17, 0x01C0
    2a22:	8b ea       	ldi	r24, 0xAB	; 171
    2a24:	93 e0       	ldi	r25, 0x03	; 3
    2a26:	0e 94 19 34 	call	0x6832	; 0x6832 <_ZN5Print5printEc>
    2a2a:	08 0f       	add	r16, r24
    2a2c:	19 1f       	adc	r17, r25
    2a2e:	10 93 c0 01 	sts	0x01C0, r17
    2a32:	00 93 bf 01 	sts	0x01BF, r16
    2a36:	be 01       	movw	r22, r28
        s_wifiResponseAutoFlushConut += Serial.print(c);
      }
      isSendOK = stopHttpFrame();
      startHttpFrame(wifiPortDescriptor); 

      while (index < data.length()){
    2a38:	f7 01       	movw	r30, r14
    2a3a:	84 81       	ldd	r24, Z+4	; 0x04
    2a3c:	95 81       	ldd	r25, Z+5	; 0x05
    2a3e:	c8 17       	cp	r28, r24
    2a40:	d9 07       	cpc	r29, r25
    2a42:	30 f3       	brcs	.-52     	; 0x2a10 <_ZL8sendDataRK6String+0xd8>
    2a44:	dd 20       	and	r13, r13
    2a46:	49 f4       	brne	.+18     	; 0x2a5a <_ZL8sendDataRK6String+0x122>
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	80 93 4c 01 	sts	0x014C, r24
    2a4e:	05 c0       	rjmp	.+10     	; 0x2a5a <_ZL8sendDataRK6String+0x122>
    2a50:	8b ea       	ldi	r24, 0xAB	; 171
    2a52:	93 e0       	ldi	r25, 0x03	; 3
    2a54:	b7 01       	movw	r22, r14
    2a56:	0e 94 5a 35 	call	0x6ab4	; 0x6ab4 <_ZN5Print5printERK6String>
    2a5a:	df 91       	pop	r29
    2a5c:	cf 91       	pop	r28
    2a5e:	1f 91       	pop	r17
    2a60:	0f 91       	pop	r16
    2a62:	ff 90       	pop	r15
    2a64:	ef 90       	pop	r14
    2a66:	df 90       	pop	r13
    2a68:	08 95       	ret

00002a6a <_ZL8sendDatac>:
    2a6a:	ff 92       	push	r15
    2a6c:	0f 93       	push	r16
    2a6e:	1f 93       	push	r17
    2a70:	df 93       	push	r29
    2a72:	cf 93       	push	r28
    2a74:	cd b7       	in	r28, 0x3d	; 61
    2a76:	de b7       	in	r29, 0x3e	; 62
    2a78:	27 97       	sbiw	r28, 0x07	; 7
    2a7a:	0f b6       	in	r0, 0x3f	; 63
    2a7c:	f8 94       	cli
    2a7e:	de bf       	out	0x3e, r29	; 62
    2a80:	0f be       	out	0x3f, r0	; 63
    2a82:	cd bf       	out	0x3d, r28	; 61
    2a84:	f8 2e       	mov	r15, r24
    2a86:	8e 01       	movw	r16, r28
    2a88:	0f 5f       	subi	r16, 0xFF	; 255
    2a8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a8c:	c8 01       	movw	r24, r16
    2a8e:	60 e0       	ldi	r22, 0x00	; 0
    2a90:	71 e0       	ldi	r23, 0x01	; 1
    2a92:	0e 94 fe 37 	call	0x6ffc	; 0x6ffc <_ZN6StringC1EPKc>
    2a96:	c8 01       	movw	r24, r16
    2a98:	6f 2d       	mov	r22, r15
    2a9a:	0e 94 9a 37 	call	0x6f34	; 0x6f34 <_ZN6String6concatEc>
    2a9e:	c8 01       	movw	r24, r16
    2aa0:	0e 94 9c 14 	call	0x2938	; 0x2938 <_ZL8sendDataRK6String>
    2aa4:	c8 01       	movw	r24, r16
    2aa6:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    2aaa:	27 96       	adiw	r28, 0x07	; 7
    2aac:	0f b6       	in	r0, 0x3f	; 63
    2aae:	f8 94       	cli
    2ab0:	de bf       	out	0x3e, r29	; 62
    2ab2:	0f be       	out	0x3f, r0	; 63
    2ab4:	cd bf       	out	0x3d, r28	; 61
    2ab6:	cf 91       	pop	r28
    2ab8:	df 91       	pop	r29
    2aba:	1f 91       	pop	r17
    2abc:	0f 91       	pop	r16
    2abe:	ff 90       	pop	r15
    2ac0:	08 95       	ret

00002ac2 <_ZL8sendDatai>:
    2ac2:	ef 92       	push	r14
    2ac4:	ff 92       	push	r15
    2ac6:	0f 93       	push	r16
    2ac8:	1f 93       	push	r17
    2aca:	df 93       	push	r29
    2acc:	cf 93       	push	r28
    2ace:	cd b7       	in	r28, 0x3d	; 61
    2ad0:	de b7       	in	r29, 0x3e	; 62
    2ad2:	27 97       	sbiw	r28, 0x07	; 7
    2ad4:	0f b6       	in	r0, 0x3f	; 63
    2ad6:	f8 94       	cli
    2ad8:	de bf       	out	0x3e, r29	; 62
    2ada:	0f be       	out	0x3f, r0	; 63
    2adc:	cd bf       	out	0x3d, r28	; 61
    2ade:	7c 01       	movw	r14, r24
    2ae0:	8e 01       	movw	r16, r28
    2ae2:	0f 5f       	subi	r16, 0xFF	; 255
    2ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae6:	c8 01       	movw	r24, r16
    2ae8:	60 e0       	ldi	r22, 0x00	; 0
    2aea:	71 e0       	ldi	r23, 0x01	; 1
    2aec:	0e 94 fe 37 	call	0x6ffc	; 0x6ffc <_ZN6StringC1EPKc>
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
    2af0:	c8 01       	movw	r24, r16
    2af2:	b7 01       	movw	r22, r14
    2af4:	0e 94 3d 37 	call	0x6e7a	; 0x6e7a <_ZN6String6concatEi>
    2af8:	c8 01       	movw	r24, r16
    2afa:	0e 94 9c 14 	call	0x2938	; 0x2938 <_ZL8sendDataRK6String>
    2afe:	c8 01       	movw	r24, r16
    2b00:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    2b04:	27 96       	adiw	r28, 0x07	; 7
    2b06:	0f b6       	in	r0, 0x3f	; 63
    2b08:	f8 94       	cli
    2b0a:	de bf       	out	0x3e, r29	; 62
    2b0c:	0f be       	out	0x3f, r0	; 63
    2b0e:	cd bf       	out	0x3d, r28	; 61
    2b10:	cf 91       	pop	r28
    2b12:	df 91       	pop	r29
    2b14:	1f 91       	pop	r17
    2b16:	0f 91       	pop	r16
    2b18:	ff 90       	pop	r15
    2b1a:	ef 90       	pop	r14
    2b1c:	08 95       	ret

00002b1e <_ZL8sendDatam>:
    2b1e:	0f 93       	push	r16
    2b20:	1f 93       	push	r17
    2b22:	df 93       	push	r29
    2b24:	cf 93       	push	r28
    2b26:	cd b7       	in	r28, 0x3d	; 61
    2b28:	de b7       	in	r29, 0x3e	; 62
    2b2a:	27 97       	sbiw	r28, 0x07	; 7
    2b2c:	0f b6       	in	r0, 0x3f	; 63
    2b2e:	f8 94       	cli
    2b30:	de bf       	out	0x3e, r29	; 62
    2b32:	0f be       	out	0x3f, r0	; 63
    2b34:	cd bf       	out	0x3d, r28	; 61
    2b36:	ab 01       	movw	r20, r22
    2b38:	bc 01       	movw	r22, r24
    2b3a:	8e 01       	movw	r16, r28
    2b3c:	0f 5f       	subi	r16, 0xFF	; 255
    2b3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b40:	c8 01       	movw	r24, r16
    2b42:	0e 94 1b 0b 	call	0x1636	; 0x1636 <_ZN13GB_PrintDirty13getTimeStringEm>
    2b46:	c8 01       	movw	r24, r16
    2b48:	0e 94 9c 14 	call	0x2938	; 0x2938 <_ZL8sendDataRK6String>
    2b4c:	c8 01       	movw	r24, r16
    2b4e:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    2b52:	27 96       	adiw	r28, 0x07	; 7
    2b54:	0f b6       	in	r0, 0x3f	; 63
    2b56:	f8 94       	cli
    2b58:	de bf       	out	0x3e, r29	; 62
    2b5a:	0f be       	out	0x3f, r0	; 63
    2b5c:	cd bf       	out	0x3d, r28	; 61
    2b5e:	cf 91       	pop	r28
    2b60:	df 91       	pop	r29
    2b62:	1f 91       	pop	r17
    2b64:	0f 91       	pop	r16
    2b66:	08 95       	ret

00002b68 <_ZL8sendDataf>:
    2b68:	af 92       	push	r10
    2b6a:	bf 92       	push	r11
    2b6c:	cf 92       	push	r12
    2b6e:	df 92       	push	r13
    2b70:	ef 92       	push	r14
    2b72:	ff 92       	push	r15
    2b74:	0f 93       	push	r16
    2b76:	1f 93       	push	r17
    2b78:	df 93       	push	r29
    2b7a:	cf 93       	push	r28
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
    2b80:	2e 97       	sbiw	r28, 0x0e	; 14
    2b82:	0f b6       	in	r0, 0x3f	; 63
    2b84:	f8 94       	cli
    2b86:	de bf       	out	0x3e, r29	; 62
    2b88:	0f be       	out	0x3f, r0	; 63
    2b8a:	cd bf       	out	0x3d, r28	; 61
    2b8c:	7b 01       	movw	r14, r22
    2b8e:	8c 01       	movw	r16, r24
      out = flashStringLoad(S_0x) + out;
    }
    return out;
  }
  static String floatToString(float number){
    String out;
    2b90:	5e 01       	movw	r10, r28
    2b92:	08 94       	sec
    2b94:	a1 1c       	adc	r10, r1
    2b96:	b1 1c       	adc	r11, r1
    2b98:	c5 01       	movw	r24, r10
    2b9a:	60 e0       	ldi	r22, 0x00	; 0
    2b9c:	71 e0       	ldi	r23, 0x01	; 1
    2b9e:	0e 94 fe 37 	call	0x6ffc	; 0x6ffc <_ZN6StringC1EPKc>

    int temp = number*100;
    2ba2:	c8 01       	movw	r24, r16
    2ba4:	b7 01       	movw	r22, r14
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	48 ec       	ldi	r20, 0xC8	; 200
    2bac:	52 e4       	ldi	r21, 0x42	; 66
    2bae:	0e 94 96 3b 	call	0x772c	; 0x772c <__mulsf3>
    2bb2:	0e 94 af 3a 	call	0x755e	; 0x755e <__fixsfsi>
    2bb6:	6b 01       	movw	r12, r22
    2bb8:	7c 01       	movw	r14, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	64 e6       	ldi	r22, 0x64	; 100
    2bbe:	70 e0       	ldi	r23, 0x00	; 0
    2bc0:	0e 94 2c 3c 	call	0x7858	; 0x7858 <__divmodhi4>
    2bc4:	c5 01       	movw	r24, r10
    2bc6:	0e 94 3d 37 	call	0x6e7a	; 0x6e7a <_ZN6String6concatEi>
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    2bca:	c5 01       	movw	r24, r10
    2bcc:	6e e2       	ldi	r22, 0x2E	; 46
    2bce:	0e 94 9a 37 	call	0x6f34	; 0x6f34 <_ZN6String6concatEc>
    int whole = temp/100;
    int fract = temp%100;

    out += whole;
    out += '.';
    out += getFixedDigitsString(temp,2);
    2bd2:	8e 01       	movw	r16, r28
    2bd4:	08 5f       	subi	r16, 0xF8	; 248
    2bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd8:	c8 01       	movw	r24, r16
    2bda:	b6 01       	movw	r22, r12
    2bdc:	42 e0       	ldi	r20, 0x02	; 2
    2bde:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    2be2:	c5 01       	movw	r24, r10
    2be4:	b8 01       	movw	r22, r16
    2be6:	0e 94 ad 37 	call	0x6f5a	; 0x6f5a <_ZN6String6concatERKS_>
    2bea:	c8 01       	movw	r24, r16
    2bec:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    2bf0:	c5 01       	movw	r24, r10
    2bf2:	0e 94 9c 14 	call	0x2938	; 0x2938 <_ZL8sendDataRK6String>
    2bf6:	c5 01       	movw	r24, r10
    2bf8:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    2bfc:	2e 96       	adiw	r28, 0x0e	; 14
    2bfe:	0f b6       	in	r0, 0x3f	; 63
    2c00:	f8 94       	cli
    2c02:	de bf       	out	0x3e, r29	; 62
    2c04:	0f be       	out	0x3f, r0	; 63
    2c06:	cd bf       	out	0x3d, r28	; 61
    2c08:	cf 91       	pop	r28
    2c0a:	df 91       	pop	r29
    2c0c:	1f 91       	pop	r17
    2c0e:	0f 91       	pop	r16
    2c10:	ff 90       	pop	r15
    2c12:	ef 90       	pop	r14
    2c14:	df 90       	pop	r13
    2c16:	cf 90       	pop	r12
    2c18:	bf 90       	pop	r11
    2c1a:	af 90       	pop	r10
    2c1c:	08 95       	ret

00002c1e <_ZL8sendDataj>:
    2c1e:	ef 92       	push	r14
    2c20:	ff 92       	push	r15
    2c22:	0f 93       	push	r16
    2c24:	1f 93       	push	r17
    2c26:	df 93       	push	r29
    2c28:	cf 93       	push	r28
    2c2a:	cd b7       	in	r28, 0x3d	; 61
    2c2c:	de b7       	in	r29, 0x3e	; 62
    2c2e:	27 97       	sbiw	r28, 0x07	; 7
    2c30:	0f b6       	in	r0, 0x3f	; 63
    2c32:	f8 94       	cli
    2c34:	de bf       	out	0x3e, r29	; 62
    2c36:	0f be       	out	0x3f, r0	; 63
    2c38:	cd bf       	out	0x3d, r28	; 61
    2c3a:	7c 01       	movw	r14, r24
    2c3c:	8e 01       	movw	r16, r28
    2c3e:	0f 5f       	subi	r16, 0xFF	; 255
    2c40:	1f 4f       	sbci	r17, 0xFF	; 255
    2c42:	c8 01       	movw	r24, r16
    2c44:	60 e0       	ldi	r22, 0x00	; 0
    2c46:	71 e0       	ldi	r23, 0x01	; 1
    2c48:	0e 94 fe 37 	call	0x6ffc	; 0x6ffc <_ZN6StringC1EPKc>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
	String & operator += (unsigned int num)		{concat(num); return (*this);}
    2c4c:	c8 01       	movw	r24, r16
    2c4e:	b7 01       	movw	r22, r14
    2c50:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <_ZN6String6concatEj>
    2c54:	c8 01       	movw	r24, r16
    2c56:	0e 94 9c 14 	call	0x2938	; 0x2938 <_ZL8sendDataRK6String>
    2c5a:	c8 01       	movw	r24, r16
    2c5c:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    2c60:	27 96       	adiw	r28, 0x07	; 7
    2c62:	0f b6       	in	r0, 0x3f	; 63
    2c64:	f8 94       	cli
    2c66:	de bf       	out	0x3e, r29	; 62
    2c68:	0f be       	out	0x3f, r0	; 63
    2c6a:	cd bf       	out	0x3d, r28	; 61
    2c6c:	cf 91       	pop	r28
    2c6e:	df 91       	pop	r29
    2c70:	1f 91       	pop	r17
    2c72:	0f 91       	pop	r16
    2c74:	ff 90       	pop	r15
    2c76:	ef 90       	pop	r14
    2c78:	08 95       	ret

00002c7a <_ZL8sendDataPK19__FlashStringHelper>:
    2c7a:	bf 92       	push	r11
    2c7c:	cf 92       	push	r12
    2c7e:	df 92       	push	r13
    2c80:	ef 92       	push	r14
    2c82:	ff 92       	push	r15
    2c84:	0f 93       	push	r16
    2c86:	1f 93       	push	r17
    2c88:	cf 93       	push	r28
    2c8a:	df 93       	push	r29
    2c8c:	6c 01       	movw	r12, r24
    2c8e:	80 91 4b 01 	lds	r24, 0x014B
    2c92:	88 23       	and	r24, r24
    2c94:	09 f4       	brne	.+2      	; 0x2c98 <_ZL8sendDataPK19__FlashStringHelper+0x1e>
    2c96:	7a c0       	rjmp	.+244    	; 0x2d8c <_ZL8sendDataPK19__FlashStringHelper+0x112>
  }


  static boolean sendHttpResponseData(const byte &wifiPortDescriptor, const __FlashStringHelper* data){
    boolean isSendOK = true;
    if (!s_wifiIsHeaderSended){
    2c98:	80 91 be 01 	lds	r24, 0x01BE
    2c9c:	88 23       	and	r24, r24
    2c9e:	89 f4       	brne	.+34     	; 0x2cc2 <_ZL8sendDataPK19__FlashStringHelper+0x48>
      sendHttpOKHeader(wifiPortDescriptor); 
    2ca0:	80 91 04 01 	lds	r24, 0x0104
    2ca4:	0e 94 18 0a 	call	0x1430	; 0x1430 <_ZN15GB_SerialHelper16sendHttpOKHeaderEh>
      s_wifiIsHeaderSended = true;
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
    2caa:	80 93 be 01 	sts	0x01BE, r24
     return wifiExecuteCommand(); 
     */
  }

  static void startHttpFrame(const byte &wifiPortDescriptor){
    sendWifiFrameStart(wifiPortDescriptor, WIFI_RESPONSE_FRAME_SIZE);
    2cae:	80 91 04 01 	lds	r24, 0x0104
    2cb2:	68 e7       	ldi	r22, 0x78	; 120
    2cb4:	75 e0       	ldi	r23, 0x05	; 5
    2cb6:	0e 94 18 08 	call	0x1030	; 0x1030 <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>
    s_wifiResponseAutoFlushConut = 0;
    2cba:	10 92 c0 01 	sts	0x01C0, r1
    2cbe:	10 92 bf 01 	sts	0x01BF, r1
    if (!s_wifiIsHeaderSended){
      sendHttpOKHeader(wifiPortDescriptor); 
      s_wifiIsHeaderSended = true;
      startHttpFrame(wifiPortDescriptor);
    } 
    if (s_wifiResponseAutoFlushConut + flashStringLength(data) < WIFI_RESPONSE_FRAME_SIZE){
    2cc2:	c0 91 bf 01 	lds	r28, 0x01BF
    2cc6:	d0 91 c0 01 	lds	r29, 0x01C0
    2cca:	c6 01       	movw	r24, r12
    2ccc:	0e 94 11 05 	call	0xa22	; 0xa22 <strlen_P>
    2cd0:	7c 01       	movw	r14, r24
    2cd2:	8c 0f       	add	r24, r28
    2cd4:	9d 1f       	adc	r25, r29
    2cd6:	88 57       	subi	r24, 0x78	; 120
    2cd8:	95 40       	sbci	r25, 0x05	; 5
    2cda:	1c f0       	brlt	.+6      	; 0x2ce2 <_ZL8sendDataPK19__FlashStringHelper+0x68>
    2cdc:	c0 e0       	ldi	r28, 0x00	; 0
    2cde:	d0 e0       	ldi	r29, 0x00	; 0
    2ce0:	20 c0       	rjmp	.+64     	; 0x2d22 <_ZL8sendDataPK19__FlashStringHelper+0xa8>
      s_wifiResponseAutoFlushConut += Serial.print(data);
    2ce2:	8b ea       	ldi	r24, 0xAB	; 171
    2ce4:	93 e0       	ldi	r25, 0x03	; 3
    2ce6:	b6 01       	movw	r22, r12
    2ce8:	0e 94 f6 33 	call	0x67ec	; 0x67ec <_ZN5Print5printEPK19__FlashStringHelper>
    2cec:	c8 0f       	add	r28, r24
    2cee:	d9 1f       	adc	r29, r25
    2cf0:	d0 93 c0 01 	sts	0x01C0, r29
    2cf4:	c0 93 bf 01 	sts	0x01BF, r28
    2cf8:	4e c0       	rjmp	.+156    	; 0x2d96 <_ZL8sendDataPK19__FlashStringHelper+0x11c>
}

static char flashStringCharAt(const __FlashStringHelper* fstr, int index){ 
  if (index >= flashStringLength(fstr)){
    2cfa:	ce 15       	cp	r28, r14
    2cfc:	df 05       	cpc	r29, r15
    2cfe:	14 f0       	brlt	.+4      	; 0x2d04 <_ZL8sendDataPK19__FlashStringHelper+0x8a>
    2d00:	6f ef       	ldi	r22, 0xFF	; 255
    2d02:	04 c0       	rjmp	.+8      	; 0x2d0c <_ZL8sendDataPK19__FlashStringHelper+0x92>
    return 0xFF; 
  }
  const char PROGMEM * pstr = (const char PROGMEM *) fstr;
  return pgm_read_byte(pstr+index);
    2d04:	f6 01       	movw	r30, r12
    2d06:	ec 0f       	add	r30, r28
    2d08:	fd 1f       	adc	r31, r29
    2d0a:	64 91       	lpm	r22, Z+
    } 
    else {
      int index = 0;
      while (s_wifiResponseAutoFlushConut < WIFI_RESPONSE_FRAME_SIZE){
        char c = flashStringCharAt(data, index++);
    2d0c:	21 96       	adiw	r28, 0x01	; 1
        s_wifiResponseAutoFlushConut += Serial.print(c);
    2d0e:	8b ea       	ldi	r24, 0xAB	; 171
    2d10:	93 e0       	ldi	r25, 0x03	; 3
    2d12:	0e 94 19 34 	call	0x6832	; 0x6832 <_ZN5Print5printEc>
    2d16:	08 0f       	add	r16, r24
    2d18:	19 1f       	adc	r17, r25
    2d1a:	10 93 c0 01 	sts	0x01C0, r17
    2d1e:	00 93 bf 01 	sts	0x01BF, r16
    if (s_wifiResponseAutoFlushConut + flashStringLength(data) < WIFI_RESPONSE_FRAME_SIZE){
      s_wifiResponseAutoFlushConut += Serial.print(data);
    } 
    else {
      int index = 0;
      while (s_wifiResponseAutoFlushConut < WIFI_RESPONSE_FRAME_SIZE){
    2d22:	00 91 bf 01 	lds	r16, 0x01BF
    2d26:	10 91 c0 01 	lds	r17, 0x01C0
    2d2a:	85 e0       	ldi	r24, 0x05	; 5
    2d2c:	08 37       	cpi	r16, 0x78	; 120
    2d2e:	18 07       	cpc	r17, r24
    2d30:	24 f3       	brlt	.-56     	; 0x2cfa <_ZL8sendDataPK19__FlashStringHelper+0x80>
        char c = flashStringCharAt(data, index++);
        s_wifiResponseAutoFlushConut += Serial.print(c);
      }
      isSendOK = stopHttpFrame();
    2d32:	0e 94 75 14 	call	0x28ea	; 0x28ea <_ZN15GB_SerialHelper13stopHttpFrameEv>
    2d36:	b8 2e       	mov	r11, r24
     return wifiExecuteCommand(); 
     */
  }

  static void startHttpFrame(const byte &wifiPortDescriptor){
    sendWifiFrameStart(wifiPortDescriptor, WIFI_RESPONSE_FRAME_SIZE);
    2d38:	80 91 04 01 	lds	r24, 0x0104
    2d3c:	68 e7       	ldi	r22, 0x78	; 120
    2d3e:	75 e0       	ldi	r23, 0x05	; 5
    2d40:	0e 94 18 08 	call	0x1030	; 0x1030 <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>
    s_wifiResponseAutoFlushConut = 0;
    2d44:	10 92 c0 01 	sts	0x01C0, r1
    2d48:	10 92 bf 01 	sts	0x01BF, r1
    2d4c:	cc 0e       	add	r12, r28
    2d4e:	dd 1e       	adc	r13, r29
    2d50:	14 c0       	rjmp	.+40     	; 0x2d7a <_ZL8sendDataPK19__FlashStringHelper+0x100>
        s_wifiResponseAutoFlushConut += Serial.print(c);
      }
      isSendOK = stopHttpFrame();
      startHttpFrame(wifiPortDescriptor);   
      while (index < flashStringLength(data)){
        char c = flashStringCharAt(data, index++);
    2d52:	21 96       	adiw	r28, 0x01	; 1
    2d54:	f6 01       	movw	r30, r12
    2d56:	64 91       	lpm	r22, Z+
        s_wifiResponseAutoFlushConut += Serial.print(c);
    2d58:	00 91 bf 01 	lds	r16, 0x01BF
    2d5c:	10 91 c0 01 	lds	r17, 0x01C0
    2d60:	8b ea       	ldi	r24, 0xAB	; 171
    2d62:	93 e0       	ldi	r25, 0x03	; 3
    2d64:	0e 94 19 34 	call	0x6832	; 0x6832 <_ZN5Print5printEc>
    2d68:	08 0f       	add	r16, r24
    2d6a:	19 1f       	adc	r17, r25
    2d6c:	10 93 c0 01 	sts	0x01C0, r17
    2d70:	00 93 bf 01 	sts	0x01BF, r16
    2d74:	08 94       	sec
    2d76:	c1 1c       	adc	r12, r1
    2d78:	d1 1c       	adc	r13, r1
        char c = flashStringCharAt(data, index++);
        s_wifiResponseAutoFlushConut += Serial.print(c);
      }
      isSendOK = stopHttpFrame();
      startHttpFrame(wifiPortDescriptor);   
      while (index < flashStringLength(data)){
    2d7a:	ce 15       	cp	r28, r14
    2d7c:	df 05       	cpc	r29, r15
    2d7e:	4c f3       	brlt	.-46     	; 0x2d52 <_ZL8sendDataPK19__FlashStringHelper+0xd8>
    2d80:	bb 20       	and	r11, r11
    2d82:	49 f4       	brne	.+18     	; 0x2d96 <_ZL8sendDataPK19__FlashStringHelper+0x11c>
    2d84:	81 e0       	ldi	r24, 0x01	; 1
    2d86:	80 93 4c 01 	sts	0x014C, r24
    2d8a:	05 c0       	rjmp	.+10     	; 0x2d96 <_ZL8sendDataPK19__FlashStringHelper+0x11c>
    2d8c:	8b ea       	ldi	r24, 0xAB	; 171
    2d8e:	93 e0       	ldi	r25, 0x03	; 3
    2d90:	b6 01       	movw	r22, r12
    2d92:	0e 94 f6 33 	call	0x67ec	; 0x67ec <_ZN5Print5printEPK19__FlashStringHelper>
    2d96:	df 91       	pop	r29
    2d98:	cf 91       	pop	r28
    2d9a:	1f 91       	pop	r17
    2d9c:	0f 91       	pop	r16
    2d9e:	ff 90       	pop	r15
    2da0:	ef 90       	pop	r14
    2da2:	df 90       	pop	r13
    2da4:	cf 90       	pop	r12
    2da6:	bf 90       	pop	r11
    2da8:	08 95       	ret

00002daa <_ZL11sendHTTPtagPKc8HTTP_TAG>:
    2daa:	0f 93       	push	r16
    2dac:	1f 93       	push	r17
    2dae:	cf 93       	push	r28
    2db0:	df 93       	push	r29
    2db2:	8c 01       	movw	r16, r24
    2db4:	eb 01       	movw	r28, r22
    2db6:	8c e3       	ldi	r24, 0x3C	; 60
    2db8:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZL8sendDatac>
    2dbc:	c1 30       	cpi	r28, 0x01	; 1
    2dbe:	d1 05       	cpc	r29, r1
    2dc0:	19 f4       	brne	.+6      	; 0x2dc8 <_ZL11sendHTTPtagPKc8HTTP_TAG+0x1e>
    2dc2:	8f e2       	ldi	r24, 0x2F	; 47
    2dc4:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZL8sendDatac>
    2dc8:	c8 01       	movw	r24, r16
    2dca:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    2dce:	22 97       	sbiw	r28, 0x02	; 2
    2dd0:	19 f4       	brne	.+6      	; 0x2dd8 <_ZL11sendHTTPtagPKc8HTTP_TAG+0x2e>
    2dd2:	8f e2       	ldi	r24, 0x2F	; 47
    2dd4:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZL8sendDatac>
    2dd8:	8e e3       	ldi	r24, 0x3E	; 62
    2dda:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZL8sendDatac>
    2dde:	df 91       	pop	r29
    2de0:	cf 91       	pop	r28
    2de2:	1f 91       	pop	r17
    2de4:	0f 91       	pop	r16
    2de6:	08 95       	ret

00002de8 <_Z20printSendStorageDumpv>:
    2de8:	bf 92       	push	r11
    2dea:	cf 92       	push	r12
    2dec:	df 92       	push	r13
    2dee:	ef 92       	push	r14
    2df0:	ff 92       	push	r15
    2df2:	0f 93       	push	r16
    2df4:	1f 93       	push	r17
    2df6:	df 93       	push	r29
    2df8:	cf 93       	push	r28
    2dfa:	cd b7       	in	r28, 0x3d	; 61
    2dfc:	de b7       	in	r29, 0x3e	; 62
    2dfe:	65 97       	sbiw	r28, 0x15	; 21
    2e00:	0f b6       	in	r0, 0x3f	; 63
    2e02:	f8 94       	cli
    2e04:	de bf       	out	0x3e, r29	; 62
    2e06:	0f be       	out	0x3f, r0	; 63
    2e08:	cd bf       	out	0x3d, r28	; 61
    2e0a:	88 e6       	ldi	r24, 0x68	; 104
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	60 e0       	ldi	r22, 0x00	; 0
    2e10:	70 e0       	ldi	r23, 0x00	; 0
    2e12:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2e16:	8e e6       	ldi	r24, 0x6E	; 110
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	60 e0       	ldi	r22, 0x00	; 0
    2e1c:	70 e0       	ldi	r23, 0x00	; 0
    2e1e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2e22:	81 e7       	ldi	r24, 0x71	; 113
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	60 e0       	ldi	r22, 0x00	; 0
    2e28:	70 e0       	ldi	r23, 0x00	; 0
    2e2a:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2e2e:	81 e7       	ldi	r24, 0x71	; 113
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	61 e0       	ldi	r22, 0x01	; 1
    2e34:	70 e0       	ldi	r23, 0x00	; 0
    2e36:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2e3a:	10 e0       	ldi	r17, 0x00	; 0
    2e3c:	7e 01       	movw	r14, r28
    2e3e:	08 94       	sec
    2e40:	e1 1c       	adc	r14, r1
    2e42:	f1 1c       	adc	r15, r1
    2e44:	81 e7       	ldi	r24, 0x71	; 113
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	60 e0       	ldi	r22, 0x00	; 0
    2e4a:	70 e0       	ldi	r23, 0x00	; 0
    2e4c:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2e50:	84 e7       	ldi	r24, 0x74	; 116
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	60 e0       	ldi	r22, 0x00	; 0
    2e56:	70 e0       	ldi	r23, 0x00	; 0
    2e58:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2e5c:	c7 01       	movw	r24, r14
    2e5e:	61 2f       	mov	r22, r17
    2e60:	40 e0       	ldi	r20, 0x00	; 0
    2e62:	0e 94 f2 06 	call	0xde4	; 0xde4 <_ZN13GB_PrintDirty6getHEXEhh>
    2e66:	c7 01       	movw	r24, r14
    2e68:	0e 94 9c 14 	call	0x2938	; 0x2938 <_ZL8sendDataRK6String>
    2e6c:	c7 01       	movw	r24, r14
    2e6e:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    2e72:	84 e7       	ldi	r24, 0x74	; 116
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	61 e0       	ldi	r22, 0x01	; 1
    2e78:	70 e0       	ldi	r23, 0x00	; 0
    2e7a:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2e7e:	81 e7       	ldi	r24, 0x71	; 113
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	61 e0       	ldi	r22, 0x01	; 1
    2e84:	70 e0       	ldi	r23, 0x00	; 0
    2e86:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2e8a:	1f 5f       	subi	r17, 0xFF	; 255
    2e8c:	10 31       	cpi	r17, 0x10	; 16
    2e8e:	d1 f6       	brne	.-76     	; 0x2e44 <_Z20printSendStorageDumpv+0x5c>
    2e90:	8e e6       	ldi	r24, 0x6E	; 110
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	61 e0       	ldi	r22, 0x01	; 1
    2e96:	70 e0       	ldi	r23, 0x00	; 0
    2e98:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2e9c:	00 e0       	ldi	r16, 0x00	; 0
    2e9e:	10 e0       	ldi	r17, 0x00	; 0
    2ea0:	a8 e0       	ldi	r26, 0x08	; 8
    2ea2:	ca 2e       	mov	r12, r26
    2ea4:	d1 2c       	mov	r13, r1
    2ea6:	cc 0e       	add	r12, r28
    2ea8:	dd 1e       	adc	r13, r29
    2eaa:	ff e0       	ldi	r31, 0x0F	; 15
    2eac:	ef 2e       	mov	r14, r31
    2eae:	f1 2c       	mov	r15, r1
    2eb0:	ec 0e       	add	r14, r28
    2eb2:	fd 1e       	adc	r15, r29
    2eb4:	c8 01       	movw	r24, r16
    2eb6:	0e 94 86 06 	call	0xd0c	; 0xd0c <_ZN10GB_Storage4readEj>
    2eba:	b8 2e       	mov	r11, r24
    2ebc:	c8 01       	movw	r24, r16
    2ebe:	8f 70       	andi	r24, 0x0F	; 15
    2ec0:	90 70       	andi	r25, 0x00	; 0
    2ec2:	89 2b       	or	r24, r25
    2ec4:	b9 f5       	brne	.+110    	; 0x2f34 <_Z20printSendStorageDumpv+0x14c>
    2ec6:	01 15       	cp	r16, r1
    2ec8:	11 05       	cpc	r17, r1
    2eca:	31 f0       	breq	.+12     	; 0x2ed8 <_Z20printSendStorageDumpv+0xf0>
    2ecc:	8e e6       	ldi	r24, 0x6E	; 110
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	61 e0       	ldi	r22, 0x01	; 1
    2ed2:	70 e0       	ldi	r23, 0x00	; 0
    2ed4:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2ed8:	8e e6       	ldi	r24, 0x6E	; 110
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	60 e0       	ldi	r22, 0x00	; 0
    2ede:	70 e0       	ldi	r23, 0x00	; 0
    2ee0:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2ee4:	81 e7       	ldi	r24, 0x71	; 113
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	60 e0       	ldi	r22, 0x00	; 0
    2eea:	70 e0       	ldi	r23, 0x00	; 0
    2eec:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2ef0:	84 e7       	ldi	r24, 0x74	; 116
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	60 e0       	ldi	r22, 0x00	; 0
    2ef6:	70 e0       	ldi	r23, 0x00	; 0
    2ef8:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2efc:	b8 01       	movw	r22, r16
    2efe:	e4 e0       	ldi	r30, 0x04	; 4
    2f00:	76 95       	lsr	r23
    2f02:	67 95       	ror	r22
    2f04:	ea 95       	dec	r30
    2f06:	e1 f7       	brne	.-8      	; 0x2f00 <_Z20printSendStorageDumpv+0x118>
    2f08:	c6 01       	movw	r24, r12
    2f0a:	40 e0       	ldi	r20, 0x00	; 0
    2f0c:	0e 94 f2 06 	call	0xde4	; 0xde4 <_ZN13GB_PrintDirty6getHEXEhh>
    2f10:	c6 01       	movw	r24, r12
    2f12:	0e 94 9c 14 	call	0x2938	; 0x2938 <_ZL8sendDataRK6String>
    2f16:	c6 01       	movw	r24, r12
    2f18:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    2f1c:	84 e7       	ldi	r24, 0x74	; 116
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	61 e0       	ldi	r22, 0x01	; 1
    2f22:	70 e0       	ldi	r23, 0x00	; 0
    2f24:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2f28:	81 e7       	ldi	r24, 0x71	; 113
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	61 e0       	ldi	r22, 0x01	; 1
    2f2e:	70 e0       	ldi	r23, 0x00	; 0
    2f30:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2f34:	81 e7       	ldi	r24, 0x71	; 113
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	60 e0       	ldi	r22, 0x00	; 0
    2f3a:	70 e0       	ldi	r23, 0x00	; 0
    2f3c:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2f40:	c7 01       	movw	r24, r14
    2f42:	6b 2d       	mov	r22, r11
    2f44:	40 e0       	ldi	r20, 0x00	; 0
    2f46:	0e 94 f2 06 	call	0xde4	; 0xde4 <_ZN13GB_PrintDirty6getHEXEhh>
    2f4a:	c7 01       	movw	r24, r14
    2f4c:	0e 94 9c 14 	call	0x2938	; 0x2938 <_ZL8sendDataRK6String>
    2f50:	c7 01       	movw	r24, r14
    2f52:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    2f56:	81 e7       	ldi	r24, 0x71	; 113
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	61 e0       	ldi	r22, 0x01	; 1
    2f5c:	70 e0       	ldi	r23, 0x00	; 0
    2f5e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2f62:	80 91 4c 01 	lds	r24, 0x014C
    2f66:	88 23       	and	r24, r24
    2f68:	99 f4       	brne	.+38     	; 0x2f90 <_Z20printSendStorageDumpv+0x1a8>
    2f6a:	0f 5f       	subi	r16, 0xFF	; 255
    2f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f6e:	80 e1       	ldi	r24, 0x10	; 16
    2f70:	00 30       	cpi	r16, 0x00	; 0
    2f72:	18 07       	cpc	r17, r24
    2f74:	09 f0       	breq	.+2      	; 0x2f78 <_Z20printSendStorageDumpv+0x190>
    2f76:	9e cf       	rjmp	.-196    	; 0x2eb4 <_Z20printSendStorageDumpv+0xcc>
    2f78:	8e e6       	ldi	r24, 0x6E	; 110
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	61 e0       	ldi	r22, 0x01	; 1
    2f7e:	70 e0       	ldi	r23, 0x00	; 0
    2f80:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2f84:	88 e6       	ldi	r24, 0x68	; 104
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	61 e0       	ldi	r22, 0x01	; 1
    2f8a:	70 e0       	ldi	r23, 0x00	; 0
    2f8c:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    2f90:	65 96       	adiw	r28, 0x15	; 21
    2f92:	0f b6       	in	r0, 0x3f	; 63
    2f94:	f8 94       	cli
    2f96:	de bf       	out	0x3e, r29	; 62
    2f98:	0f be       	out	0x3f, r0	; 63
    2f9a:	cd bf       	out	0x3d, r28	; 61
    2f9c:	cf 91       	pop	r28
    2f9e:	df 91       	pop	r29
    2fa0:	1f 91       	pop	r17
    2fa2:	0f 91       	pop	r16
    2fa4:	ff 90       	pop	r15
    2fa6:	ef 90       	pop	r14
    2fa8:	df 90       	pop	r13
    2faa:	cf 90       	pop	r12
    2fac:	bf 90       	pop	r11
    2fae:	08 95       	ret

00002fb0 <_ZL17sendHTTPtagButtonPKcPK19__FlashStringHelper>:
    2fb0:	ef 92       	push	r14
    2fb2:	ff 92       	push	r15
    2fb4:	0f 93       	push	r16
    2fb6:	1f 93       	push	r17
    2fb8:	8c 01       	movw	r16, r24
    2fba:	7b 01       	movw	r14, r22
    2fbc:	81 e3       	ldi	r24, 0x31	; 49
    2fbe:	93 e0       	ldi	r25, 0x03	; 3
    2fc0:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    2fc4:	c8 01       	movw	r24, r16
    2fc6:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    2fca:	86 e2       	ldi	r24, 0x26	; 38
    2fcc:	93 e0       	ldi	r25, 0x03	; 3
    2fce:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    2fd2:	c7 01       	movw	r24, r14
    2fd4:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    2fd8:	82 e2       	ldi	r24, 0x22	; 34
    2fda:	93 e0       	ldi	r25, 0x03	; 3
    2fdc:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    2fe0:	1f 91       	pop	r17
    2fe2:	0f 91       	pop	r16
    2fe4:	ff 90       	pop	r15
    2fe6:	ef 90       	pop	r14
    2fe8:	08 95       	ret

00002fea <_ZL30printSendConfigurationControlsv>:
    2fea:	88 ea       	ldi	r24, 0xA8	; 168
    2fec:	95 e0       	ldi	r25, 0x05	; 5
    2fee:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    2ff2:	83 e8       	ldi	r24, 0x83	; 131
    2ff4:	95 e0       	ldi	r25, 0x05	; 5
    2ff6:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    2ffa:	8b e7       	ldi	r24, 0x7B	; 123
    2ffc:	95 e0       	ldi	r25, 0x05	; 5
    2ffe:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    3002:	08 95       	ret

00003004 <_Z14sendFreeMemoryv>:
    3004:	82 e0       	ldi	r24, 0x02	; 2
    3006:	91 e0       	ldi	r25, 0x01	; 1
    3008:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    300c:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <freeMemory>
    3010:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <_ZL8sendDatai>
    3014:	80 e1       	ldi	r24, 0x10	; 16
    3016:	91 e0       	ldi	r25, 0x01	; 1
    3018:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    301c:	87 ec       	ldi	r24, 0xC7	; 199
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    3024:	08 95       	ret

00003026 <_ZL19printSendPinsStatusv>:
    3026:	af 92       	push	r10
    3028:	bf 92       	push	r11
    302a:	cf 92       	push	r12
    302c:	df 92       	push	r13
    302e:	ef 92       	push	r14
    3030:	ff 92       	push	r15
    3032:	0f 93       	push	r16
    3034:	1f 93       	push	r17
    3036:	df 93       	push	r29
    3038:	cf 93       	push	r28
    303a:	cd b7       	in	r28, 0x3d	; 61
    303c:	de b7       	in	r29, 0x3e	; 62
    303e:	27 97       	sbiw	r28, 0x07	; 7
    3040:	0f b6       	in	r0, 0x3f	; 63
    3042:	f8 94       	cli
    3044:	de bf       	out	0x3e, r29	; 62
    3046:	0f be       	out	0x3f, r0	; 63
    3048:	cd bf       	out	0x3d, r28	; 61
    304a:	8a e6       	ldi	r24, 0x6A	; 106
    304c:	95 e0       	ldi	r25, 0x05	; 5
    304e:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    3052:	87 ec       	ldi	r24, 0xC7	; 199
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    305a:	00 e0       	ldi	r16, 0x00	; 0
    305c:	10 e0       	ldi	r17, 0x00	; 0
    305e:	b2 ef       	ldi	r27, 0xF2	; 242
    3060:	cb 2e       	mov	r12, r27
    3062:	bf ef       	ldi	r27, 0xFF	; 255
    3064:	db 2e       	mov	r13, r27
    3066:	5e 01       	movw	r10, r28
    3068:	08 94       	sec
    306a:	a1 1c       	adc	r10, r1
    306c:	b1 1c       	adc	r11, r1
    306e:	80 e2       	ldi	r24, 0x20	; 32
    3070:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZL8sendDatac>
    3074:	0e 30       	cpi	r16, 0x0E	; 14
    3076:	11 05       	cpc	r17, r1
    3078:	3c f0       	brlt	.+14     	; 0x3088 <_ZL19printSendPinsStatusv+0x62>
    307a:	81 e4       	ldi	r24, 0x41	; 65
    307c:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZL8sendDatac>
    3080:	c6 01       	movw	r24, r12
    3082:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <_ZL8sendDatai>
    3086:	0b c0       	rjmp	.+22     	; 0x309e <_ZL19printSendPinsStatusv+0x78>
    3088:	c5 01       	movw	r24, r10
    308a:	b8 01       	movw	r22, r16
    308c:	42 e0       	ldi	r20, 0x02	; 2
    308e:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
    3092:	c5 01       	movw	r24, r10
    3094:	0e 94 9c 14 	call	0x2938	; 0x2938 <_ZL8sendDataRK6String>
    3098:	c5 01       	movw	r24, r10
    309a:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    309e:	87 e6       	ldi	r24, 0x67	; 103
    30a0:	95 e0       	ldi	r25, 0x05	; 5
    30a2:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    30a6:	08 30       	cpi	r16, 0x08	; 8
    30a8:	11 05       	cpc	r17, r1
    30aa:	f4 f4       	brge	.+60     	; 0x30e8 <_ZL19printSendPinsStatusv+0xc2>
    30ac:	8a b1       	in	r24, 0x0a	; 10
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	00 2e       	mov	r0, r16
    30b2:	02 c0       	rjmp	.+4      	; 0x30b8 <_ZL19printSendPinsStatusv+0x92>
    30b4:	95 95       	asr	r25
    30b6:	87 95       	ror	r24
    30b8:	0a 94       	dec	r0
    30ba:	e2 f7       	brpl	.-8      	; 0x30b4 <_ZL19printSendPinsStatusv+0x8e>
    30bc:	38 2f       	mov	r19, r24
    30be:	31 70       	andi	r19, 0x01	; 1
    30c0:	8b b1       	in	r24, 0x0b	; 11
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	00 2e       	mov	r0, r16
    30c6:	02 c0       	rjmp	.+4      	; 0x30cc <_ZL19printSendPinsStatusv+0xa6>
    30c8:	95 95       	asr	r25
    30ca:	87 95       	ror	r24
    30cc:	0a 94       	dec	r0
    30ce:	e2 f7       	brpl	.-8      	; 0x30c8 <_ZL19printSendPinsStatusv+0xa2>
    30d0:	ee 24       	eor	r14, r14
    30d2:	e3 94       	inc	r14
    30d4:	e8 22       	and	r14, r24
    30d6:	89 b1       	in	r24, 0x09	; 9
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	00 2e       	mov	r0, r16
    30dc:	02 c0       	rjmp	.+4      	; 0x30e2 <_ZL19printSendPinsStatusv+0xbc>
    30de:	95 95       	asr	r25
    30e0:	87 95       	ror	r24
    30e2:	0a 94       	dec	r0
    30e4:	e2 f7       	brpl	.-8      	; 0x30de <_ZL19printSendPinsStatusv+0xb8>
    30e6:	3a c0       	rjmp	.+116    	; 0x315c <_ZL19printSendPinsStatusv+0x136>
    30e8:	0e 30       	cpi	r16, 0x0E	; 14
    30ea:	11 05       	cpc	r17, r1
    30ec:	d4 f4       	brge	.+52     	; 0x3122 <_ZL19printSendPinsStatusv+0xfc>
    30ee:	84 b1       	in	r24, 0x04	; 4
    30f0:	98 01       	movw	r18, r16
    30f2:	28 50       	subi	r18, 0x08	; 8
    30f4:	30 40       	sbci	r19, 0x00	; 0
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	02 2e       	mov	r0, r18
    30fa:	02 c0       	rjmp	.+4      	; 0x3100 <_ZL19printSendPinsStatusv+0xda>
    30fc:	95 95       	asr	r25
    30fe:	87 95       	ror	r24
    3100:	0a 94       	dec	r0
    3102:	e2 f7       	brpl	.-8      	; 0x30fc <_ZL19printSendPinsStatusv+0xd6>
    3104:	38 2f       	mov	r19, r24
    3106:	31 70       	andi	r19, 0x01	; 1
    3108:	85 b1       	in	r24, 0x05	; 5
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	02 2e       	mov	r0, r18
    310e:	02 c0       	rjmp	.+4      	; 0x3114 <_ZL19printSendPinsStatusv+0xee>
    3110:	95 95       	asr	r25
    3112:	87 95       	ror	r24
    3114:	0a 94       	dec	r0
    3116:	e2 f7       	brpl	.-8      	; 0x3110 <_ZL19printSendPinsStatusv+0xea>
    3118:	ee 24       	eor	r14, r14
    311a:	e3 94       	inc	r14
    311c:	e8 22       	and	r14, r24
    311e:	83 b1       	in	r24, 0x03	; 3
    3120:	17 c0       	rjmp	.+46     	; 0x3150 <_ZL19printSendPinsStatusv+0x12a>
    3122:	87 b1       	in	r24, 0x07	; 7
    3124:	2c 2d       	mov	r18, r12
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	0c 2c       	mov	r0, r12
    312a:	02 c0       	rjmp	.+4      	; 0x3130 <_ZL19printSendPinsStatusv+0x10a>
    312c:	95 95       	asr	r25
    312e:	87 95       	ror	r24
    3130:	0a 94       	dec	r0
    3132:	e2 f7       	brpl	.-8      	; 0x312c <_ZL19printSendPinsStatusv+0x106>
    3134:	38 2f       	mov	r19, r24
    3136:	31 70       	andi	r19, 0x01	; 1
    3138:	88 b1       	in	r24, 0x08	; 8
    313a:	90 e0       	ldi	r25, 0x00	; 0
    313c:	0c 2c       	mov	r0, r12
    313e:	02 c0       	rjmp	.+4      	; 0x3144 <_ZL19printSendPinsStatusv+0x11e>
    3140:	95 95       	asr	r25
    3142:	87 95       	ror	r24
    3144:	0a 94       	dec	r0
    3146:	e2 f7       	brpl	.-8      	; 0x3140 <_ZL19printSendPinsStatusv+0x11a>
    3148:	ee 24       	eor	r14, r14
    314a:	e3 94       	inc	r14
    314c:	e8 22       	and	r14, r24
    314e:	86 b1       	in	r24, 0x06	; 6
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	02 c0       	rjmp	.+4      	; 0x3158 <_ZL19printSendPinsStatusv+0x132>
    3154:	95 95       	asr	r25
    3156:	87 95       	ror	r24
    3158:	2a 95       	dec	r18
    315a:	e2 f7       	brpl	.-8      	; 0x3154 <_ZL19printSendPinsStatusv+0x12e>
    315c:	ff 24       	eor	r15, r15
    315e:	f3 94       	inc	r15
    3160:	f8 22       	and	r15, r24
    3162:	31 30       	cpi	r19, 0x01	; 1
    3164:	59 f4       	brne	.+22     	; 0x317c <_ZL19printSendPinsStatusv+0x156>
    3166:	84 e6       	ldi	r24, 0x64	; 100
    3168:	95 e0       	ldi	r25, 0x05	; 5
    316a:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    316e:	8e 2d       	mov	r24, r14
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <_ZL8sendDatai>
    3176:	8a e5       	ldi	r24, 0x5A	; 90
    3178:	95 e0       	ldi	r25, 0x05	; 5
    317a:	0a c0       	rjmp	.+20     	; 0x3190 <_ZL19printSendPinsStatusv+0x16a>
    317c:	81 e5       	ldi	r24, 0x51	; 81
    317e:	95 e0       	ldi	r25, 0x05	; 5
    3180:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    3184:	8f 2d       	mov	r24, r15
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <_ZL8sendDatai>
    318c:	8d e4       	ldi	r24, 0x4D	; 77
    318e:	95 e0       	ldi	r25, 0x05	; 5
    3190:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    3194:	08 30       	cpi	r16, 0x08	; 8
    3196:	11 05       	cpc	r17, r1
    3198:	91 f1       	breq	.+100    	; 0x31fe <_ZL19printSendPinsStatusv+0x1d8>
    319a:	09 30       	cpi	r16, 0x09	; 9
    319c:	11 05       	cpc	r17, r1
    319e:	8c f4       	brge	.+34     	; 0x31c2 <_ZL19printSendPinsStatusv+0x19c>
    31a0:	03 30       	cpi	r16, 0x03	; 3
    31a2:	11 05       	cpc	r17, r1
    31a4:	19 f1       	breq	.+70     	; 0x31ec <_ZL19printSendPinsStatusv+0x1c6>
    31a6:	04 30       	cpi	r16, 0x04	; 4
    31a8:	11 05       	cpc	r17, r1
    31aa:	24 f4       	brge	.+8      	; 0x31b4 <_ZL19printSendPinsStatusv+0x18e>
    31ac:	02 30       	cpi	r16, 0x02	; 2
    31ae:	11 05       	cpc	r17, r1
    31b0:	b0 f5       	brcc	.+108    	; 0x321e <_ZL19printSendPinsStatusv+0x1f8>
    31b2:	19 c0       	rjmp	.+50     	; 0x31e6 <_ZL19printSendPinsStatusv+0x1c0>
    31b4:	04 30       	cpi	r16, 0x04	; 4
    31b6:	11 05       	cpc	r17, r1
    31b8:	e1 f0       	breq	.+56     	; 0x31f2 <_ZL19printSendPinsStatusv+0x1cc>
    31ba:	05 30       	cpi	r16, 0x05	; 5
    31bc:	11 05       	cpc	r17, r1
    31be:	79 f5       	brne	.+94     	; 0x321e <_ZL19printSendPinsStatusv+0x1f8>
    31c0:	1b c0       	rjmp	.+54     	; 0x31f8 <_ZL19printSendPinsStatusv+0x1d2>
    31c2:	0d 30       	cpi	r16, 0x0D	; 13
    31c4:	11 05       	cpc	r17, r1
    31c6:	21 f1       	breq	.+72     	; 0x3210 <_ZL19printSendPinsStatusv+0x1ea>
    31c8:	0e 30       	cpi	r16, 0x0E	; 14
    31ca:	11 05       	cpc	r17, r1
    31cc:	3c f4       	brge	.+14     	; 0x31dc <_ZL19printSendPinsStatusv+0x1b6>
    31ce:	0b 30       	cpi	r16, 0x0B	; 11
    31d0:	11 05       	cpc	r17, r1
    31d2:	c1 f0       	breq	.+48     	; 0x3204 <_ZL19printSendPinsStatusv+0x1de>
    31d4:	0c 30       	cpi	r16, 0x0C	; 12
    31d6:	11 05       	cpc	r17, r1
    31d8:	11 f5       	brne	.+68     	; 0x321e <_ZL19printSendPinsStatusv+0x1f8>
    31da:	17 c0       	rjmp	.+46     	; 0x320a <_ZL19printSendPinsStatusv+0x1e4>
    31dc:	c8 01       	movw	r24, r16
    31de:	42 97       	sbiw	r24, 0x12	; 18
    31e0:	02 97       	sbiw	r24, 0x02	; 2
    31e2:	e8 f4       	brcc	.+58     	; 0x321e <_ZL19printSendPinsStatusv+0x1f8>
    31e4:	18 c0       	rjmp	.+48     	; 0x3216 <_ZL19printSendPinsStatusv+0x1f0>
    31e6:	87 e0       	ldi	r24, 0x07	; 7
    31e8:	95 e0       	ldi	r25, 0x05	; 5
    31ea:	17 c0       	rjmp	.+46     	; 0x321a <_ZL19printSendPinsStatusv+0x1f4>
    31ec:	8d ee       	ldi	r24, 0xED	; 237
    31ee:	94 e0       	ldi	r25, 0x04	; 4
    31f0:	14 c0       	rjmp	.+40     	; 0x321a <_ZL19printSendPinsStatusv+0x1f4>
    31f2:	85 ed       	ldi	r24, 0xD5	; 213
    31f4:	94 e0       	ldi	r25, 0x04	; 4
    31f6:	11 c0       	rjmp	.+34     	; 0x321a <_ZL19printSendPinsStatusv+0x1f4>
    31f8:	8f ea       	ldi	r24, 0xAF	; 175
    31fa:	94 e0       	ldi	r25, 0x04	; 4
    31fc:	0e c0       	rjmp	.+28     	; 0x321a <_ZL19printSendPinsStatusv+0x1f4>
    31fe:	8c e9       	ldi	r24, 0x9C	; 156
    3200:	94 e0       	ldi	r25, 0x04	; 4
    3202:	0b c0       	rjmp	.+22     	; 0x321a <_ZL19printSendPinsStatusv+0x1f4>
    3204:	8c e7       	ldi	r24, 0x7C	; 124
    3206:	94 e0       	ldi	r25, 0x04	; 4
    3208:	08 c0       	rjmp	.+16     	; 0x321a <_ZL19printSendPinsStatusv+0x1f4>
    320a:	8f e6       	ldi	r24, 0x6F	; 111
    320c:	94 e0       	ldi	r25, 0x04	; 4
    320e:	05 c0       	rjmp	.+10     	; 0x321a <_ZL19printSendPinsStatusv+0x1f4>
    3210:	88 e6       	ldi	r24, 0x68	; 104
    3212:	94 e0       	ldi	r25, 0x04	; 4
    3214:	02 c0       	rjmp	.+4      	; 0x321a <_ZL19printSendPinsStatusv+0x1f4>
    3216:	8c e2       	ldi	r24, 0x2C	; 44
    3218:	94 e0       	ldi	r25, 0x04	; 4
    321a:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    321e:	87 ec       	ldi	r24, 0xC7	; 199
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    3226:	0f 5f       	subi	r16, 0xFF	; 255
    3228:	1f 4f       	sbci	r17, 0xFF	; 255
    322a:	08 94       	sec
    322c:	c1 1c       	adc	r12, r1
    322e:	d1 1c       	adc	r13, r1
    3230:	04 31       	cpi	r16, 0x14	; 20
    3232:	11 05       	cpc	r17, r1
    3234:	09 f0       	breq	.+2      	; 0x3238 <_ZL19printSendPinsStatusv+0x212>
    3236:	1b cf       	rjmp	.-458    	; 0x306e <_ZL19printSendPinsStatusv+0x48>
    3238:	27 96       	adiw	r28, 0x07	; 7
    323a:	0f b6       	in	r0, 0x3f	; 63
    323c:	f8 94       	cli
    323e:	de bf       	out	0x3e, r29	; 62
    3240:	0f be       	out	0x3f, r0	; 63
    3242:	cd bf       	out	0x3d, r28	; 61
    3244:	cf 91       	pop	r28
    3246:	df 91       	pop	r29
    3248:	1f 91       	pop	r17
    324a:	0f 91       	pop	r16
    324c:	ff 90       	pop	r15
    324e:	ef 90       	pop	r14
    3250:	df 90       	pop	r13
    3252:	cf 90       	pop	r12
    3254:	bf 90       	pop	r11
    3256:	af 90       	pop	r10
    3258:	08 95       	ret

0000325a <_ZL14sendTimeStatusv>:
    325a:	87 ee       	ldi	r24, 0xE7	; 231
    325c:	93 e0       	ldi	r25, 0x03	; 3
    325e:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    3262:	84 e7       	ldi	r24, 0x74	; 116
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	60 e0       	ldi	r22, 0x00	; 0
    3268:	70 e0       	ldi	r23, 0x00	; 0
    326a:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    326e:	80 91 03 01 	lds	r24, 0x0103
    3272:	88 23       	and	r24, r24
    3274:	19 f0       	breq	.+6      	; 0x327c <_ZL14sendTimeStatusv+0x22>
    3276:	83 ee       	ldi	r24, 0xE3	; 227
    3278:	93 e0       	ldi	r25, 0x03	; 3
    327a:	02 c0       	rjmp	.+4      	; 0x3280 <_ZL14sendTimeStatusv+0x26>
    327c:	8d ed       	ldi	r24, 0xDD	; 221
    327e:	93 e0       	ldi	r25, 0x03	; 3
    3280:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    3284:	84 e7       	ldi	r24, 0x74	; 116
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	61 e0       	ldi	r22, 0x01	; 1
    328a:	70 e0       	ldi	r23, 0x00	; 0
    328c:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    3290:	80 ed       	ldi	r24, 0xD0	; 208
    3292:	93 e0       	ldi	r25, 0x03	; 3
    3294:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    3298:	0e 94 89 20 	call	0x4112	; 0x4112 <_Z3nowv>
    329c:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <_ZL8sendDatam>
    32a0:	84 ec       	ldi	r24, 0xC4	; 196
    32a2:	93 e0       	ldi	r25, 0x03	; 3
    32a4:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <_ZL8sendDatai>
    32b0:	82 eb       	ldi	r24, 0xB2	; 178
    32b2:	93 e0       	ldi	r25, 0x03	; 3
    32b4:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    32b8:	89 e0       	ldi	r24, 0x09	; 9
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <_ZL8sendDatai>
    32c0:	8b ea       	ldi	r24, 0xAB	; 171
    32c2:	93 e0       	ldi	r25, 0x03	; 3
    32c4:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    32c8:	08 95       	ret

000032ca <_ZL21sendTemperatureStatusv>:
    32ca:	af 92       	push	r10
    32cc:	bf 92       	push	r11
    32ce:	cf 92       	push	r12
    32d0:	df 92       	push	r13
    32d2:	ef 92       	push	r14
    32d4:	ff 92       	push	r15
    32d6:	0f 93       	push	r16
    32d8:	1f 93       	push	r17
    32da:	cf 93       	push	r28
    32dc:	df 93       	push	r29
  /////////////////////////////////////////////////////////////////////
  //                        GROWBOX COMMANDS                         //
  /////////////////////////////////////////////////////////////////////

  static void getStatistics(float &_workingTemperature, float &_statisticsTemperature, int &_statisticsTemperatureCount){
    _workingTemperature = workingTemperature;
    32de:	00 91 f0 01 	lds	r16, 0x01F0
    32e2:	f0 90 f1 01 	lds	r15, 0x01F1
    32e6:	e0 90 f2 01 	lds	r14, 0x01F2
    32ea:	d0 90 f3 01 	lds	r13, 0x01F3

    if (statisticsTemperatureCount != 0){
    32ee:	c0 91 f8 01 	lds	r28, 0x01F8
    32f2:	d0 91 f9 01 	lds	r29, 0x01F9
    32f6:	20 97       	sbiw	r28, 0x00	; 0
    32f8:	29 f4       	brne	.+10     	; 0x3304 <_ZL21sendTemperatureStatusv+0x3a>
    32fa:	a0 2e       	mov	r10, r16
    32fc:	bf 2c       	mov	r11, r15
    32fe:	ce 2c       	mov	r12, r14
    3300:	1d 2d       	mov	r17, r13
    3302:	16 c0       	rjmp	.+44     	; 0x3330 <_ZL21sendTemperatureStatusv+0x66>
      _statisticsTemperature = statisticsTemperatureSumm/statisticsTemperatureCount;
    3304:	be 01       	movw	r22, r28
    3306:	88 27       	eor	r24, r24
    3308:	77 fd       	sbrc	r23, 7
    330a:	80 95       	com	r24
    330c:	98 2f       	mov	r25, r24
    330e:	0e 94 e2 3a 	call	0x75c4	; 0x75c4 <__floatsisf>
    3312:	9b 01       	movw	r18, r22
    3314:	ac 01       	movw	r20, r24
    3316:	60 91 f4 01 	lds	r22, 0x01F4
    331a:	70 91 f5 01 	lds	r23, 0x01F5
    331e:	80 91 f6 01 	lds	r24, 0x01F6
    3322:	90 91 f7 01 	lds	r25, 0x01F7
    3326:	0e 94 47 3a 	call	0x748e	; 0x748e <__divsf3>
    332a:	5b 01       	movw	r10, r22
    332c:	c8 2e       	mov	r12, r24
    332e:	19 2f       	mov	r17, r25
    3330:	8f e6       	ldi	r24, 0x6F	; 111
    3332:	92 e0       	ldi	r25, 0x02	; 2
    3334:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    3338:	81 e2       	ldi	r24, 0x21	; 33
    333a:	94 e0       	ldi	r25, 0x04	; 4
    333c:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    3340:	20 2f       	mov	r18, r16
    3342:	3f 2d       	mov	r19, r15
    3344:	4e 2d       	mov	r20, r14
    3346:	5d 2d       	mov	r21, r13
    3348:	b9 01       	movw	r22, r18
    334a:	ca 01       	movw	r24, r20
    334c:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <_ZL8sendDataf>
    3350:	89 e1       	ldi	r24, 0x19	; 25
    3352:	94 e0       	ldi	r25, 0x04	; 4
    3354:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    3358:	4c 2d       	mov	r20, r12
    335a:	51 2f       	mov	r21, r17
    335c:	b5 01       	movw	r22, r10
    335e:	ca 01       	movw	r24, r20
    3360:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <_ZL8sendDataf>
    3364:	80 e1       	ldi	r24, 0x10	; 16
    3366:	94 e0       	ldi	r25, 0x04	; 4
    3368:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    336c:	ce 01       	movw	r24, r28
    336e:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <_ZL8sendDatai>
    3372:	88 e0       	ldi	r24, 0x08	; 8
    3374:	94 e0       	ldi	r25, 0x04	; 4
    3376:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    337a:	60 e0       	ldi	r22, 0x00	; 0
    337c:	70 e0       	ldi	r23, 0x00	; 0
    337e:	80 ed       	ldi	r24, 0xD0	; 208
    3380:	91 e4       	ldi	r25, 0x41	; 65
    3382:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <_ZL8sendDataf>
    3386:	8f ee       	ldi	r24, 0xEF	; 239
    3388:	93 e0       	ldi	r25, 0x03	; 3
    338a:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    338e:	60 e0       	ldi	r22, 0x00	; 0
    3390:	70 e0       	ldi	r23, 0x00	; 0
    3392:	80 e4       	ldi	r24, 0x40	; 64
    3394:	90 e4       	ldi	r25, 0x40	; 64
    3396:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <_ZL8sendDataf>
    339a:	8f ef       	ldi	r24, 0xFF	; 255
    339c:	93 e0       	ldi	r25, 0x03	; 3
    339e:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    33a2:	60 e0       	ldi	r22, 0x00	; 0
    33a4:	70 e0       	ldi	r23, 0x00	; 0
    33a6:	80 eb       	ldi	r24, 0xB0	; 176
    33a8:	91 e4       	ldi	r25, 0x41	; 65
    33aa:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <_ZL8sendDataf>
    33ae:	8f ee       	ldi	r24, 0xEF	; 239
    33b0:	93 e0       	ldi	r25, 0x03	; 3
    33b2:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    33b6:	60 e0       	ldi	r22, 0x00	; 0
    33b8:	70 e0       	ldi	r23, 0x00	; 0
    33ba:	80 ec       	ldi	r24, 0xC0	; 192
    33bc:	90 e4       	ldi	r25, 0x40	; 64
    33be:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <_ZL8sendDataf>
    33c2:	83 ef       	ldi	r24, 0xF3	; 243
    33c4:	93 e0       	ldi	r25, 0x03	; 3
    33c6:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    33ca:	60 e0       	ldi	r22, 0x00	; 0
    33cc:	70 e0       	ldi	r23, 0x00	; 0
    33ce:	8c e0       	ldi	r24, 0x0C	; 12
    33d0:	92 e4       	ldi	r25, 0x42	; 66
    33d2:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <_ZL8sendDataf>
    33d6:	87 ec       	ldi	r24, 0xC7	; 199
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    33de:	df 91       	pop	r29
    33e0:	cf 91       	pop	r28
    33e2:	1f 91       	pop	r17
    33e4:	0f 91       	pop	r16
    33e6:	ff 90       	pop	r15
    33e8:	ef 90       	pop	r14
    33ea:	df 90       	pop	r13
    33ec:	cf 90       	pop	r12
    33ee:	bf 90       	pop	r11
    33f0:	af 90       	pop	r10
    33f2:	08 95       	ret

000033f4 <_ZL16printSendFullLoghhh>:
    33f4:	2f 92       	push	r2
    33f6:	3f 92       	push	r3
    33f8:	4f 92       	push	r4
    33fa:	5f 92       	push	r5
    33fc:	6f 92       	push	r6
    33fe:	7f 92       	push	r7
    3400:	8f 92       	push	r8
    3402:	9f 92       	push	r9
    3404:	af 92       	push	r10
    3406:	bf 92       	push	r11
    3408:	cf 92       	push	r12
    340a:	df 92       	push	r13
    340c:	ef 92       	push	r14
    340e:	ff 92       	push	r15
    3410:	0f 93       	push	r16
    3412:	1f 93       	push	r17
    3414:	df 93       	push	r29
    3416:	cf 93       	push	r28
    3418:	cd b7       	in	r28, 0x3d	; 61
    341a:	de b7       	in	r29, 0x3e	; 62
    341c:	af 97       	sbiw	r28, 0x2f	; 47
    341e:	0f b6       	in	r0, 0x3f	; 63
    3420:	f8 94       	cli
    3422:	de bf       	out	0x3e, r29	; 62
    3424:	0f be       	out	0x3f, r0	; 63
    3426:	cd bf       	out	0x3d, r28	; 61
    3428:	8b a7       	std	Y+43, r24	; 0x2b
    342a:	6c a7       	std	Y+44, r22	; 0x2c
    342c:	4d a7       	std	Y+45, r20	; 0x2d
    342e:	88 e6       	ldi	r24, 0x68	; 104
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	60 e0       	ldi	r22, 0x00	; 0
    3434:	70 e0       	ldi	r23, 0x00	; 0
    3436:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    343a:	21 e0       	ldi	r18, 0x01	; 1
    343c:	2a a7       	std	Y+42, r18	; 0x2a
    343e:	cc 24       	eor	r12, r12
    3440:	dd 24       	eor	r13, r13
    3442:	aa 24       	eor	r10, r10
    3444:	bb 24       	eor	r11, r11
    3446:	ce 01       	movw	r24, r28
    3448:	0b 96       	adiw	r24, 0x0b	; 11
    344a:	9f a7       	std	Y+47, r25	; 0x2f
    344c:	8e a7       	std	Y+46, r24	; 0x2e
    344e:	1e 01       	movw	r2, r28
    3450:	08 94       	sec
    3452:	21 1c       	adc	r2, r1
    3454:	31 1c       	adc	r3, r1
    3456:	95 e1       	ldi	r25, 0x15	; 21
    3458:	49 2e       	mov	r4, r25
    345a:	51 2c       	mov	r5, r1
    345c:	4c 0e       	add	r4, r28
    345e:	5d 1e       	adc	r5, r29
    3460:	8c e1       	ldi	r24, 0x1C	; 28
    3462:	68 2e       	mov	r6, r24
    3464:	71 2c       	mov	r7, r1
    3466:	6c 0e       	add	r6, r28
    3468:	7d 1e       	adc	r7, r29
    346a:	03 e2       	ldi	r16, 0x23	; 35
    346c:	80 2e       	mov	r8, r16
    346e:	91 2c       	mov	r9, r1
    3470:	8c 0e       	add	r8, r28
    3472:	9d 1e       	adc	r9, r29
    3474:	6b c0       	rjmp	.+214    	; 0x354c <_ZL16printSendFullLoghhh+0x158>
  static boolean isLogOverflow(){
    return bootRecord.boolPreferencies.isLogOverflow;
  }

  static word getLogRecordsCount(){
    if (bootRecord.boolPreferencies.isLogOverflow){
    3476:	44 23       	and	r20, r20
    3478:	19 f0       	breq	.+6      	; 0x3480 <_ZL16printSendFullLoghhh+0x8c>
    347a:	8c e2       	ldi	r24, 0x2C	; 44
    347c:	93 e0       	ldi	r25, 0x03	; 3
    347e:	0a c0       	rjmp	.+20     	; 0x3494 <_ZL16printSendFullLoghhh+0xa0>
      return LOG_CAPACITY; 
    } 
    else {
      return (bootRecord.nextLogRecordAddress - sizeof(BootRecord))/sizeof(LogRecord);
    3480:	80 91 cb 01 	lds	r24, 0x01CB
    3484:	90 91 cc 01 	lds	r25, 0x01CC
    3488:	80 97       	sbiw	r24, 0x20	; 32
    348a:	65 e0       	ldi	r22, 0x05	; 5
    348c:	70 e0       	ldi	r23, 0x00	; 0
    348e:	0e 94 18 3c 	call	0x7830	; 0x7830 <__udivmodhi4>
    3492:	cb 01       	movw	r24, r22
    }
  }
  static boolean getLogRecordByIndex(word index, LogRecord &logRecord){
    if (index >= getLogRecordsCount()){
    3494:	c8 16       	cp	r12, r24
    3496:	d9 06       	cpc	r13, r25
    3498:	40 f5       	brcc	.+80     	; 0x34ea <_ZL16printSendFullLoghhh+0xf6>
      return false;
    }

    word logRecordOffset = 0;
    if (bootRecord.boolPreferencies.isLogOverflow){
    349a:	44 23       	and	r20, r20
    349c:	19 f4       	brne	.+6      	; 0x34a4 <_ZL16printSendFullLoghhh+0xb0>
    349e:	80 e0       	ldi	r24, 0x00	; 0
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	05 c0       	rjmp	.+10     	; 0x34ae <_ZL16printSendFullLoghhh+0xba>
      logRecordOffset = bootRecord.nextLogRecordAddress - sizeof(BootRecord);
    34a4:	80 91 cb 01 	lds	r24, 0x01CB
    34a8:	90 91 cc 01 	lds	r25, 0x01CC
    34ac:	80 97       	sbiw	r24, 0x20	; 32
    }
    //Serial.print("logRecordOffset"); Serial.println(logRecordOffset);
    logRecordOffset += index * sizeof(LogRecord);
    34ae:	8a 0d       	add	r24, r10
    34b0:	9b 1d       	adc	r25, r11

    //Serial.print("logRecordOffset"); Serial.println(logRecordOffset);
    if (logRecordOffset >= LOG_RECORD_OVERFLOW_OFFSET){
    34b2:	ef e0       	ldi	r30, 0x0F	; 15
    34b4:	8c 3d       	cpi	r24, 0xDC	; 220
    34b6:	9e 07       	cpc	r25, r30
    34b8:	10 f0       	brcs	.+4      	; 0x34be <_ZL16printSendFullLoghhh+0xca>
      logRecordOffset -= LOG_RECORD_OVERFLOW_OFFSET;
    34ba:	8c 5d       	subi	r24, 0xDC	; 220
    34bc:	9f 40       	sbci	r25, 0x0F	; 15
    }
    //Serial.print("logRecordOffset"); Serial.println(logRecordOffset);
    word address = sizeof(BootRecord) + logRecordOffset; 
    34be:	10 e2       	ldi	r17, 0x20	; 32
    34c0:	e1 2e       	mov	r14, r17
    34c2:	f1 2c       	mov	r15, r1
    34c4:	e8 0e       	add	r14, r24
    34c6:	f9 1e       	adc	r15, r25
    34c8:	8e 01       	movw	r16, r28
    34ca:	0a 5f       	subi	r16, 0xFA	; 250
    34cc:	1f 4f       	sbci	r17, 0xFF	; 255
      byte value =  read(address + c);
    34ce:	c7 01       	movw	r24, r14
    34d0:	0e 94 86 06 	call	0xd0c	; 0xd0c <_ZN10GB_Storage4readEj>
      ((byte*)data)[c] = value;
    34d4:	f8 01       	movw	r30, r16
    34d6:	81 93       	st	Z+, r24
    34d8:	8f 01       	movw	r16, r30
    34da:	08 94       	sec
    34dc:	e1 1c       	adc	r14, r1
    34de:	f1 1c       	adc	r15, r1
      write(address + c, value);
    }
  }

  static void read(word address, void *data, const byte sizeofData) {
    for (word c = 0; c < sizeofData; c++){
    34e0:	8e a5       	ldd	r24, Y+46	; 0x2e
    34e2:	9f a5       	ldd	r25, Y+47	; 0x2f
    34e4:	e8 17       	cp	r30, r24
    34e6:	f9 07       	cpc	r31, r25
    34e8:	91 f7       	brne	.-28     	; 0x34ce <_ZL16printSendFullLoghhh+0xda>
  }  

  static LogRecord getLogRecordByIndex(int index){
    LogRecord logRecord;
    GB_StorageHelper::getLogRecordByIndex(index, logRecord);
    return logRecord;
    34ea:	de 01       	movw	r26, r28
    34ec:	50 96       	adiw	r26, 0x10	; 16
    34ee:	fe 01       	movw	r30, r28
    34f0:	36 96       	adiw	r30, 0x06	; 6
    34f2:	85 e0       	ldi	r24, 0x05	; 5
    34f4:	01 90       	ld	r0, Z+
    34f6:	0d 92       	st	X+, r0
    34f8:	81 50       	subi	r24, 0x01	; 1
    34fa:	e1 f7       	brne	.-8      	; 0x34f4 <_ZL16printSendFullLoghhh+0x100>
    34fc:	de 01       	movw	r26, r28
    34fe:	1b 96       	adiw	r26, 0x0b	; 11
    3500:	fe 01       	movw	r30, r28
    3502:	70 96       	adiw	r30, 0x10	; 16
    3504:	85 e0       	ldi	r24, 0x05	; 5
    3506:	01 90       	ld	r0, Z+
    3508:	0d 92       	st	X+, r0
    350a:	81 50       	subi	r24, 0x01	; 1
    350c:	e1 f7       	brne	.-8      	; 0x3506 <_ZL16printSendFullLoghhh+0x112>
    350e:	d1 01       	movw	r26, r2
    3510:	fe 01       	movw	r30, r28
    3512:	3b 96       	adiw	r30, 0x0b	; 11
    3514:	85 e0       	ldi	r24, 0x05	; 5
    3516:	01 90       	ld	r0, Z+
    3518:	0d 92       	st	X+, r0
    351a:	81 50       	subi	r24, 0x01	; 1
    351c:	e1 f7       	brne	.-8      	; 0x3516 <_ZL16printSendFullLoghhh+0x122>
    351e:	9b a5       	ldd	r25, Y+43	; 0x2b
    3520:	99 23       	and	r25, r25
    3522:	d1 f5       	brne	.+116    	; 0x3598 <_ZL16printSendFullLoghhh+0x1a4>
    3524:	8d 81       	ldd	r24, Y+5	; 0x05
    3526:	80 7c       	andi	r24, 0xC0	; 192
    3528:	b9 f5       	brne	.+110    	; 0x3598 <_ZL16printSendFullLoghhh+0x1a4>
    352a:	09 c0       	rjmp	.+18     	; 0x353e <_ZL16printSendFullLoghhh+0x14a>
    352c:	8d 81       	ldd	r24, Y+5	; 0x05
    352e:	80 7c       	andi	r24, 0xC0	; 192
    3530:	80 34       	cpi	r24, 0x40	; 64
    3532:	a9 f5       	brne	.+106    	; 0x359e <_ZL16printSendFullLoghhh+0x1aa>
    3534:	04 c0       	rjmp	.+8      	; 0x353e <_ZL16printSendFullLoghhh+0x14a>
    3536:	8d 81       	ldd	r24, Y+5	; 0x05
    3538:	80 7c       	andi	r24, 0xC0	; 192
    353a:	80 3c       	cpi	r24, 0xC0	; 192
    353c:	99 f5       	brne	.+102    	; 0x35a4 <_ZL16printSendFullLoghhh+0x1b0>
    353e:	08 94       	sec
    3540:	c1 1c       	adc	r12, r1
    3542:	d1 1c       	adc	r13, r1
    3544:	e5 e0       	ldi	r30, 0x05	; 5
    3546:	f0 e0       	ldi	r31, 0x00	; 0
    3548:	ae 0e       	add	r10, r30
    354a:	bf 1e       	adc	r11, r31
  static boolean isLogOverflow(){
    return bootRecord.boolPreferencies.isLogOverflow;
  }

  static word getLogRecordsCount(){
    if (bootRecord.boolPreferencies.isLogOverflow){
    354c:	80 91 cd 01 	lds	r24, 0x01CD
    3550:	48 2f       	mov	r20, r24
    3552:	41 70       	andi	r20, 0x01	; 1
    3554:	80 ff       	sbrs	r24, 0
    3556:	03 c0       	rjmp	.+6      	; 0x355e <_ZL16printSendFullLoghhh+0x16a>
    3558:	8c e2       	ldi	r24, 0x2C	; 44
    355a:	93 e0       	ldi	r25, 0x03	; 3
    355c:	0a c0       	rjmp	.+20     	; 0x3572 <_ZL16printSendFullLoghhh+0x17e>
      return LOG_CAPACITY; 
    } 
    else {
      return (bootRecord.nextLogRecordAddress - sizeof(BootRecord))/sizeof(LogRecord);
    355e:	80 91 cb 01 	lds	r24, 0x01CB
    3562:	90 91 cc 01 	lds	r25, 0x01CC
    3566:	80 97       	sbiw	r24, 0x20	; 32
    3568:	65 e0       	ldi	r22, 0x05	; 5
    356a:	70 e0       	ldi	r23, 0x00	; 0
    356c:	0e 94 18 3c 	call	0x7830	; 0x7830 <__udivmodhi4>
    3570:	cb 01       	movw	r24, r22
    3572:	c8 16       	cp	r12, r24
    3574:	d9 06       	cpc	r13, r25
    3576:	0c f4       	brge	.+2      	; 0x357a <_ZL16printSendFullLoghhh+0x186>
    3578:	7e cf       	rjmp	.-260    	; 0x3476 <_ZL16printSendFullLoghhh+0x82>
    357a:	88 e6       	ldi	r24, 0x68	; 104
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	61 e0       	ldi	r22, 0x01	; 1
    3580:	70 e0       	ldi	r23, 0x00	; 0
    3582:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    3586:	fa a5       	ldd	r31, Y+42	; 0x2a
    3588:	ff 23       	and	r31, r31
    358a:	09 f4       	brne	.+2      	; 0x358e <_ZL16printSendFullLoghhh+0x19a>
    358c:	78 c0       	rjmp	.+240    	; 0x367e <_ZL16printSendFullLoghhh+0x28a>
    358e:	88 ec       	ldi	r24, 0xC8	; 200
    3590:	95 e0       	ldi	r25, 0x05	; 5
    3592:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    3596:	73 c0       	rjmp	.+230    	; 0x367e <_ZL16printSendFullLoghhh+0x28a>
    3598:	2c a5       	ldd	r18, Y+44	; 0x2c
    359a:	22 23       	and	r18, r18
    359c:	39 f2       	breq	.-114    	; 0x352c <_ZL16printSendFullLoghhh+0x138>
    359e:	8d a5       	ldd	r24, Y+45	; 0x2d
    35a0:	88 23       	and	r24, r24
    35a2:	49 f2       	breq	.-110    	; 0x3536 <_ZL16printSendFullLoghhh+0x142>
    35a4:	8e e6       	ldi	r24, 0x6E	; 110
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	60 e0       	ldi	r22, 0x00	; 0
    35aa:	70 e0       	ldi	r23, 0x00	; 0
    35ac:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    35b0:	81 e7       	ldi	r24, 0x71	; 113
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	60 e0       	ldi	r22, 0x00	; 0
    35b6:	70 e0       	ldi	r23, 0x00	; 0
    35b8:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    35bc:	c6 01       	movw	r24, r12
    35be:	01 96       	adiw	r24, 0x01	; 1
    35c0:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <_ZL8sendDatai>
    35c4:	81 e7       	ldi	r24, 0x71	; 113
    35c6:	90 e0       	ldi	r25, 0x00	; 0
    35c8:	61 e0       	ldi	r22, 0x01	; 1
    35ca:	70 e0       	ldi	r23, 0x00	; 0
    35cc:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    35d0:	81 e7       	ldi	r24, 0x71	; 113
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	60 e0       	ldi	r22, 0x00	; 0
    35d6:	70 e0       	ldi	r23, 0x00	; 0
    35d8:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    35dc:	49 81       	ldd	r20, Y+1	; 0x01
    35de:	5a 81       	ldd	r21, Y+2	; 0x02
    35e0:	6b 81       	ldd	r22, Y+3	; 0x03
    35e2:	7c 81       	ldd	r23, Y+4	; 0x04
    35e4:	c2 01       	movw	r24, r4
    35e6:	0e 94 1b 0b 	call	0x1636	; 0x1636 <_ZN13GB_PrintDirty13getTimeStringEm>
    35ea:	c2 01       	movw	r24, r4
    35ec:	0e 94 9c 14 	call	0x2938	; 0x2938 <_ZL8sendDataRK6String>
    35f0:	c2 01       	movw	r24, r4
    35f2:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    35f6:	81 e7       	ldi	r24, 0x71	; 113
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	61 e0       	ldi	r22, 0x01	; 1
    35fc:	70 e0       	ldi	r23, 0x00	; 0
    35fe:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    3602:	81 e7       	ldi	r24, 0x71	; 113
    3604:	90 e0       	ldi	r25, 0x00	; 0
    3606:	60 e0       	ldi	r22, 0x00	; 0
    3608:	70 e0       	ldi	r23, 0x00	; 0
    360a:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    360e:	c3 01       	movw	r24, r6
    3610:	6d 81       	ldd	r22, Y+5	; 0x05
    3612:	41 e0       	ldi	r20, 0x01	; 1
    3614:	0e 94 f2 06 	call	0xde4	; 0xde4 <_ZN13GB_PrintDirty6getHEXEhh>
    3618:	c3 01       	movw	r24, r6
    361a:	0e 94 9c 14 	call	0x2938	; 0x2938 <_ZL8sendDataRK6String>
    361e:	c3 01       	movw	r24, r6
    3620:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    3624:	81 e7       	ldi	r24, 0x71	; 113
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	61 e0       	ldi	r22, 0x01	; 1
    362a:	70 e0       	ldi	r23, 0x00	; 0
    362c:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    3630:	81 e7       	ldi	r24, 0x71	; 113
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	60 e0       	ldi	r22, 0x00	; 0
    3636:	70 e0       	ldi	r23, 0x00	; 0
    3638:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    363c:	c1 01       	movw	r24, r2
    363e:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord>
    3642:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    3646:	c4 01       	movw	r24, r8
    3648:	b1 01       	movw	r22, r2
    364a:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <_ZN9GB_Logger18getLogRecordSuffixERK9LogRecord>
    364e:	c4 01       	movw	r24, r8
    3650:	0e 94 9c 14 	call	0x2938	; 0x2938 <_ZL8sendDataRK6String>
    3654:	c4 01       	movw	r24, r8
    3656:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    365a:	81 e7       	ldi	r24, 0x71	; 113
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	61 e0       	ldi	r22, 0x01	; 1
    3660:	70 e0       	ldi	r23, 0x00	; 0
    3662:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    3666:	8e e6       	ldi	r24, 0x6E	; 110
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	61 e0       	ldi	r22, 0x01	; 1
    366c:	70 e0       	ldi	r23, 0x00	; 0
    366e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    3672:	80 91 4c 01 	lds	r24, 0x014C
    3676:	88 23       	and	r24, r24
    3678:	11 f4       	brne	.+4      	; 0x367e <_ZL16printSendFullLoghhh+0x28a>
    367a:	1a a6       	std	Y+42, r1	; 0x2a
    367c:	60 cf       	rjmp	.-320    	; 0x353e <_ZL16printSendFullLoghhh+0x14a>
    367e:	af 96       	adiw	r28, 0x2f	; 47
    3680:	0f b6       	in	r0, 0x3f	; 63
    3682:	f8 94       	cli
    3684:	de bf       	out	0x3e, r29	; 62
    3686:	0f be       	out	0x3f, r0	; 63
    3688:	cd bf       	out	0x3d, r28	; 61
    368a:	cf 91       	pop	r28
    368c:	df 91       	pop	r29
    368e:	1f 91       	pop	r17
    3690:	0f 91       	pop	r16
    3692:	ff 90       	pop	r15
    3694:	ef 90       	pop	r14
    3696:	df 90       	pop	r13
    3698:	cf 90       	pop	r12
    369a:	bf 90       	pop	r11
    369c:	af 90       	pop	r10
    369e:	9f 90       	pop	r9
    36a0:	8f 90       	pop	r8
    36a2:	7f 90       	pop	r7
    36a4:	6f 90       	pop	r6
    36a6:	5f 90       	pop	r5
    36a8:	4f 90       	pop	r4
    36aa:	3f 90       	pop	r3
    36ac:	2f 90       	pop	r2
    36ae:	08 95       	ret

000036b0 <_ZL14sendBootStatusv>:
    36b0:	85 e9       	ldi	r24, 0x95	; 149
    36b2:	93 e0       	ldi	r25, 0x03	; 3
    36b4:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    36b8:	60 91 c7 01 	lds	r22, 0x01C7
    36bc:	70 91 c8 01 	lds	r23, 0x01C8
    36c0:	80 91 c9 01 	lds	r24, 0x01C9
    36c4:	90 91 ca 01 	lds	r25, 0x01CA
    36c8:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <_ZL8sendDatam>
    36cc:	83 e8       	ldi	r24, 0x83	; 131
    36ce:	93 e0       	ldi	r25, 0x03	; 3
    36d0:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    36d4:	60 91 c3 01 	lds	r22, 0x01C3
    36d8:	70 91 c4 01 	lds	r23, 0x01C4
    36dc:	80 91 c5 01 	lds	r24, 0x01C5
    36e0:	90 91 c6 01 	lds	r25, 0x01C6
    36e4:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <_ZL8sendDatam>
    36e8:	89 e7       	ldi	r24, 0x79	; 121
    36ea:	93 e0       	ldi	r25, 0x03	; 3
    36ec:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    36f0:	80 91 cd 01 	lds	r24, 0x01CD
    36f4:	86 95       	lsr	r24
    36f6:	83 70       	andi	r24, 0x03	; 3
    36f8:	19 f0       	breq	.+6      	; 0x3700 <_ZL14sendBootStatusv+0x50>
    36fa:	84 e4       	ldi	r24, 0x44	; 68
    36fc:	91 e0       	ldi	r25, 0x01	; 1
    36fe:	02 c0       	rjmp	.+4      	; 0x3704 <_ZL14sendBootStatusv+0x54>
    3700:	8d e4       	ldi	r24, 0x4D	; 77
    3702:	91 e0       	ldi	r25, 0x01	; 1
    3704:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    3708:	8e e6       	ldi	r24, 0x6E	; 110
    370a:	93 e0       	ldi	r25, 0x03	; 3
    370c:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
  static boolean isLogOverflow(){
    return bootRecord.boolPreferencies.isLogOverflow;
  }

  static word getLogRecordsCount(){
    if (bootRecord.boolPreferencies.isLogOverflow){
    3710:	80 91 cd 01 	lds	r24, 0x01CD
    3714:	80 ff       	sbrs	r24, 0
    3716:	03 c0       	rjmp	.+6      	; 0x371e <_ZL14sendBootStatusv+0x6e>
    3718:	8c e2       	ldi	r24, 0x2C	; 44
    371a:	93 e0       	ldi	r25, 0x03	; 3
    371c:	0a c0       	rjmp	.+20     	; 0x3732 <_ZL14sendBootStatusv+0x82>
      return LOG_CAPACITY; 
    } 
    else {
      return (bootRecord.nextLogRecordAddress - sizeof(BootRecord))/sizeof(LogRecord);
    371e:	80 91 cb 01 	lds	r24, 0x01CB
    3722:	90 91 cc 01 	lds	r25, 0x01CC
    3726:	80 97       	sbiw	r24, 0x20	; 32
    3728:	65 e0       	ldi	r22, 0x05	; 5
    372a:	70 e0       	ldi	r23, 0x00	; 0
    372c:	0e 94 18 3c 	call	0x7830	; 0x7830 <__udivmodhi4>
    3730:	cb 01       	movw	r24, r22
    3732:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <_ZL8sendDataj>
    3736:	8f e2       	ldi	r24, 0x2F	; 47
    3738:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZL8sendDatac>
    373c:	8c e2       	ldi	r24, 0x2C	; 44
    373e:	93 e0       	ldi	r25, 0x03	; 3
    3740:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <_ZL8sendDataj>
    3744:	80 91 cd 01 	lds	r24, 0x01CD
    3748:	80 ff       	sbrs	r24, 0
    374a:	04 c0       	rjmp	.+8      	; 0x3754 <_ZL14sendBootStatusv+0xa4>
    374c:	83 e6       	ldi	r24, 0x63	; 99
    374e:	93 e0       	ldi	r25, 0x03	; 3
    3750:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    3754:	87 ec       	ldi	r24, 0xC7	; 199
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    375c:	08 95       	ret

0000375e <_ZL14executeCommandR6String>:
    375e:	cf 93       	push	r28
    3760:	df 93       	push	r29
    3762:	ec 01       	movw	r28, r24
    3764:	80 91 4b 01 	lds	r24, 0x014B
    3768:	88 23       	and	r24, r24
    376a:	09 f4       	brne	.+2      	; 0x376e <_ZL14executeCommandR6String+0x10>
    376c:	42 c0       	rjmp	.+132    	; 0x37f2 <_ZL14executeCommandR6String+0x94>
    376e:	83 ec       	ldi	r24, 0xC3	; 195
    3770:	92 e0       	ldi	r25, 0x02	; 2
    3772:	60 e0       	ldi	r22, 0x00	; 0
    3774:	70 e0       	ldi	r23, 0x00	; 0
    3776:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    377a:	81 e1       	ldi	r24, 0x11	; 17
    377c:	93 e0       	ldi	r25, 0x03	; 3
    377e:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZL8sendDataPK19__FlashStringHelper>
    3782:	88 ec       	ldi	r24, 0xC8	; 200
    3784:	92 e0       	ldi	r25, 0x02	; 2
    3786:	6a e0       	ldi	r22, 0x0A	; 10
    3788:	73 e0       	ldi	r23, 0x03	; 3
    378a:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <_ZL17sendHTTPtagButtonPKcPK19__FlashStringHelper>
    378e:	8a ec       	ldi	r24, 0xCA	; 202
    3790:	92 e0       	ldi	r25, 0x02	; 2
    3792:	60 e0       	ldi	r22, 0x00	; 0
    3794:	73 e0       	ldi	r23, 0x03	; 3
    3796:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <_ZL17sendHTTPtagButtonPKcPK19__FlashStringHelper>
    379a:	8f ec       	ldi	r24, 0xCF	; 207
    379c:	92 e0       	ldi	r25, 0x02	; 2
    379e:	62 ef       	ldi	r22, 0xF2	; 242
    37a0:	72 e0       	ldi	r23, 0x02	; 2
    37a2:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <_ZL17sendHTTPtagButtonPKcPK19__FlashStringHelper>
    37a6:	85 ed       	ldi	r24, 0xD5	; 213
    37a8:	92 e0       	ldi	r25, 0x02	; 2
    37aa:	65 ee       	ldi	r22, 0xE5	; 229
    37ac:	72 e0       	ldi	r23, 0x02	; 2
    37ae:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <_ZL17sendHTTPtagButtonPKcPK19__FlashStringHelper>
    37b2:	8e ed       	ldi	r24, 0xDE	; 222
    37b4:	92 e0       	ldi	r25, 0x02	; 2
    37b6:	62 e0       	ldi	r22, 0x02	; 2
    37b8:	70 e0       	ldi	r23, 0x00	; 0
    37ba:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    37be:	81 ee       	ldi	r24, 0xE1	; 225
    37c0:	92 e0       	ldi	r25, 0x02	; 2
    37c2:	60 e0       	ldi	r22, 0x00	; 0
    37c4:	70 e0       	ldi	r23, 0x00	; 0
    37c6:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    37ca:	0e 94 02 18 	call	0x3004	; 0x3004 <_Z14sendFreeMemoryv>
    37ce:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZL14sendBootStatusv>
    37d2:	0e 94 2d 19 	call	0x325a	; 0x325a <_ZL14sendTimeStatusv>
    37d6:	0e 94 65 19 	call	0x32ca	; 0x32ca <_ZL21sendTemperatureStatusv>
    37da:	8e ed       	ldi	r24, 0xDE	; 222
    37dc:	92 e0       	ldi	r25, 0x02	; 2
    37de:	62 e0       	ldi	r22, 0x02	; 2
    37e0:	70 e0       	ldi	r23, 0x00	; 0
    37e2:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    37e6:	81 ee       	ldi	r24, 0xE1	; 225
    37e8:	92 e0       	ldi	r25, 0x02	; 2
    37ea:	61 e0       	ldi	r22, 0x01	; 1
    37ec:	70 e0       	ldi	r23, 0x00	; 0
    37ee:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    37f2:	81 ee       	ldi	r24, 0xE1	; 225
    37f4:	92 e0       	ldi	r25, 0x02	; 2
    37f6:	60 e0       	ldi	r22, 0x00	; 0
    37f8:	70 e0       	ldi	r23, 0x00	; 0
    37fa:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
  }
  return true;
}

static boolean flashStringEquals(const char PROGMEM* pstr, const String &str){ 
  return flashStringEquals((const __FlashStringHelper*) pstr, str);
    37fe:	88 ec       	ldi	r24, 0xC8	; 200
    3800:	92 e0       	ldi	r25, 0x02	; 2
    3802:	be 01       	movw	r22, r28
    3804:	0e 94 8b 07 	call	0xf16	; 0xf16 <_ZL17flashStringEqualsPK19__FlashStringHelperRK6String>
    3808:	88 23       	and	r24, r24
    380a:	19 f0       	breq	.+6      	; 0x3812 <_ZL14executeCommandR6String+0xb4>
    380c:	0e 94 13 18 	call	0x3026	; 0x3026 <_ZL19printSendPinsStatusv>
    3810:	20 c0       	rjmp	.+64     	; 0x3852 <_ZL14executeCommandR6String+0xf4>
    3812:	8f ec       	ldi	r24, 0xCF	; 207
    3814:	92 e0       	ldi	r25, 0x02	; 2
    3816:	be 01       	movw	r22, r28
    3818:	0e 94 8b 07 	call	0xf16	; 0xf16 <_ZL17flashStringEqualsPK19__FlashStringHelperRK6String>
    381c:	88 23       	and	r24, r24
    381e:	19 f0       	breq	.+6      	; 0x3826 <_ZL14executeCommandR6String+0xc8>
    3820:	0e 94 f5 17 	call	0x2fea	; 0x2fea <_ZL30printSendConfigurationControlsv>
    3824:	16 c0       	rjmp	.+44     	; 0x3852 <_ZL14executeCommandR6String+0xf4>
    3826:	8a ec       	ldi	r24, 0xCA	; 202
    3828:	92 e0       	ldi	r25, 0x02	; 2
    382a:	be 01       	movw	r22, r28
    382c:	0e 94 8b 07 	call	0xf16	; 0xf16 <_ZL17flashStringEqualsPK19__FlashStringHelperRK6String>
    3830:	88 23       	and	r24, r24
    3832:	31 f0       	breq	.+12     	; 0x3840 <_ZL14executeCommandR6String+0xe2>
    3834:	81 e0       	ldi	r24, 0x01	; 1
    3836:	61 e0       	ldi	r22, 0x01	; 1
    3838:	41 e0       	ldi	r20, 0x01	; 1
    383a:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <_ZL16printSendFullLoghhh>
    383e:	09 c0       	rjmp	.+18     	; 0x3852 <_ZL14executeCommandR6String+0xf4>
    3840:	85 ed       	ldi	r24, 0xD5	; 213
    3842:	92 e0       	ldi	r25, 0x02	; 2
    3844:	be 01       	movw	r22, r28
    3846:	0e 94 8b 07 	call	0xf16	; 0xf16 <_ZL17flashStringEqualsPK19__FlashStringHelperRK6String>
    384a:	88 23       	and	r24, r24
    384c:	11 f0       	breq	.+4      	; 0x3852 <_ZL14executeCommandR6String+0xf4>
    384e:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <_Z20printSendStorageDumpv>
    3852:	80 91 4c 01 	lds	r24, 0x014C
    3856:	88 23       	and	r24, r24
    3858:	61 f4       	brne	.+24     	; 0x3872 <_ZL14executeCommandR6String+0x114>
    385a:	81 ee       	ldi	r24, 0xE1	; 225
    385c:	92 e0       	ldi	r25, 0x02	; 2
    385e:	61 e0       	ldi	r22, 0x01	; 1
    3860:	70 e0       	ldi	r23, 0x00	; 0
    3862:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    3866:	83 ec       	ldi	r24, 0xC3	; 195
    3868:	92 e0       	ldi	r25, 0x02	; 2
    386a:	61 e0       	ldi	r22, 0x01	; 1
    386c:	70 e0       	ldi	r23, 0x00	; 0
    386e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZL11sendHTTPtagPKc8HTTP_TAG>
    3872:	df 91       	pop	r29
    3874:	cf 91       	pop	r28
    3876:	08 95       	ret

00003878 <_Z11serialEventv>:
    3878:	0f 93       	push	r16
    387a:	1f 93       	push	r17
    387c:	df 93       	push	r29
    387e:	cf 93       	push	r28
    3880:	cd b7       	in	r28, 0x3d	; 61
    3882:	de b7       	in	r29, 0x3e	; 62
    3884:	27 97       	sbiw	r28, 0x07	; 7
    3886:	0f b6       	in	r0, 0x3f	; 63
    3888:	f8 94       	cli
    388a:	de bf       	out	0x3e, r29	; 62
    388c:	0f be       	out	0x3f, r0	; 63
    388e:	cd bf       	out	0x3d, r28	; 61
    3890:	80 91 4a 01 	lds	r24, 0x014A
    3894:	88 23       	and	r24, r24
    3896:	09 f4       	brne	.+2      	; 0x389a <_Z11serialEventv+0x22>
    3898:	53 c0       	rjmp	.+166    	; 0x3940 <_Z11serialEventv+0xc8>
    389a:	10 92 4b 01 	sts	0x014B, r1
    389e:	10 92 4c 01 	sts	0x014C, r1
    38a2:	10 92 04 01 	sts	0x0104, r1
    38a6:	8e 01       	movw	r16, r28
    38a8:	0f 5f       	subi	r16, 0xFF	; 255
    38aa:	1f 4f       	sbci	r17, 0xFF	; 255
    38ac:	c8 01       	movw	r24, r16
    38ae:	60 e0       	ldi	r22, 0x00	; 0
    38b0:	71 e0       	ldi	r23, 0x01	; 1
    38b2:	0e 94 fe 37 	call	0x6ffc	; 0x6ffc <_ZN6StringC1EPKc>
    38b6:	c8 01       	movw	r24, r16
    38b8:	6b e4       	ldi	r22, 0x4B	; 75
    38ba:	71 e0       	ldi	r23, 0x01	; 1
    38bc:	44 e0       	ldi	r20, 0x04	; 4
    38be:	51 e0       	ldi	r21, 0x01	; 1
    38c0:	0e 94 68 10 	call	0x20d0	; 0x20d0 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_>
    38c4:	88 23       	and	r24, r24
    38c6:	c9 f1       	breq	.+114    	; 0x393a <_Z11serialEventv+0xc2>
    38c8:	80 91 4b 01 	lds	r24, 0x014B
    38cc:	88 23       	and	r24, r24
    38ce:	11 f0       	breq	.+4      	; 0x38d4 <_Z11serialEventv+0x5c>
    } 
    return false;
  } 

  static void startHTTPResponse(const byte &wifiPortDescriptor){  
    s_wifiIsHeaderSended = false;
    38d0:	10 92 be 01 	sts	0x01BE, r1
    38d4:	ce 01       	movw	r24, r28
    38d6:	01 96       	adiw	r24, 0x01	; 1
    38d8:	0e 94 af 1b 	call	0x375e	; 0x375e <_ZL14executeCommandR6String>
    38dc:	80 91 4b 01 	lds	r24, 0x014B
    38e0:	88 23       	and	r24, r24
    38e2:	81 f0       	breq	.+32     	; 0x3904 <_Z11serialEventv+0x8c>
  }

  static void finishHTTPResponse(const byte &wifiPortDescriptor){  
    if (s_wifiIsHeaderSended){
    38e4:	80 91 be 01 	lds	r24, 0x01BE
    38e8:	88 23       	and	r24, r24
    38ea:	19 f0       	breq	.+6      	; 0x38f2 <_Z11serialEventv+0x7a>
      stopHttpFrame();
    38ec:	0e 94 75 14 	call	0x28ea	; 0x28ea <_ZN15GB_SerialHelper13stopHttpFrameEv>
    38f0:	04 c0       	rjmp	.+8      	; 0x38fa <_Z11serialEventv+0x82>
    } 
    else {
      sendHttpNotFoundHeader(wifiPortDescriptor);
    38f2:	80 91 04 01 	lds	r24, 0x0104
    38f6:	0e 94 1d 0a 	call	0x143a	; 0x143a <_ZN15GB_SerialHelper22sendHttpNotFoundHeaderEh>
    }
    closeConnection(wifiPortDescriptor);
    38fa:	80 91 04 01 	lds	r24, 0x0104
    38fe:	0e 94 22 0a 	call	0x1444	; 0x1444 <_ZN15GB_SerialHelper15closeConnectionEh>
    3902:	02 c0       	rjmp	.+4      	; 0x3908 <_Z11serialEventv+0x90>
    3904:	0e 94 9c 08 	call	0x1138	; 0x1138 <_ZN15GB_SerialHelper13printDirtyEndEv>
    3908:	80 91 ad 01 	lds	r24, 0x01AD
    390c:	88 23       	and	r24, r24
    390e:	91 f0       	breq	.+36     	; 0x3934 <_Z11serialEventv+0xbc>
    3910:	80 91 4c 01 	lds	r24, 0x014C
    3914:	88 23       	and	r24, r24
    3916:	71 f0       	breq	.+28     	; 0x3934 <_Z11serialEventv+0xbc>
    3918:	8b ea       	ldi	r24, 0xAB	; 171
    391a:	93 e0       	ldi	r25, 0x03	; 3
    391c:	65 ef       	ldi	r22, 0xF5	; 245
    391e:	70 e0       	ldi	r23, 0x00	; 0
    3920:	0e 94 f6 33 	call	0x67ec	; 0x67ec <_ZN5Print5printEPK19__FlashStringHelper>
    3924:	8b ea       	ldi	r24, 0xAB	; 171
    3926:	93 e0       	ldi	r25, 0x03	; 3
    3928:	6b e7       	ldi	r22, 0x7B	; 123
    392a:	72 e0       	ldi	r23, 0x02	; 2
    392c:	0e 94 41 34 	call	0x6882	; 0x6882 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3930:	0e 94 9c 08 	call	0x1138	; 0x1138 <_ZN15GB_SerialHelper13printDirtyEndEv>
    3934:	ce 01       	movw	r24, r28
    3936:	01 96       	adiw	r24, 0x01	; 1
    3938:	01 c0       	rjmp	.+2      	; 0x393c <_Z11serialEventv+0xc4>
    393a:	c8 01       	movw	r24, r16
    393c:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    3940:	27 96       	adiw	r28, 0x07	; 7
    3942:	0f b6       	in	r0, 0x3f	; 63
    3944:	f8 94       	cli
    3946:	de bf       	out	0x3e, r29	; 62
    3948:	0f be       	out	0x3f, r0	; 63
    394a:	cd bf       	out	0x3d, r28	; 61
    394c:	cf 91       	pop	r28
    394e:	df 91       	pop	r29
    3950:	1f 91       	pop	r17
    3952:	0f 91       	pop	r16
    3954:	08 95       	ret

00003956 <_Z15initLoggerModelv>:
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    3956:	10 92 53 01 	sts	0x0153, r1
    this->sequenceSize = sequenceSize;
    395a:	42 e0       	ldi	r20, 0x02	; 2
    395c:	40 93 54 01 	sts	0x0154, r20
    3960:	8d e4       	ldi	r24, 0x4D	; 77
    3962:	98 e0       	ldi	r25, 0x08	; 8
    3964:	90 93 56 01 	sts	0x0156, r25
    3968:	80 93 55 01 	sts	0x0155, r24
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    396c:	31 e0       	ldi	r19, 0x01	; 1
    396e:	30 93 5a 01 	sts	0x015A, r19
    this->sequenceSize = sequenceSize;
    3972:	23 e0       	ldi	r18, 0x03	; 3
    3974:	20 93 5b 01 	sts	0x015B, r18
    3978:	85 e3       	ldi	r24, 0x35	; 53
    397a:	98 e0       	ldi	r25, 0x08	; 8
    397c:	90 93 5d 01 	sts	0x015D, r25
    3980:	80 93 5c 01 	sts	0x015C, r24
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    3984:	30 93 61 01 	sts	0x0161, r19
    this->sequenceSize = sequenceSize;
    3988:	40 93 62 01 	sts	0x0162, r20
    398c:	86 e1       	ldi	r24, 0x16	; 22
    398e:	98 e0       	ldi	r25, 0x08	; 8
    3990:	90 93 64 01 	sts	0x0164, r25
    3994:	80 93 63 01 	sts	0x0163, r24
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    3998:	40 93 68 01 	sts	0x0168, r20
    this->sequenceSize = sequenceSize;
    399c:	20 93 69 01 	sts	0x0169, r18
    39a0:	80 ef       	ldi	r24, 0xF0	; 240
    39a2:	97 e0       	ldi	r25, 0x07	; 7
    39a4:	90 93 6b 01 	sts	0x016B, r25
    39a8:	80 93 6a 01 	sts	0x016A, r24
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    39ac:	10 92 6f 01 	sts	0x016F, r1
    this->sequenceSize = sequenceSize;
    39b0:	20 93 70 01 	sts	0x0170, r18
    39b4:	86 ec       	ldi	r24, 0xC6	; 198
    39b6:	97 e0       	ldi	r25, 0x07	; 7
    39b8:	90 93 72 01 	sts	0x0172, r25
    39bc:	80 93 71 01 	sts	0x0171, r24
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    39c0:	57 e0       	ldi	r21, 0x07	; 7
    39c2:	50 93 76 01 	sts	0x0176, r21
    this->sequenceSize = sequenceSize;
    39c6:	20 93 77 01 	sts	0x0177, r18
    39ca:	80 ea       	ldi	r24, 0xA0	; 160
    39cc:	97 e0       	ldi	r25, 0x07	; 7
    39ce:	90 93 79 01 	sts	0x0179, r25
    39d2:	80 93 78 01 	sts	0x0178, r24
  nextEvent(lastAddedEvent), index(0xFF) {
    lastAddedEvent = this;
  }

  void init(byte index, const __FlashStringHelper* description) {
    this->index = index;
    39d6:	30 93 7d 01 	sts	0x017D, r19
    39da:	82 e9       	ldi	r24, 0x92	; 146
    39dc:	97 e0       	ldi	r25, 0x07	; 7
    39de:	90 93 7f 01 	sts	0x017F, r25
    39e2:	80 93 7e 01 	sts	0x017E, r24
    39e6:	40 93 82 01 	sts	0x0182, r20
    39ea:	88 e8       	ldi	r24, 0x88	; 136
    39ec:	97 e0       	ldi	r25, 0x07	; 7
    39ee:	90 93 84 01 	sts	0x0184, r25
    39f2:	80 93 83 01 	sts	0x0183, r24
    39f6:	20 93 87 01 	sts	0x0187, r18
    39fa:	8b e6       	ldi	r24, 0x6B	; 107
    39fc:	97 e0       	ldi	r25, 0x07	; 7
    39fe:	90 93 89 01 	sts	0x0189, r25
    3a02:	80 93 88 01 	sts	0x0188, r24
    3a06:	84 e0       	ldi	r24, 0x04	; 4
    3a08:	80 93 8c 01 	sts	0x018C, r24
    3a0c:	8c e4       	ldi	r24, 0x4C	; 76
    3a0e:	97 e0       	ldi	r25, 0x07	; 7
    3a10:	90 93 8e 01 	sts	0x018E, r25
    3a14:	80 93 8d 01 	sts	0x018D, r24
    3a18:	85 e0       	ldi	r24, 0x05	; 5
    3a1a:	80 93 91 01 	sts	0x0191, r24
    3a1e:	8b e3       	ldi	r24, 0x3B	; 59
    3a20:	97 e0       	ldi	r25, 0x07	; 7
    3a22:	90 93 93 01 	sts	0x0193, r25
    3a26:	80 93 92 01 	sts	0x0192, r24
    3a2a:	86 e0       	ldi	r24, 0x06	; 6
    3a2c:	80 93 96 01 	sts	0x0196, r24
    3a30:	8b e2       	ldi	r24, 0x2B	; 43
    3a32:	97 e0       	ldi	r25, 0x07	; 7
    3a34:	90 93 98 01 	sts	0x0198, r25
    3a38:	80 93 97 01 	sts	0x0197, r24
    3a3c:	50 93 9b 01 	sts	0x019B, r21
    3a40:	8c e1       	ldi	r24, 0x1C	; 28
    3a42:	97 e0       	ldi	r25, 0x07	; 7
    3a44:	90 93 9d 01 	sts	0x019D, r25
    3a48:	80 93 9c 01 	sts	0x019C, r24
    3a4c:	88 e0       	ldi	r24, 0x08	; 8
    3a4e:	80 93 a0 01 	sts	0x01A0, r24
    3a52:	84 e0       	ldi	r24, 0x04	; 4
    3a54:	97 e0       	ldi	r25, 0x07	; 7
    3a56:	90 93 a2 01 	sts	0x01A2, r25
    3a5a:	80 93 a1 01 	sts	0x01A1, r24
    3a5e:	89 e0       	ldi	r24, 0x09	; 9
    3a60:	80 93 a5 01 	sts	0x01A5, r24
    3a64:	8c ee       	ldi	r24, 0xEC	; 236
    3a66:	96 e0       	ldi	r25, 0x06	; 6
    3a68:	90 93 a7 01 	sts	0x01A7, r25
    3a6c:	80 93 a6 01 	sts	0x01A6, r24
    3a70:	8a e0       	ldi	r24, 0x0A	; 10
    3a72:	80 93 aa 01 	sts	0x01AA, r24
    3a76:	85 ed       	ldi	r24, 0xD5	; 213
    3a78:	96 e0       	ldi	r25, 0x06	; 6
    3a7a:	90 93 ac 01 	sts	0x01AC, r25
    3a7e:	80 93 ab 01 	sts	0x01AB, r24
    3a82:	08 95       	ret

00003a84 <_GLOBAL__I__ZN5Error13lastAddedItemE>:
  byte sequenceSize;
  const __FlashStringHelper* description; // FLASH
  boolean isStored; // should be stored in Log only once, but notification should repeated

    Error() : 
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    3a84:	80 91 4d 01 	lds	r24, 0x014D
    3a88:	90 91 4e 01 	lds	r25, 0x014E
    3a8c:	90 93 52 01 	sts	0x0152, r25
    3a90:	80 93 51 01 	sts	0x0151, r24
    3a94:	2f ef       	ldi	r18, 0xFF	; 255
    3a96:	20 93 53 01 	sts	0x0153, r18
    3a9a:	20 93 54 01 	sts	0x0154, r18
    3a9e:	10 92 57 01 	sts	0x0157, r1
    lastAddedItem = this;
    3aa2:	81 e5       	ldi	r24, 0x51	; 81
    3aa4:	91 e0       	ldi	r25, 0x01	; 1
    3aa6:	90 93 59 01 	sts	0x0159, r25
    3aaa:	80 93 58 01 	sts	0x0158, r24
    3aae:	20 93 5a 01 	sts	0x015A, r18
    3ab2:	20 93 5b 01 	sts	0x015B, r18
    3ab6:	10 92 5e 01 	sts	0x015E, r1
    3aba:	88 e5       	ldi	r24, 0x58	; 88
    3abc:	91 e0       	ldi	r25, 0x01	; 1
    3abe:	90 93 60 01 	sts	0x0160, r25
    3ac2:	80 93 5f 01 	sts	0x015F, r24
    3ac6:	20 93 61 01 	sts	0x0161, r18
    3aca:	20 93 62 01 	sts	0x0162, r18
    3ace:	10 92 65 01 	sts	0x0165, r1
    3ad2:	8f e5       	ldi	r24, 0x5F	; 95
    3ad4:	91 e0       	ldi	r25, 0x01	; 1
    3ad6:	90 93 67 01 	sts	0x0167, r25
    3ada:	80 93 66 01 	sts	0x0166, r24
    3ade:	20 93 68 01 	sts	0x0168, r18
    3ae2:	20 93 69 01 	sts	0x0169, r18
    3ae6:	10 92 6c 01 	sts	0x016C, r1
    3aea:	86 e6       	ldi	r24, 0x66	; 102
    3aec:	91 e0       	ldi	r25, 0x01	; 1
    3aee:	90 93 6e 01 	sts	0x016E, r25
    3af2:	80 93 6d 01 	sts	0x016D, r24
    3af6:	20 93 6f 01 	sts	0x016F, r18
    3afa:	20 93 70 01 	sts	0x0170, r18
    3afe:	10 92 73 01 	sts	0x0173, r1
    3b02:	8d e6       	ldi	r24, 0x6D	; 109
    3b04:	91 e0       	ldi	r25, 0x01	; 1
    3b06:	90 93 75 01 	sts	0x0175, r25
    3b0a:	80 93 74 01 	sts	0x0174, r24
    3b0e:	20 93 76 01 	sts	0x0176, r18
    3b12:	20 93 77 01 	sts	0x0177, r18
    3b16:	10 92 7a 01 	sts	0x017A, r1
    3b1a:	84 e7       	ldi	r24, 0x74	; 116
    3b1c:	91 e0       	ldi	r25, 0x01	; 1
    3b1e:	90 93 4e 01 	sts	0x014E, r25
    3b22:	80 93 4d 01 	sts	0x014D, r24
public:
  byte index;
  const __FlashStringHelper* description; // FLASH

  Event() : 
  nextEvent(lastAddedEvent), index(0xFF) {
    3b26:	80 91 4f 01 	lds	r24, 0x014F
    3b2a:	90 91 50 01 	lds	r25, 0x0150
    3b2e:	90 93 7c 01 	sts	0x017C, r25
    3b32:	80 93 7b 01 	sts	0x017B, r24
    3b36:	20 93 7d 01 	sts	0x017D, r18
    lastAddedEvent = this;
    3b3a:	8b e7       	ldi	r24, 0x7B	; 123
    3b3c:	91 e0       	ldi	r25, 0x01	; 1
    3b3e:	90 93 81 01 	sts	0x0181, r25
    3b42:	80 93 80 01 	sts	0x0180, r24
    3b46:	20 93 82 01 	sts	0x0182, r18
    3b4a:	80 e8       	ldi	r24, 0x80	; 128
    3b4c:	91 e0       	ldi	r25, 0x01	; 1
    3b4e:	90 93 86 01 	sts	0x0186, r25
    3b52:	80 93 85 01 	sts	0x0185, r24
    3b56:	20 93 87 01 	sts	0x0187, r18
    3b5a:	85 e8       	ldi	r24, 0x85	; 133
    3b5c:	91 e0       	ldi	r25, 0x01	; 1
    3b5e:	90 93 8b 01 	sts	0x018B, r25
    3b62:	80 93 8a 01 	sts	0x018A, r24
    3b66:	20 93 8c 01 	sts	0x018C, r18
    3b6a:	8a e8       	ldi	r24, 0x8A	; 138
    3b6c:	91 e0       	ldi	r25, 0x01	; 1
    3b6e:	90 93 90 01 	sts	0x0190, r25
    3b72:	80 93 8f 01 	sts	0x018F, r24
    3b76:	20 93 91 01 	sts	0x0191, r18
    3b7a:	8f e8       	ldi	r24, 0x8F	; 143
    3b7c:	91 e0       	ldi	r25, 0x01	; 1
    3b7e:	90 93 95 01 	sts	0x0195, r25
    3b82:	80 93 94 01 	sts	0x0194, r24
    3b86:	20 93 96 01 	sts	0x0196, r18
    3b8a:	84 e9       	ldi	r24, 0x94	; 148
    3b8c:	91 e0       	ldi	r25, 0x01	; 1
    3b8e:	90 93 9a 01 	sts	0x019A, r25
    3b92:	80 93 99 01 	sts	0x0199, r24
    3b96:	20 93 9b 01 	sts	0x019B, r18
    3b9a:	89 e9       	ldi	r24, 0x99	; 153
    3b9c:	91 e0       	ldi	r25, 0x01	; 1
    3b9e:	90 93 9f 01 	sts	0x019F, r25
    3ba2:	80 93 9e 01 	sts	0x019E, r24
    3ba6:	20 93 a0 01 	sts	0x01A0, r18
    3baa:	8e e9       	ldi	r24, 0x9E	; 158
    3bac:	91 e0       	ldi	r25, 0x01	; 1
    3bae:	90 93 a4 01 	sts	0x01A4, r25
    3bb2:	80 93 a3 01 	sts	0x01A3, r24
    3bb6:	20 93 a5 01 	sts	0x01A5, r18
    3bba:	83 ea       	ldi	r24, 0xA3	; 163
    3bbc:	91 e0       	ldi	r25, 0x01	; 1
    3bbe:	90 93 a9 01 	sts	0x01A9, r25
    3bc2:	80 93 a8 01 	sts	0x01A8, r24
    3bc6:	20 93 aa 01 	sts	0x01AA, r18
    3bca:	88 ea       	ldi	r24, 0xA8	; 168
    3bcc:	91 e0       	ldi	r25, 0x01	; 1
    3bce:	90 93 50 01 	sts	0x0150, r25
    3bd2:	80 93 4f 01 	sts	0x014F, r24
    3bd6:	08 95       	ret

00003bd8 <_Z41__static_initialization_and_destruction_0ii>:
    3bd8:	81 30       	cpi	r24, 0x01	; 1
    3bda:	91 05       	cpc	r25, r1
    3bdc:	81 f4       	brne	.+32     	; 0x3bfe <_Z41__static_initialization_and_destruction_0ii+0x26>
    3bde:	6f 5f       	subi	r22, 0xFF	; 255
    3be0:	7f 4f       	sbci	r23, 0xFF	; 255
    3be2:	d1 f4       	brne	.+52     	; 0x3c18 <_Z41__static_initialization_and_destruction_0ii+0x40>
    3be4:	80 eb       	ldi	r24, 0xB0	; 176
    3be6:	91 e0       	ldi	r25, 0x01	; 1
    3be8:	61 e0       	ldi	r22, 0x01	; 1
    3bea:	71 e0       	ldi	r23, 0x01	; 1
    3bec:	0e 94 fe 37 	call	0x6ffc	; 0x6ffc <_ZN6StringC1EPKc>
    3bf0:	87 eb       	ldi	r24, 0xB7	; 183
    3bf2:	91 e0       	ldi	r25, 0x01	; 1
    3bf4:	61 e0       	ldi	r22, 0x01	; 1
    3bf6:	71 e0       	ldi	r23, 0x01	; 1
    3bf8:	0e 94 fe 37 	call	0x6ffc	; 0x6ffc <_ZN6StringC1EPKc>
    3bfc:	08 95       	ret
    3bfe:	89 2b       	or	r24, r25
    3c00:	59 f4       	brne	.+22     	; 0x3c18 <_Z41__static_initialization_and_destruction_0ii+0x40>
    3c02:	6f 5f       	subi	r22, 0xFF	; 255
    3c04:	7f 4f       	sbci	r23, 0xFF	; 255
    3c06:	41 f4       	brne	.+16     	; 0x3c18 <_Z41__static_initialization_and_destruction_0ii+0x40>
    3c08:	87 eb       	ldi	r24, 0xB7	; 183
    3c0a:	91 e0       	ldi	r25, 0x01	; 1
    3c0c:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    3c10:	80 eb       	ldi	r24, 0xB0	; 176
    3c12:	91 e0       	ldi	r25, 0x01	; 1
    3c14:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <_ZN6StringD1Ev>
    3c18:	08 95       	ret

00003c1a <_GLOBAL__D__ZN15GB_SerialHelper16useSerialMonitorE>:
    3c1a:	80 e0       	ldi	r24, 0x00	; 0
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	6f ef       	ldi	r22, 0xFF	; 255
    3c20:	7f ef       	ldi	r23, 0xFF	; 255
    3c22:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <_Z41__static_initialization_and_destruction_0ii>
    3c26:	08 95       	ret

00003c28 <_GLOBAL__I__ZN15GB_SerialHelper16useSerialMonitorE>:
    3c28:	81 e0       	ldi	r24, 0x01	; 1
    3c2a:	90 e0       	ldi	r25, 0x00	; 0
    3c2c:	6f ef       	ldi	r22, 0xFF	; 255
    3c2e:	7f ef       	ldi	r23, 0xFF	; 255
    3c30:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <_Z41__static_initialization_and_destruction_0ii>
    3c34:	08 95       	ret

00003c36 <_GLOBAL__I__ZN14GB_Thermometer17dallasTemperatureE>:
    3c36:	81 ee       	ldi	r24, 0xE1	; 225
    3c38:	91 e0       	ldi	r25, 0x01	; 1
    3c3a:	6c e3       	ldi	r22, 0x3C	; 60
    3c3c:	71 e0       	ldi	r23, 0x01	; 1
    3c3e:	0e 94 00 2b 	call	0x5600	; 0x5600 <_ZN17DallasTemperatureC1EP7OneWire>
    3c42:	08 95       	ret

00003c44 <freeMemory>:

int freeMemory() {
    3c44:	df 93       	push	r29
    3c46:	cf 93       	push	r28
    3c48:	00 d0       	rcall	.+0      	; 0x3c4a <freeMemory+0x6>
    3c4a:	cd b7       	in	r28, 0x3d	; 61
    3c4c:	de b7       	in	r29, 0x3e	; 62
  int free_memory;

  if ((int)__brkval == 0) {
    3c4e:	20 91 ce 03 	lds	r18, 0x03CE
    3c52:	30 91 cf 03 	lds	r19, 0x03CF
    3c56:	ce 01       	movw	r24, r28
    3c58:	01 96       	adiw	r24, 0x01	; 1
    3c5a:	21 15       	cp	r18, r1
    3c5c:	31 05       	cpc	r19, r1
    3c5e:	29 f4       	brne	.+10     	; 0x3c6a <freeMemory+0x26>
    free_memory = ((int)&free_memory) - ((int)&__heap_start);
    3c60:	82 5d       	subi	r24, 0xD2	; 210
    3c62:	93 40       	sbci	r25, 0x03	; 3
    3c64:	9a 83       	std	Y+2, r25	; 0x02
    3c66:	89 83       	std	Y+1, r24	; 0x01
    3c68:	18 c0       	rjmp	.+48     	; 0x3c9a <freeMemory+0x56>
  } else {
    free_memory = ((int)&free_memory) - ((int)__brkval);
    3c6a:	ac 01       	movw	r20, r24
    3c6c:	42 1b       	sub	r20, r18
    3c6e:	53 0b       	sbc	r21, r19
/* Calculates the size of the free list */
int freeListSize() {
  struct __freelist* current;
  int total = 0;

  for (current = __flp; current; current = current->nx) {
    3c70:	e0 91 d0 03 	lds	r30, 0x03D0
    3c74:	f0 91 d1 03 	lds	r31, 0x03D1
    3c78:	20 e0       	ldi	r18, 0x00	; 0
    3c7a:	30 e0       	ldi	r19, 0x00	; 0
    3c7c:	08 c0       	rjmp	.+16     	; 0x3c8e <freeMemory+0x4a>
    total += 2; /* Add two bytes for the memory block's header  */
    3c7e:	80 81       	ld	r24, Z
    3c80:	91 81       	ldd	r25, Z+1	; 0x01
    3c82:	02 96       	adiw	r24, 0x02	; 2
    total += (int) current->sz;
    3c84:	28 0f       	add	r18, r24
    3c86:	39 1f       	adc	r19, r25
/* Calculates the size of the free list */
int freeListSize() {
  struct __freelist* current;
  int total = 0;

  for (current = __flp; current; current = current->nx) {
    3c88:	02 80       	ldd	r0, Z+2	; 0x02
    3c8a:	f3 81       	ldd	r31, Z+3	; 0x03
    3c8c:	e0 2d       	mov	r30, r0
    3c8e:	30 97       	sbiw	r30, 0x00	; 0
    3c90:	b1 f7       	brne	.-20     	; 0x3c7e <freeMemory+0x3a>

  if ((int)__brkval == 0) {
    free_memory = ((int)&free_memory) - ((int)&__heap_start);
  } else {
    free_memory = ((int)&free_memory) - ((int)__brkval);
    free_memory += freeListSize();
    3c92:	24 0f       	add	r18, r20
    3c94:	35 1f       	adc	r19, r21
    3c96:	3a 83       	std	Y+2, r19	; 0x02
    3c98:	29 83       	std	Y+1, r18	; 0x01
  }
  return free_memory;
    3c9a:	89 81       	ldd	r24, Y+1	; 0x01
    3c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c9e:	0f 90       	pop	r0
    3ca0:	0f 90       	pop	r0
    3ca2:	cf 91       	pop	r28
    3ca4:	df 91       	pop	r29
    3ca6:	08 95       	ret

00003ca8 <_Z9breakTimemR12tmElements_t>:
// leap year calulator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+Y)>0) && !((1970+Y)%4) && ( ((1970+Y)%100) || !((1970+Y)%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    3ca8:	8f 92       	push	r8
    3caa:	9f 92       	push	r9
    3cac:	af 92       	push	r10
    3cae:	bf 92       	push	r11
    3cb0:	cf 92       	push	r12
    3cb2:	df 92       	push	r13
    3cb4:	ef 92       	push	r14
    3cb6:	ff 92       	push	r15
    3cb8:	0f 93       	push	r16
    3cba:	1f 93       	push	r17
    3cbc:	cf 93       	push	r28
    3cbe:	df 93       	push	r29
    3cc0:	7b 01       	movw	r14, r22
    3cc2:	8c 01       	movw	r16, r24
    3cc4:	ea 01       	movw	r28, r20
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    3cc6:	2c e3       	ldi	r18, 0x3C	; 60
    3cc8:	30 e0       	ldi	r19, 0x00	; 0
    3cca:	40 e0       	ldi	r20, 0x00	; 0
    3ccc:	50 e0       	ldi	r21, 0x00	; 0
    3cce:	0e 94 3f 3c 	call	0x787e	; 0x787e <__udivmodsi4>
    3cd2:	68 83       	st	Y, r22
  time /= 60; // now it is minutes
    3cd4:	c8 01       	movw	r24, r16
    3cd6:	b7 01       	movw	r22, r14
    3cd8:	2c e3       	ldi	r18, 0x3C	; 60
    3cda:	30 e0       	ldi	r19, 0x00	; 0
    3cdc:	40 e0       	ldi	r20, 0x00	; 0
    3cde:	50 e0       	ldi	r21, 0x00	; 0
    3ce0:	0e 94 3f 3c 	call	0x787e	; 0x787e <__udivmodsi4>
    3ce4:	12 2f       	mov	r17, r18
    3ce6:	03 2f       	mov	r16, r19
    3ce8:	f4 2e       	mov	r15, r20
    3cea:	e5 2e       	mov	r14, r21
  tm.Minute = time % 60;
    3cec:	62 2f       	mov	r22, r18
    3cee:	73 2f       	mov	r23, r19
    3cf0:	84 2f       	mov	r24, r20
    3cf2:	95 2f       	mov	r25, r21
    3cf4:	2c e3       	ldi	r18, 0x3C	; 60
    3cf6:	30 e0       	ldi	r19, 0x00	; 0
    3cf8:	40 e0       	ldi	r20, 0x00	; 0
    3cfa:	50 e0       	ldi	r21, 0x00	; 0
    3cfc:	0e 94 3f 3c 	call	0x787e	; 0x787e <__udivmodsi4>
    3d00:	69 83       	std	Y+1, r22	; 0x01
  time /= 60; // now it is hours
    3d02:	61 2f       	mov	r22, r17
    3d04:	70 2f       	mov	r23, r16
    3d06:	8f 2d       	mov	r24, r15
    3d08:	9e 2d       	mov	r25, r14
    3d0a:	2c e3       	ldi	r18, 0x3C	; 60
    3d0c:	30 e0       	ldi	r19, 0x00	; 0
    3d0e:	40 e0       	ldi	r20, 0x00	; 0
    3d10:	50 e0       	ldi	r21, 0x00	; 0
    3d12:	0e 94 3f 3c 	call	0x787e	; 0x787e <__udivmodsi4>
    3d16:	12 2f       	mov	r17, r18
    3d18:	03 2f       	mov	r16, r19
    3d1a:	f4 2e       	mov	r15, r20
    3d1c:	e5 2e       	mov	r14, r21
  tm.Hour = time % 24;
    3d1e:	62 2f       	mov	r22, r18
    3d20:	73 2f       	mov	r23, r19
    3d22:	84 2f       	mov	r24, r20
    3d24:	95 2f       	mov	r25, r21
    3d26:	28 e1       	ldi	r18, 0x18	; 24
    3d28:	30 e0       	ldi	r19, 0x00	; 0
    3d2a:	40 e0       	ldi	r20, 0x00	; 0
    3d2c:	50 e0       	ldi	r21, 0x00	; 0
    3d2e:	0e 94 3f 3c 	call	0x787e	; 0x787e <__udivmodsi4>
    3d32:	6a 83       	std	Y+2, r22	; 0x02
  time /= 24; // now it is days
    3d34:	61 2f       	mov	r22, r17
    3d36:	70 2f       	mov	r23, r16
    3d38:	8f 2d       	mov	r24, r15
    3d3a:	9e 2d       	mov	r25, r14
    3d3c:	28 e1       	ldi	r18, 0x18	; 24
    3d3e:	30 e0       	ldi	r19, 0x00	; 0
    3d40:	40 e0       	ldi	r20, 0x00	; 0
    3d42:	50 e0       	ldi	r21, 0x00	; 0
    3d44:	0e 94 3f 3c 	call	0x787e	; 0x787e <__udivmodsi4>
    3d48:	79 01       	movw	r14, r18
    3d4a:	8a 01       	movw	r16, r20
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    3d4c:	c8 01       	movw	r24, r16
    3d4e:	b7 01       	movw	r22, r14
    3d50:	6c 5f       	subi	r22, 0xFC	; 252
    3d52:	7f 4f       	sbci	r23, 0xFF	; 255
    3d54:	8f 4f       	sbci	r24, 0xFF	; 255
    3d56:	9f 4f       	sbci	r25, 0xFF	; 255
    3d58:	27 e0       	ldi	r18, 0x07	; 7
    3d5a:	30 e0       	ldi	r19, 0x00	; 0
    3d5c:	40 e0       	ldi	r20, 0x00	; 0
    3d5e:	50 e0       	ldi	r21, 0x00	; 0
    3d60:	0e 94 3f 3c 	call	0x787e	; 0x787e <__udivmodsi4>
    3d64:	6f 5f       	subi	r22, 0xFF	; 255
    3d66:	6b 83       	std	Y+3, r22	; 0x03
    3d68:	20 e0       	ldi	r18, 0x00	; 0
    3d6a:	aa 24       	eor	r10, r10
    3d6c:	bb 24       	eor	r11, r11
    3d6e:	65 01       	movw	r12, r10
    3d70:	01 c0       	rjmp	.+2      	; 0x3d74 <_Z9breakTimemR12tmElements_t+0xcc>
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
    3d72:	2f 5f       	subi	r18, 0xFF	; 255
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3d74:	82 2e       	mov	r8, r18
    3d76:	99 24       	eor	r9, r9
    3d78:	f4 01       	movw	r30, r8
    3d7a:	ee 54       	subi	r30, 0x4E	; 78
    3d7c:	f8 4f       	sbci	r31, 0xF8	; 248
    3d7e:	cf 01       	movw	r24, r30
    3d80:	83 70       	andi	r24, 0x03	; 3
    3d82:	90 70       	andi	r25, 0x00	; 0
    3d84:	89 2b       	or	r24, r25
    3d86:	99 f4       	brne	.+38     	; 0x3dae <_Z9breakTimemR12tmElements_t+0x106>
    3d88:	cf 01       	movw	r24, r30
    3d8a:	64 e6       	ldi	r22, 0x64	; 100
    3d8c:	70 e0       	ldi	r23, 0x00	; 0
    3d8e:	0e 94 2c 3c 	call	0x7858	; 0x7858 <__divmodhi4>
    3d92:	89 2b       	or	r24, r25
    3d94:	39 f4       	brne	.+14     	; 0x3da4 <_Z9breakTimemR12tmElements_t+0xfc>
    3d96:	cf 01       	movw	r24, r30
    3d98:	60 e9       	ldi	r22, 0x90	; 144
    3d9a:	71 e0       	ldi	r23, 0x01	; 1
    3d9c:	0e 94 2c 3c 	call	0x7858	; 0x7858 <__divmodhi4>
    3da0:	89 2b       	or	r24, r25
    3da2:	29 f4       	brne	.+10     	; 0x3dae <_Z9breakTimemR12tmElements_t+0x106>
    3da4:	8e e6       	ldi	r24, 0x6E	; 110
    3da6:	91 e0       	ldi	r25, 0x01	; 1
    3da8:	a0 e0       	ldi	r26, 0x00	; 0
    3daa:	b0 e0       	ldi	r27, 0x00	; 0
    3dac:	04 c0       	rjmp	.+8      	; 0x3db6 <_Z9breakTimemR12tmElements_t+0x10e>
    3dae:	8d e6       	ldi	r24, 0x6D	; 109
    3db0:	91 e0       	ldi	r25, 0x01	; 1
    3db2:	a0 e0       	ldi	r26, 0x00	; 0
    3db4:	b0 e0       	ldi	r27, 0x00	; 0
    3db6:	a8 0e       	add	r10, r24
    3db8:	b9 1e       	adc	r11, r25
    3dba:	ca 1e       	adc	r12, r26
    3dbc:	db 1e       	adc	r13, r27
    3dbe:	c5 01       	movw	r24, r10
    3dc0:	a0 e0       	ldi	r26, 0x00	; 0
    3dc2:	b0 e0       	ldi	r27, 0x00	; 0
    3dc4:	e8 16       	cp	r14, r24
    3dc6:	f9 06       	cpc	r15, r25
    3dc8:	0a 07       	cpc	r16, r26
    3dca:	1b 07       	cpc	r17, r27
    3dcc:	90 f6       	brcc	.-92     	; 0x3d72 <_Z9breakTimemR12tmElements_t+0xca>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    3dce:	2e 83       	std	Y+6, r18	; 0x06
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    3dd0:	f4 01       	movw	r30, r8
    3dd2:	ee 54       	subi	r30, 0x4E	; 78
    3dd4:	f8 4f       	sbci	r31, 0xF8	; 248
    3dd6:	83 e0       	ldi	r24, 0x03	; 3
    3dd8:	88 2e       	mov	r8, r24
    3dda:	91 2c       	mov	r9, r1
    3ddc:	8e 22       	and	r8, r30
    3dde:	9f 22       	and	r9, r31
    3de0:	81 14       	cp	r8, r1
    3de2:	91 04       	cpc	r9, r1
    3de4:	99 f4       	brne	.+38     	; 0x3e0c <_Z9breakTimemR12tmElements_t+0x164>
    3de6:	cf 01       	movw	r24, r30
    3de8:	64 e6       	ldi	r22, 0x64	; 100
    3dea:	70 e0       	ldi	r23, 0x00	; 0
    3dec:	0e 94 2c 3c 	call	0x7858	; 0x7858 <__divmodhi4>
    3df0:	89 2b       	or	r24, r25
    3df2:	39 f4       	brne	.+14     	; 0x3e02 <_Z9breakTimemR12tmElements_t+0x15a>
    3df4:	cf 01       	movw	r24, r30
    3df6:	60 e9       	ldi	r22, 0x90	; 144
    3df8:	71 e0       	ldi	r23, 0x01	; 1
    3dfa:	0e 94 2c 3c 	call	0x7858	; 0x7858 <__divmodhi4>
    3dfe:	89 2b       	or	r24, r25
    3e00:	29 f4       	brne	.+10     	; 0x3e0c <_Z9breakTimemR12tmElements_t+0x164>
    3e02:	8e e6       	ldi	r24, 0x6E	; 110
    3e04:	91 e0       	ldi	r25, 0x01	; 1
    3e06:	a0 e0       	ldi	r26, 0x00	; 0
    3e08:	b0 e0       	ldi	r27, 0x00	; 0
    3e0a:	04 c0       	rjmp	.+8      	; 0x3e14 <_Z9breakTimemR12tmElements_t+0x16c>
    3e0c:	8d e6       	ldi	r24, 0x6D	; 109
    3e0e:	91 e0       	ldi	r25, 0x01	; 1
    3e10:	a0 e0       	ldi	r26, 0x00	; 0
    3e12:	b0 e0       	ldi	r27, 0x00	; 0
  time  -= days; // now it is days in this year, starting at 0
    3e14:	a8 1a       	sub	r10, r24
    3e16:	b9 0a       	sbc	r11, r25
    3e18:	ca 0a       	sbc	r12, r26
    3e1a:	db 0a       	sbc	r13, r27
    3e1c:	98 01       	movw	r18, r16
    3e1e:	87 01       	movw	r16, r14
    3e20:	0a 19       	sub	r16, r10
    3e22:	1b 09       	sbc	r17, r11
    3e24:	2c 09       	sbc	r18, r12
    3e26:	3d 09       	sbc	r19, r13
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    3e28:	cf 01       	movw	r24, r30
    3e2a:	64 e6       	ldi	r22, 0x64	; 100
    3e2c:	70 e0       	ldi	r23, 0x00	; 0
    3e2e:	0e 94 2c 3c 	call	0x7858	; 0x7858 <__divmodhi4>
    3e32:	7c 01       	movw	r14, r24
    3e34:	cf 01       	movw	r24, r30
    3e36:	60 e9       	ldi	r22, 0x90	; 144
    3e38:	71 e0       	ldi	r23, 0x01	; 1
    3e3a:	0e 94 2c 3c 	call	0x7858	; 0x7858 <__divmodhi4>
    3e3e:	ac 01       	movw	r20, r24
    3e40:	ef e0       	ldi	r30, 0x0F	; 15
    3e42:	f1 e0       	ldi	r31, 0x01	; 1
    3e44:	60 e0       	ldi	r22, 0x00	; 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    3e46:	61 30       	cpi	r22, 0x01	; 1
    3e48:	51 f4       	brne	.+20     	; 0x3e5e <_Z9breakTimemR12tmElements_t+0x1b6>
      if (LEAP_YEAR(year)) {
    3e4a:	81 14       	cp	r8, r1
    3e4c:	91 04       	cpc	r9, r1
    3e4e:	49 f4       	brne	.+18     	; 0x3e62 <_Z9breakTimemR12tmElements_t+0x1ba>
    3e50:	e1 14       	cp	r14, r1
    3e52:	f1 04       	cpc	r15, r1
    3e54:	41 f4       	brne	.+16     	; 0x3e66 <_Z9breakTimemR12tmElements_t+0x1be>
    3e56:	41 15       	cp	r20, r1
    3e58:	51 05       	cpc	r21, r1
    3e5a:	29 f0       	breq	.+10     	; 0x3e66 <_Z9breakTimemR12tmElements_t+0x1be>
    3e5c:	02 c0       	rjmp	.+4      	; 0x3e62 <_Z9breakTimemR12tmElements_t+0x1ba>
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    3e5e:	80 81       	ld	r24, Z
    3e60:	03 c0       	rjmp	.+6      	; 0x3e68 <_Z9breakTimemR12tmElements_t+0x1c0>
    3e62:	8c e1       	ldi	r24, 0x1C	; 28
    3e64:	01 c0       	rjmp	.+2      	; 0x3e68 <_Z9breakTimemR12tmElements_t+0x1c0>
    3e66:	8d e1       	ldi	r24, 0x1D	; 29
    }
    
    if (time >= monthLength) {
    3e68:	90 e0       	ldi	r25, 0x00	; 0
    3e6a:	a0 e0       	ldi	r26, 0x00	; 0
    3e6c:	b0 e0       	ldi	r27, 0x00	; 0
    3e6e:	08 17       	cp	r16, r24
    3e70:	19 07       	cpc	r17, r25
    3e72:	2a 07       	cpc	r18, r26
    3e74:	3b 07       	cpc	r19, r27
    3e76:	40 f0       	brcs	.+16     	; 0x3e88 <_Z9breakTimemR12tmElements_t+0x1e0>
      time -= monthLength;
    3e78:	08 1b       	sub	r16, r24
    3e7a:	19 0b       	sbc	r17, r25
    3e7c:	2a 0b       	sbc	r18, r26
    3e7e:	3b 0b       	sbc	r19, r27
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    3e80:	6f 5f       	subi	r22, 0xFF	; 255
    3e82:	31 96       	adiw	r30, 0x01	; 1
    3e84:	6c 30       	cpi	r22, 0x0C	; 12
    3e86:	f9 f6       	brne	.-66     	; 0x3e46 <_Z9breakTimemR12tmElements_t+0x19e>
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    3e88:	6f 5f       	subi	r22, 0xFF	; 255
    3e8a:	6d 83       	std	Y+5, r22	; 0x05
  tm.Day = time + 1;     // day of month
    3e8c:	80 2f       	mov	r24, r16
    3e8e:	8f 5f       	subi	r24, 0xFF	; 255
    3e90:	8c 83       	std	Y+4, r24	; 0x04
}
    3e92:	df 91       	pop	r29
    3e94:	cf 91       	pop	r28
    3e96:	1f 91       	pop	r17
    3e98:	0f 91       	pop	r16
    3e9a:	ff 90       	pop	r15
    3e9c:	ef 90       	pop	r14
    3e9e:	df 90       	pop	r13
    3ea0:	cf 90       	pop	r12
    3ea2:	bf 90       	pop	r11
    3ea4:	af 90       	pop	r10
    3ea6:	9f 90       	pop	r9
    3ea8:	8f 90       	pop	r8
    3eaa:	08 95       	ret

00003eac <_Z12refreshCachem>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    3eac:	ef 92       	push	r14
    3eae:	ff 92       	push	r15
    3eb0:	0f 93       	push	r16
    3eb2:	1f 93       	push	r17
    3eb4:	7b 01       	movw	r14, r22
    3eb6:	8c 01       	movw	r16, r24
  if (t != cacheTime) {
    3eb8:	80 91 11 02 	lds	r24, 0x0211
    3ebc:	90 91 12 02 	lds	r25, 0x0212
    3ec0:	a0 91 13 02 	lds	r26, 0x0213
    3ec4:	b0 91 14 02 	lds	r27, 0x0214
    3ec8:	e8 16       	cp	r14, r24
    3eca:	f9 06       	cpc	r15, r25
    3ecc:	0a 07       	cpc	r16, r26
    3ece:	1b 07       	cpc	r17, r27
    3ed0:	71 f0       	breq	.+28     	; 0x3eee <_Z12refreshCachem+0x42>
    breakTime(t, tm); 
    3ed2:	c8 01       	movw	r24, r16
    3ed4:	b7 01       	movw	r22, r14
    3ed6:	46 e0       	ldi	r20, 0x06	; 6
    3ed8:	52 e0       	ldi	r21, 0x02	; 2
    3eda:	0e 94 54 1e 	call	0x3ca8	; 0x3ca8 <_Z9breakTimemR12tmElements_t>
    cacheTime = t; 
    3ede:	e0 92 11 02 	sts	0x0211, r14
    3ee2:	f0 92 12 02 	sts	0x0212, r15
    3ee6:	00 93 13 02 	sts	0x0213, r16
    3eea:	10 93 14 02 	sts	0x0214, r17
  }
}
    3eee:	1f 91       	pop	r17
    3ef0:	0f 91       	pop	r16
    3ef2:	ff 90       	pop	r15
    3ef4:	ef 90       	pop	r14
    3ef6:	08 95       	ret

00003ef8 <_Z4yearm>:
int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
    3ef8:	0e 94 56 1f 	call	0x3eac	; 0x3eac <_Z12refreshCachem>
    3efc:	20 91 0c 02 	lds	r18, 0x020C
    3f00:	30 e0       	ldi	r19, 0x00	; 0
    3f02:	2e 54       	subi	r18, 0x4E	; 78
    3f04:	38 4f       	sbci	r19, 0xF8	; 248
  return tmYearToCalendar(tm.Year);
}
    3f06:	c9 01       	movw	r24, r18
    3f08:	08 95       	ret

00003f0a <_Z8makeTimeR12tmElements_t>:
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
}

time_t makeTime(tmElements_t &tm){   
    3f0a:	4f 92       	push	r4
    3f0c:	5f 92       	push	r5
    3f0e:	6f 92       	push	r6
    3f10:	7f 92       	push	r7
    3f12:	8f 92       	push	r8
    3f14:	9f 92       	push	r9
    3f16:	af 92       	push	r10
    3f18:	bf 92       	push	r11
    3f1a:	cf 92       	push	r12
    3f1c:	df 92       	push	r13
    3f1e:	ef 92       	push	r14
    3f20:	ff 92       	push	r15
    3f22:	0f 93       	push	r16
    3f24:	1f 93       	push	r17
    3f26:	cf 93       	push	r28
    3f28:	df 93       	push	r29
    3f2a:	4c 01       	movw	r8, r24
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
    3f2c:	dc 01       	movw	r26, r24
    3f2e:	16 96       	adiw	r26, 0x06	; 6
    3f30:	1c 91       	ld	r17, X
    3f32:	61 2f       	mov	r22, r17
    3f34:	70 e0       	ldi	r23, 0x00	; 0
    3f36:	80 e0       	ldi	r24, 0x00	; 0
    3f38:	90 e0       	ldi	r25, 0x00	; 0
    3f3a:	20 e8       	ldi	r18, 0x80	; 128
    3f3c:	33 e3       	ldi	r19, 0x33	; 51
    3f3e:	41 ee       	ldi	r20, 0xE1	; 225
    3f40:	51 e0       	ldi	r21, 0x01	; 1
    3f42:	0e 94 f9 3b 	call	0x77f2	; 0x77f2 <__mulsi3>
    3f46:	5b 01       	movw	r10, r22
    3f48:	6c 01       	movw	r12, r24
    3f4a:	22 eb       	ldi	r18, 0xB2	; 178
    3f4c:	37 e0       	ldi	r19, 0x07	; 7
  for (i = 0; i < tm.Year; i++) {
    3f4e:	e1 2f       	mov	r30, r17
    3f50:	f0 e0       	ldi	r31, 0x00	; 0
    3f52:	ee 54       	subi	r30, 0x4E	; 78
    3f54:	f8 4f       	sbci	r31, 0xF8	; 248
    3f56:	1d c0       	rjmp	.+58     	; 0x3f92 <_Z8makeTimeR12tmElements_t+0x88>
    if (LEAP_YEAR(i)) {
    3f58:	c9 01       	movw	r24, r18
    3f5a:	83 70       	andi	r24, 0x03	; 3
    3f5c:	90 70       	andi	r25, 0x00	; 0
    3f5e:	89 2b       	or	r24, r25
    3f60:	b1 f4       	brne	.+44     	; 0x3f8e <_Z8makeTimeR12tmElements_t+0x84>
    3f62:	c9 01       	movw	r24, r18
    3f64:	64 e6       	ldi	r22, 0x64	; 100
    3f66:	70 e0       	ldi	r23, 0x00	; 0
    3f68:	0e 94 2c 3c 	call	0x7858	; 0x7858 <__divmodhi4>
    3f6c:	89 2b       	or	r24, r25
    3f6e:	39 f4       	brne	.+14     	; 0x3f7e <_Z8makeTimeR12tmElements_t+0x74>
    3f70:	c9 01       	movw	r24, r18
    3f72:	60 e9       	ldi	r22, 0x90	; 144
    3f74:	71 e0       	ldi	r23, 0x01	; 1
    3f76:	0e 94 2c 3c 	call	0x7858	; 0x7858 <__divmodhi4>
    3f7a:	89 2b       	or	r24, r25
    3f7c:	41 f4       	brne	.+16     	; 0x3f8e <_Z8makeTimeR12tmElements_t+0x84>
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    3f7e:	80 e8       	ldi	r24, 0x80	; 128
    3f80:	91 e5       	ldi	r25, 0x51	; 81
    3f82:	a1 e0       	ldi	r26, 0x01	; 1
    3f84:	b0 e0       	ldi	r27, 0x00	; 0
    3f86:	a8 0e       	add	r10, r24
    3f88:	b9 1e       	adc	r11, r25
    3f8a:	ca 1e       	adc	r12, r26
    3f8c:	db 1e       	adc	r13, r27
    3f8e:	2f 5f       	subi	r18, 0xFF	; 255
    3f90:	3f 4f       	sbci	r19, 0xFF	; 255
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    3f92:	2e 17       	cp	r18, r30
    3f94:	3f 07       	cpc	r19, r31
    3f96:	01 f7       	brne	.-64     	; 0x3f58 <_Z8makeTimeR12tmElements_t+0x4e>
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    3f98:	d4 01       	movw	r26, r8
    3f9a:	15 96       	adiw	r26, 0x05	; 5
    3f9c:	8c 91       	ld	r24, X
    3f9e:	48 2e       	mov	r4, r24
    3fa0:	55 24       	eor	r5, r5
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    3fa2:	c9 01       	movw	r24, r18
    3fa4:	64 e6       	ldi	r22, 0x64	; 100
    3fa6:	70 e0       	ldi	r23, 0x00	; 0
    3fa8:	0e 94 2c 3c 	call	0x7858	; 0x7858 <__divmodhi4>
    3fac:	7c 01       	movw	r14, r24
    3fae:	c9 01       	movw	r24, r18
    3fb0:	60 e9       	ldi	r22, 0x90	; 144
    3fb2:	71 e0       	ldi	r23, 0x01	; 1
    3fb4:	0e 94 2c 3c 	call	0x7858	; 0x7858 <__divmodhi4>
    3fb8:	8c 01       	movw	r16, r24
    3fba:	c1 e0       	ldi	r28, 0x01	; 1
    3fbc:	d0 e0       	ldi	r29, 0x00	; 0
    3fbe:	93 e0       	ldi	r25, 0x03	; 3
    3fc0:	69 2e       	mov	r6, r25
    3fc2:	71 2c       	mov	r7, r1
    3fc4:	62 22       	and	r6, r18
    3fc6:	73 22       	and	r7, r19
    3fc8:	27 c0       	rjmp	.+78     	; 0x4018 <_Z8makeTimeR12tmElements_t+0x10e>
    3fca:	c2 30       	cpi	r28, 0x02	; 2
    3fcc:	d1 05       	cpc	r29, r1
    3fce:	91 f4       	brne	.+36     	; 0x3ff4 <_Z8makeTimeR12tmElements_t+0xea>
    3fd0:	61 14       	cp	r6, r1
    3fd2:	71 04       	cpc	r7, r1
    3fd4:	79 f4       	brne	.+30     	; 0x3ff4 <_Z8makeTimeR12tmElements_t+0xea>
    3fd6:	e1 14       	cp	r14, r1
    3fd8:	f1 04       	cpc	r15, r1
    3fda:	19 f4       	brne	.+6      	; 0x3fe2 <_Z8makeTimeR12tmElements_t+0xd8>
    3fdc:	01 15       	cp	r16, r1
    3fde:	11 05       	cpc	r17, r1
    3fe0:	49 f4       	brne	.+18     	; 0x3ff4 <_Z8makeTimeR12tmElements_t+0xea>
      seconds += SECS_PER_DAY * 29;
    3fe2:	80 e8       	ldi	r24, 0x80	; 128
    3fe4:	9b e3       	ldi	r25, 0x3B	; 59
    3fe6:	a6 e2       	ldi	r26, 0x26	; 38
    3fe8:	b0 e0       	ldi	r27, 0x00	; 0
    3fea:	a8 0e       	add	r10, r24
    3fec:	b9 1e       	adc	r11, r25
    3fee:	ca 1e       	adc	r12, r26
    3ff0:	db 1e       	adc	r13, r27
    3ff2:	11 c0       	rjmp	.+34     	; 0x4016 <_Z8makeTimeR12tmElements_t+0x10c>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    3ff4:	fe 01       	movw	r30, r28
    3ff6:	e2 5f       	subi	r30, 0xF2	; 242
    3ff8:	fe 4f       	sbci	r31, 0xFE	; 254
    3ffa:	60 81       	ld	r22, Z
    3ffc:	70 e0       	ldi	r23, 0x00	; 0
    3ffe:	80 e0       	ldi	r24, 0x00	; 0
    4000:	90 e0       	ldi	r25, 0x00	; 0
    4002:	20 e8       	ldi	r18, 0x80	; 128
    4004:	31 e5       	ldi	r19, 0x51	; 81
    4006:	41 e0       	ldi	r20, 0x01	; 1
    4008:	50 e0       	ldi	r21, 0x00	; 0
    400a:	0e 94 f9 3b 	call	0x77f2	; 0x77f2 <__mulsi3>
    400e:	a6 0e       	add	r10, r22
    4010:	b7 1e       	adc	r11, r23
    4012:	c8 1e       	adc	r12, r24
    4014:	d9 1e       	adc	r13, r25
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    4016:	21 96       	adiw	r28, 0x01	; 1
    4018:	c4 15       	cp	r28, r4
    401a:	d5 05       	cpc	r29, r5
    401c:	b4 f2       	brlt	.-84     	; 0x3fca <_Z8makeTimeR12tmElements_t+0xc0>
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    }
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
    401e:	d4 01       	movw	r26, r8
    4020:	12 96       	adiw	r26, 0x02	; 2
    4022:	6c 91       	ld	r22, X
    4024:	70 e0       	ldi	r23, 0x00	; 0
    4026:	80 e0       	ldi	r24, 0x00	; 0
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	20 e1       	ldi	r18, 0x10	; 16
    402c:	3e e0       	ldi	r19, 0x0E	; 14
    402e:	40 e0       	ldi	r20, 0x00	; 0
    4030:	50 e0       	ldi	r21, 0x00	; 0
    4032:	0e 94 f9 3b 	call	0x77f2	; 0x77f2 <__mulsi3>
    4036:	7b 01       	movw	r14, r22
    4038:	8c 01       	movw	r16, r24
    403a:	f4 01       	movw	r30, r8
    403c:	61 81       	ldd	r22, Z+1	; 0x01
    403e:	70 e0       	ldi	r23, 0x00	; 0
    4040:	80 e0       	ldi	r24, 0x00	; 0
    4042:	90 e0       	ldi	r25, 0x00	; 0
    4044:	2c e3       	ldi	r18, 0x3C	; 60
    4046:	30 e0       	ldi	r19, 0x00	; 0
    4048:	40 e0       	ldi	r20, 0x00	; 0
    404a:	50 e0       	ldi	r21, 0x00	; 0
    404c:	0e 94 f9 3b 	call	0x77f2	; 0x77f2 <__mulsi3>
    4050:	e6 0e       	add	r14, r22
    4052:	f7 1e       	adc	r15, r23
    4054:	08 1f       	adc	r16, r24
    4056:	19 1f       	adc	r17, r25
  seconds+= tm.Hour * SECS_PER_HOUR;
    4058:	d4 01       	movw	r26, r8
    405a:	8c 91       	ld	r24, X
    405c:	e8 0e       	add	r14, r24
    405e:	f1 1c       	adc	r15, r1
    4060:	01 1d       	adc	r16, r1
    4062:	11 1d       	adc	r17, r1
  seconds+= tm.Minute * SECS_PER_MIN;
    4064:	14 96       	adiw	r26, 0x04	; 4
    4066:	6c 91       	ld	r22, X
    4068:	70 e0       	ldi	r23, 0x00	; 0
    406a:	61 50       	subi	r22, 0x01	; 1
    406c:	70 40       	sbci	r23, 0x00	; 0
    406e:	88 27       	eor	r24, r24
    4070:	77 fd       	sbrc	r23, 7
    4072:	80 95       	com	r24
    4074:	98 2f       	mov	r25, r24
    4076:	20 e8       	ldi	r18, 0x80	; 128
    4078:	31 e5       	ldi	r19, 0x51	; 81
    407a:	41 e0       	ldi	r20, 0x01	; 1
    407c:	50 e0       	ldi	r21, 0x00	; 0
    407e:	0e 94 f9 3b 	call	0x77f2	; 0x77f2 <__mulsi3>
    4082:	e6 0e       	add	r14, r22
    4084:	f7 1e       	adc	r15, r23
    4086:	08 1f       	adc	r16, r24
    4088:	19 1f       	adc	r17, r25
    408a:	ea 0c       	add	r14, r10
    408c:	fb 1c       	adc	r15, r11
    408e:	0c 1d       	adc	r16, r12
    4090:	1d 1d       	adc	r17, r13
  seconds+= tm.Second;
  return (time_t)seconds; 
}
    4092:	b7 01       	movw	r22, r14
    4094:	c8 01       	movw	r24, r16
    4096:	df 91       	pop	r29
    4098:	cf 91       	pop	r28
    409a:	1f 91       	pop	r17
    409c:	0f 91       	pop	r16
    409e:	ff 90       	pop	r15
    40a0:	ef 90       	pop	r14
    40a2:	df 90       	pop	r13
    40a4:	cf 90       	pop	r12
    40a6:	bf 90       	pop	r11
    40a8:	af 90       	pop	r10
    40aa:	9f 90       	pop	r9
    40ac:	8f 90       	pop	r8
    40ae:	7f 90       	pop	r7
    40b0:	6f 90       	pop	r6
    40b2:	5f 90       	pop	r5
    40b4:	4f 90       	pop	r4
    40b6:	08 95       	ret

000040b8 <_Z7setTimem>:
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    40b8:	60 93 fc 01 	sts	0x01FC, r22
    40bc:	70 93 fd 01 	sts	0x01FD, r23
    40c0:	80 93 fe 01 	sts	0x01FE, r24
    40c4:	90 93 ff 01 	sts	0x01FF, r25
  nextSyncTime = (uint32_t)t + syncInterval;
    40c8:	20 91 05 01 	lds	r18, 0x0105
    40cc:	30 91 06 01 	lds	r19, 0x0106
    40d0:	40 91 07 01 	lds	r20, 0x0107
    40d4:	50 91 08 01 	lds	r21, 0x0108
    40d8:	26 0f       	add	r18, r22
    40da:	37 1f       	adc	r19, r23
    40dc:	48 1f       	adc	r20, r24
    40de:	59 1f       	adc	r21, r25
    40e0:	20 93 00 02 	sts	0x0200, r18
    40e4:	30 93 01 02 	sts	0x0201, r19
    40e8:	40 93 02 02 	sts	0x0202, r20
    40ec:	50 93 03 02 	sts	0x0203, r21
  Status = timeSet;
    40f0:	82 e0       	ldi	r24, 0x02	; 2
    40f2:	90 e0       	ldi	r25, 0x00	; 0
    40f4:	90 93 05 02 	sts	0x0205, r25
    40f8:	80 93 04 02 	sts	0x0204, r24
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    40fc:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <millis>
    4100:	60 93 0d 02 	sts	0x020D, r22
    4104:	70 93 0e 02 	sts	0x020E, r23
    4108:	80 93 0f 02 	sts	0x020F, r24
    410c:	90 93 10 02 	sts	0x0210, r25
} 
    4110:	08 95       	ret

00004112 <_Z3nowv>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    4112:	ef 92       	push	r14
    4114:	ff 92       	push	r15
    4116:	0f 93       	push	r16
    4118:	1f 93       	push	r17
    411a:	1c c0       	rjmp	.+56     	; 0x4154 <_Z3nowv+0x42>
  while (millis() - prevMillis >= 1000){      
    sysTime++;
    411c:	2f 5f       	subi	r18, 0xFF	; 255
    411e:	3f 4f       	sbci	r19, 0xFF	; 255
    4120:	4f 4f       	sbci	r20, 0xFF	; 255
    4122:	5f 4f       	sbci	r21, 0xFF	; 255
    4124:	20 93 fc 01 	sts	0x01FC, r18
    4128:	30 93 fd 01 	sts	0x01FD, r19
    412c:	40 93 fe 01 	sts	0x01FE, r20
    4130:	50 93 ff 01 	sts	0x01FF, r21
    prevMillis += 1000;	
    4134:	88 ee       	ldi	r24, 0xE8	; 232
    4136:	93 e0       	ldi	r25, 0x03	; 3
    4138:	a0 e0       	ldi	r26, 0x00	; 0
    413a:	b0 e0       	ldi	r27, 0x00	; 0
    413c:	e8 0e       	add	r14, r24
    413e:	f9 1e       	adc	r15, r25
    4140:	0a 1f       	adc	r16, r26
    4142:	1b 1f       	adc	r17, r27
    4144:	e0 92 0d 02 	sts	0x020D, r14
    4148:	f0 92 0e 02 	sts	0x020E, r15
    414c:	00 93 0f 02 	sts	0x020F, r16
    4150:	10 93 10 02 	sts	0x0210, r17
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
  while (millis() - prevMillis >= 1000){      
    4154:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <millis>
    4158:	e0 90 0d 02 	lds	r14, 0x020D
    415c:	f0 90 0e 02 	lds	r15, 0x020E
    4160:	00 91 0f 02 	lds	r16, 0x020F
    4164:	10 91 10 02 	lds	r17, 0x0210
    4168:	6e 19       	sub	r22, r14
    416a:	7f 09       	sbc	r23, r15
    416c:	80 0b       	sbc	r24, r16
    416e:	91 0b       	sbc	r25, r17
    4170:	20 91 fc 01 	lds	r18, 0x01FC
    4174:	30 91 fd 01 	lds	r19, 0x01FD
    4178:	40 91 fe 01 	lds	r20, 0x01FE
    417c:	50 91 ff 01 	lds	r21, 0x01FF
    4180:	68 5e       	subi	r22, 0xE8	; 232
    4182:	73 40       	sbci	r23, 0x03	; 3
    4184:	80 40       	sbci	r24, 0x00	; 0
    4186:	90 40       	sbci	r25, 0x00	; 0
    4188:	48 f6       	brcc	.-110    	; 0x411c <_Z3nowv+0xa>
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    418a:	80 91 00 02 	lds	r24, 0x0200
    418e:	90 91 01 02 	lds	r25, 0x0201
    4192:	a0 91 02 02 	lds	r26, 0x0202
    4196:	b0 91 03 02 	lds	r27, 0x0203
    419a:	28 17       	cp	r18, r24
    419c:	39 07       	cpc	r19, r25
    419e:	4a 07       	cpc	r20, r26
    41a0:	5b 07       	cpc	r21, r27
    41a2:	c8 f1       	brcs	.+114    	; 0x4216 <_Z3nowv+0x104>
    if (getTimePtr != 0) {
    41a4:	e0 91 fa 01 	lds	r30, 0x01FA
    41a8:	f0 91 fb 01 	lds	r31, 0x01FB
    41ac:	30 97       	sbiw	r30, 0x00	; 0
    41ae:	99 f1       	breq	.+102    	; 0x4216 <_Z3nowv+0x104>
      time_t t = getTimePtr();
    41b0:	09 95       	icall
      if (t != 0) {
    41b2:	61 15       	cp	r22, r1
    41b4:	71 05       	cpc	r23, r1
    41b6:	81 05       	cpc	r24, r1
    41b8:	91 05       	cpc	r25, r1
    41ba:	19 f0       	breq	.+6      	; 0x41c2 <_Z3nowv+0xb0>
        setTime(t);
    41bc:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <_Z7setTimem>
    41c0:	2a c0       	rjmp	.+84     	; 0x4216 <_Z3nowv+0x104>
      } else {
        nextSyncTime = sysTime + syncInterval;
    41c2:	80 91 05 01 	lds	r24, 0x0105
    41c6:	90 91 06 01 	lds	r25, 0x0106
    41ca:	a0 91 07 01 	lds	r26, 0x0107
    41ce:	b0 91 08 01 	lds	r27, 0x0108
    41d2:	20 91 fc 01 	lds	r18, 0x01FC
    41d6:	30 91 fd 01 	lds	r19, 0x01FD
    41da:	40 91 fe 01 	lds	r20, 0x01FE
    41de:	50 91 ff 01 	lds	r21, 0x01FF
    41e2:	82 0f       	add	r24, r18
    41e4:	93 1f       	adc	r25, r19
    41e6:	a4 1f       	adc	r26, r20
    41e8:	b5 1f       	adc	r27, r21
    41ea:	80 93 00 02 	sts	0x0200, r24
    41ee:	90 93 01 02 	sts	0x0201, r25
    41f2:	a0 93 02 02 	sts	0x0202, r26
    41f6:	b0 93 03 02 	sts	0x0203, r27
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    41fa:	20 e0       	ldi	r18, 0x00	; 0
    41fc:	30 e0       	ldi	r19, 0x00	; 0
    41fe:	80 91 04 02 	lds	r24, 0x0204
    4202:	90 91 05 02 	lds	r25, 0x0205
    4206:	89 2b       	or	r24, r25
    4208:	11 f0       	breq	.+4      	; 0x420e <_Z3nowv+0xfc>
    420a:	21 e0       	ldi	r18, 0x01	; 1
    420c:	30 e0       	ldi	r19, 0x00	; 0
    420e:	30 93 05 02 	sts	0x0205, r19
    4212:	20 93 04 02 	sts	0x0204, r18
    4216:	60 91 fc 01 	lds	r22, 0x01FC
    421a:	70 91 fd 01 	lds	r23, 0x01FD
      }
    }
  }  
  return (time_t)sysTime;
}
    421e:	80 91 fe 01 	lds	r24, 0x01FE
    4222:	90 91 ff 01 	lds	r25, 0x01FF
    4226:	1f 91       	pop	r17
    4228:	0f 91       	pop	r16
    422a:	ff 90       	pop	r15
    422c:	ef 90       	pop	r14
    422e:	08 95       	ret

00004230 <_Z15setSyncProviderPFmvE>:
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    4230:	90 93 fb 01 	sts	0x01FB, r25
    4234:	80 93 fa 01 	sts	0x01FA, r24
  nextSyncTime = sysTime;
    4238:	80 91 fc 01 	lds	r24, 0x01FC
    423c:	90 91 fd 01 	lds	r25, 0x01FD
    4240:	a0 91 fe 01 	lds	r26, 0x01FE
    4244:	b0 91 ff 01 	lds	r27, 0x01FF
    4248:	80 93 00 02 	sts	0x0200, r24
    424c:	90 93 01 02 	sts	0x0201, r25
    4250:	a0 93 02 02 	sts	0x0202, r26
    4254:	b0 93 03 02 	sts	0x0203, r27
  now(); // this will sync the clock
    4258:	0e 94 89 20 	call	0x4112	; 0x4112 <_Z3nowv>
}
    425c:	08 95       	ret

0000425e <_Z10timeStatusv>:
  sysTime += adjustment;
}

// indicates if time has been set and recently synchronized
timeStatus_t timeStatus() {
  now(); // required to actually update the status
    425e:	0e 94 89 20 	call	0x4112	; 0x4112 <_Z3nowv>
  return Status;
}
    4262:	80 91 04 02 	lds	r24, 0x0204
    4266:	90 91 05 02 	lds	r25, 0x0205
    426a:	08 95       	ret

0000426c <_Z4yearv>:
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    426c:	0e 94 89 20 	call	0x4112	; 0x4112 <_Z3nowv>
    4270:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <_Z4yearm>
}
    4274:	08 95       	ret

00004276 <_Z4hourv>:
    cacheTime = t; 
  }
}

int hour() { // the hour now 
  return hour(now()); 
    4276:	0e 94 89 20 	call	0x4112	; 0x4112 <_Z3nowv>
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
    427a:	0e 94 56 1f 	call	0x3eac	; 0x3eac <_Z12refreshCachem>
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    427e:	80 91 08 02 	lds	r24, 0x0208
    4282:	90 e0       	ldi	r25, 0x00	; 0
    4284:	08 95       	ret

00004286 <_ZN15TimeAlarmsClassC1Ev>:
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    4286:	cf 93       	push	r28
    4288:	df 93       	push	r29
    428a:	dc 01       	movw	r26, r24
    428c:	fc 01       	movw	r30, r24
    428e:	20 e0       	ldi	r18, 0x00	; 0
    4290:	30 e0       	ldi	r19, 0x00	; 0
//**************************************************************
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
    4292:	82 85       	ldd	r24, Z+10	; 0x0a
  Mode.alarmType = dtNotAllocated;
    4294:	80 7c       	andi	r24, 0xC0	; 192
    4296:	82 87       	std	Z+10, r24	; 0x0a
  value = nextTrigger = 0;
    4298:	16 82       	std	Z+6, r1	; 0x06
    429a:	17 82       	std	Z+7, r1	; 0x07
    429c:	10 86       	std	Z+8, r1	; 0x08
    429e:	11 86       	std	Z+9, r1	; 0x09
    42a0:	12 82       	std	Z+2, r1	; 0x02
    42a2:	13 82       	std	Z+3, r1	; 0x03
    42a4:	14 82       	std	Z+4, r1	; 0x04
    42a6:	15 82       	std	Z+5, r1	; 0x05
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set 
    42a8:	11 82       	std	Z+1, r1	; 0x01
    42aa:	10 82       	st	Z, r1
    42ac:	25 5f       	subi	r18, 0xF5	; 245
    42ae:	3f 4f       	sbci	r19, 0xFF	; 255
    42b0:	3b 96       	adiw	r30, 0x0b	; 11
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    42b2:	22 34       	cpi	r18, 0x42	; 66
    42b4:	31 05       	cpc	r19, r1
    42b6:	69 f7       	brne	.-38     	; 0x4292 <_ZN15TimeAlarmsClassC1Ev+0xc>
{
  isServicing = false;
    42b8:	ae 5b       	subi	r26, 0xBE	; 190
    42ba:	bf 4f       	sbci	r27, 0xFF	; 255
    42bc:	1c 92       	st	X, r1
    42be:	a2 54       	subi	r26, 0x42	; 66
    42c0:	b0 40       	sbci	r27, 0x00	; 0
    42c2:	ed 01       	movw	r28, r26
    42c4:	20 e0       	ldi	r18, 0x00	; 0
    42c6:	30 e0       	ldi	r19, 0x00	; 0
     }
     
     // returns true if this id is allocated
     bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
     {
        return( ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated );
    42c8:	4b e0       	ldi	r20, 0x0B	; 11
    42ca:	50 e0       	ldi	r21, 0x00	; 0
    42cc:	24 9f       	mul	r18, r20
    42ce:	f0 01       	movw	r30, r0
    42d0:	25 9f       	mul	r18, r21
    42d2:	f0 0d       	add	r31, r0
    42d4:	34 9f       	mul	r19, r20
    42d6:	f0 0d       	add	r31, r0
    42d8:	11 24       	eor	r1, r1
    42da:	ea 0f       	add	r30, r26
    42dc:	fb 1f       	adc	r31, r27
    42de:	92 85       	ldd	r25, Z+10	; 0x0a
    42e0:	89 2f       	mov	r24, r25
    42e2:	8f 70       	andi	r24, 0x0F	; 15
    42e4:	61 f0       	breq	.+24     	; 0x42fe <_ZN15TimeAlarmsClassC1Ev+0x78>
    void TimeAlarmsClass::free(AlarmID_t ID)
    {
      if(isAllocated(ID))
      {
        Alarm[ID].Mode.isEnabled = false;
    	Alarm[ID].Mode.alarmType = dtNotAllocated;
    42e6:	90 7e       	andi	r25, 0xE0	; 224
    42e8:	92 87       	std	Z+10, r25	; 0x0a
        Alarm[ID].onTickHandler = 0;
    42ea:	19 82       	std	Y+1, r1	; 0x01
    42ec:	18 82       	st	Y, r1
    	Alarm[ID].value = 0;
    42ee:	1a 82       	std	Y+2, r1	; 0x02
    42f0:	1b 82       	std	Y+3, r1	; 0x03
    42f2:	1c 82       	std	Y+4, r1	; 0x04
    42f4:	1d 82       	std	Y+5, r1	; 0x05
    	Alarm[ID].nextTrigger = 0;   	
    42f6:	1e 82       	std	Y+6, r1	; 0x06
    42f8:	1f 82       	std	Y+7, r1	; 0x07
    42fa:	18 86       	std	Y+8, r1	; 0x08
    42fc:	19 86       	std	Y+9, r1	; 0x09
    42fe:	2f 5f       	subi	r18, 0xFF	; 255
    4300:	3f 4f       	sbci	r19, 0xFF	; 255
    4302:	2b 96       	adiw	r28, 0x0b	; 11
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
  for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
    4304:	26 30       	cpi	r18, 0x06	; 6
    4306:	31 05       	cpc	r19, r1
    4308:	09 f7       	brne	.-62     	; 0x42cc <_ZN15TimeAlarmsClassC1Ev+0x46>
     free(id);   // ensure  all Alarms are cleared and available for allocation  
}
    430a:	df 91       	pop	r29
    430c:	cf 91       	pop	r28
    430e:	08 95       	ret

00004310 <_GLOBAL__I__ZN10AlarmClassC2Ev>:
      }
      return dtINVALID_ALARM_ID; // no IDs available or time is invalid
    }
    
    // make one instance for the user to use
    TimeAlarmsClass Alarm = TimeAlarmsClass() ;
    4310:	85 e1       	ldi	r24, 0x15	; 21
    4312:	92 e0       	ldi	r25, 0x02	; 2
    4314:	0e 94 43 21 	call	0x4286	; 0x4286 <_ZN15TimeAlarmsClassC1Ev>
    4318:	08 95       	ret

0000431a <_ZN10AlarmClass17updateNextTriggerEv>:

//**************************************************************
//* Private Methods

 
void AlarmClass::updateNextTrigger()
    431a:	2f 92       	push	r2
    431c:	3f 92       	push	r3
    431e:	4f 92       	push	r4
    4320:	5f 92       	push	r5
    4322:	6f 92       	push	r6
    4324:	7f 92       	push	r7
    4326:	8f 92       	push	r8
    4328:	9f 92       	push	r9
    432a:	af 92       	push	r10
    432c:	bf 92       	push	r11
    432e:	cf 92       	push	r12
    4330:	df 92       	push	r13
    4332:	ef 92       	push	r14
    4334:	ff 92       	push	r15
    4336:	0f 93       	push	r16
    4338:	1f 93       	push	r17
    433a:	df 93       	push	r29
    433c:	cf 93       	push	r28
    433e:	00 d0       	rcall	.+0      	; 0x4340 <_ZN10AlarmClass17updateNextTriggerEv+0x26>
    4340:	00 d0       	rcall	.+0      	; 0x4342 <_ZN10AlarmClass17updateNextTriggerEv+0x28>
    4342:	00 d0       	rcall	.+0      	; 0x4344 <_ZN10AlarmClass17updateNextTriggerEv+0x2a>
    4344:	cd b7       	in	r28, 0x3d	; 61
    4346:	de b7       	in	r29, 0x3e	; 62
    4348:	9e 83       	std	Y+6, r25	; 0x06
    434a:	8d 83       	std	Y+5, r24	; 0x05
{  
  if( (value != 0) && Mode.isEnabled )
    434c:	fc 01       	movw	r30, r24
    434e:	82 81       	ldd	r24, Z+2	; 0x02
    4350:	93 81       	ldd	r25, Z+3	; 0x03
    4352:	a4 81       	ldd	r26, Z+4	; 0x04
    4354:	b5 81       	ldd	r27, Z+5	; 0x05
    4356:	00 97       	sbiw	r24, 0x00	; 0
    4358:	a1 05       	cpc	r26, r1
    435a:	b1 05       	cpc	r27, r1
    435c:	09 f4       	brne	.+2      	; 0x4360 <_ZN10AlarmClass17updateNextTriggerEv+0x46>
    435e:	5b c1       	rjmp	.+694    	; 0x4616 <_ZN10AlarmClass17updateNextTriggerEv+0x2fc>
    4360:	82 85       	ldd	r24, Z+10	; 0x0a
    4362:	84 ff       	sbrs	r24, 4
    4364:	58 c1       	rjmp	.+688    	; 0x4616 <_ZN10AlarmClass17updateNextTriggerEv+0x2fc>
  {
    time_t time = now();
    4366:	0e 94 89 20 	call	0x4112	; 0x4112 <_Z3nowv>
    436a:	69 83       	std	Y+1, r22	; 0x01
    436c:	7a 83       	std	Y+2, r23	; 0x02
    436e:	8b 83       	std	Y+3, r24	; 0x03
    4370:	9c 83       	std	Y+4, r25	; 0x04
    if( dtIsAlarm(Mode.alarmType) && nextTrigger <= time )   // update alarm if next trigger is not yet in the future
    4372:	ad 81       	ldd	r26, Y+5	; 0x05
    4374:	be 81       	ldd	r27, Y+6	; 0x06
    4376:	1a 96       	adiw	r26, 0x0a	; 10
    4378:	3c 91       	ld	r19, X
    437a:	1a 97       	sbiw	r26, 0x0a	; 10
    437c:	23 2f       	mov	r18, r19
    437e:	2f 70       	andi	r18, 0x0F	; 15
    4380:	82 2f       	mov	r24, r18
    4382:	82 5f       	subi	r24, 0xF2	; 242
    4384:	8f 70       	andi	r24, 0x0F	; 15
    4386:	83 30       	cpi	r24, 0x03	; 3
    4388:	08 f0       	brcs	.+2      	; 0x438c <_ZN10AlarmClass17updateNextTriggerEv+0x72>
    438a:	28 c1       	rjmp	.+592    	; 0x45dc <_ZN10AlarmClass17updateNextTriggerEv+0x2c2>
    438c:	16 96       	adiw	r26, 0x06	; 6
    438e:	8d 91       	ld	r24, X+
    4390:	9d 91       	ld	r25, X+
    4392:	0d 90       	ld	r0, X+
    4394:	bc 91       	ld	r27, X
    4396:	a0 2d       	mov	r26, r0
    4398:	49 81       	ldd	r20, Y+1	; 0x01
    439a:	5a 81       	ldd	r21, Y+2	; 0x02
    439c:	6b 81       	ldd	r22, Y+3	; 0x03
    439e:	7c 81       	ldd	r23, Y+4	; 0x04
    43a0:	48 17       	cp	r20, r24
    43a2:	59 07       	cpc	r21, r25
    43a4:	6a 07       	cpc	r22, r26
    43a6:	7b 07       	cpc	r23, r27
    43a8:	08 f4       	brcc	.+2      	; 0x43ac <_ZN10AlarmClass17updateNextTriggerEv+0x92>
    43aa:	18 c1       	rjmp	.+560    	; 0x45dc <_ZN10AlarmClass17updateNextTriggerEv+0x2c2>
    {      
      if(Mode.alarmType == dtExplicitAlarm ) // is the value a specific date and time in the future
    43ac:	22 30       	cpi	r18, 0x02	; 2
    43ae:	59 f4       	brne	.+22     	; 0x43c6 <_ZN10AlarmClass17updateNextTriggerEv+0xac>
      {
        nextTrigger = value;  // yes, trigger on this value   
    43b0:	ed 81       	ldd	r30, Y+5	; 0x05
    43b2:	fe 81       	ldd	r31, Y+6	; 0x06
    43b4:	82 81       	ldd	r24, Z+2	; 0x02
    43b6:	93 81       	ldd	r25, Z+3	; 0x03
    43b8:	a4 81       	ldd	r26, Z+4	; 0x04
    43ba:	b5 81       	ldd	r27, Z+5	; 0x05
    43bc:	86 83       	std	Z+6, r24	; 0x06
    43be:	97 83       	std	Z+7, r25	; 0x07
    43c0:	a0 87       	std	Z+8, r26	; 0x08
    43c2:	b1 87       	std	Z+9, r27	; 0x09
    43c4:	0b c1       	rjmp	.+534    	; 0x45dc <_ZN10AlarmClass17updateNextTriggerEv+0x2c2>
      }
      else if(Mode.alarmType == dtDailyAlarm)  //if this is a daily alarm
    43c6:	23 30       	cpi	r18, 0x03	; 3
    43c8:	09 f0       	breq	.+2      	; 0x43cc <_ZN10AlarmClass17updateNextTriggerEv+0xb2>
    43ca:	61 c0       	rjmp	.+194    	; 0x448e <_ZN10AlarmClass17updateNextTriggerEv+0x174>
      {
        if( value + previousMidnight(now()) <= time)
    43cc:	ad 81       	ldd	r26, Y+5	; 0x05
    43ce:	be 81       	ldd	r27, Y+6	; 0x06
    43d0:	12 96       	adiw	r26, 0x02	; 2
    43d2:	ed 90       	ld	r14, X+
    43d4:	fd 90       	ld	r15, X+
    43d6:	0d 91       	ld	r16, X+
    43d8:	1c 91       	ld	r17, X
    43da:	15 97       	sbiw	r26, 0x05	; 5
    43dc:	0e 94 89 20 	call	0x4112	; 0x4112 <_Z3nowv>
    43e0:	20 e8       	ldi	r18, 0x80	; 128
    43e2:	31 e5       	ldi	r19, 0x51	; 81
    43e4:	41 e0       	ldi	r20, 0x01	; 1
    43e6:	50 e0       	ldi	r21, 0x00	; 0
    43e8:	0e 94 3f 3c 	call	0x787e	; 0x787e <__udivmodsi4>
    43ec:	ca 01       	movw	r24, r20
    43ee:	b9 01       	movw	r22, r18
    43f0:	20 e8       	ldi	r18, 0x80	; 128
    43f2:	31 e5       	ldi	r19, 0x51	; 81
    43f4:	41 e0       	ldi	r20, 0x01	; 1
    43f6:	50 e0       	ldi	r21, 0x00	; 0
    43f8:	0e 94 f9 3b 	call	0x77f2	; 0x77f2 <__mulsi3>
    43fc:	e6 0e       	add	r14, r22
    43fe:	f7 1e       	adc	r15, r23
    4400:	08 1f       	adc	r16, r24
    4402:	19 1f       	adc	r17, r25
    4404:	ed 81       	ldd	r30, Y+5	; 0x05
    4406:	fe 81       	ldd	r31, Y+6	; 0x06
    4408:	a2 80       	ldd	r10, Z+2	; 0x02
    440a:	b3 80       	ldd	r11, Z+3	; 0x03
    440c:	c4 80       	ldd	r12, Z+4	; 0x04
    440e:	d5 80       	ldd	r13, Z+5	; 0x05
    4410:	29 81       	ldd	r18, Y+1	; 0x01
    4412:	3a 81       	ldd	r19, Y+2	; 0x02
    4414:	4b 81       	ldd	r20, Y+3	; 0x03
    4416:	5c 81       	ldd	r21, Y+4	; 0x04
    4418:	2e 15       	cp	r18, r14
    441a:	3f 05       	cpc	r19, r15
    441c:	40 07       	cpc	r20, r16
    441e:	51 07       	cpc	r21, r17
    4420:	c8 f0       	brcs	.+50     	; 0x4454 <_ZN10AlarmClass17updateNextTriggerEv+0x13a>
        {
          nextTrigger = value + nextMidnight(time); // if time has passed then set for tomorrow
    4422:	ca 01       	movw	r24, r20
    4424:	b9 01       	movw	r22, r18
    4426:	20 e8       	ldi	r18, 0x80	; 128
    4428:	31 e5       	ldi	r19, 0x51	; 81
    442a:	41 e0       	ldi	r20, 0x01	; 1
    442c:	50 e0       	ldi	r21, 0x00	; 0
    442e:	0e 94 3f 3c 	call	0x787e	; 0x787e <__udivmodsi4>
    4432:	2f 5f       	subi	r18, 0xFF	; 255
    4434:	3f 4f       	sbci	r19, 0xFF	; 255
    4436:	4f 4f       	sbci	r20, 0xFF	; 255
    4438:	5f 4f       	sbci	r21, 0xFF	; 255
    443a:	ca 01       	movw	r24, r20
    443c:	b9 01       	movw	r22, r18
    443e:	20 e8       	ldi	r18, 0x80	; 128
    4440:	31 e5       	ldi	r19, 0x51	; 81
    4442:	41 e0       	ldi	r20, 0x01	; 1
    4444:	50 e0       	ldi	r21, 0x00	; 0
    4446:	0e 94 f9 3b 	call	0x77f2	; 0x77f2 <__mulsi3>
    444a:	a6 0e       	add	r10, r22
    444c:	b7 1e       	adc	r11, r23
    444e:	c8 1e       	adc	r12, r24
    4450:	d9 1e       	adc	r13, r25
    4452:	ac c0       	rjmp	.+344    	; 0x45ac <_ZN10AlarmClass17updateNextTriggerEv+0x292>
        }
        else
        {
          nextTrigger = value + previousMidnight(time);  // set the date to today and add the time given in value   
    4454:	69 81       	ldd	r22, Y+1	; 0x01
    4456:	7a 81       	ldd	r23, Y+2	; 0x02
    4458:	8b 81       	ldd	r24, Y+3	; 0x03
    445a:	9c 81       	ldd	r25, Y+4	; 0x04
    445c:	20 e8       	ldi	r18, 0x80	; 128
    445e:	31 e5       	ldi	r19, 0x51	; 81
    4460:	41 e0       	ldi	r20, 0x01	; 1
    4462:	50 e0       	ldi	r21, 0x00	; 0
    4464:	0e 94 3f 3c 	call	0x787e	; 0x787e <__udivmodsi4>
    4468:	ca 01       	movw	r24, r20
    446a:	b9 01       	movw	r22, r18
    446c:	20 e8       	ldi	r18, 0x80	; 128
    446e:	31 e5       	ldi	r19, 0x51	; 81
    4470:	41 e0       	ldi	r20, 0x01	; 1
    4472:	50 e0       	ldi	r21, 0x00	; 0
    4474:	0e 94 f9 3b 	call	0x77f2	; 0x77f2 <__mulsi3>
    4478:	a6 0e       	add	r10, r22
    447a:	b7 1e       	adc	r11, r23
    447c:	c8 1e       	adc	r12, r24
    447e:	d9 1e       	adc	r13, r25
    4480:	ed 81       	ldd	r30, Y+5	; 0x05
    4482:	fe 81       	ldd	r31, Y+6	; 0x06
    4484:	a6 82       	std	Z+6, r10	; 0x06
    4486:	b7 82       	std	Z+7, r11	; 0x07
    4488:	c0 86       	std	Z+8, r12	; 0x08
    448a:	d1 86       	std	Z+9, r13	; 0x09
    448c:	a7 c0       	rjmp	.+334    	; 0x45dc <_ZN10AlarmClass17updateNextTriggerEv+0x2c2>
        }
      }
      else if(Mode.alarmType == dtWeeklyAlarm)  // if this is a weekly alarm
    448e:	24 30       	cpi	r18, 0x04	; 4
    4490:	09 f0       	breq	.+2      	; 0x4494 <_ZN10AlarmClass17updateNextTriggerEv+0x17a>
    4492:	a0 c0       	rjmp	.+320    	; 0x45d4 <_ZN10AlarmClass17updateNextTriggerEv+0x2ba>
      {
        if( (value + previousSunday(now())) <= time)
    4494:	ad 81       	ldd	r26, Y+5	; 0x05
    4496:	be 81       	ldd	r27, Y+6	; 0x06
    4498:	12 96       	adiw	r26, 0x02	; 2
    449a:	6d 90       	ld	r6, X+
    449c:	7d 90       	ld	r7, X+
    449e:	8d 90       	ld	r8, X+
    44a0:	9c 90       	ld	r9, X
    44a2:	15 97       	sbiw	r26, 0x05	; 5
    44a4:	0e 94 89 20 	call	0x4112	; 0x4112 <_Z3nowv>
    44a8:	7b 01       	movw	r14, r22
    44aa:	8c 01       	movw	r16, r24
    44ac:	0e 94 89 20 	call	0x4112	; 0x4112 <_Z3nowv>
    44b0:	5b 01       	movw	r10, r22
    44b2:	6c 01       	movw	r12, r24
    44b4:	0e 94 89 20 	call	0x4112	; 0x4112 <_Z3nowv>
    44b8:	1b 01       	movw	r2, r22
    44ba:	2c 01       	movw	r4, r24
    44bc:	e6 0c       	add	r14, r6
    44be:	f7 1c       	adc	r15, r7
    44c0:	08 1d       	adc	r16, r8
    44c2:	19 1d       	adc	r17, r9
    44c4:	c6 01       	movw	r24, r12
    44c6:	b5 01       	movw	r22, r10
    44c8:	20 e8       	ldi	r18, 0x80	; 128
    44ca:	31 e5       	ldi	r19, 0x51	; 81
    44cc:	41 e0       	ldi	r20, 0x01	; 1
    44ce:	50 e0       	ldi	r21, 0x00	; 0
    44d0:	0e 94 3f 3c 	call	0x787e	; 0x787e <__udivmodsi4>
    44d4:	e6 1a       	sub	r14, r22
    44d6:	f7 0a       	sbc	r15, r23
    44d8:	08 0b       	sbc	r16, r24
    44da:	19 0b       	sbc	r17, r25
    44dc:	c2 01       	movw	r24, r4
    44de:	b1 01       	movw	r22, r2
    44e0:	20 e8       	ldi	r18, 0x80	; 128
    44e2:	31 e5       	ldi	r19, 0x51	; 81
    44e4:	41 e0       	ldi	r20, 0x01	; 1
    44e6:	50 e0       	ldi	r21, 0x00	; 0
    44e8:	0e 94 3f 3c 	call	0x787e	; 0x787e <__udivmodsi4>
    44ec:	2c 5f       	subi	r18, 0xFC	; 252
    44ee:	3f 4f       	sbci	r19, 0xFF	; 255
    44f0:	4f 4f       	sbci	r20, 0xFF	; 255
    44f2:	5f 4f       	sbci	r21, 0xFF	; 255
    44f4:	ca 01       	movw	r24, r20
    44f6:	b9 01       	movw	r22, r18
    44f8:	27 e0       	ldi	r18, 0x07	; 7
    44fa:	30 e0       	ldi	r19, 0x00	; 0
    44fc:	40 e0       	ldi	r20, 0x00	; 0
    44fe:	50 e0       	ldi	r21, 0x00	; 0
    4500:	0e 94 3f 3c 	call	0x787e	; 0x787e <__udivmodsi4>
    4504:	20 e8       	ldi	r18, 0x80	; 128
    4506:	31 e5       	ldi	r19, 0x51	; 81
    4508:	41 e0       	ldi	r20, 0x01	; 1
    450a:	50 e0       	ldi	r21, 0x00	; 0
    450c:	0e 94 f9 3b 	call	0x77f2	; 0x77f2 <__mulsi3>
    4510:	e6 1a       	sub	r14, r22
    4512:	f7 0a       	sbc	r15, r23
    4514:	08 0b       	sbc	r16, r24
    4516:	19 0b       	sbc	r17, r25
    4518:	ed 81       	ldd	r30, Y+5	; 0x05
    451a:	fe 81       	ldd	r31, Y+6	; 0x06
    451c:	a2 80       	ldd	r10, Z+2	; 0x02
    451e:	b3 80       	ldd	r11, Z+3	; 0x03
    4520:	c4 80       	ldd	r12, Z+4	; 0x04
    4522:	d5 80       	ldd	r13, Z+5	; 0x05
    4524:	29 81       	ldd	r18, Y+1	; 0x01
    4526:	3a 81       	ldd	r19, Y+2	; 0x02
    4528:	4b 81       	ldd	r20, Y+3	; 0x03
    452a:	5c 81       	ldd	r21, Y+4	; 0x04
    452c:	2e 15       	cp	r18, r14
    452e:	3f 05       	cpc	r19, r15
    4530:	40 07       	cpc	r20, r16
    4532:	51 07       	cpc	r21, r17
    4534:	08 f4       	brcc	.+2      	; 0x4538 <_ZN10AlarmClass17updateNextTriggerEv+0x21e>
    4536:	43 c0       	rjmp	.+134    	; 0x45be <_ZN10AlarmClass17updateNextTriggerEv+0x2a4>
        {
          nextTrigger = value + nextSunday(time); // if day has passed then set for the next week.
    4538:	40 e8       	ldi	r20, 0x80	; 128
    453a:	5a e3       	ldi	r21, 0x3A	; 58
    453c:	69 e0       	ldi	r22, 0x09	; 9
    453e:	70 e0       	ldi	r23, 0x00	; 0
    4540:	a4 0e       	add	r10, r20
    4542:	b5 1e       	adc	r11, r21
    4544:	c6 1e       	adc	r12, r22
    4546:	d7 1e       	adc	r13, r23
    4548:	69 81       	ldd	r22, Y+1	; 0x01
    454a:	7a 81       	ldd	r23, Y+2	; 0x02
    454c:	8b 81       	ldd	r24, Y+3	; 0x03
    454e:	9c 81       	ldd	r25, Y+4	; 0x04
    4550:	a6 0e       	add	r10, r22
    4552:	b7 1e       	adc	r11, r23
    4554:	c8 1e       	adc	r12, r24
    4556:	d9 1e       	adc	r13, r25
    4558:	20 e8       	ldi	r18, 0x80	; 128
    455a:	31 e5       	ldi	r19, 0x51	; 81
    455c:	41 e0       	ldi	r20, 0x01	; 1
    455e:	50 e0       	ldi	r21, 0x00	; 0
    4560:	0e 94 3f 3c 	call	0x787e	; 0x787e <__udivmodsi4>
    4564:	a6 1a       	sub	r10, r22
    4566:	b7 0a       	sbc	r11, r23
    4568:	c8 0a       	sbc	r12, r24
    456a:	d9 0a       	sbc	r13, r25
    456c:	69 81       	ldd	r22, Y+1	; 0x01
    456e:	7a 81       	ldd	r23, Y+2	; 0x02
    4570:	8b 81       	ldd	r24, Y+3	; 0x03
    4572:	9c 81       	ldd	r25, Y+4	; 0x04
    4574:	20 e8       	ldi	r18, 0x80	; 128
    4576:	31 e5       	ldi	r19, 0x51	; 81
    4578:	41 e0       	ldi	r20, 0x01	; 1
    457a:	50 e0       	ldi	r21, 0x00	; 0
    457c:	0e 94 3f 3c 	call	0x787e	; 0x787e <__udivmodsi4>
    4580:	2c 5f       	subi	r18, 0xFC	; 252
    4582:	3f 4f       	sbci	r19, 0xFF	; 255
    4584:	4f 4f       	sbci	r20, 0xFF	; 255
    4586:	5f 4f       	sbci	r21, 0xFF	; 255
    4588:	ca 01       	movw	r24, r20
    458a:	b9 01       	movw	r22, r18
    458c:	27 e0       	ldi	r18, 0x07	; 7
    458e:	30 e0       	ldi	r19, 0x00	; 0
    4590:	40 e0       	ldi	r20, 0x00	; 0
    4592:	50 e0       	ldi	r21, 0x00	; 0
    4594:	0e 94 3f 3c 	call	0x787e	; 0x787e <__udivmodsi4>
    4598:	20 e8       	ldi	r18, 0x80	; 128
    459a:	31 e5       	ldi	r19, 0x51	; 81
    459c:	41 e0       	ldi	r20, 0x01	; 1
    459e:	50 e0       	ldi	r21, 0x00	; 0
    45a0:	0e 94 f9 3b 	call	0x77f2	; 0x77f2 <__mulsi3>
    45a4:	a6 1a       	sub	r10, r22
    45a6:	b7 0a       	sbc	r11, r23
    45a8:	c8 0a       	sbc	r12, r24
    45aa:	d9 0a       	sbc	r13, r25
    45ac:	ad 81       	ldd	r26, Y+5	; 0x05
    45ae:	be 81       	ldd	r27, Y+6	; 0x06
    45b0:	16 96       	adiw	r26, 0x06	; 6
    45b2:	ad 92       	st	X+, r10
    45b4:	bd 92       	st	X+, r11
    45b6:	cd 92       	st	X+, r12
    45b8:	dc 92       	st	X, r13
    45ba:	19 97       	sbiw	r26, 0x09	; 9
    45bc:	0f c0       	rjmp	.+30     	; 0x45dc <_ZN10AlarmClass17updateNextTriggerEv+0x2c2>
        }
        else
        {
          nextTrigger = value + previousSunday(time);  // set the date to this week today and add the time given in value 
    45be:	29 81       	ldd	r18, Y+1	; 0x01
    45c0:	3a 81       	ldd	r19, Y+2	; 0x02
    45c2:	4b 81       	ldd	r20, Y+3	; 0x03
    45c4:	5c 81       	ldd	r21, Y+4	; 0x04
    45c6:	a2 0e       	add	r10, r18
    45c8:	b3 1e       	adc	r11, r19
    45ca:	c4 1e       	adc	r12, r20
    45cc:	d5 1e       	adc	r13, r21
    45ce:	ca 01       	movw	r24, r20
    45d0:	b9 01       	movw	r22, r18
    45d2:	c2 cf       	rjmp	.-124    	; 0x4558 <_ZN10AlarmClass17updateNextTriggerEv+0x23e>
        } 
      }
      else  // its not a recognized alarm type - this should not happen 
      {
        Mode.isEnabled = 0;  // Disable the alarm
    45d4:	3f 7e       	andi	r19, 0xEF	; 239
    45d6:	ed 81       	ldd	r30, Y+5	; 0x05
    45d8:	fe 81       	ldd	r31, Y+6	; 0x06
    45da:	32 87       	std	Z+10, r19	; 0x0a
      }	  
    }
    if( Mode.alarmType == dtTimer)
    45dc:	ad 81       	ldd	r26, Y+5	; 0x05
    45de:	be 81       	ldd	r27, Y+6	; 0x06
    45e0:	1a 96       	adiw	r26, 0x0a	; 10
    45e2:	8c 91       	ld	r24, X
    45e4:	1a 97       	sbiw	r26, 0x0a	; 10
    45e6:	8f 70       	andi	r24, 0x0F	; 15
    45e8:	81 30       	cpi	r24, 0x01	; 1
    45ea:	e9 f4       	brne	.+58     	; 0x4626 <_ZN10AlarmClass17updateNextTriggerEv+0x30c>
    {
      // its a timer
      nextTrigger = time + value;  // add the value to previous time (this ensures delay always at least Value seconds)
    45ec:	12 96       	adiw	r26, 0x02	; 2
    45ee:	8d 91       	ld	r24, X+
    45f0:	9d 91       	ld	r25, X+
    45f2:	0d 90       	ld	r0, X+
    45f4:	bc 91       	ld	r27, X
    45f6:	a0 2d       	mov	r26, r0
    45f8:	29 81       	ldd	r18, Y+1	; 0x01
    45fa:	3a 81       	ldd	r19, Y+2	; 0x02
    45fc:	4b 81       	ldd	r20, Y+3	; 0x03
    45fe:	5c 81       	ldd	r21, Y+4	; 0x04
    4600:	82 0f       	add	r24, r18
    4602:	93 1f       	adc	r25, r19
    4604:	a4 1f       	adc	r26, r20
    4606:	b5 1f       	adc	r27, r21
    4608:	ed 81       	ldd	r30, Y+5	; 0x05
    460a:	fe 81       	ldd	r31, Y+6	; 0x06
    460c:	86 83       	std	Z+6, r24	; 0x06
    460e:	97 83       	std	Z+7, r25	; 0x07
    4610:	a0 87       	std	Z+8, r26	; 0x08
    4612:	b1 87       	std	Z+9, r27	; 0x09
    4614:	08 c0       	rjmp	.+16     	; 0x4626 <_ZN10AlarmClass17updateNextTriggerEv+0x30c>
    }
  }
  else
  {
    Mode.isEnabled = 0;  // Disable if the value is 0
    4616:	ad 81       	ldd	r26, Y+5	; 0x05
    4618:	be 81       	ldd	r27, Y+6	; 0x06
    461a:	1a 96       	adiw	r26, 0x0a	; 10
    461c:	8c 91       	ld	r24, X
    461e:	1a 97       	sbiw	r26, 0x0a	; 10
    4620:	8f 7e       	andi	r24, 0xEF	; 239
    4622:	1a 96       	adiw	r26, 0x0a	; 10
    4624:	8c 93       	st	X, r24
  }
}
    4626:	26 96       	adiw	r28, 0x06	; 6
    4628:	0f b6       	in	r0, 0x3f	; 63
    462a:	f8 94       	cli
    462c:	de bf       	out	0x3e, r29	; 62
    462e:	0f be       	out	0x3f, r0	; 63
    4630:	cd bf       	out	0x3d, r28	; 61
    4632:	cf 91       	pop	r28
    4634:	df 91       	pop	r29
    4636:	1f 91       	pop	r17
    4638:	0f 91       	pop	r16
    463a:	ff 90       	pop	r15
    463c:	ef 90       	pop	r14
    463e:	df 90       	pop	r13
    4640:	cf 90       	pop	r12
    4642:	bf 90       	pop	r11
    4644:	af 90       	pop	r10
    4646:	9f 90       	pop	r9
    4648:	8f 90       	pop	r8
    464a:	7f 90       	pop	r7
    464c:	6f 90       	pop	r6
    464e:	5f 90       	pop	r5
    4650:	4f 90       	pop	r4
    4652:	3f 90       	pop	r3
    4654:	2f 90       	pop	r2
    4656:	08 95       	ret

00004658 <_ZN15TimeAlarmsClass6enableEh>:
    
    AlarmID_t TimeAlarmsClass::timerRepeat(const int H,  const int M,  const int S, OnTick_t onTickHandler){ // trigger after the given number of seconds continuously
         return create( AlarmHMS(H,M,S), onTickHandler, IS_REPEAT, dtTimer);
    }
    
    void TimeAlarmsClass::enable(AlarmID_t ID)
    4658:	ac 01       	movw	r20, r24
     }
     
     // returns true if this id is allocated
     bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
     {
        return( ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated );
    465a:	66 30       	cpi	r22, 0x06	; 6
    465c:	98 f5       	brcc	.+102    	; 0x46c4 <_ZN15TimeAlarmsClass6enableEh+0x6c>
    465e:	70 e0       	ldi	r23, 0x00	; 0
    4660:	8b e0       	ldi	r24, 0x0B	; 11
    4662:	90 e0       	ldi	r25, 0x00	; 0
    4664:	68 9f       	mul	r22, r24
    4666:	f0 01       	movw	r30, r0
    4668:	69 9f       	mul	r22, r25
    466a:	f0 0d       	add	r31, r0
    466c:	78 9f       	mul	r23, r24
    466e:	f0 0d       	add	r31, r0
    4670:	11 24       	eor	r1, r1
    4672:	e4 0f       	add	r30, r20
    4674:	f5 1f       	adc	r31, r21
    4676:	82 85       	ldd	r24, Z+10	; 0x0a
    4678:	8f 70       	andi	r24, 0x0F	; 15
    467a:	21 f1       	breq	.+72     	; 0x46c4 <_ZN15TimeAlarmsClass6enableEh+0x6c>
    }
    
    void TimeAlarmsClass::enable(AlarmID_t ID)
    {
      if(isAllocated(ID)) {
        Alarm[ID].Mode.isEnabled = (Alarm[ID].value != 0) && (Alarm[ID].onTickHandler != 0) ;  // only enable if value is non zero and a tick handler has been set
    467c:	82 81       	ldd	r24, Z+2	; 0x02
    467e:	93 81       	ldd	r25, Z+3	; 0x03
    4680:	a4 81       	ldd	r26, Z+4	; 0x04
    4682:	b5 81       	ldd	r27, Z+5	; 0x05
    4684:	00 97       	sbiw	r24, 0x00	; 0
    4686:	a1 05       	cpc	r26, r1
    4688:	b1 05       	cpc	r27, r1
    468a:	11 f4       	brne	.+4      	; 0x4690 <_ZN15TimeAlarmsClass6enableEh+0x38>
    468c:	20 e0       	ldi	r18, 0x00	; 0
    468e:	06 c0       	rjmp	.+12     	; 0x469c <_ZN15TimeAlarmsClass6enableEh+0x44>
    4690:	20 e0       	ldi	r18, 0x00	; 0
    4692:	80 81       	ld	r24, Z
    4694:	91 81       	ldd	r25, Z+1	; 0x01
    4696:	89 2b       	or	r24, r25
    4698:	09 f0       	breq	.+2      	; 0x469c <_ZN15TimeAlarmsClass6enableEh+0x44>
    469a:	21 e0       	ldi	r18, 0x01	; 1
    469c:	8b e0       	ldi	r24, 0x0B	; 11
    469e:	90 e0       	ldi	r25, 0x00	; 0
    46a0:	68 9f       	mul	r22, r24
    46a2:	f0 01       	movw	r30, r0
    46a4:	69 9f       	mul	r22, r25
    46a6:	f0 0d       	add	r31, r0
    46a8:	78 9f       	mul	r23, r24
    46aa:	f0 0d       	add	r31, r0
    46ac:	11 24       	eor	r1, r1
    46ae:	e4 0f       	add	r30, r20
    46b0:	f5 1f       	adc	r31, r21
    46b2:	22 95       	swap	r18
    46b4:	20 7f       	andi	r18, 0xF0	; 240
    46b6:	82 85       	ldd	r24, Z+10	; 0x0a
    46b8:	8f 7e       	andi	r24, 0xEF	; 239
    46ba:	82 2b       	or	r24, r18
    46bc:	82 87       	std	Z+10, r24	; 0x0a
        Alarm[ID].updateNextTrigger(); // trigger is updated whenever  this is called, even if already enabled	 
    46be:	cf 01       	movw	r24, r30
    46c0:	0e 94 8d 21 	call	0x431a	; 0x431a <_ZN10AlarmClass17updateNextTriggerEv>
    46c4:	08 95       	ret

000046c6 <_ZN15TimeAlarmsClass13serviceAlarmsEv>:
    }
    
    //***********************************************************
    //* Private Methods
    
    void TimeAlarmsClass::serviceAlarms()
    46c6:	cf 92       	push	r12
    46c8:	df 92       	push	r13
    46ca:	ef 92       	push	r14
    46cc:	ff 92       	push	r15
    46ce:	0f 93       	push	r16
    46d0:	1f 93       	push	r17
    46d2:	cf 93       	push	r28
    46d4:	df 93       	push	r29
    46d6:	ec 01       	movw	r28, r24
    {
      if(! isServicing)
    46d8:	fc 01       	movw	r30, r24
    46da:	ee 5b       	subi	r30, 0xBE	; 190
    46dc:	ff 4f       	sbci	r31, 0xFF	; 255
    46de:	80 81       	ld	r24, Z
    46e0:	88 23       	and	r24, r24
    46e2:	09 f0       	breq	.+2      	; 0x46e6 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0x20>
    46e4:	5b c0       	rjmp	.+182    	; 0x479c <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xd6>
      {
        isServicing = true;
    46e6:	81 e0       	ldi	r24, 0x01	; 1
    46e8:	80 83       	st	Z, r24
        for( servicedAlarmId = 0; servicedAlarmId < dtNBR_ALARMS; servicedAlarmId++)
    46ea:	fe 01       	movw	r30, r28
    46ec:	ed 5b       	subi	r30, 0xBD	; 189
    46ee:	ff 4f       	sbci	r31, 0xFF	; 255
    46f0:	10 82       	st	Z, r1
    46f2:	8f 01       	movw	r16, r30
        {
          if( Alarm[servicedAlarmId].Mode.isEnabled && (now() >= Alarm[servicedAlarmId].nextTrigger)  )
    46f4:	9b e0       	ldi	r25, 0x0B	; 11
    46f6:	c9 2e       	mov	r12, r25
    46f8:	d1 2c       	mov	r13, r1
    46fa:	48 c0       	rjmp	.+144    	; 0x478c <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xc6>
    46fc:	90 e0       	ldi	r25, 0x00	; 0
    46fe:	8c 9d       	mul	r24, r12
    4700:	f0 01       	movw	r30, r0
    4702:	8d 9d       	mul	r24, r13
    4704:	f0 0d       	add	r31, r0
    4706:	9c 9d       	mul	r25, r12
    4708:	f0 0d       	add	r31, r0
    470a:	11 24       	eor	r1, r1
    470c:	ec 0f       	add	r30, r28
    470e:	fd 1f       	adc	r31, r29
    4710:	82 85       	ldd	r24, Z+10	; 0x0a
    4712:	84 ff       	sbrs	r24, 4
    4714:	37 c0       	rjmp	.+110    	; 0x4784 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xbe>
    4716:	0e 94 89 20 	call	0x4112	; 0x4112 <_Z3nowv>
    471a:	f8 01       	movw	r30, r16
    471c:	a0 81       	ld	r26, Z
    471e:	2a 2f       	mov	r18, r26
    4720:	30 e0       	ldi	r19, 0x00	; 0
    4722:	2c 9d       	mul	r18, r12
    4724:	f0 01       	movw	r30, r0
    4726:	2d 9d       	mul	r18, r13
    4728:	f0 0d       	add	r31, r0
    472a:	3c 9d       	mul	r19, r12
    472c:	f0 0d       	add	r31, r0
    472e:	11 24       	eor	r1, r1
    4730:	ec 0f       	add	r30, r28
    4732:	fd 1f       	adc	r31, r29
    4734:	26 81       	ldd	r18, Z+6	; 0x06
    4736:	37 81       	ldd	r19, Z+7	; 0x07
    4738:	40 85       	ldd	r20, Z+8	; 0x08
    473a:	51 85       	ldd	r21, Z+9	; 0x09
    473c:	62 17       	cp	r22, r18
    473e:	73 07       	cpc	r23, r19
    4740:	84 07       	cpc	r24, r20
    4742:	95 07       	cpc	r25, r21
    4744:	f8 f0       	brcs	.+62     	; 0x4784 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xbe>
          {
            OnTick_t TickHandler = Alarm[servicedAlarmId].onTickHandler;
    4746:	e0 80       	ld	r14, Z
    4748:	f1 80       	ldd	r15, Z+1	; 0x01
            if(Alarm[servicedAlarmId].Mode.isOneShot)
    474a:	92 85       	ldd	r25, Z+10	; 0x0a
    474c:	95 ff       	sbrs	r25, 5
    474e:	12 c0       	rjmp	.+36     	; 0x4774 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xae>
     }
     
     // returns true if this id is allocated
     bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
     {
        return( ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated );
    4750:	a6 30       	cpi	r26, 0x06	; 6
    4752:	98 f4       	brcc	.+38     	; 0x477a <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xb4>
    4754:	89 2f       	mov	r24, r25
    4756:	8f 70       	andi	r24, 0x0F	; 15
    4758:	81 f0       	breq	.+32     	; 0x477a <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xb4>
    void TimeAlarmsClass::free(AlarmID_t ID)
    {
      if(isAllocated(ID))
      {
        Alarm[ID].Mode.isEnabled = false;
    	Alarm[ID].Mode.alarmType = dtNotAllocated;
    475a:	90 7e       	andi	r25, 0xE0	; 224
    475c:	92 87       	std	Z+10, r25	; 0x0a
        Alarm[ID].onTickHandler = 0;
    475e:	11 82       	std	Z+1, r1	; 0x01
    4760:	10 82       	st	Z, r1
    	Alarm[ID].value = 0;
    4762:	12 82       	std	Z+2, r1	; 0x02
    4764:	13 82       	std	Z+3, r1	; 0x03
    4766:	14 82       	std	Z+4, r1	; 0x04
    4768:	15 82       	std	Z+5, r1	; 0x05
    	Alarm[ID].nextTrigger = 0;   	
    476a:	16 82       	std	Z+6, r1	; 0x06
    476c:	17 82       	std	Z+7, r1	; 0x07
    476e:	10 86       	std	Z+8, r1	; 0x08
    4770:	11 86       	std	Z+9, r1	; 0x09
    4772:	03 c0       	rjmp	.+6      	; 0x477a <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xb4>
          {
            OnTick_t TickHandler = Alarm[servicedAlarmId].onTickHandler;
            if(Alarm[servicedAlarmId].Mode.isOneShot)
               free(servicedAlarmId);  // free the ID if mode is OnShot		
            else   
               Alarm[servicedAlarmId].updateNextTrigger();
    4774:	cf 01       	movw	r24, r30
    4776:	0e 94 8d 21 	call	0x431a	; 0x431a <_ZN10AlarmClass17updateNextTriggerEv>
            if( TickHandler != NULL) {        
    477a:	e1 14       	cp	r14, r1
    477c:	f1 04       	cpc	r15, r1
    477e:	11 f0       	breq	.+4      	; 0x4784 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xbe>
              (*TickHandler)();     // call the handler  
    4780:	f7 01       	movw	r30, r14
    4782:	09 95       	icall
    void TimeAlarmsClass::serviceAlarms()
    {
      if(! isServicing)
      {
        isServicing = true;
        for( servicedAlarmId = 0; servicedAlarmId < dtNBR_ALARMS; servicedAlarmId++)
    4784:	f8 01       	movw	r30, r16
    4786:	80 81       	ld	r24, Z
    4788:	8f 5f       	subi	r24, 0xFF	; 255
    478a:	80 83       	st	Z, r24
    478c:	f8 01       	movw	r30, r16
    478e:	80 81       	ld	r24, Z
    4790:	86 30       	cpi	r24, 0x06	; 6
    4792:	08 f4       	brcc	.+2      	; 0x4796 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xd0>
    4794:	b3 cf       	rjmp	.-154    	; 0x46fc <_ZN15TimeAlarmsClass13serviceAlarmsEv+0x36>
            if( TickHandler != NULL) {        
              (*TickHandler)();     // call the handler  
            }
          }
        }
        isServicing = false;
    4796:	ce 5b       	subi	r28, 0xBE	; 190
    4798:	df 4f       	sbci	r29, 0xFF	; 255
    479a:	18 82       	st	Y, r1
      }
    }
    479c:	df 91       	pop	r29
    479e:	cf 91       	pop	r28
    47a0:	1f 91       	pop	r17
    47a2:	0f 91       	pop	r16
    47a4:	ff 90       	pop	r15
    47a6:	ef 90       	pop	r14
    47a8:	df 90       	pop	r13
    47aa:	cf 90       	pop	r12
    47ac:	08 95       	ret

000047ae <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th>:
    	}
        return nextTrigger == 0xffffffff ? 0 : nextTrigger;  	
     }
    
    // attempt to create an alarm and return true if successful
    AlarmID_t TimeAlarmsClass::create( time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType, uint8_t isEnabled) 
    47ae:	4f 92       	push	r4
    47b0:	5f 92       	push	r5
    47b2:	6f 92       	push	r6
    47b4:	7f 92       	push	r7
    47b6:	8f 92       	push	r8
    47b8:	9f 92       	push	r9
    47ba:	af 92       	push	r10
    47bc:	bf 92       	push	r11
    47be:	cf 92       	push	r12
    47c0:	ef 92       	push	r14
    47c2:	ff 92       	push	r15
    47c4:	0f 93       	push	r16
    47c6:	1f 93       	push	r17
    47c8:	cf 93       	push	r28
    47ca:	df 93       	push	r29
    47cc:	2c 01       	movw	r4, r24
    47ce:	4a 01       	movw	r8, r20
    47d0:	5b 01       	movw	r10, r22
    47d2:	39 01       	movw	r6, r18
    47d4:	e7 01       	movw	r28, r14
    {
      if( ! (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR)) // only create alarm ids if the time is at least Jan 1 1971
    47d6:	c7 01       	movw	r24, r14
    47d8:	02 97       	sbiw	r24, 0x02	; 2
    47da:	03 97       	sbiw	r24, 0x03	; 3
    47dc:	38 f4       	brcc	.+14     	; 0x47ec <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0x3e>
    47de:	0e 94 89 20 	call	0x4112	; 0x4112 <_Z3nowv>
    47e2:	60 50       	subi	r22, 0x00	; 0
    47e4:	72 4e       	sbci	r23, 0xE2	; 226
    47e6:	8f 4d       	sbci	r24, 0xDF	; 223
    47e8:	91 40       	sbci	r25, 0x01	; 1
    47ea:	c0 f1       	brcs	.+112    	; 0x485c <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xae>
    47ec:	60 e0       	ldi	r22, 0x00	; 0
    47ee:	70 e0       	ldi	r23, 0x00	; 0
      {  
    	for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
        {
          if( Alarm[id].Mode.alarmType == dtNotAllocated )
    47f0:	2b e0       	ldi	r18, 0x0B	; 11
    47f2:	30 e0       	ldi	r19, 0x00	; 0
     }
    
    // attempt to create an alarm and return true if successful
    AlarmID_t TimeAlarmsClass::create( time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType, uint8_t isEnabled) 
    {
      if( ! (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR)) // only create alarm ids if the time is at least Jan 1 1971
    47f4:	16 2f       	mov	r17, r22
      {  
    	for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
        {
          if( Alarm[id].Mode.alarmType == dtNotAllocated )
    47f6:	62 9f       	mul	r22, r18
    47f8:	f0 01       	movw	r30, r0
    47fa:	63 9f       	mul	r22, r19
    47fc:	f0 0d       	add	r31, r0
    47fe:	72 9f       	mul	r23, r18
    4800:	f0 0d       	add	r31, r0
    4802:	11 24       	eor	r1, r1
    4804:	e4 0d       	add	r30, r4
    4806:	f5 1d       	adc	r31, r5
    4808:	df 01       	movw	r26, r30
    480a:	1a 96       	adiw	r26, 0x0a	; 10
    480c:	82 85       	ldd	r24, Z+10	; 0x0a
    480e:	8f 70       	andi	r24, 0x0F	; 15
    4810:	01 f5       	brne	.+64     	; 0x4852 <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xa4>
    	  {
    	  // here if there is an Alarm id that is not allocated
      	    Alarm[id].onTickHandler = onTickHandler;
    4812:	71 82       	std	Z+1, r7	; 0x01
    4814:	60 82       	st	Z, r6
    	    Alarm[id].Mode.isOneShot = isOneShot;
    4816:	01 70       	andi	r16, 0x01	; 1
    4818:	02 95       	swap	r16
    481a:	00 0f       	add	r16, r16
    481c:	00 7e       	andi	r16, 0xE0	; 224
    481e:	8c 91       	ld	r24, X
    4820:	80 7d       	andi	r24, 0xD0	; 208
    	    Alarm[id].Mode.alarmType = alarmType;
    4822:	9e 01       	movw	r18, r28
    4824:	2f 70       	andi	r18, 0x0F	; 15
    4826:	80 2b       	or	r24, r16
    4828:	82 2b       	or	r24, r18
    482a:	8c 93       	st	X, r24
    	    Alarm[id].value = value;
    482c:	82 82       	std	Z+2, r8	; 0x02
    482e:	93 82       	std	Z+3, r9	; 0x03
    4830:	a4 82       	std	Z+4, r10	; 0x04
    4832:	b5 82       	std	Z+5, r11	; 0x05
    	    isEnabled ?  enable(id) : disable(id);   
    4834:	cc 20       	and	r12, r12
    4836:	21 f0       	breq	.+8      	; 0x4840 <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0x92>
    4838:	c2 01       	movw	r24, r4
    483a:	0e 94 2c 23 	call	0x4658	; 0x4658 <_ZN15TimeAlarmsClass6enableEh>
    483e:	0f c0       	rjmp	.+30     	; 0x485e <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xb0>
     }
     
     // returns true if this id is allocated
     bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
     {
        return( ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated );
    4840:	66 30       	cpi	r22, 0x06	; 6
    4842:	68 f4       	brcc	.+26     	; 0x485e <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xb0>
    4844:	9c 91       	ld	r25, X
    4846:	89 2f       	mov	r24, r25
    4848:	8f 70       	andi	r24, 0x0F	; 15
    484a:	49 f0       	breq	.+18     	; 0x485e <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xb0>
    }
    
    void TimeAlarmsClass::disable(AlarmID_t ID)
    {
      if(isAllocated(ID))
        Alarm[ID].Mode.isEnabled = false;
    484c:	9f 7e       	andi	r25, 0xEF	; 239
    484e:	9c 93       	st	X, r25
    4850:	06 c0       	rjmp	.+12     	; 0x485e <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xb0>
    4852:	6f 5f       	subi	r22, 0xFF	; 255
    4854:	7f 4f       	sbci	r23, 0xFF	; 255
    // attempt to create an alarm and return true if successful
    AlarmID_t TimeAlarmsClass::create( time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType, uint8_t isEnabled) 
    {
      if( ! (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR)) // only create alarm ids if the time is at least Jan 1 1971
      {  
    	for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
    4856:	66 30       	cpi	r22, 0x06	; 6
    4858:	71 05       	cpc	r23, r1
    485a:	61 f6       	brne	.-104    	; 0x47f4 <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0x46>
    485c:	1f ef       	ldi	r17, 0xFF	; 255
            return id;  // alarm created ok
    	  }  
        }
      }
      return dtINVALID_ALARM_ID; // no IDs available or time is invalid
    }
    485e:	81 2f       	mov	r24, r17
    4860:	df 91       	pop	r29
    4862:	cf 91       	pop	r28
    4864:	1f 91       	pop	r17
    4866:	0f 91       	pop	r16
    4868:	ff 90       	pop	r15
    486a:	ef 90       	pop	r14
    486c:	cf 90       	pop	r12
    486e:	bf 90       	pop	r11
    4870:	af 90       	pop	r10
    4872:	9f 90       	pop	r9
    4874:	8f 90       	pop	r8
    4876:	7f 90       	pop	r7
    4878:	6f 90       	pop	r6
    487a:	5f 90       	pop	r5
    487c:	4f 90       	pop	r4
    487e:	08 95       	ret

00004880 <_ZN15TimeAlarmsClass11timerRepeatEmPFvvE>:
    
    AlarmID_t TimeAlarmsClass::timerOnce(const int H,  const int M,  const int S, OnTick_t onTickHandler){   // As above with HMS arguments
      return create( AlarmHMS(H,M,S), onTickHandler, IS_ONESHOT, dtTimer );
    }
      
    AlarmID_t TimeAlarmsClass::timerRepeat(time_t value, OnTick_t onTickHandler){ // trigger after the given number of seconds continuously
    4880:	cf 92       	push	r12
    4882:	ef 92       	push	r14
    4884:	ff 92       	push	r15
    4886:	0f 93       	push	r16
         return create( value, onTickHandler, IS_REPEAT, dtTimer);
    4888:	00 e0       	ldi	r16, 0x00	; 0
    488a:	f1 e0       	ldi	r31, 0x01	; 1
    488c:	ef 2e       	mov	r14, r31
    488e:	f1 2c       	mov	r15, r1
    4890:	cc 24       	eor	r12, r12
    4892:	c3 94       	inc	r12
    4894:	0e 94 d7 23 	call	0x47ae	; 0x47ae <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th>
    }
    4898:	0f 91       	pop	r16
    489a:	ff 90       	pop	r15
    489c:	ef 90       	pop	r14
    489e:	cf 90       	pop	r12
    48a0:	08 95       	ret

000048a2 <_ZN15TimeAlarmsClass11alarmRepeatEiiiPFvvE>:
       return create( value, onTickHandler, IS_REPEAT, dtDailyAlarm );
    else
       return dtINVALID_ALARM_ID; // dont't allocate if the time is greater than one day 	  
    }
    
    AlarmID_t TimeAlarmsClass::alarmRepeat(const int H,  const int M,  const int S, OnTick_t onTickHandler){ // as above with HMS arguments
    48a2:	2f 92       	push	r2
    48a4:	3f 92       	push	r3
    48a6:	4f 92       	push	r4
    48a8:	5f 92       	push	r5
    48aa:	6f 92       	push	r6
    48ac:	7f 92       	push	r7
    48ae:	8f 92       	push	r8
    48b0:	9f 92       	push	r9
    48b2:	af 92       	push	r10
    48b4:	bf 92       	push	r11
    48b6:	cf 92       	push	r12
    48b8:	df 92       	push	r13
    48ba:	ef 92       	push	r14
    48bc:	ff 92       	push	r15
    48be:	0f 93       	push	r16
    48c0:	1f 93       	push	r17
    48c2:	1c 01       	movw	r2, r24
    48c4:	2b 01       	movw	r4, r22
    48c6:	49 01       	movw	r8, r18
         return create( AlarmHMS(H,M,S), onTickHandler, IS_REPEAT, dtDailyAlarm );
    48c8:	66 27       	eor	r22, r22
    48ca:	57 fd       	sbrc	r21, 7
    48cc:	60 95       	com	r22
    48ce:	76 2f       	mov	r23, r22
    48d0:	cb 01       	movw	r24, r22
    48d2:	ba 01       	movw	r22, r20
    48d4:	2c e3       	ldi	r18, 0x3C	; 60
    48d6:	30 e0       	ldi	r19, 0x00	; 0
    48d8:	40 e0       	ldi	r20, 0x00	; 0
    48da:	50 e0       	ldi	r21, 0x00	; 0
    48dc:	0e 94 f9 3b 	call	0x77f2	; 0x77f2 <__mulsi3>
    48e0:	6b 01       	movw	r12, r22
    48e2:	7c 01       	movw	r14, r24
    48e4:	aa 24       	eor	r10, r10
    48e6:	97 fc       	sbrc	r9, 7
    48e8:	a0 94       	com	r10
    48ea:	ba 2c       	mov	r11, r10
    48ec:	c8 0c       	add	r12, r8
    48ee:	d9 1c       	adc	r13, r9
    48f0:	ea 1c       	adc	r14, r10
    48f2:	fb 1c       	adc	r15, r11
    48f4:	66 24       	eor	r6, r6
    48f6:	57 fc       	sbrc	r5, 7
    48f8:	60 94       	com	r6
    48fa:	76 2c       	mov	r7, r6
    48fc:	c3 01       	movw	r24, r6
    48fe:	b2 01       	movw	r22, r4
    4900:	20 e1       	ldi	r18, 0x10	; 16
    4902:	3e e0       	ldi	r19, 0x0E	; 14
    4904:	40 e0       	ldi	r20, 0x00	; 0
    4906:	50 e0       	ldi	r21, 0x00	; 0
    4908:	0e 94 f9 3b 	call	0x77f2	; 0x77f2 <__mulsi3>
    490c:	c6 0e       	add	r12, r22
    490e:	d7 1e       	adc	r13, r23
    4910:	e8 1e       	adc	r14, r24
    4912:	f9 1e       	adc	r15, r25
    4914:	c1 01       	movw	r24, r2
    4916:	b7 01       	movw	r22, r14
    4918:	a6 01       	movw	r20, r12
    491a:	98 01       	movw	r18, r16
    491c:	00 e0       	ldi	r16, 0x00	; 0
    491e:	e3 e0       	ldi	r30, 0x03	; 3
    4920:	ee 2e       	mov	r14, r30
    4922:	f1 2c       	mov	r15, r1
    4924:	cc 24       	eor	r12, r12
    4926:	c3 94       	inc	r12
    4928:	0e 94 d7 23 	call	0x47ae	; 0x47ae <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th>
    }
    492c:	1f 91       	pop	r17
    492e:	0f 91       	pop	r16
    4930:	ff 90       	pop	r15
    4932:	ef 90       	pop	r14
    4934:	df 90       	pop	r13
    4936:	cf 90       	pop	r12
    4938:	bf 90       	pop	r11
    493a:	af 90       	pop	r10
    493c:	9f 90       	pop	r9
    493e:	8f 90       	pop	r8
    4940:	7f 90       	pop	r7
    4942:	6f 90       	pop	r6
    4944:	5f 90       	pop	r5
    4946:	4f 90       	pop	r4
    4948:	3f 90       	pop	r3
    494a:	2f 90       	pop	r2
    494c:	08 95       	ret

0000494e <_ZN15TimeAlarmsClass5delayEm>:
      else
         return dtINVALID_ALARM_ID; // valid ids only available when servicing a callback
    }
     
    // following functions are not Alarm ID specific.
    void TimeAlarmsClass::delay(unsigned long ms)
    494e:	af 92       	push	r10
    4950:	bf 92       	push	r11
    4952:	cf 92       	push	r12
    4954:	df 92       	push	r13
    4956:	ef 92       	push	r14
    4958:	ff 92       	push	r15
    495a:	0f 93       	push	r16
    495c:	1f 93       	push	r17
    495e:	cf 93       	push	r28
    4960:	df 93       	push	r29
    4962:	ec 01       	movw	r28, r24
    4964:	5a 01       	movw	r10, r20
    4966:	6b 01       	movw	r12, r22
    {
      unsigned long start = millis();
    4968:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <millis>
    496c:	7b 01       	movw	r14, r22
    496e:	8c 01       	movw	r16, r24
    4970:	03 c0       	rjmp	.+6      	; 0x4978 <_ZN15TimeAlarmsClass5delayEm+0x2a>
      while( millis() - start  <= ms)
        serviceAlarms();
    4972:	ce 01       	movw	r24, r28
    4974:	0e 94 63 23 	call	0x46c6	; 0x46c6 <_ZN15TimeAlarmsClass13serviceAlarmsEv>
     
    // following functions are not Alarm ID specific.
    void TimeAlarmsClass::delay(unsigned long ms)
    {
      unsigned long start = millis();
      while( millis() - start  <= ms)
    4978:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <millis>
    497c:	6e 19       	sub	r22, r14
    497e:	7f 09       	sbc	r23, r15
    4980:	80 0b       	sbc	r24, r16
    4982:	91 0b       	sbc	r25, r17
    4984:	a6 16       	cp	r10, r22
    4986:	b7 06       	cpc	r11, r23
    4988:	c8 06       	cpc	r12, r24
    498a:	d9 06       	cpc	r13, r25
    498c:	90 f7       	brcc	.-28     	; 0x4972 <_ZN15TimeAlarmsClass5delayEm+0x24>
        serviceAlarms();
    }
    498e:	df 91       	pop	r29
    4990:	cf 91       	pop	r28
    4992:	1f 91       	pop	r17
    4994:	0f 91       	pop	r16
    4996:	ff 90       	pop	r15
    4998:	ef 90       	pop	r14
    499a:	df 90       	pop	r13
    499c:	cf 90       	pop	r12
    499e:	bf 90       	pop	r11
    49a0:	af 90       	pop	r10
    49a2:	08 95       	ret

000049a4 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    49a4:	81 e0       	ldi	r24, 0x01	; 1
    49a6:	80 93 9e 02 	sts	0x029E, r24
  // set address of targeted slave
  txAddress = address;
    49aa:	60 93 7b 02 	sts	0x027B, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    49ae:	10 92 9c 02 	sts	0x029C, r1
  txBufferLength = 0;
    49b2:	10 92 9d 02 	sts	0x029D, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
    49b6:	08 95       	ret

000049b8 <_ZN7TwoWire9availableEv>:
}

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
    49b8:	20 91 7a 02 	lds	r18, 0x027A
    49bc:	30 e0       	ldi	r19, 0x00	; 0
    49be:	80 91 79 02 	lds	r24, 0x0279
    49c2:	28 1b       	sub	r18, r24
    49c4:	31 09       	sbc	r19, r1
{
  return rxBufferLength - rxBufferIndex;
}
    49c6:	c9 01       	movw	r24, r18
    49c8:	08 95       	ret

000049ca <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    49ca:	40 91 79 02 	lds	r20, 0x0279
    49ce:	80 91 7a 02 	lds	r24, 0x027A
    49d2:	48 17       	cp	r20, r24
    49d4:	18 f0       	brcs	.+6      	; 0x49dc <_ZN7TwoWire4readEv+0x12>
    49d6:	2f ef       	ldi	r18, 0xFF	; 255
    49d8:	3f ef       	ldi	r19, 0xFF	; 255
    49da:	0a c0       	rjmp	.+20     	; 0x49f0 <_ZN7TwoWire4readEv+0x26>
    value = rxBuffer[rxBufferIndex];
    49dc:	e4 2f       	mov	r30, r20
    49de:	f0 e0       	ldi	r31, 0x00	; 0
    49e0:	e7 5a       	subi	r30, 0xA7	; 167
    49e2:	fd 4f       	sbci	r31, 0xFD	; 253
    49e4:	80 81       	ld	r24, Z
    49e6:	28 2f       	mov	r18, r24
    49e8:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    49ea:	4f 5f       	subi	r20, 0xFF	; 255
    49ec:	40 93 79 02 	sts	0x0279, r20
  }

  return value;
}
    49f0:	c9 01       	movw	r24, r18
    49f2:	08 95       	ret

000049f4 <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    49f4:	e0 91 79 02 	lds	r30, 0x0279
    49f8:	80 91 7a 02 	lds	r24, 0x027A
    49fc:	e8 17       	cp	r30, r24
    49fe:	18 f0       	brcs	.+6      	; 0x4a06 <_ZN7TwoWire4peekEv+0x12>
    4a00:	ef ef       	ldi	r30, 0xFF	; 255
    4a02:	ff ef       	ldi	r31, 0xFF	; 255
    4a04:	06 c0       	rjmp	.+12     	; 0x4a12 <_ZN7TwoWire4peekEv+0x1e>
    value = rxBuffer[rxBufferIndex];
    4a06:	f0 e0       	ldi	r31, 0x00	; 0
    4a08:	e7 5a       	subi	r30, 0xA7	; 167
    4a0a:	fd 4f       	sbci	r31, 0xFD	; 253
    4a0c:	80 81       	ld	r24, Z
    4a0e:	e8 2f       	mov	r30, r24
    4a10:	f0 e0       	ldi	r31, 0x00	; 0
  }

  return value;
}
    4a12:	cf 01       	movw	r24, r30
    4a14:	08 95       	ret

00004a16 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    4a16:	08 95       	ret

00004a18 <_GLOBAL__I__ZN7TwoWire8rxBufferE>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    4a18:	10 92 a2 02 	sts	0x02A2, r1
    4a1c:	10 92 a1 02 	sts	0x02A1, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    4a20:	88 ee       	ldi	r24, 0xE8	; 232
    4a22:	93 e0       	ldi	r25, 0x03	; 3
    4a24:	a0 e0       	ldi	r26, 0x00	; 0
    4a26:	b0 e0       	ldi	r27, 0x00	; 0
    4a28:	80 93 a3 02 	sts	0x02A3, r24
    4a2c:	90 93 a4 02 	sts	0x02A4, r25
    4a30:	a0 93 a5 02 	sts	0x02A5, r26
    4a34:	b0 93 a6 02 	sts	0x02A6, r27
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    4a38:	8f e1       	ldi	r24, 0x1F	; 31
    4a3a:	91 e0       	ldi	r25, 0x01	; 1
    4a3c:	90 93 a0 02 	sts	0x02A0, r25
    4a40:	80 93 9f 02 	sts	0x029F, r24
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    4a44:	08 95       	ret

00004a46 <_ZN7TwoWire5writeEPKhj>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
    4a46:	cf 92       	push	r12
    4a48:	df 92       	push	r13
    4a4a:	ef 92       	push	r14
    4a4c:	ff 92       	push	r15
    4a4e:	0f 93       	push	r16
    4a50:	1f 93       	push	r17
    4a52:	cf 93       	push	r28
    4a54:	df 93       	push	r29
    4a56:	7c 01       	movw	r14, r24
    4a58:	6b 01       	movw	r12, r22
    4a5a:	8a 01       	movw	r16, r20
{
  if(transmitting){
    4a5c:	80 91 9e 02 	lds	r24, 0x029E
    4a60:	88 23       	and	r24, r24
    4a62:	a1 f0       	breq	.+40     	; 0x4a8c <_ZN7TwoWire5writeEPKhj+0x46>
    4a64:	c0 e0       	ldi	r28, 0x00	; 0
    4a66:	d0 e0       	ldi	r29, 0x00	; 0
    4a68:	0d c0       	rjmp	.+26     	; 0x4a84 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
      write(data[i]);
    4a6a:	d7 01       	movw	r26, r14
    4a6c:	ed 91       	ld	r30, X+
    4a6e:	fc 91       	ld	r31, X
    4a70:	d6 01       	movw	r26, r12
    4a72:	ac 0f       	add	r26, r28
    4a74:	bd 1f       	adc	r27, r29
    4a76:	01 90       	ld	r0, Z+
    4a78:	f0 81       	ld	r31, Z
    4a7a:	e0 2d       	mov	r30, r0
    4a7c:	c7 01       	movw	r24, r14
    4a7e:	6c 91       	ld	r22, X
    4a80:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    4a82:	21 96       	adiw	r28, 0x01	; 1
    4a84:	c0 17       	cp	r28, r16
    4a86:	d1 07       	cpc	r29, r17
    4a88:	80 f3       	brcs	.-32     	; 0x4a6a <_ZN7TwoWire5writeEPKhj+0x24>
    4a8a:	04 c0       	rjmp	.+8      	; 0x4a94 <_ZN7TwoWire5writeEPKhj+0x4e>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    4a8c:	cb 01       	movw	r24, r22
    4a8e:	64 2f       	mov	r22, r20
    4a90:	0e 94 55 26 	call	0x4caa	; 0x4caa <twi_transmit>
  }
  return quantity;
}
    4a94:	c8 01       	movw	r24, r16
    4a96:	df 91       	pop	r29
    4a98:	cf 91       	pop	r28
    4a9a:	1f 91       	pop	r17
    4a9c:	0f 91       	pop	r16
    4a9e:	ff 90       	pop	r15
    4aa0:	ef 90       	pop	r14
    4aa2:	df 90       	pop	r13
    4aa4:	cf 90       	pop	r12
    4aa6:	08 95       	ret

00004aa8 <_ZN7TwoWire5writeEh>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
    4aa8:	df 93       	push	r29
    4aaa:	cf 93       	push	r28
    4aac:	0f 92       	push	r0
    4aae:	cd b7       	in	r28, 0x3d	; 61
    4ab0:	de b7       	in	r29, 0x3e	; 62
    4ab2:	fc 01       	movw	r30, r24
    4ab4:	69 83       	std	Y+1, r22	; 0x01
{
  if(transmitting){
    4ab6:	80 91 9e 02 	lds	r24, 0x029E
    4aba:	88 23       	and	r24, r24
    4abc:	c9 f0       	breq	.+50     	; 0x4af0 <_ZN7TwoWire5writeEh+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    4abe:	80 91 9d 02 	lds	r24, 0x029D
    4ac2:	80 32       	cpi	r24, 0x20	; 32
    4ac4:	38 f0       	brcs	.+14     	; 0x4ad4 <_ZN7TwoWire5writeEh+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    4ac6:	81 e0       	ldi	r24, 0x01	; 1
    4ac8:	90 e0       	ldi	r25, 0x00	; 0
    4aca:	93 83       	std	Z+3, r25	; 0x03
    4acc:	82 83       	std	Z+2, r24	; 0x02
    4ace:	20 e0       	ldi	r18, 0x00	; 0
    4ad0:	30 e0       	ldi	r19, 0x00	; 0
    4ad2:	15 c0       	rjmp	.+42     	; 0x4afe <_ZN7TwoWire5writeEh+0x56>
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    4ad4:	80 91 9c 02 	lds	r24, 0x029C
    4ad8:	e8 2f       	mov	r30, r24
    4ada:	f0 e0       	ldi	r31, 0x00	; 0
    4adc:	e4 58       	subi	r30, 0x84	; 132
    4ade:	fd 4f       	sbci	r31, 0xFD	; 253
    4ae0:	99 81       	ldd	r25, Y+1	; 0x01
    4ae2:	90 83       	st	Z, r25
    ++txBufferIndex;
    4ae4:	8f 5f       	subi	r24, 0xFF	; 255
    4ae6:	80 93 9c 02 	sts	0x029C, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    4aea:	80 93 9d 02 	sts	0x029D, r24
    4aee:	05 c0       	rjmp	.+10     	; 0x4afa <_ZN7TwoWire5writeEh+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    4af0:	ce 01       	movw	r24, r28
    4af2:	01 96       	adiw	r24, 0x01	; 1
    4af4:	61 e0       	ldi	r22, 0x01	; 1
    4af6:	0e 94 55 26 	call	0x4caa	; 0x4caa <twi_transmit>
    4afa:	21 e0       	ldi	r18, 0x01	; 1
    4afc:	30 e0       	ldi	r19, 0x00	; 0
  }
  return 1;
}
    4afe:	c9 01       	movw	r24, r18
    4b00:	0f 90       	pop	r0
    4b02:	cf 91       	pop	r28
    4b04:	df 91       	pop	r29
    4b06:	08 95       	ret

00004b08 <_ZN7TwoWire15endTransmissionEh>:
//	the bus tenure has been properly ended with a STOP. It
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
    4b08:	0f 93       	push	r16
    4b0a:	06 2f       	mov	r16, r22
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    4b0c:	80 91 7b 02 	lds	r24, 0x027B
    4b10:	6c e7       	ldi	r22, 0x7C	; 124
    4b12:	72 e0       	ldi	r23, 0x02	; 2
    4b14:	40 91 9d 02 	lds	r20, 0x029D
    4b18:	21 e0       	ldi	r18, 0x01	; 1
    4b1a:	0e 94 00 26 	call	0x4c00	; 0x4c00 <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    4b1e:	10 92 9c 02 	sts	0x029C, r1
  txBufferLength = 0;
    4b22:	10 92 9d 02 	sts	0x029D, r1
  // indicate that we are done transmitting
  transmitting = 0;
    4b26:	10 92 9e 02 	sts	0x029E, r1
  return ret;
}
    4b2a:	0f 91       	pop	r16
    4b2c:	08 95       	ret

00004b2e <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    4b2e:	61 e0       	ldi	r22, 0x01	; 1
    4b30:	0e 94 84 25 	call	0x4b08	; 0x4b08 <_ZN7TwoWire15endTransmissionEh>
}
    4b34:	08 95       	ret

00004b36 <_ZN7TwoWire11requestFromEhhh>:
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    4b36:	41 32       	cpi	r20, 0x21	; 33
    4b38:	08 f0       	brcs	.+2      	; 0x4b3c <_ZN7TwoWire11requestFromEhhh+0x6>
    4b3a:	40 e2       	ldi	r20, 0x20	; 32
    4b3c:	86 2f       	mov	r24, r22
    4b3e:	69 e5       	ldi	r22, 0x59	; 89
    4b40:	72 e0       	ldi	r23, 0x02	; 2
    4b42:	0e 94 b7 25 	call	0x4b6e	; 0x4b6e <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    4b46:	10 92 79 02 	sts	0x0279, r1
  rxBufferLength = read;
    4b4a:	80 93 7a 02 	sts	0x027A, r24

  return read;
}
    4b4e:	08 95       	ret

00004b50 <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    4b50:	21 e0       	ldi	r18, 0x01	; 1
    4b52:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <_ZN7TwoWire11requestFromEhhh>
}
    4b56:	08 95       	ret

00004b58 <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    4b58:	10 92 79 02 	sts	0x0279, r1
  rxBufferLength = 0;
    4b5c:	10 92 7a 02 	sts	0x027A, r1

  txBufferIndex = 0;
    4b60:	10 92 9c 02 	sts	0x029C, r1
  txBufferLength = 0;
    4b64:	10 92 9d 02 	sts	0x029D, r1

  twi_init();
    4b68:	0e 94 01 28 	call	0x5002	; 0x5002 <twi_init>
}
    4b6c:	08 95       	ret

00004b6e <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    4b6e:	38 2f       	mov	r19, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    4b70:	41 32       	cpi	r20, 0x21	; 33
    4b72:	10 f0       	brcs	.+4      	; 0x4b78 <twi_readFrom+0xa>
    4b74:	40 e0       	ldi	r20, 0x00	; 0
    4b76:	42 c0       	rjmp	.+132    	; 0x4bfc <twi_readFrom+0x8e>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    4b78:	80 91 ab 02 	lds	r24, 0x02AB
    4b7c:	88 23       	and	r24, r24
    4b7e:	e1 f7       	brne	.-8      	; 0x4b78 <twi_readFrom+0xa>
    continue;
  }
  twi_state = TWI_MRX;
    4b80:	91 e0       	ldi	r25, 0x01	; 1
    4b82:	90 93 ab 02 	sts	0x02AB, r25
  twi_sendStop = sendStop;
    4b86:	20 93 ad 02 	sts	0x02AD, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    4b8a:	8f ef       	ldi	r24, 0xFF	; 255
    4b8c:	80 93 18 03 	sts	0x0318, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    4b90:	10 92 d3 02 	sts	0x02D3, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    4b94:	41 50       	subi	r20, 0x01	; 1
    4b96:	40 93 d4 02 	sts	0x02D4, r20
    4b9a:	4f 5f       	subi	r20, 0xFF	; 255
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    4b9c:	90 93 ac 02 	sts	0x02AC, r25
  twi_slarw |= address << 1;
    4ba0:	80 91 ac 02 	lds	r24, 0x02AC
    4ba4:	33 0f       	add	r19, r19
    4ba6:	83 2b       	or	r24, r19
    4ba8:	80 93 ac 02 	sts	0x02AC, r24

  if (true == twi_inRepStart) {
    4bac:	80 91 ae 02 	lds	r24, 0x02AE
    4bb0:	81 30       	cpi	r24, 0x01	; 1
    4bb2:	41 f4       	brne	.+16     	; 0x4bc4 <twi_readFrom+0x56>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    4bb4:	10 92 ae 02 	sts	0x02AE, r1
    TWDR = twi_slarw;
    4bb8:	80 91 ac 02 	lds	r24, 0x02AC
    4bbc:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    4bc0:	85 ec       	ldi	r24, 0xC5	; 197
    4bc2:	01 c0       	rjmp	.+2      	; 0x4bc6 <twi_readFrom+0x58>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    4bc4:	85 ee       	ldi	r24, 0xE5	; 229
    4bc6:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    4bca:	80 91 ab 02 	lds	r24, 0x02AB
    4bce:	81 30       	cpi	r24, 0x01	; 1
    4bd0:	e1 f3       	breq	.-8      	; 0x4bca <twi_readFrom+0x5c>
    continue;
  }

  if (twi_masterBufferIndex < length)
    4bd2:	80 91 d3 02 	lds	r24, 0x02D3
    4bd6:	84 17       	cp	r24, r20
    4bd8:	10 f4       	brcc	.+4      	; 0x4bde <twi_readFrom+0x70>
    length = twi_masterBufferIndex;
    4bda:	40 91 d3 02 	lds	r20, 0x02D3
    4bde:	20 e0       	ldi	r18, 0x00	; 0
    4be0:	30 e0       	ldi	r19, 0x00	; 0
    4be2:	0a c0       	rjmp	.+20     	; 0x4bf8 <twi_readFrom+0x8a>

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    4be4:	fb 01       	movw	r30, r22
    4be6:	e2 0f       	add	r30, r18
    4be8:	f3 1f       	adc	r31, r19
    4bea:	d9 01       	movw	r26, r18
    4bec:	ad 54       	subi	r26, 0x4D	; 77
    4bee:	bd 4f       	sbci	r27, 0xFD	; 253
    4bf0:	8c 91       	ld	r24, X
    4bf2:	80 83       	st	Z, r24
    4bf4:	2f 5f       	subi	r18, 0xFF	; 255
    4bf6:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    4bf8:	24 17       	cp	r18, r20
    4bfa:	a0 f3       	brcs	.-24     	; 0x4be4 <twi_readFrom+0x76>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    4bfc:	84 2f       	mov	r24, r20
    4bfe:	08 95       	ret

00004c00 <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    4c00:	0f 93       	push	r16
    4c02:	1f 93       	push	r17
    4c04:	58 2f       	mov	r21, r24
    4c06:	12 2f       	mov	r17, r18
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    4c08:	41 32       	cpi	r20, 0x21	; 33
    4c0a:	10 f0       	brcs	.+4      	; 0x4c10 <twi_writeTo+0x10>
    4c0c:	81 e0       	ldi	r24, 0x01	; 1
    4c0e:	4a c0       	rjmp	.+148    	; 0x4ca4 <twi_writeTo+0xa4>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    4c10:	80 91 ab 02 	lds	r24, 0x02AB
    4c14:	88 23       	and	r24, r24
    4c16:	e1 f7       	brne	.-8      	; 0x4c10 <twi_writeTo+0x10>
    continue;
  }
  twi_state = TWI_MTX;
    4c18:	82 e0       	ldi	r24, 0x02	; 2
    4c1a:	80 93 ab 02 	sts	0x02AB, r24
  twi_sendStop = sendStop;
    4c1e:	00 93 ad 02 	sts	0x02AD, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    4c22:	8f ef       	ldi	r24, 0xFF	; 255
    4c24:	80 93 18 03 	sts	0x0318, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    4c28:	10 92 d3 02 	sts	0x02D3, r1
  twi_masterBufferLength = length;
    4c2c:	40 93 d4 02 	sts	0x02D4, r20
    4c30:	a3 eb       	ldi	r26, 0xB3	; 179
    4c32:	b2 e0       	ldi	r27, 0x02	; 2
    4c34:	fb 01       	movw	r30, r22
    4c36:	02 c0       	rjmp	.+4      	; 0x4c3c <twi_writeTo+0x3c>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    4c38:	81 91       	ld	r24, Z+
    4c3a:	8d 93       	st	X+, r24
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    4c3c:	8e 2f       	mov	r24, r30
    4c3e:	86 1b       	sub	r24, r22
    4c40:	84 17       	cp	r24, r20
    4c42:	d0 f3       	brcs	.-12     	; 0x4c38 <twi_writeTo+0x38>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    4c44:	10 92 ac 02 	sts	0x02AC, r1
  twi_slarw |= address << 1;
    4c48:	80 91 ac 02 	lds	r24, 0x02AC
    4c4c:	55 0f       	add	r21, r21
    4c4e:	85 2b       	or	r24, r21
    4c50:	80 93 ac 02 	sts	0x02AC, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    4c54:	80 91 ae 02 	lds	r24, 0x02AE
    4c58:	81 30       	cpi	r24, 0x01	; 1
    4c5a:	41 f4       	brne	.+16     	; 0x4c6c <twi_writeTo+0x6c>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    4c5c:	10 92 ae 02 	sts	0x02AE, r1
    TWDR = twi_slarw;				
    4c60:	80 91 ac 02 	lds	r24, 0x02AC
    4c64:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    4c68:	85 ec       	ldi	r24, 0xC5	; 197
    4c6a:	01 c0       	rjmp	.+2      	; 0x4c6e <twi_writeTo+0x6e>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    4c6c:	85 ee       	ldi	r24, 0xE5	; 229
    4c6e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    4c72:	11 23       	and	r17, r17
    4c74:	21 f0       	breq	.+8      	; 0x4c7e <twi_writeTo+0x7e>
    4c76:	80 91 ab 02 	lds	r24, 0x02AB
    4c7a:	82 30       	cpi	r24, 0x02	; 2
    4c7c:	e1 f3       	breq	.-8      	; 0x4c76 <twi_writeTo+0x76>
    continue;
  }
  
  if (twi_error == 0xFF)
    4c7e:	80 91 18 03 	lds	r24, 0x0318
    4c82:	8f 3f       	cpi	r24, 0xFF	; 255
    4c84:	11 f4       	brne	.+4      	; 0x4c8a <twi_writeTo+0x8a>
    4c86:	80 e0       	ldi	r24, 0x00	; 0
    4c88:	0d c0       	rjmp	.+26     	; 0x4ca4 <twi_writeTo+0xa4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    4c8a:	80 91 18 03 	lds	r24, 0x0318
    4c8e:	80 32       	cpi	r24, 0x20	; 32
    4c90:	11 f4       	brne	.+4      	; 0x4c96 <twi_writeTo+0x96>
    4c92:	82 e0       	ldi	r24, 0x02	; 2
    4c94:	07 c0       	rjmp	.+14     	; 0x4ca4 <twi_writeTo+0xa4>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    4c96:	80 91 18 03 	lds	r24, 0x0318
    4c9a:	80 33       	cpi	r24, 0x30	; 48
    4c9c:	11 f0       	breq	.+4      	; 0x4ca2 <twi_writeTo+0xa2>
    4c9e:	84 e0       	ldi	r24, 0x04	; 4
    4ca0:	01 c0       	rjmp	.+2      	; 0x4ca4 <twi_writeTo+0xa4>
    4ca2:	83 e0       	ldi	r24, 0x03	; 3
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    4ca4:	1f 91       	pop	r17
    4ca6:	0f 91       	pop	r16
    4ca8:	08 95       	ret

00004caa <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    4caa:	48 2f       	mov	r20, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    4cac:	61 32       	cpi	r22, 0x21	; 33
    4cae:	10 f0       	brcs	.+4      	; 0x4cb4 <twi_transmit+0xa>
    4cb0:	81 e0       	ldi	r24, 0x01	; 1
    4cb2:	08 95       	ret
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    4cb4:	80 91 ab 02 	lds	r24, 0x02AB
    4cb8:	84 30       	cpi	r24, 0x04	; 4
    4cba:	11 f0       	breq	.+4      	; 0x4cc0 <twi_transmit+0x16>
    4cbc:	82 e0       	ldi	r24, 0x02	; 2
    4cbe:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    4cc0:	60 93 f6 02 	sts	0x02F6, r22
    4cc4:	a5 ed       	ldi	r26, 0xD5	; 213
    4cc6:	b2 e0       	ldi	r27, 0x02	; 2
    4cc8:	84 2f       	mov	r24, r20
    4cca:	9c 01       	movw	r18, r24
    4ccc:	f9 01       	movw	r30, r18
    4cce:	02 c0       	rjmp	.+4      	; 0x4cd4 <twi_transmit+0x2a>
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
    4cd0:	81 91       	ld	r24, Z+
    4cd2:	8d 93       	st	X+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    4cd4:	8e 2f       	mov	r24, r30
    4cd6:	84 1b       	sub	r24, r20
    4cd8:	86 17       	cp	r24, r22
    4cda:	d0 f3       	brcs	.-12     	; 0x4cd0 <twi_transmit+0x26>
    4cdc:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    4cde:	08 95       	ret

00004ce0 <__vector_24>:
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    4ce0:	1f 92       	push	r1
    4ce2:	0f 92       	push	r0
    4ce4:	0f b6       	in	r0, 0x3f	; 63
    4ce6:	0f 92       	push	r0
    4ce8:	11 24       	eor	r1, r1
    4cea:	2f 93       	push	r18
    4cec:	3f 93       	push	r19
    4cee:	4f 93       	push	r20
    4cf0:	5f 93       	push	r21
    4cf2:	6f 93       	push	r22
    4cf4:	7f 93       	push	r23
    4cf6:	8f 93       	push	r24
    4cf8:	9f 93       	push	r25
    4cfa:	af 93       	push	r26
    4cfc:	bf 93       	push	r27
    4cfe:	ef 93       	push	r30
    4d00:	ff 93       	push	r31
  switch(TW_STATUS){
    4d02:	80 91 b9 00 	lds	r24, 0x00B9
    4d06:	90 e0       	ldi	r25, 0x00	; 0
    4d08:	88 7f       	andi	r24, 0xF8	; 248
    4d0a:	90 70       	andi	r25, 0x00	; 0
    4d0c:	80 36       	cpi	r24, 0x60	; 96
    4d0e:	91 05       	cpc	r25, r1
    4d10:	09 f4       	brne	.+2      	; 0x4d14 <__vector_24+0x34>
    4d12:	f2 c0       	rjmp	.+484    	; 0x4ef8 <__vector_24+0x218>
    4d14:	81 36       	cpi	r24, 0x61	; 97
    4d16:	91 05       	cpc	r25, r1
    4d18:	cc f5       	brge	.+114    	; 0x4d8c <__vector_24+0xac>
    4d1a:	88 32       	cpi	r24, 0x28	; 40
    4d1c:	91 05       	cpc	r25, r1
    4d1e:	09 f4       	brne	.+2      	; 0x4d22 <__vector_24+0x42>
    4d20:	7b c0       	rjmp	.+246    	; 0x4e18 <__vector_24+0x138>
    4d22:	89 32       	cpi	r24, 0x29	; 41
    4d24:	91 05       	cpc	r25, r1
    4d26:	b4 f4       	brge	.+44     	; 0x4d54 <__vector_24+0x74>
    4d28:	80 31       	cpi	r24, 0x10	; 16
    4d2a:	91 05       	cpc	r25, r1
    4d2c:	09 f4       	brne	.+2      	; 0x4d30 <__vector_24+0x50>
    4d2e:	6f c0       	rjmp	.+222    	; 0x4e0e <__vector_24+0x12e>
    4d30:	81 31       	cpi	r24, 0x11	; 17
    4d32:	91 05       	cpc	r25, r1
    4d34:	3c f4       	brge	.+14     	; 0x4d44 <__vector_24+0x64>
    4d36:	00 97       	sbiw	r24, 0x00	; 0
    4d38:	09 f4       	brne	.+2      	; 0x4d3c <__vector_24+0x5c>
    4d3a:	47 c1       	rjmp	.+654    	; 0x4fca <__vector_24+0x2ea>
    4d3c:	08 97       	sbiw	r24, 0x08	; 8
    4d3e:	09 f0       	breq	.+2      	; 0x4d42 <__vector_24+0x62>
    4d40:	4f c1       	rjmp	.+670    	; 0x4fe0 <__vector_24+0x300>
    4d42:	65 c0       	rjmp	.+202    	; 0x4e0e <__vector_24+0x12e>
    4d44:	88 31       	cpi	r24, 0x18	; 24
    4d46:	91 05       	cpc	r25, r1
    4d48:	09 f4       	brne	.+2      	; 0x4d4c <__vector_24+0x6c>
    4d4a:	66 c0       	rjmp	.+204    	; 0x4e18 <__vector_24+0x138>
    4d4c:	80 97       	sbiw	r24, 0x20	; 32
    4d4e:	09 f0       	breq	.+2      	; 0x4d52 <__vector_24+0x72>
    4d50:	47 c1       	rjmp	.+654    	; 0x4fe0 <__vector_24+0x300>
    4d52:	82 c0       	rjmp	.+260    	; 0x4e58 <__vector_24+0x178>
    4d54:	80 34       	cpi	r24, 0x40	; 64
    4d56:	91 05       	cpc	r25, r1
    4d58:	09 f4       	brne	.+2      	; 0x4d5c <__vector_24+0x7c>
    4d5a:	a4 c0       	rjmp	.+328    	; 0x4ea4 <__vector_24+0x1c4>
    4d5c:	81 34       	cpi	r24, 0x41	; 65
    4d5e:	91 05       	cpc	r25, r1
    4d60:	44 f4       	brge	.+16     	; 0x4d72 <__vector_24+0x92>
    4d62:	80 33       	cpi	r24, 0x30	; 48
    4d64:	91 05       	cpc	r25, r1
    4d66:	09 f4       	brne	.+2      	; 0x4d6a <__vector_24+0x8a>
    4d68:	82 c0       	rjmp	.+260    	; 0x4e6e <__vector_24+0x18e>
    4d6a:	c8 97       	sbiw	r24, 0x38	; 56
    4d6c:	09 f0       	breq	.+2      	; 0x4d70 <__vector_24+0x90>
    4d6e:	38 c1       	rjmp	.+624    	; 0x4fe0 <__vector_24+0x300>
    4d70:	89 c0       	rjmp	.+274    	; 0x4e84 <__vector_24+0x1a4>
    4d72:	80 35       	cpi	r24, 0x50	; 80
    4d74:	91 05       	cpc	r25, r1
    4d76:	09 f4       	brne	.+2      	; 0x4d7a <__vector_24+0x9a>
    4d78:	89 c0       	rjmp	.+274    	; 0x4e8c <__vector_24+0x1ac>
    4d7a:	88 35       	cpi	r24, 0x58	; 88
    4d7c:	91 05       	cpc	r25, r1
    4d7e:	09 f4       	brne	.+2      	; 0x4d82 <__vector_24+0xa2>
    4d80:	96 c0       	rjmp	.+300    	; 0x4eae <__vector_24+0x1ce>
    4d82:	88 34       	cpi	r24, 0x48	; 72
    4d84:	91 05       	cpc	r25, r1
    4d86:	09 f0       	breq	.+2      	; 0x4d8a <__vector_24+0xaa>
    4d88:	2b c1       	rjmp	.+598    	; 0x4fe0 <__vector_24+0x300>
    4d8a:	ae c0       	rjmp	.+348    	; 0x4ee8 <__vector_24+0x208>
    4d8c:	88 39       	cpi	r24, 0x98	; 152
    4d8e:	91 05       	cpc	r25, r1
    4d90:	09 f4       	brne	.+2      	; 0x4d94 <__vector_24+0xb4>
    4d92:	13 c1       	rjmp	.+550    	; 0x4fba <__vector_24+0x2da>
    4d94:	89 39       	cpi	r24, 0x99	; 153
    4d96:	91 05       	cpc	r25, r1
    4d98:	ec f4       	brge	.+58     	; 0x4dd4 <__vector_24+0xf4>
    4d9a:	88 37       	cpi	r24, 0x78	; 120
    4d9c:	91 05       	cpc	r25, r1
    4d9e:	09 f4       	brne	.+2      	; 0x4da2 <__vector_24+0xc2>
    4da0:	ab c0       	rjmp	.+342    	; 0x4ef8 <__vector_24+0x218>
    4da2:	89 37       	cpi	r24, 0x79	; 121
    4da4:	91 05       	cpc	r25, r1
    4da6:	4c f4       	brge	.+18     	; 0x4dba <__vector_24+0xda>
    4da8:	88 36       	cpi	r24, 0x68	; 104
    4daa:	91 05       	cpc	r25, r1
    4dac:	09 f4       	brne	.+2      	; 0x4db0 <__vector_24+0xd0>
    4dae:	a4 c0       	rjmp	.+328    	; 0x4ef8 <__vector_24+0x218>
    4db0:	80 37       	cpi	r24, 0x70	; 112
    4db2:	91 05       	cpc	r25, r1
    4db4:	09 f0       	breq	.+2      	; 0x4db8 <__vector_24+0xd8>
    4db6:	14 c1       	rjmp	.+552    	; 0x4fe0 <__vector_24+0x300>
    4db8:	9f c0       	rjmp	.+318    	; 0x4ef8 <__vector_24+0x218>
    4dba:	88 38       	cpi	r24, 0x88	; 136
    4dbc:	91 05       	cpc	r25, r1
    4dbe:	09 f4       	brne	.+2      	; 0x4dc2 <__vector_24+0xe2>
    4dc0:	fc c0       	rjmp	.+504    	; 0x4fba <__vector_24+0x2da>
    4dc2:	80 39       	cpi	r24, 0x90	; 144
    4dc4:	91 05       	cpc	r25, r1
    4dc6:	09 f4       	brne	.+2      	; 0x4dca <__vector_24+0xea>
    4dc8:	9d c0       	rjmp	.+314    	; 0x4f04 <__vector_24+0x224>
    4dca:	80 38       	cpi	r24, 0x80	; 128
    4dcc:	91 05       	cpc	r25, r1
    4dce:	09 f0       	breq	.+2      	; 0x4dd2 <__vector_24+0xf2>
    4dd0:	07 c1       	rjmp	.+526    	; 0x4fe0 <__vector_24+0x300>
    4dd2:	98 c0       	rjmp	.+304    	; 0x4f04 <__vector_24+0x224>
    4dd4:	80 3b       	cpi	r24, 0xB0	; 176
    4dd6:	91 05       	cpc	r25, r1
    4dd8:	09 f4       	brne	.+2      	; 0x4ddc <__vector_24+0xfc>
    4dda:	c6 c0       	rjmp	.+396    	; 0x4f68 <__vector_24+0x288>
    4ddc:	81 3b       	cpi	r24, 0xB1	; 177
    4dde:	91 05       	cpc	r25, r1
    4de0:	4c f4       	brge	.+18     	; 0x4df4 <__vector_24+0x114>
    4de2:	80 3a       	cpi	r24, 0xA0	; 160
    4de4:	91 05       	cpc	r25, r1
    4de6:	09 f4       	brne	.+2      	; 0x4dea <__vector_24+0x10a>
    4de8:	9f c0       	rjmp	.+318    	; 0x4f28 <__vector_24+0x248>
    4dea:	88 3a       	cpi	r24, 0xA8	; 168
    4dec:	91 05       	cpc	r25, r1
    4dee:	09 f0       	breq	.+2      	; 0x4df2 <__vector_24+0x112>
    4df0:	f7 c0       	rjmp	.+494    	; 0x4fe0 <__vector_24+0x300>
    4df2:	ba c0       	rjmp	.+372    	; 0x4f68 <__vector_24+0x288>
    4df4:	80 3c       	cpi	r24, 0xC0	; 192
    4df6:	91 05       	cpc	r25, r1
    4df8:	09 f4       	brne	.+2      	; 0x4dfc <__vector_24+0x11c>
    4dfa:	e3 c0       	rjmp	.+454    	; 0x4fc2 <__vector_24+0x2e2>
    4dfc:	88 3c       	cpi	r24, 0xC8	; 200
    4dfe:	91 05       	cpc	r25, r1
    4e00:	09 f4       	brne	.+2      	; 0x4e04 <__vector_24+0x124>
    4e02:	df c0       	rjmp	.+446    	; 0x4fc2 <__vector_24+0x2e2>
    4e04:	88 3b       	cpi	r24, 0xB8	; 184
    4e06:	91 05       	cpc	r25, r1
    4e08:	09 f0       	breq	.+2      	; 0x4e0c <__vector_24+0x12c>
    4e0a:	ea c0       	rjmp	.+468    	; 0x4fe0 <__vector_24+0x300>
    4e0c:	c2 c0       	rjmp	.+388    	; 0x4f92 <__vector_24+0x2b2>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    4e0e:	80 91 ac 02 	lds	r24, 0x02AC
    4e12:	80 93 bb 00 	sts	0x00BB, r24
    4e16:	cf c0       	rjmp	.+414    	; 0x4fb6 <__vector_24+0x2d6>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4e18:	90 91 d3 02 	lds	r25, 0x02D3
    4e1c:	80 91 d4 02 	lds	r24, 0x02D4
    4e20:	98 17       	cp	r25, r24
    4e22:	68 f4       	brcc	.+26     	; 0x4e3e <__vector_24+0x15e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    4e24:	90 91 d3 02 	lds	r25, 0x02D3
    4e28:	e9 2f       	mov	r30, r25
    4e2a:	f0 e0       	ldi	r31, 0x00	; 0
    4e2c:	ed 54       	subi	r30, 0x4D	; 77
    4e2e:	fd 4f       	sbci	r31, 0xFD	; 253
    4e30:	80 81       	ld	r24, Z
    4e32:	80 93 bb 00 	sts	0x00BB, r24
    4e36:	9f 5f       	subi	r25, 0xFF	; 255
    4e38:	90 93 d3 02 	sts	0x02D3, r25
    4e3c:	bc c0       	rjmp	.+376    	; 0x4fb6 <__vector_24+0x2d6>
        twi_reply(1);
      }else{
	if (twi_sendStop)
    4e3e:	80 91 ad 02 	lds	r24, 0x02AD
    4e42:	88 23       	and	r24, r24
    4e44:	09 f4       	brne	.+2      	; 0x4e48 <__vector_24+0x168>
    4e46:	4b c0       	rjmp	.+150    	; 0x4ede <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4e48:	85 ed       	ldi	r24, 0xD5	; 213
    4e4a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4e4e:	80 91 bc 00 	lds	r24, 0x00BC
    4e52:	84 fd       	sbrc	r24, 4
    4e54:	fc cf       	rjmp	.-8      	; 0x4e4e <__vector_24+0x16e>
    4e56:	c2 c0       	rjmp	.+388    	; 0x4fdc <__vector_24+0x2fc>
	  twi_state = TWI_READY;
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    4e58:	80 e2       	ldi	r24, 0x20	; 32
    4e5a:	80 93 18 03 	sts	0x0318, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4e5e:	85 ed       	ldi	r24, 0xD5	; 213
    4e60:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4e64:	80 91 bc 00 	lds	r24, 0x00BC
    4e68:	84 fd       	sbrc	r24, 4
    4e6a:	fc cf       	rjmp	.-8      	; 0x4e64 <__vector_24+0x184>
    4e6c:	b7 c0       	rjmp	.+366    	; 0x4fdc <__vector_24+0x2fc>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4e6e:	80 e3       	ldi	r24, 0x30	; 48
    4e70:	80 93 18 03 	sts	0x0318, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4e74:	85 ed       	ldi	r24, 0xD5	; 213
    4e76:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4e7a:	80 91 bc 00 	lds	r24, 0x00BC
    4e7e:	84 fd       	sbrc	r24, 4
    4e80:	fc cf       	rjmp	.-8      	; 0x4e7a <__vector_24+0x19a>
    4e82:	ac c0       	rjmp	.+344    	; 0x4fdc <__vector_24+0x2fc>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    4e84:	88 e3       	ldi	r24, 0x38	; 56
    4e86:	80 93 18 03 	sts	0x0318, r24
    4e8a:	9b c0       	rjmp	.+310    	; 0x4fc2 <__vector_24+0x2e2>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4e8c:	80 91 d3 02 	lds	r24, 0x02D3
    4e90:	90 91 bb 00 	lds	r25, 0x00BB
    4e94:	e8 2f       	mov	r30, r24
    4e96:	f0 e0       	ldi	r31, 0x00	; 0
    4e98:	ed 54       	subi	r30, 0x4D	; 77
    4e9a:	fd 4f       	sbci	r31, 0xFD	; 253
    4e9c:	90 83       	st	Z, r25
    4e9e:	8f 5f       	subi	r24, 0xFF	; 255
    4ea0:	80 93 d3 02 	sts	0x02D3, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4ea4:	90 91 d3 02 	lds	r25, 0x02D3
    4ea8:	80 91 d4 02 	lds	r24, 0x02D4
    4eac:	82 c0       	rjmp	.+260    	; 0x4fb2 <__vector_24+0x2d2>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4eae:	80 91 d3 02 	lds	r24, 0x02D3
    4eb2:	90 91 bb 00 	lds	r25, 0x00BB
    4eb6:	e8 2f       	mov	r30, r24
    4eb8:	f0 e0       	ldi	r31, 0x00	; 0
    4eba:	ed 54       	subi	r30, 0x4D	; 77
    4ebc:	fd 4f       	sbci	r31, 0xFD	; 253
    4ebe:	90 83       	st	Z, r25
    4ec0:	8f 5f       	subi	r24, 0xFF	; 255
    4ec2:	80 93 d3 02 	sts	0x02D3, r24
	if (twi_sendStop)
    4ec6:	80 91 ad 02 	lds	r24, 0x02AD
    4eca:	88 23       	and	r24, r24
    4ecc:	41 f0       	breq	.+16     	; 0x4ede <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4ece:	85 ed       	ldi	r24, 0xD5	; 213
    4ed0:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4ed4:	80 91 bc 00 	lds	r24, 0x00BC
    4ed8:	84 fd       	sbrc	r24, 4
    4eda:	fc cf       	rjmp	.-8      	; 0x4ed4 <__vector_24+0x1f4>
    4edc:	7f c0       	rjmp	.+254    	; 0x4fdc <__vector_24+0x2fc>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    4ede:	81 e0       	ldi	r24, 0x01	; 1
    4ee0:	80 93 ae 02 	sts	0x02AE, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4ee4:	84 ea       	ldi	r24, 0xA4	; 164
    4ee6:	6e c0       	rjmp	.+220    	; 0x4fc4 <__vector_24+0x2e4>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4ee8:	85 ed       	ldi	r24, 0xD5	; 213
    4eea:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4eee:	80 91 bc 00 	lds	r24, 0x00BC
    4ef2:	84 fd       	sbrc	r24, 4
    4ef4:	fc cf       	rjmp	.-8      	; 0x4eee <__vector_24+0x20e>
    4ef6:	72 c0       	rjmp	.+228    	; 0x4fdc <__vector_24+0x2fc>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    4ef8:	83 e0       	ldi	r24, 0x03	; 3
    4efa:	80 93 ab 02 	sts	0x02AB, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    4efe:	10 92 17 03 	sts	0x0317, r1
    4f02:	59 c0       	rjmp	.+178    	; 0x4fb6 <__vector_24+0x2d6>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4f04:	80 91 17 03 	lds	r24, 0x0317
    4f08:	80 32       	cpi	r24, 0x20	; 32
    4f0a:	08 f0       	brcs	.+2      	; 0x4f0e <__vector_24+0x22e>
    4f0c:	56 c0       	rjmp	.+172    	; 0x4fba <__vector_24+0x2da>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    4f0e:	80 91 17 03 	lds	r24, 0x0317
    4f12:	90 91 bb 00 	lds	r25, 0x00BB
    4f16:	e8 2f       	mov	r30, r24
    4f18:	f0 e0       	ldi	r31, 0x00	; 0
    4f1a:	e9 50       	subi	r30, 0x09	; 9
    4f1c:	fd 4f       	sbci	r31, 0xFD	; 253
    4f1e:	90 83       	st	Z, r25
    4f20:	8f 5f       	subi	r24, 0xFF	; 255
    4f22:	80 93 17 03 	sts	0x0317, r24
    4f26:	47 c0       	rjmp	.+142    	; 0x4fb6 <__vector_24+0x2d6>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4f28:	80 91 17 03 	lds	r24, 0x0317
    4f2c:	80 32       	cpi	r24, 0x20	; 32
    4f2e:	30 f4       	brcc	.+12     	; 0x4f3c <__vector_24+0x25c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    4f30:	e0 91 17 03 	lds	r30, 0x0317
    4f34:	f0 e0       	ldi	r31, 0x00	; 0
    4f36:	e9 50       	subi	r30, 0x09	; 9
    4f38:	fd 4f       	sbci	r31, 0xFD	; 253
    4f3a:	10 82       	st	Z, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4f3c:	85 ed       	ldi	r24, 0xD5	; 213
    4f3e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4f42:	80 91 bc 00 	lds	r24, 0x00BC
    4f46:	84 fd       	sbrc	r24, 4
    4f48:	fc cf       	rjmp	.-8      	; 0x4f42 <__vector_24+0x262>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    4f4a:	10 92 ab 02 	sts	0x02AB, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    4f4e:	60 91 17 03 	lds	r22, 0x0317
    4f52:	e0 91 b1 02 	lds	r30, 0x02B1
    4f56:	f0 91 b2 02 	lds	r31, 0x02B2
    4f5a:	87 ef       	ldi	r24, 0xF7	; 247
    4f5c:	92 e0       	ldi	r25, 0x02	; 2
    4f5e:	70 e0       	ldi	r23, 0x00	; 0
    4f60:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    4f62:	10 92 17 03 	sts	0x0317, r1
    4f66:	2d c0       	rjmp	.+90     	; 0x4fc2 <__vector_24+0x2e2>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    4f68:	84 e0       	ldi	r24, 0x04	; 4
    4f6a:	80 93 ab 02 	sts	0x02AB, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    4f6e:	10 92 f5 02 	sts	0x02F5, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    4f72:	10 92 f6 02 	sts	0x02F6, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    4f76:	e0 91 af 02 	lds	r30, 0x02AF
    4f7a:	f0 91 b0 02 	lds	r31, 0x02B0
    4f7e:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    4f80:	80 91 f6 02 	lds	r24, 0x02F6
    4f84:	88 23       	and	r24, r24
    4f86:	29 f4       	brne	.+10     	; 0x4f92 <__vector_24+0x2b2>
        twi_txBufferLength = 1;
    4f88:	81 e0       	ldi	r24, 0x01	; 1
    4f8a:	80 93 f6 02 	sts	0x02F6, r24
        twi_txBuffer[0] = 0x00;
    4f8e:	10 92 d5 02 	sts	0x02D5, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    4f92:	90 91 f5 02 	lds	r25, 0x02F5
    4f96:	e9 2f       	mov	r30, r25
    4f98:	f0 e0       	ldi	r31, 0x00	; 0
    4f9a:	eb 52       	subi	r30, 0x2B	; 43
    4f9c:	fd 4f       	sbci	r31, 0xFD	; 253
    4f9e:	80 81       	ld	r24, Z
    4fa0:	80 93 bb 00 	sts	0x00BB, r24
    4fa4:	9f 5f       	subi	r25, 0xFF	; 255
    4fa6:	90 93 f5 02 	sts	0x02F5, r25
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    4faa:	90 91 f5 02 	lds	r25, 0x02F5
    4fae:	80 91 f6 02 	lds	r24, 0x02F6
    4fb2:	98 17       	cp	r25, r24
    4fb4:	10 f4       	brcc	.+4      	; 0x4fba <__vector_24+0x2da>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4fb6:	85 ec       	ldi	r24, 0xC5	; 197
    4fb8:	01 c0       	rjmp	.+2      	; 0x4fbc <__vector_24+0x2dc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4fba:	85 e8       	ldi	r24, 0x85	; 133
    4fbc:	80 93 bc 00 	sts	0x00BC, r24
    4fc0:	0f c0       	rjmp	.+30     	; 0x4fe0 <__vector_24+0x300>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4fc2:	85 ec       	ldi	r24, 0xC5	; 197
    4fc4:	80 93 bc 00 	sts	0x00BC, r24
    4fc8:	09 c0       	rjmp	.+18     	; 0x4fdc <__vector_24+0x2fc>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    4fca:	10 92 18 03 	sts	0x0318, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4fce:	85 ed       	ldi	r24, 0xD5	; 213
    4fd0:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4fd4:	80 91 bc 00 	lds	r24, 0x00BC
    4fd8:	84 fd       	sbrc	r24, 4
    4fda:	fc cf       	rjmp	.-8      	; 0x4fd4 <__vector_24+0x2f4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    4fdc:	10 92 ab 02 	sts	0x02AB, r1
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    4fe0:	ff 91       	pop	r31
    4fe2:	ef 91       	pop	r30
    4fe4:	bf 91       	pop	r27
    4fe6:	af 91       	pop	r26
    4fe8:	9f 91       	pop	r25
    4fea:	8f 91       	pop	r24
    4fec:	7f 91       	pop	r23
    4fee:	6f 91       	pop	r22
    4ff0:	5f 91       	pop	r21
    4ff2:	4f 91       	pop	r20
    4ff4:	3f 91       	pop	r19
    4ff6:	2f 91       	pop	r18
    4ff8:	0f 90       	pop	r0
    4ffa:	0f be       	out	0x3f, r0	; 63
    4ffc:	0f 90       	pop	r0
    4ffe:	1f 90       	pop	r1
    5000:	18 95       	reti

00005002 <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    5002:	10 92 ab 02 	sts	0x02AB, r1
  twi_sendStop = true;		// default value
    5006:	81 e0       	ldi	r24, 0x01	; 1
    5008:	80 93 ad 02 	sts	0x02AD, r24
  twi_inRepStart = false;
    500c:	10 92 ae 02 	sts	0x02AE, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    5010:	82 e1       	ldi	r24, 0x12	; 18
    5012:	61 e0       	ldi	r22, 0x01	; 1
    5014:	0e 94 9e 30 	call	0x613c	; 0x613c <digitalWrite>
  digitalWrite(SCL, 1);
    5018:	83 e1       	ldi	r24, 0x13	; 19
    501a:	61 e0       	ldi	r22, 0x01	; 1
    501c:	0e 94 9e 30 	call	0x613c	; 0x613c <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    5020:	e9 eb       	ldi	r30, 0xB9	; 185
    5022:	f0 e0       	ldi	r31, 0x00	; 0
    5024:	80 81       	ld	r24, Z
    5026:	8e 7f       	andi	r24, 0xFE	; 254
    5028:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    502a:	80 81       	ld	r24, Z
    502c:	8d 7f       	andi	r24, 0xFD	; 253
    502e:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    5030:	88 e4       	ldi	r24, 0x48	; 72
    5032:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    5036:	85 e4       	ldi	r24, 0x45	; 69
    5038:	80 93 bc 00 	sts	0x00BC, r24
}
    503c:	08 95       	ret

0000503e <_ZN9DS1307RTC4readER12tmElements_t>:
  tm.Second &= 0x7f;  // start the clock
  write(tm); 
}

// Aquire data from the RTC chip in BCD format
bool DS1307RTC::read(tmElements_t &tm)
    503e:	0f 93       	push	r16
    5040:	1f 93       	push	r17
    5042:	cf 93       	push	r28
    5044:	df 93       	push	r29
    5046:	ec 01       	movw	r28, r24
{
  uint8_t sec;
  Wire.beginTransmission(DS1307_CTRL_ID);
    5048:	8f e9       	ldi	r24, 0x9F	; 159
    504a:	92 e0       	ldi	r25, 0x02	; 2
    504c:	68 e6       	ldi	r22, 0x68	; 104
    504e:	70 e0       	ldi	r23, 0x00	; 0
    5050:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_ZN7TwoWire17beginTransmissionEi>
#if ARDUINO >= 100  
  Wire.write((uint8_t)0x00); 
    5054:	8f e9       	ldi	r24, 0x9F	; 159
    5056:	92 e0       	ldi	r25, 0x02	; 2
    5058:	60 e0       	ldi	r22, 0x00	; 0
    505a:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <_ZN7TwoWire5writeEh>
#else
  Wire.send(0x00);
#endif  
  if (Wire.endTransmission() != 0) {
    505e:	8f e9       	ldi	r24, 0x9F	; 159
    5060:	92 e0       	ldi	r25, 0x02	; 2
    5062:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <_ZN7TwoWire15endTransmissionEv>
    5066:	88 23       	and	r24, r24
    5068:	19 f0       	breq	.+6      	; 0x5070 <_ZN9DS1307RTC4readER12tmElements_t+0x32>
    exists = false;
    506a:	10 92 19 03 	sts	0x0319, r1
    506e:	11 c0       	rjmp	.+34     	; 0x5092 <_ZN9DS1307RTC4readER12tmElements_t+0x54>
    return false;
  }
  exists = true;
    5070:	81 e0       	ldi	r24, 0x01	; 1
    5072:	80 93 19 03 	sts	0x0319, r24

  // request the 7 data fields   (secs, min, hr, dow, date, mth, yr)
  Wire.requestFrom(DS1307_CTRL_ID, tmNbrFields);
    5076:	8f e9       	ldi	r24, 0x9F	; 159
    5078:	92 e0       	ldi	r25, 0x02	; 2
    507a:	68 e6       	ldi	r22, 0x68	; 104
    507c:	70 e0       	ldi	r23, 0x00	; 0
    507e:	47 e0       	ldi	r20, 0x07	; 7
    5080:	50 e0       	ldi	r21, 0x00	; 0
    5082:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <_ZN7TwoWire11requestFromEii>
  if (Wire.available() < tmNbrFields) return false;
    5086:	8f e9       	ldi	r24, 0x9F	; 159
    5088:	92 e0       	ldi	r25, 0x02	; 2
    508a:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <_ZN7TwoWire9availableEv>
    508e:	07 97       	sbiw	r24, 0x07	; 7
    5090:	14 f4       	brge	.+4      	; 0x5096 <_ZN9DS1307RTC4readER12tmElements_t+0x58>
    5092:	80 e0       	ldi	r24, 0x00	; 0
    5094:	65 c0       	rjmp	.+202    	; 0x5160 <_ZN9DS1307RTC4readER12tmElements_t+0x122>
#if ARDUINO >= 100
  sec = Wire.read();
    5096:	8f e9       	ldi	r24, 0x9F	; 159
    5098:	92 e0       	ldi	r25, 0x02	; 2
    509a:	0e 94 e5 24 	call	0x49ca	; 0x49ca <_ZN7TwoWire4readEv>
    509e:	08 2f       	mov	r16, r24
  tm.Second = bcd2dec(sec & 0x7f);   
    50a0:	8f 77       	andi	r24, 0x7F	; 127
    50a2:	82 95       	swap	r24
    50a4:	8f 70       	andi	r24, 0x0F	; 15
    50a6:	1a e0       	ldi	r17, 0x0A	; 10
    50a8:	81 9f       	mul	r24, r17
    50aa:	c0 01       	movw	r24, r0
    50ac:	11 24       	eor	r1, r1
    50ae:	20 2f       	mov	r18, r16
    50b0:	2f 70       	andi	r18, 0x0F	; 15
    50b2:	28 0f       	add	r18, r24
    50b4:	28 83       	st	Y, r18
  tm.Minute = bcd2dec(Wire.read() );
    50b6:	8f e9       	ldi	r24, 0x9F	; 159
    50b8:	92 e0       	ldi	r25, 0x02	; 2
    50ba:	0e 94 e5 24 	call	0x49ca	; 0x49ca <_ZN7TwoWire4readEv>
    50be:	28 2f       	mov	r18, r24
    50c0:	22 95       	swap	r18
    50c2:	2f 70       	andi	r18, 0x0F	; 15
    50c4:	21 9f       	mul	r18, r17
    50c6:	90 01       	movw	r18, r0
    50c8:	11 24       	eor	r1, r1
    50ca:	8f 70       	andi	r24, 0x0F	; 15
    50cc:	82 0f       	add	r24, r18
    50ce:	89 83       	std	Y+1, r24	; 0x01
  tm.Hour =   bcd2dec(Wire.read() & 0x3f);  // mask assumes 24hr clock
    50d0:	8f e9       	ldi	r24, 0x9F	; 159
    50d2:	92 e0       	ldi	r25, 0x02	; 2
    50d4:	0e 94 e5 24 	call	0x49ca	; 0x49ca <_ZN7TwoWire4readEv>
    50d8:	28 2f       	mov	r18, r24
    50da:	2f 73       	andi	r18, 0x3F	; 63
    50dc:	22 95       	swap	r18
    50de:	2f 70       	andi	r18, 0x0F	; 15
    50e0:	21 9f       	mul	r18, r17
    50e2:	90 01       	movw	r18, r0
    50e4:	11 24       	eor	r1, r1
    50e6:	8f 70       	andi	r24, 0x0F	; 15
    50e8:	82 0f       	add	r24, r18
    50ea:	8a 83       	std	Y+2, r24	; 0x02
  tm.Wday = bcd2dec(Wire.read() );
    50ec:	8f e9       	ldi	r24, 0x9F	; 159
    50ee:	92 e0       	ldi	r25, 0x02	; 2
    50f0:	0e 94 e5 24 	call	0x49ca	; 0x49ca <_ZN7TwoWire4readEv>
    50f4:	28 2f       	mov	r18, r24
    50f6:	22 95       	swap	r18
    50f8:	2f 70       	andi	r18, 0x0F	; 15
    50fa:	21 9f       	mul	r18, r17
    50fc:	90 01       	movw	r18, r0
    50fe:	11 24       	eor	r1, r1
    5100:	8f 70       	andi	r24, 0x0F	; 15
    5102:	82 0f       	add	r24, r18
    5104:	8b 83       	std	Y+3, r24	; 0x03
  tm.Day = bcd2dec(Wire.read() );
    5106:	8f e9       	ldi	r24, 0x9F	; 159
    5108:	92 e0       	ldi	r25, 0x02	; 2
    510a:	0e 94 e5 24 	call	0x49ca	; 0x49ca <_ZN7TwoWire4readEv>
    510e:	28 2f       	mov	r18, r24
    5110:	22 95       	swap	r18
    5112:	2f 70       	andi	r18, 0x0F	; 15
    5114:	21 9f       	mul	r18, r17
    5116:	90 01       	movw	r18, r0
    5118:	11 24       	eor	r1, r1
    511a:	8f 70       	andi	r24, 0x0F	; 15
    511c:	82 0f       	add	r24, r18
    511e:	8c 83       	std	Y+4, r24	; 0x04
  tm.Month = bcd2dec(Wire.read() );
    5120:	8f e9       	ldi	r24, 0x9F	; 159
    5122:	92 e0       	ldi	r25, 0x02	; 2
    5124:	0e 94 e5 24 	call	0x49ca	; 0x49ca <_ZN7TwoWire4readEv>
    5128:	28 2f       	mov	r18, r24
    512a:	22 95       	swap	r18
    512c:	2f 70       	andi	r18, 0x0F	; 15
    512e:	21 9f       	mul	r18, r17
    5130:	90 01       	movw	r18, r0
    5132:	11 24       	eor	r1, r1
    5134:	8f 70       	andi	r24, 0x0F	; 15
    5136:	82 0f       	add	r24, r18
    5138:	8d 83       	std	Y+5, r24	; 0x05
  tm.Year = y2kYearToTm((bcd2dec(Wire.read())));
    513a:	8f e9       	ldi	r24, 0x9F	; 159
    513c:	92 e0       	ldi	r25, 0x02	; 2
    513e:	0e 94 e5 24 	call	0x49ca	; 0x49ca <_ZN7TwoWire4readEv>
    5142:	28 2f       	mov	r18, r24
    5144:	2f 70       	andi	r18, 0x0F	; 15
    5146:	22 5e       	subi	r18, 0xE2	; 226
    5148:	82 95       	swap	r24
    514a:	8f 70       	andi	r24, 0x0F	; 15
    514c:	81 9f       	mul	r24, r17
    514e:	c0 01       	movw	r24, r0
    5150:	11 24       	eor	r1, r1
    5152:	28 0f       	add	r18, r24
    5154:	2e 83       	std	Y+6, r18	; 0x06
    5156:	80 2f       	mov	r24, r16
    5158:	80 95       	com	r24
    515a:	88 1f       	adc	r24, r24
    515c:	88 27       	eor	r24, r24
    515e:	88 1f       	adc	r24, r24
  tm.Month = bcd2dec(Wire.receive() );
  tm.Year = y2kYearToTm((bcd2dec(Wire.receive())));
#endif
  if (sec & 0x80) return false; // clock is halted
  return true;
}
    5160:	df 91       	pop	r29
    5162:	cf 91       	pop	r28
    5164:	1f 91       	pop	r17
    5166:	0f 91       	pop	r16
    5168:	08 95       	ret

0000516a <_ZN9DS1307RTC3getEv>:
{
  Wire.begin();
}
  
// PUBLIC FUNCTIONS
time_t DS1307RTC::get()   // Aquire data from buffer and convert to time_t
    516a:	0f 93       	push	r16
    516c:	1f 93       	push	r17
    516e:	df 93       	push	r29
    5170:	cf 93       	push	r28
    5172:	cd b7       	in	r28, 0x3d	; 61
    5174:	de b7       	in	r29, 0x3e	; 62
    5176:	27 97       	sbiw	r28, 0x07	; 7
    5178:	0f b6       	in	r0, 0x3f	; 63
    517a:	f8 94       	cli
    517c:	de bf       	out	0x3e, r29	; 62
    517e:	0f be       	out	0x3f, r0	; 63
    5180:	cd bf       	out	0x3d, r28	; 61
{
  tmElements_t tm;
  if (read(tm) == false) return 0;
    5182:	8e 01       	movw	r16, r28
    5184:	0f 5f       	subi	r16, 0xFF	; 255
    5186:	1f 4f       	sbci	r17, 0xFF	; 255
    5188:	c8 01       	movw	r24, r16
    518a:	0e 94 1f 28 	call	0x503e	; 0x503e <_ZN9DS1307RTC4readER12tmElements_t>
    518e:	88 23       	and	r24, r24
    5190:	29 f4       	brne	.+10     	; 0x519c <_ZN9DS1307RTC3getEv+0x32>
    5192:	20 e0       	ldi	r18, 0x00	; 0
    5194:	30 e0       	ldi	r19, 0x00	; 0
    5196:	40 e0       	ldi	r20, 0x00	; 0
    5198:	50 e0       	ldi	r21, 0x00	; 0
    519a:	05 c0       	rjmp	.+10     	; 0x51a6 <_ZN9DS1307RTC3getEv+0x3c>
  return(makeTime(tm));
    519c:	c8 01       	movw	r24, r16
    519e:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <_Z8makeTimeR12tmElements_t>
    51a2:	9b 01       	movw	r18, r22
    51a4:	ac 01       	movw	r20, r24
}
    51a6:	b9 01       	movw	r22, r18
    51a8:	ca 01       	movw	r24, r20
    51aa:	27 96       	adiw	r28, 0x07	; 7
    51ac:	0f b6       	in	r0, 0x3f	; 63
    51ae:	f8 94       	cli
    51b0:	de bf       	out	0x3e, r29	; 62
    51b2:	0f be       	out	0x3f, r0	; 63
    51b4:	cd bf       	out	0x3d, r28	; 61
    51b6:	cf 91       	pop	r28
    51b8:	df 91       	pop	r29
    51ba:	1f 91       	pop	r17
    51bc:	0f 91       	pop	r16
    51be:	08 95       	ret

000051c0 <_GLOBAL__I__ZN9DS1307RTCC2Ev>:

#define DS1307_CTRL_ID 0x68 

DS1307RTC::DS1307RTC()
{
  Wire.begin();
    51c0:	8f e9       	ldi	r24, 0x9F	; 159
    51c2:	92 e0       	ldi	r25, 0x02	; 2
    51c4:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <_ZN7TwoWire5beginEv>
  return ((num/16 * 10) + (num % 16));
}

bool DS1307RTC::exists = false;

DS1307RTC RTC = DS1307RTC(); // create an instance for the user
    51c8:	08 95       	ret

000051ca <_ZN7OneWire12reset_searchEv>:

//
// You need to use this function to start a search again from the beginning.
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
    51ca:	fc 01       	movw	r30, r24
{
  // reset the search state
  LastDiscrepancy = 0;
    51cc:	13 86       	std	Z+11, r1	; 0x0b
  LastDeviceFlag = FALSE;
    51ce:	15 86       	std	Z+13, r1	; 0x0d
  LastFamilyDiscrepancy = 0;
    51d0:	14 86       	std	Z+12, r1	; 0x0c
    51d2:	87 e0       	ldi	r24, 0x07	; 7
    51d4:	90 e0       	ldi	r25, 0x00	; 0
  for(int i = 7; ; i--) {
    ROM_NO[i] = 0;
    51d6:	12 86       	std	Z+10, r1	; 0x0a
    51d8:	31 97       	sbiw	r30, 0x01	; 1
    if ( i == 0) break;
    51da:	00 97       	sbiw	r24, 0x00	; 0
    51dc:	11 f0       	breq	.+4      	; 0x51e2 <_ZN7OneWire12reset_searchEv+0x18>
{
  // reset the search state
  LastDiscrepancy = 0;
  LastDeviceFlag = FALSE;
  LastFamilyDiscrepancy = 0;
  for(int i = 7; ; i--) {
    51de:	01 97       	sbiw	r24, 0x01	; 1
    51e0:	fa cf       	rjmp	.-12     	; 0x51d6 <_ZN7OneWire12reset_searchEv+0xc>
    51e2:	08 95       	ret

000051e4 <_ZN7OneWire4crc8EPKhh>:
// and the registers.  (note: this might better be done without to
// table, it would probably be smaller and certainly fast enough
// compared to all those delayMicrosecond() calls.  But I got
// confused, so I use this table from the examples.)
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
    51e4:	dc 01       	movw	r26, r24
    51e6:	80 e0       	ldi	r24, 0x00	; 0
    51e8:	0b c0       	rjmp	.+22     	; 0x5200 <_ZN7OneWire4crc8EPKhh+0x1c>
{
	uint8_t crc = 0;

	while (len--) {
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
    51ea:	e8 2f       	mov	r30, r24
    51ec:	f0 e0       	ldi	r31, 0x00	; 0
    51ee:	8d 91       	ld	r24, X+
    51f0:	90 e0       	ldi	r25, 0x00	; 0
    51f2:	e8 27       	eor	r30, r24
    51f4:	f9 27       	eor	r31, r25
    51f6:	ee 59       	subi	r30, 0x9E	; 158
    51f8:	f7 4f       	sbci	r31, 0xF7	; 247
    51fa:	e4 91       	lpm	r30, Z+
    51fc:	61 50       	subi	r22, 0x01	; 1
    51fe:	8e 2f       	mov	r24, r30
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;

	while (len--) {
    5200:	66 23       	and	r22, r22
    5202:	99 f7       	brne	.-26     	; 0x51ea <_ZN7OneWire4crc8EPKhh+0x6>
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
	}
	return crc;
}
    5204:	08 95       	ret

00005206 <_ZN7OneWire8read_bitEv>:

//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
    5206:	df 92       	push	r13
    5208:	ef 92       	push	r14
    520a:	ff 92       	push	r15
    520c:	0f 93       	push	r16
    520e:	1f 93       	push	r17
    5210:	fc 01       	movw	r30, r24
{
	IO_REG_TYPE mask=bitmask;
    5212:	e0 80       	ld	r14, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    5214:	01 81       	ldd	r16, Z+1	; 0x01
    5216:	12 81       	ldd	r17, Z+2	; 0x02
	uint8_t r;

	noInterrupts();
    5218:	f8 94       	cli
	DIRECT_MODE_OUTPUT(reg, mask);
    521a:	f8 01       	movw	r30, r16
    521c:	81 81       	ldd	r24, Z+1	; 0x01
    521e:	8e 29       	or	r24, r14
    5220:	81 83       	std	Z+1, r24	; 0x01
	DIRECT_WRITE_LOW(reg, mask);
    5222:	82 81       	ldd	r24, Z+2	; 0x02
    5224:	de 2c       	mov	r13, r14
    5226:	d0 94       	com	r13
    5228:	8d 21       	and	r24, r13
    522a:	82 83       	std	Z+2, r24	; 0x02
	delayMicroseconds(3);
    522c:	83 e0       	ldi	r24, 0x03	; 3
    522e:	90 e0       	ldi	r25, 0x00	; 0
    5230:	0e 94 1a 30 	call	0x6034	; 0x6034 <delayMicroseconds>
	DIRECT_MODE_INPUT(reg, mask);	// let pin float, pull up will raise
    5234:	f8 01       	movw	r30, r16
    5236:	81 81       	ldd	r24, Z+1	; 0x01
    5238:	8d 21       	and	r24, r13
    523a:	81 83       	std	Z+1, r24	; 0x01
	delayMicroseconds(10);
    523c:	8a e0       	ldi	r24, 0x0A	; 10
    523e:	90 e0       	ldi	r25, 0x00	; 0
    5240:	0e 94 1a 30 	call	0x6034	; 0x6034 <delayMicroseconds>
	r = DIRECT_READ(reg, mask);
    5244:	f8 01       	movw	r30, r16
    5246:	00 81       	ld	r16, Z
	interrupts();
    5248:	78 94       	sei
	delayMicroseconds(53);
    524a:	85 e3       	ldi	r24, 0x35	; 53
    524c:	90 e0       	ldi	r25, 0x00	; 0
    524e:	0e 94 1a 30 	call	0x6034	; 0x6034 <delayMicroseconds>
    5252:	80 e0       	ldi	r24, 0x00	; 0
    5254:	10 e0       	ldi	r17, 0x00	; 0
    5256:	ff 24       	eor	r15, r15
    5258:	0e 21       	and	r16, r14
    525a:	1f 21       	and	r17, r15
    525c:	01 2b       	or	r16, r17
    525e:	09 f0       	breq	.+2      	; 0x5262 <_ZN7OneWire8read_bitEv+0x5c>
    5260:	81 e0       	ldi	r24, 0x01	; 1
	return r;
}
    5262:	1f 91       	pop	r17
    5264:	0f 91       	pop	r16
    5266:	ff 90       	pop	r15
    5268:	ef 90       	pop	r14
    526a:	df 90       	pop	r13
    526c:	08 95       	ret

0000526e <_ZN7OneWire4readEv>:
}

//
// Read a byte
//
uint8_t OneWire::read() {
    526e:	ef 92       	push	r14
    5270:	ff 92       	push	r15
    5272:	0f 93       	push	r16
    5274:	1f 93       	push	r17
    5276:	cf 93       	push	r28
    5278:	df 93       	push	r29
    527a:	7c 01       	movw	r14, r24
    527c:	01 e0       	ldi	r16, 0x01	; 1
    527e:	10 e0       	ldi	r17, 0x00	; 0
    5280:	c0 e0       	ldi	r28, 0x00	; 0
    5282:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
	if ( OneWire::read_bit()) r |= bitMask;
    5284:	c7 01       	movw	r24, r14
    5286:	0e 94 03 29 	call	0x5206	; 0x5206 <_ZN7OneWire8read_bitEv>
    528a:	81 11       	cpse	r24, r1
    528c:	10 2b       	or	r17, r16
//
uint8_t OneWire::read() {
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    528e:	00 0f       	add	r16, r16
    5290:	21 96       	adiw	r28, 0x01	; 1
    5292:	c8 30       	cpi	r28, 0x08	; 8
    5294:	d1 05       	cpc	r29, r1
    5296:	b1 f7       	brne	.-20     	; 0x5284 <_ZN7OneWire4readEv+0x16>
	if ( OneWire::read_bit()) r |= bitMask;
    }
    return r;
}
    5298:	81 2f       	mov	r24, r17
    529a:	df 91       	pop	r29
    529c:	cf 91       	pop	r28
    529e:	1f 91       	pop	r17
    52a0:	0f 91       	pop	r16
    52a2:	ff 90       	pop	r15
    52a4:	ef 90       	pop	r14
    52a6:	08 95       	ret

000052a8 <_ZN7OneWire9write_bitEh>:

//
// Write a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
void OneWire::write_bit(uint8_t v)
    52a8:	1f 93       	push	r17
    52aa:	cf 93       	push	r28
    52ac:	df 93       	push	r29
    52ae:	fc 01       	movw	r30, r24
{
	IO_REG_TYPE mask=bitmask;
    52b0:	10 81       	ld	r17, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    52b2:	c1 81       	ldd	r28, Z+1	; 0x01
    52b4:	d2 81       	ldd	r29, Z+2	; 0x02
    52b6:	91 2f       	mov	r25, r17
    52b8:	90 95       	com	r25

	if (v & 1) {
    52ba:	60 ff       	sbrs	r22, 0
    52bc:	12 c0       	rjmp	.+36     	; 0x52e2 <_ZN7OneWire9write_bitEh+0x3a>
		noInterrupts();
    52be:	f8 94       	cli
		DIRECT_WRITE_LOW(reg, mask);
    52c0:	8a 81       	ldd	r24, Y+2	; 0x02
    52c2:	89 23       	and	r24, r25
    52c4:	8a 83       	std	Y+2, r24	; 0x02
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    52c6:	89 81       	ldd	r24, Y+1	; 0x01
    52c8:	81 2b       	or	r24, r17
    52ca:	89 83       	std	Y+1, r24	; 0x01
		delayMicroseconds(10);
    52cc:	8a e0       	ldi	r24, 0x0A	; 10
    52ce:	90 e0       	ldi	r25, 0x00	; 0
    52d0:	0e 94 1a 30 	call	0x6034	; 0x6034 <delayMicroseconds>
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
    52d4:	8a 81       	ldd	r24, Y+2	; 0x02
    52d6:	81 2b       	or	r24, r17
    52d8:	8a 83       	std	Y+2, r24	; 0x02
		interrupts();
    52da:	78 94       	sei
		delayMicroseconds(55);
    52dc:	87 e3       	ldi	r24, 0x37	; 55
    52de:	90 e0       	ldi	r25, 0x00	; 0
    52e0:	11 c0       	rjmp	.+34     	; 0x5304 <_ZN7OneWire9write_bitEh+0x5c>
	} else {
		noInterrupts();
    52e2:	f8 94       	cli
		DIRECT_WRITE_LOW(reg, mask);
    52e4:	8a 81       	ldd	r24, Y+2	; 0x02
    52e6:	89 23       	and	r24, r25
    52e8:	8a 83       	std	Y+2, r24	; 0x02
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    52ea:	89 81       	ldd	r24, Y+1	; 0x01
    52ec:	81 2b       	or	r24, r17
    52ee:	89 83       	std	Y+1, r24	; 0x01
		delayMicroseconds(65);
    52f0:	81 e4       	ldi	r24, 0x41	; 65
    52f2:	90 e0       	ldi	r25, 0x00	; 0
    52f4:	0e 94 1a 30 	call	0x6034	; 0x6034 <delayMicroseconds>
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
    52f8:	8a 81       	ldd	r24, Y+2	; 0x02
    52fa:	81 2b       	or	r24, r17
    52fc:	8a 83       	std	Y+2, r24	; 0x02
		interrupts();
    52fe:	78 94       	sei
		delayMicroseconds(5);
    5300:	85 e0       	ldi	r24, 0x05	; 5
    5302:	90 e0       	ldi	r25, 0x00	; 0
    5304:	0e 94 1a 30 	call	0x6034	; 0x6034 <delayMicroseconds>
	}
}
    5308:	df 91       	pop	r29
    530a:	cf 91       	pop	r28
    530c:	1f 91       	pop	r17
    530e:	08 95       	ret

00005310 <_ZN7OneWire5writeEhh>:
// pin high, if you need power after the write (e.g. DS18S20 in
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) {
    5310:	cf 92       	push	r12
    5312:	df 92       	push	r13
    5314:	ef 92       	push	r14
    5316:	ff 92       	push	r15
    5318:	0f 93       	push	r16
    531a:	1f 93       	push	r17
    531c:	cf 93       	push	r28
    531e:	df 93       	push	r29
    5320:	8c 01       	movw	r16, r24
    5322:	e4 2e       	mov	r14, r20
    5324:	ff 24       	eor	r15, r15
    5326:	f3 94       	inc	r15
    5328:	c0 e0       	ldi	r28, 0x00	; 0
    532a:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
	OneWire::write_bit( (bitMask & v)?1:0);
    532c:	c6 2e       	mov	r12, r22
    532e:	dd 24       	eor	r13, r13
    5330:	60 e0       	ldi	r22, 0x00	; 0
    5332:	8f 2d       	mov	r24, r15
    5334:	90 e0       	ldi	r25, 0x00	; 0
    5336:	8c 21       	and	r24, r12
    5338:	9d 21       	and	r25, r13
    533a:	89 2b       	or	r24, r25
    533c:	09 f0       	breq	.+2      	; 0x5340 <_ZN7OneWire5writeEhh+0x30>
    533e:	61 e0       	ldi	r22, 0x01	; 1
    5340:	c8 01       	movw	r24, r16
    5342:	0e 94 54 29 	call	0x52a8	; 0x52a8 <_ZN7OneWire9write_bitEh>
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) {
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    5346:	ff 0c       	add	r15, r15
    5348:	21 96       	adiw	r28, 0x01	; 1
    534a:	c8 30       	cpi	r28, 0x08	; 8
    534c:	d1 05       	cpc	r29, r1
    534e:	81 f7       	brne	.-32     	; 0x5330 <_ZN7OneWire5writeEhh+0x20>
	OneWire::write_bit( (bitMask & v)?1:0);
    }
    if ( !power) {
    5350:	ee 20       	and	r14, r14
    5352:	a9 f4       	brne	.+42     	; 0x537e <_ZN7OneWire5writeEhh+0x6e>
	noInterrupts();
    5354:	f8 94       	cli
	DIRECT_MODE_INPUT(baseReg, bitmask);
    5356:	d8 01       	movw	r26, r16
    5358:	11 96       	adiw	r26, 0x01	; 1
    535a:	ed 91       	ld	r30, X+
    535c:	fc 91       	ld	r31, X
    535e:	12 97       	sbiw	r26, 0x02	; 2
    5360:	91 81       	ldd	r25, Z+1	; 0x01
    5362:	8c 91       	ld	r24, X
    5364:	80 95       	com	r24
    5366:	98 23       	and	r25, r24
    5368:	91 83       	std	Z+1, r25	; 0x01
	DIRECT_WRITE_LOW(baseReg, bitmask);
    536a:	11 96       	adiw	r26, 0x01	; 1
    536c:	ed 91       	ld	r30, X+
    536e:	fc 91       	ld	r31, X
    5370:	12 97       	sbiw	r26, 0x02	; 2
    5372:	92 81       	ldd	r25, Z+2	; 0x02
    5374:	8c 91       	ld	r24, X
    5376:	80 95       	com	r24
    5378:	98 23       	and	r25, r24
    537a:	92 83       	std	Z+2, r25	; 0x02
	interrupts();
    537c:	78 94       	sei
    }
}
    537e:	df 91       	pop	r29
    5380:	cf 91       	pop	r28
    5382:	1f 91       	pop	r17
    5384:	0f 91       	pop	r16
    5386:	ff 90       	pop	r15
    5388:	ef 90       	pop	r14
    538a:	df 90       	pop	r13
    538c:	cf 90       	pop	r12
    538e:	08 95       	ret

00005390 <_ZN7OneWire6selectEPKh>:
}

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
    5390:	ef 92       	push	r14
    5392:	ff 92       	push	r15
    5394:	0f 93       	push	r16
    5396:	1f 93       	push	r17
    5398:	cf 93       	push	r28
    539a:	df 93       	push	r29
    539c:	8c 01       	movw	r16, r24
    539e:	7b 01       	movw	r14, r22
{
    uint8_t i;

    write(0x55);           // Choose ROM
    53a0:	65 e5       	ldi	r22, 0x55	; 85
    53a2:	40 e0       	ldi	r20, 0x00	; 0
    53a4:	0e 94 88 29 	call	0x5310	; 0x5310 <_ZN7OneWire5writeEhh>
    53a8:	c0 e0       	ldi	r28, 0x00	; 0
    53aa:	d0 e0       	ldi	r29, 0x00	; 0

    for (i = 0; i < 8; i++) write(rom[i]);
    53ac:	f7 01       	movw	r30, r14
    53ae:	ec 0f       	add	r30, r28
    53b0:	fd 1f       	adc	r31, r29
    53b2:	c8 01       	movw	r24, r16
    53b4:	60 81       	ld	r22, Z
    53b6:	40 e0       	ldi	r20, 0x00	; 0
    53b8:	0e 94 88 29 	call	0x5310	; 0x5310 <_ZN7OneWire5writeEhh>
    53bc:	21 96       	adiw	r28, 0x01	; 1
    53be:	c8 30       	cpi	r28, 0x08	; 8
    53c0:	d1 05       	cpc	r29, r1
    53c2:	a1 f7       	brne	.-24     	; 0x53ac <_ZN7OneWire6selectEPKh+0x1c>
}
    53c4:	df 91       	pop	r29
    53c6:	cf 91       	pop	r28
    53c8:	1f 91       	pop	r17
    53ca:	0f 91       	pop	r16
    53cc:	ff 90       	pop	r15
    53ce:	ef 90       	pop	r14
    53d0:	08 95       	ret

000053d2 <_ZN7OneWire5resetEv>:
// the bus to come high, if it doesn't then it is broken or shorted
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
    53d2:	df 92       	push	r13
    53d4:	ef 92       	push	r14
    53d6:	ff 92       	push	r15
    53d8:	0f 93       	push	r16
    53da:	1f 93       	push	r17
    53dc:	cf 93       	push	r28
    53de:	df 93       	push	r29
    53e0:	fc 01       	movw	r30, r24
{
	IO_REG_TYPE mask = bitmask;
    53e2:	00 81       	ld	r16, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    53e4:	c1 81       	ldd	r28, Z+1	; 0x01
    53e6:	d2 81       	ldd	r29, Z+2	; 0x02
	uint8_t r;
	uint8_t retries = 125;

	noInterrupts();
    53e8:	f8 94       	cli
	DIRECT_MODE_INPUT(reg, mask);
    53ea:	89 81       	ldd	r24, Y+1	; 0x01
    53ec:	d0 2e       	mov	r13, r16
    53ee:	d0 94       	com	r13
    53f0:	8d 21       	and	r24, r13
    53f2:	89 83       	std	Y+1, r24	; 0x01
	interrupts();
    53f4:	78 94       	sei
    53f6:	1d e7       	ldi	r17, 0x7D	; 125
	// wait until the wire is high... just in case
	do {
    53f8:	e0 2e       	mov	r14, r16
    53fa:	ff 24       	eor	r15, r15
		if (--retries == 0) return 0;
    53fc:	11 50       	subi	r17, 0x01	; 1
    53fe:	59 f1       	breq	.+86     	; 0x5456 <_ZN7OneWire5resetEv+0x84>
		delayMicroseconds(2);
    5400:	82 e0       	ldi	r24, 0x02	; 2
    5402:	90 e0       	ldi	r25, 0x00	; 0
    5404:	0e 94 1a 30 	call	0x6034	; 0x6034 <delayMicroseconds>

	noInterrupts();
	DIRECT_MODE_INPUT(reg, mask);
	interrupts();
	// wait until the wire is high... just in case
	do {
    5408:	88 81       	ld	r24, Y
    540a:	90 e0       	ldi	r25, 0x00	; 0
    540c:	8e 21       	and	r24, r14
    540e:	9f 21       	and	r25, r15
    5410:	89 2b       	or	r24, r25
    5412:	a1 f3       	breq	.-24     	; 0x53fc <_ZN7OneWire5resetEv+0x2a>
		if (--retries == 0) return 0;
		delayMicroseconds(2);
	} while ( !DIRECT_READ(reg, mask));

	noInterrupts();
    5414:	f8 94       	cli
	DIRECT_WRITE_LOW(reg, mask);
    5416:	8a 81       	ldd	r24, Y+2	; 0x02
    5418:	8d 21       	and	r24, r13
    541a:	8a 83       	std	Y+2, r24	; 0x02
	DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    541c:	89 81       	ldd	r24, Y+1	; 0x01
    541e:	80 2b       	or	r24, r16
    5420:	89 83       	std	Y+1, r24	; 0x01
	interrupts();
    5422:	78 94       	sei
	delayMicroseconds(480);
    5424:	80 ee       	ldi	r24, 0xE0	; 224
    5426:	91 e0       	ldi	r25, 0x01	; 1
    5428:	0e 94 1a 30 	call	0x6034	; 0x6034 <delayMicroseconds>
	noInterrupts();
    542c:	f8 94       	cli
	DIRECT_MODE_INPUT(reg, mask);	// allow it to float
    542e:	89 81       	ldd	r24, Y+1	; 0x01
    5430:	8d 21       	and	r24, r13
    5432:	89 83       	std	Y+1, r24	; 0x01
	delayMicroseconds(70);
    5434:	86 e4       	ldi	r24, 0x46	; 70
    5436:	90 e0       	ldi	r25, 0x00	; 0
    5438:	0e 94 1a 30 	call	0x6034	; 0x6034 <delayMicroseconds>
	r = !DIRECT_READ(reg, mask);
    543c:	88 81       	ld	r24, Y
    543e:	10 e0       	ldi	r17, 0x00	; 0
    5440:	90 e0       	ldi	r25, 0x00	; 0
    5442:	e8 22       	and	r14, r24
    5444:	f9 22       	and	r15, r25
    5446:	ef 28       	or	r14, r15
    5448:	09 f4       	brne	.+2      	; 0x544c <_ZN7OneWire5resetEv+0x7a>
    544a:	11 e0       	ldi	r17, 0x01	; 1
	interrupts();
    544c:	78 94       	sei
	delayMicroseconds(410);
    544e:	8a e9       	ldi	r24, 0x9A	; 154
    5450:	91 e0       	ldi	r25, 0x01	; 1
    5452:	0e 94 1a 30 	call	0x6034	; 0x6034 <delayMicroseconds>
	return r;
}
    5456:	81 2f       	mov	r24, r17
    5458:	df 91       	pop	r29
    545a:	cf 91       	pop	r28
    545c:	1f 91       	pop	r17
    545e:	0f 91       	pop	r16
    5460:	ff 90       	pop	r15
    5462:	ef 90       	pop	r14
    5464:	df 90       	pop	r13
    5466:	08 95       	ret

00005468 <_ZN7OneWire6searchEPh>:
// Perform the 1-Wire Search Algorithm on the 1-Wire bus using the existing
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
    5468:	af 92       	push	r10
    546a:	bf 92       	push	r11
    546c:	df 92       	push	r13
    546e:	ef 92       	push	r14
    5470:	ff 92       	push	r15
    5472:	0f 93       	push	r16
    5474:	1f 93       	push	r17
    5476:	cf 93       	push	r28
    5478:	df 93       	push	r29
    547a:	ec 01       	movw	r28, r24
    547c:	5b 01       	movw	r10, r22
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = 0;

   // if the last call was not the last one
   if (!LastDeviceFlag)
    547e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5480:	88 23       	and	r24, r24
    5482:	09 f0       	breq	.+2      	; 0x5486 <_ZN7OneWire6searchEPh+0x1e>
    5484:	61 c0       	rjmp	.+194    	; 0x5548 <_ZN7OneWire6searchEPh+0xe0>
   {
      // 1-Wire reset
      if (!reset())
    5486:	ce 01       	movw	r24, r28
    5488:	0e 94 e9 29 	call	0x53d2	; 0x53d2 <_ZN7OneWire5resetEv>
    548c:	88 23       	and	r24, r24
    548e:	29 f4       	brne	.+10     	; 0x549a <_ZN7OneWire6searchEPh+0x32>
      {
         // reset the search
         LastDiscrepancy = 0;
    5490:	1b 86       	std	Y+11, r1	; 0x0b
         LastDeviceFlag = FALSE;
    5492:	1d 86       	std	Y+13, r1	; 0x0d
         LastFamilyDiscrepancy = 0;
    5494:	1c 86       	std	Y+12, r1	; 0x0c
    5496:	90 e0       	ldi	r25, 0x00	; 0
    5498:	6b c0       	rjmp	.+214    	; 0x5570 <_ZN7OneWire6searchEPh+0x108>
         return FALSE;
      }

      // issue the search command
      write(0xF0);
    549a:	ce 01       	movw	r24, r28
    549c:	60 ef       	ldi	r22, 0xF0	; 240
    549e:	40 e0       	ldi	r20, 0x00	; 0
    54a0:	0e 94 88 29 	call	0x5310	; 0x5310 <_ZN7OneWire5writeEhh>
    54a4:	01 e0       	ldi	r16, 0x01	; 1
    54a6:	dd 24       	eor	r13, r13
    54a8:	ee 24       	eor	r14, r14
    54aa:	ff 24       	eor	r15, r15
    54ac:	f3 94       	inc	r15

      // loop to do the search
      do
      {
         // read a bit and its complement
         id_bit = read_bit();
    54ae:	ce 01       	movw	r24, r28
    54b0:	0e 94 03 29 	call	0x5206	; 0x5206 <_ZN7OneWire8read_bitEv>
    54b4:	18 2f       	mov	r17, r24
         cmp_id_bit = read_bit();
    54b6:	ce 01       	movw	r24, r28
    54b8:	0e 94 03 29 	call	0x5206	; 0x5206 <_ZN7OneWire8read_bitEv>

         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1))
    54bc:	11 30       	cpi	r17, 0x01	; 1
    54be:	19 f4       	brne	.+6      	; 0x54c6 <_ZN7OneWire6searchEPh+0x5e>
    54c0:	81 30       	cpi	r24, 0x01	; 1
    54c2:	e1 f4       	brne	.+56     	; 0x54fc <_ZN7OneWire6searchEPh+0x94>
    54c4:	39 c0       	rjmp	.+114    	; 0x5538 <_ZN7OneWire6searchEPh+0xd0>
            break;
         else
         {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit)
    54c6:	18 17       	cp	r17, r24
    54c8:	09 f5       	brne	.+66     	; 0x550c <_ZN7OneWire6searchEPh+0xa4>
               search_direction = id_bit;  // bit write value for search
            else
            {
               // if this discrepancy if before the Last Discrepancy
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy)
    54ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    54cc:	08 17       	cp	r16, r24
    54ce:	70 f4       	brcc	.+28     	; 0x54ec <_ZN7OneWire6searchEPh+0x84>
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
    54d0:	60 e0       	ldi	r22, 0x00	; 0
    54d2:	fe 01       	movw	r30, r28
    54d4:	ee 0d       	add	r30, r14
    54d6:	f1 1d       	adc	r31, r1
    54d8:	83 81       	ldd	r24, Z+3	; 0x03
    54da:	90 e0       	ldi	r25, 0x00	; 0
    54dc:	2f 2d       	mov	r18, r15
    54de:	30 e0       	ldi	r19, 0x00	; 0
    54e0:	82 23       	and	r24, r18
    54e2:	93 23       	and	r25, r19
    54e4:	18 16       	cp	r1, r24
    54e6:	19 06       	cpc	r1, r25
    54e8:	4c f0       	brlt	.+18     	; 0x54fc <_ZN7OneWire6searchEPh+0x94>
    54ea:	03 c0       	rjmp	.+6      	; 0x54f2 <_ZN7OneWire6searchEPh+0x8a>
               else
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    54ec:	60 e0       	ldi	r22, 0x00	; 0
    54ee:	08 17       	cp	r16, r24
    54f0:	29 f0       	breq	.+10     	; 0x54fc <_ZN7OneWire6searchEPh+0x94>
               if (search_direction == 0)
               {
                  last_zero = id_bit_number;

                  // check for Last discrepancy in family
                  if (last_zero < 9)
    54f2:	09 30       	cpi	r16, 0x09	; 9
    54f4:	08 f0       	brcs	.+2      	; 0x54f8 <_ZN7OneWire6searchEPh+0x90>
    54f6:	4c c0       	rjmp	.+152    	; 0x5590 <_ZN7OneWire6searchEPh+0x128>
                     LastFamilyDiscrepancy = last_zero;
    54f8:	0c 87       	std	Y+12, r16	; 0x0c
    54fa:	4a c0       	rjmp	.+148    	; 0x5590 <_ZN7OneWire6searchEPh+0x128>
            }

            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
    54fc:	fe 01       	movw	r30, r28
    54fe:	ee 0d       	add	r30, r14
    5500:	f1 1d       	adc	r31, r1
    5502:	83 81       	ldd	r24, Z+3	; 0x03
    5504:	8f 29       	or	r24, r15
    5506:	83 83       	std	Z+3, r24	; 0x03
    5508:	61 e0       	ldi	r22, 0x01	; 1
    550a:	09 c0       	rjmp	.+18     	; 0x551e <_ZN7OneWire6searchEPh+0xb6>
    550c:	61 2f       	mov	r22, r17
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;
    550e:	fe 01       	movw	r30, r28
    5510:	ee 0d       	add	r30, r14
    5512:	f1 1d       	adc	r31, r1
    5514:	9f 2d       	mov	r25, r15
    5516:	90 95       	com	r25
    5518:	83 81       	ldd	r24, Z+3	; 0x03
    551a:	89 23       	and	r24, r25
    551c:	83 83       	std	Z+3, r24	; 0x03

            // serial number search direction write bit
            write_bit(search_direction);
    551e:	ce 01       	movw	r24, r28
    5520:	0e 94 54 29 	call	0x52a8	; 0x52a8 <_ZN7OneWire9write_bitEh>

            // increment the byte counter id_bit_number
            // and shift the mask rom_byte_mask
            id_bit_number++;
    5524:	0f 5f       	subi	r16, 0xFF	; 255
            rom_byte_mask <<= 1;
    5526:	ff 0c       	add	r15, r15

            // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
            if (rom_byte_mask == 0)
    5528:	19 f4       	brne	.+6      	; 0x5530 <_ZN7OneWire6searchEPh+0xc8>
            {
                rom_byte_number++;
    552a:	e3 94       	inc	r14
    552c:	ff 24       	eor	r15, r15
    552e:	f3 94       	inc	r15

      // issue the search command
      write(0xF0);

      // loop to do the search
      do
    5530:	87 e0       	ldi	r24, 0x07	; 7
    5532:	8e 15       	cp	r24, r14
    5534:	08 f0       	brcs	.+2      	; 0x5538 <_ZN7OneWire6searchEPh+0xd0>
    5536:	bb cf       	rjmp	.-138    	; 0x54ae <_ZN7OneWire6searchEPh+0x46>
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7

      // if the search was successful then
      if (!(id_bit_number < 65))
    5538:	01 34       	cpi	r16, 0x41	; 65
    553a:	30 f0       	brcs	.+12     	; 0x5548 <_ZN7OneWire6searchEPh+0xe0>
      {
         // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
         LastDiscrepancy = last_zero;
    553c:	db 86       	std	Y+11, r13	; 0x0b

         // check for last device
         if (LastDiscrepancy == 0)
    553e:	dd 20       	and	r13, r13
    5540:	11 f5       	brne	.+68     	; 0x5586 <_ZN7OneWire6searchEPh+0x11e>
            LastDeviceFlag = TRUE;
    5542:	81 e0       	ldi	r24, 0x01	; 1
    5544:	8d 87       	std	Y+13, r24	; 0x0d
    5546:	1f c0       	rjmp	.+62     	; 0x5586 <_ZN7OneWire6searchEPh+0x11e>
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
   {
      LastDiscrepancy = 0;
    5548:	1b 86       	std	Y+11, r1	; 0x0b
      LastDeviceFlag = FALSE;
    554a:	1d 86       	std	Y+13, r1	; 0x0d
      LastFamilyDiscrepancy = 0;
    554c:	1c 86       	std	Y+12, r1	; 0x0c
    554e:	90 e0       	ldi	r25, 0x00	; 0
    5550:	de 01       	movw	r26, r28
    5552:	20 e0       	ldi	r18, 0x00	; 0
    5554:	30 e0       	ldi	r19, 0x00	; 0
      search_result = FALSE;
   }
   for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
    5556:	f5 01       	movw	r30, r10
    5558:	e2 0f       	add	r30, r18
    555a:	f3 1f       	adc	r31, r19
    555c:	13 96       	adiw	r26, 0x03	; 3
    555e:	8c 91       	ld	r24, X
    5560:	13 97       	sbiw	r26, 0x03	; 3
    5562:	80 83       	st	Z, r24
    5564:	2f 5f       	subi	r18, 0xFF	; 255
    5566:	3f 4f       	sbci	r19, 0xFF	; 255
    5568:	11 96       	adiw	r26, 0x01	; 1
    556a:	28 30       	cpi	r18, 0x08	; 8
    556c:	31 05       	cpc	r19, r1
    556e:	99 f7       	brne	.-26     	; 0x5556 <_ZN7OneWire6searchEPh+0xee>
   return search_result;
  }
    5570:	89 2f       	mov	r24, r25
    5572:	df 91       	pop	r29
    5574:	cf 91       	pop	r28
    5576:	1f 91       	pop	r17
    5578:	0f 91       	pop	r16
    557a:	ff 90       	pop	r15
    557c:	ef 90       	pop	r14
    557e:	df 90       	pop	r13
    5580:	bf 90       	pop	r11
    5582:	af 90       	pop	r10
    5584:	08 95       	ret
         search_result = TRUE;
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
    5586:	8b 81       	ldd	r24, Y+3	; 0x03
    5588:	88 23       	and	r24, r24
    558a:	f1 f2       	breq	.-68     	; 0x5548 <_ZN7OneWire6searchEPh+0xe0>
    558c:	91 e0       	ldi	r25, 0x01	; 1
    558e:	e0 cf       	rjmp	.-64     	; 0x5550 <_ZN7OneWire6searchEPh+0xe8>
    5590:	d0 2e       	mov	r13, r16
    5592:	bd cf       	rjmp	.-134    	; 0x550e <_ZN7OneWire6searchEPh+0xa6>

00005594 <_ZN7OneWireC1Eh>:
*/

#include "OneWire.h"


OneWire::OneWire(uint8_t pin)
    5594:	ff 92       	push	r15
    5596:	0f 93       	push	r16
    5598:	1f 93       	push	r17
    559a:	8c 01       	movw	r16, r24
    559c:	f6 2e       	mov	r15, r22
{
	pinMode(pin, INPUT);
    559e:	86 2f       	mov	r24, r22
    55a0:	60 e0       	ldi	r22, 0x00	; 0
    55a2:	0e 94 5f 30 	call	0x60be	; 0x60be <pinMode>
	bitmask = PIN_TO_BITMASK(pin);
    55a6:	8f 2d       	mov	r24, r15
    55a8:	90 e0       	ldi	r25, 0x00	; 0
    55aa:	fc 01       	movw	r30, r24
    55ac:	ec 56       	subi	r30, 0x6C	; 108
    55ae:	f6 4f       	sbci	r31, 0xF6	; 246
    55b0:	e4 91       	lpm	r30, Z+
    55b2:	d8 01       	movw	r26, r16
    55b4:	ec 93       	st	X, r30
	baseReg = PIN_TO_BASEREG(pin);
    55b6:	80 58       	subi	r24, 0x80	; 128
    55b8:	96 4f       	sbci	r25, 0xF6	; 246
    55ba:	fc 01       	movw	r30, r24
    55bc:	64 91       	lpm	r22, Z+
    55be:	e6 2f       	mov	r30, r22
    55c0:	f0 e0       	ldi	r31, 0x00	; 0
    55c2:	ee 0f       	add	r30, r30
    55c4:	ff 1f       	adc	r31, r31
    55c6:	ea 58       	subi	r30, 0x8A	; 138
    55c8:	f6 4f       	sbci	r31, 0xF6	; 246
    55ca:	85 91       	lpm	r24, Z+
    55cc:	94 91       	lpm	r25, Z+
    55ce:	12 96       	adiw	r26, 0x02	; 2
    55d0:	9c 93       	st	X, r25
    55d2:	8e 93       	st	-X, r24
    55d4:	11 97       	sbiw	r26, 0x01	; 1
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
  // reset the search state
  LastDiscrepancy = 0;
    55d6:	1b 96       	adiw	r26, 0x0b	; 11
    55d8:	1c 92       	st	X, r1
    55da:	1b 97       	sbiw	r26, 0x0b	; 11
  LastDeviceFlag = FALSE;
    55dc:	1d 96       	adiw	r26, 0x0d	; 13
    55de:	1c 92       	st	X, r1
    55e0:	1d 97       	sbiw	r26, 0x0d	; 13
  LastFamilyDiscrepancy = 0;
    55e2:	1c 96       	adiw	r26, 0x0c	; 12
    55e4:	1c 92       	st	X, r1
    55e6:	f8 01       	movw	r30, r16
    55e8:	87 e0       	ldi	r24, 0x07	; 7
    55ea:	90 e0       	ldi	r25, 0x00	; 0
  for(int i = 7; ; i--) {
    ROM_NO[i] = 0;
    55ec:	12 86       	std	Z+10, r1	; 0x0a
    55ee:	31 97       	sbiw	r30, 0x01	; 1
    if ( i == 0) break;
    55f0:	00 97       	sbiw	r24, 0x00	; 0
    55f2:	11 f0       	breq	.+4      	; 0x55f8 <_ZN7OneWireC1Eh+0x64>
{
  // reset the search state
  LastDiscrepancy = 0;
  LastDeviceFlag = FALSE;
  LastFamilyDiscrepancy = 0;
  for(int i = 7; ; i--) {
    55f4:	01 97       	sbiw	r24, 0x01	; 1
    55f6:	fa cf       	rjmp	.-12     	; 0x55ec <_ZN7OneWireC1Eh+0x58>
	bitmask = PIN_TO_BITMASK(pin);
	baseReg = PIN_TO_BASEREG(pin);
#if ONEWIRE_SEARCH
	reset_search();
#endif
}
    55f8:	1f 91       	pop	r17
    55fa:	0f 91       	pop	r16
    55fc:	ff 90       	pop	r15
    55fe:	08 95       	ret

00005600 <_ZN17DallasTemperatureC1EP7OneWire>:
extern "C" {
    #include "WConstants.h"
}
#endif

DallasTemperature::DallasTemperature(OneWire* _oneWire)
    5600:	fc 01       	movw	r30, r24
  #if REQUIRESALARMS
  : _AlarmHandler(&defaultAlarmHandler)
    5602:	89 ec       	ldi	r24, 0xC9	; 201
    5604:	9b e2       	ldi	r25, 0x2B	; 43
    5606:	92 8b       	std	Z+18, r25	; 0x12
    5608:	81 8b       	std	Z+17, r24	; 0x11
  #endif
{
  _wire = _oneWire;
    560a:	76 83       	std	Z+6, r23	; 0x06
    560c:	65 83       	std	Z+5, r22	; 0x05
  devices = 0;
    560e:	14 82       	std	Z+4, r1	; 0x04
  parasite = false;
    5610:	10 82       	st	Z, r1
  bitResolution = 9;
    5612:	89 e0       	ldi	r24, 0x09	; 9
    5614:	81 83       	std	Z+1, r24	; 0x01
  waitForConversion = true;
    5616:	81 e0       	ldi	r24, 0x01	; 1
    5618:	82 83       	std	Z+2, r24	; 0x02
  checkForConversion = true;
    561a:	83 83       	std	Z+3, r24	; 0x03
}
    561c:	08 95       	ret

0000561e <_ZN17DallasTemperature14getDeviceCountEv>:

// returns the number of devices found on the bus
uint8_t DallasTemperature::getDeviceCount(void)
{
  return devices;
}
    561e:	fc 01       	movw	r30, r24
    5620:	84 81       	ldd	r24, Z+4	; 0x04
    5622:	08 95       	ret

00005624 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>:
{
  return toFahrenheit(getTempCByIndex(deviceIndex));
}

// reads scratchpad and returns the temperature in degrees C
float DallasTemperature::calculateTemperature(uint8_t* deviceAddress, uint8_t* scratchPad)
    5624:	6f 92       	push	r6
    5626:	7f 92       	push	r7
    5628:	8f 92       	push	r8
    562a:	9f 92       	push	r9
    562c:	af 92       	push	r10
    562e:	bf 92       	push	r11
    5630:	cf 92       	push	r12
    5632:	df 92       	push	r13
    5634:	ef 92       	push	r14
    5636:	ff 92       	push	r15
    5638:	0f 93       	push	r16
    563a:	1f 93       	push	r17
    563c:	cf 93       	push	r28
    563e:	df 93       	push	r29
    5640:	fb 01       	movw	r30, r22
    5642:	ea 01       	movw	r28, r20
{
  int16_t rawTemperature = (((int16_t)scratchPad[TEMP_MSB]) << 8) | scratchPad[TEMP_LSB];
    5644:	99 81       	ldd	r25, Y+1	; 0x01
    5646:	80 e0       	ldi	r24, 0x00	; 0
    5648:	28 81       	ld	r18, Y
    564a:	30 e0       	ldi	r19, 0x00	; 0
    564c:	28 2b       	or	r18, r24
    564e:	39 2b       	or	r19, r25

  switch (deviceAddress[0])
    5650:	e0 81       	ld	r30, Z
    5652:	e2 32       	cpi	r30, 0x22	; 34
    5654:	31 f0       	breq	.+12     	; 0x5662 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3e>
    5656:	e8 32       	cpi	r30, 0x28	; 40
    5658:	21 f0       	breq	.+8      	; 0x5662 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3e>
    565a:	e0 31       	cpi	r30, 0x10	; 16
    565c:	09 f0       	breq	.+2      	; 0x5660 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3c>
    565e:	84 c0       	rjmp	.+264    	; 0x5768 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
    5660:	4b c0       	rjmp	.+150    	; 0x56f8 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xd4>
  {
    case DS18B20MODEL:
    case DS1822MODEL:
      switch (scratchPad[CONFIGURATION])
    5662:	4c 81       	ldd	r20, Y+4	; 0x04
    5664:	4f 33       	cpi	r20, 0x3F	; 63
    5666:	29 f1       	breq	.+74     	; 0x56b2 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x8e>
    5668:	40 34       	cpi	r20, 0x40	; 64
    566a:	20 f4       	brcc	.+8      	; 0x5674 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x50>
    566c:	4f 31       	cpi	r20, 0x1F	; 31
    566e:	09 f0       	breq	.+2      	; 0x5672 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x4e>
    5670:	7b c0       	rjmp	.+246    	; 0x5768 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
    5672:	2f c0       	rjmp	.+94     	; 0x56d2 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xae>
    5674:	4f 35       	cpi	r20, 0x5F	; 95
    5676:	79 f0       	breq	.+30     	; 0x5696 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x72>
    5678:	4f 37       	cpi	r20, 0x7F	; 127
    567a:	09 f0       	breq	.+2      	; 0x567e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x5a>
    567c:	75 c0       	rjmp	.+234    	; 0x5768 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
      {
        case TEMP_12_BIT:
          return (float)rawTemperature * 0.0625;
    567e:	b9 01       	movw	r22, r18
    5680:	88 27       	eor	r24, r24
    5682:	77 fd       	sbrc	r23, 7
    5684:	80 95       	com	r24
    5686:	98 2f       	mov	r25, r24
    5688:	0e 94 e2 3a 	call	0x75c4	; 0x75c4 <__floatsisf>
    568c:	20 e0       	ldi	r18, 0x00	; 0
    568e:	30 e0       	ldi	r19, 0x00	; 0
    5690:	40 e8       	ldi	r20, 0x80	; 128
    5692:	5d e3       	ldi	r21, 0x3D	; 61
    5694:	2e c0       	rjmp	.+92     	; 0x56f2 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xce>
          break;
        case TEMP_11_BIT:
          return (float)(rawTemperature >> 1) * 0.125;
    5696:	35 95       	asr	r19
    5698:	27 95       	ror	r18
    569a:	b9 01       	movw	r22, r18
    569c:	88 27       	eor	r24, r24
    569e:	77 fd       	sbrc	r23, 7
    56a0:	80 95       	com	r24
    56a2:	98 2f       	mov	r25, r24
    56a4:	0e 94 e2 3a 	call	0x75c4	; 0x75c4 <__floatsisf>
    56a8:	20 e0       	ldi	r18, 0x00	; 0
    56aa:	30 e0       	ldi	r19, 0x00	; 0
    56ac:	40 e0       	ldi	r20, 0x00	; 0
    56ae:	5e e3       	ldi	r21, 0x3E	; 62
    56b0:	20 c0       	rjmp	.+64     	; 0x56f2 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xce>
          break;
        case TEMP_10_BIT:
          return (float)(rawTemperature >> 2) * 0.25;
    56b2:	35 95       	asr	r19
    56b4:	27 95       	ror	r18
    56b6:	35 95       	asr	r19
    56b8:	27 95       	ror	r18
    56ba:	b9 01       	movw	r22, r18
    56bc:	88 27       	eor	r24, r24
    56be:	77 fd       	sbrc	r23, 7
    56c0:	80 95       	com	r24
    56c2:	98 2f       	mov	r25, r24
    56c4:	0e 94 e2 3a 	call	0x75c4	; 0x75c4 <__floatsisf>
    56c8:	20 e0       	ldi	r18, 0x00	; 0
    56ca:	30 e0       	ldi	r19, 0x00	; 0
    56cc:	40 e8       	ldi	r20, 0x80	; 128
    56ce:	5e e3       	ldi	r21, 0x3E	; 62
    56d0:	10 c0       	rjmp	.+32     	; 0x56f2 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xce>
          break;
        case TEMP_9_BIT:
          return (float)(rawTemperature >> 3) * 0.5;
    56d2:	93 e0       	ldi	r25, 0x03	; 3
    56d4:	35 95       	asr	r19
    56d6:	27 95       	ror	r18
    56d8:	9a 95       	dec	r25
    56da:	e1 f7       	brne	.-8      	; 0x56d4 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xb0>
    56dc:	b9 01       	movw	r22, r18
    56de:	88 27       	eor	r24, r24
    56e0:	77 fd       	sbrc	r23, 7
    56e2:	80 95       	com	r24
    56e4:	98 2f       	mov	r25, r24
    56e6:	0e 94 e2 3a 	call	0x75c4	; 0x75c4 <__floatsisf>
    56ea:	20 e0       	ldi	r18, 0x00	; 0
    56ec:	30 e0       	ldi	r19, 0x00	; 0
    56ee:	40 e0       	ldi	r20, 0x00	; 0
    56f0:	5f e3       	ldi	r21, 0x3F	; 63
    56f2:	0e 94 96 3b 	call	0x772c	; 0x772c <__mulsf3>
    56f6:	32 c0       	rjmp	.+100    	; 0x575c <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x138>
      TEMPERATURE = TEMP_READ - 0.25 + --------------------------
                                               COUNT_PER_C
      */

      // Good spot. Thanks Nic Johns for your contribution
      return (float)(rawTemperature >> 1) - 0.25 +((float)(scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) / (float)scratchPad[COUNT_PER_C] );
    56f8:	ef 80       	ldd	r14, Y+7	; 0x07
    56fa:	35 95       	asr	r19
    56fc:	27 95       	ror	r18
    56fe:	b9 01       	movw	r22, r18
    5700:	88 27       	eor	r24, r24
    5702:	77 fd       	sbrc	r23, 7
    5704:	80 95       	com	r24
    5706:	98 2f       	mov	r25, r24
    5708:	0e 94 e2 3a 	call	0x75c4	; 0x75c4 <__floatsisf>
    570c:	20 e0       	ldi	r18, 0x00	; 0
    570e:	30 e0       	ldi	r19, 0x00	; 0
    5710:	40 e8       	ldi	r20, 0x80	; 128
    5712:	5e e3       	ldi	r21, 0x3E	; 62
    5714:	0e 94 de 39 	call	0x73bc	; 0x73bc <__subsf3>
    5718:	3b 01       	movw	r6, r22
    571a:	4c 01       	movw	r8, r24
    571c:	6e 2d       	mov	r22, r14
    571e:	70 e0       	ldi	r23, 0x00	; 0
    5720:	2e 81       	ldd	r18, Y+6	; 0x06
    5722:	62 1b       	sub	r22, r18
    5724:	71 09       	sbc	r23, r1
    5726:	88 27       	eor	r24, r24
    5728:	77 fd       	sbrc	r23, 7
    572a:	80 95       	com	r24
    572c:	98 2f       	mov	r25, r24
    572e:	0e 94 e2 3a 	call	0x75c4	; 0x75c4 <__floatsisf>
    5732:	5b 01       	movw	r10, r22
    5734:	6c 01       	movw	r12, r24
    5736:	ff 24       	eor	r15, r15
    5738:	00 e0       	ldi	r16, 0x00	; 0
    573a:	10 e0       	ldi	r17, 0x00	; 0
    573c:	c8 01       	movw	r24, r16
    573e:	b7 01       	movw	r22, r14
    5740:	0e 94 e0 3a 	call	0x75c0	; 0x75c0 <__floatunsisf>
    5744:	9b 01       	movw	r18, r22
    5746:	ac 01       	movw	r20, r24
    5748:	c6 01       	movw	r24, r12
    574a:	b5 01       	movw	r22, r10
    574c:	0e 94 47 3a 	call	0x748e	; 0x748e <__divsf3>
    5750:	9b 01       	movw	r18, r22
    5752:	ac 01       	movw	r20, r24
    5754:	c4 01       	movw	r24, r8
    5756:	b3 01       	movw	r22, r6
    5758:	0e 94 df 39 	call	0x73be	; 0x73be <__addsf3>
    575c:	9b 01       	movw	r18, r22
    575e:	ac 01       	movw	r20, r24
      break;
  }
}
    5760:	83 2f       	mov	r24, r19
    5762:	94 2f       	mov	r25, r20
    5764:	75 2f       	mov	r23, r21
    5766:	00 c0       	rjmp	.+0      	; 0x5768 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
    5768:	26 2f       	mov	r18, r22
    576a:	38 2f       	mov	r19, r24
    576c:	49 2f       	mov	r20, r25
    576e:	57 2f       	mov	r21, r23
    5770:	b9 01       	movw	r22, r18
    5772:	ca 01       	movw	r24, r20
    5774:	df 91       	pop	r29
    5776:	cf 91       	pop	r28
    5778:	1f 91       	pop	r17
    577a:	0f 91       	pop	r16
    577c:	ff 90       	pop	r15
    577e:	ef 90       	pop	r14
    5780:	df 90       	pop	r13
    5782:	cf 90       	pop	r12
    5784:	bf 90       	pop	r11
    5786:	af 90       	pop	r10
    5788:	9f 90       	pop	r9
    578a:	8f 90       	pop	r8
    578c:	7f 90       	pop	r7
    578e:	6f 90       	pop	r6
    5790:	08 95       	ret

00005792 <_ZN17DallasTemperature19defaultAlarmHandlerEPh>:
}

// The default alarm handler
void DallasTemperature::defaultAlarmHandler(uint8_t* deviceAddress)
{
}
    5792:	08 95       	ret

00005794 <_ZN17DallasTemperature15readPowerSupplyEPh>:
  if (parasite) delay(10); // 10ms delay
  _wire->reset();
}

// reads the device's power requirements
bool DallasTemperature::readPowerSupply(uint8_t* deviceAddress)
    5794:	ef 92       	push	r14
    5796:	ff 92       	push	r15
    5798:	0f 93       	push	r16
    579a:	1f 93       	push	r17
    579c:	8c 01       	movw	r16, r24
    579e:	7b 01       	movw	r14, r22
{
  bool ret = false;
  _wire->reset();
    57a0:	fc 01       	movw	r30, r24
    57a2:	85 81       	ldd	r24, Z+5	; 0x05
    57a4:	96 81       	ldd	r25, Z+6	; 0x06
    57a6:	0e 94 e9 29 	call	0x53d2	; 0x53d2 <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
    57aa:	f8 01       	movw	r30, r16
    57ac:	85 81       	ldd	r24, Z+5	; 0x05
    57ae:	96 81       	ldd	r25, Z+6	; 0x06
    57b0:	b7 01       	movw	r22, r14
    57b2:	0e 94 c8 29 	call	0x5390	; 0x5390 <_ZN7OneWire6selectEPKh>
  _wire->write(READPOWERSUPPLY);
    57b6:	f8 01       	movw	r30, r16
    57b8:	85 81       	ldd	r24, Z+5	; 0x05
    57ba:	96 81       	ldd	r25, Z+6	; 0x06
    57bc:	64 eb       	ldi	r22, 0xB4	; 180
    57be:	40 e0       	ldi	r20, 0x00	; 0
    57c0:	0e 94 88 29 	call	0x5310	; 0x5310 <_ZN7OneWire5writeEhh>
  if (_wire->read_bit() == 0) ret = true;
    57c4:	f8 01       	movw	r30, r16
    57c6:	85 81       	ldd	r24, Z+5	; 0x05
    57c8:	96 81       	ldd	r25, Z+6	; 0x06
    57ca:	0e 94 03 29 	call	0x5206	; 0x5206 <_ZN7OneWire8read_bitEv>
    57ce:	f8 2e       	mov	r15, r24
  _wire->reset();
    57d0:	f8 01       	movw	r30, r16
    57d2:	85 81       	ldd	r24, Z+5	; 0x05
    57d4:	96 81       	ldd	r25, Z+6	; 0x06
    57d6:	0e 94 e9 29 	call	0x53d2	; 0x53d2 <_ZN7OneWire5resetEv>
    57da:	80 e0       	ldi	r24, 0x00	; 0
    57dc:	ff 20       	and	r15, r15
    57de:	09 f4       	brne	.+2      	; 0x57e2 <_ZN17DallasTemperature15readPowerSupplyEPh+0x4e>
    57e0:	81 e0       	ldi	r24, 0x01	; 1
  return ret;
}
    57e2:	1f 91       	pop	r17
    57e4:	0f 91       	pop	r16
    57e6:	ff 90       	pop	r15
    57e8:	ef 90       	pop	r14
    57ea:	08 95       	ret

000057ec <_ZN17DallasTemperature14readScratchPadEPhS0_>:
  readScratchPad(deviceAddress, scratchPad);
  return (_wire->crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]);
}

// read device's scratch pad
void DallasTemperature::readScratchPad(uint8_t* deviceAddress, uint8_t* scratchPad)
    57ec:	cf 92       	push	r12
    57ee:	df 92       	push	r13
    57f0:	ef 92       	push	r14
    57f2:	ff 92       	push	r15
    57f4:	0f 93       	push	r16
    57f6:	1f 93       	push	r17
    57f8:	8c 01       	movw	r16, r24
    57fa:	6b 01       	movw	r12, r22
    57fc:	7a 01       	movw	r14, r20
{
  // send the command
  _wire->reset();
    57fe:	fc 01       	movw	r30, r24
    5800:	85 81       	ldd	r24, Z+5	; 0x05
    5802:	96 81       	ldd	r25, Z+6	; 0x06
    5804:	0e 94 e9 29 	call	0x53d2	; 0x53d2 <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
    5808:	f8 01       	movw	r30, r16
    580a:	85 81       	ldd	r24, Z+5	; 0x05
    580c:	96 81       	ldd	r25, Z+6	; 0x06
    580e:	b6 01       	movw	r22, r12
    5810:	0e 94 c8 29 	call	0x5390	; 0x5390 <_ZN7OneWire6selectEPKh>
  _wire->write(READSCRATCH);
    5814:	f8 01       	movw	r30, r16
    5816:	85 81       	ldd	r24, Z+5	; 0x05
    5818:	96 81       	ldd	r25, Z+6	; 0x06
    581a:	6e eb       	ldi	r22, 0xBE	; 190
    581c:	40 e0       	ldi	r20, 0x00	; 0
    581e:	0e 94 88 29 	call	0x5310	; 0x5310 <_ZN7OneWire5writeEhh>

  
  // read the response

  // byte 0: temperature LSB
  scratchPad[TEMP_LSB] = _wire->read();
    5822:	f8 01       	movw	r30, r16
    5824:	85 81       	ldd	r24, Z+5	; 0x05
    5826:	96 81       	ldd	r25, Z+6	; 0x06
    5828:	0e 94 37 29 	call	0x526e	; 0x526e <_ZN7OneWire4readEv>
    582c:	f7 01       	movw	r30, r14
    582e:	80 83       	st	Z, r24

  // byte 1: temperature MSB
  scratchPad[TEMP_MSB] = _wire->read();
    5830:	f8 01       	movw	r30, r16
    5832:	85 81       	ldd	r24, Z+5	; 0x05
    5834:	96 81       	ldd	r25, Z+6	; 0x06
    5836:	0e 94 37 29 	call	0x526e	; 0x526e <_ZN7OneWire4readEv>
    583a:	f7 01       	movw	r30, r14
    583c:	81 83       	std	Z+1, r24	; 0x01

  // byte 2: high alarm temp
  scratchPad[HIGH_ALARM_TEMP] = _wire->read();
    583e:	f8 01       	movw	r30, r16
    5840:	85 81       	ldd	r24, Z+5	; 0x05
    5842:	96 81       	ldd	r25, Z+6	; 0x06
    5844:	0e 94 37 29 	call	0x526e	; 0x526e <_ZN7OneWire4readEv>
    5848:	f7 01       	movw	r30, r14
    584a:	82 83       	std	Z+2, r24	; 0x02

  // byte 3: low alarm temp
  scratchPad[LOW_ALARM_TEMP] = _wire->read();
    584c:	f8 01       	movw	r30, r16
    584e:	85 81       	ldd	r24, Z+5	; 0x05
    5850:	96 81       	ldd	r25, Z+6	; 0x06
    5852:	0e 94 37 29 	call	0x526e	; 0x526e <_ZN7OneWire4readEv>
    5856:	f7 01       	movw	r30, r14
    5858:	83 83       	std	Z+3, r24	; 0x03

  // byte 4:
  // DS18S20: store for crc
  // DS18B20 & DS1822: configuration register
  scratchPad[CONFIGURATION] = _wire->read();
    585a:	f8 01       	movw	r30, r16
    585c:	85 81       	ldd	r24, Z+5	; 0x05
    585e:	96 81       	ldd	r25, Z+6	; 0x06
    5860:	0e 94 37 29 	call	0x526e	; 0x526e <_ZN7OneWire4readEv>
    5864:	f7 01       	movw	r30, r14
    5866:	84 83       	std	Z+4, r24	; 0x04

  // byte 5:
  // internal use & crc
  scratchPad[INTERNAL_BYTE] = _wire->read();
    5868:	f8 01       	movw	r30, r16
    586a:	85 81       	ldd	r24, Z+5	; 0x05
    586c:	96 81       	ldd	r25, Z+6	; 0x06
    586e:	0e 94 37 29 	call	0x526e	; 0x526e <_ZN7OneWire4readEv>
    5872:	f7 01       	movw	r30, r14
    5874:	85 83       	std	Z+5, r24	; 0x05

  // byte 6:
  // DS18S20: COUNT_REMAIN
  // DS18B20 & DS1822: store for crc
  scratchPad[COUNT_REMAIN] = _wire->read();
    5876:	f8 01       	movw	r30, r16
    5878:	85 81       	ldd	r24, Z+5	; 0x05
    587a:	96 81       	ldd	r25, Z+6	; 0x06
    587c:	0e 94 37 29 	call	0x526e	; 0x526e <_ZN7OneWire4readEv>
    5880:	f7 01       	movw	r30, r14
    5882:	86 83       	std	Z+6, r24	; 0x06

  // byte 7:
  // DS18S20: COUNT_PER_C
  // DS18B20 & DS1822: store for crc
  scratchPad[COUNT_PER_C] = _wire->read();
    5884:	f8 01       	movw	r30, r16
    5886:	85 81       	ldd	r24, Z+5	; 0x05
    5888:	96 81       	ldd	r25, Z+6	; 0x06
    588a:	0e 94 37 29 	call	0x526e	; 0x526e <_ZN7OneWire4readEv>
    588e:	f7 01       	movw	r30, r14
    5890:	87 83       	std	Z+7, r24	; 0x07

  // byte 8:
  // SCTRACHPAD_CRC
  scratchPad[SCRATCHPAD_CRC] = _wire->read();
    5892:	f8 01       	movw	r30, r16
    5894:	85 81       	ldd	r24, Z+5	; 0x05
    5896:	96 81       	ldd	r25, Z+6	; 0x06
    5898:	0e 94 37 29 	call	0x526e	; 0x526e <_ZN7OneWire4readEv>
    589c:	f7 01       	movw	r30, r14
    589e:	80 87       	std	Z+8, r24	; 0x08

  _wire->reset();
    58a0:	f8 01       	movw	r30, r16
    58a2:	85 81       	ldd	r24, Z+5	; 0x05
    58a4:	96 81       	ldd	r25, Z+6	; 0x06
    58a6:	0e 94 e9 29 	call	0x53d2	; 0x53d2 <_ZN7OneWire5resetEv>
}
    58aa:	1f 91       	pop	r17
    58ac:	0f 91       	pop	r16
    58ae:	ff 90       	pop	r15
    58b0:	ef 90       	pop	r14
    58b2:	df 90       	pop	r13
    58b4:	cf 90       	pop	r12
    58b6:	08 95       	ret

000058b8 <_ZN17DallasTemperature21isConversionAvailableEPh>:
bool DallasTemperature::getCheckForConversion()
{
	return checkForConversion;
}

bool DallasTemperature::isConversionAvailable(uint8_t* deviceAddress)
    58b8:	df 93       	push	r29
    58ba:	cf 93       	push	r28
    58bc:	cd b7       	in	r28, 0x3d	; 61
    58be:	de b7       	in	r29, 0x3e	; 62
    58c0:	29 97       	sbiw	r28, 0x09	; 9
    58c2:	0f b6       	in	r0, 0x3f	; 63
    58c4:	f8 94       	cli
    58c6:	de bf       	out	0x3e, r29	; 62
    58c8:	0f be       	out	0x3f, r0	; 63
    58ca:	cd bf       	out	0x3d, r28	; 61
{
	// Check if the clock has been raised indicating the conversion is complete
  	ScratchPad scratchPad;
  	readScratchPad(deviceAddress, scratchPad);
    58cc:	ae 01       	movw	r20, r28
    58ce:	4f 5f       	subi	r20, 0xFF	; 255
    58d0:	5f 4f       	sbci	r21, 0xFF	; 255
    58d2:	0e 94 f6 2b 	call	0x57ec	; 0x57ec <_ZN17DallasTemperature14readScratchPadEPhS0_>
    58d6:	89 81       	ldd	r24, Y+1	; 0x01
    58d8:	81 11       	cpse	r24, r1
    58da:	81 e0       	ldi	r24, 0x01	; 1
	return scratchPad[0];
}	
    58dc:	29 96       	adiw	r28, 0x09	; 9
    58de:	0f b6       	in	r0, 0x3f	; 63
    58e0:	f8 94       	cli
    58e2:	de bf       	out	0x3e, r29	; 62
    58e4:	0f be       	out	0x3f, r0	; 63
    58e6:	cd bf       	out	0x3d, r28	; 61
    58e8:	cf 91       	pop	r28
    58ea:	df 91       	pop	r29
    58ec:	08 95       	ret

000058ee <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>:
  
  return true;
}


void DallasTemperature::blockTillConversionComplete(uint8_t* bitResolution, uint8_t* deviceAddress)
    58ee:	cf 92       	push	r12
    58f0:	df 92       	push	r13
    58f2:	ef 92       	push	r14
    58f4:	ff 92       	push	r15
    58f6:	0f 93       	push	r16
    58f8:	1f 93       	push	r17
    58fa:	cf 93       	push	r28
    58fc:	df 93       	push	r29
    58fe:	ec 01       	movw	r28, r24
    5900:	6b 01       	movw	r12, r22
{
	if(deviceAddress != 0 && checkForConversion && !parasite)
    5902:	45 2b       	or	r20, r21
    5904:	e1 f0       	breq	.+56     	; 0x593e <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
    5906:	8b 81       	ldd	r24, Y+3	; 0x03
    5908:	88 23       	and	r24, r24
    590a:	c9 f0       	breq	.+50     	; 0x593e <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
    590c:	88 81       	ld	r24, Y
    590e:	88 23       	and	r24, r24
    5910:	b1 f4       	brne	.+44     	; 0x593e <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
	{
	  	// Continue to check if the IC has responded with a temperature
	  	// NB: Could cause issues with multiple devices (one device may respond faster)
	  	unsigned long start = millis();
    5912:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <millis>
    5916:	7b 01       	movw	r14, r22
    5918:	8c 01       	movw	r16, r24
		while(!isConversionAvailable(0) && ((millis() - start) < 750));	
    591a:	ce 01       	movw	r24, r28
    591c:	60 e0       	ldi	r22, 0x00	; 0
    591e:	70 e0       	ldi	r23, 0x00	; 0
    5920:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <_ZN17DallasTemperature21isConversionAvailableEPh>
    5924:	88 23       	and	r24, r24
    5926:	59 f4       	brne	.+22     	; 0x593e <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
    5928:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <millis>
    592c:	6e 19       	sub	r22, r14
    592e:	7f 09       	sbc	r23, r15
    5930:	80 0b       	sbc	r24, r16
    5932:	91 0b       	sbc	r25, r17
    5934:	6e 5e       	subi	r22, 0xEE	; 238
    5936:	72 40       	sbci	r23, 0x02	; 2
    5938:	80 40       	sbci	r24, 0x00	; 0
    593a:	90 40       	sbci	r25, 0x00	; 0
    593c:	70 f3       	brcs	.-36     	; 0x591a <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x2c>
	}
	
  	// Wait a fix number of cycles till conversion is complete (based on IC datasheet)
	  switch (*bitResolution)
    593e:	f6 01       	movw	r30, r12
    5940:	60 81       	ld	r22, Z
    5942:	69 30       	cpi	r22, 0x09	; 9
    5944:	39 f0       	breq	.+14     	; 0x5954 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x66>
    5946:	69 30       	cpi	r22, 0x09	; 9
    5948:	a0 f0       	brcs	.+40     	; 0x5972 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x84>
    594a:	6a 30       	cpi	r22, 0x0A	; 10
    594c:	41 f0       	breq	.+16     	; 0x595e <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x70>
    594e:	6b 30       	cpi	r22, 0x0B	; 11
    5950:	81 f4       	brne	.+32     	; 0x5972 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x84>
    5952:	0a c0       	rjmp	.+20     	; 0x5968 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x7a>
	  {
	    case 9:
	      delay(94);
    5954:	6e e5       	ldi	r22, 0x5E	; 94
    5956:	70 e0       	ldi	r23, 0x00	; 0
    5958:	80 e0       	ldi	r24, 0x00	; 0
    595a:	90 e0       	ldi	r25, 0x00	; 0
    595c:	0e c0       	rjmp	.+28     	; 0x597a <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x8c>
	      break;
	    case 10:
	      delay(188);
    595e:	6c eb       	ldi	r22, 0xBC	; 188
    5960:	70 e0       	ldi	r23, 0x00	; 0
    5962:	80 e0       	ldi	r24, 0x00	; 0
    5964:	90 e0       	ldi	r25, 0x00	; 0
    5966:	09 c0       	rjmp	.+18     	; 0x597a <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x8c>
	      break;
	    case 11:
	      delay(375);
    5968:	67 e7       	ldi	r22, 0x77	; 119
    596a:	71 e0       	ldi	r23, 0x01	; 1
    596c:	80 e0       	ldi	r24, 0x00	; 0
    596e:	90 e0       	ldi	r25, 0x00	; 0
    5970:	04 c0       	rjmp	.+8      	; 0x597a <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x8c>
	      break;
	    case 12:
	    default:
	      delay(750);
    5972:	6e ee       	ldi	r22, 0xEE	; 238
    5974:	72 e0       	ldi	r23, 0x02	; 2
    5976:	80 e0       	ldi	r24, 0x00	; 0
    5978:	90 e0       	ldi	r25, 0x00	; 0
    597a:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <delay>
	      break;
	  }

}
    597e:	df 91       	pop	r29
    5980:	cf 91       	pop	r28
    5982:	1f 91       	pop	r17
    5984:	0f 91       	pop	r16
    5986:	ff 90       	pop	r15
    5988:	ef 90       	pop	r14
    598a:	df 90       	pop	r13
    598c:	cf 90       	pop	r12
    598e:	08 95       	ret

00005990 <_ZN17DallasTemperature11isConnectedEPhS0_>:
  return isConnected(deviceAddress, scratchPad);
}

// attempt to determine if the device at the given address is connected to the bus
// also allows for updating the read scratchpad
bool DallasTemperature::isConnected(uint8_t* deviceAddress, uint8_t* scratchPad)
    5990:	0f 93       	push	r16
    5992:	1f 93       	push	r17
    5994:	8a 01       	movw	r16, r20
{
  readScratchPad(deviceAddress, scratchPad);
    5996:	0e 94 f6 2b 	call	0x57ec	; 0x57ec <_ZN17DallasTemperature14readScratchPadEPhS0_>
  return (_wire->crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]);
    599a:	c8 01       	movw	r24, r16
    599c:	68 e0       	ldi	r22, 0x08	; 8
    599e:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <_ZN7OneWire4crc8EPKhh>
    59a2:	20 e0       	ldi	r18, 0x00	; 0
    59a4:	f8 01       	movw	r30, r16
    59a6:	90 85       	ldd	r25, Z+8	; 0x08
    59a8:	89 17       	cp	r24, r25
    59aa:	09 f4       	brne	.+2      	; 0x59ae <_ZN17DallasTemperature11isConnectedEPhS0_+0x1e>
    59ac:	21 e0       	ldi	r18, 0x01	; 1
}
    59ae:	82 2f       	mov	r24, r18
    59b0:	1f 91       	pop	r17
    59b2:	0f 91       	pop	r16
    59b4:	08 95       	ret

000059b6 <_ZN17DallasTemperature8getTempCEPh>:
// returns temperature in degrees C or DEVICE_DISCONNECTED if the
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DallasTemperature::getTempC(uint8_t* deviceAddress)
    59b6:	cf 92       	push	r12
    59b8:	df 92       	push	r13
    59ba:	ef 92       	push	r14
    59bc:	ff 92       	push	r15
    59be:	0f 93       	push	r16
    59c0:	1f 93       	push	r17
    59c2:	df 93       	push	r29
    59c4:	cf 93       	push	r28
    59c6:	cd b7       	in	r28, 0x3d	; 61
    59c8:	de b7       	in	r29, 0x3e	; 62
    59ca:	29 97       	sbiw	r28, 0x09	; 9
    59cc:	0f b6       	in	r0, 0x3f	; 63
    59ce:	f8 94       	cli
    59d0:	de bf       	out	0x3e, r29	; 62
    59d2:	0f be       	out	0x3f, r0	; 63
    59d4:	cd bf       	out	0x3d, r28	; 61
    59d6:	8c 01       	movw	r16, r24
    59d8:	7b 01       	movw	r14, r22
  // TODO: Multiple devices (up to 64) on the same bus may take 
  //       some time to negotiate a response
  // What happens in case of collision?

  ScratchPad scratchPad;
  if (isConnected(deviceAddress, scratchPad)) return calculateTemperature(deviceAddress, scratchPad);
    59da:	6e 01       	movw	r12, r28
    59dc:	08 94       	sec
    59de:	c1 1c       	adc	r12, r1
    59e0:	d1 1c       	adc	r13, r1
    59e2:	a6 01       	movw	r20, r12
    59e4:	0e 94 c8 2c 	call	0x5990	; 0x5990 <_ZN17DallasTemperature11isConnectedEPhS0_>
    59e8:	88 23       	and	r24, r24
    59ea:	29 f4       	brne	.+10     	; 0x59f6 <_ZN17DallasTemperature8getTempCEPh+0x40>
    59ec:	60 e0       	ldi	r22, 0x00	; 0
    59ee:	70 e0       	ldi	r23, 0x00	; 0
    59f0:	8e ef       	ldi	r24, 0xFE	; 254
    59f2:	92 ec       	ldi	r25, 0xC2	; 194
    59f4:	05 c0       	rjmp	.+10     	; 0x5a00 <_ZN17DallasTemperature8getTempCEPh+0x4a>
    59f6:	c8 01       	movw	r24, r16
    59f8:	b7 01       	movw	r22, r14
    59fa:	a6 01       	movw	r20, r12
    59fc:	0e 94 12 2b 	call	0x5624	; 0x5624 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>
  return DEVICE_DISCONNECTED;
}
    5a00:	29 96       	adiw	r28, 0x09	; 9
    5a02:	0f b6       	in	r0, 0x3f	; 63
    5a04:	f8 94       	cli
    5a06:	de bf       	out	0x3e, r29	; 62
    5a08:	0f be       	out	0x3f, r0	; 63
    5a0a:	cd bf       	out	0x3d, r28	; 61
    5a0c:	cf 91       	pop	r28
    5a0e:	df 91       	pop	r29
    5a10:	1f 91       	pop	r17
    5a12:	0f 91       	pop	r16
    5a14:	ff 90       	pop	r15
    5a16:	ef 90       	pop	r14
    5a18:	df 90       	pop	r13
    5a1a:	cf 90       	pop	r12
    5a1c:	08 95       	ret

00005a1e <_ZN17DallasTemperature13getResolutionEPh>:
	return bitResolution;
}

// returns the current resolution of the device, 9-12
// returns 0 if device not found
uint8_t DallasTemperature::getResolution(uint8_t* deviceAddress)
    5a1e:	df 93       	push	r29
    5a20:	cf 93       	push	r28
    5a22:	cd b7       	in	r28, 0x3d	; 61
    5a24:	de b7       	in	r29, 0x3e	; 62
    5a26:	29 97       	sbiw	r28, 0x09	; 9
    5a28:	0f b6       	in	r0, 0x3f	; 63
    5a2a:	f8 94       	cli
    5a2c:	de bf       	out	0x3e, r29	; 62
    5a2e:	0f be       	out	0x3f, r0	; 63
    5a30:	cd bf       	out	0x3d, r28	; 61
    5a32:	9c 01       	movw	r18, r24
    5a34:	fb 01       	movw	r30, r22
{
  if (deviceAddress[0] == DS18S20MODEL) return 9; // this model has a fixed resolution
    5a36:	80 81       	ld	r24, Z
    5a38:	80 31       	cpi	r24, 0x10	; 16
    5a3a:	d9 f0       	breq	.+54     	; 0x5a72 <_ZN17DallasTemperature13getResolutionEPh+0x54>

  ScratchPad scratchPad;
  if (isConnected(deviceAddress, scratchPad))
    5a3c:	c9 01       	movw	r24, r18
    5a3e:	ae 01       	movw	r20, r28
    5a40:	4f 5f       	subi	r20, 0xFF	; 255
    5a42:	5f 4f       	sbci	r21, 0xFF	; 255
    5a44:	0e 94 c8 2c 	call	0x5990	; 0x5990 <_ZN17DallasTemperature11isConnectedEPhS0_>
    5a48:	88 23       	and	r24, r24
    5a4a:	a9 f0       	breq	.+42     	; 0x5a76 <_ZN17DallasTemperature13getResolutionEPh+0x58>
  {
	switch (scratchPad[CONFIGURATION])
    5a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    5a4e:	8f 33       	cpi	r24, 0x3F	; 63
    5a50:	71 f0       	breq	.+28     	; 0x5a6e <_ZN17DallasTemperature13getResolutionEPh+0x50>
    5a52:	80 34       	cpi	r24, 0x40	; 64
    5a54:	18 f4       	brcc	.+6      	; 0x5a5c <_ZN17DallasTemperature13getResolutionEPh+0x3e>
    5a56:	8f 31       	cpi	r24, 0x1F	; 31
    5a58:	71 f4       	brne	.+28     	; 0x5a76 <_ZN17DallasTemperature13getResolutionEPh+0x58>
    5a5a:	0b c0       	rjmp	.+22     	; 0x5a72 <_ZN17DallasTemperature13getResolutionEPh+0x54>
    5a5c:	8f 35       	cpi	r24, 0x5F	; 95
    5a5e:	19 f0       	breq	.+6      	; 0x5a66 <_ZN17DallasTemperature13getResolutionEPh+0x48>
    5a60:	8f 37       	cpi	r24, 0x7F	; 127
    5a62:	49 f4       	brne	.+18     	; 0x5a76 <_ZN17DallasTemperature13getResolutionEPh+0x58>
    5a64:	02 c0       	rjmp	.+4      	; 0x5a6a <_ZN17DallasTemperature13getResolutionEPh+0x4c>
    5a66:	8b e0       	ldi	r24, 0x0B	; 11
    5a68:	07 c0       	rjmp	.+14     	; 0x5a78 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
    5a6a:	8c e0       	ldi	r24, 0x0C	; 12
    5a6c:	05 c0       	rjmp	.+10     	; 0x5a78 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
    5a6e:	8a e0       	ldi	r24, 0x0A	; 10
    5a70:	03 c0       	rjmp	.+6      	; 0x5a78 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
        
      case TEMP_11_BIT:
        return 11;
        
      case TEMP_10_BIT:
        return 10;
    5a72:	89 e0       	ldi	r24, 0x09	; 9
    5a74:	01 c0       	rjmp	.+2      	; 0x5a78 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
    5a76:	80 e0       	ldi	r24, 0x00	; 0
        return 9;
        
	}
  }
  return 0;
}
    5a78:	29 96       	adiw	r28, 0x09	; 9
    5a7a:	0f b6       	in	r0, 0x3f	; 63
    5a7c:	f8 94       	cli
    5a7e:	de bf       	out	0x3e, r29	; 62
    5a80:	0f be       	out	0x3f, r0	; 63
    5a82:	cd bf       	out	0x3d, r28	; 61
    5a84:	cf 91       	pop	r28
    5a86:	df 91       	pop	r29
    5a88:	08 95       	ret

00005a8a <_ZN17DallasTemperature28requestTemperaturesByAddressEPh>:
}

// sends command for one device to perform a temperature by address
// returns FALSE if device is disconnected
// returns TRUE  otherwise
bool DallasTemperature::requestTemperaturesByAddress(uint8_t* deviceAddress)
    5a8a:	ef 92       	push	r14
    5a8c:	ff 92       	push	r15
    5a8e:	0f 93       	push	r16
    5a90:	1f 93       	push	r17
    5a92:	df 93       	push	r29
    5a94:	cf 93       	push	r28
    5a96:	cd b7       	in	r28, 0x3d	; 61
    5a98:	de b7       	in	r29, 0x3e	; 62
    5a9a:	2a 97       	sbiw	r28, 0x0a	; 10
    5a9c:	0f b6       	in	r0, 0x3f	; 63
    5a9e:	f8 94       	cli
    5aa0:	de bf       	out	0x3e, r29	; 62
    5aa2:	0f be       	out	0x3f, r0	; 63
    5aa4:	cd bf       	out	0x3d, r28	; 61
    5aa6:	8c 01       	movw	r16, r24
    5aa8:	7b 01       	movw	r14, r22
{

  _wire->reset();
    5aaa:	fc 01       	movw	r30, r24
    5aac:	85 81       	ldd	r24, Z+5	; 0x05
    5aae:	96 81       	ldd	r25, Z+6	; 0x06
    5ab0:	0e 94 e9 29 	call	0x53d2	; 0x53d2 <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
    5ab4:	f8 01       	movw	r30, r16
    5ab6:	85 81       	ldd	r24, Z+5	; 0x05
    5ab8:	96 81       	ldd	r25, Z+6	; 0x06
    5aba:	b7 01       	movw	r22, r14
    5abc:	0e 94 c8 29 	call	0x5390	; 0x5390 <_ZN7OneWire6selectEPKh>
  _wire->write(STARTCONVO, parasite);
    5ac0:	f8 01       	movw	r30, r16
    5ac2:	85 81       	ldd	r24, Z+5	; 0x05
    5ac4:	96 81       	ldd	r25, Z+6	; 0x06
    5ac6:	64 e4       	ldi	r22, 0x44	; 68
    5ac8:	40 81       	ld	r20, Z
    5aca:	0e 94 88 29 	call	0x5310	; 0x5310 <_ZN7OneWire5writeEhh>
  
    // check device
  ScratchPad scratchPad;
  if (!isConnected(deviceAddress, scratchPad)) return false;
    5ace:	c8 01       	movw	r24, r16
    5ad0:	b7 01       	movw	r22, r14
    5ad2:	ae 01       	movw	r20, r28
    5ad4:	4e 5f       	subi	r20, 0xFE	; 254
    5ad6:	5f 4f       	sbci	r21, 0xFF	; 255
    5ad8:	0e 94 c8 2c 	call	0x5990	; 0x5990 <_ZN17DallasTemperature11isConnectedEPhS0_>
    5adc:	88 23       	and	r24, r24
    5ade:	89 f0       	breq	.+34     	; 0x5b02 <_ZN17DallasTemperature28requestTemperaturesByAddressEPh+0x78>
  
  
  // ASYNC mode?
  if (!waitForConversion) return true;   
    5ae0:	f8 01       	movw	r30, r16
    5ae2:	82 81       	ldd	r24, Z+2	; 0x02
    5ae4:	88 23       	and	r24, r24
    5ae6:	61 f0       	breq	.+24     	; 0x5b00 <_ZN17DallasTemperature28requestTemperaturesByAddressEPh+0x76>
  uint8_t bitResolution = getResolution(deviceAddress);
    5ae8:	c8 01       	movw	r24, r16
    5aea:	b7 01       	movw	r22, r14
    5aec:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <_ZN17DallasTemperature13getResolutionEPh>
    5af0:	89 83       	std	Y+1, r24	; 0x01
  blockTillConversionComplete(&bitResolution, deviceAddress);
    5af2:	c8 01       	movw	r24, r16
    5af4:	be 01       	movw	r22, r28
    5af6:	6f 5f       	subi	r22, 0xFF	; 255
    5af8:	7f 4f       	sbci	r23, 0xFF	; 255
    5afa:	a7 01       	movw	r20, r14
    5afc:	0e 94 77 2c 	call	0x58ee	; 0x58ee <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>
    5b00:	81 e0       	ldi	r24, 0x01	; 1
  
  return true;
}
    5b02:	2a 96       	adiw	r28, 0x0a	; 10
    5b04:	0f b6       	in	r0, 0x3f	; 63
    5b06:	f8 94       	cli
    5b08:	de bf       	out	0x3e, r29	; 62
    5b0a:	0f be       	out	0x3f, r0	; 63
    5b0c:	cd bf       	out	0x3d, r28	; 61
    5b0e:	cf 91       	pop	r28
    5b10:	df 91       	pop	r29
    5b12:	1f 91       	pop	r17
    5b14:	0f 91       	pop	r16
    5b16:	ff 90       	pop	r15
    5b18:	ef 90       	pop	r14
    5b1a:	08 95       	ret

00005b1c <_ZN17DallasTemperature12validAddressEPh>:
{
  return devices;
}

// returns true if address is valid
bool DallasTemperature::validAddress(uint8_t* deviceAddress)
    5b1c:	0f 93       	push	r16
    5b1e:	1f 93       	push	r17
    5b20:	8b 01       	movw	r16, r22
{
  return (_wire->crc8(deviceAddress, 7) == deviceAddress[7]);
    5b22:	cb 01       	movw	r24, r22
    5b24:	67 e0       	ldi	r22, 0x07	; 7
    5b26:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <_ZN7OneWire4crc8EPKhh>
    5b2a:	20 e0       	ldi	r18, 0x00	; 0
    5b2c:	f8 01       	movw	r30, r16
    5b2e:	97 81       	ldd	r25, Z+7	; 0x07
    5b30:	89 17       	cp	r24, r25
    5b32:	09 f4       	brne	.+2      	; 0x5b36 <_ZN17DallasTemperature12validAddressEPh+0x1a>
    5b34:	21 e0       	ldi	r18, 0x01	; 1
}
    5b36:	82 2f       	mov	r24, r18
    5b38:	1f 91       	pop	r17
    5b3a:	0f 91       	pop	r16
    5b3c:	08 95       	ret

00005b3e <_ZN17DallasTemperature10getAddressEPhh>:

// finds an address at a given index on the bus
// returns true if the device was found
bool DallasTemperature::getAddress(uint8_t* deviceAddress, uint8_t index)
    5b3e:	ef 92       	push	r14
    5b40:	ff 92       	push	r15
    5b42:	0f 93       	push	r16
    5b44:	1f 93       	push	r17
    5b46:	cf 93       	push	r28
    5b48:	df 93       	push	r29
    5b4a:	ec 01       	movw	r28, r24
    5b4c:	7b 01       	movw	r14, r22
    5b4e:	04 2f       	mov	r16, r20
{
  uint8_t depth = 0;

  _wire->reset_search();
    5b50:	8d 81       	ldd	r24, Y+5	; 0x05
    5b52:	9e 81       	ldd	r25, Y+6	; 0x06
    5b54:	0e 94 e5 28 	call	0x51ca	; 0x51ca <_ZN7OneWire12reset_searchEv>
    5b58:	10 e0       	ldi	r17, 0x00	; 0
    5b5a:	07 c0       	rjmp	.+14     	; 0x5b6a <_ZN17DallasTemperature10getAddressEPhh+0x2c>

  while (depth <= index && _wire->search(deviceAddress))
  {
    if (depth == index && validAddress(deviceAddress)) return true;
    5b5c:	ce 01       	movw	r24, r28
    5b5e:	b7 01       	movw	r22, r14
    5b60:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <_ZN17DallasTemperature12validAddressEPh>
    5b64:	88 23       	and	r24, r24
    5b66:	a9 f0       	breq	.+42     	; 0x5b92 <_ZN17DallasTemperature10getAddressEPhh+0x54>
    5b68:	0a c0       	rjmp	.+20     	; 0x5b7e <_ZN17DallasTemperature10getAddressEPhh+0x40>
{
  uint8_t depth = 0;

  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
    5b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    5b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    5b6e:	b7 01       	movw	r22, r14
    5b70:	0e 94 34 2a 	call	0x5468	; 0x5468 <_ZN7OneWire6searchEPh>
    5b74:	88 23       	and	r24, r24
    5b76:	29 f0       	breq	.+10     	; 0x5b82 <_ZN17DallasTemperature10getAddressEPhh+0x44>
  {
    if (depth == index && validAddress(deviceAddress)) return true;
    5b78:	10 17       	cp	r17, r16
    5b7a:	59 f4       	brne	.+22     	; 0x5b92 <_ZN17DallasTemperature10getAddressEPhh+0x54>
    5b7c:	ef cf       	rjmp	.-34     	; 0x5b5c <_ZN17DallasTemperature10getAddressEPhh+0x1e>
    5b7e:	81 e0       	ldi	r24, 0x01	; 1
    5b80:	01 c0       	rjmp	.+2      	; 0x5b84 <_ZN17DallasTemperature10getAddressEPhh+0x46>
    5b82:	80 e0       	ldi	r24, 0x00	; 0
    depth++;
  }

  return false;
}
    5b84:	df 91       	pop	r29
    5b86:	cf 91       	pop	r28
    5b88:	1f 91       	pop	r17
    5b8a:	0f 91       	pop	r16
    5b8c:	ff 90       	pop	r15
    5b8e:	ef 90       	pop	r14
    5b90:	08 95       	ret
  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
  {
    if (depth == index && validAddress(deviceAddress)) return true;
    depth++;
    5b92:	1f 5f       	subi	r17, 0xFF	; 255
{
  uint8_t depth = 0;

  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
    5b94:	01 17       	cp	r16, r17
    5b96:	a8 f3       	brcs	.-22     	; 0x5b82 <_ZN17DallasTemperature10getAddressEPhh+0x44>
    5b98:	e8 cf       	rjmp	.-48     	; 0x5b6a <_ZN17DallasTemperature10getAddressEPhh+0x2c>

00005b9a <_ZN17DallasTemperature5beginEv>:
  waitForConversion = true;
  checkForConversion = true;
}

// initialise the bus
void DallasTemperature::begin(void)
    5b9a:	af 92       	push	r10
    5b9c:	bf 92       	push	r11
    5b9e:	cf 92       	push	r12
    5ba0:	df 92       	push	r13
    5ba2:	ef 92       	push	r14
    5ba4:	ff 92       	push	r15
    5ba6:	0f 93       	push	r16
    5ba8:	1f 93       	push	r17
    5baa:	df 93       	push	r29
    5bac:	cf 93       	push	r28
    5bae:	cd b7       	in	r28, 0x3d	; 61
    5bb0:	de b7       	in	r29, 0x3e	; 62
    5bb2:	61 97       	sbiw	r28, 0x11	; 17
    5bb4:	0f b6       	in	r0, 0x3f	; 63
    5bb6:	f8 94       	cli
    5bb8:	de bf       	out	0x3e, r29	; 62
    5bba:	0f be       	out	0x3f, r0	; 63
    5bbc:	cd bf       	out	0x3d, r28	; 61
    5bbe:	7c 01       	movw	r14, r24
{
  DeviceAddress deviceAddress;

  _wire->reset_search();
    5bc0:	fc 01       	movw	r30, r24
    5bc2:	85 81       	ldd	r24, Z+5	; 0x05
    5bc4:	96 81       	ldd	r25, Z+6	; 0x06
    5bc6:	0e 94 e5 28 	call	0x51ca	; 0x51ca <_ZN7OneWire12reset_searchEv>
  devices = 0; // Reset the number of devices when we enumerate wire devices
    5bca:	f7 01       	movw	r30, r14
    5bcc:	14 82       	std	Z+4, r1	; 0x04

  while (_wire->search(deviceAddress))
    5bce:	6e 01       	movw	r12, r28
    5bd0:	08 94       	sec
    5bd2:	c1 1c       	adc	r12, r1
    5bd4:	d1 1c       	adc	r13, r1
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;

      ScratchPad scratchPad;

      readScratchPad(deviceAddress, scratchPad);
    5bd6:	79 e0       	ldi	r23, 0x09	; 9
    5bd8:	a7 2e       	mov	r10, r23
    5bda:	b1 2c       	mov	r11, r1
    5bdc:	ac 0e       	add	r10, r28
    5bde:	bd 1e       	adc	r11, r29

  while (_wire->search(deviceAddress))
  {
    if (validAddress(deviceAddress))
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;
    5be0:	01 e0       	ldi	r16, 0x01	; 1
    5be2:	2b c0       	rjmp	.+86     	; 0x5c3a <_ZN17DallasTemperature5beginEv+0xa0>
  _wire->reset_search();
  devices = 0; // Reset the number of devices when we enumerate wire devices

  while (_wire->search(deviceAddress))
  {
    if (validAddress(deviceAddress))
    5be4:	c7 01       	movw	r24, r14
    5be6:	b6 01       	movw	r22, r12
    5be8:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <_ZN17DallasTemperature12validAddressEPh>
    5bec:	88 23       	and	r24, r24
    5bee:	29 f1       	breq	.+74     	; 0x5c3a <_ZN17DallasTemperature5beginEv+0xa0>
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;
    5bf0:	f7 01       	movw	r30, r14
    5bf2:	80 81       	ld	r24, Z
    5bf4:	88 23       	and	r24, r24
    5bf6:	41 f4       	brne	.+16     	; 0x5c08 <_ZN17DallasTemperature5beginEv+0x6e>
    5bf8:	c7 01       	movw	r24, r14
    5bfa:	b6 01       	movw	r22, r12
    5bfc:	0e 94 ca 2b 	call	0x5794	; 0x5794 <_ZN17DallasTemperature15readPowerSupplyEPh>
    5c00:	88 23       	and	r24, r24
    5c02:	11 f0       	breq	.+4      	; 0x5c08 <_ZN17DallasTemperature5beginEv+0x6e>
    5c04:	f7 01       	movw	r30, r14
    5c06:	00 83       	st	Z, r16

      ScratchPad scratchPad;

      readScratchPad(deviceAddress, scratchPad);
    5c08:	c7 01       	movw	r24, r14
    5c0a:	b6 01       	movw	r22, r12
    5c0c:	a5 01       	movw	r20, r10
    5c0e:	0e 94 f6 2b 	call	0x57ec	; 0x57ec <_ZN17DallasTemperature14readScratchPadEPhS0_>

	  bitResolution = max(bitResolution, getResolution(deviceAddress));
    5c12:	f7 01       	movw	r30, r14
    5c14:	11 81       	ldd	r17, Z+1	; 0x01
    5c16:	c7 01       	movw	r24, r14
    5c18:	b6 01       	movw	r22, r12
    5c1a:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <_ZN17DallasTemperature13getResolutionEPh>
    5c1e:	81 17       	cp	r24, r17
    5c20:	18 f4       	brcc	.+6      	; 0x5c28 <_ZN17DallasTemperature5beginEv+0x8e>
    5c22:	f7 01       	movw	r30, r14
    5c24:	81 81       	ldd	r24, Z+1	; 0x01
    5c26:	04 c0       	rjmp	.+8      	; 0x5c30 <_ZN17DallasTemperature5beginEv+0x96>
    5c28:	c7 01       	movw	r24, r14
    5c2a:	b6 01       	movw	r22, r12
    5c2c:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <_ZN17DallasTemperature13getResolutionEPh>
    5c30:	f7 01       	movw	r30, r14
    5c32:	81 83       	std	Z+1, r24	; 0x01

      devices++;
    5c34:	84 81       	ldd	r24, Z+4	; 0x04
    5c36:	8f 5f       	subi	r24, 0xFF	; 255
    5c38:	84 83       	std	Z+4, r24	; 0x04
  DeviceAddress deviceAddress;

  _wire->reset_search();
  devices = 0; // Reset the number of devices when we enumerate wire devices

  while (_wire->search(deviceAddress))
    5c3a:	f7 01       	movw	r30, r14
    5c3c:	85 81       	ldd	r24, Z+5	; 0x05
    5c3e:	96 81       	ldd	r25, Z+6	; 0x06
    5c40:	b6 01       	movw	r22, r12
    5c42:	0e 94 34 2a 	call	0x5468	; 0x5468 <_ZN7OneWire6searchEPh>
    5c46:	88 23       	and	r24, r24
    5c48:	69 f6       	brne	.-102    	; 0x5be4 <_ZN17DallasTemperature5beginEv+0x4a>
	  bitResolution = max(bitResolution, getResolution(deviceAddress));

      devices++;
    }
  }
}
    5c4a:	61 96       	adiw	r28, 0x11	; 17
    5c4c:	0f b6       	in	r0, 0x3f	; 63
    5c4e:	f8 94       	cli
    5c50:	de bf       	out	0x3e, r29	; 62
    5c52:	0f be       	out	0x3f, r0	; 63
    5c54:	cd bf       	out	0x3d, r28	; 61
    5c56:	cf 91       	pop	r28
    5c58:	df 91       	pop	r29
    5c5a:	1f 91       	pop	r17
    5c5c:	0f 91       	pop	r16
    5c5e:	ff 90       	pop	r15
    5c60:	ef 90       	pop	r14
    5c62:	df 90       	pop	r13
    5c64:	cf 90       	pop	r12
    5c66:	bf 90       	pop	r11
    5c68:	af 90       	pop	r10
    5c6a:	08 95       	ret

00005c6c <malloc>:
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	if (len < sizeof(struct __freelist) - sizeof(size_t))
    5c6c:	0f 93       	push	r16
    5c6e:	1f 93       	push	r17
    5c70:	cf 93       	push	r28
    5c72:	df 93       	push	r29
    5c74:	bc 01       	movw	r22, r24
    5c76:	82 30       	cpi	r24, 0x02	; 2
    5c78:	91 05       	cpc	r25, r1
    5c7a:	10 f4       	brcc	.+4      	; 0x5c80 <malloc+0x14>
    5c7c:	62 e0       	ldi	r22, 0x02	; 2
    5c7e:	70 e0       	ldi	r23, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    5c80:	e0 91 d0 03 	lds	r30, 0x03D0
    5c84:	f0 91 d1 03 	lds	r31, 0x03D1
    5c88:	a0 e0       	ldi	r26, 0x00	; 0
    5c8a:	b0 e0       	ldi	r27, 0x00	; 0
    5c8c:	40 e0       	ldi	r20, 0x00	; 0
    5c8e:	50 e0       	ldi	r21, 0x00	; 0
    5c90:	24 c0       	rjmp	.+72     	; 0x5cda <malloc+0x6e>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    5c92:	80 81       	ld	r24, Z
    5c94:	91 81       	ldd	r25, Z+1	; 0x01
    5c96:	86 17       	cp	r24, r22
    5c98:	97 07       	cpc	r25, r23
    5c9a:	d0 f0       	brcs	.+52     	; 0x5cd0 <malloc+0x64>
			continue;
		if (fp1->sz == len) {
    5c9c:	86 17       	cp	r24, r22
    5c9e:	97 07       	cpc	r25, r23
    5ca0:	71 f4       	brne	.+28     	; 0x5cbe <malloc+0x52>
    5ca2:	82 81       	ldd	r24, Z+2	; 0x02
    5ca4:	93 81       	ldd	r25, Z+3	; 0x03
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    5ca6:	10 97       	sbiw	r26, 0x00	; 0
    5ca8:	29 f0       	breq	.+10     	; 0x5cb4 <malloc+0x48>
				fp2->nx = fp1->nx;
    5caa:	13 96       	adiw	r26, 0x03	; 3
    5cac:	9c 93       	st	X, r25
    5cae:	8e 93       	st	-X, r24
    5cb0:	12 97       	sbiw	r26, 0x02	; 2
    5cb2:	2c c0       	rjmp	.+88     	; 0x5d0c <malloc+0xa0>
			else
				__flp = fp1->nx;
    5cb4:	90 93 d1 03 	sts	0x03D1, r25
    5cb8:	80 93 d0 03 	sts	0x03D0, r24
    5cbc:	27 c0       	rjmp	.+78     	; 0x5d0c <malloc+0xa0>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    5cbe:	41 15       	cp	r20, r1
    5cc0:	51 05       	cpc	r21, r1
    5cc2:	19 f0       	breq	.+6      	; 0x5cca <malloc+0x5e>
    5cc4:	84 17       	cp	r24, r20
    5cc6:	95 07       	cpc	r25, r21
    5cc8:	18 f4       	brcc	.+6      	; 0x5cd0 <malloc+0x64>
    5cca:	ef 01       	movw	r28, r30
    5ccc:	8d 01       	movw	r16, r26
    5cce:	ac 01       	movw	r20, r24
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    5cd0:	df 01       	movw	r26, r30
    5cd2:	82 81       	ldd	r24, Z+2	; 0x02
    5cd4:	93 81       	ldd	r25, Z+3	; 0x03
    5cd6:	9c 01       	movw	r18, r24
    5cd8:	f9 01       	movw	r30, r18
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
    5cda:	30 97       	sbiw	r30, 0x00	; 0
    5cdc:	d1 f6       	brne	.-76     	; 0x5c92 <malloc+0x26>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    5cde:	41 15       	cp	r20, r1
    5ce0:	51 05       	cpc	r21, r1
    5ce2:	f9 f0       	breq	.+62     	; 0x5d22 <malloc+0xb6>
		if (s - len < sizeof(struct __freelist)) {
    5ce4:	ca 01       	movw	r24, r20
    5ce6:	86 1b       	sub	r24, r22
    5ce8:	97 0b       	sbc	r25, r23
    5cea:	84 30       	cpi	r24, 0x04	; 4
    5cec:	91 05       	cpc	r25, r1
    5cee:	80 f4       	brcc	.+32     	; 0x5d10 <malloc+0xa4>
    5cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    5cf2:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    5cf4:	01 15       	cp	r16, r1
    5cf6:	11 05       	cpc	r17, r1
    5cf8:	21 f0       	breq	.+8      	; 0x5d02 <malloc+0x96>
				sfp2->nx = sfp1->nx;
    5cfa:	f8 01       	movw	r30, r16
    5cfc:	93 83       	std	Z+3, r25	; 0x03
    5cfe:	82 83       	std	Z+2, r24	; 0x02
    5d00:	04 c0       	rjmp	.+8      	; 0x5d0a <malloc+0x9e>
			else
				__flp = sfp1->nx;
    5d02:	90 93 d1 03 	sts	0x03D1, r25
    5d06:	80 93 d0 03 	sts	0x03D0, r24
			return &(sfp1->nx);
    5d0a:	fe 01       	movw	r30, r28
    5d0c:	32 96       	adiw	r30, 0x02	; 2
    5d0e:	45 c0       	rjmp	.+138    	; 0x5d9a <malloc+0x12e>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    5d10:	fe 01       	movw	r30, r28
    5d12:	e8 0f       	add	r30, r24
    5d14:	f9 1f       	adc	r31, r25
    5d16:	61 93       	st	Z+, r22
    5d18:	71 93       	st	Z+, r23
		sfp1->sz = s - sizeof(size_t);
    5d1a:	02 97       	sbiw	r24, 0x02	; 2
    5d1c:	99 83       	std	Y+1, r25	; 0x01
    5d1e:	88 83       	st	Y, r24
    5d20:	3c c0       	rjmp	.+120    	; 0x5d9a <malloc+0x12e>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
    5d22:	80 91 ce 03 	lds	r24, 0x03CE
    5d26:	90 91 cf 03 	lds	r25, 0x03CF
    5d2a:	89 2b       	or	r24, r25
    5d2c:	41 f4       	brne	.+16     	; 0x5d3e <malloc+0xd2>
		__brkval = __malloc_heap_start;
    5d2e:	80 91 0b 01 	lds	r24, 0x010B
    5d32:	90 91 0c 01 	lds	r25, 0x010C
    5d36:	90 93 cf 03 	sts	0x03CF, r25
    5d3a:	80 93 ce 03 	sts	0x03CE, r24
	cp = __malloc_heap_end;
    5d3e:	40 91 0d 01 	lds	r20, 0x010D
    5d42:	50 91 0e 01 	lds	r21, 0x010E
	if (cp == 0)
    5d46:	41 15       	cp	r20, r1
    5d48:	51 05       	cpc	r21, r1
    5d4a:	41 f4       	brne	.+16     	; 0x5d5c <malloc+0xf0>
		cp = STACK_POINTER() - __malloc_margin;
    5d4c:	4d b7       	in	r20, 0x3d	; 61
    5d4e:	5e b7       	in	r21, 0x3e	; 62
    5d50:	80 91 09 01 	lds	r24, 0x0109
    5d54:	90 91 0a 01 	lds	r25, 0x010A
    5d58:	48 1b       	sub	r20, r24
    5d5a:	59 0b       	sbc	r21, r25
	if (cp <= __brkval)
    5d5c:	20 91 ce 03 	lds	r18, 0x03CE
    5d60:	30 91 cf 03 	lds	r19, 0x03CF
    5d64:	24 17       	cp	r18, r20
    5d66:	35 07       	cpc	r19, r21
    5d68:	b0 f4       	brcc	.+44     	; 0x5d96 <malloc+0x12a>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    5d6a:	ca 01       	movw	r24, r20
    5d6c:	82 1b       	sub	r24, r18
    5d6e:	93 0b       	sbc	r25, r19
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    5d70:	86 17       	cp	r24, r22
    5d72:	97 07       	cpc	r25, r23
    5d74:	80 f0       	brcs	.+32     	; 0x5d96 <malloc+0x12a>
    5d76:	ab 01       	movw	r20, r22
    5d78:	4e 5f       	subi	r20, 0xFE	; 254
    5d7a:	5f 4f       	sbci	r21, 0xFF	; 255
    5d7c:	84 17       	cp	r24, r20
    5d7e:	95 07       	cpc	r25, r21
    5d80:	50 f0       	brcs	.+20     	; 0x5d96 <malloc+0x12a>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    5d82:	42 0f       	add	r20, r18
    5d84:	53 1f       	adc	r21, r19
    5d86:	50 93 cf 03 	sts	0x03CF, r21
    5d8a:	40 93 ce 03 	sts	0x03CE, r20
		fp1->sz = len;
    5d8e:	f9 01       	movw	r30, r18
    5d90:	61 93       	st	Z+, r22
    5d92:	71 93       	st	Z+, r23
    5d94:	02 c0       	rjmp	.+4      	; 0x5d9a <malloc+0x12e>
		return &(fp1->nx);
    5d96:	e0 e0       	ldi	r30, 0x00	; 0
    5d98:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
    5d9a:	cf 01       	movw	r24, r30
    5d9c:	df 91       	pop	r29
    5d9e:	cf 91       	pop	r28
    5da0:	1f 91       	pop	r17
    5da2:	0f 91       	pop	r16
    5da4:	08 95       	ret

00005da6 <free>:
{
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    5da6:	cf 93       	push	r28
    5da8:	df 93       	push	r29
    5daa:	9c 01       	movw	r18, r24
    5dac:	00 97       	sbiw	r24, 0x00	; 0
    5dae:	09 f4       	brne	.+2      	; 0x5db2 <free+0xc>
    5db0:	8f c0       	rjmp	.+286    	; 0x5ed0 <free+0x12a>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    5db2:	ec 01       	movw	r28, r24
    5db4:	22 97       	sbiw	r28, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    5db6:	1b 82       	std	Y+3, r1	; 0x03
    5db8:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    5dba:	60 91 d0 03 	lds	r22, 0x03D0
    5dbe:	70 91 d1 03 	lds	r23, 0x03D1
    5dc2:	61 15       	cp	r22, r1
    5dc4:	71 05       	cpc	r23, r1
    5dc6:	81 f4       	brne	.+32     	; 0x5de8 <free+0x42>
		if ((char *)p + fpnew->sz == __brkval)
    5dc8:	88 81       	ld	r24, Y
    5dca:	99 81       	ldd	r25, Y+1	; 0x01
    5dcc:	82 0f       	add	r24, r18
    5dce:	93 1f       	adc	r25, r19
    5dd0:	20 91 ce 03 	lds	r18, 0x03CE
    5dd4:	30 91 cf 03 	lds	r19, 0x03CF
    5dd8:	28 17       	cp	r18, r24
    5dda:	39 07       	cpc	r19, r25
    5ddc:	39 f5       	brne	.+78     	; 0x5e2c <free+0x86>
			__brkval = cpnew;
    5dde:	d0 93 cf 03 	sts	0x03CF, r29
    5de2:	c0 93 ce 03 	sts	0x03CE, r28
    5de6:	74 c0       	rjmp	.+232    	; 0x5ed0 <free+0x12a>
		else
			__flp = fpnew;
    5de8:	db 01       	movw	r26, r22
    5dea:	40 e0       	ldi	r20, 0x00	; 0
    5dec:	50 e0       	ldi	r21, 0x00	; 0
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    5dee:	ac 17       	cp	r26, r28
    5df0:	bd 07       	cpc	r27, r29
    5df2:	08 f1       	brcs	.+66     	; 0x5e36 <free+0x90>
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    5df4:	bb 83       	std	Y+3, r27	; 0x03
    5df6:	aa 83       	std	Y+2, r26	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    5df8:	fe 01       	movw	r30, r28
    5dfa:	21 91       	ld	r18, Z+
    5dfc:	31 91       	ld	r19, Z+
    5dfe:	e2 0f       	add	r30, r18
    5e00:	f3 1f       	adc	r31, r19
    5e02:	ae 17       	cp	r26, r30
    5e04:	bf 07       	cpc	r27, r31
    5e06:	79 f4       	brne	.+30     	; 0x5e26 <free+0x80>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    5e08:	8d 91       	ld	r24, X+
    5e0a:	9c 91       	ld	r25, X
    5e0c:	11 97       	sbiw	r26, 0x01	; 1
    5e0e:	28 0f       	add	r18, r24
    5e10:	39 1f       	adc	r19, r25
    5e12:	2e 5f       	subi	r18, 0xFE	; 254
    5e14:	3f 4f       	sbci	r19, 0xFF	; 255
    5e16:	39 83       	std	Y+1, r19	; 0x01
    5e18:	28 83       	st	Y, r18
			fpnew->nx = fp1->nx;
    5e1a:	12 96       	adiw	r26, 0x02	; 2
    5e1c:	8d 91       	ld	r24, X+
    5e1e:	9c 91       	ld	r25, X
    5e20:	13 97       	sbiw	r26, 0x03	; 3
    5e22:	9b 83       	std	Y+3, r25	; 0x03
    5e24:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (fp2 == 0) {
    5e26:	41 15       	cp	r20, r1
    5e28:	51 05       	cpc	r21, r1
    5e2a:	71 f4       	brne	.+28     	; 0x5e48 <free+0xa2>
			/* new head of freelist */
			__flp = fpnew;
    5e2c:	d0 93 d1 03 	sts	0x03D1, r29
    5e30:	c0 93 d0 03 	sts	0x03D0, r28
    5e34:	4d c0       	rjmp	.+154    	; 0x5ed0 <free+0x12a>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    5e36:	12 96       	adiw	r26, 0x02	; 2
    5e38:	8d 91       	ld	r24, X+
    5e3a:	9c 91       	ld	r25, X
    5e3c:	13 97       	sbiw	r26, 0x03	; 3
    5e3e:	ad 01       	movw	r20, r26
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
    5e40:	00 97       	sbiw	r24, 0x00	; 0
    5e42:	11 f0       	breq	.+4      	; 0x5e48 <free+0xa2>
    5e44:	dc 01       	movw	r26, r24
    5e46:	d3 cf       	rjmp	.-90     	; 0x5dee <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    5e48:	da 01       	movw	r26, r20
    5e4a:	13 96       	adiw	r26, 0x03	; 3
    5e4c:	dc 93       	st	X, r29
    5e4e:	ce 93       	st	-X, r28
    5e50:	12 97       	sbiw	r26, 0x02	; 2
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    5e52:	fa 01       	movw	r30, r20
    5e54:	21 91       	ld	r18, Z+
    5e56:	31 91       	ld	r19, Z+
    5e58:	e2 0f       	add	r30, r18
    5e5a:	f3 1f       	adc	r31, r19
    5e5c:	ce 17       	cp	r28, r30
    5e5e:	df 07       	cpc	r29, r31
    5e60:	69 f4       	brne	.+26     	; 0x5e7c <free+0xd6>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    5e62:	88 81       	ld	r24, Y
    5e64:	99 81       	ldd	r25, Y+1	; 0x01
    5e66:	28 0f       	add	r18, r24
    5e68:	39 1f       	adc	r19, r25
    5e6a:	2e 5f       	subi	r18, 0xFE	; 254
    5e6c:	3f 4f       	sbci	r19, 0xFF	; 255
    5e6e:	fa 01       	movw	r30, r20
    5e70:	31 83       	std	Z+1, r19	; 0x01
    5e72:	20 83       	st	Z, r18
		fp2->nx = fpnew->nx;
    5e74:	8a 81       	ldd	r24, Y+2	; 0x02
    5e76:	9b 81       	ldd	r25, Y+3	; 0x03
    5e78:	93 83       	std	Z+3, r25	; 0x03
    5e7a:	82 83       	std	Z+2, r24	; 0x02
    5e7c:	e0 e0       	ldi	r30, 0x00	; 0
    5e7e:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1->nx != 0;
    5e80:	db 01       	movw	r26, r22
    5e82:	12 96       	adiw	r26, 0x02	; 2
    5e84:	8d 91       	ld	r24, X+
    5e86:	9c 91       	ld	r25, X
    5e88:	13 97       	sbiw	r26, 0x03	; 3
    5e8a:	00 97       	sbiw	r24, 0x00	; 0
    5e8c:	19 f0       	breq	.+6      	; 0x5e94 <free+0xee>
    5e8e:	bc 01       	movw	r22, r24
    5e90:	fd 01       	movw	r30, r26
    5e92:	f6 cf       	rjmp	.-20     	; 0x5e80 <free+0xda>
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
    5e94:	ab 01       	movw	r20, r22
    5e96:	4e 5f       	subi	r20, 0xFE	; 254
    5e98:	5f 4f       	sbci	r21, 0xFF	; 255
	if (cp2 + fp1->sz == __brkval) {
    5e9a:	db 01       	movw	r26, r22
    5e9c:	8d 91       	ld	r24, X+
    5e9e:	9c 91       	ld	r25, X
    5ea0:	84 0f       	add	r24, r20
    5ea2:	95 1f       	adc	r25, r21
    5ea4:	20 91 ce 03 	lds	r18, 0x03CE
    5ea8:	30 91 cf 03 	lds	r19, 0x03CF
    5eac:	28 17       	cp	r18, r24
    5eae:	39 07       	cpc	r19, r25
    5eb0:	79 f4       	brne	.+30     	; 0x5ed0 <free+0x12a>
		if (fp2 == NULL)
    5eb2:	30 97       	sbiw	r30, 0x00	; 0
    5eb4:	29 f4       	brne	.+10     	; 0x5ec0 <free+0x11a>
			/* Freelist is empty now. */
			__flp = NULL;
    5eb6:	10 92 d1 03 	sts	0x03D1, r1
    5eba:	10 92 d0 03 	sts	0x03D0, r1
    5ebe:	02 c0       	rjmp	.+4      	; 0x5ec4 <free+0x11e>
		else
			fp2->nx = NULL;
    5ec0:	13 82       	std	Z+3, r1	; 0x03
    5ec2:	12 82       	std	Z+2, r1	; 0x02
		__brkval = cp2 - sizeof(size_t);
    5ec4:	42 50       	subi	r20, 0x02	; 2
    5ec6:	50 40       	sbci	r21, 0x00	; 0
    5ec8:	50 93 cf 03 	sts	0x03CF, r21
    5ecc:	40 93 ce 03 	sts	0x03CE, r20
	}
}
    5ed0:	df 91       	pop	r29
    5ed2:	cf 91       	pop	r28
    5ed4:	08 95       	ret

00005ed6 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    5ed6:	1f 92       	push	r1
    5ed8:	0f 92       	push	r0
    5eda:	0f b6       	in	r0, 0x3f	; 63
    5edc:	0f 92       	push	r0
    5ede:	11 24       	eor	r1, r1
    5ee0:	2f 93       	push	r18
    5ee2:	3f 93       	push	r19
    5ee4:	8f 93       	push	r24
    5ee6:	9f 93       	push	r25
    5ee8:	af 93       	push	r26
    5eea:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    5eec:	80 91 1e 03 	lds	r24, 0x031E
    5ef0:	90 91 1f 03 	lds	r25, 0x031F
    5ef4:	a0 91 20 03 	lds	r26, 0x0320
    5ef8:	b0 91 21 03 	lds	r27, 0x0321
	unsigned char f = timer0_fract;
    5efc:	30 91 22 03 	lds	r19, 0x0322

	m += MILLIS_INC;
    5f00:	01 96       	adiw	r24, 0x01	; 1
    5f02:	a1 1d       	adc	r26, r1
    5f04:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    5f06:	23 2f       	mov	r18, r19
    5f08:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    5f0a:	2d 37       	cpi	r18, 0x7D	; 125
    5f0c:	20 f0       	brcs	.+8      	; 0x5f16 <__vector_16+0x40>
		f -= FRACT_MAX;
    5f0e:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    5f10:	01 96       	adiw	r24, 0x01	; 1
    5f12:	a1 1d       	adc	r26, r1
    5f14:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    5f16:	20 93 22 03 	sts	0x0322, r18
	timer0_millis = m;
    5f1a:	80 93 1e 03 	sts	0x031E, r24
    5f1e:	90 93 1f 03 	sts	0x031F, r25
    5f22:	a0 93 20 03 	sts	0x0320, r26
    5f26:	b0 93 21 03 	sts	0x0321, r27
	timer0_overflow_count++;
    5f2a:	80 91 1a 03 	lds	r24, 0x031A
    5f2e:	90 91 1b 03 	lds	r25, 0x031B
    5f32:	a0 91 1c 03 	lds	r26, 0x031C
    5f36:	b0 91 1d 03 	lds	r27, 0x031D
    5f3a:	01 96       	adiw	r24, 0x01	; 1
    5f3c:	a1 1d       	adc	r26, r1
    5f3e:	b1 1d       	adc	r27, r1
    5f40:	80 93 1a 03 	sts	0x031A, r24
    5f44:	90 93 1b 03 	sts	0x031B, r25
    5f48:	a0 93 1c 03 	sts	0x031C, r26
    5f4c:	b0 93 1d 03 	sts	0x031D, r27
}
    5f50:	bf 91       	pop	r27
    5f52:	af 91       	pop	r26
    5f54:	9f 91       	pop	r25
    5f56:	8f 91       	pop	r24
    5f58:	3f 91       	pop	r19
    5f5a:	2f 91       	pop	r18
    5f5c:	0f 90       	pop	r0
    5f5e:	0f be       	out	0x3f, r0	; 63
    5f60:	0f 90       	pop	r0
    5f62:	1f 90       	pop	r1
    5f64:	18 95       	reti

00005f66 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    5f66:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    5f68:	f8 94       	cli
	m = timer0_millis;
    5f6a:	20 91 1e 03 	lds	r18, 0x031E
    5f6e:	30 91 1f 03 	lds	r19, 0x031F
    5f72:	40 91 20 03 	lds	r20, 0x0320
    5f76:	50 91 21 03 	lds	r21, 0x0321
	SREG = oldSREG;
    5f7a:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    5f7c:	b9 01       	movw	r22, r18
    5f7e:	ca 01       	movw	r24, r20
    5f80:	08 95       	ret

00005f82 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    5f82:	9b 01       	movw	r18, r22
    5f84:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    5f86:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    5f88:	f8 94       	cli
	m = timer0_overflow_count;
    5f8a:	80 91 1a 03 	lds	r24, 0x031A
    5f8e:	90 91 1b 03 	lds	r25, 0x031B
    5f92:	a0 91 1c 03 	lds	r26, 0x031C
    5f96:	b0 91 1d 03 	lds	r27, 0x031D
#if defined(TCNT0)
	t = TCNT0;
    5f9a:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    5f9c:	a8 9b       	sbis	0x15, 0	; 21
    5f9e:	05 c0       	rjmp	.+10     	; 0x5faa <delay+0x28>
    5fa0:	6f 3f       	cpi	r22, 0xFF	; 255
    5fa2:	19 f0       	breq	.+6      	; 0x5faa <delay+0x28>
		m++;
    5fa4:	01 96       	adiw	r24, 0x01	; 1
    5fa6:	a1 1d       	adc	r26, r1
    5fa8:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    5faa:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    5fac:	ba 2f       	mov	r27, r26
    5fae:	a9 2f       	mov	r26, r25
    5fb0:	98 2f       	mov	r25, r24
    5fb2:	88 27       	eor	r24, r24
    5fb4:	86 0f       	add	r24, r22
    5fb6:	91 1d       	adc	r25, r1
    5fb8:	a1 1d       	adc	r26, r1
    5fba:	b1 1d       	adc	r27, r1
    5fbc:	62 e0       	ldi	r22, 0x02	; 2
    5fbe:	88 0f       	add	r24, r24
    5fc0:	99 1f       	adc	r25, r25
    5fc2:	aa 1f       	adc	r26, r26
    5fc4:	bb 1f       	adc	r27, r27
    5fc6:	6a 95       	dec	r22
    5fc8:	d1 f7       	brne	.-12     	; 0x5fbe <delay+0x3c>
    5fca:	bc 01       	movw	r22, r24
    5fcc:	2d c0       	rjmp	.+90     	; 0x6028 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    5fce:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    5fd0:	f8 94       	cli
	m = timer0_overflow_count;
    5fd2:	80 91 1a 03 	lds	r24, 0x031A
    5fd6:	90 91 1b 03 	lds	r25, 0x031B
    5fda:	a0 91 1c 03 	lds	r26, 0x031C
    5fde:	b0 91 1d 03 	lds	r27, 0x031D
#if defined(TCNT0)
	t = TCNT0;
    5fe2:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    5fe4:	a8 9b       	sbis	0x15, 0	; 21
    5fe6:	05 c0       	rjmp	.+10     	; 0x5ff2 <delay+0x70>
    5fe8:	ef 3f       	cpi	r30, 0xFF	; 255
    5fea:	19 f0       	breq	.+6      	; 0x5ff2 <delay+0x70>
		m++;
    5fec:	01 96       	adiw	r24, 0x01	; 1
    5fee:	a1 1d       	adc	r26, r1
    5ff0:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    5ff2:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    5ff4:	ba 2f       	mov	r27, r26
    5ff6:	a9 2f       	mov	r26, r25
    5ff8:	98 2f       	mov	r25, r24
    5ffa:	88 27       	eor	r24, r24
    5ffc:	8e 0f       	add	r24, r30
    5ffe:	91 1d       	adc	r25, r1
    6000:	a1 1d       	adc	r26, r1
    6002:	b1 1d       	adc	r27, r1
    6004:	e2 e0       	ldi	r30, 0x02	; 2
    6006:	88 0f       	add	r24, r24
    6008:	99 1f       	adc	r25, r25
    600a:	aa 1f       	adc	r26, r26
    600c:	bb 1f       	adc	r27, r27
    600e:	ea 95       	dec	r30
    6010:	d1 f7       	brne	.-12     	; 0x6006 <delay+0x84>
    6012:	86 1b       	sub	r24, r22
    6014:	97 0b       	sbc	r25, r23
    6016:	88 5e       	subi	r24, 0xE8	; 232
    6018:	93 40       	sbci	r25, 0x03	; 3
    601a:	c8 f2       	brcs	.-78     	; 0x5fce <delay+0x4c>
			ms--;
    601c:	21 50       	subi	r18, 0x01	; 1
    601e:	30 40       	sbci	r19, 0x00	; 0
    6020:	40 40       	sbci	r20, 0x00	; 0
    6022:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    6024:	68 51       	subi	r22, 0x18	; 24
    6026:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    6028:	21 15       	cp	r18, r1
    602a:	31 05       	cpc	r19, r1
    602c:	41 05       	cpc	r20, r1
    602e:	51 05       	cpc	r21, r1
    6030:	71 f6       	brne	.-100    	; 0x5fce <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    6032:	08 95       	ret

00006034 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    6034:	01 97       	sbiw	r24, 0x01	; 1
    6036:	39 f0       	breq	.+14     	; 0x6046 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    6038:	88 0f       	add	r24, r24
    603a:	99 1f       	adc	r25, r25
    603c:	88 0f       	add	r24, r24
    603e:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    6040:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    6042:	01 97       	sbiw	r24, 0x01	; 1
    6044:	f1 f7       	brne	.-4      	; 0x6042 <delayMicroseconds+0xe>
    6046:	08 95       	ret

00006048 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    6048:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    604a:	84 b5       	in	r24, 0x24	; 36
    604c:	82 60       	ori	r24, 0x02	; 2
    604e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    6050:	84 b5       	in	r24, 0x24	; 36
    6052:	81 60       	ori	r24, 0x01	; 1
    6054:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    6056:	85 b5       	in	r24, 0x25	; 37
    6058:	82 60       	ori	r24, 0x02	; 2
    605a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    605c:	85 b5       	in	r24, 0x25	; 37
    605e:	81 60       	ori	r24, 0x01	; 1
    6060:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    6062:	ee e6       	ldi	r30, 0x6E	; 110
    6064:	f0 e0       	ldi	r31, 0x00	; 0
    6066:	80 81       	ld	r24, Z
    6068:	81 60       	ori	r24, 0x01	; 1
    606a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    606c:	e1 e8       	ldi	r30, 0x81	; 129
    606e:	f0 e0       	ldi	r31, 0x00	; 0
    6070:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    6072:	80 81       	ld	r24, Z
    6074:	82 60       	ori	r24, 0x02	; 2
    6076:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    6078:	80 81       	ld	r24, Z
    607a:	81 60       	ori	r24, 0x01	; 1
    607c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    607e:	e0 e8       	ldi	r30, 0x80	; 128
    6080:	f0 e0       	ldi	r31, 0x00	; 0
    6082:	80 81       	ld	r24, Z
    6084:	81 60       	ori	r24, 0x01	; 1
    6086:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    6088:	e1 eb       	ldi	r30, 0xB1	; 177
    608a:	f0 e0       	ldi	r31, 0x00	; 0
    608c:	80 81       	ld	r24, Z
    608e:	84 60       	ori	r24, 0x04	; 4
    6090:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    6092:	e0 eb       	ldi	r30, 0xB0	; 176
    6094:	f0 e0       	ldi	r31, 0x00	; 0
    6096:	80 81       	ld	r24, Z
    6098:	81 60       	ori	r24, 0x01	; 1
    609a:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    609c:	ea e7       	ldi	r30, 0x7A	; 122
    609e:	f0 e0       	ldi	r31, 0x00	; 0
    60a0:	80 81       	ld	r24, Z
    60a2:	84 60       	ori	r24, 0x04	; 4
    60a4:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    60a6:	80 81       	ld	r24, Z
    60a8:	82 60       	ori	r24, 0x02	; 2
    60aa:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    60ac:	80 81       	ld	r24, Z
    60ae:	81 60       	ori	r24, 0x01	; 1
    60b0:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    60b2:	80 81       	ld	r24, Z
    60b4:	80 68       	ori	r24, 0x80	; 128
    60b6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    60b8:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    60bc:	08 95       	ret

000060be <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    60be:	cf 93       	push	r28
    60c0:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    60c2:	48 2f       	mov	r20, r24
    60c4:	50 e0       	ldi	r21, 0x00	; 0
    60c6:	ca 01       	movw	r24, r20
    60c8:	8c 56       	subi	r24, 0x6C	; 108
    60ca:	96 4f       	sbci	r25, 0xF6	; 246
    60cc:	fc 01       	movw	r30, r24
    60ce:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    60d0:	40 58       	subi	r20, 0x80	; 128
    60d2:	56 4f       	sbci	r21, 0xF6	; 246
    60d4:	fa 01       	movw	r30, r20
    60d6:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    60d8:	88 23       	and	r24, r24
    60da:	69 f1       	breq	.+90     	; 0x6136 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    60dc:	90 e0       	ldi	r25, 0x00	; 0
    60de:	88 0f       	add	r24, r24
    60e0:	99 1f       	adc	r25, r25
    60e2:	fc 01       	movw	r30, r24
    60e4:	ee 59       	subi	r30, 0x9E	; 158
    60e6:	f6 4f       	sbci	r31, 0xF6	; 246
    60e8:	a5 91       	lpm	r26, Z+
    60ea:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    60ec:	fc 01       	movw	r30, r24
    60ee:	e4 59       	subi	r30, 0x94	; 148
    60f0:	f6 4f       	sbci	r31, 0xF6	; 246
    60f2:	c5 91       	lpm	r28, Z+
    60f4:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    60f6:	66 23       	and	r22, r22
    60f8:	51 f4       	brne	.+20     	; 0x610e <pinMode+0x50>
		uint8_t oldSREG = SREG;
    60fa:	2f b7       	in	r18, 0x3f	; 63
                cli();
    60fc:	f8 94       	cli
		*reg &= ~bit;
    60fe:	8c 91       	ld	r24, X
    6100:	93 2f       	mov	r25, r19
    6102:	90 95       	com	r25
    6104:	89 23       	and	r24, r25
    6106:	8c 93       	st	X, r24
		*out &= ~bit;
    6108:	88 81       	ld	r24, Y
    610a:	89 23       	and	r24, r25
    610c:	0b c0       	rjmp	.+22     	; 0x6124 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    610e:	62 30       	cpi	r22, 0x02	; 2
    6110:	61 f4       	brne	.+24     	; 0x612a <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    6112:	2f b7       	in	r18, 0x3f	; 63
                cli();
    6114:	f8 94       	cli
		*reg &= ~bit;
    6116:	8c 91       	ld	r24, X
    6118:	93 2f       	mov	r25, r19
    611a:	90 95       	com	r25
    611c:	89 23       	and	r24, r25
    611e:	8c 93       	st	X, r24
		*out |= bit;
    6120:	88 81       	ld	r24, Y
    6122:	83 2b       	or	r24, r19
    6124:	88 83       	st	Y, r24
		SREG = oldSREG;
    6126:	2f bf       	out	0x3f, r18	; 63
    6128:	06 c0       	rjmp	.+12     	; 0x6136 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    612a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    612c:	f8 94       	cli
		*reg |= bit;
    612e:	8c 91       	ld	r24, X
    6130:	83 2b       	or	r24, r19
    6132:	8c 93       	st	X, r24
		SREG = oldSREG;
    6134:	9f bf       	out	0x3f, r25	; 63
	}
}
    6136:	df 91       	pop	r29
    6138:	cf 91       	pop	r28
    613a:	08 95       	ret

0000613c <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    613c:	48 2f       	mov	r20, r24
    613e:	50 e0       	ldi	r21, 0x00	; 0
    6140:	ca 01       	movw	r24, r20
    6142:	88 55       	subi	r24, 0x58	; 88
    6144:	96 4f       	sbci	r25, 0xF6	; 246
    6146:	fc 01       	movw	r30, r24
    6148:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    614a:	ca 01       	movw	r24, r20
    614c:	8c 56       	subi	r24, 0x6C	; 108
    614e:	96 4f       	sbci	r25, 0xF6	; 246
    6150:	fc 01       	movw	r30, r24
    6152:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    6154:	40 58       	subi	r20, 0x80	; 128
    6156:	56 4f       	sbci	r21, 0xF6	; 246
    6158:	fa 01       	movw	r30, r20
    615a:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    615c:	33 23       	and	r19, r19
    615e:	09 f4       	brne	.+2      	; 0x6162 <digitalWrite+0x26>
    6160:	40 c0       	rjmp	.+128    	; 0x61e2 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6162:	22 23       	and	r18, r18
    6164:	51 f1       	breq	.+84     	; 0x61ba <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    6166:	23 30       	cpi	r18, 0x03	; 3
    6168:	71 f0       	breq	.+28     	; 0x6186 <digitalWrite+0x4a>
    616a:	24 30       	cpi	r18, 0x04	; 4
    616c:	28 f4       	brcc	.+10     	; 0x6178 <digitalWrite+0x3c>
    616e:	21 30       	cpi	r18, 0x01	; 1
    6170:	a1 f0       	breq	.+40     	; 0x619a <digitalWrite+0x5e>
    6172:	22 30       	cpi	r18, 0x02	; 2
    6174:	11 f5       	brne	.+68     	; 0x61ba <digitalWrite+0x7e>
    6176:	14 c0       	rjmp	.+40     	; 0x61a0 <digitalWrite+0x64>
    6178:	26 30       	cpi	r18, 0x06	; 6
    617a:	b1 f0       	breq	.+44     	; 0x61a8 <digitalWrite+0x6c>
    617c:	27 30       	cpi	r18, 0x07	; 7
    617e:	c1 f0       	breq	.+48     	; 0x61b0 <digitalWrite+0x74>
    6180:	24 30       	cpi	r18, 0x04	; 4
    6182:	d9 f4       	brne	.+54     	; 0x61ba <digitalWrite+0x7e>
    6184:	04 c0       	rjmp	.+8      	; 0x618e <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    6186:	80 91 80 00 	lds	r24, 0x0080
    618a:	8f 77       	andi	r24, 0x7F	; 127
    618c:	03 c0       	rjmp	.+6      	; 0x6194 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    618e:	80 91 80 00 	lds	r24, 0x0080
    6192:	8f 7d       	andi	r24, 0xDF	; 223
    6194:	80 93 80 00 	sts	0x0080, r24
    6198:	10 c0       	rjmp	.+32     	; 0x61ba <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    619a:	84 b5       	in	r24, 0x24	; 36
    619c:	8f 77       	andi	r24, 0x7F	; 127
    619e:	02 c0       	rjmp	.+4      	; 0x61a4 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    61a0:	84 b5       	in	r24, 0x24	; 36
    61a2:	8f 7d       	andi	r24, 0xDF	; 223
    61a4:	84 bd       	out	0x24, r24	; 36
    61a6:	09 c0       	rjmp	.+18     	; 0x61ba <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    61a8:	80 91 b0 00 	lds	r24, 0x00B0
    61ac:	8f 77       	andi	r24, 0x7F	; 127
    61ae:	03 c0       	rjmp	.+6      	; 0x61b6 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    61b0:	80 91 b0 00 	lds	r24, 0x00B0
    61b4:	8f 7d       	andi	r24, 0xDF	; 223
    61b6:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    61ba:	e3 2f       	mov	r30, r19
    61bc:	f0 e0       	ldi	r31, 0x00	; 0
    61be:	ee 0f       	add	r30, r30
    61c0:	ff 1f       	adc	r31, r31
    61c2:	e4 59       	subi	r30, 0x94	; 148
    61c4:	f6 4f       	sbci	r31, 0xF6	; 246
    61c6:	a5 91       	lpm	r26, Z+
    61c8:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    61ca:	2f b7       	in	r18, 0x3f	; 63
	cli();
    61cc:	f8 94       	cli

	if (val == LOW) {
    61ce:	66 23       	and	r22, r22
    61d0:	21 f4       	brne	.+8      	; 0x61da <digitalWrite+0x9e>
		*out &= ~bit;
    61d2:	8c 91       	ld	r24, X
    61d4:	90 95       	com	r25
    61d6:	89 23       	and	r24, r25
    61d8:	02 c0       	rjmp	.+4      	; 0x61de <digitalWrite+0xa2>
	} else {
		*out |= bit;
    61da:	8c 91       	ld	r24, X
    61dc:	89 2b       	or	r24, r25
    61de:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    61e0:	2f bf       	out	0x3f, r18	; 63
    61e2:	08 95       	ret

000061e4 <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    61e4:	68 2f       	mov	r22, r24
    61e6:	70 e0       	ldi	r23, 0x00	; 0
    61e8:	cb 01       	movw	r24, r22
    61ea:	88 55       	subi	r24, 0x58	; 88
    61ec:	96 4f       	sbci	r25, 0xF6	; 246
    61ee:	fc 01       	movw	r30, r24
    61f0:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    61f2:	cb 01       	movw	r24, r22
    61f4:	8c 56       	subi	r24, 0x6C	; 108
    61f6:	96 4f       	sbci	r25, 0xF6	; 246
    61f8:	fc 01       	movw	r30, r24
    61fa:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    61fc:	60 58       	subi	r22, 0x80	; 128
    61fe:	76 4f       	sbci	r23, 0xF6	; 246
    6200:	fb 01       	movw	r30, r22
    6202:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
    6204:	99 23       	and	r25, r25
    6206:	19 f4       	brne	.+6      	; 0x620e <digitalRead+0x2a>
    6208:	20 e0       	ldi	r18, 0x00	; 0
    620a:	30 e0       	ldi	r19, 0x00	; 0
    620c:	3c c0       	rjmp	.+120    	; 0x6286 <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    620e:	22 23       	and	r18, r18
    6210:	51 f1       	breq	.+84     	; 0x6266 <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    6212:	23 30       	cpi	r18, 0x03	; 3
    6214:	71 f0       	breq	.+28     	; 0x6232 <digitalRead+0x4e>
    6216:	24 30       	cpi	r18, 0x04	; 4
    6218:	28 f4       	brcc	.+10     	; 0x6224 <digitalRead+0x40>
    621a:	21 30       	cpi	r18, 0x01	; 1
    621c:	a1 f0       	breq	.+40     	; 0x6246 <digitalRead+0x62>
    621e:	22 30       	cpi	r18, 0x02	; 2
    6220:	11 f5       	brne	.+68     	; 0x6266 <digitalRead+0x82>
    6222:	14 c0       	rjmp	.+40     	; 0x624c <digitalRead+0x68>
    6224:	26 30       	cpi	r18, 0x06	; 6
    6226:	b1 f0       	breq	.+44     	; 0x6254 <digitalRead+0x70>
    6228:	27 30       	cpi	r18, 0x07	; 7
    622a:	c1 f0       	breq	.+48     	; 0x625c <digitalRead+0x78>
    622c:	24 30       	cpi	r18, 0x04	; 4
    622e:	d9 f4       	brne	.+54     	; 0x6266 <digitalRead+0x82>
    6230:	04 c0       	rjmp	.+8      	; 0x623a <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    6232:	80 91 80 00 	lds	r24, 0x0080
    6236:	8f 77       	andi	r24, 0x7F	; 127
    6238:	03 c0       	rjmp	.+6      	; 0x6240 <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    623a:	80 91 80 00 	lds	r24, 0x0080
    623e:	8f 7d       	andi	r24, 0xDF	; 223
    6240:	80 93 80 00 	sts	0x0080, r24
    6244:	10 c0       	rjmp	.+32     	; 0x6266 <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    6246:	84 b5       	in	r24, 0x24	; 36
    6248:	8f 77       	andi	r24, 0x7F	; 127
    624a:	02 c0       	rjmp	.+4      	; 0x6250 <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    624c:	84 b5       	in	r24, 0x24	; 36
    624e:	8f 7d       	andi	r24, 0xDF	; 223
    6250:	84 bd       	out	0x24, r24	; 36
    6252:	09 c0       	rjmp	.+18     	; 0x6266 <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    6254:	80 91 b0 00 	lds	r24, 0x00B0
    6258:	8f 77       	andi	r24, 0x7F	; 127
    625a:	03 c0       	rjmp	.+6      	; 0x6262 <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    625c:	80 91 b0 00 	lds	r24, 0x00B0
    6260:	8f 7d       	andi	r24, 0xDF	; 223
    6262:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    6266:	89 2f       	mov	r24, r25
    6268:	90 e0       	ldi	r25, 0x00	; 0
    626a:	88 0f       	add	r24, r24
    626c:	99 1f       	adc	r25, r25
    626e:	8a 58       	subi	r24, 0x8A	; 138
    6270:	96 4f       	sbci	r25, 0xF6	; 246
    6272:	fc 01       	movw	r30, r24
    6274:	a5 91       	lpm	r26, Z+
    6276:	b4 91       	lpm	r27, Z+
    6278:	8c 91       	ld	r24, X
    627a:	20 e0       	ldi	r18, 0x00	; 0
    627c:	30 e0       	ldi	r19, 0x00	; 0
    627e:	84 23       	and	r24, r20
    6280:	11 f0       	breq	.+4      	; 0x6286 <digitalRead+0xa2>
    6282:	21 e0       	ldi	r18, 0x01	; 1
    6284:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    6286:	c9 01       	movw	r24, r18
    6288:	08 95       	ret

0000628a <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
    628a:	1f 92       	push	r1
    628c:	0f 92       	push	r0
    628e:	0f b6       	in	r0, 0x3f	; 63
    6290:	0f 92       	push	r0
    6292:	11 24       	eor	r1, r1
    6294:	2f 93       	push	r18
    6296:	3f 93       	push	r19
    6298:	4f 93       	push	r20
    629a:	8f 93       	push	r24
    629c:	9f 93       	push	r25
    629e:	ef 93       	push	r30
    62a0:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    62a2:	80 91 c0 00 	lds	r24, 0x00C0
    62a6:	82 fd       	sbrc	r24, 2
    62a8:	1d c0       	rjmp	.+58     	; 0x62e4 <__vector_18+0x5a>
      unsigned char c = UDR0;
    62aa:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    62ae:	20 91 63 03 	lds	r18, 0x0363
    62b2:	30 91 64 03 	lds	r19, 0x0364

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    62b6:	2f 5f       	subi	r18, 0xFF	; 255
    62b8:	3f 4f       	sbci	r19, 0xFF	; 255
    62ba:	2f 73       	andi	r18, 0x3F	; 63
    62bc:	30 70       	andi	r19, 0x00	; 0
    62be:	80 91 65 03 	lds	r24, 0x0365
    62c2:	90 91 66 03 	lds	r25, 0x0366
    62c6:	28 17       	cp	r18, r24
    62c8:	39 07       	cpc	r19, r25
    62ca:	71 f0       	breq	.+28     	; 0x62e8 <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    62cc:	e0 91 63 03 	lds	r30, 0x0363
    62d0:	f0 91 64 03 	lds	r31, 0x0364
    62d4:	ed 5d       	subi	r30, 0xDD	; 221
    62d6:	fc 4f       	sbci	r31, 0xFC	; 252
    62d8:	40 83       	st	Z, r20
    buffer->head = i;
    62da:	30 93 64 03 	sts	0x0364, r19
    62de:	20 93 63 03 	sts	0x0363, r18
    62e2:	02 c0       	rjmp	.+4      	; 0x62e8 <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    62e4:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    62e8:	ff 91       	pop	r31
    62ea:	ef 91       	pop	r30
    62ec:	9f 91       	pop	r25
    62ee:	8f 91       	pop	r24
    62f0:	4f 91       	pop	r20
    62f2:	3f 91       	pop	r19
    62f4:	2f 91       	pop	r18
    62f6:	0f 90       	pop	r0
    62f8:	0f be       	out	0x3f, r0	; 63
    62fa:	0f 90       	pop	r0
    62fc:	1f 90       	pop	r1
    62fe:	18 95       	reti

00006300 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    6300:	e0 91 b7 03 	lds	r30, 0x03B7
    6304:	f0 91 b8 03 	lds	r31, 0x03B8
    6308:	e0 5c       	subi	r30, 0xC0	; 192
    630a:	ff 4f       	sbci	r31, 0xFF	; 255
    630c:	81 91       	ld	r24, Z+
    630e:	91 91       	ld	r25, Z+
    6310:	20 81       	ld	r18, Z
    6312:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    6314:	82 1b       	sub	r24, r18
    6316:	93 0b       	sbc	r25, r19
    6318:	8f 73       	andi	r24, 0x3F	; 63
    631a:	90 70       	andi	r25, 0x00	; 0
    631c:	89 2b       	or	r24, r25
    631e:	11 f0       	breq	.+4      	; 0x6324 <_Z14serialEventRunv+0x24>
    6320:	0e 94 3c 1c 	call	0x3878	; 0x3878 <_Z11serialEventv>
    6324:	08 95       	ret

00006326 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    6326:	1f 92       	push	r1
    6328:	0f 92       	push	r0
    632a:	0f b6       	in	r0, 0x3f	; 63
    632c:	0f 92       	push	r0
    632e:	11 24       	eor	r1, r1
    6330:	2f 93       	push	r18
    6332:	3f 93       	push	r19
    6334:	8f 93       	push	r24
    6336:	9f 93       	push	r25
    6338:	ef 93       	push	r30
    633a:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    633c:	20 91 a7 03 	lds	r18, 0x03A7
    6340:	30 91 a8 03 	lds	r19, 0x03A8
    6344:	80 91 a9 03 	lds	r24, 0x03A9
    6348:	90 91 aa 03 	lds	r25, 0x03AA
    634c:	28 17       	cp	r18, r24
    634e:	39 07       	cpc	r19, r25
    6350:	31 f4       	brne	.+12     	; 0x635e <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    6352:	80 91 c1 00 	lds	r24, 0x00C1
    6356:	8f 7d       	andi	r24, 0xDF	; 223
    6358:	80 93 c1 00 	sts	0x00C1, r24
    635c:	14 c0       	rjmp	.+40     	; 0x6386 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    635e:	e0 91 a9 03 	lds	r30, 0x03A9
    6362:	f0 91 aa 03 	lds	r31, 0x03AA
    6366:	e9 59       	subi	r30, 0x99	; 153
    6368:	fc 4f       	sbci	r31, 0xFC	; 252
    636a:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    636c:	80 91 a9 03 	lds	r24, 0x03A9
    6370:	90 91 aa 03 	lds	r25, 0x03AA
    6374:	01 96       	adiw	r24, 0x01	; 1
    6376:	8f 73       	andi	r24, 0x3F	; 63
    6378:	90 70       	andi	r25, 0x00	; 0
    637a:	90 93 aa 03 	sts	0x03AA, r25
    637e:	80 93 a9 03 	sts	0x03A9, r24
	
  #if defined(UDR0)
    UDR0 = c;
    6382:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    6386:	ff 91       	pop	r31
    6388:	ef 91       	pop	r30
    638a:	9f 91       	pop	r25
    638c:	8f 91       	pop	r24
    638e:	3f 91       	pop	r19
    6390:	2f 91       	pop	r18
    6392:	0f 90       	pop	r0
    6394:	0f be       	out	0x3f, r0	; 63
    6396:	0f 90       	pop	r0
    6398:	1f 90       	pop	r1
    639a:	18 95       	reti

0000639c <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    639c:	af 92       	push	r10
    639e:	bf 92       	push	r11
    63a0:	df 92       	push	r13
    63a2:	ef 92       	push	r14
    63a4:	ff 92       	push	r15
    63a6:	0f 93       	push	r16
    63a8:	1f 93       	push	r17
    63aa:	cf 93       	push	r28
    63ac:	df 93       	push	r29
    63ae:	ec 01       	movw	r28, r24
    63b0:	7a 01       	movw	r14, r20
    63b2:	8b 01       	movw	r16, r22
    63b4:	dd 24       	eor	r13, r13
    63b6:	40 30       	cpi	r20, 0x00	; 0
    63b8:	81 ee       	ldi	r24, 0xE1	; 225
    63ba:	58 07       	cpc	r21, r24
    63bc:	80 e0       	ldi	r24, 0x00	; 0
    63be:	68 07       	cpc	r22, r24
    63c0:	80 e0       	ldi	r24, 0x00	; 0
    63c2:	78 07       	cpc	r23, r24
    63c4:	11 f0       	breq	.+4      	; 0x63ca <_ZN14HardwareSerial5beginEm+0x2e>
    63c6:	dd 24       	eor	r13, r13
    63c8:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    63ca:	91 e0       	ldi	r25, 0x01	; 1
    63cc:	a9 2e       	mov	r10, r25
    63ce:	b1 2c       	mov	r11, r1
    63d0:	ec 89       	ldd	r30, Y+20	; 0x14
    63d2:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    63d4:	dd 20       	and	r13, r13
    63d6:	69 f0       	breq	.+26     	; 0x63f2 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    63d8:	c5 01       	movw	r24, r10
    63da:	08 a0       	ldd	r0, Y+32	; 0x20
    63dc:	02 c0       	rjmp	.+4      	; 0x63e2 <_ZN14HardwareSerial5beginEm+0x46>
    63de:	88 0f       	add	r24, r24
    63e0:	99 1f       	adc	r25, r25
    63e2:	0a 94       	dec	r0
    63e4:	e2 f7       	brpl	.-8      	; 0x63de <_ZN14HardwareSerial5beginEm+0x42>
    63e6:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    63e8:	60 e0       	ldi	r22, 0x00	; 0
    63ea:	79 e0       	ldi	r23, 0x09	; 9
    63ec:	8d e3       	ldi	r24, 0x3D	; 61
    63ee:	90 e0       	ldi	r25, 0x00	; 0
    63f0:	05 c0       	rjmp	.+10     	; 0x63fc <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    63f2:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    63f4:	60 e8       	ldi	r22, 0x80	; 128
    63f6:	74 e8       	ldi	r23, 0x84	; 132
    63f8:	8e e1       	ldi	r24, 0x1E	; 30
    63fa:	90 e0       	ldi	r25, 0x00	; 0
    63fc:	a8 01       	movw	r20, r16
    63fe:	97 01       	movw	r18, r14
    6400:	0e 94 3f 3c 	call	0x787e	; 0x787e <__udivmodsi4>
    6404:	21 50       	subi	r18, 0x01	; 1
    6406:	30 40       	sbci	r19, 0x00	; 0
    6408:	40 40       	sbci	r20, 0x00	; 0
    640a:	50 40       	sbci	r21, 0x00	; 0
    640c:	56 95       	lsr	r21
    640e:	47 95       	ror	r20
    6410:	37 95       	ror	r19
    6412:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    6414:	80 e1       	ldi	r24, 0x10	; 16
    6416:	20 30       	cpi	r18, 0x00	; 0
    6418:	38 07       	cpc	r19, r24
    641a:	20 f0       	brcs	.+8      	; 0x6424 <_ZN14HardwareSerial5beginEm+0x88>
    641c:	dd 20       	and	r13, r13
    641e:	11 f0       	breq	.+4      	; 0x6424 <_ZN14HardwareSerial5beginEm+0x88>
    6420:	dd 24       	eor	r13, r13
    6422:	d6 cf       	rjmp	.-84     	; 0x63d0 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    6424:	e8 89       	ldd	r30, Y+16	; 0x10
    6426:	f9 89       	ldd	r31, Y+17	; 0x11
    6428:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    642a:	ea 89       	ldd	r30, Y+18	; 0x12
    642c:	fb 89       	ldd	r31, Y+19	; 0x13
    642e:	20 83       	st	Z, r18

  transmitting = false;
    6430:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    6432:	ee 89       	ldd	r30, Y+22	; 0x16
    6434:	ff 89       	ldd	r31, Y+23	; 0x17
    6436:	40 81       	ld	r20, Z
    6438:	21 e0       	ldi	r18, 0x01	; 1
    643a:	30 e0       	ldi	r19, 0x00	; 0
    643c:	c9 01       	movw	r24, r18
    643e:	0c 8c       	ldd	r0, Y+28	; 0x1c
    6440:	02 c0       	rjmp	.+4      	; 0x6446 <_ZN14HardwareSerial5beginEm+0xaa>
    6442:	88 0f       	add	r24, r24
    6444:	99 1f       	adc	r25, r25
    6446:	0a 94       	dec	r0
    6448:	e2 f7       	brpl	.-8      	; 0x6442 <_ZN14HardwareSerial5beginEm+0xa6>
    644a:	48 2b       	or	r20, r24
    644c:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    644e:	ee 89       	ldd	r30, Y+22	; 0x16
    6450:	ff 89       	ldd	r31, Y+23	; 0x17
    6452:	40 81       	ld	r20, Z
    6454:	c9 01       	movw	r24, r18
    6456:	0d 8c       	ldd	r0, Y+29	; 0x1d
    6458:	02 c0       	rjmp	.+4      	; 0x645e <_ZN14HardwareSerial5beginEm+0xc2>
    645a:	88 0f       	add	r24, r24
    645c:	99 1f       	adc	r25, r25
    645e:	0a 94       	dec	r0
    6460:	e2 f7       	brpl	.-8      	; 0x645a <_ZN14HardwareSerial5beginEm+0xbe>
    6462:	48 2b       	or	r20, r24
    6464:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    6466:	ee 89       	ldd	r30, Y+22	; 0x16
    6468:	ff 89       	ldd	r31, Y+23	; 0x17
    646a:	40 81       	ld	r20, Z
    646c:	c9 01       	movw	r24, r18
    646e:	0e 8c       	ldd	r0, Y+30	; 0x1e
    6470:	02 c0       	rjmp	.+4      	; 0x6476 <_ZN14HardwareSerial5beginEm+0xda>
    6472:	88 0f       	add	r24, r24
    6474:	99 1f       	adc	r25, r25
    6476:	0a 94       	dec	r0
    6478:	e2 f7       	brpl	.-8      	; 0x6472 <_ZN14HardwareSerial5beginEm+0xd6>
    647a:	48 2b       	or	r20, r24
    647c:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    647e:	ee 89       	ldd	r30, Y+22	; 0x16
    6480:	ff 89       	ldd	r31, Y+23	; 0x17
    6482:	80 81       	ld	r24, Z
    6484:	0f 8c       	ldd	r0, Y+31	; 0x1f
    6486:	02 c0       	rjmp	.+4      	; 0x648c <_ZN14HardwareSerial5beginEm+0xf0>
    6488:	22 0f       	add	r18, r18
    648a:	33 1f       	adc	r19, r19
    648c:	0a 94       	dec	r0
    648e:	e2 f7       	brpl	.-8      	; 0x6488 <_ZN14HardwareSerial5beginEm+0xec>
    6490:	20 95       	com	r18
    6492:	28 23       	and	r18, r24
    6494:	20 83       	st	Z, r18
}
    6496:	df 91       	pop	r29
    6498:	cf 91       	pop	r28
    649a:	1f 91       	pop	r17
    649c:	0f 91       	pop	r16
    649e:	ff 90       	pop	r15
    64a0:	ef 90       	pop	r14
    64a2:	df 90       	pop	r13
    64a4:	bf 90       	pop	r11
    64a6:	af 90       	pop	r10
    64a8:	08 95       	ret

000064aa <_ZN14HardwareSerial3endEv>:
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
  cbi(*_ucsrb, _udrie);
}

void HardwareSerial::end()
    64aa:	cf 93       	push	r28
    64ac:	df 93       	push	r29
    64ae:	dc 01       	movw	r26, r24
{
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    64b0:	1e 96       	adiw	r26, 0x0e	; 14
    64b2:	8d 91       	ld	r24, X+
    64b4:	9c 91       	ld	r25, X
    64b6:	1f 97       	sbiw	r26, 0x0f	; 15
    64b8:	ec 01       	movw	r28, r24
    64ba:	c0 5c       	subi	r28, 0xC0	; 192
    64bc:	df 4f       	sbci	r29, 0xFF	; 255
    64be:	fc 01       	movw	r30, r24
    64c0:	ee 5b       	subi	r30, 0xBE	; 190
    64c2:	ff 4f       	sbci	r31, 0xFF	; 255
    64c4:	28 81       	ld	r18, Y
    64c6:	39 81       	ldd	r19, Y+1	; 0x01
    64c8:	80 81       	ld	r24, Z
    64ca:	91 81       	ldd	r25, Z+1	; 0x01
    64cc:	28 17       	cp	r18, r24
    64ce:	39 07       	cpc	r19, r25
    64d0:	c9 f7       	brne	.-14     	; 0x64c4 <_ZN14HardwareSerial3endEv+0x1a>
    ;

  cbi(*_ucsrb, _rxen);
    64d2:	56 96       	adiw	r26, 0x16	; 22
    64d4:	ed 91       	ld	r30, X+
    64d6:	fc 91       	ld	r31, X
    64d8:	57 97       	sbiw	r26, 0x17	; 23
    64da:	40 81       	ld	r20, Z
    64dc:	21 e0       	ldi	r18, 0x01	; 1
    64de:	30 e0       	ldi	r19, 0x00	; 0
    64e0:	c9 01       	movw	r24, r18
    64e2:	5c 96       	adiw	r26, 0x1c	; 28
    64e4:	0c 90       	ld	r0, X
    64e6:	5c 97       	sbiw	r26, 0x1c	; 28
    64e8:	02 c0       	rjmp	.+4      	; 0x64ee <_ZN14HardwareSerial3endEv+0x44>
    64ea:	88 0f       	add	r24, r24
    64ec:	99 1f       	adc	r25, r25
    64ee:	0a 94       	dec	r0
    64f0:	e2 f7       	brpl	.-8      	; 0x64ea <_ZN14HardwareSerial3endEv+0x40>
    64f2:	80 95       	com	r24
    64f4:	84 23       	and	r24, r20
    64f6:	80 83       	st	Z, r24
  cbi(*_ucsrb, _txen);
    64f8:	56 96       	adiw	r26, 0x16	; 22
    64fa:	ed 91       	ld	r30, X+
    64fc:	fc 91       	ld	r31, X
    64fe:	57 97       	sbiw	r26, 0x17	; 23
    6500:	40 81       	ld	r20, Z
    6502:	c9 01       	movw	r24, r18
    6504:	5d 96       	adiw	r26, 0x1d	; 29
    6506:	0c 90       	ld	r0, X
    6508:	5d 97       	sbiw	r26, 0x1d	; 29
    650a:	02 c0       	rjmp	.+4      	; 0x6510 <_ZN14HardwareSerial3endEv+0x66>
    650c:	88 0f       	add	r24, r24
    650e:	99 1f       	adc	r25, r25
    6510:	0a 94       	dec	r0
    6512:	e2 f7       	brpl	.-8      	; 0x650c <_ZN14HardwareSerial3endEv+0x62>
    6514:	80 95       	com	r24
    6516:	84 23       	and	r24, r20
    6518:	80 83       	st	Z, r24
  cbi(*_ucsrb, _rxcie);  
    651a:	56 96       	adiw	r26, 0x16	; 22
    651c:	ed 91       	ld	r30, X+
    651e:	fc 91       	ld	r31, X
    6520:	57 97       	sbiw	r26, 0x17	; 23
    6522:	40 81       	ld	r20, Z
    6524:	c9 01       	movw	r24, r18
    6526:	5e 96       	adiw	r26, 0x1e	; 30
    6528:	0c 90       	ld	r0, X
    652a:	5e 97       	sbiw	r26, 0x1e	; 30
    652c:	02 c0       	rjmp	.+4      	; 0x6532 <_ZN14HardwareSerial3endEv+0x88>
    652e:	88 0f       	add	r24, r24
    6530:	99 1f       	adc	r25, r25
    6532:	0a 94       	dec	r0
    6534:	e2 f7       	brpl	.-8      	; 0x652e <_ZN14HardwareSerial3endEv+0x84>
    6536:	80 95       	com	r24
    6538:	84 23       	and	r24, r20
    653a:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
    653c:	56 96       	adiw	r26, 0x16	; 22
    653e:	ed 91       	ld	r30, X+
    6540:	fc 91       	ld	r31, X
    6542:	57 97       	sbiw	r26, 0x17	; 23
    6544:	80 81       	ld	r24, Z
    6546:	5f 96       	adiw	r26, 0x1f	; 31
    6548:	0c 90       	ld	r0, X
    654a:	5f 97       	sbiw	r26, 0x1f	; 31
    654c:	02 c0       	rjmp	.+4      	; 0x6552 <_ZN14HardwareSerial3endEv+0xa8>
    654e:	22 0f       	add	r18, r18
    6550:	33 1f       	adc	r19, r19
    6552:	0a 94       	dec	r0
    6554:	e2 f7       	brpl	.-8      	; 0x654e <_ZN14HardwareSerial3endEv+0xa4>
    6556:	20 95       	com	r18
    6558:	28 23       	and	r18, r24
    655a:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    655c:	1c 96       	adiw	r26, 0x0c	; 12
    655e:	ed 91       	ld	r30, X+
    6560:	fc 91       	ld	r31, X
    6562:	1d 97       	sbiw	r26, 0x0d	; 13
    6564:	ee 5b       	subi	r30, 0xBE	; 190
    6566:	ff 4f       	sbci	r31, 0xFF	; 255
    6568:	80 81       	ld	r24, Z
    656a:	91 81       	ldd	r25, Z+1	; 0x01
    656c:	92 93       	st	-Z, r25
    656e:	82 93       	st	-Z, r24
}
    6570:	df 91       	pop	r29
    6572:	cf 91       	pop	r28
    6574:	08 95       	ret

00006576 <_ZN14HardwareSerial9availableEv>:

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    6576:	dc 01       	movw	r26, r24
    6578:	1c 96       	adiw	r26, 0x0c	; 12
    657a:	ed 91       	ld	r30, X+
    657c:	fc 91       	ld	r31, X
    657e:	1d 97       	sbiw	r26, 0x0d	; 13
    6580:	e0 5c       	subi	r30, 0xC0	; 192
    6582:	ff 4f       	sbci	r31, 0xFF	; 255
    6584:	21 91       	ld	r18, Z+
    6586:	31 91       	ld	r19, Z+
    6588:	80 81       	ld	r24, Z
    658a:	91 81       	ldd	r25, Z+1	; 0x01
    658c:	28 1b       	sub	r18, r24
    658e:	39 0b       	sbc	r19, r25
    6590:	2f 73       	andi	r18, 0x3F	; 63
    6592:	30 70       	andi	r19, 0x00	; 0
}
    6594:	c9 01       	movw	r24, r18
    6596:	08 95       	ret

00006598 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    6598:	dc 01       	movw	r26, r24
    659a:	1c 96       	adiw	r26, 0x0c	; 12
    659c:	ed 91       	ld	r30, X+
    659e:	fc 91       	ld	r31, X
    65a0:	1d 97       	sbiw	r26, 0x0d	; 13
    65a2:	e0 5c       	subi	r30, 0xC0	; 192
    65a4:	ff 4f       	sbci	r31, 0xFF	; 255
    65a6:	20 81       	ld	r18, Z
    65a8:	31 81       	ldd	r19, Z+1	; 0x01
    65aa:	e0 54       	subi	r30, 0x40	; 64
    65ac:	f0 40       	sbci	r31, 0x00	; 0
    65ae:	df 01       	movw	r26, r30
    65b0:	ae 5b       	subi	r26, 0xBE	; 190
    65b2:	bf 4f       	sbci	r27, 0xFF	; 255
    65b4:	8d 91       	ld	r24, X+
    65b6:	9c 91       	ld	r25, X
    65b8:	11 97       	sbiw	r26, 0x01	; 1
    65ba:	28 17       	cp	r18, r24
    65bc:	39 07       	cpc	r19, r25
    65be:	19 f4       	brne	.+6      	; 0x65c6 <_ZN14HardwareSerial4peekEv+0x2e>
    65c0:	2f ef       	ldi	r18, 0xFF	; 255
    65c2:	3f ef       	ldi	r19, 0xFF	; 255
    65c4:	07 c0       	rjmp	.+14     	; 0x65d4 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    65c6:	8d 91       	ld	r24, X+
    65c8:	9c 91       	ld	r25, X
    65ca:	e8 0f       	add	r30, r24
    65cc:	f9 1f       	adc	r31, r25
    65ce:	80 81       	ld	r24, Z
    65d0:	28 2f       	mov	r18, r24
    65d2:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    65d4:	c9 01       	movw	r24, r18
    65d6:	08 95       	ret

000065d8 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    65d8:	dc 01       	movw	r26, r24
    65da:	1c 96       	adiw	r26, 0x0c	; 12
    65dc:	ed 91       	ld	r30, X+
    65de:	fc 91       	ld	r31, X
    65e0:	1d 97       	sbiw	r26, 0x0d	; 13
    65e2:	e0 5c       	subi	r30, 0xC0	; 192
    65e4:	ff 4f       	sbci	r31, 0xFF	; 255
    65e6:	20 81       	ld	r18, Z
    65e8:	31 81       	ldd	r19, Z+1	; 0x01
    65ea:	e0 54       	subi	r30, 0x40	; 64
    65ec:	f0 40       	sbci	r31, 0x00	; 0
    65ee:	df 01       	movw	r26, r30
    65f0:	ae 5b       	subi	r26, 0xBE	; 190
    65f2:	bf 4f       	sbci	r27, 0xFF	; 255
    65f4:	8d 91       	ld	r24, X+
    65f6:	9c 91       	ld	r25, X
    65f8:	11 97       	sbiw	r26, 0x01	; 1
    65fa:	28 17       	cp	r18, r24
    65fc:	39 07       	cpc	r19, r25
    65fe:	19 f4       	brne	.+6      	; 0x6606 <_ZN14HardwareSerial4readEv+0x2e>
    6600:	2f ef       	ldi	r18, 0xFF	; 255
    6602:	3f ef       	ldi	r19, 0xFF	; 255
    6604:	10 c0       	rjmp	.+32     	; 0x6626 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    6606:	8d 91       	ld	r24, X+
    6608:	9c 91       	ld	r25, X
    660a:	11 97       	sbiw	r26, 0x01	; 1
    660c:	e8 0f       	add	r30, r24
    660e:	f9 1f       	adc	r31, r25
    6610:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    6612:	8d 91       	ld	r24, X+
    6614:	9c 91       	ld	r25, X
    6616:	11 97       	sbiw	r26, 0x01	; 1
    6618:	01 96       	adiw	r24, 0x01	; 1
    661a:	8f 73       	andi	r24, 0x3F	; 63
    661c:	90 70       	andi	r25, 0x00	; 0
    661e:	11 96       	adiw	r26, 0x01	; 1
    6620:	9c 93       	st	X, r25
    6622:	8e 93       	st	-X, r24
    return c;
    6624:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    6626:	c9 01       	movw	r24, r18
    6628:	08 95       	ret

0000662a <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
    662a:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    662c:	91 96       	adiw	r26, 0x21	; 33
    662e:	8c 91       	ld	r24, X
    6630:	91 97       	sbiw	r26, 0x21	; 33
    6632:	88 23       	and	r24, r24
    6634:	39 f0       	breq	.+14     	; 0x6644 <_ZN14HardwareSerial5flushEv+0x1a>
    6636:	54 96       	adiw	r26, 0x14	; 20
    6638:	ed 91       	ld	r30, X+
    663a:	fc 91       	ld	r31, X
    663c:	55 97       	sbiw	r26, 0x15	; 21
    663e:	80 81       	ld	r24, Z
    6640:	86 ff       	sbrs	r24, 6
    6642:	f9 cf       	rjmp	.-14     	; 0x6636 <_ZN14HardwareSerial5flushEv+0xc>
  transmitting = false;
    6644:	91 96       	adiw	r26, 0x21	; 33
    6646:	1c 92       	st	X, r1
}
    6648:	08 95       	ret

0000664a <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    664a:	cf 93       	push	r28
    664c:	df 93       	push	r29
    664e:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    6650:	ee 85       	ldd	r30, Y+14	; 0x0e
    6652:	ff 85       	ldd	r31, Y+15	; 0x0f
    6654:	e0 5c       	subi	r30, 0xC0	; 192
    6656:	ff 4f       	sbci	r31, 0xFF	; 255
    6658:	20 81       	ld	r18, Z
    665a:	31 81       	ldd	r19, Z+1	; 0x01
    665c:	e0 54       	subi	r30, 0x40	; 64
    665e:	f0 40       	sbci	r31, 0x00	; 0
    6660:	2f 5f       	subi	r18, 0xFF	; 255
    6662:	3f 4f       	sbci	r19, 0xFF	; 255
    6664:	2f 73       	andi	r18, 0x3F	; 63
    6666:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    6668:	df 01       	movw	r26, r30
    666a:	ae 5b       	subi	r26, 0xBE	; 190
    666c:	bf 4f       	sbci	r27, 0xFF	; 255
    666e:	8d 91       	ld	r24, X+
    6670:	9c 91       	ld	r25, X
    6672:	11 97       	sbiw	r26, 0x01	; 1
    6674:	28 17       	cp	r18, r24
    6676:	39 07       	cpc	r19, r25
    6678:	d1 f3       	breq	.-12     	; 0x666e <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    667a:	e0 5c       	subi	r30, 0xC0	; 192
    667c:	ff 4f       	sbci	r31, 0xFF	; 255
    667e:	80 81       	ld	r24, Z
    6680:	91 81       	ldd	r25, Z+1	; 0x01
    6682:	e0 54       	subi	r30, 0x40	; 64
    6684:	f0 40       	sbci	r31, 0x00	; 0
    6686:	e8 0f       	add	r30, r24
    6688:	f9 1f       	adc	r31, r25
    668a:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    668c:	ee 85       	ldd	r30, Y+14	; 0x0e
    668e:	ff 85       	ldd	r31, Y+15	; 0x0f
    6690:	e0 5c       	subi	r30, 0xC0	; 192
    6692:	ff 4f       	sbci	r31, 0xFF	; 255
    6694:	31 83       	std	Z+1, r19	; 0x01
    6696:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    6698:	ee 89       	ldd	r30, Y+22	; 0x16
    669a:	ff 89       	ldd	r31, Y+23	; 0x17
    669c:	20 81       	ld	r18, Z
    669e:	81 e0       	ldi	r24, 0x01	; 1
    66a0:	90 e0       	ldi	r25, 0x00	; 0
    66a2:	0f 8c       	ldd	r0, Y+31	; 0x1f
    66a4:	02 c0       	rjmp	.+4      	; 0x66aa <_ZN14HardwareSerial5writeEh+0x60>
    66a6:	88 0f       	add	r24, r24
    66a8:	99 1f       	adc	r25, r25
    66aa:	0a 94       	dec	r0
    66ac:	e2 f7       	brpl	.-8      	; 0x66a6 <_ZN14HardwareSerial5writeEh+0x5c>
    66ae:	28 2b       	or	r18, r24
    66b0:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    66b2:	81 e0       	ldi	r24, 0x01	; 1
    66b4:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    66b6:	ec 89       	ldd	r30, Y+20	; 0x14
    66b8:	fd 89       	ldd	r31, Y+21	; 0x15
    66ba:	80 81       	ld	r24, Z
    66bc:	80 64       	ori	r24, 0x40	; 64
    66be:	80 83       	st	Z, r24
  
  return 1;
}
    66c0:	81 e0       	ldi	r24, 0x01	; 1
    66c2:	90 e0       	ldi	r25, 0x00	; 0
    66c4:	df 91       	pop	r29
    66c6:	cf 91       	pop	r28
    66c8:	08 95       	ret

000066ca <_ZN14HardwareSerialcvbEv>:

HardwareSerial::operator bool() {
	return true;
}
    66ca:	81 e0       	ldi	r24, 0x01	; 1
    66cc:	08 95       	ret

000066ce <_GLOBAL__I_rx_buffer>:
  public:
    Print() : write_error(0) {}
    66ce:	10 92 ae 03 	sts	0x03AE, r1
    66d2:	10 92 ad 03 	sts	0x03AD, r1
    66d6:	88 ee       	ldi	r24, 0xE8	; 232
    66d8:	93 e0       	ldi	r25, 0x03	; 3
    66da:	a0 e0       	ldi	r26, 0x00	; 0
    66dc:	b0 e0       	ldi	r27, 0x00	; 0
    66de:	80 93 af 03 	sts	0x03AF, r24
    66e2:	90 93 b0 03 	sts	0x03B0, r25
    66e6:	a0 93 b1 03 	sts	0x03B1, r26
    66ea:	b0 93 b2 03 	sts	0x03B2, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    66ee:	8f e2       	ldi	r24, 0x2F	; 47
    66f0:	91 e0       	ldi	r25, 0x01	; 1
    66f2:	90 93 ac 03 	sts	0x03AC, r25
    66f6:	80 93 ab 03 	sts	0x03AB, r24
{
  _rx_buffer = rx_buffer;
    66fa:	83 e2       	ldi	r24, 0x23	; 35
    66fc:	93 e0       	ldi	r25, 0x03	; 3
    66fe:	90 93 b8 03 	sts	0x03B8, r25
    6702:	80 93 b7 03 	sts	0x03B7, r24
  _tx_buffer = tx_buffer;
    6706:	87 e6       	ldi	r24, 0x67	; 103
    6708:	93 e0       	ldi	r25, 0x03	; 3
    670a:	90 93 ba 03 	sts	0x03BA, r25
    670e:	80 93 b9 03 	sts	0x03B9, r24
  _ubrrh = ubrrh;
    6712:	85 ec       	ldi	r24, 0xC5	; 197
    6714:	90 e0       	ldi	r25, 0x00	; 0
    6716:	90 93 bc 03 	sts	0x03BC, r25
    671a:	80 93 bb 03 	sts	0x03BB, r24
  _ubrrl = ubrrl;
    671e:	84 ec       	ldi	r24, 0xC4	; 196
    6720:	90 e0       	ldi	r25, 0x00	; 0
    6722:	90 93 be 03 	sts	0x03BE, r25
    6726:	80 93 bd 03 	sts	0x03BD, r24
  _ucsra = ucsra;
    672a:	80 ec       	ldi	r24, 0xC0	; 192
    672c:	90 e0       	ldi	r25, 0x00	; 0
    672e:	90 93 c0 03 	sts	0x03C0, r25
    6732:	80 93 bf 03 	sts	0x03BF, r24
  _ucsrb = ucsrb;
    6736:	81 ec       	ldi	r24, 0xC1	; 193
    6738:	90 e0       	ldi	r25, 0x00	; 0
    673a:	90 93 c2 03 	sts	0x03C2, r25
    673e:	80 93 c1 03 	sts	0x03C1, r24
  _ucsrc = ucsrc;
    6742:	82 ec       	ldi	r24, 0xC2	; 194
    6744:	90 e0       	ldi	r25, 0x00	; 0
    6746:	90 93 c4 03 	sts	0x03C4, r25
    674a:	80 93 c3 03 	sts	0x03C3, r24
  _udr = udr;
    674e:	86 ec       	ldi	r24, 0xC6	; 198
    6750:	90 e0       	ldi	r25, 0x00	; 0
    6752:	90 93 c6 03 	sts	0x03C6, r25
    6756:	80 93 c5 03 	sts	0x03C5, r24
  _rxen = rxen;
    675a:	84 e0       	ldi	r24, 0x04	; 4
    675c:	80 93 c7 03 	sts	0x03C7, r24
  _txen = txen;
    6760:	83 e0       	ldi	r24, 0x03	; 3
    6762:	80 93 c8 03 	sts	0x03C8, r24
  _rxcie = rxcie;
    6766:	87 e0       	ldi	r24, 0x07	; 7
    6768:	80 93 c9 03 	sts	0x03C9, r24
  _udrie = udrie;
    676c:	85 e0       	ldi	r24, 0x05	; 5
    676e:	80 93 ca 03 	sts	0x03CA, r24
  _u2x = u2x;
    6772:	81 e0       	ldi	r24, 0x01	; 1
    6774:	80 93 cb 03 	sts	0x03CB, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    6778:	08 95       	ret

0000677a <main>:
#include <Arduino.h>

int main(void)
    677a:	cf 93       	push	r28
    677c:	df 93       	push	r29
{
	init();
    677e:	0e 94 24 30 	call	0x6048	; 0x6048 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    6782:	0e 94 80 12 	call	0x2500	; 0x2500 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    6786:	c0 e8       	ldi	r28, 0x80	; 128
    6788:	d1 e3       	ldi	r29, 0x31	; 49
#endif
	
	setup();
    
	for (;;) {
		loop();
    678a:	0e 94 36 12 	call	0x246c	; 0x246c <loop>
		if (serialEventRun) serialEventRun();
    678e:	20 97       	sbiw	r28, 0x00	; 0
    6790:	e1 f3       	breq	.-8      	; 0x678a <main+0x10>
    6792:	0e 94 80 31 	call	0x6300	; 0x6300 <_Z14serialEventRunv>
    6796:	f9 cf       	rjmp	.-14     	; 0x678a <main+0x10>

00006798 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    6798:	cf 92       	push	r12
    679a:	df 92       	push	r13
    679c:	ef 92       	push	r14
    679e:	ff 92       	push	r15
    67a0:	0f 93       	push	r16
    67a2:	1f 93       	push	r17
    67a4:	cf 93       	push	r28
    67a6:	df 93       	push	r29
    67a8:	7c 01       	movw	r14, r24
    67aa:	6b 01       	movw	r12, r22
    67ac:	8a 01       	movw	r16, r20
    67ae:	c0 e0       	ldi	r28, 0x00	; 0
    67b0:	d0 e0       	ldi	r29, 0x00	; 0
    67b2:	0f c0       	rjmp	.+30     	; 0x67d2 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    67b4:	d6 01       	movw	r26, r12
    67b6:	6d 91       	ld	r22, X+
    67b8:	6d 01       	movw	r12, r26
    67ba:	d7 01       	movw	r26, r14
    67bc:	ed 91       	ld	r30, X+
    67be:	fc 91       	ld	r31, X
    67c0:	01 90       	ld	r0, Z+
    67c2:	f0 81       	ld	r31, Z
    67c4:	e0 2d       	mov	r30, r0
    67c6:	c7 01       	movw	r24, r14
    67c8:	09 95       	icall
    67ca:	c8 0f       	add	r28, r24
    67cc:	d9 1f       	adc	r29, r25
    67ce:	01 50       	subi	r16, 0x01	; 1
    67d0:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    67d2:	01 15       	cp	r16, r1
    67d4:	11 05       	cpc	r17, r1
    67d6:	71 f7       	brne	.-36     	; 0x67b4 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    67d8:	ce 01       	movw	r24, r28
    67da:	df 91       	pop	r29
    67dc:	cf 91       	pop	r28
    67de:	1f 91       	pop	r17
    67e0:	0f 91       	pop	r16
    67e2:	ff 90       	pop	r15
    67e4:	ef 90       	pop	r14
    67e6:	df 90       	pop	r13
    67e8:	cf 90       	pop	r12
    67ea:	08 95       	ret

000067ec <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
    67ec:	ef 92       	push	r14
    67ee:	ff 92       	push	r15
    67f0:	0f 93       	push	r16
    67f2:	1f 93       	push	r17
    67f4:	cf 93       	push	r28
    67f6:	df 93       	push	r29
    67f8:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    67fa:	8b 01       	movw	r16, r22
    67fc:	c0 e0       	ldi	r28, 0x00	; 0
    67fe:	d0 e0       	ldi	r29, 0x00	; 0
    6800:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    6802:	0f 5f       	subi	r16, 0xFF	; 255
    6804:	1f 4f       	sbci	r17, 0xFF	; 255
    6806:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    6808:	66 23       	and	r22, r22
    680a:	59 f0       	breq	.+22     	; 0x6822 <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    n += write(c);
    680c:	d7 01       	movw	r26, r14
    680e:	ed 91       	ld	r30, X+
    6810:	fc 91       	ld	r31, X
    6812:	01 90       	ld	r0, Z+
    6814:	f0 81       	ld	r31, Z
    6816:	e0 2d       	mov	r30, r0
    6818:	c7 01       	movw	r24, r14
    681a:	09 95       	icall
    681c:	c8 0f       	add	r28, r24
    681e:	d9 1f       	adc	r29, r25
    6820:	ef cf       	rjmp	.-34     	; 0x6800 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
  }
  return n;
}
    6822:	ce 01       	movw	r24, r28
    6824:	df 91       	pop	r29
    6826:	cf 91       	pop	r28
    6828:	1f 91       	pop	r17
    682a:	0f 91       	pop	r16
    682c:	ff 90       	pop	r15
    682e:	ef 90       	pop	r14
    6830:	08 95       	ret

00006832 <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    6832:	dc 01       	movw	r26, r24
{
  return write(c);
    6834:	ed 91       	ld	r30, X+
    6836:	fc 91       	ld	r31, X
    6838:	01 90       	ld	r0, Z+
    683a:	f0 81       	ld	r31, Z
    683c:	e0 2d       	mov	r30, r0
    683e:	09 95       	icall
}
    6840:	08 95       	ret

00006842 <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    6842:	ef 92       	push	r14
    6844:	ff 92       	push	r15
    6846:	0f 93       	push	r16
    6848:	1f 93       	push	r17
    684a:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    684c:	dc 01       	movw	r26, r24
    684e:	ed 91       	ld	r30, X+
    6850:	fc 91       	ld	r31, X
    6852:	01 90       	ld	r0, Z+
    6854:	f0 81       	ld	r31, Z
    6856:	e0 2d       	mov	r30, r0
    6858:	6d e0       	ldi	r22, 0x0D	; 13
    685a:	09 95       	icall
    685c:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    685e:	d8 01       	movw	r26, r16
    6860:	ed 91       	ld	r30, X+
    6862:	fc 91       	ld	r31, X
    6864:	01 90       	ld	r0, Z+
    6866:	f0 81       	ld	r31, Z
    6868:	e0 2d       	mov	r30, r0
    686a:	c8 01       	movw	r24, r16
    686c:	6a e0       	ldi	r22, 0x0A	; 10
    686e:	09 95       	icall
    6870:	9c 01       	movw	r18, r24
    6872:	2e 0d       	add	r18, r14
    6874:	3f 1d       	adc	r19, r15
    6876:	c9 01       	movw	r24, r18
    6878:	1f 91       	pop	r17
    687a:	0f 91       	pop	r16
    687c:	ff 90       	pop	r15
    687e:	ef 90       	pop	r14
    6880:	08 95       	ret

00006882 <_ZN5Print7printlnEPK19__FlashStringHelper>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    6882:	ef 92       	push	r14
    6884:	ff 92       	push	r15
    6886:	0f 93       	push	r16
    6888:	1f 93       	push	r17
    688a:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    688c:	0e 94 f6 33 	call	0x67ec	; 0x67ec <_ZN5Print5printEPK19__FlashStringHelper>
    6890:	8c 01       	movw	r16, r24
  n += println();
    6892:	c7 01       	movw	r24, r14
    6894:	0e 94 21 34 	call	0x6842	; 0x6842 <_ZN5Print7printlnEv>
    6898:	9c 01       	movw	r18, r24
    689a:	20 0f       	add	r18, r16
    689c:	31 1f       	adc	r19, r17
  return n;
}
    689e:	c9 01       	movw	r24, r18
    68a0:	1f 91       	pop	r17
    68a2:	0f 91       	pop	r16
    68a4:	ff 90       	pop	r15
    68a6:	ef 90       	pop	r14
    68a8:	08 95       	ret

000068aa <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    68aa:	cf 93       	push	r28
    68ac:	df 93       	push	r29
    68ae:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    68b0:	61 15       	cp	r22, r1
    68b2:	71 05       	cpc	r23, r1
    68b4:	19 f4       	brne	.+6      	; 0x68bc <_ZN5Print5writeEPKc+0x12>
    68b6:	20 e0       	ldi	r18, 0x00	; 0
    68b8:	30 e0       	ldi	r19, 0x00	; 0
    68ba:	0f c0       	rjmp	.+30     	; 0x68da <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
    68bc:	db 01       	movw	r26, r22
    68be:	0d 90       	ld	r0, X+
    68c0:	00 20       	and	r0, r0
    68c2:	e9 f7       	brne	.-6      	; 0x68be <_ZN5Print5writeEPKc+0x14>
    68c4:	11 97       	sbiw	r26, 0x01	; 1
    68c6:	a6 1b       	sub	r26, r22
    68c8:	b7 0b       	sbc	r27, r23
    68ca:	e8 81       	ld	r30, Y
    68cc:	f9 81       	ldd	r31, Y+1	; 0x01
    68ce:	02 80       	ldd	r0, Z+2	; 0x02
    68d0:	f3 81       	ldd	r31, Z+3	; 0x03
    68d2:	e0 2d       	mov	r30, r0
    68d4:	ad 01       	movw	r20, r26
    68d6:	09 95       	icall
    68d8:	9c 01       	movw	r18, r24
    }
    68da:	c9 01       	movw	r24, r18
    68dc:	df 91       	pop	r29
    68de:	cf 91       	pop	r28
    68e0:	08 95       	ret

000068e2 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    68e2:	4f 92       	push	r4
    68e4:	5f 92       	push	r5
    68e6:	7f 92       	push	r7
    68e8:	8f 92       	push	r8
    68ea:	9f 92       	push	r9
    68ec:	af 92       	push	r10
    68ee:	bf 92       	push	r11
    68f0:	cf 92       	push	r12
    68f2:	df 92       	push	r13
    68f4:	ef 92       	push	r14
    68f6:	ff 92       	push	r15
    68f8:	0f 93       	push	r16
    68fa:	1f 93       	push	r17
    68fc:	df 93       	push	r29
    68fe:	cf 93       	push	r28
    6900:	cd b7       	in	r28, 0x3d	; 61
    6902:	de b7       	in	r29, 0x3e	; 62
    6904:	a1 97       	sbiw	r28, 0x21	; 33
    6906:	0f b6       	in	r0, 0x3f	; 63
    6908:	f8 94       	cli
    690a:	de bf       	out	0x3e, r29	; 62
    690c:	0f be       	out	0x3f, r0	; 63
    690e:	cd bf       	out	0x3d, r28	; 61
    6910:	2c 01       	movw	r4, r24
    6912:	74 2e       	mov	r7, r20
    6914:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    6916:	22 30       	cpi	r18, 0x02	; 2
    6918:	08 f4       	brcc	.+2      	; 0x691c <_ZN5Print11printNumberEmh+0x3a>
    691a:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    691c:	19 a2       	std	Y+33, r1	; 0x21
    691e:	31 e2       	ldi	r19, 0x21	; 33
    6920:	c3 2e       	mov	r12, r19
    6922:	d1 2c       	mov	r13, r1
    6924:	cc 0e       	add	r12, r28
    6926:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    6928:	82 2e       	mov	r8, r18
    692a:	99 24       	eor	r9, r9
    692c:	aa 24       	eor	r10, r10
    692e:	bb 24       	eor	r11, r11
    6930:	67 2d       	mov	r22, r7
    6932:	75 2f       	mov	r23, r21
    6934:	a5 01       	movw	r20, r10
    6936:	94 01       	movw	r18, r8
    6938:	0e 94 3f 3c 	call	0x787e	; 0x787e <__udivmodsi4>
    693c:	79 01       	movw	r14, r18
    693e:	8a 01       	movw	r16, r20
    char c = m - base * n;
    6940:	c8 01       	movw	r24, r16
    6942:	b7 01       	movw	r22, r14
    6944:	a5 01       	movw	r20, r10
    6946:	94 01       	movw	r18, r8
    6948:	0e 94 f9 3b 	call	0x77f2	; 0x77f2 <__mulsi3>
    694c:	47 2d       	mov	r20, r7
    694e:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    6950:	08 94       	sec
    6952:	c1 08       	sbc	r12, r1
    6954:	d1 08       	sbc	r13, r1
    6956:	4a 30       	cpi	r20, 0x0A	; 10
    6958:	14 f4       	brge	.+4      	; 0x695e <_ZN5Print11printNumberEmh+0x7c>
    695a:	40 5d       	subi	r20, 0xD0	; 208
    695c:	01 c0       	rjmp	.+2      	; 0x6960 <_ZN5Print11printNumberEmh+0x7e>
    695e:	49 5c       	subi	r20, 0xC9	; 201
    6960:	f6 01       	movw	r30, r12
    6962:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    6964:	e1 14       	cp	r14, r1
    6966:	f1 04       	cpc	r15, r1
    6968:	01 05       	cpc	r16, r1
    696a:	11 05       	cpc	r17, r1
    696c:	21 f0       	breq	.+8      	; 0x6976 <_ZN5Print11printNumberEmh+0x94>
    696e:	7e 2c       	mov	r7, r14
    6970:	5f 2d       	mov	r21, r15
    6972:	c8 01       	movw	r24, r16
    6974:	dd cf       	rjmp	.-70     	; 0x6930 <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    6976:	c2 01       	movw	r24, r4
    6978:	b6 01       	movw	r22, r12
    697a:	0e 94 55 34 	call	0x68aa	; 0x68aa <_ZN5Print5writeEPKc>
}
    697e:	a1 96       	adiw	r28, 0x21	; 33
    6980:	0f b6       	in	r0, 0x3f	; 63
    6982:	f8 94       	cli
    6984:	de bf       	out	0x3e, r29	; 62
    6986:	0f be       	out	0x3f, r0	; 63
    6988:	cd bf       	out	0x3d, r28	; 61
    698a:	cf 91       	pop	r28
    698c:	df 91       	pop	r29
    698e:	1f 91       	pop	r17
    6990:	0f 91       	pop	r16
    6992:	ff 90       	pop	r15
    6994:	ef 90       	pop	r14
    6996:	df 90       	pop	r13
    6998:	cf 90       	pop	r12
    699a:	bf 90       	pop	r11
    699c:	af 90       	pop	r10
    699e:	9f 90       	pop	r9
    69a0:	8f 90       	pop	r8
    69a2:	7f 90       	pop	r7
    69a4:	5f 90       	pop	r5
    69a6:	4f 90       	pop	r4
    69a8:	08 95       	ret

000069aa <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    69aa:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    69ac:	21 15       	cp	r18, r1
    69ae:	31 05       	cpc	r19, r1
    69b0:	41 f4       	brne	.+16     	; 0x69c2 <_ZN5Print5printEmi+0x18>
    69b2:	ed 91       	ld	r30, X+
    69b4:	fc 91       	ld	r31, X
    69b6:	01 90       	ld	r0, Z+
    69b8:	f0 81       	ld	r31, Z
    69ba:	e0 2d       	mov	r30, r0
    69bc:	64 2f       	mov	r22, r20
    69be:	09 95       	icall
    69c0:	08 95       	ret
  else return printNumber(n, base);
    69c2:	0e 94 71 34 	call	0x68e2	; 0x68e2 <_ZN5Print11printNumberEmh>
}
    69c6:	08 95       	ret

000069c8 <_ZN5Print5printEji>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
    69c8:	ef 92       	push	r14
    69ca:	ff 92       	push	r15
    69cc:	0f 93       	push	r16
    69ce:	1f 93       	push	r17
    69d0:	9a 01       	movw	r18, r20
{
  return print((unsigned long) n, base);
    69d2:	7b 01       	movw	r14, r22
    69d4:	00 e0       	ldi	r16, 0x00	; 0
    69d6:	10 e0       	ldi	r17, 0x00	; 0
    69d8:	b8 01       	movw	r22, r16
    69da:	a7 01       	movw	r20, r14
    69dc:	0e 94 d5 34 	call	0x69aa	; 0x69aa <_ZN5Print5printEmi>
}
    69e0:	1f 91       	pop	r17
    69e2:	0f 91       	pop	r16
    69e4:	ff 90       	pop	r15
    69e6:	ef 90       	pop	r14
    69e8:	08 95       	ret

000069ea <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    69ea:	ef 92       	push	r14
    69ec:	ff 92       	push	r15
    69ee:	0f 93       	push	r16
    69f0:	1f 93       	push	r17
    69f2:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    69f4:	e6 2e       	mov	r14, r22
    69f6:	ff 24       	eor	r15, r15
    69f8:	00 e0       	ldi	r16, 0x00	; 0
    69fa:	10 e0       	ldi	r17, 0x00	; 0
    69fc:	b8 01       	movw	r22, r16
    69fe:	a7 01       	movw	r20, r14
    6a00:	0e 94 d5 34 	call	0x69aa	; 0x69aa <_ZN5Print5printEmi>
}
    6a04:	1f 91       	pop	r17
    6a06:	0f 91       	pop	r16
    6a08:	ff 90       	pop	r15
    6a0a:	ef 90       	pop	r14
    6a0c:	08 95       	ret

00006a0e <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    6a0e:	cf 92       	push	r12
    6a10:	df 92       	push	r13
    6a12:	ef 92       	push	r14
    6a14:	ff 92       	push	r15
    6a16:	0f 93       	push	r16
    6a18:	1f 93       	push	r17
    6a1a:	cf 93       	push	r28
    6a1c:	df 93       	push	r29
    6a1e:	ec 01       	movw	r28, r24
    6a20:	6a 01       	movw	r12, r20
    6a22:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    6a24:	21 15       	cp	r18, r1
    6a26:	31 05       	cpc	r19, r1
    6a28:	41 f4       	brne	.+16     	; 0x6a3a <_ZN5Print5printEli+0x2c>
    return write(n);
    6a2a:	e8 81       	ld	r30, Y
    6a2c:	f9 81       	ldd	r31, Y+1	; 0x01
    6a2e:	01 90       	ld	r0, Z+
    6a30:	f0 81       	ld	r31, Z
    6a32:	e0 2d       	mov	r30, r0
    6a34:	64 2f       	mov	r22, r20
    6a36:	09 95       	icall
    6a38:	1f c0       	rjmp	.+62     	; 0x6a78 <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    6a3a:	2a 30       	cpi	r18, 0x0A	; 10
    6a3c:	31 05       	cpc	r19, r1
    6a3e:	d1 f4       	brne	.+52     	; 0x6a74 <_ZN5Print5printEli+0x66>
    if (n < 0) {
    6a40:	77 ff       	sbrs	r23, 7
    6a42:	17 c0       	rjmp	.+46     	; 0x6a72 <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    6a44:	e8 81       	ld	r30, Y
    6a46:	f9 81       	ldd	r31, Y+1	; 0x01
    6a48:	01 90       	ld	r0, Z+
    6a4a:	f0 81       	ld	r31, Z
    6a4c:	e0 2d       	mov	r30, r0
    6a4e:	6d e2       	ldi	r22, 0x2D	; 45
    6a50:	09 95       	icall
    6a52:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    6a54:	44 27       	eor	r20, r20
    6a56:	55 27       	eor	r21, r21
    6a58:	ba 01       	movw	r22, r20
    6a5a:	4c 19       	sub	r20, r12
    6a5c:	5d 09       	sbc	r21, r13
    6a5e:	6e 09       	sbc	r22, r14
    6a60:	7f 09       	sbc	r23, r15
    6a62:	ce 01       	movw	r24, r28
    6a64:	2a e0       	ldi	r18, 0x0A	; 10
    6a66:	0e 94 71 34 	call	0x68e2	; 0x68e2 <_ZN5Print11printNumberEmh>
    6a6a:	98 01       	movw	r18, r16
    6a6c:	28 0f       	add	r18, r24
    6a6e:	39 1f       	adc	r19, r25
    6a70:	04 c0       	rjmp	.+8      	; 0x6a7a <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    6a72:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    6a74:	0e 94 71 34 	call	0x68e2	; 0x68e2 <_ZN5Print11printNumberEmh>
    6a78:	9c 01       	movw	r18, r24
  }
}
    6a7a:	c9 01       	movw	r24, r18
    6a7c:	df 91       	pop	r29
    6a7e:	cf 91       	pop	r28
    6a80:	1f 91       	pop	r17
    6a82:	0f 91       	pop	r16
    6a84:	ff 90       	pop	r15
    6a86:	ef 90       	pop	r14
    6a88:	df 90       	pop	r13
    6a8a:	cf 90       	pop	r12
    6a8c:	08 95       	ret

00006a8e <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    6a8e:	ef 92       	push	r14
    6a90:	ff 92       	push	r15
    6a92:	0f 93       	push	r16
    6a94:	1f 93       	push	r17
    6a96:	7b 01       	movw	r14, r22
    6a98:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    6a9a:	00 27       	eor	r16, r16
    6a9c:	f7 fc       	sbrc	r15, 7
    6a9e:	00 95       	com	r16
    6aa0:	10 2f       	mov	r17, r16
    6aa2:	b8 01       	movw	r22, r16
    6aa4:	a7 01       	movw	r20, r14
    6aa6:	0e 94 07 35 	call	0x6a0e	; 0x6a0e <_ZN5Print5printEli>
}
    6aaa:	1f 91       	pop	r17
    6aac:	0f 91       	pop	r16
    6aae:	ff 90       	pop	r15
    6ab0:	ef 90       	pop	r14
    6ab2:	08 95       	ret

00006ab4 <_ZN5Print5printERK6String>:
    n += write(c);
  }
  return n;
}

size_t Print::print(const String &s)
    6ab4:	af 92       	push	r10
    6ab6:	bf 92       	push	r11
    6ab8:	cf 92       	push	r12
    6aba:	df 92       	push	r13
    6abc:	ef 92       	push	r14
    6abe:	ff 92       	push	r15
    6ac0:	0f 93       	push	r16
    6ac2:	1f 93       	push	r17
    6ac4:	cf 93       	push	r28
    6ac6:	df 93       	push	r29
    6ac8:	5c 01       	movw	r10, r24
    6aca:	6b 01       	movw	r12, r22
    6acc:	ee 24       	eor	r14, r14
    6ace:	ff 24       	eor	r15, r15
    6ad0:	c0 e0       	ldi	r28, 0x00	; 0
    6ad2:	d0 e0       	ldi	r29, 0x00	; 0
    6ad4:	10 c0       	rjmp	.+32     	; 0x6af6 <_ZN5Print5printERK6String+0x42>
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    n += write(s[i]);
    6ad6:	d5 01       	movw	r26, r10
    6ad8:	ed 91       	ld	r30, X+
    6ada:	fc 91       	ld	r31, X
    6adc:	00 81       	ld	r16, Z
    6ade:	11 81       	ldd	r17, Z+1	; 0x01
    6ae0:	c6 01       	movw	r24, r12
    6ae2:	be 01       	movw	r22, r28
    6ae4:	0e 94 b6 35 	call	0x6b6c	; 0x6b6c <_ZNK6StringixEj>
    6ae8:	68 2f       	mov	r22, r24
    6aea:	c5 01       	movw	r24, r10
    6aec:	f8 01       	movw	r30, r16
    6aee:	09 95       	icall
    6af0:	e8 0e       	add	r14, r24
    6af2:	f9 1e       	adc	r15, r25
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    6af4:	21 96       	adiw	r28, 0x01	; 1
    6af6:	f6 01       	movw	r30, r12
    6af8:	84 81       	ldd	r24, Z+4	; 0x04
    6afa:	95 81       	ldd	r25, Z+5	; 0x05
    6afc:	c8 17       	cp	r28, r24
    6afe:	d9 07       	cpc	r29, r25
    6b00:	50 f3       	brcs	.-44     	; 0x6ad6 <_ZN5Print5printERK6String+0x22>
    n += write(s[i]);
  }
  return n;
}
    6b02:	c7 01       	movw	r24, r14
    6b04:	df 91       	pop	r29
    6b06:	cf 91       	pop	r28
    6b08:	1f 91       	pop	r17
    6b0a:	0f 91       	pop	r16
    6b0c:	ff 90       	pop	r15
    6b0e:	ef 90       	pop	r14
    6b10:	df 90       	pop	r13
    6b12:	cf 90       	pop	r12
    6b14:	bf 90       	pop	r11
    6b16:	af 90       	pop	r10
    6b18:	08 95       	ret

00006b1a <_ZN5Print7printlnERK6String>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
    6b1a:	ef 92       	push	r14
    6b1c:	ff 92       	push	r15
    6b1e:	0f 93       	push	r16
    6b20:	1f 93       	push	r17
    6b22:	7c 01       	movw	r14, r24
{
  size_t n = print(s);
    6b24:	0e 94 5a 35 	call	0x6ab4	; 0x6ab4 <_ZN5Print5printERK6String>
    6b28:	8c 01       	movw	r16, r24
  n += println();
    6b2a:	c7 01       	movw	r24, r14
    6b2c:	0e 94 21 34 	call	0x6842	; 0x6842 <_ZN5Print7printlnEv>
    6b30:	9c 01       	movw	r18, r24
    6b32:	20 0f       	add	r18, r16
    6b34:	31 1f       	adc	r19, r17
  return n;
}
    6b36:	c9 01       	movw	r24, r18
    6b38:	1f 91       	pop	r17
    6b3a:	0f 91       	pop	r16
    6b3c:	ff 90       	pop	r15
    6b3e:	ef 90       	pop	r14
    6b40:	08 95       	ret

00006b42 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
    6b42:	fc 01       	movw	r30, r24
    6b44:	9b 01       	movw	r18, r22
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    6b46:	84 81       	ldd	r24, Z+4	; 0x04
    6b48:	95 81       	ldd	r25, Z+5	; 0x05
    6b4a:	68 17       	cp	r22, r24
    6b4c:	79 07       	cpc	r23, r25
    6b4e:	28 f4       	brcc	.+10     	; 0x6b5a <_ZN6StringixEj+0x18>
    6b50:	60 81       	ld	r22, Z
    6b52:	71 81       	ldd	r23, Z+1	; 0x01
    6b54:	61 15       	cp	r22, r1
    6b56:	71 05       	cpc	r23, r1
    6b58:	29 f4       	brne	.+10     	; 0x6b64 <_ZN6StringixEj+0x22>
		dummy_writable_char = 0;
    6b5a:	10 92 cd 03 	sts	0x03CD, r1
    6b5e:	6d ec       	ldi	r22, 0xCD	; 205
    6b60:	73 e0       	ldi	r23, 0x03	; 3
    6b62:	02 c0       	rjmp	.+4      	; 0x6b68 <_ZN6StringixEj+0x26>
		return dummy_writable_char;
	}
	return buffer[index];
    6b64:	62 0f       	add	r22, r18
    6b66:	73 1f       	adc	r23, r19
}
    6b68:	cb 01       	movw	r24, r22
    6b6a:	08 95       	ret

00006b6c <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
    6b6c:	fc 01       	movw	r30, r24
{
	if (index >= len || !buffer) return 0;
    6b6e:	84 81       	ldd	r24, Z+4	; 0x04
    6b70:	95 81       	ldd	r25, Z+5	; 0x05
    6b72:	68 17       	cp	r22, r24
    6b74:	79 07       	cpc	r23, r25
    6b76:	48 f4       	brcc	.+18     	; 0x6b8a <_ZNK6StringixEj+0x1e>
    6b78:	01 90       	ld	r0, Z+
    6b7a:	f0 81       	ld	r31, Z
    6b7c:	e0 2d       	mov	r30, r0
    6b7e:	30 97       	sbiw	r30, 0x00	; 0
    6b80:	21 f0       	breq	.+8      	; 0x6b8a <_ZNK6StringixEj+0x1e>
	return buffer[index];
    6b82:	e6 0f       	add	r30, r22
    6b84:	f7 1f       	adc	r31, r23
    6b86:	80 81       	ld	r24, Z
    6b88:	08 95       	ret
    6b8a:	80 e0       	ldi	r24, 0x00	; 0
}
    6b8c:	08 95       	ret

00006b8e <_ZN6String4trimEv>:
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}

void String::trim(void)
    6b8e:	cf 92       	push	r12
    6b90:	df 92       	push	r13
    6b92:	ef 92       	push	r14
    6b94:	ff 92       	push	r15
    6b96:	0f 93       	push	r16
    6b98:	1f 93       	push	r17
    6b9a:	cf 93       	push	r28
    6b9c:	df 93       	push	r29
    6b9e:	6c 01       	movw	r12, r24
{
	if (!buffer || len == 0) return;
    6ba0:	dc 01       	movw	r26, r24
    6ba2:	ed 90       	ld	r14, X+
    6ba4:	fc 90       	ld	r15, X
    6ba6:	11 97       	sbiw	r26, 0x01	; 1
    6ba8:	e1 14       	cp	r14, r1
    6baa:	f1 04       	cpc	r15, r1
    6bac:	09 f4       	brne	.+2      	; 0x6bb0 <_ZN6String4trimEv+0x22>
    6bae:	41 c0       	rjmp	.+130    	; 0x6c32 <_ZN6String4trimEv+0xa4>
    6bb0:	14 96       	adiw	r26, 0x04	; 4
    6bb2:	cd 91       	ld	r28, X+
    6bb4:	dc 91       	ld	r29, X
    6bb6:	15 97       	sbiw	r26, 0x05	; 5
    6bb8:	20 97       	sbiw	r28, 0x00	; 0
    6bba:	d9 f1       	breq	.+118    	; 0x6c32 <_ZN6String4trimEv+0xa4>
    6bbc:	87 01       	movw	r16, r14
    6bbe:	02 c0       	rjmp	.+4      	; 0x6bc4 <_ZN6String4trimEv+0x36>
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    6bc0:	0f 5f       	subi	r16, 0xFF	; 255
    6bc2:	1f 4f       	sbci	r17, 0xFF	; 255
    6bc4:	f8 01       	movw	r30, r16
    6bc6:	80 81       	ld	r24, Z
    6bc8:	99 27       	eor	r25, r25
    6bca:	87 fd       	sbrc	r24, 7
    6bcc:	90 95       	com	r25
    6bce:	0e 94 67 3c 	call	0x78ce	; 0x78ce <isspace>
    6bd2:	89 2b       	or	r24, r25
    6bd4:	a9 f7       	brne	.-22     	; 0x6bc0 <_ZN6String4trimEv+0x32>
	char *end = buffer + len - 1;
    6bd6:	21 97       	sbiw	r28, 0x01	; 1
    6bd8:	ce 0d       	add	r28, r14
    6bda:	df 1d       	adc	r29, r15
    6bdc:	01 c0       	rjmp	.+2      	; 0x6be0 <_ZN6String4trimEv+0x52>
	while (isspace(*end) && end >= begin) end--;
    6bde:	21 97       	sbiw	r28, 0x01	; 1
    6be0:	88 81       	ld	r24, Y
    6be2:	99 27       	eor	r25, r25
    6be4:	87 fd       	sbrc	r24, 7
    6be6:	90 95       	com	r25
    6be8:	0e 94 67 3c 	call	0x78ce	; 0x78ce <isspace>
    6bec:	89 2b       	or	r24, r25
    6bee:	19 f0       	breq	.+6      	; 0x6bf6 <_ZN6String4trimEv+0x68>
    6bf0:	c0 17       	cp	r28, r16
    6bf2:	d1 07       	cpc	r29, r17
    6bf4:	a0 f7       	brcc	.-24     	; 0x6bde <_ZN6String4trimEv+0x50>
	len = end + 1 - begin;
    6bf6:	fe 01       	movw	r30, r28
    6bf8:	31 96       	adiw	r30, 0x01	; 1
    6bfa:	e0 1b       	sub	r30, r16
    6bfc:	f1 0b       	sbc	r31, r17
    6bfe:	d6 01       	movw	r26, r12
    6c00:	15 96       	adiw	r26, 0x05	; 5
    6c02:	fc 93       	st	X, r31
    6c04:	ee 93       	st	-X, r30
    6c06:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    6c08:	2d 91       	ld	r18, X+
    6c0a:	3c 91       	ld	r19, X
    6c0c:	20 17       	cp	r18, r16
    6c0e:	31 07       	cpc	r19, r17
    6c10:	28 f4       	brcc	.+10     	; 0x6c1c <_ZN6String4trimEv+0x8e>
    6c12:	c9 01       	movw	r24, r18
    6c14:	b8 01       	movw	r22, r16
    6c16:	af 01       	movw	r20, r30
    6c18:	0e 94 1a 05 	call	0xa34	; 0xa34 <memcpy>
	buffer[len] = 0;
    6c1c:	d6 01       	movw	r26, r12
    6c1e:	ed 91       	ld	r30, X+
    6c20:	fc 91       	ld	r31, X
    6c22:	11 97       	sbiw	r26, 0x01	; 1
    6c24:	14 96       	adiw	r26, 0x04	; 4
    6c26:	8d 91       	ld	r24, X+
    6c28:	9c 91       	ld	r25, X
    6c2a:	15 97       	sbiw	r26, 0x05	; 5
    6c2c:	e8 0f       	add	r30, r24
    6c2e:	f9 1f       	adc	r31, r25
    6c30:	10 82       	st	Z, r1
}
    6c32:	df 91       	pop	r29
    6c34:	cf 91       	pop	r28
    6c36:	1f 91       	pop	r17
    6c38:	0f 91       	pop	r16
    6c3a:	ff 90       	pop	r15
    6c3c:	ef 90       	pop	r14
    6c3e:	df 90       	pop	r13
    6c40:	cf 90       	pop	r12
    6c42:	08 95       	ret

00006c44 <_ZN6String11toUpperCaseEv>:
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}

void String::toUpperCase(void)
    6c44:	cf 93       	push	r28
    6c46:	df 93       	push	r29
    6c48:	fc 01       	movw	r30, r24
{
	if (!buffer) return;
    6c4a:	c0 81       	ld	r28, Z
    6c4c:	d1 81       	ldd	r29, Z+1	; 0x01
    6c4e:	20 97       	sbiw	r28, 0x00	; 0
    6c50:	39 f4       	brne	.+14     	; 0x6c60 <_ZN6String11toUpperCaseEv+0x1c>
    6c52:	09 c0       	rjmp	.+18     	; 0x6c66 <_ZN6String11toUpperCaseEv+0x22>
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
    6c54:	99 27       	eor	r25, r25
    6c56:	87 fd       	sbrc	r24, 7
    6c58:	90 95       	com	r25
    6c5a:	0e 94 6f 3c 	call	0x78de	; 0x78de <toupper>
    6c5e:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    6c60:	88 81       	ld	r24, Y
    6c62:	88 23       	and	r24, r24
    6c64:	b9 f7       	brne	.-18     	; 0x6c54 <_ZN6String11toUpperCaseEv+0x10>
		*p = toupper(*p);
	}
}
    6c66:	df 91       	pop	r29
    6c68:	cf 91       	pop	r28
    6c6a:	08 95       	ret

00006c6c <_ZNK6String7indexOfEcj>:
int String::indexOf(char c) const
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
    6c6c:	cf 93       	push	r28
    6c6e:	df 93       	push	r29
    6c70:	fc 01       	movw	r30, r24
{
	if (fromIndex >= len) return -1;
    6c72:	84 81       	ldd	r24, Z+4	; 0x04
    6c74:	95 81       	ldd	r25, Z+5	; 0x05
    6c76:	48 17       	cp	r20, r24
    6c78:	59 07       	cpc	r21, r25
    6c7a:	68 f4       	brcc	.+26     	; 0x6c96 <_ZNK6String7indexOfEcj+0x2a>
	const char* temp = strchr(buffer + fromIndex, ch);
    6c7c:	c0 81       	ld	r28, Z
    6c7e:	d1 81       	ldd	r29, Z+1	; 0x01
    6c80:	77 27       	eor	r23, r23
    6c82:	67 fd       	sbrc	r22, 7
    6c84:	70 95       	com	r23
    6c86:	ce 01       	movw	r24, r28
    6c88:	84 0f       	add	r24, r20
    6c8a:	95 1f       	adc	r25, r21
    6c8c:	0e 94 23 05 	call	0xa46	; 0xa46 <strchr>
    6c90:	9c 01       	movw	r18, r24
	if (temp == NULL) return -1;
    6c92:	00 97       	sbiw	r24, 0x00	; 0
    6c94:	19 f4       	brne	.+6      	; 0x6c9c <_ZNK6String7indexOfEcj+0x30>
    6c96:	2f ef       	ldi	r18, 0xFF	; 255
    6c98:	3f ef       	ldi	r19, 0xFF	; 255
    6c9a:	02 c0       	rjmp	.+4      	; 0x6ca0 <_ZNK6String7indexOfEcj+0x34>
	return temp - buffer;
    6c9c:	2c 1b       	sub	r18, r28
    6c9e:	3d 0b       	sbc	r19, r29
}
    6ca0:	c9 01       	movw	r24, r18
    6ca2:	df 91       	pop	r29
    6ca4:	cf 91       	pop	r28
    6ca6:	08 95       	ret

00006ca8 <_ZNK6String8endsWithERKS_>:
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
    6ca8:	fc 01       	movw	r30, r24
    6caa:	db 01       	movw	r26, r22
{
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    6cac:	24 81       	ldd	r18, Z+4	; 0x04
    6cae:	35 81       	ldd	r19, Z+5	; 0x05
    6cb0:	14 96       	adiw	r26, 0x04	; 4
    6cb2:	4d 91       	ld	r20, X+
    6cb4:	5c 91       	ld	r21, X
    6cb6:	15 97       	sbiw	r26, 0x05	; 5
    6cb8:	24 17       	cp	r18, r20
    6cba:	35 07       	cpc	r19, r21
    6cbc:	a8 f0       	brcs	.+42     	; 0x6ce8 <_ZNK6String8endsWithERKS_+0x40>
    6cbe:	80 81       	ld	r24, Z
    6cc0:	91 81       	ldd	r25, Z+1	; 0x01
    6cc2:	00 97       	sbiw	r24, 0x00	; 0
    6cc4:	89 f0       	breq	.+34     	; 0x6ce8 <_ZNK6String8endsWithERKS_+0x40>
    6cc6:	6d 91       	ld	r22, X+
    6cc8:	7c 91       	ld	r23, X
    6cca:	61 15       	cp	r22, r1
    6ccc:	71 05       	cpc	r23, r1
    6cce:	61 f0       	breq	.+24     	; 0x6ce8 <_ZNK6String8endsWithERKS_+0x40>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
    6cd0:	24 1b       	sub	r18, r20
    6cd2:	35 0b       	sbc	r19, r21
    6cd4:	82 0f       	add	r24, r18
    6cd6:	93 1f       	adc	r25, r19
    6cd8:	0e 94 2e 05 	call	0xa5c	; 0xa5c <strcmp>
    6cdc:	9c 01       	movw	r18, r24
    6cde:	80 e0       	ldi	r24, 0x00	; 0
    6ce0:	23 2b       	or	r18, r19
    6ce2:	19 f4       	brne	.+6      	; 0x6cea <_ZNK6String8endsWithERKS_+0x42>
    6ce4:	81 e0       	ldi	r24, 0x01	; 1
    6ce6:	08 95       	ret
    6ce8:	80 e0       	ldi	r24, 0x00	; 0
}
    6cea:	08 95       	ret

00006cec <_ZNK6String10startsWithERKS_j>:
{
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
    6cec:	fc 01       	movw	r30, r24
    6cee:	db 01       	movw	r26, r22
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    6cf0:	14 96       	adiw	r26, 0x04	; 4
    6cf2:	2d 91       	ld	r18, X+
    6cf4:	3c 91       	ld	r19, X
    6cf6:	15 97       	sbiw	r26, 0x05	; 5
    6cf8:	84 81       	ldd	r24, Z+4	; 0x04
    6cfa:	95 81       	ldd	r25, Z+5	; 0x05
    6cfc:	82 1b       	sub	r24, r18
    6cfe:	93 0b       	sbc	r25, r19
    6d00:	84 17       	cp	r24, r20
    6d02:	95 07       	cpc	r25, r21
    6d04:	a0 f0       	brcs	.+40     	; 0x6d2e <_ZNK6String10startsWithERKS_j+0x42>
    6d06:	80 81       	ld	r24, Z
    6d08:	91 81       	ldd	r25, Z+1	; 0x01
    6d0a:	00 97       	sbiw	r24, 0x00	; 0
    6d0c:	81 f0       	breq	.+32     	; 0x6d2e <_ZNK6String10startsWithERKS_j+0x42>
    6d0e:	6d 91       	ld	r22, X+
    6d10:	7c 91       	ld	r23, X
    6d12:	61 15       	cp	r22, r1
    6d14:	71 05       	cpc	r23, r1
    6d16:	59 f0       	breq	.+22     	; 0x6d2e <_ZNK6String10startsWithERKS_j+0x42>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
    6d18:	84 0f       	add	r24, r20
    6d1a:	95 1f       	adc	r25, r21
    6d1c:	a9 01       	movw	r20, r18
    6d1e:	0e 94 3e 05 	call	0xa7c	; 0xa7c <strncmp>
    6d22:	9c 01       	movw	r18, r24
    6d24:	80 e0       	ldi	r24, 0x00	; 0
    6d26:	23 2b       	or	r18, r19
    6d28:	19 f4       	brne	.+6      	; 0x6d30 <_ZNK6String10startsWithERKS_j+0x44>
    6d2a:	81 e0       	ldi	r24, 0x01	; 1
    6d2c:	08 95       	ret
    6d2e:	80 e0       	ldi	r24, 0x00	; 0
}
    6d30:	08 95       	ret

00006d32 <_ZNK6String10startsWithERKS_>:
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	} 
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
    6d32:	fc 01       	movw	r30, r24
    6d34:	db 01       	movw	r26, r22
{
	if (len < s2.len) return 0;
    6d36:	24 81       	ldd	r18, Z+4	; 0x04
    6d38:	35 81       	ldd	r19, Z+5	; 0x05
    6d3a:	14 96       	adiw	r26, 0x04	; 4
    6d3c:	8d 91       	ld	r24, X+
    6d3e:	9c 91       	ld	r25, X
    6d40:	15 97       	sbiw	r26, 0x05	; 5
    6d42:	28 17       	cp	r18, r24
    6d44:	39 07       	cpc	r19, r25
    6d46:	10 f4       	brcc	.+4      	; 0x6d4c <_ZNK6String10startsWithERKS_+0x1a>
    6d48:	80 e0       	ldi	r24, 0x00	; 0
    6d4a:	08 95       	ret
	return startsWith(s2, 0);
    6d4c:	cf 01       	movw	r24, r30
    6d4e:	40 e0       	ldi	r20, 0x00	; 0
    6d50:	50 e0       	ldi	r21, 0x00	; 0
    6d52:	0e 94 76 36 	call	0x6cec	; 0x6cec <_ZNK6String10startsWithERKS_j>
}
    6d56:	08 95       	ret

00006d58 <_ZN6String12changeBufferEj>:
		return 1;
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
    6d58:	0f 93       	push	r16
    6d5a:	1f 93       	push	r17
    6d5c:	cf 93       	push	r28
    6d5e:	df 93       	push	r29
    6d60:	ec 01       	movw	r28, r24
    6d62:	8b 01       	movw	r16, r22
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    6d64:	6f 5f       	subi	r22, 0xFF	; 255
    6d66:	7f 4f       	sbci	r23, 0xFF	; 255
    6d68:	88 81       	ld	r24, Y
    6d6a:	99 81       	ldd	r25, Y+1	; 0x01
    6d6c:	0e 94 fd 38 	call	0x71fa	; 0x71fa <realloc>
	if (newbuffer) {
    6d70:	00 97       	sbiw	r24, 0x00	; 0
    6d72:	11 f4       	brne	.+4      	; 0x6d78 <_ZN6String12changeBufferEj+0x20>
    6d74:	80 e0       	ldi	r24, 0x00	; 0
    6d76:	05 c0       	rjmp	.+10     	; 0x6d82 <_ZN6String12changeBufferEj+0x2a>
		buffer = newbuffer;
    6d78:	99 83       	std	Y+1, r25	; 0x01
    6d7a:	88 83       	st	Y, r24
		capacity = maxStrLen;
    6d7c:	1b 83       	std	Y+3, r17	; 0x03
    6d7e:	0a 83       	std	Y+2, r16	; 0x02
    6d80:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    6d82:	df 91       	pop	r29
    6d84:	cf 91       	pop	r28
    6d86:	1f 91       	pop	r17
    6d88:	0f 91       	pop	r16
    6d8a:	08 95       	ret

00006d8c <_ZN6String7reserveEj>:
	if (buffer) free(buffer);
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
    6d8c:	cf 93       	push	r28
    6d8e:	df 93       	push	r29
    6d90:	ec 01       	movw	r28, r24
{
	if (buffer && capacity >= size) return 1;
    6d92:	88 81       	ld	r24, Y
    6d94:	99 81       	ldd	r25, Y+1	; 0x01
    6d96:	89 2b       	or	r24, r25
    6d98:	29 f0       	breq	.+10     	; 0x6da4 <_ZN6String7reserveEj+0x18>
    6d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    6d9c:	9b 81       	ldd	r25, Y+3	; 0x03
    6d9e:	86 17       	cp	r24, r22
    6da0:	97 07       	cpc	r25, r23
    6da2:	60 f4       	brcc	.+24     	; 0x6dbc <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    6da4:	ce 01       	movw	r24, r28
    6da6:	0e 94 ac 36 	call	0x6d58	; 0x6d58 <_ZN6String12changeBufferEj>
    6daa:	88 23       	and	r24, r24
    6dac:	41 f0       	breq	.+16     	; 0x6dbe <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    6dae:	8c 81       	ldd	r24, Y+4	; 0x04
    6db0:	9d 81       	ldd	r25, Y+5	; 0x05
    6db2:	89 2b       	or	r24, r25
    6db4:	19 f4       	brne	.+6      	; 0x6dbc <_ZN6String7reserveEj+0x30>
    6db6:	e8 81       	ld	r30, Y
    6db8:	f9 81       	ldd	r31, Y+1	; 0x01
    6dba:	10 82       	st	Z, r1
    6dbc:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    6dbe:	df 91       	pop	r29
    6dc0:	cf 91       	pop	r28
    6dc2:	08 95       	ret

00006dc4 <_ZN6String6concatEPKcj>:
unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
    6dc4:	ef 92       	push	r14
    6dc6:	ff 92       	push	r15
    6dc8:	0f 93       	push	r16
    6dca:	1f 93       	push	r17
    6dcc:	cf 93       	push	r28
    6dce:	df 93       	push	r29
    6dd0:	ec 01       	movw	r28, r24
    6dd2:	7b 01       	movw	r14, r22
{
	unsigned int newlen = len + length;
    6dd4:	6c 81       	ldd	r22, Y+4	; 0x04
    6dd6:	7d 81       	ldd	r23, Y+5	; 0x05
	if (!cstr) return 0;
    6dd8:	e1 14       	cp	r14, r1
    6dda:	f1 04       	cpc	r15, r1
    6ddc:	c1 f0       	breq	.+48     	; 0x6e0e <_ZN6String6concatEPKcj+0x4a>
	if (length == 0) return 1;
    6dde:	41 15       	cp	r20, r1
    6de0:	51 05       	cpc	r21, r1
    6de2:	99 f0       	breq	.+38     	; 0x6e0a <_ZN6String6concatEPKcj+0x46>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    6de4:	8a 01       	movw	r16, r20
    6de6:	06 0f       	add	r16, r22
    6de8:	17 1f       	adc	r17, r23
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
    6dea:	b8 01       	movw	r22, r16
    6dec:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <_ZN6String7reserveEj>
    6df0:	88 23       	and	r24, r24
    6df2:	69 f0       	breq	.+26     	; 0x6e0e <_ZN6String6concatEPKcj+0x4a>
	strcpy(buffer + len, cstr);
    6df4:	88 81       	ld	r24, Y
    6df6:	99 81       	ldd	r25, Y+1	; 0x01
    6df8:	2c 81       	ldd	r18, Y+4	; 0x04
    6dfa:	3d 81       	ldd	r19, Y+5	; 0x05
    6dfc:	82 0f       	add	r24, r18
    6dfe:	93 1f       	adc	r25, r19
    6e00:	b7 01       	movw	r22, r14
    6e02:	0e 94 37 05 	call	0xa6e	; 0xa6e <strcpy>
	len = newlen;
    6e06:	1d 83       	std	Y+5, r17	; 0x05
    6e08:	0c 83       	std	Y+4, r16	; 0x04
    6e0a:	81 e0       	ldi	r24, 0x01	; 1
    6e0c:	01 c0       	rjmp	.+2      	; 0x6e10 <_ZN6String6concatEPKcj+0x4c>
	return 1;
    6e0e:	80 e0       	ldi	r24, 0x00	; 0
}
    6e10:	df 91       	pop	r29
    6e12:	cf 91       	pop	r28
    6e14:	1f 91       	pop	r17
    6e16:	0f 91       	pop	r16
    6e18:	ff 90       	pop	r15
    6e1a:	ef 90       	pop	r14
    6e1c:	08 95       	ret

00006e1e <_ZN6String6concatEj>:
	char buf[7];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(unsigned int num)
    6e1e:	ef 92       	push	r14
    6e20:	ff 92       	push	r15
    6e22:	0f 93       	push	r16
    6e24:	1f 93       	push	r17
    6e26:	df 93       	push	r29
    6e28:	cf 93       	push	r28
    6e2a:	00 d0       	rcall	.+0      	; 0x6e2c <_ZN6String6concatEj+0xe>
    6e2c:	00 d0       	rcall	.+0      	; 0x6e2e <_ZN6String6concatEj+0x10>
    6e2e:	00 d0       	rcall	.+0      	; 0x6e30 <_ZN6String6concatEj+0x12>
    6e30:	cd b7       	in	r28, 0x3d	; 61
    6e32:	de b7       	in	r29, 0x3e	; 62
    6e34:	7c 01       	movw	r14, r24
    6e36:	cb 01       	movw	r24, r22
{
	char buf[6];
	utoa(num, buf, 10);
    6e38:	8e 01       	movw	r16, r28
    6e3a:	0f 5f       	subi	r16, 0xFF	; 255
    6e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    6e3e:	b8 01       	movw	r22, r16
    6e40:	4a e0       	ldi	r20, 0x0A	; 10
    6e42:	50 e0       	ldi	r21, 0x00	; 0
    6e44:	0e 94 6d 05 	call	0xada	; 0xada <utoa>
	return concat(buf, strlen(buf));
    6e48:	f8 01       	movw	r30, r16
    6e4a:	01 90       	ld	r0, Z+
    6e4c:	00 20       	and	r0, r0
    6e4e:	e9 f7       	brne	.-6      	; 0x6e4a <_ZN6String6concatEj+0x2c>
    6e50:	31 97       	sbiw	r30, 0x01	; 1
    6e52:	e0 1b       	sub	r30, r16
    6e54:	f1 0b       	sbc	r31, r17
    6e56:	c7 01       	movw	r24, r14
    6e58:	b8 01       	movw	r22, r16
    6e5a:	af 01       	movw	r20, r30
    6e5c:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <_ZN6String6concatEPKcj>
}
    6e60:	26 96       	adiw	r28, 0x06	; 6
    6e62:	0f b6       	in	r0, 0x3f	; 63
    6e64:	f8 94       	cli
    6e66:	de bf       	out	0x3e, r29	; 62
    6e68:	0f be       	out	0x3f, r0	; 63
    6e6a:	cd bf       	out	0x3d, r28	; 61
    6e6c:	cf 91       	pop	r28
    6e6e:	df 91       	pop	r29
    6e70:	1f 91       	pop	r17
    6e72:	0f 91       	pop	r16
    6e74:	ff 90       	pop	r15
    6e76:	ef 90       	pop	r14
    6e78:	08 95       	ret

00006e7a <_ZN6String6concatEi>:
	char buf[4];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
    6e7a:	ef 92       	push	r14
    6e7c:	ff 92       	push	r15
    6e7e:	0f 93       	push	r16
    6e80:	1f 93       	push	r17
    6e82:	df 93       	push	r29
    6e84:	cf 93       	push	r28
    6e86:	cd b7       	in	r28, 0x3d	; 61
    6e88:	de b7       	in	r29, 0x3e	; 62
    6e8a:	27 97       	sbiw	r28, 0x07	; 7
    6e8c:	0f b6       	in	r0, 0x3f	; 63
    6e8e:	f8 94       	cli
    6e90:	de bf       	out	0x3e, r29	; 62
    6e92:	0f be       	out	0x3f, r0	; 63
    6e94:	cd bf       	out	0x3d, r28	; 61
    6e96:	7c 01       	movw	r14, r24
    6e98:	cb 01       	movw	r24, r22
{
	char buf[7];
	itoa(num, buf, 10);
    6e9a:	8e 01       	movw	r16, r28
    6e9c:	0f 5f       	subi	r16, 0xFF	; 255
    6e9e:	1f 4f       	sbci	r17, 0xFF	; 255
    6ea0:	b8 01       	movw	r22, r16
    6ea2:	4a e0       	ldi	r20, 0x0A	; 10
    6ea4:	50 e0       	ldi	r21, 0x00	; 0
    6ea6:	0e 94 4c 05 	call	0xa98	; 0xa98 <itoa>
	return concat(buf, strlen(buf));
    6eaa:	f8 01       	movw	r30, r16
    6eac:	01 90       	ld	r0, Z+
    6eae:	00 20       	and	r0, r0
    6eb0:	e9 f7       	brne	.-6      	; 0x6eac <_ZN6String6concatEi+0x32>
    6eb2:	31 97       	sbiw	r30, 0x01	; 1
    6eb4:	e0 1b       	sub	r30, r16
    6eb6:	f1 0b       	sbc	r31, r17
    6eb8:	c7 01       	movw	r24, r14
    6eba:	b8 01       	movw	r22, r16
    6ebc:	af 01       	movw	r20, r30
    6ebe:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <_ZN6String6concatEPKcj>
}
    6ec2:	27 96       	adiw	r28, 0x07	; 7
    6ec4:	0f b6       	in	r0, 0x3f	; 63
    6ec6:	f8 94       	cli
    6ec8:	de bf       	out	0x3e, r29	; 62
    6eca:	0f be       	out	0x3f, r0	; 63
    6ecc:	cd bf       	out	0x3d, r28	; 61
    6ece:	cf 91       	pop	r28
    6ed0:	df 91       	pop	r29
    6ed2:	1f 91       	pop	r17
    6ed4:	0f 91       	pop	r16
    6ed6:	ff 90       	pop	r15
    6ed8:	ef 90       	pop	r14
    6eda:	08 95       	ret

00006edc <_ZN6String6concatEh>:
	buf[0] = c;
	buf[1] = 0;
	return concat(buf, 1);
}

unsigned char String::concat(unsigned char num)
    6edc:	ef 92       	push	r14
    6ede:	ff 92       	push	r15
    6ee0:	0f 93       	push	r16
    6ee2:	1f 93       	push	r17
    6ee4:	df 93       	push	r29
    6ee6:	cf 93       	push	r28
    6ee8:	00 d0       	rcall	.+0      	; 0x6eea <_ZN6String6concatEh+0xe>
    6eea:	00 d0       	rcall	.+0      	; 0x6eec <_ZN6String6concatEh+0x10>
    6eec:	cd b7       	in	r28, 0x3d	; 61
    6eee:	de b7       	in	r29, 0x3e	; 62
    6ef0:	7c 01       	movw	r14, r24
    6ef2:	86 2f       	mov	r24, r22
{
	char buf[4];
	itoa(num, buf, 10);
    6ef4:	90 e0       	ldi	r25, 0x00	; 0
    6ef6:	8e 01       	movw	r16, r28
    6ef8:	0f 5f       	subi	r16, 0xFF	; 255
    6efa:	1f 4f       	sbci	r17, 0xFF	; 255
    6efc:	b8 01       	movw	r22, r16
    6efe:	4a e0       	ldi	r20, 0x0A	; 10
    6f00:	50 e0       	ldi	r21, 0x00	; 0
    6f02:	0e 94 4c 05 	call	0xa98	; 0xa98 <itoa>
	return concat(buf, strlen(buf));
    6f06:	f8 01       	movw	r30, r16
    6f08:	01 90       	ld	r0, Z+
    6f0a:	00 20       	and	r0, r0
    6f0c:	e9 f7       	brne	.-6      	; 0x6f08 <_ZN6String6concatEh+0x2c>
    6f0e:	31 97       	sbiw	r30, 0x01	; 1
    6f10:	e0 1b       	sub	r30, r16
    6f12:	f1 0b       	sbc	r31, r17
    6f14:	c7 01       	movw	r24, r14
    6f16:	b8 01       	movw	r22, r16
    6f18:	af 01       	movw	r20, r30
    6f1a:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <_ZN6String6concatEPKcj>
}
    6f1e:	0f 90       	pop	r0
    6f20:	0f 90       	pop	r0
    6f22:	0f 90       	pop	r0
    6f24:	0f 90       	pop	r0
    6f26:	cf 91       	pop	r28
    6f28:	df 91       	pop	r29
    6f2a:	1f 91       	pop	r17
    6f2c:	0f 91       	pop	r16
    6f2e:	ff 90       	pop	r15
    6f30:	ef 90       	pop	r14
    6f32:	08 95       	ret

00006f34 <_ZN6String6concatEc>:
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}

unsigned char String::concat(char c)
    6f34:	df 93       	push	r29
    6f36:	cf 93       	push	r28
    6f38:	00 d0       	rcall	.+0      	; 0x6f3a <_ZN6String6concatEc+0x6>
    6f3a:	cd b7       	in	r28, 0x3d	; 61
    6f3c:	de b7       	in	r29, 0x3e	; 62
{
	char buf[2];
	buf[0] = c;
    6f3e:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    6f40:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
    6f42:	be 01       	movw	r22, r28
    6f44:	6f 5f       	subi	r22, 0xFF	; 255
    6f46:	7f 4f       	sbci	r23, 0xFF	; 255
    6f48:	41 e0       	ldi	r20, 0x01	; 1
    6f4a:	50 e0       	ldi	r21, 0x00	; 0
    6f4c:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <_ZN6String6concatEPKcj>
}
    6f50:	0f 90       	pop	r0
    6f52:	0f 90       	pop	r0
    6f54:	cf 91       	pop	r28
    6f56:	df 91       	pop	r29
    6f58:	08 95       	ret

00006f5a <_ZN6String6concatERKS_>:

/*********************************************/
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
    6f5a:	fb 01       	movw	r30, r22
{
	return concat(s.buffer, s.len);
    6f5c:	60 81       	ld	r22, Z
    6f5e:	71 81       	ldd	r23, Z+1	; 0x01
    6f60:	44 81       	ldd	r20, Z+4	; 0x04
    6f62:	55 81       	ldd	r21, Z+5	; 0x05
    6f64:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <_ZN6String6concatEPKcj>
}
    6f68:	08 95       	ret

00006f6a <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
	flags = 0;
}

void String::invalidate(void)
    6f6a:	cf 93       	push	r28
    6f6c:	df 93       	push	r29
    6f6e:	ec 01       	movw	r28, r24
{
	if (buffer) free(buffer);
    6f70:	88 81       	ld	r24, Y
    6f72:	99 81       	ldd	r25, Y+1	; 0x01
    6f74:	00 97       	sbiw	r24, 0x00	; 0
    6f76:	11 f0       	breq	.+4      	; 0x6f7c <_ZN6String10invalidateEv+0x12>
    6f78:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <free>
	buffer = NULL;
    6f7c:	19 82       	std	Y+1, r1	; 0x01
    6f7e:	18 82       	st	Y, r1
	capacity = len = 0;
    6f80:	1d 82       	std	Y+5, r1	; 0x05
    6f82:	1c 82       	std	Y+4, r1	; 0x04
    6f84:	1b 82       	std	Y+3, r1	; 0x03
    6f86:	1a 82       	std	Y+2, r1	; 0x02
}
    6f88:	df 91       	pop	r29
    6f8a:	cf 91       	pop	r28
    6f8c:	08 95       	ret

00006f8e <_ZplRK15StringSumHelperRK6String>:

/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
    6f8e:	0f 93       	push	r16
    6f90:	1f 93       	push	r17
    6f92:	18 2f       	mov	r17, r24
    6f94:	09 2f       	mov	r16, r25
    6f96:	fb 01       	movw	r30, r22
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    6f98:	60 81       	ld	r22, Z
    6f9a:	71 81       	ldd	r23, Z+1	; 0x01
    6f9c:	44 81       	ldd	r20, Z+4	; 0x04
    6f9e:	55 81       	ldd	r21, Z+5	; 0x05
    6fa0:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <_ZN6String6concatEPKcj>
    6fa4:	88 23       	and	r24, r24
    6fa6:	21 f4       	brne	.+8      	; 0x6fb0 <_ZplRK15StringSumHelperRK6String+0x22>
    6fa8:	81 2f       	mov	r24, r17
    6faa:	90 2f       	mov	r25, r16
    6fac:	0e 94 b5 37 	call	0x6f6a	; 0x6f6a <_ZN6String10invalidateEv>
	return a;
}
    6fb0:	81 2f       	mov	r24, r17
    6fb2:	90 2f       	mov	r25, r16
    6fb4:	1f 91       	pop	r17
    6fb6:	0f 91       	pop	r16
    6fb8:	08 95       	ret

00006fba <_ZN6String4copyEPKcj>:

/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
    6fba:	ef 92       	push	r14
    6fbc:	ff 92       	push	r15
    6fbe:	0f 93       	push	r16
    6fc0:	1f 93       	push	r17
    6fc2:	cf 93       	push	r28
    6fc4:	df 93       	push	r29
    6fc6:	ec 01       	movw	r28, r24
    6fc8:	7b 01       	movw	r14, r22
    6fca:	8a 01       	movw	r16, r20
{
	if (!reserve(length)) {
    6fcc:	ba 01       	movw	r22, r20
    6fce:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <_ZN6String7reserveEj>
    6fd2:	88 23       	and	r24, r24
    6fd4:	21 f4       	brne	.+8      	; 0x6fde <_ZN6String4copyEPKcj+0x24>
		invalidate();
    6fd6:	ce 01       	movw	r24, r28
    6fd8:	0e 94 b5 37 	call	0x6f6a	; 0x6f6a <_ZN6String10invalidateEv>
    6fdc:	07 c0       	rjmp	.+14     	; 0x6fec <_ZN6String4copyEPKcj+0x32>
		return *this;
	}
	len = length;
    6fde:	1d 83       	std	Y+5, r17	; 0x05
    6fe0:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    6fe2:	88 81       	ld	r24, Y
    6fe4:	99 81       	ldd	r25, Y+1	; 0x01
    6fe6:	b7 01       	movw	r22, r14
    6fe8:	0e 94 37 05 	call	0xa6e	; 0xa6e <strcpy>
	return *this;
}
    6fec:	ce 01       	movw	r24, r28
    6fee:	df 91       	pop	r29
    6ff0:	cf 91       	pop	r28
    6ff2:	1f 91       	pop	r17
    6ff4:	0f 91       	pop	r16
    6ff6:	ff 90       	pop	r15
    6ff8:	ef 90       	pop	r14
    6ffa:	08 95       	ret

00006ffc <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    6ffc:	cf 93       	push	r28
    6ffe:	df 93       	push	r29
    7000:	ec 01       	movw	r28, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    7002:	19 82       	std	Y+1, r1	; 0x01
    7004:	18 82       	st	Y, r1
	capacity = 0;
    7006:	1b 82       	std	Y+3, r1	; 0x03
    7008:	1a 82       	std	Y+2, r1	; 0x02
	len = 0;
    700a:	1d 82       	std	Y+5, r1	; 0x05
    700c:	1c 82       	std	Y+4, r1	; 0x04
	flags = 0;
    700e:	1e 82       	std	Y+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    7010:	61 15       	cp	r22, r1
    7012:	71 05       	cpc	r23, r1
    7014:	51 f0       	breq	.+20     	; 0x702a <_ZN6StringC1EPKc+0x2e>
    7016:	db 01       	movw	r26, r22
    7018:	0d 90       	ld	r0, X+
    701a:	00 20       	and	r0, r0
    701c:	e9 f7       	brne	.-6      	; 0x7018 <_ZN6StringC1EPKc+0x1c>
    701e:	11 97       	sbiw	r26, 0x01	; 1
    7020:	a6 1b       	sub	r26, r22
    7022:	b7 0b       	sbc	r27, r23
    7024:	ad 01       	movw	r20, r26
    7026:	0e 94 dd 37 	call	0x6fba	; 0x6fba <_ZN6String4copyEPKcj>
}
    702a:	df 91       	pop	r29
    702c:	cf 91       	pop	r28
    702e:	08 95       	ret

00007030 <_ZN6StringaSEPKc>:
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    7030:	0f 93       	push	r16
    7032:	1f 93       	push	r17
    7034:	18 2f       	mov	r17, r24
    7036:	09 2f       	mov	r16, r25
{
	if (cstr) copy(cstr, strlen(cstr));
    7038:	61 15       	cp	r22, r1
    703a:	71 05       	cpc	r23, r1
    703c:	59 f0       	breq	.+22     	; 0x7054 <_ZN6StringaSEPKc+0x24>
    703e:	db 01       	movw	r26, r22
    7040:	0d 90       	ld	r0, X+
    7042:	00 20       	and	r0, r0
    7044:	e9 f7       	brne	.-6      	; 0x7040 <_ZN6StringaSEPKc+0x10>
    7046:	11 97       	sbiw	r26, 0x01	; 1
    7048:	a6 1b       	sub	r26, r22
    704a:	b7 0b       	sbc	r27, r23
    704c:	ad 01       	movw	r20, r26
    704e:	0e 94 dd 37 	call	0x6fba	; 0x6fba <_ZN6String4copyEPKcj>
    7052:	02 c0       	rjmp	.+4      	; 0x7058 <_ZN6StringaSEPKc+0x28>
	else invalidate();
    7054:	0e 94 b5 37 	call	0x6f6a	; 0x6f6a <_ZN6String10invalidateEv>
	
	return *this;
}
    7058:	81 2f       	mov	r24, r17
    705a:	90 2f       	mov	r25, r16
    705c:	1f 91       	pop	r17
    705e:	0f 91       	pop	r16
    7060:	08 95       	ret

00007062 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    7062:	ef 92       	push	r14
    7064:	ff 92       	push	r15
    7066:	0f 93       	push	r16
    7068:	1f 93       	push	r17
    706a:	df 93       	push	r29
    706c:	cf 93       	push	r28
    706e:	cd b7       	in	r28, 0x3d	; 61
    7070:	de b7       	in	r29, 0x3e	; 62
    7072:	29 97       	sbiw	r28, 0x09	; 9
    7074:	0f b6       	in	r0, 0x3f	; 63
    7076:	f8 94       	cli
    7078:	de bf       	out	0x3e, r29	; 62
    707a:	0f be       	out	0x3f, r0	; 63
    707c:	cd bf       	out	0x3d, r28	; 61
    707e:	8c 01       	movw	r16, r24
    7080:	86 2f       	mov	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    7082:	f8 01       	movw	r30, r16
    7084:	11 82       	std	Z+1, r1	; 0x01
    7086:	10 82       	st	Z, r1
	capacity = 0;
    7088:	13 82       	std	Z+3, r1	; 0x03
    708a:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    708c:	15 82       	std	Z+5, r1	; 0x05
    708e:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    7090:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned char value, unsigned char base)
{
	init();
	char buf[9];
	utoa(value, buf, base);
    7092:	90 e0       	ldi	r25, 0x00	; 0
    7094:	7e 01       	movw	r14, r28
    7096:	08 94       	sec
    7098:	e1 1c       	adc	r14, r1
    709a:	f1 1c       	adc	r15, r1
    709c:	b7 01       	movw	r22, r14
    709e:	50 e0       	ldi	r21, 0x00	; 0
    70a0:	0e 94 6d 05 	call	0xada	; 0xada <utoa>
	*this = buf;
    70a4:	c8 01       	movw	r24, r16
    70a6:	b7 01       	movw	r22, r14
    70a8:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringaSEPKc>
}
    70ac:	29 96       	adiw	r28, 0x09	; 9
    70ae:	0f b6       	in	r0, 0x3f	; 63
    70b0:	f8 94       	cli
    70b2:	de bf       	out	0x3e, r29	; 62
    70b4:	0f be       	out	0x3f, r0	; 63
    70b6:	cd bf       	out	0x3d, r28	; 61
    70b8:	cf 91       	pop	r28
    70ba:	df 91       	pop	r29
    70bc:	1f 91       	pop	r17
    70be:	0f 91       	pop	r16
    70c0:	ff 90       	pop	r15
    70c2:	ef 90       	pop	r14
    70c4:	08 95       	ret

000070c6 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
    70c6:	df 93       	push	r29
    70c8:	cf 93       	push	r28
    70ca:	00 d0       	rcall	.+0      	; 0x70cc <_ZN6StringC1Ec+0x6>
    70cc:	cd b7       	in	r28, 0x3d	; 61
    70ce:	de b7       	in	r29, 0x3e	; 62
    70d0:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    70d2:	11 82       	std	Z+1, r1	; 0x01
    70d4:	10 82       	st	Z, r1
	capacity = 0;
    70d6:	13 82       	std	Z+3, r1	; 0x03
    70d8:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    70da:	15 82       	std	Z+5, r1	; 0x05
    70dc:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    70de:	16 82       	std	Z+6, r1	; 0x06

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
    70e0:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    70e2:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
    70e4:	be 01       	movw	r22, r28
    70e6:	6f 5f       	subi	r22, 0xFF	; 255
    70e8:	7f 4f       	sbci	r23, 0xFF	; 255
    70ea:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringaSEPKc>
}
    70ee:	0f 90       	pop	r0
    70f0:	0f 90       	pop	r0
    70f2:	cf 91       	pop	r28
    70f4:	df 91       	pop	r29
    70f6:	08 95       	ret

000070f8 <_ZNK6String9substringEjj>:
String String::substring( unsigned int left ) const
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
    70f8:	bf 92       	push	r11
    70fa:	cf 92       	push	r12
    70fc:	df 92       	push	r13
    70fe:	ef 92       	push	r14
    7100:	ff 92       	push	r15
    7102:	0f 93       	push	r16
    7104:	1f 93       	push	r17
    7106:	cf 93       	push	r28
    7108:	df 93       	push	r29
    710a:	08 2f       	mov	r16, r24
    710c:	b9 2e       	mov	r11, r25
    710e:	6b 01       	movw	r12, r22
    7110:	7a 01       	movw	r14, r20
    7112:	e9 01       	movw	r28, r18
{
	if (left > right) {
    7114:	24 17       	cp	r18, r20
    7116:	35 07       	cpc	r19, r21
    7118:	10 f4       	brcc	.+4      	; 0x711e <_ZNK6String9substringEjj+0x26>
    711a:	ea 01       	movw	r28, r20
    711c:	79 01       	movw	r14, r18
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    711e:	80 2f       	mov	r24, r16
    7120:	9b 2d       	mov	r25, r11
    7122:	62 e0       	ldi	r22, 0x02	; 2
    7124:	71 e0       	ldi	r23, 0x01	; 1
    7126:	0e 94 fe 37 	call	0x6ffc	; 0x6ffc <_ZN6StringC1EPKc>
	if (left > len) return out;
    712a:	d6 01       	movw	r26, r12
    712c:	14 96       	adiw	r26, 0x04	; 4
    712e:	8d 91       	ld	r24, X+
    7130:	9c 91       	ld	r25, X
    7132:	15 97       	sbiw	r26, 0x05	; 5
    7134:	8e 15       	cp	r24, r14
    7136:	9f 05       	cpc	r25, r15
    7138:	d0 f0       	brcs	.+52     	; 0x716e <_ZNK6String9substringEjj+0x76>
    713a:	8c 17       	cp	r24, r28
    713c:	9d 07       	cpc	r25, r29
    713e:	08 f4       	brcc	.+2      	; 0x7142 <_ZNK6String9substringEjj+0x4a>
    7140:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    7142:	d6 01       	movw	r26, r12
    7144:	ed 91       	ld	r30, X+
    7146:	fc 91       	ld	r31, X
    7148:	11 97       	sbiw	r26, 0x01	; 1
    714a:	ec 0f       	add	r30, r28
    714c:	fd 1f       	adc	r31, r29
    714e:	10 81       	ld	r17, Z
	buffer[right] = '\0';	
    7150:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    7152:	6d 91       	ld	r22, X+
    7154:	7c 91       	ld	r23, X
    7156:	6e 0d       	add	r22, r14
    7158:	7f 1d       	adc	r23, r15
    715a:	80 2f       	mov	r24, r16
    715c:	9b 2d       	mov	r25, r11
    715e:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    7162:	d6 01       	movw	r26, r12
    7164:	ed 91       	ld	r30, X+
    7166:	fc 91       	ld	r31, X
    7168:	ec 0f       	add	r30, r28
    716a:	fd 1f       	adc	r31, r29
    716c:	10 83       	st	Z, r17
	return out;
}
    716e:	80 2f       	mov	r24, r16
    7170:	9b 2d       	mov	r25, r11
    7172:	df 91       	pop	r29
    7174:	cf 91       	pop	r28
    7176:	1f 91       	pop	r17
    7178:	0f 91       	pop	r16
    717a:	ff 90       	pop	r15
    717c:	ef 90       	pop	r14
    717e:	df 90       	pop	r13
    7180:	cf 90       	pop	r12
    7182:	bf 90       	pop	r11
    7184:	08 95       	ret

00007186 <_ZNK6String9substringEj>:
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}

String String::substring( unsigned int left ) const
    7186:	0f 93       	push	r16
    7188:	1f 93       	push	r17
    718a:	8c 01       	movw	r16, r24
    718c:	fb 01       	movw	r30, r22
{
	return substring(left, len);
    718e:	24 81       	ldd	r18, Z+4	; 0x04
    7190:	35 81       	ldd	r19, Z+5	; 0x05
    7192:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <_ZNK6String9substringEjj>
}
    7196:	c8 01       	movw	r24, r16
    7198:	1f 91       	pop	r17
    719a:	0f 91       	pop	r16
    719c:	08 95       	ret

0000719e <_ZN6StringaSERKS_>:
	rhs.capacity = 0;
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
    719e:	cf 93       	push	r28
    71a0:	df 93       	push	r29
    71a2:	ec 01       	movw	r28, r24
    71a4:	fb 01       	movw	r30, r22
{
	if (this == &rhs) return *this;
    71a6:	86 17       	cp	r24, r22
    71a8:	97 07       	cpc	r25, r23
    71aa:	61 f0       	breq	.+24     	; 0x71c4 <_ZN6StringaSERKS_+0x26>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    71ac:	60 81       	ld	r22, Z
    71ae:	71 81       	ldd	r23, Z+1	; 0x01
    71b0:	61 15       	cp	r22, r1
    71b2:	71 05       	cpc	r23, r1
    71b4:	29 f0       	breq	.+10     	; 0x71c0 <_ZN6StringaSERKS_+0x22>
    71b6:	44 81       	ldd	r20, Z+4	; 0x04
    71b8:	55 81       	ldd	r21, Z+5	; 0x05
    71ba:	0e 94 dd 37 	call	0x6fba	; 0x6fba <_ZN6String4copyEPKcj>
    71be:	02 c0       	rjmp	.+4      	; 0x71c4 <_ZN6StringaSERKS_+0x26>
	else invalidate();
    71c0:	0e 94 b5 37 	call	0x6f6a	; 0x6f6a <_ZN6String10invalidateEv>
	
	return *this;
}
    71c4:	ce 01       	movw	r24, r28
    71c6:	df 91       	pop	r29
    71c8:	cf 91       	pop	r28
    71ca:	08 95       	ret

000071cc <_ZN6StringC2ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    71cc:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    71ce:	11 82       	std	Z+1, r1	; 0x01
    71d0:	10 82       	st	Z, r1
	capacity = 0;
    71d2:	13 82       	std	Z+3, r1	; 0x03
    71d4:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    71d6:	15 82       	std	Z+5, r1	; 0x05
    71d8:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    71da:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
    71dc:	0e 94 cf 38 	call	0x719e	; 0x719e <_ZN6StringaSERKS_>
}
    71e0:	08 95       	ret

000071e2 <_ZN6StringD1Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    71e2:	fc 01       	movw	r30, r24
{
	free(buffer);
    71e4:	80 81       	ld	r24, Z
    71e6:	91 81       	ldd	r25, Z+1	; 0x01
    71e8:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <free>
}
    71ec:	08 95       	ret

000071ee <_ZN6StringD2Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    71ee:	fc 01       	movw	r30, r24
{
	free(buffer);
    71f0:	80 81       	ld	r24, Z
    71f2:	91 81       	ldd	r25, Z+1	; 0x01
    71f4:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <free>
}
    71f8:	08 95       	ret

000071fa <realloc>:
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
    71fa:	6f 92       	push	r6
    71fc:	7f 92       	push	r7
    71fe:	8f 92       	push	r8
    7200:	9f 92       	push	r9
    7202:	af 92       	push	r10
    7204:	bf 92       	push	r11
    7206:	cf 92       	push	r12
    7208:	df 92       	push	r13
    720a:	ef 92       	push	r14
    720c:	ff 92       	push	r15
    720e:	0f 93       	push	r16
    7210:	1f 93       	push	r17
    7212:	cf 93       	push	r28
    7214:	df 93       	push	r29
    7216:	8c 01       	movw	r16, r24
    7218:	00 97       	sbiw	r24, 0x00	; 0
    721a:	29 f4       	brne	.+10     	; 0x7226 <realloc+0x2c>
		return malloc(len);
    721c:	cb 01       	movw	r24, r22
    721e:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <malloc>
    7222:	8c 01       	movw	r16, r24
    7224:	bb c0       	rjmp	.+374    	; 0x739c <realloc+0x1a2>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
    7226:	8e ef       	ldi	r24, 0xFE	; 254
    7228:	e8 2e       	mov	r14, r24
    722a:	8f ef       	ldi	r24, 0xFF	; 255
    722c:	f8 2e       	mov	r15, r24
    722e:	e0 0e       	add	r14, r16
    7230:	f1 1e       	adc	r15, r17
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
    7232:	48 01       	movw	r8, r16
    7234:	86 0e       	add	r8, r22
    7236:	97 1e       	adc	r9, r23
	if (cp < cp1)
    7238:	8e 14       	cp	r8, r14
    723a:	9f 04       	cpc	r9, r15
    723c:	08 f4       	brcc	.+2      	; 0x7240 <realloc+0x46>
    723e:	ac c0       	rjmp	.+344    	; 0x7398 <realloc+0x19e>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
    7240:	d7 01       	movw	r26, r14
    7242:	4d 91       	ld	r20, X+
    7244:	5c 91       	ld	r21, X
    7246:	11 97       	sbiw	r26, 0x01	; 1
    7248:	46 17       	cp	r20, r22
    724a:	57 07       	cpc	r21, r23
    724c:	b8 f0       	brcs	.+46     	; 0x727c <realloc+0x82>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    724e:	45 30       	cpi	r20, 0x05	; 5
    7250:	51 05       	cpc	r21, r1
    7252:	08 f4       	brcc	.+2      	; 0x7256 <realloc+0x5c>
    7254:	a3 c0       	rjmp	.+326    	; 0x739c <realloc+0x1a2>
    7256:	ca 01       	movw	r24, r20
    7258:	04 97       	sbiw	r24, 0x04	; 4
    725a:	86 17       	cp	r24, r22
    725c:	97 07       	cpc	r25, r23
    725e:	08 f4       	brcc	.+2      	; 0x7262 <realloc+0x68>
    7260:	9d c0       	rjmp	.+314    	; 0x739c <realloc+0x1a2>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
    7262:	42 50       	subi	r20, 0x02	; 2
    7264:	50 40       	sbci	r21, 0x00	; 0
    7266:	46 1b       	sub	r20, r22
    7268:	57 0b       	sbc	r21, r23
    726a:	f4 01       	movw	r30, r8
    726c:	41 93       	st	Z+, r20
    726e:	51 93       	st	Z+, r21
		fp1->sz = len;
    7270:	6d 93       	st	X+, r22
    7272:	7c 93       	st	X, r23
		free(&(fp2->nx));
    7274:	cf 01       	movw	r24, r30
    7276:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <free>
    727a:	90 c0       	rjmp	.+288    	; 0x739c <realloc+0x1a2>

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
    727c:	5b 01       	movw	r10, r22
    727e:	a4 1a       	sub	r10, r20
    7280:	b5 0a       	sbc	r11, r21
	cp = (char *)ptr + fp1->sz;
    7282:	38 01       	movw	r6, r16
    7284:	64 0e       	add	r6, r20
    7286:	75 1e       	adc	r7, r21
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
    7288:	a0 91 d0 03 	lds	r26, 0x03D0
    728c:	b0 91 d1 03 	lds	r27, 0x03D1
    7290:	cc 24       	eor	r12, r12
    7292:	dd 24       	eor	r13, r13
    7294:	e0 e0       	ldi	r30, 0x00	; 0
    7296:	f0 e0       	ldi	r31, 0x00	; 0
    7298:	47 c0       	rjmp	.+142    	; 0x7328 <realloc+0x12e>
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
    729a:	a6 15       	cp	r26, r6
    729c:	b7 05       	cpc	r27, r7
    729e:	a9 f5       	brne	.+106    	; 0x730a <realloc+0x110>
    72a0:	cd 91       	ld	r28, X+
    72a2:	dc 91       	ld	r29, X
    72a4:	11 97       	sbiw	r26, 0x01	; 1
    72a6:	ce 01       	movw	r24, r28
    72a8:	02 96       	adiw	r24, 0x02	; 2
    72aa:	8a 15       	cp	r24, r10
    72ac:	9b 05       	cpc	r25, r11
    72ae:	68 f1       	brcs	.+90     	; 0x730a <realloc+0x110>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
    72b0:	ce 01       	movw	r24, r28
    72b2:	8a 19       	sub	r24, r10
    72b4:	9b 09       	sbc	r25, r11
    72b6:	02 96       	adiw	r24, 0x02	; 2
    72b8:	12 96       	adiw	r26, 0x02	; 2
    72ba:	2c 91       	ld	r18, X
    72bc:	12 97       	sbiw	r26, 0x02	; 2
    72be:	13 96       	adiw	r26, 0x03	; 3
    72c0:	3c 91       	ld	r19, X
    72c2:	05 97       	sbiw	r24, 0x05	; 5
    72c4:	58 f0       	brcs	.+22     	; 0x72dc <realloc+0xe2>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
    72c6:	f4 01       	movw	r30, r8
				fp2->nx = fp3->nx;
    72c8:	22 83       	std	Z+2, r18	; 0x02
    72ca:	33 83       	std	Z+3, r19	; 0x03
				fp2->sz = fp3->sz - incr;
    72cc:	ca 19       	sub	r28, r10
    72ce:	db 09       	sbc	r29, r11
    72d0:	d1 83       	std	Z+1, r29	; 0x01
    72d2:	c0 83       	st	Z, r28
				fp1->sz = len;
    72d4:	d7 01       	movw	r26, r14
    72d6:	6d 93       	st	X+, r22
    72d8:	7c 93       	st	X, r23
    72da:	09 c0       	rjmp	.+18     	; 0x72ee <realloc+0xf4>
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
    72dc:	4e 5f       	subi	r20, 0xFE	; 254
    72de:	5f 4f       	sbci	r21, 0xFF	; 255
    72e0:	4c 0f       	add	r20, r28
    72e2:	5d 1f       	adc	r21, r29
    72e4:	f7 01       	movw	r30, r14
    72e6:	51 83       	std	Z+1, r21	; 0x01
    72e8:	40 83       	st	Z, r20
				fp2 = fp3->nx;
    72ea:	c9 01       	movw	r24, r18
    72ec:	fc 01       	movw	r30, r24
			}
			if (ofp3)
    72ee:	c1 14       	cp	r12, r1
    72f0:	d1 04       	cpc	r13, r1
    72f2:	31 f0       	breq	.+12     	; 0x7300 <realloc+0x106>
				ofp3->nx = fp2;
    72f4:	d6 01       	movw	r26, r12
    72f6:	13 96       	adiw	r26, 0x03	; 3
    72f8:	fc 93       	st	X, r31
    72fa:	ee 93       	st	-X, r30
    72fc:	12 97       	sbiw	r26, 0x02	; 2
    72fe:	4e c0       	rjmp	.+156    	; 0x739c <realloc+0x1a2>
			else
				__flp = fp2;
    7300:	f0 93 d1 03 	sts	0x03D1, r31
    7304:	e0 93 d0 03 	sts	0x03D0, r30
    7308:	49 c0       	rjmp	.+146    	; 0x739c <realloc+0x1a2>
    730a:	8d 91       	ld	r24, X+
    730c:	9c 91       	ld	r25, X
    730e:	11 97       	sbiw	r26, 0x01	; 1
    7310:	e8 17       	cp	r30, r24
    7312:	f9 07       	cpc	r31, r25
    7314:	08 f4       	brcc	.+2      	; 0x7318 <realloc+0x11e>
    7316:	fc 01       	movw	r30, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
    7318:	6d 01       	movw	r12, r26
    731a:	12 96       	adiw	r26, 0x02	; 2
    731c:	8c 91       	ld	r24, X
    731e:	12 97       	sbiw	r26, 0x02	; 2
    7320:	13 96       	adiw	r26, 0x03	; 3
    7322:	9c 91       	ld	r25, X
    7324:	9c 01       	movw	r18, r24
    7326:	d9 01       	movw	r26, r18
	 */
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
    7328:	10 97       	sbiw	r26, 0x00	; 0
    732a:	09 f0       	breq	.+2      	; 0x732e <realloc+0x134>
    732c:	b6 cf       	rjmp	.-148    	; 0x729a <realloc+0xa0>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
    732e:	80 91 ce 03 	lds	r24, 0x03CE
    7332:	90 91 cf 03 	lds	r25, 0x03CF
    7336:	86 15       	cp	r24, r6
    7338:	97 05       	cpc	r25, r7
    733a:	e9 f4       	brne	.+58     	; 0x7376 <realloc+0x17c>
    733c:	e6 17       	cp	r30, r22
    733e:	f7 07       	cpc	r31, r23
    7340:	d0 f4       	brcc	.+52     	; 0x7376 <realloc+0x17c>
		cp1 = __malloc_heap_end;
    7342:	20 91 0d 01 	lds	r18, 0x010D
    7346:	30 91 0e 01 	lds	r19, 0x010E
		cp = (char *)ptr + len;
		if (cp1 == 0)
    734a:	21 15       	cp	r18, r1
    734c:	31 05       	cpc	r19, r1
    734e:	41 f4       	brne	.+16     	; 0x7360 <realloc+0x166>
			cp1 = STACK_POINTER() - __malloc_margin;
    7350:	2d b7       	in	r18, 0x3d	; 61
    7352:	3e b7       	in	r19, 0x3e	; 62
    7354:	80 91 09 01 	lds	r24, 0x0109
    7358:	90 91 0a 01 	lds	r25, 0x010A
    735c:	28 1b       	sub	r18, r24
    735e:	39 0b       	sbc	r19, r25
		if (cp < cp1) {
    7360:	82 16       	cp	r8, r18
    7362:	93 06       	cpc	r9, r19
    7364:	c8 f4       	brcc	.+50     	; 0x7398 <realloc+0x19e>
			__brkval = cp;
    7366:	90 92 cf 03 	sts	0x03CF, r9
    736a:	80 92 ce 03 	sts	0x03CE, r8
			fp1->sz = len;
    736e:	f7 01       	movw	r30, r14
    7370:	71 83       	std	Z+1, r23	; 0x01
    7372:	60 83       	st	Z, r22
    7374:	13 c0       	rjmp	.+38     	; 0x739c <realloc+0x1a2>

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
    7376:	cb 01       	movw	r24, r22
    7378:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <malloc>
    737c:	ec 01       	movw	r28, r24
    737e:	00 97       	sbiw	r24, 0x00	; 0
    7380:	59 f0       	breq	.+22     	; 0x7398 <realloc+0x19e>
		return 0;
	memcpy(memp, ptr, fp1->sz);
    7382:	d7 01       	movw	r26, r14
    7384:	4d 91       	ld	r20, X+
    7386:	5c 91       	ld	r21, X
    7388:	b8 01       	movw	r22, r16
    738a:	0e 94 1a 05 	call	0xa34	; 0xa34 <memcpy>
	free(ptr);
    738e:	c8 01       	movw	r24, r16
    7390:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <free>
    7394:	8e 01       	movw	r16, r28
    7396:	02 c0       	rjmp	.+4      	; 0x739c <realloc+0x1a2>
	return memp;
    7398:	00 e0       	ldi	r16, 0x00	; 0
    739a:	10 e0       	ldi	r17, 0x00	; 0
}
    739c:	c8 01       	movw	r24, r16
    739e:	df 91       	pop	r29
    73a0:	cf 91       	pop	r28
    73a2:	1f 91       	pop	r17
    73a4:	0f 91       	pop	r16
    73a6:	ff 90       	pop	r15
    73a8:	ef 90       	pop	r14
    73aa:	df 90       	pop	r13
    73ac:	cf 90       	pop	r12
    73ae:	bf 90       	pop	r11
    73b0:	af 90       	pop	r10
    73b2:	9f 90       	pop	r9
    73b4:	8f 90       	pop	r8
    73b6:	7f 90       	pop	r7
    73b8:	6f 90       	pop	r6
    73ba:	08 95       	ret

000073bc <__subsf3>:
    73bc:	50 58       	subi	r21, 0x80	; 128

000073be <__addsf3>:
    73be:	bb 27       	eor	r27, r27
    73c0:	aa 27       	eor	r26, r26
    73c2:	0e d0       	rcall	.+28     	; 0x73e0 <__addsf3x>
    73c4:	75 c1       	rjmp	.+746    	; 0x76b0 <__fp_round>
    73c6:	66 d1       	rcall	.+716    	; 0x7694 <__fp_pscA>
    73c8:	30 f0       	brcs	.+12     	; 0x73d6 <__addsf3+0x18>
    73ca:	6b d1       	rcall	.+726    	; 0x76a2 <__fp_pscB>
    73cc:	20 f0       	brcs	.+8      	; 0x73d6 <__addsf3+0x18>
    73ce:	31 f4       	brne	.+12     	; 0x73dc <__addsf3+0x1e>
    73d0:	9f 3f       	cpi	r25, 0xFF	; 255
    73d2:	11 f4       	brne	.+4      	; 0x73d8 <__addsf3+0x1a>
    73d4:	1e f4       	brtc	.+6      	; 0x73dc <__addsf3+0x1e>
    73d6:	5b c1       	rjmp	.+694    	; 0x768e <__fp_nan>
    73d8:	0e f4       	brtc	.+2      	; 0x73dc <__addsf3+0x1e>
    73da:	e0 95       	com	r30
    73dc:	e7 fb       	bst	r30, 7
    73de:	51 c1       	rjmp	.+674    	; 0x7682 <__fp_inf>

000073e0 <__addsf3x>:
    73e0:	e9 2f       	mov	r30, r25
    73e2:	77 d1       	rcall	.+750    	; 0x76d2 <__fp_split3>
    73e4:	80 f3       	brcs	.-32     	; 0x73c6 <__addsf3+0x8>
    73e6:	ba 17       	cp	r27, r26
    73e8:	62 07       	cpc	r22, r18
    73ea:	73 07       	cpc	r23, r19
    73ec:	84 07       	cpc	r24, r20
    73ee:	95 07       	cpc	r25, r21
    73f0:	18 f0       	brcs	.+6      	; 0x73f8 <__addsf3x+0x18>
    73f2:	71 f4       	brne	.+28     	; 0x7410 <__addsf3x+0x30>
    73f4:	9e f5       	brtc	.+102    	; 0x745c <__addsf3x+0x7c>
    73f6:	8f c1       	rjmp	.+798    	; 0x7716 <__fp_zero>
    73f8:	0e f4       	brtc	.+2      	; 0x73fc <__addsf3x+0x1c>
    73fa:	e0 95       	com	r30
    73fc:	0b 2e       	mov	r0, r27
    73fe:	ba 2f       	mov	r27, r26
    7400:	a0 2d       	mov	r26, r0
    7402:	0b 01       	movw	r0, r22
    7404:	b9 01       	movw	r22, r18
    7406:	90 01       	movw	r18, r0
    7408:	0c 01       	movw	r0, r24
    740a:	ca 01       	movw	r24, r20
    740c:	a0 01       	movw	r20, r0
    740e:	11 24       	eor	r1, r1
    7410:	ff 27       	eor	r31, r31
    7412:	59 1b       	sub	r21, r25
    7414:	99 f0       	breq	.+38     	; 0x743c <__addsf3x+0x5c>
    7416:	59 3f       	cpi	r21, 0xF9	; 249
    7418:	50 f4       	brcc	.+20     	; 0x742e <__addsf3x+0x4e>
    741a:	50 3e       	cpi	r21, 0xE0	; 224
    741c:	68 f1       	brcs	.+90     	; 0x7478 <__addsf3x+0x98>
    741e:	1a 16       	cp	r1, r26
    7420:	f0 40       	sbci	r31, 0x00	; 0
    7422:	a2 2f       	mov	r26, r18
    7424:	23 2f       	mov	r18, r19
    7426:	34 2f       	mov	r19, r20
    7428:	44 27       	eor	r20, r20
    742a:	58 5f       	subi	r21, 0xF8	; 248
    742c:	f3 cf       	rjmp	.-26     	; 0x7414 <__addsf3x+0x34>
    742e:	46 95       	lsr	r20
    7430:	37 95       	ror	r19
    7432:	27 95       	ror	r18
    7434:	a7 95       	ror	r26
    7436:	f0 40       	sbci	r31, 0x00	; 0
    7438:	53 95       	inc	r21
    743a:	c9 f7       	brne	.-14     	; 0x742e <__addsf3x+0x4e>
    743c:	7e f4       	brtc	.+30     	; 0x745c <__addsf3x+0x7c>
    743e:	1f 16       	cp	r1, r31
    7440:	ba 0b       	sbc	r27, r26
    7442:	62 0b       	sbc	r22, r18
    7444:	73 0b       	sbc	r23, r19
    7446:	84 0b       	sbc	r24, r20
    7448:	ba f0       	brmi	.+46     	; 0x7478 <__addsf3x+0x98>
    744a:	91 50       	subi	r25, 0x01	; 1
    744c:	a1 f0       	breq	.+40     	; 0x7476 <__addsf3x+0x96>
    744e:	ff 0f       	add	r31, r31
    7450:	bb 1f       	adc	r27, r27
    7452:	66 1f       	adc	r22, r22
    7454:	77 1f       	adc	r23, r23
    7456:	88 1f       	adc	r24, r24
    7458:	c2 f7       	brpl	.-16     	; 0x744a <__addsf3x+0x6a>
    745a:	0e c0       	rjmp	.+28     	; 0x7478 <__addsf3x+0x98>
    745c:	ba 0f       	add	r27, r26
    745e:	62 1f       	adc	r22, r18
    7460:	73 1f       	adc	r23, r19
    7462:	84 1f       	adc	r24, r20
    7464:	48 f4       	brcc	.+18     	; 0x7478 <__addsf3x+0x98>
    7466:	87 95       	ror	r24
    7468:	77 95       	ror	r23
    746a:	67 95       	ror	r22
    746c:	b7 95       	ror	r27
    746e:	f7 95       	ror	r31
    7470:	9e 3f       	cpi	r25, 0xFE	; 254
    7472:	08 f0       	brcs	.+2      	; 0x7476 <__addsf3x+0x96>
    7474:	b3 cf       	rjmp	.-154    	; 0x73dc <__addsf3+0x1e>
    7476:	93 95       	inc	r25
    7478:	88 0f       	add	r24, r24
    747a:	08 f0       	brcs	.+2      	; 0x747e <__addsf3x+0x9e>
    747c:	99 27       	eor	r25, r25
    747e:	ee 0f       	add	r30, r30
    7480:	97 95       	ror	r25
    7482:	87 95       	ror	r24
    7484:	08 95       	ret

00007486 <__cmpsf2>:
    7486:	d9 d0       	rcall	.+434    	; 0x763a <__fp_cmp>
    7488:	08 f4       	brcc	.+2      	; 0x748c <__cmpsf2+0x6>
    748a:	81 e0       	ldi	r24, 0x01	; 1
    748c:	08 95       	ret

0000748e <__divsf3>:
    748e:	0c d0       	rcall	.+24     	; 0x74a8 <__divsf3x>
    7490:	0f c1       	rjmp	.+542    	; 0x76b0 <__fp_round>
    7492:	07 d1       	rcall	.+526    	; 0x76a2 <__fp_pscB>
    7494:	40 f0       	brcs	.+16     	; 0x74a6 <__divsf3+0x18>
    7496:	fe d0       	rcall	.+508    	; 0x7694 <__fp_pscA>
    7498:	30 f0       	brcs	.+12     	; 0x74a6 <__divsf3+0x18>
    749a:	21 f4       	brne	.+8      	; 0x74a4 <__divsf3+0x16>
    749c:	5f 3f       	cpi	r21, 0xFF	; 255
    749e:	19 f0       	breq	.+6      	; 0x74a6 <__divsf3+0x18>
    74a0:	f0 c0       	rjmp	.+480    	; 0x7682 <__fp_inf>
    74a2:	51 11       	cpse	r21, r1
    74a4:	39 c1       	rjmp	.+626    	; 0x7718 <__fp_szero>
    74a6:	f3 c0       	rjmp	.+486    	; 0x768e <__fp_nan>

000074a8 <__divsf3x>:
    74a8:	14 d1       	rcall	.+552    	; 0x76d2 <__fp_split3>
    74aa:	98 f3       	brcs	.-26     	; 0x7492 <__divsf3+0x4>

000074ac <__divsf3_pse>:
    74ac:	99 23       	and	r25, r25
    74ae:	c9 f3       	breq	.-14     	; 0x74a2 <__divsf3+0x14>
    74b0:	55 23       	and	r21, r21
    74b2:	b1 f3       	breq	.-20     	; 0x74a0 <__divsf3+0x12>
    74b4:	95 1b       	sub	r25, r21
    74b6:	55 0b       	sbc	r21, r21
    74b8:	bb 27       	eor	r27, r27
    74ba:	aa 27       	eor	r26, r26
    74bc:	62 17       	cp	r22, r18
    74be:	73 07       	cpc	r23, r19
    74c0:	84 07       	cpc	r24, r20
    74c2:	38 f0       	brcs	.+14     	; 0x74d2 <__divsf3_pse+0x26>
    74c4:	9f 5f       	subi	r25, 0xFF	; 255
    74c6:	5f 4f       	sbci	r21, 0xFF	; 255
    74c8:	22 0f       	add	r18, r18
    74ca:	33 1f       	adc	r19, r19
    74cc:	44 1f       	adc	r20, r20
    74ce:	aa 1f       	adc	r26, r26
    74d0:	a9 f3       	breq	.-22     	; 0x74bc <__divsf3_pse+0x10>
    74d2:	33 d0       	rcall	.+102    	; 0x753a <__divsf3_pse+0x8e>
    74d4:	0e 2e       	mov	r0, r30
    74d6:	3a f0       	brmi	.+14     	; 0x74e6 <__divsf3_pse+0x3a>
    74d8:	e0 e8       	ldi	r30, 0x80	; 128
    74da:	30 d0       	rcall	.+96     	; 0x753c <__divsf3_pse+0x90>
    74dc:	91 50       	subi	r25, 0x01	; 1
    74de:	50 40       	sbci	r21, 0x00	; 0
    74e0:	e6 95       	lsr	r30
    74e2:	00 1c       	adc	r0, r0
    74e4:	ca f7       	brpl	.-14     	; 0x74d8 <__divsf3_pse+0x2c>
    74e6:	29 d0       	rcall	.+82     	; 0x753a <__divsf3_pse+0x8e>
    74e8:	fe 2f       	mov	r31, r30
    74ea:	27 d0       	rcall	.+78     	; 0x753a <__divsf3_pse+0x8e>
    74ec:	66 0f       	add	r22, r22
    74ee:	77 1f       	adc	r23, r23
    74f0:	88 1f       	adc	r24, r24
    74f2:	bb 1f       	adc	r27, r27
    74f4:	26 17       	cp	r18, r22
    74f6:	37 07       	cpc	r19, r23
    74f8:	48 07       	cpc	r20, r24
    74fa:	ab 07       	cpc	r26, r27
    74fc:	b0 e8       	ldi	r27, 0x80	; 128
    74fe:	09 f0       	breq	.+2      	; 0x7502 <__divsf3_pse+0x56>
    7500:	bb 0b       	sbc	r27, r27
    7502:	80 2d       	mov	r24, r0
    7504:	bf 01       	movw	r22, r30
    7506:	ff 27       	eor	r31, r31
    7508:	93 58       	subi	r25, 0x83	; 131
    750a:	5f 4f       	sbci	r21, 0xFF	; 255
    750c:	2a f0       	brmi	.+10     	; 0x7518 <__divsf3_pse+0x6c>
    750e:	9e 3f       	cpi	r25, 0xFE	; 254
    7510:	51 05       	cpc	r21, r1
    7512:	68 f0       	brcs	.+26     	; 0x752e <__divsf3_pse+0x82>
    7514:	b6 c0       	rjmp	.+364    	; 0x7682 <__fp_inf>
    7516:	00 c1       	rjmp	.+512    	; 0x7718 <__fp_szero>
    7518:	5f 3f       	cpi	r21, 0xFF	; 255
    751a:	ec f3       	brlt	.-6      	; 0x7516 <__divsf3_pse+0x6a>
    751c:	98 3e       	cpi	r25, 0xE8	; 232
    751e:	dc f3       	brlt	.-10     	; 0x7516 <__divsf3_pse+0x6a>
    7520:	86 95       	lsr	r24
    7522:	77 95       	ror	r23
    7524:	67 95       	ror	r22
    7526:	b7 95       	ror	r27
    7528:	f7 95       	ror	r31
    752a:	9f 5f       	subi	r25, 0xFF	; 255
    752c:	c9 f7       	brne	.-14     	; 0x7520 <__divsf3_pse+0x74>
    752e:	88 0f       	add	r24, r24
    7530:	91 1d       	adc	r25, r1
    7532:	96 95       	lsr	r25
    7534:	87 95       	ror	r24
    7536:	97 f9       	bld	r25, 7
    7538:	08 95       	ret
    753a:	e1 e0       	ldi	r30, 0x01	; 1
    753c:	66 0f       	add	r22, r22
    753e:	77 1f       	adc	r23, r23
    7540:	88 1f       	adc	r24, r24
    7542:	bb 1f       	adc	r27, r27
    7544:	62 17       	cp	r22, r18
    7546:	73 07       	cpc	r23, r19
    7548:	84 07       	cpc	r24, r20
    754a:	ba 07       	cpc	r27, r26
    754c:	20 f0       	brcs	.+8      	; 0x7556 <__divsf3_pse+0xaa>
    754e:	62 1b       	sub	r22, r18
    7550:	73 0b       	sbc	r23, r19
    7552:	84 0b       	sbc	r24, r20
    7554:	ba 0b       	sbc	r27, r26
    7556:	ee 1f       	adc	r30, r30
    7558:	88 f7       	brcc	.-30     	; 0x753c <__divsf3_pse+0x90>
    755a:	e0 95       	com	r30
    755c:	08 95       	ret

0000755e <__fixsfsi>:
    755e:	04 d0       	rcall	.+8      	; 0x7568 <__fixunssfsi>
    7560:	68 94       	set
    7562:	b1 11       	cpse	r27, r1
    7564:	d9 c0       	rjmp	.+434    	; 0x7718 <__fp_szero>
    7566:	08 95       	ret

00007568 <__fixunssfsi>:
    7568:	bc d0       	rcall	.+376    	; 0x76e2 <__fp_splitA>
    756a:	88 f0       	brcs	.+34     	; 0x758e <__fixunssfsi+0x26>
    756c:	9f 57       	subi	r25, 0x7F	; 127
    756e:	90 f0       	brcs	.+36     	; 0x7594 <__fixunssfsi+0x2c>
    7570:	b9 2f       	mov	r27, r25
    7572:	99 27       	eor	r25, r25
    7574:	b7 51       	subi	r27, 0x17	; 23
    7576:	a0 f0       	brcs	.+40     	; 0x75a0 <__fixunssfsi+0x38>
    7578:	d1 f0       	breq	.+52     	; 0x75ae <__fixunssfsi+0x46>
    757a:	66 0f       	add	r22, r22
    757c:	77 1f       	adc	r23, r23
    757e:	88 1f       	adc	r24, r24
    7580:	99 1f       	adc	r25, r25
    7582:	1a f0       	brmi	.+6      	; 0x758a <__fixunssfsi+0x22>
    7584:	ba 95       	dec	r27
    7586:	c9 f7       	brne	.-14     	; 0x757a <__fixunssfsi+0x12>
    7588:	12 c0       	rjmp	.+36     	; 0x75ae <__fixunssfsi+0x46>
    758a:	b1 30       	cpi	r27, 0x01	; 1
    758c:	81 f0       	breq	.+32     	; 0x75ae <__fixunssfsi+0x46>
    758e:	c3 d0       	rcall	.+390    	; 0x7716 <__fp_zero>
    7590:	b1 e0       	ldi	r27, 0x01	; 1
    7592:	08 95       	ret
    7594:	c0 c0       	rjmp	.+384    	; 0x7716 <__fp_zero>
    7596:	67 2f       	mov	r22, r23
    7598:	78 2f       	mov	r23, r24
    759a:	88 27       	eor	r24, r24
    759c:	b8 5f       	subi	r27, 0xF8	; 248
    759e:	39 f0       	breq	.+14     	; 0x75ae <__fixunssfsi+0x46>
    75a0:	b9 3f       	cpi	r27, 0xF9	; 249
    75a2:	cc f3       	brlt	.-14     	; 0x7596 <__fixunssfsi+0x2e>
    75a4:	86 95       	lsr	r24
    75a6:	77 95       	ror	r23
    75a8:	67 95       	ror	r22
    75aa:	b3 95       	inc	r27
    75ac:	d9 f7       	brne	.-10     	; 0x75a4 <__fixunssfsi+0x3c>
    75ae:	3e f4       	brtc	.+14     	; 0x75be <__fixunssfsi+0x56>
    75b0:	90 95       	com	r25
    75b2:	80 95       	com	r24
    75b4:	70 95       	com	r23
    75b6:	61 95       	neg	r22
    75b8:	7f 4f       	sbci	r23, 0xFF	; 255
    75ba:	8f 4f       	sbci	r24, 0xFF	; 255
    75bc:	9f 4f       	sbci	r25, 0xFF	; 255
    75be:	08 95       	ret

000075c0 <__floatunsisf>:
    75c0:	e8 94       	clt
    75c2:	09 c0       	rjmp	.+18     	; 0x75d6 <__floatsisf+0x12>

000075c4 <__floatsisf>:
    75c4:	97 fb       	bst	r25, 7
    75c6:	3e f4       	brtc	.+14     	; 0x75d6 <__floatsisf+0x12>
    75c8:	90 95       	com	r25
    75ca:	80 95       	com	r24
    75cc:	70 95       	com	r23
    75ce:	61 95       	neg	r22
    75d0:	7f 4f       	sbci	r23, 0xFF	; 255
    75d2:	8f 4f       	sbci	r24, 0xFF	; 255
    75d4:	9f 4f       	sbci	r25, 0xFF	; 255
    75d6:	99 23       	and	r25, r25
    75d8:	a9 f0       	breq	.+42     	; 0x7604 <__floatsisf+0x40>
    75da:	f9 2f       	mov	r31, r25
    75dc:	96 e9       	ldi	r25, 0x96	; 150
    75de:	bb 27       	eor	r27, r27
    75e0:	93 95       	inc	r25
    75e2:	f6 95       	lsr	r31
    75e4:	87 95       	ror	r24
    75e6:	77 95       	ror	r23
    75e8:	67 95       	ror	r22
    75ea:	b7 95       	ror	r27
    75ec:	f1 11       	cpse	r31, r1
    75ee:	f8 cf       	rjmp	.-16     	; 0x75e0 <__floatsisf+0x1c>
    75f0:	fa f4       	brpl	.+62     	; 0x7630 <__floatsisf+0x6c>
    75f2:	bb 0f       	add	r27, r27
    75f4:	11 f4       	brne	.+4      	; 0x75fa <__floatsisf+0x36>
    75f6:	60 ff       	sbrs	r22, 0
    75f8:	1b c0       	rjmp	.+54     	; 0x7630 <__floatsisf+0x6c>
    75fa:	6f 5f       	subi	r22, 0xFF	; 255
    75fc:	7f 4f       	sbci	r23, 0xFF	; 255
    75fe:	8f 4f       	sbci	r24, 0xFF	; 255
    7600:	9f 4f       	sbci	r25, 0xFF	; 255
    7602:	16 c0       	rjmp	.+44     	; 0x7630 <__floatsisf+0x6c>
    7604:	88 23       	and	r24, r24
    7606:	11 f0       	breq	.+4      	; 0x760c <__floatsisf+0x48>
    7608:	96 e9       	ldi	r25, 0x96	; 150
    760a:	11 c0       	rjmp	.+34     	; 0x762e <__floatsisf+0x6a>
    760c:	77 23       	and	r23, r23
    760e:	21 f0       	breq	.+8      	; 0x7618 <__floatsisf+0x54>
    7610:	9e e8       	ldi	r25, 0x8E	; 142
    7612:	87 2f       	mov	r24, r23
    7614:	76 2f       	mov	r23, r22
    7616:	05 c0       	rjmp	.+10     	; 0x7622 <__floatsisf+0x5e>
    7618:	66 23       	and	r22, r22
    761a:	71 f0       	breq	.+28     	; 0x7638 <__floatsisf+0x74>
    761c:	96 e8       	ldi	r25, 0x86	; 134
    761e:	86 2f       	mov	r24, r22
    7620:	70 e0       	ldi	r23, 0x00	; 0
    7622:	60 e0       	ldi	r22, 0x00	; 0
    7624:	2a f0       	brmi	.+10     	; 0x7630 <__floatsisf+0x6c>
    7626:	9a 95       	dec	r25
    7628:	66 0f       	add	r22, r22
    762a:	77 1f       	adc	r23, r23
    762c:	88 1f       	adc	r24, r24
    762e:	da f7       	brpl	.-10     	; 0x7626 <__floatsisf+0x62>
    7630:	88 0f       	add	r24, r24
    7632:	96 95       	lsr	r25
    7634:	87 95       	ror	r24
    7636:	97 f9       	bld	r25, 7
    7638:	08 95       	ret

0000763a <__fp_cmp>:
    763a:	99 0f       	add	r25, r25
    763c:	00 08       	sbc	r0, r0
    763e:	55 0f       	add	r21, r21
    7640:	aa 0b       	sbc	r26, r26
    7642:	e0 e8       	ldi	r30, 0x80	; 128
    7644:	fe ef       	ldi	r31, 0xFE	; 254
    7646:	16 16       	cp	r1, r22
    7648:	17 06       	cpc	r1, r23
    764a:	e8 07       	cpc	r30, r24
    764c:	f9 07       	cpc	r31, r25
    764e:	c0 f0       	brcs	.+48     	; 0x7680 <__fp_cmp+0x46>
    7650:	12 16       	cp	r1, r18
    7652:	13 06       	cpc	r1, r19
    7654:	e4 07       	cpc	r30, r20
    7656:	f5 07       	cpc	r31, r21
    7658:	98 f0       	brcs	.+38     	; 0x7680 <__fp_cmp+0x46>
    765a:	62 1b       	sub	r22, r18
    765c:	73 0b       	sbc	r23, r19
    765e:	84 0b       	sbc	r24, r20
    7660:	95 0b       	sbc	r25, r21
    7662:	39 f4       	brne	.+14     	; 0x7672 <__fp_cmp+0x38>
    7664:	0a 26       	eor	r0, r26
    7666:	61 f0       	breq	.+24     	; 0x7680 <__fp_cmp+0x46>
    7668:	23 2b       	or	r18, r19
    766a:	24 2b       	or	r18, r20
    766c:	25 2b       	or	r18, r21
    766e:	21 f4       	brne	.+8      	; 0x7678 <__fp_cmp+0x3e>
    7670:	08 95       	ret
    7672:	0a 26       	eor	r0, r26
    7674:	09 f4       	brne	.+2      	; 0x7678 <__fp_cmp+0x3e>
    7676:	a1 40       	sbci	r26, 0x01	; 1
    7678:	a6 95       	lsr	r26
    767a:	8f ef       	ldi	r24, 0xFF	; 255
    767c:	81 1d       	adc	r24, r1
    767e:	81 1d       	adc	r24, r1
    7680:	08 95       	ret

00007682 <__fp_inf>:
    7682:	97 f9       	bld	r25, 7
    7684:	9f 67       	ori	r25, 0x7F	; 127
    7686:	80 e8       	ldi	r24, 0x80	; 128
    7688:	70 e0       	ldi	r23, 0x00	; 0
    768a:	60 e0       	ldi	r22, 0x00	; 0
    768c:	08 95       	ret

0000768e <__fp_nan>:
    768e:	9f ef       	ldi	r25, 0xFF	; 255
    7690:	80 ec       	ldi	r24, 0xC0	; 192
    7692:	08 95       	ret

00007694 <__fp_pscA>:
    7694:	00 24       	eor	r0, r0
    7696:	0a 94       	dec	r0
    7698:	16 16       	cp	r1, r22
    769a:	17 06       	cpc	r1, r23
    769c:	18 06       	cpc	r1, r24
    769e:	09 06       	cpc	r0, r25
    76a0:	08 95       	ret

000076a2 <__fp_pscB>:
    76a2:	00 24       	eor	r0, r0
    76a4:	0a 94       	dec	r0
    76a6:	12 16       	cp	r1, r18
    76a8:	13 06       	cpc	r1, r19
    76aa:	14 06       	cpc	r1, r20
    76ac:	05 06       	cpc	r0, r21
    76ae:	08 95       	ret

000076b0 <__fp_round>:
    76b0:	09 2e       	mov	r0, r25
    76b2:	03 94       	inc	r0
    76b4:	00 0c       	add	r0, r0
    76b6:	11 f4       	brne	.+4      	; 0x76bc <__fp_round+0xc>
    76b8:	88 23       	and	r24, r24
    76ba:	52 f0       	brmi	.+20     	; 0x76d0 <__fp_round+0x20>
    76bc:	bb 0f       	add	r27, r27
    76be:	40 f4       	brcc	.+16     	; 0x76d0 <__fp_round+0x20>
    76c0:	bf 2b       	or	r27, r31
    76c2:	11 f4       	brne	.+4      	; 0x76c8 <__fp_round+0x18>
    76c4:	60 ff       	sbrs	r22, 0
    76c6:	04 c0       	rjmp	.+8      	; 0x76d0 <__fp_round+0x20>
    76c8:	6f 5f       	subi	r22, 0xFF	; 255
    76ca:	7f 4f       	sbci	r23, 0xFF	; 255
    76cc:	8f 4f       	sbci	r24, 0xFF	; 255
    76ce:	9f 4f       	sbci	r25, 0xFF	; 255
    76d0:	08 95       	ret

000076d2 <__fp_split3>:
    76d2:	57 fd       	sbrc	r21, 7
    76d4:	90 58       	subi	r25, 0x80	; 128
    76d6:	44 0f       	add	r20, r20
    76d8:	55 1f       	adc	r21, r21
    76da:	59 f0       	breq	.+22     	; 0x76f2 <__fp_splitA+0x10>
    76dc:	5f 3f       	cpi	r21, 0xFF	; 255
    76de:	71 f0       	breq	.+28     	; 0x76fc <__fp_splitA+0x1a>
    76e0:	47 95       	ror	r20

000076e2 <__fp_splitA>:
    76e2:	88 0f       	add	r24, r24
    76e4:	97 fb       	bst	r25, 7
    76e6:	99 1f       	adc	r25, r25
    76e8:	61 f0       	breq	.+24     	; 0x7702 <__fp_splitA+0x20>
    76ea:	9f 3f       	cpi	r25, 0xFF	; 255
    76ec:	79 f0       	breq	.+30     	; 0x770c <__fp_splitA+0x2a>
    76ee:	87 95       	ror	r24
    76f0:	08 95       	ret
    76f2:	12 16       	cp	r1, r18
    76f4:	13 06       	cpc	r1, r19
    76f6:	14 06       	cpc	r1, r20
    76f8:	55 1f       	adc	r21, r21
    76fa:	f2 cf       	rjmp	.-28     	; 0x76e0 <__fp_split3+0xe>
    76fc:	46 95       	lsr	r20
    76fe:	f1 df       	rcall	.-30     	; 0x76e2 <__fp_splitA>
    7700:	08 c0       	rjmp	.+16     	; 0x7712 <__fp_splitA+0x30>
    7702:	16 16       	cp	r1, r22
    7704:	17 06       	cpc	r1, r23
    7706:	18 06       	cpc	r1, r24
    7708:	99 1f       	adc	r25, r25
    770a:	f1 cf       	rjmp	.-30     	; 0x76ee <__fp_splitA+0xc>
    770c:	86 95       	lsr	r24
    770e:	71 05       	cpc	r23, r1
    7710:	61 05       	cpc	r22, r1
    7712:	08 94       	sec
    7714:	08 95       	ret

00007716 <__fp_zero>:
    7716:	e8 94       	clt

00007718 <__fp_szero>:
    7718:	bb 27       	eor	r27, r27
    771a:	66 27       	eor	r22, r22
    771c:	77 27       	eor	r23, r23
    771e:	cb 01       	movw	r24, r22
    7720:	97 f9       	bld	r25, 7
    7722:	08 95       	ret

00007724 <__gesf2>:
    7724:	8a df       	rcall	.-236    	; 0x763a <__fp_cmp>
    7726:	08 f4       	brcc	.+2      	; 0x772a <__gesf2+0x6>
    7728:	8f ef       	ldi	r24, 0xFF	; 255
    772a:	08 95       	ret

0000772c <__mulsf3>:
    772c:	0b d0       	rcall	.+22     	; 0x7744 <__mulsf3x>
    772e:	c0 cf       	rjmp	.-128    	; 0x76b0 <__fp_round>
    7730:	b1 df       	rcall	.-158    	; 0x7694 <__fp_pscA>
    7732:	28 f0       	brcs	.+10     	; 0x773e <__mulsf3+0x12>
    7734:	b6 df       	rcall	.-148    	; 0x76a2 <__fp_pscB>
    7736:	18 f0       	brcs	.+6      	; 0x773e <__mulsf3+0x12>
    7738:	95 23       	and	r25, r21
    773a:	09 f0       	breq	.+2      	; 0x773e <__mulsf3+0x12>
    773c:	a2 cf       	rjmp	.-188    	; 0x7682 <__fp_inf>
    773e:	a7 cf       	rjmp	.-178    	; 0x768e <__fp_nan>
    7740:	11 24       	eor	r1, r1
    7742:	ea cf       	rjmp	.-44     	; 0x7718 <__fp_szero>

00007744 <__mulsf3x>:
    7744:	c6 df       	rcall	.-116    	; 0x76d2 <__fp_split3>
    7746:	a0 f3       	brcs	.-24     	; 0x7730 <__mulsf3+0x4>

00007748 <__mulsf3_pse>:
    7748:	95 9f       	mul	r25, r21
    774a:	d1 f3       	breq	.-12     	; 0x7740 <__mulsf3+0x14>
    774c:	95 0f       	add	r25, r21
    774e:	50 e0       	ldi	r21, 0x00	; 0
    7750:	55 1f       	adc	r21, r21
    7752:	62 9f       	mul	r22, r18
    7754:	f0 01       	movw	r30, r0
    7756:	72 9f       	mul	r23, r18
    7758:	bb 27       	eor	r27, r27
    775a:	f0 0d       	add	r31, r0
    775c:	b1 1d       	adc	r27, r1
    775e:	63 9f       	mul	r22, r19
    7760:	aa 27       	eor	r26, r26
    7762:	f0 0d       	add	r31, r0
    7764:	b1 1d       	adc	r27, r1
    7766:	aa 1f       	adc	r26, r26
    7768:	64 9f       	mul	r22, r20
    776a:	66 27       	eor	r22, r22
    776c:	b0 0d       	add	r27, r0
    776e:	a1 1d       	adc	r26, r1
    7770:	66 1f       	adc	r22, r22
    7772:	82 9f       	mul	r24, r18
    7774:	22 27       	eor	r18, r18
    7776:	b0 0d       	add	r27, r0
    7778:	a1 1d       	adc	r26, r1
    777a:	62 1f       	adc	r22, r18
    777c:	73 9f       	mul	r23, r19
    777e:	b0 0d       	add	r27, r0
    7780:	a1 1d       	adc	r26, r1
    7782:	62 1f       	adc	r22, r18
    7784:	83 9f       	mul	r24, r19
    7786:	a0 0d       	add	r26, r0
    7788:	61 1d       	adc	r22, r1
    778a:	22 1f       	adc	r18, r18
    778c:	74 9f       	mul	r23, r20
    778e:	33 27       	eor	r19, r19
    7790:	a0 0d       	add	r26, r0
    7792:	61 1d       	adc	r22, r1
    7794:	23 1f       	adc	r18, r19
    7796:	84 9f       	mul	r24, r20
    7798:	60 0d       	add	r22, r0
    779a:	21 1d       	adc	r18, r1
    779c:	82 2f       	mov	r24, r18
    779e:	76 2f       	mov	r23, r22
    77a0:	6a 2f       	mov	r22, r26
    77a2:	11 24       	eor	r1, r1
    77a4:	9f 57       	subi	r25, 0x7F	; 127
    77a6:	50 40       	sbci	r21, 0x00	; 0
    77a8:	8a f0       	brmi	.+34     	; 0x77cc <__mulsf3_pse+0x84>
    77aa:	e1 f0       	breq	.+56     	; 0x77e4 <__mulsf3_pse+0x9c>
    77ac:	88 23       	and	r24, r24
    77ae:	4a f0       	brmi	.+18     	; 0x77c2 <__mulsf3_pse+0x7a>
    77b0:	ee 0f       	add	r30, r30
    77b2:	ff 1f       	adc	r31, r31
    77b4:	bb 1f       	adc	r27, r27
    77b6:	66 1f       	adc	r22, r22
    77b8:	77 1f       	adc	r23, r23
    77ba:	88 1f       	adc	r24, r24
    77bc:	91 50       	subi	r25, 0x01	; 1
    77be:	50 40       	sbci	r21, 0x00	; 0
    77c0:	a9 f7       	brne	.-22     	; 0x77ac <__mulsf3_pse+0x64>
    77c2:	9e 3f       	cpi	r25, 0xFE	; 254
    77c4:	51 05       	cpc	r21, r1
    77c6:	70 f0       	brcs	.+28     	; 0x77e4 <__mulsf3_pse+0x9c>
    77c8:	5c cf       	rjmp	.-328    	; 0x7682 <__fp_inf>
    77ca:	a6 cf       	rjmp	.-180    	; 0x7718 <__fp_szero>
    77cc:	5f 3f       	cpi	r21, 0xFF	; 255
    77ce:	ec f3       	brlt	.-6      	; 0x77ca <__mulsf3_pse+0x82>
    77d0:	98 3e       	cpi	r25, 0xE8	; 232
    77d2:	dc f3       	brlt	.-10     	; 0x77ca <__mulsf3_pse+0x82>
    77d4:	86 95       	lsr	r24
    77d6:	77 95       	ror	r23
    77d8:	67 95       	ror	r22
    77da:	b7 95       	ror	r27
    77dc:	f7 95       	ror	r31
    77de:	e7 95       	ror	r30
    77e0:	9f 5f       	subi	r25, 0xFF	; 255
    77e2:	c1 f7       	brne	.-16     	; 0x77d4 <__mulsf3_pse+0x8c>
    77e4:	fe 2b       	or	r31, r30
    77e6:	88 0f       	add	r24, r24
    77e8:	91 1d       	adc	r25, r1
    77ea:	96 95       	lsr	r25
    77ec:	87 95       	ror	r24
    77ee:	97 f9       	bld	r25, 7
    77f0:	08 95       	ret

000077f2 <__mulsi3>:
    77f2:	62 9f       	mul	r22, r18
    77f4:	d0 01       	movw	r26, r0
    77f6:	73 9f       	mul	r23, r19
    77f8:	f0 01       	movw	r30, r0
    77fa:	82 9f       	mul	r24, r18
    77fc:	e0 0d       	add	r30, r0
    77fe:	f1 1d       	adc	r31, r1
    7800:	64 9f       	mul	r22, r20
    7802:	e0 0d       	add	r30, r0
    7804:	f1 1d       	adc	r31, r1
    7806:	92 9f       	mul	r25, r18
    7808:	f0 0d       	add	r31, r0
    780a:	83 9f       	mul	r24, r19
    780c:	f0 0d       	add	r31, r0
    780e:	74 9f       	mul	r23, r20
    7810:	f0 0d       	add	r31, r0
    7812:	65 9f       	mul	r22, r21
    7814:	f0 0d       	add	r31, r0
    7816:	99 27       	eor	r25, r25
    7818:	72 9f       	mul	r23, r18
    781a:	b0 0d       	add	r27, r0
    781c:	e1 1d       	adc	r30, r1
    781e:	f9 1f       	adc	r31, r25
    7820:	63 9f       	mul	r22, r19
    7822:	b0 0d       	add	r27, r0
    7824:	e1 1d       	adc	r30, r1
    7826:	f9 1f       	adc	r31, r25
    7828:	bd 01       	movw	r22, r26
    782a:	cf 01       	movw	r24, r30
    782c:	11 24       	eor	r1, r1
    782e:	08 95       	ret

00007830 <__udivmodhi4>:
    7830:	aa 1b       	sub	r26, r26
    7832:	bb 1b       	sub	r27, r27
    7834:	51 e1       	ldi	r21, 0x11	; 17
    7836:	07 c0       	rjmp	.+14     	; 0x7846 <__udivmodhi4_ep>

00007838 <__udivmodhi4_loop>:
    7838:	aa 1f       	adc	r26, r26
    783a:	bb 1f       	adc	r27, r27
    783c:	a6 17       	cp	r26, r22
    783e:	b7 07       	cpc	r27, r23
    7840:	10 f0       	brcs	.+4      	; 0x7846 <__udivmodhi4_ep>
    7842:	a6 1b       	sub	r26, r22
    7844:	b7 0b       	sbc	r27, r23

00007846 <__udivmodhi4_ep>:
    7846:	88 1f       	adc	r24, r24
    7848:	99 1f       	adc	r25, r25
    784a:	5a 95       	dec	r21
    784c:	a9 f7       	brne	.-22     	; 0x7838 <__udivmodhi4_loop>
    784e:	80 95       	com	r24
    7850:	90 95       	com	r25
    7852:	bc 01       	movw	r22, r24
    7854:	cd 01       	movw	r24, r26
    7856:	08 95       	ret

00007858 <__divmodhi4>:
    7858:	97 fb       	bst	r25, 7
    785a:	09 2e       	mov	r0, r25
    785c:	07 26       	eor	r0, r23
    785e:	0a d0       	rcall	.+20     	; 0x7874 <__divmodhi4_neg1>
    7860:	77 fd       	sbrc	r23, 7
    7862:	04 d0       	rcall	.+8      	; 0x786c <__divmodhi4_neg2>
    7864:	e5 df       	rcall	.-54     	; 0x7830 <__udivmodhi4>
    7866:	06 d0       	rcall	.+12     	; 0x7874 <__divmodhi4_neg1>
    7868:	00 20       	and	r0, r0
    786a:	1a f4       	brpl	.+6      	; 0x7872 <__divmodhi4_exit>

0000786c <__divmodhi4_neg2>:
    786c:	70 95       	com	r23
    786e:	61 95       	neg	r22
    7870:	7f 4f       	sbci	r23, 0xFF	; 255

00007872 <__divmodhi4_exit>:
    7872:	08 95       	ret

00007874 <__divmodhi4_neg1>:
    7874:	f6 f7       	brtc	.-4      	; 0x7872 <__divmodhi4_exit>
    7876:	90 95       	com	r25
    7878:	81 95       	neg	r24
    787a:	9f 4f       	sbci	r25, 0xFF	; 255
    787c:	08 95       	ret

0000787e <__udivmodsi4>:
    787e:	a1 e2       	ldi	r26, 0x21	; 33
    7880:	1a 2e       	mov	r1, r26
    7882:	aa 1b       	sub	r26, r26
    7884:	bb 1b       	sub	r27, r27
    7886:	fd 01       	movw	r30, r26
    7888:	0d c0       	rjmp	.+26     	; 0x78a4 <__udivmodsi4_ep>

0000788a <__udivmodsi4_loop>:
    788a:	aa 1f       	adc	r26, r26
    788c:	bb 1f       	adc	r27, r27
    788e:	ee 1f       	adc	r30, r30
    7890:	ff 1f       	adc	r31, r31
    7892:	a2 17       	cp	r26, r18
    7894:	b3 07       	cpc	r27, r19
    7896:	e4 07       	cpc	r30, r20
    7898:	f5 07       	cpc	r31, r21
    789a:	20 f0       	brcs	.+8      	; 0x78a4 <__udivmodsi4_ep>
    789c:	a2 1b       	sub	r26, r18
    789e:	b3 0b       	sbc	r27, r19
    78a0:	e4 0b       	sbc	r30, r20
    78a2:	f5 0b       	sbc	r31, r21

000078a4 <__udivmodsi4_ep>:
    78a4:	66 1f       	adc	r22, r22
    78a6:	77 1f       	adc	r23, r23
    78a8:	88 1f       	adc	r24, r24
    78aa:	99 1f       	adc	r25, r25
    78ac:	1a 94       	dec	r1
    78ae:	69 f7       	brne	.-38     	; 0x788a <__udivmodsi4_loop>
    78b0:	60 95       	com	r22
    78b2:	70 95       	com	r23
    78b4:	80 95       	com	r24
    78b6:	90 95       	com	r25
    78b8:	9b 01       	movw	r18, r22
    78ba:	ac 01       	movw	r20, r24
    78bc:	bd 01       	movw	r22, r26
    78be:	cf 01       	movw	r24, r30
    78c0:	08 95       	ret

000078c2 <__tablejump2__>:
    78c2:	ee 0f       	add	r30, r30
    78c4:	ff 1f       	adc	r31, r31

000078c6 <__tablejump__>:
    78c6:	05 90       	lpm	r0, Z+
    78c8:	f4 91       	lpm	r31, Z+
    78ca:	e0 2d       	mov	r30, r0
    78cc:	09 94       	ijmp

000078ce <isspace>:
    78ce:	91 11       	cpse	r25, r1
    78d0:	0e c0       	rjmp	.+28     	; 0x78ee <__ctype_isfalse>
    78d2:	80 32       	cpi	r24, 0x20	; 32
    78d4:	19 f0       	breq	.+6      	; 0x78dc <isspace+0xe>
    78d6:	89 50       	subi	r24, 0x09	; 9
    78d8:	85 50       	subi	r24, 0x05	; 5
    78da:	d0 f7       	brcc	.-12     	; 0x78d0 <isspace+0x2>
    78dc:	08 95       	ret

000078de <toupper>:
    78de:	91 11       	cpse	r25, r1
    78e0:	08 95       	ret
    78e2:	81 56       	subi	r24, 0x61	; 97
    78e4:	8a 51       	subi	r24, 0x1A	; 26
    78e6:	08 f4       	brcc	.+2      	; 0x78ea <toupper+0xc>
    78e8:	80 52       	subi	r24, 0x20	; 32
    78ea:	85 58       	subi	r24, 0x85	; 133
    78ec:	08 95       	ret

000078ee <__ctype_isfalse>:
    78ee:	99 27       	eor	r25, r25
    78f0:	88 27       	eor	r24, r24

000078f2 <__ctype_istrue>:
    78f2:	08 95       	ret

000078f4 <__do_global_dtors>:
    78f4:	19 e0       	ldi	r17, 0x09	; 9
    78f6:	cc ec       	ldi	r28, 0xCC	; 204
    78f8:	d9 e0       	ldi	r29, 0x09	; 9
    78fa:	04 c0       	rjmp	.+8      	; 0x7904 <.do_global_dtors_start>

000078fc <.do_global_dtors_loop>:
    78fc:	fe 01       	movw	r30, r28
    78fe:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <__tablejump__>
    7902:	22 96       	adiw	r28, 0x02	; 2

00007904 <.do_global_dtors_start>:
    7904:	ce 3c       	cpi	r28, 0xCE	; 206
    7906:	d1 07       	cpc	r29, r17
    7908:	c9 f7       	brne	.-14     	; 0x78fc <.do_global_dtors_loop>
    790a:	f8 94       	cli

0000790c <__stop_program>:
    790c:	ff cf       	rjmp	.-2      	; 0x790c <__stop_program>
