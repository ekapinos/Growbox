
Growbox.cpp.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cf 04 	jmp	0x99e	; 0x99e <__dtors_end>
    total += 2; /* Add two bytes for the memory block's header  */
    total += (int) current->sz;
  }

  return total;
}
       4:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
   
int month(){
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
       8:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
  for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
     free(id);   // ensure  all Alarms are cleared and available for allocation  
}
       c:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
  txBufferLength = 0;
}
      10:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
}
      14:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
    exists = false;
    return false;
  }
  exists = true;
  return true;
}
      18:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
void OneWire::depower()
{
	noInterrupts();
	DIRECT_MODE_INPUT(baseReg, bitmask);
	interrupts();
}
      1c:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
  devices = 0;
  parasite = false;
  bitResolution = 9;
  waitForConversion = true;
  checkForConversion = true;
}
      20:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      24:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
      28:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
      2c:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
	return operator[](loc);
}

void String::setCharAt(unsigned int loc, char c) 
{
	if (loc < len) buffer[loc] = c;
      30:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      34:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      38:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      3c:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      40:	0c 94 19 2f 	jmp	0x5e32	; 0x5e32 <__vector_16>
      44:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      48:	0c 94 f3 30 	jmp	0x61e6	; 0x61e6 <__vector_18>
      4c:	0c 94 41 31 	jmp	0x6282	; 0x6282 <__vector_19>
      50:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      54:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      58:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      5c:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      60:	0c 94 1e 26 	jmp	0x4c3c	; 0x4c3c <__vector_24>
      64:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>

00000068 <_ZZL9sendTab_B8HTTP_TAGE3__c>:
      68:	62 00                                               b.

0000006a <_ZZN15GB_SerialHelper16sendHttpOKHeaderEhE3__c>:
      6a:	48 54 54 50 2f 31 2e 31 20 32 30 30 20 4f 4b 0d     HTTP/1.1 200 OK.
      7a:	0a 43 6f 6e 6e 65 63 74 69 6f 6e 3a 20 63 6c 6f     .Connection: clo
      8a:	73 65 0d 0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65     se..Content-Type
      9a:	3a 20 74 65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 00     : text/html.....

000000aa <_ZZN15GB_SerialHelper18sendWifiFrameStartEhjE3__c>:
      aa:	61 74 2b 73 65 6e 64 5f 64 61 74 61 3d 00           at+send_data=.

000000b8 <_ZL7S_empty>:
	...

000000b9 <_ZZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperihE3__c_0>:
      b9:	20 3e 20 00                                          > .

000000bd <_ZZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperihE3__c>:
      bd:	65 72 72 6f 72 20 00                                error .

000000c4 <_ZZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperihE3__c_0>:
      c4:	20 28 72 65 62 6f 6f 74 29 00                        (reboot).

000000ce <_ZZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperihE3__c>:
      ce:	4e 6f 20 72 65 73 70 6f 6e 73 65 00                 No response.

000000da <_ZL6S_WIFI>:
      da:	57 49 46 49 3e 20 00                                WIFI> .

000000e1 <_ZZN13GB_PrintDirty16printWithoutCRLFERK6StringE3__c_0>:
      e1:	5c 6e 00                                            \n.

000000e4 <_ZZN13GB_PrintDirty16printWithoutCRLFERK6StringE3__c>:
      e4:	5c 72 00                                            \r.

000000e7 <_ZZL10sendTag_TD8HTTP_TAGE3__c>:
      e7:	74 64 00                                            td.

000000ea <_ZZL10sendTag_TR8HTTP_TAGE3__c>:
      ea:	74 72 00                                            tr.

000000ed <_ZZL13sendTag_TABLE8HTTP_TAGE3__c>:
      ed:	74 61 62 6c 65 00                                   table.

000000f3 <_ZL13S_Free_memory>:
      f3:	46 72 65 65 20 6d 65 6d 6f 72 79 3a 20 00           Free memory: .

00000101 <_ZL7S_bytes>:
     101:	20 62 79 74 65 73 00                                 bytes.

00000108 <_ZL6S_CRLF>:
     108:	0d 0a 00                                            ...

0000010b <_ZZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhhE3__c_0>:
     10b:	4e 4f 54 20 53 54 4f 52 45 44 20 00                 NOT STORED .

00000117 <_ZZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhhE3__c>:
     117:	4c 4f 47 3e 20 00                                   LOG> .

0000011d <_ZZN9GB_Logger18getLogRecordSuffixERK9LogRecordE3__c_0>:
     11d:	5d 20 43 00                                         ] C.

00000121 <_ZZN9GB_Logger18getLogRecordSuffixERK9LogRecordE3__c>:
     121:	20 5b 00                                             [.

00000124 <_ZL9S_enabled>:
     124:	20 65 6e 61 62 6c 65 64 00                           enabled.

0000012d <_ZL10S_disabled>:
     12d:	20 64 69 73 61 62 6c 65 64 00                        disabled.

00000137 <_ZL11S_connected>:
     137:	20 63 6f 6e 6e 65 63 74 65 64 00                     connected.

00000142 <_ZL14S_disconnected>:
     142:	20 64 69 73 63 6f 6e 6e 65 63 74 65 64 00            disconnected.

00000150 <_ZZN15GB_SerialHelper11checkSerialEhhE3__c_3>:
     150:	53 65 72 69 61 6c 20 57 69 2d 46 69 3a 00           Serial Wi-Fi:.

0000015e <_ZZN15GB_SerialHelper11checkSerialEhhE3__c_2>:
     15e:	53 65 72 69 61 6c 20 6d 6f 6e 69 74 6f 72 3a 20     Serial monitor: 
	...

0000016f <_ZZN15GB_SerialHelper11checkSerialEhhE3__c_1>:
     16f:	20 3e 20 00                                          > .

00000173 <_ZZN15GB_SerialHelper11checkSerialEhhE3__c_0>:
     173:	4e 6f 74 20 63 6f 72 72 65 6e 74 20 77 65 6c 6c     Not corrent well
     183:	63 6f 6d 65 20 6d 65 73 73 61 67 65 3a 20 00        come message: .

00000192 <_ZZN15GB_SerialHelper11checkSerialEhhE3__c>:
     192:	61 74 2b 72 65 73 65 74 3d 30 00                    at+reset=0.

0000019d <_ZZN15GB_SerialHelper9startWifiEvE3__c_1>:
     19d:	53 74 61 72 74 20 66 61 69 6c 65 64 00              Start failed.

000001aa <_ZZN15GB_SerialHelper9startWifiEvE3__c_0>:
     1aa:	53 74 61 72 74 65 64 00                             Started.

000001b2 <_ZZN15GB_SerialHelper9startWifiEvE3__c>:
     1b2:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

000001be <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_7>:
     1be:	61 74 2b 6c 74 63 70 3d 38 30 00                    at+ltcp=80.

000001c9 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_6>:
     1c9:	61 74 2b 61 70 3d 47 72 6f 77 62 6f 78 2c 31 00     at+ap=Growbox,1.

000001d9 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_5>:
     1d9:	61 74 2b 69 70 64 68 63 70 3d 31 00                 at+ipdhcp=1.

000001e5 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_4>:
     1e5:	61 74 2b 69 70 73 74 61 74 69 63 3d 31 39 32 2e     at+ipstatic=192.
     1f5:	31 36 38 2e 30 2e 31 2c 32 35 35 2e 32 35 35 2e     168.0.1,255.255.
     205:	30 2e 30 2c 30 2e 30 2e 30 2e 30 2c 30 2c 30 00     0.0,0.0.0.0,0,0.

00000215 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_3>:
     215:	61 74 2b 70 73 6b 3d 69 6e 67 6f 64 77 65 74 72     at+psk=ingodwetr
     225:	75 73 74 00                                         ust.

00000229 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_2>:
     229:	61 74 2b 69 70 64 68 63 70 3d 30 00                 at+ipdhcp=0.

00000235 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_1>:
     235:	61 74 2b 63 6f 6e 6e 65 63 74 3d 00                 at+connect=.

00000241 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_0>:
     241:	61 74 2b 70 73 6b 3d 00                             at+psk=.

00000249 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c>:
     249:	61 74 2b 73 63 61 6e 3d 30 00                       at+scan=0.

00000253 <_ZL13S_Temperature>:
     253:	54 65 6d 70 65 72 61 74 75 72 65 00                 Temperature.

0000025f <_ZZ11serialEventvE3__c>:
     25f:	53 65 6e 64 20 72 65 73 70 6f 6e 63 65 20 65 72     Send responce er
     26f:	72 6f 72 00                                         ror.

00000273 <_ZZN15GB_SerialHelper17handleSerialEventER6StringRhS2_E3__c_2>:
     273:	20 3e 20 00                                          > .

00000277 <_ZZN15GB_SerialHelper17handleSerialEventER6StringRhS2_E3__c_1>:
     277:	53 45 52 49 41 4c 3e 20 00                          SERIAL> .

00000280 <_ZZN15GB_SerialHelper17handleSerialEventER6StringRhS2_E3__c_0>:
     280:	47 45 54 20 00                                      GET .

00000285 <_ZZN15GB_SerialHelper17handleSerialEventER6StringRhS2_E3__c>:
     285:	43 6c 69 65 6e 74 20 00                             Client .

0000028d <_ZZN15GB_SerialHelper15closeConnectionEhE3__c>:
     28d:	61 74 2b 63 6c 73 3d 00                             at+cls=.

00000295 <_ZZL14executeCommandR6StringE3__c_8>:
     295:	3c 2f 68 74 6d 6c 3e 00                             </html>.

0000029d <_ZZL14executeCommandR6StringE3__c_7>:
     29d:	53 74 6f 72 61 67 65 20 64 75 6d 70 00              Storage dump.

000002aa <_ZZL14executeCommandR6StringE3__c_6>:
     2aa:	2f 73 74 6f 72 61 67 65 00                          /storage.

000002b3 <_ZZL14executeCommandR6StringE3__c_5>:
     2b3:	43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 00           Configuration.

000002c1 <_ZZL14executeCommandR6StringE3__c_4>:
     2c1:	2f 63 6f 6e 66 00                                   /conf.

000002c7 <_ZZL14executeCommandR6StringE3__c_3>:
     2c7:	44 61 69 6c 79 20 6c 6f 67 00                       Daily log.

000002d1 <_ZZL14executeCommandR6StringE3__c_2>:
     2d1:	2f 6c 6f 67 00                                      /log.

000002d6 <_ZZL14executeCommandR6StringE3__c_1>:
     2d6:	53 74 61 74 75 73 00                                Status.

000002dd <_ZZL14executeCommandR6StringE3__c_0>:
     2dd:	2f 00                                               /.

000002df <_ZZL14executeCommandR6StringE3__c>:
     2df:	3c 68 74 6d 6c 3e 3c 68 31 3e 47 72 6f 77 62 6f     <html><h1>Growbo
     2ef:	78 3c 2f 68 31 3e 00                                x</h1>.

000002f6 <_ZZL17sendHTTPtagButtonPK19__FlashStringHelperS1_E3__c_1>:
     2f6:	22 2f 3e 00                                         "/>.

000002fa <_ZZL17sendHTTPtagButtonPK19__FlashStringHelperS1_E3__c_0>:
     2fa:	27 22 20 76 61 6c 75 65 3d 22 00                    '" value=".

00000305 <_ZZL17sendHTTPtagButtonPK19__FlashStringHelperS1_E3__c>:
     305:	3c 69 6e 70 75 74 20 74 79 70 65 3d 22 62 75 74     <input type="but
     315:	74 6f 6e 22 20 6f 6e 63 6c 69 63 6b 3d 22 64 6f     ton" onclick="do
     325:	63 75 6d 65 6e 74 2e 6c 6f 63 61 74 69 6f 6e 3d     cument.location=
     335:	27 00                                               '.

00000337 <_ZZL10sendTag_HRvE3__c>:
     337:	68 72 00                                            hr.

0000033a <_ZZL14sendBootStatusvE3__c_3>:
     33a:	2c 20 6f 76 65 72 66 6c 6f 77 00                    , overflow.

00000345 <_ZZL14sendBootStatusvE3__c_2>:
     345:	2c 20 72 65 63 6f 72 64 73 20 00                    , records .

00000350 <_ZZL14sendBootStatusvE3__c_1>:
     350:	0d 0a 4c 6f 67 67 65 72 3a 00                       ..Logger:.

0000035a <_ZZL14sendBootStatusvE3__c_0>:
     35a:	2c 20 66 69 72 73 74 20 73 74 61 72 74 75 70 3a     , first startup:
     36a:	20 00                                                .

0000036c <_ZZL14sendBootStatusvE3__c>:
     36c:	43 6f 6e 74 72 6f 6c 6c 65 72 3a 20 73 74 61 72     Controller: star
     37c:	74 75 70 3a 20 00                                   tup: .

00000382 <_ZZL14sendTimeStatusvE3__c_5>:
     382:	3a 30 30 5d 0d 0a 00                                :00]...

00000389 <_ZZL14sendTimeStatusvE3__c_4>:
     389:	3a 30 30 5d 2c 20 64 6f 77 6e 20 74 69 6d 65 20     :00], down time 
     399:	5b 00                                               [.

0000039b <_ZZL14sendTimeStatusvE3__c_3>:
     39b:	2c 20 75 70 20 74 69 6d 65 20 5b 00                 , up time [.

000003a7 <_ZZL14sendTimeStatusvE3__c_2>:
     3a7:	20 6d 6f 64 65 2c 20 74 69 6d 65 20 00               mode, time .

000003b4 <_ZZL14sendTimeStatusvE3__c_1>:
     3b4:	4e 49 47 48 54 00                                   NIGHT.

000003ba <_ZZL14sendTimeStatusvE3__c_0>:
     3ba:	44 41 59 00                                         DAY.

000003be <_ZZL14sendTimeStatusvE3__c>:
     3be:	43 6c 6f 63 6b 3a 20 00                             Clock: .

000003c6 <_ZL11S_PlusMinus>:
     3c6:	2b 2f 2d 00                                         +/-.

000003ca <_ZZL21sendTemperatureStatusvE3__c_4>:
     3ca:	2c 20 63 72 69 74 69 63 61 6c 20 00                 , critical .

000003d6 <_ZZL21sendTemperatureStatusvE3__c_3>:
     3d6:	2c 20 6e 69 67 68 74 20 00                          , night .

000003df <_ZZL21sendTemperatureStatusvE3__c_2>:
     3df:	29 2c 20 64 61 79 20 00                             ), day .

000003e7 <_ZZL21sendTemperatureStatusvE3__c_1>:
     3e7:	20 28 63 6f 75 6e 74 20 00                           (count .

000003f0 <_ZZL21sendTemperatureStatusvE3__c_0>:
     3f0:	2c 20 6e 65 78 74 20 00                             , next .

000003f8 <_ZZL21sendTemperatureStatusvE3__c>:
     3f8:	3a 20 63 75 72 72 65 6e 74 20 00                    : current .

00000403 <_ZZL19printSendPinsStatusvE3__c_13>:
     403:	52 65 73 65 72 76 65 64 20 62 79 20 49 32 43 2e     Reserved by I2C.
     413:	20 43 61 6e 20 62 65 20 75 73 65 64 2c 20 69 66      Can be used, if
     423:	20 53 43 4c 2c 20 53 44 41 20 70 69 6e 73 20 77      SCL, SDA pins w
     433:	69 6c 6c 20 62 65 20 75 73 65 64 00                 ill be used.

0000043f <_ZZL19printSendPinsStatusvE3__c_12>:
     43f:	42 72 65 65 7a 65 00                                Breeze.

00000446 <_ZZL19printSendPinsStatusvE3__c_11>:
     446:	45 72 72 6f 72 20 73 74 61 74 75 73 00              Error status.

00000453 <_ZZL19printSendPinsStatusvE3__c_10>:
     453:	55 73 65 20 73 65 72 69 61 6c 20 6d 6f 6e 69 74     Use serial monit
     463:	6f 72 20 6f 6e 28 31 29 2f 6f 66 66 28 30 29 00     or on(1)/off(0).

00000473 <_ZZL19printSendPinsStatusvE3__c_9>:
     473:	31 2d 57 69 72 65 3a 20 74 65 72 6d 6f 6d 65 74     1-Wire: termomet
     483:	65 72 00                                            er.

00000486 <_ZZL19printSendPinsStatusvE3__c_8>:
     486:	52 65 6c 61 79 3a 20 66 75 6e 20 6d 61 78 28 30     Relay: fun max(0
     496:	29 2f 6d 69 6e 28 31 29 20 73 70 65 65 64 20 73     )/min(1) speed s
     4a6:	77 69 74 63 68 00                                   witch.

000004ac <_ZZL19printSendPinsStatusvE3__c_7>:
     4ac:	52 65 6c 61 79 3a 20 66 75 6e 20 6f 6e 28 30 29     Relay: fun on(0)
     4bc:	2f 6f 66 66 28 31 29 00                             /off(1).

000004c4 <_ZZL19printSendPinsStatusvE3__c_6>:
     4c4:	52 65 6c 61 79 3a 20 6c 69 67 68 74 20 6f 6e 28     Relay: light on(
     4d4:	30 29 2f 6f 66 66 28 31 29 00                       0)/off(1).

000004de <_ZZL19printSendPinsStatusvE3__c_5>:
     4de:	52 65 73 65 72 76 65 64 20 62 79 20 53 65 72 69     Reserved by Seri
     4ee:	61 6c 2f 55 53 42 2e 20 43 61 6e 20 62 65 20 75     al/USB. Can be u
     4fe:	73 65 64 2c 20 69 66 20 53 65 72 69 61 6c 2f 55     sed, if Serial/U
     50e:	53 42 20 77 6f 6e 27 74 20 62 65 20 63 6f 6e 6e     SB won't be conn
     51e:	65 63 74 65 64 00                                   ected.

00000524 <_ZZL19printSendPinsStatusvE3__c_4>:
     524:	20 20 20 00                                            .

00000528 <_ZZL19printSendPinsStatusvE3__c_3>:
     528:	20 20 2d 20 20 20 20 20 00                            -     .

00000531 <_ZZL19printSendPinsStatusvE3__c_2>:
     531:	20 20 20 20 20 2d 20 20 20 00                            -   .

0000053b <_ZZL19printSendPinsStatusvE3__c_1>:
     53b:	20 20 00                                              .

0000053e <_ZZL19printSendPinsStatusvE3__c_0>:
     53e:	20 20 00                                              .

00000541 <_ZZL19printSendPinsStatusvE3__c>:
     541:	50 69 6e 20 4f 55 54 50 55 54 20 49 4e 50 55 54     Pin OUTPUT INPUT
	...

00000552 <_ZZL30printSendConfigurationControlsvE3__c_1>:
     552:	3c 2f 66 6f 72 6d 3e 00                             </form>.

0000055a <_ZZL30printSendConfigurationControlsvE3__c_0>:
     55a:	3c 69 6e 70 75 74 20 74 79 70 65 3d 22 73 75 62     <input type="sub
     56a:	6d 69 74 22 20 76 61 6c 75 65 3d 22 53 75 62 6d     mit" value="Subm
     57a:	69 74 22 3e 00                                      it">.

0000057f <_ZZL30printSendConfigurationControlsvE3__c>:
     57f:	3c 66 6f 72 6d 20 61 63 74 69 6f 6e 3d 22 2f 22     <form action="/"
     58f:	20 6d 65 74 68 6f 64 3d 22 70 6f 73 74 22 3e 00      method="post">.

0000059f <_ZZL16printSendFullLoghhhE3__c>:
     59f:	4c 6f 67 20 65 6d 70 74 79 00                       Log empty.

000005a9 <_ZZN9GB_Logger23getLogRecordDescriptionER9LogRecordE3__c_1>:
     5a9:	55 6e 6b 6e 6f 77 6e 00                             Unknown.

000005b1 <_ZZN9GB_Logger23getLogRecordDescriptionER9LogRecordE3__c_0>:
     5b1:	55 6e 6b 6e 6f 77 6e 20 65 72 72 6f 72 00           Unknown error.

000005bf <_ZZN9GB_Logger23getLogRecordDescriptionER9LogRecordE3__c>:
     5bf:	55 6e 6b 6e 6f 77 6e 20 65 76 65 6e 74 00           Unknown event.

000005cd <_ZZL11sendTab_PRE8HTTP_TAGE3__c>:
     5cd:	70 72 65 00                                         pre.

000005d1 <_ZZN15GB_SerialHelper22sendHttpNotFoundHeaderEhE3__c>:
     5d1:	48 54 54 50 2f 31 2e 31 20 34 30 34 20 4e 6f 74     HTTP/1.1 404 Not
     5e1:	20 46 6f 75 6e 64 0d 0a 43 6f 6e 6e 65 63 74 69      Found..Connecti
     5f1:	6f 6e 3a 20 63 6c 6f 73 65 0d 0a 0d 0a 00           on: close.....

000005ff <_ZZ5setupE3__c_7>:
     5ff:	47 72 6f 77 62 6f 78 20 73 75 63 63 65 73 73 66     Growbox successf
     60f:	75 6c 6c 79 20 73 74 61 72 74 65 64 00              ully started.

0000061c <_ZZ5setupE3__c_6>:
     61c:	73 74 6f 72 61 67 65 00                             storage.

00000624 <_ZZ5setupE3__c_5>:
     624:	74 65 72 6d 6f 6d 65 74 65 72 00                    termometer.

0000062f <_ZZ5setupE3__c_4>:
     62f:	63 6c 6f 63 6b 00                                   clock.

00000635 <_ZZ5setupE3__c_1>:
     635:	6e 6f 74 20 61 6c 6c 20 45 76 65 6e 74 73 20 69     not all Events i
     645:	6e 69 74 69 61 6c 69 7a 65 64 00                    nitialized.

00000650 <_ZZ5setupE3__c_0>:
     650:	6e 6f 74 20 61 6c 6c 20 45 72 72 6f 72 73 20 69     not all Errors i
     660:	6e 69 74 69 61 6c 69 7a 65 64 00                    nitialized.

0000066b <_ZZ5setupE3__c>:
     66b:	73 6f 66 74 77 61 72 65 20 63 6f 6e 66 69 67 75     software configu
     67b:	72 61 74 69 6f 6e 00                                ration.

00000682 <_ZZL21printFatalErrorOnBootPK19__FlashStringHelperE3__c>:
     682:	46 61 74 61 6c 20 65 72 72 6f 72 3a 20 00           Fatal error: .

00000690 <_ZZL17printStatusOnBootPK19__FlashStringHelperE3__c_0>:
     690:	2e 2e 2e 00                                         ....

00000694 <_ZZL17printStatusOnBootPK19__FlashStringHelperE3__c>:
     694:	43 68 65 63 6b 69 6e 67 20 00                       Checking .

0000069e <_ZZ15initLoggerModelvE3__c_14>:
     69e:	55 6e 6b 6e 6f 77 6e 20 73 65 72 69 61 6c 20 63     Unknown serial c
     6ae:	6f 6d 6d 61 6e 64 00                                ommand.

000006b5 <_ZZ15initLoggerModelvE3__c_13>:
     6b5:	46 41 4e 20 74 75 72 6e 65 64 20 4f 4e 20 4d 41     FAN turned ON MA
     6c5:	58 20 73 70 65 65 64 00                             X speed.

000006cd <_ZZ15initLoggerModelvE3__c_12>:
     6cd:	46 41 4e 20 74 75 72 6e 65 64 20 4f 4e 20 4d 49     FAN turned ON MI
     6dd:	4e 20 73 70 65 65 64 00                             N speed.

000006e5 <_ZZ15initLoggerModelvE3__c_11>:
     6e5:	46 41 4e 20 74 75 72 6e 65 64 20 4f 46 46 00        FAN turned OFF.

000006f4 <_ZZ15initLoggerModelvE3__c_10>:
     6f4:	4c 49 47 48 54 20 74 75 72 6e 65 64 20 4f 4e 00     LIGHT turned ON.

00000704 <_ZZ15initLoggerModelvE3__c_9>:
     704:	4c 49 47 48 54 20 74 75 72 6e 65 64 20 4f 46 46     LIGHT turned OFF
	...

00000715 <_ZZ15initLoggerModelvE3__c_8>:
     715:	47 72 6f 77 62 6f 78 20 73 77 69 74 63 68 65 64     Growbox switched
     725:	20 74 6f 20 4e 49 47 48 54 20 6d 6f 64 65 00         to NIGHT mode.

00000734 <_ZZ15initLoggerModelvE3__c_7>:
     734:	47 72 6f 77 62 6f 78 20 73 77 69 74 63 68 65 64     Growbox switched
     744:	20 74 6f 20 44 41 59 20 6d 6f 64 65 00               to DAY mode.

00000751 <_ZZ15initLoggerModelvE3__c_6>:
     751:	52 45 53 54 41 52 54 45 44 00                       RESTARTED.

0000075b <_ZZ15initLoggerModelvE3__c_5>:
     75b:	46 49 52 53 54 20 53 54 41 52 54 55 50 00           FIRST STARTUP.

00000769 <_ZZ15initLoggerModelvE3__c_4>:
     769:	45 72 72 6f 72 3a 20 4d 65 6d 6f 72 79 20 72 65     Error: Memory re
     779:	6d 61 69 6e 65 64 20 6c 65 73 73 20 32 30 30 20     mained less 200 
     789:	62 79 74 65 73 00                                   bytes.

0000078f <_ZZ15initLoggerModelvE3__c_3>:
     78f:	45 72 72 6f 72 3a 20 54 65 72 6d 6f 6d 65 74 65     Error: Termomete
     79f:	72 20 72 65 74 75 72 6e 65 64 20 43 52 49 54 49     r returned CRITI
     7af:	43 41 4c 20 76 61 6c 75 65 00                       CAL value.

000007b9 <_ZZ15initLoggerModelvE3__c_2>:
     7b9:	45 72 72 6f 72 3a 20 54 65 72 6d 6f 6d 65 74 65     Error: Termomete
     7c9:	72 20 72 65 74 75 72 6e 65 64 20 5a 45 52 4f 20     r returned ZERO 
     7d9:	76 61 6c 75 65 00                                   value.

000007df <_ZZ15initLoggerModelvE3__c_1>:
     7df:	45 72 72 6f 72 3a 20 54 65 72 6d 6f 6d 65 74 65     Error: Termomete
     7ef:	72 20 64 69 73 63 6f 6e 6e 65 63 74 65 64 00        r disconnected.

000007fe <_ZZ15initLoggerModelvE3__c_0>:
     7fe:	45 72 72 6f 72 3a 20 54 69 6d 65 72 20 6e 65 65     Error: Timer nee
     80e:	64 73 20 73 79 6e 63 00                             ds sync.

00000816 <_ZZ15initLoggerModelvE3__c>:
     816:	45 72 72 6f 72 3a 20 54 69 6d 65 72 20 6e 6f 74     Error: Timer not
     826:	20 73 65 74 00                                       set.

0000082b <_ZL11dscrc_table>:
     82b:	00 5e bc e2 61 3f dd 83 c2 9c 7e 20 a3 fd 1f 41     .^..a?....~ ...A
     83b:	9d c3 21 7f fc a2 40 1e 5f 01 e3 bd 3e 60 82 dc     ..!...@._...>`..
     84b:	23 7d 9f c1 42 1c fe a0 e1 bf 5d 03 80 de 3c 62     #}..B.....]...<b
     85b:	be e0 02 5c df 81 63 3d 7c 22 c0 9e 1d 43 a1 ff     ...\..c=|"...C..
     86b:	46 18 fa a4 27 79 9b c5 84 da 38 66 e5 bb 59 07     F...'y....8f..Y.
     87b:	db 85 67 39 ba e4 06 58 19 47 a5 fb 78 26 c4 9a     ..g9...X.G..x&..
     88b:	65 3b d9 87 04 5a b8 e6 a7 f9 1b 45 c6 98 7a 24     e;...Z.....E..z$
     89b:	f8 a6 44 1a 99 c7 25 7b 3a 64 86 d8 5b 05 e7 b9     ..D...%{:d..[...
     8ab:	8c d2 30 6e ed b3 51 0f 4e 10 f2 ac 2f 71 93 cd     ..0n..Q.N.../q..
     8bb:	11 4f ad f3 70 2e cc 92 d3 8d 6f 31 b2 ec 0e 50     .O..p.....o1...P
     8cb:	af f1 13 4d ce 90 72 2c 6d 33 d1 8f 0c 52 b0 ee     ...M..r,m3...R..
     8db:	32 6c 8e d0 53 0d ef b1 f0 ae 4c 12 91 cf 2d 73     2l..S.....L...-s
     8eb:	ca 94 76 28 ab f5 17 49 08 56 b4 ea 69 37 d5 8b     ..v(...I.V..i7..
     8fb:	57 09 eb b5 36 68 8a d4 95 cb 29 77 f4 aa 48 16     W...6h....)w..H.
     90b:	e9 b7 55 0b 88 d6 34 6a 2b 75 97 c9 4a 14 f6 a8     ..U...4j+u..J...
     91b:	74 2a c8 96 15 4b a9 f7 b6 e8 0a 54 d7 89 6b 35     t*...K.....T..k5

0000092b <port_to_mode_PGM>:
     92b:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000935 <port_to_output_PGM>:
     935:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000093f <port_to_input_PGM>:
     93f:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000949 <digital_pin_to_port_PGM>:
     949:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     959:	03 03 03 03                                         ....

0000095d <digital_pin_to_bit_mask_PGM>:
     95d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     96d:	04 08 10 20                                         ... 

00000971 <digital_pin_to_timer_PGM>:
     971:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     981:	00 00 00 00 00                                      .....

00000986 <__ctors_start>:
     986:	7b 05       	cpc	r23, r11
     988:	05 06       	cpc	r0, r21
     98a:	85 1c       	adc	r8, r5
     98c:	80 1d       	adc	r24, r0
     98e:	c9 1d       	adc	r28, r9
     990:	36 21       	and	r19, r6
     992:	ba 24       	eor	r11, r10
     994:	8e 28       	or	r8, r14
     996:	15 33       	cpi	r17, 0x35	; 53

00000998 <__ctors_end>:
     998:	fe 05       	cpc	r31, r14
     99a:	79 1d       	adc	r23, r9
     99c:	c2 1d       	adc	r28, r2

0000099e <__dtors_end>:
     99e:	11 24       	eor	r1, r1
     9a0:	1f be       	out	0x3f, r1	; 63
     9a2:	cf ef       	ldi	r28, 0xFF	; 255
     9a4:	d8 e0       	ldi	r29, 0x08	; 8
     9a6:	de bf       	out	0x3e, r29	; 62
     9a8:	cd bf       	out	0x3d, r28	; 61

000009aa <__do_copy_data>:
     9aa:	11 e0       	ldi	r17, 0x01	; 1
     9ac:	a0 e0       	ldi	r26, 0x00	; 0
     9ae:	b1 e0       	ldi	r27, 0x01	; 1
     9b0:	e2 e4       	ldi	r30, 0x42	; 66
     9b2:	f9 e7       	ldi	r31, 0x79	; 121
     9b4:	02 c0       	rjmp	.+4      	; 0x9ba <.do_copy_data_start>

000009b6 <.do_copy_data_loop>:
     9b6:	05 90       	lpm	r0, Z+
     9b8:	0d 92       	st	X+, r0

000009ba <.do_copy_data_start>:
     9ba:	a0 3f       	cpi	r26, 0xF0	; 240
     9bc:	b1 07       	cpc	r27, r17
     9be:	d9 f7       	brne	.-10     	; 0x9b6 <.do_copy_data_loop>

000009c0 <__do_clear_bss>:
     9c0:	14 e0       	ldi	r17, 0x04	; 4
     9c2:	a0 ef       	ldi	r26, 0xF0	; 240
     9c4:	b1 e0       	ldi	r27, 0x01	; 1
     9c6:	01 c0       	rjmp	.+2      	; 0x9ca <.do_clear_bss_start>

000009c8 <.do_clear_bss_loop>:
     9c8:	1d 92       	st	X+, r1

000009ca <.do_clear_bss_start>:
     9ca:	a6 3e       	cpi	r26, 0xE6	; 230
     9cc:	b1 07       	cpc	r27, r17
     9ce:	e1 f7       	brne	.-8      	; 0x9c8 <.do_clear_bss_loop>

000009d0 <__do_global_ctors>:
     9d0:	19 e0       	ldi	r17, 0x09	; 9
     9d2:	c8 e9       	ldi	r28, 0x98	; 152
     9d4:	d9 e0       	ldi	r29, 0x09	; 9
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <.do_global_ctors_start>

000009d8 <.do_global_ctors_loop>:
     9d8:	22 97       	sbiw	r28, 0x02	; 2
     9da:	fe 01       	movw	r30, r28
     9dc:	0e 94 7d 3c 	call	0x78fa	; 0x78fa <__tablejump__>

000009e0 <.do_global_ctors_start>:
     9e0:	c6 38       	cpi	r28, 0x86	; 134
     9e2:	d1 07       	cpc	r29, r17
     9e4:	c9 f7       	brne	.-14     	; 0x9d8 <.do_global_ctors_loop>
     9e6:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <main>
     9ea:	0c 94 94 3c 	jmp	0x7928	; 0x7928 <__do_global_dtors>

000009ee <__bad_interrupt>:
     9ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000009f2 <strlen_P>:
     9f2:	fc 01       	movw	r30, r24
     9f4:	05 90       	lpm	r0, Z+
     9f6:	00 20       	and	r0, r0
     9f8:	e9 f7       	brne	.-6      	; 0x9f4 <strlen_P+0x2>
     9fa:	80 95       	com	r24
     9fc:	90 95       	com	r25
     9fe:	8e 0f       	add	r24, r30
     a00:	9f 1f       	adc	r25, r31
     a02:	08 95       	ret

00000a04 <memcpy>:
     a04:	fb 01       	movw	r30, r22
     a06:	dc 01       	movw	r26, r24
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <memcpy+0xa>
     a0a:	01 90       	ld	r0, Z+
     a0c:	0d 92       	st	X+, r0
     a0e:	41 50       	subi	r20, 0x01	; 1
     a10:	50 40       	sbci	r21, 0x00	; 0
     a12:	d8 f7       	brcc	.-10     	; 0xa0a <memcpy+0x6>
     a14:	08 95       	ret

00000a16 <strchr>:
     a16:	fc 01       	movw	r30, r24
     a18:	81 91       	ld	r24, Z+
     a1a:	86 17       	cp	r24, r22
     a1c:	21 f0       	breq	.+8      	; 0xa26 <strchr+0x10>
     a1e:	88 23       	and	r24, r24
     a20:	d9 f7       	brne	.-10     	; 0xa18 <strchr+0x2>
     a22:	99 27       	eor	r25, r25
     a24:	08 95       	ret
     a26:	31 97       	sbiw	r30, 0x01	; 1
     a28:	cf 01       	movw	r24, r30
     a2a:	08 95       	ret

00000a2c <strcmp>:
     a2c:	fb 01       	movw	r30, r22
     a2e:	dc 01       	movw	r26, r24
     a30:	8d 91       	ld	r24, X+
     a32:	01 90       	ld	r0, Z+
     a34:	80 19       	sub	r24, r0
     a36:	01 10       	cpse	r0, r1
     a38:	d9 f3       	breq	.-10     	; 0xa30 <strcmp+0x4>
     a3a:	99 0b       	sbc	r25, r25
     a3c:	08 95       	ret

00000a3e <strcpy>:
     a3e:	fb 01       	movw	r30, r22
     a40:	dc 01       	movw	r26, r24
     a42:	01 90       	ld	r0, Z+
     a44:	0d 92       	st	X+, r0
     a46:	00 20       	and	r0, r0
     a48:	e1 f7       	brne	.-8      	; 0xa42 <strcpy+0x4>
     a4a:	08 95       	ret

00000a4c <strncmp>:
     a4c:	fb 01       	movw	r30, r22
     a4e:	dc 01       	movw	r26, r24
     a50:	41 50       	subi	r20, 0x01	; 1
     a52:	50 40       	sbci	r21, 0x00	; 0
     a54:	30 f0       	brcs	.+12     	; 0xa62 <strncmp+0x16>
     a56:	8d 91       	ld	r24, X+
     a58:	01 90       	ld	r0, Z+
     a5a:	80 19       	sub	r24, r0
     a5c:	19 f4       	brne	.+6      	; 0xa64 <strncmp+0x18>
     a5e:	00 20       	and	r0, r0
     a60:	b9 f7       	brne	.-18     	; 0xa50 <strncmp+0x4>
     a62:	88 1b       	sub	r24, r24
     a64:	99 0b       	sbc	r25, r25
     a66:	08 95       	ret

00000a68 <itoa>:
     a68:	fb 01       	movw	r30, r22
     a6a:	9f 01       	movw	r18, r30
     a6c:	e8 94       	clt
     a6e:	42 30       	cpi	r20, 0x02	; 2
     a70:	c4 f0       	brlt	.+48     	; 0xaa2 <itoa+0x3a>
     a72:	45 32       	cpi	r20, 0x25	; 37
     a74:	b4 f4       	brge	.+44     	; 0xaa2 <itoa+0x3a>
     a76:	4a 30       	cpi	r20, 0x0A	; 10
     a78:	29 f4       	brne	.+10     	; 0xa84 <itoa+0x1c>
     a7a:	97 fb       	bst	r25, 7
     a7c:	1e f4       	brtc	.+6      	; 0xa84 <itoa+0x1c>
     a7e:	90 95       	com	r25
     a80:	81 95       	neg	r24
     a82:	9f 4f       	sbci	r25, 0xFF	; 255
     a84:	64 2f       	mov	r22, r20
     a86:	77 27       	eor	r23, r23
     a88:	0e 94 32 3c 	call	0x7864	; 0x7864 <__udivmodhi4>
     a8c:	80 5d       	subi	r24, 0xD0	; 208
     a8e:	8a 33       	cpi	r24, 0x3A	; 58
     a90:	0c f0       	brlt	.+2      	; 0xa94 <itoa+0x2c>
     a92:	89 5d       	subi	r24, 0xD9	; 217
     a94:	81 93       	st	Z+, r24
     a96:	cb 01       	movw	r24, r22
     a98:	00 97       	sbiw	r24, 0x00	; 0
     a9a:	a1 f7       	brne	.-24     	; 0xa84 <itoa+0x1c>
     a9c:	16 f4       	brtc	.+4      	; 0xaa2 <itoa+0x3a>
     a9e:	5d e2       	ldi	r21, 0x2D	; 45
     aa0:	51 93       	st	Z+, r21
     aa2:	10 82       	st	Z, r1
     aa4:	c9 01       	movw	r24, r18
     aa6:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <strrev>

00000aaa <utoa>:
     aaa:	fb 01       	movw	r30, r22
     aac:	9f 01       	movw	r18, r30
     aae:	42 30       	cpi	r20, 0x02	; 2
     ab0:	74 f0       	brlt	.+28     	; 0xace <utoa+0x24>
     ab2:	45 32       	cpi	r20, 0x25	; 37
     ab4:	64 f4       	brge	.+24     	; 0xace <utoa+0x24>
     ab6:	64 2f       	mov	r22, r20
     ab8:	77 27       	eor	r23, r23
     aba:	0e 94 32 3c 	call	0x7864	; 0x7864 <__udivmodhi4>
     abe:	80 5d       	subi	r24, 0xD0	; 208
     ac0:	8a 33       	cpi	r24, 0x3A	; 58
     ac2:	0c f0       	brlt	.+2      	; 0xac6 <utoa+0x1c>
     ac4:	89 5d       	subi	r24, 0xD9	; 217
     ac6:	81 93       	st	Z+, r24
     ac8:	cb 01       	movw	r24, r22
     aca:	00 97       	sbiw	r24, 0x00	; 0
     acc:	a1 f7       	brne	.-24     	; 0xab6 <utoa+0xc>
     ace:	10 82       	st	Z, r1
     ad0:	c9 01       	movw	r24, r18
     ad2:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <strrev>

00000ad6 <strrev>:
     ad6:	dc 01       	movw	r26, r24
     ad8:	fc 01       	movw	r30, r24
     ada:	67 2f       	mov	r22, r23
     adc:	71 91       	ld	r23, Z+
     ade:	77 23       	and	r23, r23
     ae0:	e1 f7       	brne	.-8      	; 0xada <strrev+0x4>
     ae2:	32 97       	sbiw	r30, 0x02	; 2
     ae4:	04 c0       	rjmp	.+8      	; 0xaee <strrev+0x18>
     ae6:	7c 91       	ld	r23, X
     ae8:	6d 93       	st	X+, r22
     aea:	70 83       	st	Z, r23
     aec:	62 91       	ld	r22, -Z
     aee:	ae 17       	cp	r26, r30
     af0:	bf 07       	cpc	r27, r31
     af2:	c8 f3       	brcs	.-14     	; 0xae6 <strrev+0x10>
     af4:	08 95       	ret

00000af6 <_GLOBAL__I_g_oneWirePin>:
#include "Global.h"

// Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)
OneWire g_oneWirePin(ONE_WIRE_PIN);
     af6:	80 ef       	ldi	r24, 0xF0	; 240
     af8:	91 e0       	ldi	r25, 0x01	; 1
     afa:	68 e0       	ldi	r22, 0x08	; 8
     afc:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <_ZN7OneWireC1Eh>

boolean g_isGrowboxStarted = false;
     b00:	08 95       	ret

00000b02 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord>:
    out += ' '; 
    return out;
  }

  static const __FlashStringHelper* getLogRecordDescription(LogRecord &logRecord) {
    byte data = (logRecord.data & B00111111);   
     b02:	fc 01       	movw	r30, r24
     b04:	24 81       	ldd	r18, Z+4	; 0x04
     b06:	42 2f       	mov	r20, r18
     b08:	4f 73       	andi	r20, 0x3F	; 63

    return out;
  }

  static boolean isEvent(const LogRecord &logRecord){
    return (logRecord.data & B11000000) == B00000000;
     b0a:	82 2f       	mov	r24, r18
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	80 7c       	andi	r24, 0xC0	; 192
     b10:	90 70       	andi	r25, 0x00	; 0
    return out;
  }

  static const __FlashStringHelper* getLogRecordDescription(LogRecord &logRecord) {
    byte data = (logRecord.data & B00111111);   
    if (isEvent(logRecord)){
     b12:	00 97       	sbiw	r24, 0x00	; 0
     b14:	91 f4       	brne	.+36     	; 0xb3a <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x38>
  static Event* findByIndex(byte index){
    //Serial.print("search ev: ");    
    //Serial.println(index);
    // Serial.print("lastAddedEvent ev: ");
    //Serial.println(lastAddedEvent->description);
    Event* currentItemPtr = lastAddedEvent;
     b16:	e0 91 1f 02 	lds	r30, 0x021F
     b1a:	f0 91 20 02 	lds	r31, 0x0220
     b1e:	07 c0       	rjmp	.+14     	; 0xb2e <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x2c>
    while (currentItemPtr != 0){
      //Serial.println(currentItemPtr->description);
      if (currentItemPtr->index == index) {
     b20:	82 81       	ldd	r24, Z+2	; 0x02
     b22:	84 17       	cp	r24, r20
     b24:	39 f0       	breq	.+14     	; 0xb34 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x32>
        return currentItemPtr;
      }
      currentItemPtr = (Event*)currentItemPtr->nextEvent;
     b26:	80 81       	ld	r24, Z
     b28:	91 81       	ldd	r25, Z+1	; 0x01
     b2a:	9c 01       	movw	r18, r24
     b2c:	f9 01       	movw	r30, r18
    //Serial.print("search ev: ");    
    //Serial.println(index);
    // Serial.print("lastAddedEvent ev: ");
    //Serial.println(lastAddedEvent->description);
    Event* currentItemPtr = lastAddedEvent;
    while (currentItemPtr != 0){
     b2e:	30 97       	sbiw	r30, 0x00	; 0
     b30:	b9 f7       	brne	.-18     	; 0xb20 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x1e>
     b32:	29 c0       	rjmp	.+82     	; 0xb86 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x84>
      Event* foundItemPtr = Event::findByIndex(data);
      if (foundItemPtr == 0){
        return F("Unknown event");
      } 
      else {
        return foundItemPtr->description;
     b34:	23 81       	ldd	r18, Z+3	; 0x03
     b36:	34 81       	ldd	r19, Z+4	; 0x04
     b38:	24 c0       	rjmp	.+72     	; 0xb82 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x80>
      }
    } 
    else if (isTemperature(logRecord)){
     b3a:	80 3c       	cpi	r24, 0xC0	; 192
     b3c:	91 05       	cpc	r25, r1
     b3e:	19 f4       	brne	.+6      	; 0xb46 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x44>
      return FS(S_Temperature);
     b40:	23 e5       	ldi	r18, 0x53	; 83
     b42:	32 e0       	ldi	r19, 0x02	; 2
     b44:	1e c0       	rjmp	.+60     	; 0xb82 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x80>
    } 
    else if (isError(logRecord)){    
     b46:	80 34       	cpi	r24, 0x40	; 64
     b48:	91 05       	cpc	r25, r1
     b4a:	c9 f4       	brne	.+50     	; 0xb7e <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x7c>
      byte sequence = (data & B00001111); 
     b4c:	52 2f       	mov	r21, r18
     b4e:	5f 70       	andi	r21, 0x0F	; 15
      byte sequenceSize = (data & B00110000)>>4; 
     b50:	42 95       	swap	r20
     b52:	4f 70       	andi	r20, 0x0F	; 15
    this->sequenceSize = sequenceSize;
    this->description = description;
  }
  
  static Error* findByIndex(byte sequence, byte sequenceSize){
    Error* currentItemPtr = lastAddedItem;
     b54:	e0 91 1d 02 	lds	r30, 0x021D
     b58:	f0 91 1e 02 	lds	r31, 0x021E
     b5c:	0a c0       	rjmp	.+20     	; 0xb72 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x70>
    while (currentItemPtr != 0){
      if (currentItemPtr->sequence == sequence && currentItemPtr->sequenceSize == sequenceSize) {
     b5e:	82 81       	ldd	r24, Z+2	; 0x02
     b60:	85 17       	cp	r24, r21
     b62:	19 f4       	brne	.+6      	; 0xb6a <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x68>
     b64:	83 81       	ldd	r24, Z+3	; 0x03
     b66:	84 17       	cp	r24, r20
     b68:	39 f0       	breq	.+14     	; 0xb78 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x76>
        return currentItemPtr;
      }
      currentItemPtr = (Error*)currentItemPtr->nextError;
     b6a:	80 81       	ld	r24, Z
     b6c:	91 81       	ldd	r25, Z+1	; 0x01
     b6e:	9c 01       	movw	r18, r24
     b70:	f9 01       	movw	r30, r18
    this->description = description;
  }
  
  static Error* findByIndex(byte sequence, byte sequenceSize){
    Error* currentItemPtr = lastAddedItem;
    while (currentItemPtr != 0){
     b72:	30 97       	sbiw	r30, 0x00	; 0
     b74:	a1 f7       	brne	.-24     	; 0xb5e <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x5c>
     b76:	0a c0       	rjmp	.+20     	; 0xb8c <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x8a>
      Error* foundItemPtr = Error::findByIndex(sequence, sequenceSize);
      if (foundItemPtr == 0){
        return F("Unknown error");
      } 
      else {
        return foundItemPtr->description;
     b78:	24 81       	ldd	r18, Z+4	; 0x04
     b7a:	35 81       	ldd	r19, Z+5	; 0x05
     b7c:	02 c0       	rjmp	.+4      	; 0xb82 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x80>
      }
    } 
    else {
      return F("Unknown");
     b7e:	29 ea       	ldi	r18, 0xA9	; 169
     b80:	35 e0       	ldi	r19, 0x05	; 5
    }
  }
     b82:	c9 01       	movw	r24, r18
     b84:	08 95       	ret
  static const __FlashStringHelper* getLogRecordDescription(LogRecord &logRecord) {
    byte data = (logRecord.data & B00111111);   
    if (isEvent(logRecord)){
      Event* foundItemPtr = Event::findByIndex(data);
      if (foundItemPtr == 0){
        return F("Unknown event");
     b86:	2f eb       	ldi	r18, 0xBF	; 191
     b88:	35 e0       	ldi	r19, 0x05	; 5
     b8a:	fb cf       	rjmp	.-10     	; 0xb82 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x80>
    else if (isError(logRecord)){    
      byte sequence = (data & B00001111); 
      byte sequenceSize = (data & B00110000)>>4; 
      Error* foundItemPtr = Error::findByIndex(sequence, sequenceSize);
      if (foundItemPtr == 0){
        return F("Unknown error");
     b8c:	21 eb       	ldi	r18, 0xB1	; 177
     b8e:	35 e0       	ldi	r19, 0x05	; 5
     b90:	f8 cf       	rjmp	.-16     	; 0xb82 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x80>

00000b92 <_Z41__static_initialization_and_destruction_0ii>:
     b92:	81 30       	cpi	r24, 0x01	; 1
     b94:	91 05       	cpc	r25, r1
     b96:	e1 f4       	brne	.+56     	; 0xbd0 <_Z41__static_initialization_and_destruction_0ii+0x3e>
     b98:	6f 5f       	subi	r22, 0xFF	; 255
     b9a:	7f 4f       	sbci	r23, 0xFF	; 255
     b9c:	71 f5       	brne	.+92     	; 0xbfa <_Z41__static_initialization_and_destruction_0ii+0x68>

#include "Global.h"
#include "PrintDirty.h"

// TODO optimize it
const String WIFI_RESPONSE_WELLCOME = "Welcome to RAK410\r\n";   // TODO optimize here!
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	92 e0       	ldi	r25, 0x02	; 2
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	71 e0       	ldi	r23, 0x01	; 1
     ba6:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
const String WIFI_RESPONSE_ERROR = "ERROR";//"ERROR\xFF\r\n";
     baa:	88 e0       	ldi	r24, 0x08	; 8
     bac:	92 e0       	ldi	r25, 0x02	; 2
     bae:	64 e1       	ldi	r22, 0x14	; 20
     bb0:	71 e0       	ldi	r23, 0x01	; 1
     bb2:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
const String WIFI_RESPONSE_OK = "OK";//"OK\r\n";
     bb6:	8f e0       	ldi	r24, 0x0F	; 15
     bb8:	92 e0       	ldi	r25, 0x02	; 2
     bba:	6a e1       	ldi	r22, 0x1A	; 26
     bbc:	71 e0       	ldi	r23, 0x01	; 1
     bbe:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
const String WIFI_REQUEST_HEADER = "at+recv_data=";
     bc2:	86 e1       	ldi	r24, 0x16	; 22
     bc4:	92 e0       	ldi	r25, 0x02	; 2
     bc6:	6d e1       	ldi	r22, 0x1D	; 29
     bc8:	71 e0       	ldi	r23, 0x01	; 1
     bca:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
     bce:	08 95       	ret
     bd0:	89 2b       	or	r24, r25
     bd2:	99 f4       	brne	.+38     	; 0xbfa <_Z41__static_initialization_and_destruction_0ii+0x68>
     bd4:	6f 5f       	subi	r22, 0xFF	; 255
     bd6:	7f 4f       	sbci	r23, 0xFF	; 255
     bd8:	81 f4       	brne	.+32     	; 0xbfa <_Z41__static_initialization_and_destruction_0ii+0x68>
     bda:	86 e1       	ldi	r24, 0x16	; 22
     bdc:	92 e0       	ldi	r25, 0x02	; 2
     bde:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
#include "PrintDirty.h"

// TODO optimize it
const String WIFI_RESPONSE_WELLCOME = "Welcome to RAK410\r\n";   // TODO optimize here!
const String WIFI_RESPONSE_ERROR = "ERROR";//"ERROR\xFF\r\n";
const String WIFI_RESPONSE_OK = "OK";//"OK\r\n";
     be2:	8f e0       	ldi	r24, 0x0F	; 15
     be4:	92 e0       	ldi	r25, 0x02	; 2
     be6:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
#include "Global.h"
#include "PrintDirty.h"

// TODO optimize it
const String WIFI_RESPONSE_WELLCOME = "Welcome to RAK410\r\n";   // TODO optimize here!
const String WIFI_RESPONSE_ERROR = "ERROR";//"ERROR\xFF\r\n";
     bea:	88 e0       	ldi	r24, 0x08	; 8
     bec:	92 e0       	ldi	r25, 0x02	; 2
     bee:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>

#include "Global.h"
#include "PrintDirty.h"

// TODO optimize it
const String WIFI_RESPONSE_WELLCOME = "Welcome to RAK410\r\n";   // TODO optimize here!
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	92 e0       	ldi	r25, 0x02	; 2
     bf6:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
     bfa:	08 95       	ret

00000bfc <_GLOBAL__D_g_isDayInGrowbox>:
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	6f ef       	ldi	r22, 0xFF	; 255
     c02:	7f ef       	ldi	r23, 0xFF	; 255
     c04:	0e 94 c9 05 	call	0xb92	; 0xb92 <_Z41__static_initialization_and_destruction_0ii>
     c08:	08 95       	ret

00000c0a <_GLOBAL__I_g_isDayInGrowbox>:
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	6f ef       	ldi	r22, 0xFF	; 255
     c10:	7f ef       	ldi	r23, 0xFF	; 255
     c12:	0e 94 c9 05 	call	0xb92	; 0xb92 <_Z41__static_initialization_and_destruction_0ii>
     c16:	08 95       	ret

00000c18 <_ZN10GB_Storage5writeEjPKvh>:
    else {
      return 0xFF;
    }
  }

  static void write(word address, const void* data, const byte sizeofData) {
     c18:	af 92       	push	r10
     c1a:	bf 92       	push	r11
     c1c:	df 92       	push	r13
     c1e:	ef 92       	push	r14
     c20:	ff 92       	push	r15
     c22:	0f 93       	push	r16
     c24:	1f 93       	push	r17
     c26:	cf 93       	push	r28
     c28:	df 93       	push	r29
     c2a:	ec 01       	movw	r28, r24
     c2c:	5b 01       	movw	r10, r22
     c2e:	00 e0       	ldi	r16, 0x00	; 0
     c30:	10 e0       	ldi	r17, 0x00	; 0
    for (word c = 0; c < sizeofData; c++){
     c32:	e4 2e       	mov	r14, r20
     c34:	ff 24       	eor	r15, r15
     c36:	2a c0       	rjmp	.+84     	; 0xc8c <_ZN10GB_Storage5writeEjPKvh+0x74>
      byte value = ((byte*)data)[c];
     c38:	f5 01       	movw	r30, r10
     c3a:	e0 0f       	add	r30, r16
     c3c:	f1 1f       	adc	r31, r17
     c3e:	d0 80       	ld	r13, Z
      return true;
    return false;
  }

  static void write(const word address, const byte data) {
    if (address >= CAPACITY){
     c40:	80 e1       	ldi	r24, 0x10	; 16
     c42:	c0 30       	cpi	r28, 0x00	; 0
     c44:	d8 07       	cpc	r29, r24
     c46:	f8 f4       	brcc	.+62     	; 0xc86 <_ZN10GB_Storage5writeEjPKvh+0x6e>
      return;
    }
    Wire.beginTransmission(AT24C32);
     c48:	83 eb       	ldi	r24, 0xB3	; 179
     c4a:	93 e0       	ldi	r25, 0x03	; 3
     c4c:	60 e5       	ldi	r22, 0x50	; 80
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	0e 94 80 24 	call	0x4900	; 0x4900 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((byte)(address >> 8)); // MSB
     c54:	83 eb       	ldi	r24, 0xB3	; 179
     c56:	93 e0       	ldi	r25, 0x03	; 3
     c58:	6d 2f       	mov	r22, r29
     c5a:	0e 94 02 25 	call	0x4a04	; 0x4a04 <_ZN7TwoWire5writeEh>
    Wire.write((byte)(address & 0xFF)); // LSB
     c5e:	83 eb       	ldi	r24, 0xB3	; 179
     c60:	93 e0       	ldi	r25, 0x03	; 3
     c62:	6c 2f       	mov	r22, r28
     c64:	0e 94 02 25 	call	0x4a04	; 0x4a04 <_ZN7TwoWire5writeEh>
    Wire.write(data);
     c68:	83 eb       	ldi	r24, 0xB3	; 179
     c6a:	93 e0       	ldi	r25, 0x03	; 3
     c6c:	6d 2d       	mov	r22, r13
     c6e:	0e 94 02 25 	call	0x4a04	; 0x4a04 <_ZN7TwoWire5writeEh>
    Wire.endTransmission();  
     c72:	83 eb       	ldi	r24, 0xB3	; 179
     c74:	93 e0       	ldi	r25, 0x03	; 3
     c76:	0e 94 45 25 	call	0x4a8a	; 0x4a8a <_ZN7TwoWire15endTransmissionEv>
    delay(10);  // http://www.hobbytronics.co.uk/arduino-external-eeprom
     c7a:	6a e0       	ldi	r22, 0x0A	; 10
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	0e 94 6f 2f 	call	0x5ede	; 0x5ede <delay>
      return 0xFF;
    }
  }

  static void write(word address, const void* data, const byte sizeofData) {
    for (word c = 0; c < sizeofData; c++){
     c86:	0f 5f       	subi	r16, 0xFF	; 255
     c88:	1f 4f       	sbci	r17, 0xFF	; 255
     c8a:	21 96       	adiw	r28, 0x01	; 1
     c8c:	0e 15       	cp	r16, r14
     c8e:	1f 05       	cpc	r17, r15
     c90:	98 f2       	brcs	.-90     	; 0xc38 <_ZN10GB_Storage5writeEjPKvh+0x20>
      byte value = ((byte*)data)[c];
      write(address + c, value);
    }
  }
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	1f 91       	pop	r17
     c98:	0f 91       	pop	r16
     c9a:	ff 90       	pop	r15
     c9c:	ef 90       	pop	r14
     c9e:	df 90       	pop	r13
     ca0:	bf 90       	pop	r11
     ca2:	af 90       	pop	r10
     ca4:	08 95       	ret

00000ca6 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord>:

  /////////////////////////////////////////////////////////////////////
  //                            LOG RECORDS                          //
  /////////////////////////////////////////////////////////////////////

  static boolean storeLogRecord(LogRecord &logRecord){ 
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	ec 01       	movw	r28, r24
    boolean storeLog = g_isGrowboxStarted && isBootRecordCorrect() && bootRecord.boolPreferencies.isLoggerEnabled && GB_Storage::isPresent(); // TODO check in another places
     cac:	80 91 fe 01 	lds	r24, 0x01FE
     cb0:	88 23       	and	r24, r24
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0x10>
     cb4:	52 c0       	rjmp	.+164    	; 0xd5a <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb4>
  }

private :

  static boolean isBootRecordCorrect(){ // TODO rename it
    return (bootRecord.first_magic == MAGIC_NUMBER) && (bootRecord.last_magic == MAGIC_NUMBER);
     cb6:	80 91 ad 02 	lds	r24, 0x02AD
     cba:	90 91 ae 02 	lds	r25, 0x02AE
     cbe:	85 55       	subi	r24, 0x55	; 85
     cc0:	9a 4a       	sbci	r25, 0xAA	; 170
     cc2:	09 f0       	breq	.+2      	; 0xcc6 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0x20>
     cc4:	4a c0       	rjmp	.+148    	; 0xd5a <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb4>
     cc6:	80 91 cb 02 	lds	r24, 0x02CB
     cca:	90 91 cc 02 	lds	r25, 0x02CC
     cce:	85 55       	subi	r24, 0x55	; 85
     cd0:	9a 4a       	sbci	r25, 0xAA	; 170
     cd2:	09 f0       	breq	.+2      	; 0xcd6 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0x30>
     cd4:	42 c0       	rjmp	.+132    	; 0xd5a <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb4>
  /////////////////////////////////////////////////////////////////////
  //                            LOG RECORDS                          //
  /////////////////////////////////////////////////////////////////////

  static boolean storeLogRecord(LogRecord &logRecord){ 
    boolean storeLog = g_isGrowboxStarted && isBootRecordCorrect() && bootRecord.boolPreferencies.isLoggerEnabled && GB_Storage::isPresent(); // TODO check in another places
     cd6:	80 91 b9 02 	lds	r24, 0x02B9
     cda:	86 95       	lsr	r24
     cdc:	83 70       	andi	r24, 0x03	; 3
     cde:	e9 f1       	breq	.+122    	; 0xd5a <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb4>
  static const int AT24C32 = 0x50; // External EEPROM I2C address
public:
  static const word CAPACITY = 0x1000; // 4K byte = 32K bit

  static boolean isPresent(void) {     // check if the device is present
    Wire.beginTransmission(AT24C32);
     ce0:	83 eb       	ldi	r24, 0xB3	; 179
     ce2:	93 e0       	ldi	r25, 0x03	; 3
     ce4:	60 e5       	ldi	r22, 0x50	; 80
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	0e 94 80 24 	call	0x4900	; 0x4900 <_ZN7TwoWire17beginTransmissionEi>
    if (Wire.endTransmission() == 0)
     cec:	83 eb       	ldi	r24, 0xB3	; 179
     cee:	93 e0       	ldi	r25, 0x03	; 3
     cf0:	0e 94 45 25 	call	0x4a8a	; 0x4a8a <_ZN7TwoWire15endTransmissionEv>
     cf4:	88 23       	and	r24, r24
     cf6:	89 f5       	brne	.+98     	; 0xd5a <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb4>
    if (!storeLog){
      return false;
    }
    GB_Storage::write(bootRecord.nextLogRecordAddress, &logRecord, sizeof(LogRecord));
     cf8:	80 91 b7 02 	lds	r24, 0x02B7
     cfc:	90 91 b8 02 	lds	r25, 0x02B8
     d00:	be 01       	movw	r22, r28
     d02:	45 e0       	ldi	r20, 0x05	; 5
     d04:	0e 94 0c 06 	call	0xc18	; 0xc18 <_ZN10GB_Storage5writeEjPKvh>
  static boolean isBootRecordCorrect(){ // TODO rename it
    return (bootRecord.first_magic == MAGIC_NUMBER) && (bootRecord.last_magic == MAGIC_NUMBER);
  }

  static void increaseLogPointer(){
    bootRecord.nextLogRecordAddress += sizeof(LogRecord); 
     d08:	80 91 b7 02 	lds	r24, 0x02B7
     d0c:	90 91 b8 02 	lds	r25, 0x02B8
     d10:	05 96       	adiw	r24, 0x05	; 5
     d12:	90 93 b8 02 	sts	0x02B8, r25
     d16:	80 93 b7 02 	sts	0x02B7, r24
    if (bootRecord.nextLogRecordAddress >= (sizeof(BootRecord) + LOG_RECORD_OVERFLOW_OFFSET)){
     d1a:	8c 5f       	subi	r24, 0xFC	; 252
     d1c:	9f 40       	sbci	r25, 0x0F	; 15
     d1e:	a0 f0       	brcs	.+40     	; 0xd48 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xa2>
      bootRecord.nextLogRecordAddress = sizeof(BootRecord);
     d20:	80 e2       	ldi	r24, 0x20	; 32
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	90 93 b8 02 	sts	0x02B8, r25
     d28:	80 93 b7 02 	sts	0x02B7, r24
      if (!bootRecord.boolPreferencies.isLogOverflow){
     d2c:	80 91 b9 02 	lds	r24, 0x02B9
     d30:	80 fd       	sbrc	r24, 0
     d32:	0a c0       	rjmp	.+20     	; 0xd48 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xa2>
        bootRecord.boolPreferencies.isLogOverflow = true;
     d34:	81 60       	ori	r24, 0x01	; 1
     d36:	80 93 b9 02 	sts	0x02B9, r24
        GB_Storage::write(OFFSETOF(BootRecord, boolPreferencies), &(bootRecord.boolPreferencies), sizeof(bootRecord.boolPreferencies)); 
     d3a:	8c e0       	ldi	r24, 0x0C	; 12
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	69 eb       	ldi	r22, 0xB9	; 185
     d40:	72 e0       	ldi	r23, 0x02	; 2
     d42:	41 e0       	ldi	r20, 0x01	; 1
     d44:	0e 94 0c 06 	call	0xc18	; 0xc18 <_ZN10GB_Storage5writeEjPKvh>
      }
    }
    GB_Storage::write(OFFSETOF(BootRecord, nextLogRecordAddress), &(bootRecord.nextLogRecordAddress), sizeof(bootRecord.nextLogRecordAddress)); 
     d48:	8a e0       	ldi	r24, 0x0A	; 10
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	67 eb       	ldi	r22, 0xB7	; 183
     d4e:	72 e0       	ldi	r23, 0x02	; 2
     d50:	42 e0       	ldi	r20, 0x02	; 2
     d52:	0e 94 0c 06 	call	0xc18	; 0xc18 <_ZN10GB_Storage5writeEjPKvh>
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	01 c0       	rjmp	.+2      	; 0xd5c <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb6>
    if (!storeLog){
      return false;
    }
    GB_Storage::write(bootRecord.nextLogRecordAddress, &logRecord, sizeof(LogRecord));
    increaseLogPointer();
    return true;
     d5a:	80 e0       	ldi	r24, 0x00	; 0
  }
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	08 95       	ret

00000d62 <_ZN10GB_Storage4readEj>:
    Wire.write(data);
    Wire.endTransmission();  
    delay(10);  // http://www.hobbytronics.co.uk/arduino-external-eeprom
  }

  static byte read(word address) {
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	8c 01       	movw	r16, r24
    Wire.beginTransmission(AT24C32);
     d68:	83 eb       	ldi	r24, 0xB3	; 179
     d6a:	93 e0       	ldi	r25, 0x03	; 3
     d6c:	60 e5       	ldi	r22, 0x50	; 80
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	0e 94 80 24 	call	0x4900	; 0x4900 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((byte)(address >> 8)); // MSB
     d74:	83 eb       	ldi	r24, 0xB3	; 179
     d76:	93 e0       	ldi	r25, 0x03	; 3
     d78:	61 2f       	mov	r22, r17
     d7a:	0e 94 02 25 	call	0x4a04	; 0x4a04 <_ZN7TwoWire5writeEh>
    Wire.write((byte)(address & 0xFF)); // LSB
     d7e:	83 eb       	ldi	r24, 0xB3	; 179
     d80:	93 e0       	ldi	r25, 0x03	; 3
     d82:	60 2f       	mov	r22, r16
     d84:	0e 94 02 25 	call	0x4a04	; 0x4a04 <_ZN7TwoWire5writeEh>
    Wire.endTransmission();
     d88:	83 eb       	ldi	r24, 0xB3	; 179
     d8a:	93 e0       	ldi	r25, 0x03	; 3
     d8c:	0e 94 45 25 	call	0x4a8a	; 0x4a8a <_ZN7TwoWire15endTransmissionEv>
    delay(10);  // http://www.hobbytronics.co.uk/arduino-external-eeprom
     d90:	6a e0       	ldi	r22, 0x0A	; 10
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	0e 94 6f 2f 	call	0x5ede	; 0x5ede <delay>
    Wire.requestFrom(AT24C32, 1);
     d9c:	83 eb       	ldi	r24, 0xB3	; 179
     d9e:	93 e0       	ldi	r25, 0x03	; 3
     da0:	60 e5       	ldi	r22, 0x50	; 80
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	41 e0       	ldi	r20, 0x01	; 1
     da6:	50 e0       	ldi	r21, 0x00	; 0
     da8:	0e 94 56 25 	call	0x4aac	; 0x4aac <_ZN7TwoWire11requestFromEii>
    if (Wire.available()) {
     dac:	83 eb       	ldi	r24, 0xB3	; 179
     dae:	93 e0       	ldi	r25, 0x03	; 3
     db0:	0e 94 8a 24 	call	0x4914	; 0x4914 <_ZN7TwoWire9availableEv>
     db4:	89 2b       	or	r24, r25
     db6:	11 f4       	brne	.+4      	; 0xdbc <_ZN10GB_Storage4readEj+0x5a>
     db8:	8f ef       	ldi	r24, 0xFF	; 255
     dba:	04 c0       	rjmp	.+8      	; 0xdc4 <_ZN10GB_Storage4readEj+0x62>
      return Wire.read();
     dbc:	83 eb       	ldi	r24, 0xB3	; 179
     dbe:	93 e0       	ldi	r25, 0x03	; 3
     dc0:	0e 94 93 24 	call	0x4926	; 0x4926 <_ZN7TwoWire4readEv>
    } 
    else {
      return 0xFF;
    }
  }
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	08 95       	ret

00000dca <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>:
    Serial.print(data);
    sendWifiFrameStop();
  }


  static void sendWifiFrameStart(const byte portDescriptor, word length){ // 1024 bytes max (Wi-Fi module restriction)   
     dca:	df 92       	push	r13
     dcc:	ef 92       	push	r14
     dce:	ff 92       	push	r15
     dd0:	0f 93       	push	r16
     dd2:	1f 93       	push	r17
     dd4:	d8 2e       	mov	r13, r24
     dd6:	7b 01       	movw	r14, r22
    Serial.print(F("at+send_data="));
     dd8:	0f eb       	ldi	r16, 0xBF	; 191
     dda:	14 e0       	ldi	r17, 0x04	; 4
     ddc:	c8 01       	movw	r24, r16
     dde:	6a ea       	ldi	r22, 0xAA	; 170
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	0e 94 a4 33 	call	0x6748	; 0x6748 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(portDescriptor);
     de6:	c8 01       	movw	r24, r16
     de8:	6d 2d       	mov	r22, r13
     dea:	4a e0       	ldi	r20, 0x0A	; 10
     dec:	50 e0       	ldi	r21, 0x00	; 0
     dee:	0e 94 a3 34 	call	0x6946	; 0x6946 <_ZN5Print5printEhi>
    Serial.print(',');
     df2:	c8 01       	movw	r24, r16
     df4:	6c e2       	ldi	r22, 0x2C	; 44
     df6:	0e 94 c7 33 	call	0x678e	; 0x678e <_ZN5Print5printEc>
    Serial.print(length);
     dfa:	c8 01       	movw	r24, r16
     dfc:	b7 01       	movw	r22, r14
     dfe:	4a e0       	ldi	r20, 0x0A	; 10
     e00:	50 e0       	ldi	r21, 0x00	; 0
     e02:	0e 94 92 34 	call	0x6924	; 0x6924 <_ZN5Print5printEji>
    Serial.print(',');
     e06:	c8 01       	movw	r24, r16
     e08:	6c e2       	ldi	r22, 0x2C	; 44
     e0a:	0e 94 c7 33 	call	0x678e	; 0x678e <_ZN5Print5printEc>
  }
     e0e:	1f 91       	pop	r17
     e10:	0f 91       	pop	r16
     e12:	ff 90       	pop	r15
     e14:	ef 90       	pop	r14
     e16:	df 90       	pop	r13
     e18:	08 95       	ret

00000e1a <_ZL21printFatalErrorOnBootPK19__FlashStringHelper>:
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	ec 01       	movw	r28, r24
     e20:	80 91 7d 02 	lds	r24, 0x027D
     e24:	88 23       	and	r24, r24
     e26:	59 f0       	breq	.+22     	; 0xe3e <_ZL21printFatalErrorOnBootPK19__FlashStringHelper+0x24>
     e28:	8f eb       	ldi	r24, 0xBF	; 191
     e2a:	94 e0       	ldi	r25, 0x04	; 4
     e2c:	62 e8       	ldi	r22, 0x82	; 130
     e2e:	76 e0       	ldi	r23, 0x06	; 6
     e30:	0e 94 a4 33 	call	0x6748	; 0x6748 <_ZN5Print5printEPK19__FlashStringHelper>
     e34:	8f eb       	ldi	r24, 0xBF	; 191
     e36:	94 e0       	ldi	r25, 0x04	; 4
     e38:	be 01       	movw	r22, r28
     e3a:	0e 94 ef 33 	call	0x67de	; 0x67de <_ZN5Print7printlnEPK19__FlashStringHelper>
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	08 95       	ret

00000e44 <_ZL17printStatusOnBootPK19__FlashStringHelper>:
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	ec 01       	movw	r28, r24
     e4a:	80 91 7d 02 	lds	r24, 0x027D
     e4e:	88 23       	and	r24, r24
     e50:	89 f0       	breq	.+34     	; 0xe74 <_ZL17printStatusOnBootPK19__FlashStringHelper+0x30>
     e52:	8f eb       	ldi	r24, 0xBF	; 191
     e54:	94 e0       	ldi	r25, 0x04	; 4
     e56:	64 e9       	ldi	r22, 0x94	; 148
     e58:	76 e0       	ldi	r23, 0x06	; 6
     e5a:	0e 94 a4 33 	call	0x6748	; 0x6748 <_ZN5Print5printEPK19__FlashStringHelper>
     e5e:	8f eb       	ldi	r24, 0xBF	; 191
     e60:	94 e0       	ldi	r25, 0x04	; 4
     e62:	be 01       	movw	r22, r28
     e64:	0e 94 a4 33 	call	0x6748	; 0x6748 <_ZN5Print5printEPK19__FlashStringHelper>
     e68:	8f eb       	ldi	r24, 0xBF	; 191
     e6a:	94 e0       	ldi	r25, 0x04	; 4
     e6c:	60 e9       	ldi	r22, 0x90	; 144
     e6e:	76 e0       	ldi	r23, 0x06	; 6
     e70:	0e 94 ef 33 	call	0x67de	; 0x67de <_ZN5Print7printlnEPK19__FlashStringHelper>
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	08 95       	ret

00000e7a <_ZN15GB_SerialHelper24readByteFromSerialBufferERh>:

  /////////////////////////////////////////////////////////////////////
  //                          SERIAL READ                            //
  /////////////////////////////////////////////////////////////////////

  static byte readByteFromSerialBuffer(boolean &isError){
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
     e7e:	ec 01       	movw	r28, r24
    if (Serial.available()){
     e80:	8f eb       	ldi	r24, 0xBF	; 191
     e82:	94 e0       	ldi	r25, 0x04	; 4
     e84:	0e 94 69 32 	call	0x64d2	; 0x64d2 <_ZN14HardwareSerial9availableEv>
     e88:	89 2b       	or	r24, r25
     e8a:	59 f0       	breq	.+22     	; 0xea2 <_ZN15GB_SerialHelper24readByteFromSerialBufferERh+0x28>
      delay(5);
     e8c:	65 e0       	ldi	r22, 0x05	; 5
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	0e 94 6f 2f 	call	0x5ede	; 0x5ede <delay>
      return Serial.read();
     e98:	8f eb       	ldi	r24, 0xBF	; 191
     e9a:	94 e0       	ldi	r25, 0x04	; 4
     e9c:	0e 94 9a 32 	call	0x6534	; 0x6534 <_ZN14HardwareSerial4readEv>
     ea0:	03 c0       	rjmp	.+6      	; 0xea8 <_ZN15GB_SerialHelper24readByteFromSerialBufferERh+0x2e>
    } 
    else {
      isError = true;
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	88 83       	st	Y, r24
     ea6:	8f ef       	ldi	r24, 0xFF	; 255
      return 0xFF;
    } 
  }
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	08 95       	ret

00000eae <_ZN15GB_SerialHelper17cleanSerialBufferEv>:
    }
    isError = ((index) == length); 
  }

  static void cleanSerialBuffer(){
    delay(10);
     eae:	6a e0       	ldi	r22, 0x0A	; 10
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0e 94 6f 2f 	call	0x5ede	; 0x5ede <delay>
     eba:	04 c0       	rjmp	.+8      	; 0xec4 <_ZN15GB_SerialHelper17cleanSerialBufferEv+0x16>
    while (Serial.available()){
      Serial.read();
     ebc:	8f eb       	ldi	r24, 0xBF	; 191
     ebe:	94 e0       	ldi	r25, 0x04	; 4
     ec0:	0e 94 9a 32 	call	0x6534	; 0x6534 <_ZN14HardwareSerial4readEv>
    isError = ((index) == length); 
  }

  static void cleanSerialBuffer(){
    delay(10);
    while (Serial.available()){
     ec4:	8f eb       	ldi	r24, 0xBF	; 191
     ec6:	94 e0       	ldi	r25, 0x04	; 4
     ec8:	0e 94 69 32 	call	0x64d2	; 0x64d2 <_ZN14HardwareSerial9availableEv>
     ecc:	89 2b       	or	r24, r25
     ece:	b1 f7       	brne	.-20     	; 0xebc <_ZN15GB_SerialHelper17cleanSerialBufferEv+0xe>
      Serial.read();
    }
  }
     ed0:	08 95       	ret

00000ed2 <_ZN15GB_SerialHelper13printDirtyEndEv>:
  static /*volatile*/ boolean useSerialMonitor;
  static /*volatile*/ boolean useSerialWifi;


  static void printDirtyEnd(){
    if (useSerialWifi) {
     ed2:	80 91 7e 02 	lds	r24, 0x027E
     ed6:	88 23       	and	r24, r24
     ed8:	11 f0       	breq	.+4      	; 0xede <_ZN15GB_SerialHelper13printDirtyEndEv+0xc>
      cleanSerialBuffer();
     eda:	0e 94 57 07 	call	0xeae	; 0xeae <_ZN15GB_SerialHelper17cleanSerialBufferEv>
     ede:	08 95       	ret

00000ee0 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>:
  }


private:

  static void showWifiStatus(const __FlashStringHelper* str, boolean newLine = true){ //TODO 
     ee0:	1f 93       	push	r17
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	ec 01       	movw	r28, r24
     ee8:	16 2f       	mov	r17, r22
    if (useSerialMonitor){
     eea:	80 91 7d 02 	lds	r24, 0x027D
     eee:	88 23       	and	r24, r24
     ef0:	79 f0       	breq	.+30     	; 0xf10 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh+0x30>
      Serial.print(FS(S_WIFI));
     ef2:	8f eb       	ldi	r24, 0xBF	; 191
     ef4:	94 e0       	ldi	r25, 0x04	; 4
     ef6:	6a ed       	ldi	r22, 0xDA	; 218
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	0e 94 a4 33 	call	0x6748	; 0x6748 <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.println(str);
     efe:	8f eb       	ldi	r24, 0xBF	; 191
     f00:	94 e0       	ldi	r25, 0x04	; 4
     f02:	be 01       	movw	r22, r28
     f04:	0e 94 ef 33 	call	0x67de	; 0x67de <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (newLine){    
     f08:	11 23       	and	r17, r17
     f0a:	11 f0       	breq	.+4      	; 0xf10 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh+0x30>
        printDirtyEnd();
     f0c:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN15GB_SerialHelper13printDirtyEndEv>
      }
    }
  }
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	1f 91       	pop	r17
     f16:	08 95       	ret

00000f18 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih>:
    }

    return false;
  }

  static String wifiExecuteRawCommand(const __FlashStringHelper* command = 0, int maxResponseDeleay = -1, boolean rebootOnFalse = true){
     f18:	bf 92       	push	r11
     f1a:	cf 92       	push	r12
     f1c:	df 92       	push	r13
     f1e:	ef 92       	push	r14
     f20:	ff 92       	push	r15
     f22:	0f 93       	push	r16
     f24:	1f 93       	push	r17
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	0f 92       	push	r0
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	d8 2e       	mov	r13, r24
     f32:	c9 2e       	mov	r12, r25
     f34:	7a 01       	movw	r14, r20
     f36:	b2 2e       	mov	r11, r18
    if (command == 0){
     f38:	61 15       	cp	r22, r1
     f3a:	71 05       	cpc	r23, r1
     f3c:	29 f4       	brne	.+10     	; 0xf48 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih+0x30>
      Serial.println();
     f3e:	8f eb       	ldi	r24, 0xBF	; 191
     f40:	94 e0       	ldi	r25, 0x04	; 4
     f42:	0e 94 cf 33 	call	0x679e	; 0x679e <_ZN5Print7printlnEv>
     f46:	04 c0       	rjmp	.+8      	; 0xf50 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih+0x38>
    } 
    else {
      Serial.println(command);
     f48:	8f eb       	ldi	r24, 0xBF	; 191
     f4a:	94 e0       	ldi	r25, 0x04	; 4
     f4c:	0e 94 ef 33 	call	0x67de	; 0x67de <_ZN5Print7printlnEPK19__FlashStringHelper>
    }

    if (maxResponseDeleay < 0){
     f50:	f7 fe       	sbrs	r15, 7
     f52:	04 c0       	rjmp	.+8      	; 0xf5c <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih+0x44>
     f54:	88 e8       	ldi	r24, 0x88	; 136
     f56:	e8 2e       	mov	r14, r24
     f58:	83 e1       	ldi	r24, 0x13	; 19
     f5a:	f8 2e       	mov	r15, r24
     f5c:	00 e0       	ldi	r16, 0x00	; 0
     f5e:	10 e0       	ldi	r17, 0x00	; 0
      maxResponseDeleay = WIFI_RESPONSE_DELAY_MAX;
    }    

    for (int i=0; i <= maxResponseDeleay; i += WIFI_RESPONSE_CHECK_INTERVAL){
      delay(WIFI_RESPONSE_CHECK_INTERVAL);
     f60:	6a e0       	ldi	r22, 0x0A	; 10
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0e 94 6f 2f 	call	0x5ede	; 0x5ede <delay>
      if (Serial.available()){
     f6c:	8f eb       	ldi	r24, 0xBF	; 191
     f6e:	94 e0       	ldi	r25, 0x04	; 4
     f70:	0e 94 69 32 	call	0x64d2	; 0x64d2 <_ZN14HardwareSerial9availableEv>
     f74:	89 2b       	or	r24, r25
     f76:	29 f4       	brne	.+10     	; 0xf82 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih+0x6a>

    if (maxResponseDeleay < 0){
      maxResponseDeleay = WIFI_RESPONSE_DELAY_MAX;
    }    

    for (int i=0; i <= maxResponseDeleay; i += WIFI_RESPONSE_CHECK_INTERVAL){
     f78:	06 5f       	subi	r16, 0xF6	; 246
     f7a:	1f 4f       	sbci	r17, 0xFF	; 255
     f7c:	e0 16       	cp	r14, r16
     f7e:	f1 06       	cpc	r15, r17
     f80:	7c f7       	brge	.-34     	; 0xf60 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih+0x48>
      if (Serial.available()){
        break;
      }
    }

    boolean isReadError = false;
     f82:	19 82       	std	Y+1, r1	; 0x01
    String input;
     f84:	0d 2d       	mov	r16, r13
     f86:	1c 2d       	mov	r17, r12
     f88:	c8 01       	movw	r24, r16
     f8a:	6b e2       	ldi	r22, 0x2B	; 43
     f8c:	71 e0       	ldi	r23, 0x01	; 1
     f8e:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
    while (Serial.available()){
      input += (char) readByteFromSerialBuffer(isReadError);
     f92:	7e 01       	movw	r14, r28
     f94:	08 94       	sec
     f96:	e1 1c       	adc	r14, r1
     f98:	f1 1c       	adc	r15, r1
     f9a:	07 c0       	rjmp	.+14     	; 0xfaa <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih+0x92>
     f9c:	c7 01       	movw	r24, r14
     f9e:	0e 94 3d 07 	call	0xe7a	; 0xe7a <_ZN15GB_SerialHelper24readByteFromSerialBufferERh>
     fa2:	68 2f       	mov	r22, r24
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
     fa4:	c8 01       	movw	r24, r16
     fa6:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <_ZN6String6concatEc>
      }
    }

    boolean isReadError = false;
    String input;
    while (Serial.available()){
     faa:	8f eb       	ldi	r24, 0xBF	; 191
     fac:	94 e0       	ldi	r25, 0x04	; 4
     fae:	0e 94 69 32 	call	0x64d2	; 0x64d2 <_ZN14HardwareSerial9availableEv>
     fb2:	89 2b       	or	r24, r25
     fb4:	99 f7       	brne	.-26     	; 0xf9c <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih+0x84>
      input += (char) readByteFromSerialBuffer(isReadError);
    }

    if (input.length() == 0){
     fb6:	f8 01       	movw	r30, r16
     fb8:	84 81       	ldd	r24, Z+4	; 0x04
     fba:	95 81       	ldd	r25, Z+5	; 0x05
     fbc:	89 2b       	or	r24, r25
     fbe:	d1 f4       	brne	.+52     	; 0xff4 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih+0xdc>
      if (useSerialMonitor){   
     fc0:	80 91 7d 02 	lds	r24, 0x027D
     fc4:	88 23       	and	r24, r24
     fc6:	29 f0       	breq	.+10     	; 0xfd2 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih+0xba>
        showWifiStatus(F("No response"), false);
     fc8:	8e ec       	ldi	r24, 0xCE	; 206
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	60 e0       	ldi	r22, 0x00	; 0
     fce:	0e 94 70 07 	call	0xee0	; 0xee0 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>

      }
      if (rebootOnFalse){
     fd2:	bb 20       	and	r11, r11
     fd4:	49 f0       	breq	.+18     	; 0xfe8 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih+0xd0>
        Serial.print(F(" (reboot)"));
     fd6:	8f eb       	ldi	r24, 0xBF	; 191
     fd8:	94 e0       	ldi	r25, 0x04	; 4
     fda:	64 ec       	ldi	r22, 0xC4	; 196
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	0e 94 a4 33 	call	0x6748	; 0x6748 <_ZN5Print5printEPK19__FlashStringHelper>
        s_restartWifi = true;
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	80 93 7f 02 	sts	0x027F, r24
      } 
      Serial.println();
     fe8:	8f eb       	ldi	r24, 0xBF	; 191
     fea:	94 e0       	ldi	r25, 0x04	; 4
     fec:	0e 94 cf 33 	call	0x679e	; 0x679e <_ZN5Print7printlnEv>
      printDirtyEnd();
     ff0:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN15GB_SerialHelper13printDirtyEndEv>
    }

    return input;
  }
     ff4:	8d 2d       	mov	r24, r13
     ff6:	9c 2d       	mov	r25, r12
     ff8:	0f 90       	pop	r0
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	1f 91       	pop	r17
    1000:	0f 91       	pop	r16
    1002:	ff 90       	pop	r15
    1004:	ef 90       	pop	r14
    1006:	df 90       	pop	r13
    1008:	cf 90       	pop	r12
    100a:	bf 90       	pop	r11
    100c:	08 95       	ret

0000100e <_ZN13GB_PrintDirty16printWithoutCRLFERK6String>:
        Serial.print(' '); 
      }
    }
  }  

  static void printWithoutCRLF(const String &input){   
    100e:	0f 93       	push	r16
    1010:	1f 93       	push	r17
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	8c 01       	movw	r16, r24
    1018:	c0 e0       	ldi	r28, 0x00	; 0
    101a:	d0 e0       	ldi	r29, 0x00	; 0
    101c:	22 c0       	rjmp	.+68     	; 0x1062 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x54>
    for (int i = 0; i<input.length(); i++){
      if (input[i] == '\r'){
    101e:	c8 01       	movw	r24, r16
    1020:	be 01       	movw	r22, r28
    1022:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <_ZNK6StringixEj>
    1026:	8d 30       	cpi	r24, 0x0D	; 13
    1028:	29 f4       	brne	.+10     	; 0x1034 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x26>
        Serial.print(F("\\r"));
    102a:	8f eb       	ldi	r24, 0xBF	; 191
    102c:	94 e0       	ldi	r25, 0x04	; 4
    102e:	64 ee       	ldi	r22, 0xE4	; 228
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	0a c0       	rjmp	.+20     	; 0x1048 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x3a>
      } 
      else if (input[i] == '\n'){
    1034:	c8 01       	movw	r24, r16
    1036:	be 01       	movw	r22, r28
    1038:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <_ZNK6StringixEj>
    103c:	8a 30       	cpi	r24, 0x0A	; 10
    103e:	39 f4       	brne	.+14     	; 0x104e <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x40>
        Serial.print(F("\\n"));
    1040:	8f eb       	ldi	r24, 0xBF	; 191
    1042:	94 e0       	ldi	r25, 0x04	; 4
    1044:	61 ee       	ldi	r22, 0xE1	; 225
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	0e 94 a4 33 	call	0x6748	; 0x6748 <_ZN5Print5printEPK19__FlashStringHelper>
    104c:	09 c0       	rjmp	.+18     	; 0x1060 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x52>
      } 
      else {
        Serial.print(input[i]);
    104e:	c8 01       	movw	r24, r16
    1050:	be 01       	movw	r22, r28
    1052:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <_ZNK6StringixEj>
    1056:	68 2f       	mov	r22, r24
    1058:	8f eb       	ldi	r24, 0xBF	; 191
    105a:	94 e0       	ldi	r25, 0x04	; 4
    105c:	0e 94 c7 33 	call	0x678e	; 0x678e <_ZN5Print5printEc>
      }
    }
  }  

  static void printWithoutCRLF(const String &input){   
    for (int i = 0; i<input.length(); i++){
    1060:	21 96       	adiw	r28, 0x01	; 1
    1062:	f8 01       	movw	r30, r16
    1064:	84 81       	ldd	r24, Z+4	; 0x04
    1066:	95 81       	ldd	r25, Z+5	; 0x05
    1068:	c8 17       	cp	r28, r24
    106a:	d9 07       	cpc	r29, r25
    106c:	c0 f2       	brcs	.-80     	; 0x101e <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x10>
      } 
      else {
        Serial.print(input[i]);
      }
    }
  }
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	08 95       	ret

00001078 <_ZL15flashStringLoadPK19__FlashStringHelper>:
    }
  }
  return true;
}

static String flashStringLoad(const __FlashStringHelper* fstr){ 
    1078:	cf 92       	push	r12
    107a:	df 92       	push	r13
    107c:	ef 92       	push	r14
    107e:	ff 92       	push	r15
    1080:	0f 93       	push	r16
    1082:	1f 93       	push	r17
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	f8 2e       	mov	r15, r24
    108a:	e9 2e       	mov	r14, r25
    108c:	6b 01       	movw	r12, r22
  String str;
    108e:	6b e2       	ldi	r22, 0x2B	; 43
    1090:	71 e0       	ldi	r23, 0x01	; 1
    1092:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
  HTTP_TAG_OPEN, HTTP_TAG_CLOSED, HTTP_TAG_SINGLE
};

static int flashStringLength(const __FlashStringHelper* fstr){ 
    const char PROGMEM * pstr = (const char PROGMEM *) fstr;
    return strlen_P(pstr);
    1096:	c6 01       	movw	r24, r12
    1098:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <strlen_P>
    109c:	ec 01       	movw	r28, r24
    109e:	00 e0       	ldi	r16, 0x00	; 0
    10a0:	10 e0       	ldi	r17, 0x00	; 0
    10a2:	0b c0       	rjmp	.+22     	; 0x10ba <_ZL15flashStringLoadPK19__FlashStringHelper+0x42>
static char flashStringCharAt(const __FlashStringHelper* fstr, int index){ 
  if (index >= flashStringLength(fstr)){
    return 0xFF; 
  }
  const char PROGMEM * pstr = (const char PROGMEM *) fstr;
  return pgm_read_byte(pstr+index);
    10a4:	f6 01       	movw	r30, r12
    10a6:	e0 0f       	add	r30, r16
    10a8:	f1 1f       	adc	r31, r17
    10aa:	e4 91       	lpm	r30, Z+
    10ac:	8f 2d       	mov	r24, r15
    10ae:	9e 2d       	mov	r25, r14
    10b0:	6e 2f       	mov	r22, r30
    10b2:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <_ZN6String6concatEc>
  return true;
}

static String flashStringLoad(const __FlashStringHelper* fstr){ 
  String str;
  for (int i = 0; i< flashStringLength(fstr); i++){
    10b6:	0f 5f       	subi	r16, 0xFF	; 255
    10b8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ba:	0c 17       	cp	r16, r28
    10bc:	1d 07       	cpc	r17, r29
    10be:	94 f3       	brlt	.-28     	; 0x10a4 <_ZL15flashStringLoadPK19__FlashStringHelper+0x2c>
    str += flashStringCharAt(fstr, i);
  }
  return str;
}
    10c0:	8f 2d       	mov	r24, r15
    10c2:	9e 2d       	mov	r25, r14
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	1f 91       	pop	r17
    10ca:	0f 91       	pop	r16
    10cc:	ff 90       	pop	r15
    10ce:	ef 90       	pop	r14
    10d0:	df 90       	pop	r13
    10d2:	cf 90       	pop	r12
    10d4:	08 95       	ret

000010d6 <_ZN13GB_PrintDirty6getHEXEhh>:
    }
    out += number;
    return out.substring(out.length()-numberOfDigits);
  }

  static String getHEX(byte number, boolean addPrefix = false){
    10d6:	bf 92       	push	r11
    10d8:	cf 92       	push	r12
    10da:	df 92       	push	r13
    10dc:	ef 92       	push	r14
    10de:	ff 92       	push	r15
    10e0:	0f 93       	push	r16
    10e2:	1f 93       	push	r17
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	6c 97       	sbiw	r28, 0x1c	; 28
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
    10f8:	d8 2e       	mov	r13, r24
    10fa:	c9 2e       	mov	r12, r25
    10fc:	16 2f       	mov	r17, r22
    10fe:	b4 2e       	mov	r11, r20
    String out(number, HEX);
    1100:	40 e1       	ldi	r20, 0x10	; 16
    1102:	0e 94 4b 38 	call	0x7096	; 0x7096 <_ZN6StringC1Ehh>
    out.toUpperCase();
    1106:	8d 2d       	mov	r24, r13
    1108:	9c 2d       	mov	r25, r12
    110a:	0e 94 d0 35 	call	0x6ba0	; 0x6ba0 <_ZN6String11toUpperCaseEv>
    if(number < 0x10){
    110e:	10 31       	cpi	r17, 0x10	; 16
    1110:	f8 f4       	brcc	.+62     	; 0x1150 <_ZN13GB_PrintDirty6getHEXEhh+0x7a>
      out = String('0') + out;
    1112:	7e 01       	movw	r14, r28
    1114:	08 94       	sec
    1116:	e1 1c       	adc	r14, r1
    1118:	f1 1c       	adc	r15, r1
    111a:	c7 01       	movw	r24, r14
    111c:	60 e3       	ldi	r22, 0x30	; 48
    111e:	0e 94 7d 38 	call	0x70fa	; 0x70fa <_ZN6StringC1Ec>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    1122:	8e 01       	movw	r16, r28
    1124:	08 5f       	subi	r16, 0xF8	; 248
    1126:	1f 4f       	sbci	r17, 0xFF	; 255
    1128:	c8 01       	movw	r24, r16
    112a:	b7 01       	movw	r22, r14
    112c:	0e 94 00 39 	call	0x7200	; 0x7200 <_ZN6StringC2ERKS_>
    1130:	c8 01       	movw	r24, r16
    1132:	6d 2d       	mov	r22, r13
    1134:	7c 2d       	mov	r23, r12
    1136:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <_ZplRK15StringSumHelperRK6String>
    113a:	bc 01       	movw	r22, r24
    113c:	8d 2d       	mov	r24, r13
    113e:	9c 2d       	mov	r25, r12
    1140:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <_ZN6StringaSERKS_>
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
{
    1144:	c8 01       	movw	r24, r16
    1146:	0e 94 11 39 	call	0x7222	; 0x7222 <_ZN6StringD2Ev>
    114a:	c7 01       	movw	r24, r14
    114c:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
    }
    if (addPrefix){
    1150:	bb 20       	and	r11, r11
    1152:	09 f1       	breq	.+66     	; 0x1196 <_ZN13GB_PrintDirty6getHEXEhh+0xc0>
      out = String("0x") + out;
    1154:	9f e0       	ldi	r25, 0x0F	; 15
    1156:	e9 2e       	mov	r14, r25
    1158:	f1 2c       	mov	r15, r1
    115a:	ec 0e       	add	r14, r28
    115c:	fd 1e       	adc	r15, r29
    115e:	c7 01       	movw	r24, r14
    1160:	6c e2       	ldi	r22, 0x2C	; 44
    1162:	71 e0       	ldi	r23, 0x01	; 1
    1164:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
public:
	StringSumHelper(const String &s) : String(s) {}
    1168:	8e 01       	movw	r16, r28
    116a:	0a 5e       	subi	r16, 0xEA	; 234
    116c:	1f 4f       	sbci	r17, 0xFF	; 255
    116e:	c8 01       	movw	r24, r16
    1170:	b7 01       	movw	r22, r14
    1172:	0e 94 00 39 	call	0x7200	; 0x7200 <_ZN6StringC2ERKS_>
    1176:	c8 01       	movw	r24, r16
    1178:	6d 2d       	mov	r22, r13
    117a:	7c 2d       	mov	r23, r12
    117c:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <_ZplRK15StringSumHelperRK6String>
    1180:	bc 01       	movw	r22, r24
    1182:	8d 2d       	mov	r24, r13
    1184:	9c 2d       	mov	r25, r12
    1186:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <_ZN6StringaSERKS_>
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
{
    118a:	c8 01       	movw	r24, r16
    118c:	0e 94 11 39 	call	0x7222	; 0x7222 <_ZN6StringD2Ev>
    1190:	c7 01       	movw	r24, r14
    1192:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
    }
    return out;
  }
    1196:	8d 2d       	mov	r24, r13
    1198:	9c 2d       	mov	r25, r12
    119a:	6c 96       	adiw	r28, 0x1c	; 28
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	cd bf       	out	0x3d, r28	; 61
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	1f 91       	pop	r17
    11ac:	0f 91       	pop	r16
    11ae:	ff 90       	pop	r15
    11b0:	ef 90       	pop	r14
    11b2:	df 90       	pop	r13
    11b4:	cf 90       	pop	r12
    11b6:	bf 90       	pop	r11
    11b8:	08 95       	ret

000011ba <_ZN13GB_PrintDirty8printHEXEhh>:
  // utility function for digital clock display: prints preceding colon and leading 0
  static void print2digits(byte number){
    Serial.print(getFixedDigitsString(number, 2));
  }

  static void printHEX(byte number, boolean addPrefix = false){
    11ba:	0f 93       	push	r16
    11bc:	1f 93       	push	r17
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    11c6:	27 97       	sbiw	r28, 0x07	; 7
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	f8 94       	cli
    11cc:	de bf       	out	0x3e, r29	; 62
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	cd bf       	out	0x3d, r28	; 61
    11d2:	68 2f       	mov	r22, r24
    Serial.print(getHEX(number));
    11d4:	8e 01       	movw	r16, r28
    11d6:	0f 5f       	subi	r16, 0xFF	; 255
    11d8:	1f 4f       	sbci	r17, 0xFF	; 255
    11da:	c8 01       	movw	r24, r16
    11dc:	40 e0       	ldi	r20, 0x00	; 0
    11de:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN13GB_PrintDirty6getHEXEhh>
    11e2:	8f eb       	ldi	r24, 0xBF	; 191
    11e4:	94 e0       	ldi	r25, 0x04	; 4
    11e6:	b8 01       	movw	r22, r16
    11e8:	0e 94 08 35 	call	0x6a10	; 0x6a10 <_ZN5Print5printERK6String>
    11ec:	c8 01       	movw	r24, r16
    11ee:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
  }
    11f2:	27 96       	adiw	r28, 0x07	; 7
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	f8 94       	cli
    11f8:	de bf       	out	0x3e, r29	; 62
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	cd bf       	out	0x3d, r28	; 61
    11fe:	cf 91       	pop	r28
    1200:	df 91       	pop	r29
    1202:	1f 91       	pop	r17
    1204:	0f 91       	pop	r16
    1206:	08 95       	ret

00001208 <_ZN13GB_PrintDirty8printHEXERK6String>:


  static void printHEX(const String &input){   
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	8c 01       	movw	r16, r24
    1212:	c0 e0       	ldi	r28, 0x00	; 0
    1214:	d0 e0       	ldi	r29, 0x00	; 0
    1216:	13 c0       	rjmp	.+38     	; 0x123e <_ZN13GB_PrintDirty8printHEXERK6String+0x36>
    for(int i = 0; i<input.length(); i++){
      byte c = input[i];
    1218:	c8 01       	movw	r24, r16
    121a:	be 01       	movw	r22, r28
    121c:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <_ZNK6StringixEj>
      printHEX(c);
    1220:	60 e0       	ldi	r22, 0x00	; 0
    1222:	0e 94 dd 08 	call	0x11ba	; 0x11ba <_ZN13GB_PrintDirty8printHEXEhh>
      if ((i+1)<input.length()) {
    1226:	21 96       	adiw	r28, 0x01	; 1
    1228:	f8 01       	movw	r30, r16
    122a:	84 81       	ldd	r24, Z+4	; 0x04
    122c:	95 81       	ldd	r25, Z+5	; 0x05
    122e:	c8 17       	cp	r28, r24
    1230:	d9 07       	cpc	r29, r25
    1232:	28 f4       	brcc	.+10     	; 0x123e <_ZN13GB_PrintDirty8printHEXERK6String+0x36>
        Serial.print(' '); 
    1234:	8f eb       	ldi	r24, 0xBF	; 191
    1236:	94 e0       	ldi	r25, 0x04	; 4
    1238:	60 e2       	ldi	r22, 0x20	; 32
    123a:	0e 94 c7 33 	call	0x678e	; 0x678e <_ZN5Print5printEc>
    Serial.print(getHEX(number));
  }


  static void printHEX(const String &input){   
    for(int i = 0; i<input.length(); i++){
    123e:	f8 01       	movw	r30, r16
    1240:	84 81       	ldd	r24, Z+4	; 0x04
    1242:	95 81       	ldd	r25, Z+5	; 0x05
    1244:	c8 17       	cp	r28, r24
    1246:	d9 07       	cpc	r29, r25
    1248:	38 f3       	brcs	.-50     	; 0x1218 <_ZN13GB_PrintDirty8printHEXERK6String+0x10>
      printHEX(c);
      if ((i+1)<input.length()) {
        Serial.print(' '); 
      }
    }
  }  
    124a:	df 91       	pop	r29
    124c:	cf 91       	pop	r28
    124e:	1f 91       	pop	r17
    1250:	0f 91       	pop	r16
    1252:	08 95       	ret

00001254 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>:
    }

    return true;
  }

  static boolean wifiExecuteCommand(const __FlashStringHelper* command = 0, int maxResponseDeleay = -1, boolean rebootOnFalse = true){
    1254:	cf 92       	push	r12
    1256:	df 92       	push	r13
    1258:	ef 92       	push	r14
    125a:	ff 92       	push	r15
    125c:	0f 93       	push	r16
    125e:	1f 93       	push	r17
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	65 97       	sbiw	r28, 0x15	; 21
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	cd bf       	out	0x3d, r28	; 61
    1274:	fc 01       	movw	r30, r24
    1276:	db 01       	movw	r26, r22
    1278:	24 2f       	mov	r18, r20
    String input = wifiExecuteRawCommand(command,maxResponseDeleay, rebootOnFalse);
    127a:	7e 01       	movw	r14, r28
    127c:	08 94       	sec
    127e:	e1 1c       	adc	r14, r1
    1280:	f1 1c       	adc	r15, r1
    1282:	c7 01       	movw	r24, r14
    1284:	bf 01       	movw	r22, r30
    1286:	ad 01       	movw	r20, r26
    1288:	0e 94 8c 07 	call	0xf18	; 0xf18 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih>
    if (input.length() == 0){
    128c:	8d 81       	ldd	r24, Y+5	; 0x05
    128e:	9e 81       	ldd	r25, Y+6	; 0x06
    1290:	89 2b       	or	r24, r25
    1292:	09 f4       	brne	.+2      	; 0x1296 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0x42>
    1294:	6b c0       	rjmp	.+214    	; 0x136c <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0x118>
      // Nothing to do
    } 
    else if (input.startsWith(WIFI_RESPONSE_OK) && input.endsWith("\r\n")){
    1296:	c7 01       	movw	r24, r14
    1298:	6f e0       	ldi	r22, 0x0F	; 15
    129a:	72 e0       	ldi	r23, 0x02	; 2
    129c:	0e 94 b3 36 	call	0x6d66	; 0x6d66 <_ZNK6String10startsWithERKS_>
    12a0:	88 23       	and	r24, r24
    12a2:	a1 f0       	breq	.+40     	; 0x12cc <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0x78>
    12a4:	8e 01       	movw	r16, r28
    12a6:	08 5f       	subi	r16, 0xF8	; 248
    12a8:	1f 4f       	sbci	r17, 0xFF	; 255
    12aa:	c8 01       	movw	r24, r16
    12ac:	6f e2       	ldi	r22, 0x2F	; 47
    12ae:	71 e0       	ldi	r23, 0x01	; 1
    12b0:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
    12b4:	c7 01       	movw	r24, r14
    12b6:	b8 01       	movw	r22, r16
    12b8:	0e 94 02 36 	call	0x6c04	; 0x6c04 <_ZNK6String8endsWithERKS_>
    12bc:	f8 2e       	mov	r15, r24
    12be:	c8 01       	movw	r24, r16
    12c0:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
    12c4:	ff 20       	and	r15, r15
    12c6:	11 f0       	breq	.+4      	; 0x12cc <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0x78>
    12c8:	11 e0       	ldi	r17, 0x01	; 1
    12ca:	51 c0       	rjmp	.+162    	; 0x136e <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0x11a>
      return true;
    } 
    else if (input.startsWith(WIFI_RESPONSE_ERROR) && input.endsWith("\r\n")) {
    12cc:	6e 01       	movw	r12, r28
    12ce:	08 94       	sec
    12d0:	c1 1c       	adc	r12, r1
    12d2:	d1 1c       	adc	r13, r1
    12d4:	c6 01       	movw	r24, r12
    12d6:	68 e0       	ldi	r22, 0x08	; 8
    12d8:	72 e0       	ldi	r23, 0x02	; 2
    12da:	0e 94 b3 36 	call	0x6d66	; 0x6d66 <_ZNK6String10startsWithERKS_>
    12de:	88 23       	and	r24, r24
    12e0:	39 f1       	breq	.+78     	; 0x1330 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0xdc>
    12e2:	8e 01       	movw	r16, r28
    12e4:	01 5f       	subi	r16, 0xF1	; 241
    12e6:	1f 4f       	sbci	r17, 0xFF	; 255
    12e8:	c8 01       	movw	r24, r16
    12ea:	6f e2       	ldi	r22, 0x2F	; 47
    12ec:	71 e0       	ldi	r23, 0x01	; 1
    12ee:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
    12f2:	c6 01       	movw	r24, r12
    12f4:	b8 01       	movw	r22, r16
    12f6:	0e 94 02 36 	call	0x6c04	; 0x6c04 <_ZNK6String8endsWithERKS_>
    12fa:	f8 2e       	mov	r15, r24
    12fc:	c8 01       	movw	r24, r16
    12fe:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
    1302:	ff 20       	and	r15, r15
    1304:	a9 f0       	breq	.+42     	; 0x1330 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0xdc>
      if (useSerialMonitor){
    1306:	80 91 7d 02 	lds	r24, 0x027D
    130a:	88 23       	and	r24, r24
    130c:	79 f1       	breq	.+94     	; 0x136c <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0x118>
        byte errorCode = input[5];
    130e:	c6 01       	movw	r24, r12
    1310:	65 e0       	ldi	r22, 0x05	; 5
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <_ZN6StringixEj>
    1318:	fc 01       	movw	r30, r24
    131a:	10 81       	ld	r17, Z
        showWifiStatus(F("error "), false);
    131c:	8d eb       	ldi	r24, 0xBD	; 189
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	60 e0       	ldi	r22, 0x00	; 0
    1322:	0e 94 70 07 	call	0xee0	; 0xee0 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
        GB_PrintDirty::printHEX(errorCode, true);
    1326:	81 2f       	mov	r24, r17
    1328:	61 e0       	ldi	r22, 0x01	; 1
    132a:	0e 94 dd 08 	call	0x11ba	; 0x11ba <_ZN13GB_PrintDirty8printHEXEhh>
    132e:	18 c0       	rjmp	.+48     	; 0x1360 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0x10c>
        Serial.println();
        printDirtyEnd();
      }      
    } 
    else {
      if (useSerialMonitor){
    1330:	80 91 7d 02 	lds	r24, 0x027D
    1334:	88 23       	and	r24, r24
    1336:	d1 f0       	breq	.+52     	; 0x136c <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih+0x118>
        showWifiStatus(FS(S_empty), false);
    1338:	88 eb       	ldi	r24, 0xB8	; 184
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	60 e0       	ldi	r22, 0x00	; 0
    133e:	0e 94 70 07 	call	0xee0	; 0xee0 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
        GB_PrintDirty::printWithoutCRLF(input);
    1342:	8e 01       	movw	r16, r28
    1344:	0f 5f       	subi	r16, 0xFF	; 255
    1346:	1f 4f       	sbci	r17, 0xFF	; 255
    1348:	c8 01       	movw	r24, r16
    134a:	0e 94 07 08 	call	0x100e	; 0x100e <_ZN13GB_PrintDirty16printWithoutCRLFERK6String>
        Serial.print(F(" > "));
    134e:	8f eb       	ldi	r24, 0xBF	; 191
    1350:	94 e0       	ldi	r25, 0x04	; 4
    1352:	69 eb       	ldi	r22, 0xB9	; 185
    1354:	70 e0       	ldi	r23, 0x00	; 0
    1356:	0e 94 a4 33 	call	0x6748	; 0x6748 <_ZN5Print5printEPK19__FlashStringHelper>
        GB_PrintDirty::printHEX(input); 
    135a:	c8 01       	movw	r24, r16
    135c:	0e 94 04 09 	call	0x1208	; 0x1208 <_ZN13GB_PrintDirty8printHEXERK6String>
        Serial.println();
    1360:	8f eb       	ldi	r24, 0xBF	; 191
    1362:	94 e0       	ldi	r25, 0x04	; 4
    1364:	0e 94 cf 33 	call	0x679e	; 0x679e <_ZN5Print7printlnEv>
        printDirtyEnd();
    1368:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN15GB_SerialHelper13printDirtyEndEv>
    136c:	10 e0       	ldi	r17, 0x00	; 0
      }
    }

    return false;
    136e:	ce 01       	movw	r24, r28
    1370:	01 96       	adiw	r24, 0x01	; 1
    1372:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
  }
    1376:	81 2f       	mov	r24, r17
    1378:	65 96       	adiw	r28, 0x15	; 21
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	f8 94       	cli
    137e:	de bf       	out	0x3e, r29	; 62
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	cd bf       	out	0x3d, r28	; 61
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	1f 91       	pop	r17
    138a:	0f 91       	pop	r16
    138c:	ff 90       	pop	r15
    138e:	ef 90       	pop	r14
    1390:	df 90       	pop	r13
    1392:	cf 90       	pop	r12
    1394:	08 95       	ret

00001396 <_ZN15GB_SerialHelper12sendWifiDataEhPK19__FlashStringHelper>:
      }
    }
    return sendWifiFrameStop(false);
  } 

  static void sendWifiData(const byte portDescriptor, const __FlashStringHelper* data){ // INT_MAX (own test) or 1400 bytes max (Wi-Fi spec restriction)
    1396:	1f 93       	push	r17
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
    139c:	18 2f       	mov	r17, r24
    139e:	eb 01       	movw	r28, r22
  HTTP_TAG_OPEN, HTTP_TAG_CLOSED, HTTP_TAG_SINGLE
};

static int flashStringLength(const __FlashStringHelper* fstr){ 
    const char PROGMEM * pstr = (const char PROGMEM *) fstr;
    return strlen_P(pstr);
    13a0:	cb 01       	movw	r24, r22
    13a2:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <strlen_P>
    13a6:	bc 01       	movw	r22, r24
    int length = flashStringLength(data);
    if (length == 0){
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	79 f0       	breq	.+30     	; 0x13ca <_ZN15GB_SerialHelper12sendWifiDataEhPK19__FlashStringHelper+0x34>
      return;
    }
    sendWifiFrameStart(portDescriptor, length);
    13ac:	81 2f       	mov	r24, r17
    13ae:	0e 94 e5 06 	call	0xdca	; 0xdca <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>
    Serial.print(data);
    13b2:	8f eb       	ldi	r24, 0xBF	; 191
    13b4:	94 e0       	ldi	r25, 0x04	; 4
    13b6:	be 01       	movw	r22, r28
    13b8:	0e 94 a4 33 	call	0x6748	; 0x6748 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(length);
    Serial.print(',');
  }

  static boolean sendWifiFrameStop(boolean rebootOnFalse = true){
    return wifiExecuteCommand(0,-1,rebootOnFalse);
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	6f ef       	ldi	r22, 0xFF	; 255
    13c2:	7f ef       	ldi	r23, 0xFF	; 255
    13c4:	41 e0       	ldi	r20, 0x01	; 1
    13c6:	0e 94 2a 09 	call	0x1254	; 0x1254 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
      return;
    }
    sendWifiFrameStart(portDescriptor, length);
    Serial.print(data);
    sendWifiFrameStop();
  }
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	1f 91       	pop	r17
    13d0:	08 95       	ret

000013d2 <_ZN15GB_SerialHelper16sendHttpOKHeaderEh>:
  /////////////////////////////////////////////////////////////////////
  //                            WEB SERVER                           //
  /////////////////////////////////////////////////////////////////////

  static void sendHttpOKHeader(const byte portDescriptor){ 
    sendWifiData(portDescriptor, F("HTTP/1.1 200 OK\r\nConnection: close\r\nContent-Type: text/html\r\n\r\n"));
    13d2:	6a e6       	ldi	r22, 0x6A	; 106
    13d4:	70 e0       	ldi	r23, 0x00	; 0
    13d6:	0e 94 cb 09 	call	0x1396	; 0x1396 <_ZN15GB_SerialHelper12sendWifiDataEhPK19__FlashStringHelper>
  }
    13da:	08 95       	ret

000013dc <_ZN15GB_SerialHelper22sendHttpNotFoundHeaderEh>:

  static void sendHttpNotFoundHeader(const byte portDescriptor){ 
    sendWifiData(portDescriptor, F("HTTP/1.1 404 Not Found\r\nConnection: close\r\n\r\n"));
    13dc:	61 ed       	ldi	r22, 0xD1	; 209
    13de:	75 e0       	ldi	r23, 0x05	; 5
    13e0:	0e 94 cb 09 	call	0x1396	; 0x1396 <_ZN15GB_SerialHelper12sendWifiDataEhPK19__FlashStringHelper>
     Serial.print(',');
     Serial.print(code); 
     Serial.print(F(",0")); //length of data
     return wifiExecuteCommand(); 
     */
  }
    13e4:	08 95       	ret

000013e6 <_ZN15GB_SerialHelper15startWifiSilentEv>:
  //                             Wi-FI DEVICE                        //
  /////////////////////////////////////////////////////////////////////

  static boolean startWifiSilent(){

    cleanSerialBuffer();
    13e6:	0e 94 57 07 	call	0xeae	; 0xeae <_ZN15GB_SerialHelper17cleanSerialBufferEv>

    if (!wifiExecuteCommand(F("at+scan=0"))){
    13ea:	89 e4       	ldi	r24, 0x49	; 73
    13ec:	92 e0       	ldi	r25, 0x02	; 2
    13ee:	6f ef       	ldi	r22, 0xFF	; 255
    13f0:	7f ef       	ldi	r23, 0xFF	; 255
    13f2:	41 e0       	ldi	r20, 0x01	; 1
    13f4:	0e 94 2a 09 	call	0x1254	; 0x1254 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
    13f8:	88 23       	and	r24, r24
    13fa:	09 f4       	brne	.+2      	; 0x13fe <_ZN15GB_SerialHelper15startWifiSilentEv+0x18>
    13fc:	69 c0       	rjmp	.+210    	; 0x14d0 <_ZN15GB_SerialHelper15startWifiSilentEv+0xea>
      return false;
    } 

    boolean isStationMode = (s_wifiSID.length()>0);    
    if (isStationMode){
    13fe:	80 91 84 02 	lds	r24, 0x0284
    1402:	90 91 85 02 	lds	r25, 0x0285
    1406:	89 2b       	or	r24, r25
    1408:	a1 f1       	breq	.+104    	; 0x1472 <_ZN15GB_SerialHelper15startWifiSilentEv+0x8c>
      if (s_wifiPass.length() > 0){
    140a:	80 91 8b 02 	lds	r24, 0x028B
    140e:	90 91 8c 02 	lds	r25, 0x028C
    1412:	89 2b       	or	r24, r25
    1414:	b1 f0       	breq	.+44     	; 0x1442 <_ZN15GB_SerialHelper15startWifiSilentEv+0x5c>
        Serial.print(F("at+psk="));
    1416:	8f eb       	ldi	r24, 0xBF	; 191
    1418:	94 e0       	ldi	r25, 0x04	; 4
    141a:	61 e4       	ldi	r22, 0x41	; 65
    141c:	72 e0       	ldi	r23, 0x02	; 2
    141e:	0e 94 a4 33 	call	0x6748	; 0x6748 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.print(s_wifiPass);
    1422:	8f eb       	ldi	r24, 0xBF	; 191
    1424:	94 e0       	ldi	r25, 0x04	; 4
    1426:	67 e8       	ldi	r22, 0x87	; 135
    1428:	72 e0       	ldi	r23, 0x02	; 2
    142a:	0e 94 08 35 	call	0x6a10	; 0x6a10 <_ZN5Print5printERK6String>
        if (!wifiExecuteCommand()){
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	6f ef       	ldi	r22, 0xFF	; 255
    1434:	7f ef       	ldi	r23, 0xFF	; 255
    1436:	41 e0       	ldi	r20, 0x01	; 1
    1438:	0e 94 2a 09 	call	0x1254	; 0x1254 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
    143c:	88 23       	and	r24, r24
    143e:	09 f4       	brne	.+2      	; 0x1442 <_ZN15GB_SerialHelper15startWifiSilentEv+0x5c>
    1440:	47 c0       	rjmp	.+142    	; 0x14d0 <_ZN15GB_SerialHelper15startWifiSilentEv+0xea>
          return false;
        }
      } 

      Serial.print(F("at+connect="));
    1442:	8f eb       	ldi	r24, 0xBF	; 191
    1444:	94 e0       	ldi	r25, 0x04	; 4
    1446:	65 e3       	ldi	r22, 0x35	; 53
    1448:	72 e0       	ldi	r23, 0x02	; 2
    144a:	0e 94 a4 33 	call	0x6748	; 0x6748 <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(s_wifiSID);
    144e:	8f eb       	ldi	r24, 0xBF	; 191
    1450:	94 e0       	ldi	r25, 0x04	; 4
    1452:	60 e8       	ldi	r22, 0x80	; 128
    1454:	72 e0       	ldi	r23, 0x02	; 2
    1456:	0e 94 08 35 	call	0x6a10	; 0x6a10 <_ZN5Print5printERK6String>
      if (!wifiExecuteCommand()){
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	6f ef       	ldi	r22, 0xFF	; 255
    1460:	7f ef       	ldi	r23, 0xFF	; 255
    1462:	41 e0       	ldi	r20, 0x01	; 1
    1464:	0e 94 2a 09 	call	0x1254	; 0x1254 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
    1468:	88 23       	and	r24, r24
    146a:	91 f1       	breq	.+100    	; 0x14d0 <_ZN15GB_SerialHelper15startWifiSilentEv+0xea>
        return false;
      }

      if (!wifiExecuteCommand(F("at+ipdhcp=0"))){
    146c:	89 e2       	ldi	r24, 0x29	; 41
    146e:	92 e0       	ldi	r25, 0x02	; 2
    1470:	1d c0       	rjmp	.+58     	; 0x14ac <_ZN15GB_SerialHelper15startWifiSilentEv+0xc6>
        return false;
      }
    }
    else {
      if (!wifiExecuteCommand(F("at+psk=ingodwetrust"))){
    1472:	85 e1       	ldi	r24, 0x15	; 21
    1474:	92 e0       	ldi	r25, 0x02	; 2
    1476:	6f ef       	ldi	r22, 0xFF	; 255
    1478:	7f ef       	ldi	r23, 0xFF	; 255
    147a:	41 e0       	ldi	r20, 0x01	; 1
    147c:	0e 94 2a 09 	call	0x1254	; 0x1254 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
    1480:	88 23       	and	r24, r24
    1482:	31 f1       	breq	.+76     	; 0x14d0 <_ZN15GB_SerialHelper15startWifiSilentEv+0xea>
        return false;
      }  

      // at+ipstatic=<ip>,<mask>,<gateway>,<dns server1>(0 is valid),<dns server2>(0 is valid)\r\n
      if (!wifiExecuteCommand(F("at+ipstatic=192.168.0.1,255.255.0.0,0.0.0.0,0,0"))){
    1484:	85 ee       	ldi	r24, 0xE5	; 229
    1486:	91 e0       	ldi	r25, 0x01	; 1
    1488:	6f ef       	ldi	r22, 0xFF	; 255
    148a:	7f ef       	ldi	r23, 0xFF	; 255
    148c:	41 e0       	ldi	r20, 0x01	; 1
    148e:	0e 94 2a 09 	call	0x1254	; 0x1254 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
    1492:	88 23       	and	r24, r24
    1494:	e9 f0       	breq	.+58     	; 0x14d0 <_ZN15GB_SerialHelper15startWifiSilentEv+0xea>
        return false;
      }

      if (!wifiExecuteCommand(F("at+ipdhcp=1"))){
    1496:	89 ed       	ldi	r24, 0xD9	; 217
    1498:	91 e0       	ldi	r25, 0x01	; 1
    149a:	6f ef       	ldi	r22, 0xFF	; 255
    149c:	7f ef       	ldi	r23, 0xFF	; 255
    149e:	41 e0       	ldi	r20, 0x01	; 1
    14a0:	0e 94 2a 09 	call	0x1254	; 0x1254 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
    14a4:	88 23       	and	r24, r24
    14a6:	a1 f0       	breq	.+40     	; 0x14d0 <_ZN15GB_SerialHelper15startWifiSilentEv+0xea>
        return false;
      }

      if (!wifiExecuteCommand(F("at+ap=Growbox,1"))){ // Hidden
    14a8:	89 ec       	ldi	r24, 0xC9	; 201
    14aa:	91 e0       	ldi	r25, 0x01	; 1
    14ac:	6f ef       	ldi	r22, 0xFF	; 255
    14ae:	7f ef       	ldi	r23, 0xFF	; 255
    14b0:	41 e0       	ldi	r20, 0x01	; 1
    14b2:	0e 94 2a 09 	call	0x1254	; 0x1254 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
    14b6:	88 23       	and	r24, r24
    14b8:	59 f0       	breq	.+22     	; 0x14d0 <_ZN15GB_SerialHelper15startWifiSilentEv+0xea>
    }

    /*if (!wifiExecuteCommand(F("at+httpd_open"))){
     return false;
     }*/
    if (!wifiExecuteCommand(F("at+ltcp=80"))){
    14ba:	8e eb       	ldi	r24, 0xBE	; 190
    14bc:	91 e0       	ldi	r25, 0x01	; 1
    14be:	6f ef       	ldi	r22, 0xFF	; 255
    14c0:	7f ef       	ldi	r23, 0xFF	; 255
    14c2:	41 e0       	ldi	r20, 0x01	; 1
    14c4:	0e 94 2a 09 	call	0x1254	; 0x1254 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
    14c8:	88 23       	and	r24, r24
    14ca:	19 f0       	breq	.+6      	; 0x14d2 <_ZN15GB_SerialHelper15startWifiSilentEv+0xec>
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	08 95       	ret
    14d0:	80 e0       	ldi	r24, 0x00	; 0
      return false;
    }

    return true;
  }
    14d2:	08 95       	ret

000014d4 <_ZN15GB_SerialHelper9startWifiEv>:
      startWifi();
    }
  }

  static boolean startWifi(){
    showWifiStatus(F("Starting..."));
    14d4:	82 eb       	ldi	r24, 0xB2	; 178
    14d6:	91 e0       	ldi	r25, 0x01	; 1
    14d8:	61 e0       	ldi	r22, 0x01	; 1
    14da:	0e 94 70 07 	call	0xee0	; 0xee0 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
    boolean isLoaded = startWifiSilent();
    14de:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <_ZN15GB_SerialHelper15startWifiSilentEv>
    if (isLoaded){
    14e2:	88 23       	and	r24, r24
    14e4:	31 f0       	breq	.+12     	; 0x14f2 <_ZN15GB_SerialHelper9startWifiEv+0x1e>
      showWifiStatus(F("Started"));
    14e6:	8a ea       	ldi	r24, 0xAA	; 170
    14e8:	91 e0       	ldi	r25, 0x01	; 1
    14ea:	61 e0       	ldi	r22, 0x01	; 1
    14ec:	0e 94 70 07 	call	0xee0	; 0xee0 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
    14f0:	08 95       	ret
    } 
    else {
      showWifiStatus(F("Start failed"));
    14f2:	8d e9       	ldi	r24, 0x9D	; 157
    14f4:	91 e0       	ldi	r25, 0x01	; 1
    14f6:	61 e0       	ldi	r22, 0x01	; 1
    14f8:	0e 94 70 07 	call	0xee0	; 0xee0 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
    }
  }
    14fc:	08 95       	ret

000014fe <_ZN15GB_SerialHelper15closeConnectionEh>:

  static boolean sendWifiFrameStop(boolean rebootOnFalse = true){
    return wifiExecuteCommand(0,-1,rebootOnFalse);
  }

  static boolean closeConnection(const byte portDescriptor){
    14fe:	ff 92       	push	r15
    1500:	0f 93       	push	r16
    1502:	1f 93       	push	r17
    1504:	f8 2e       	mov	r15, r24
    Serial.print(F("at+cls="));
    1506:	0f eb       	ldi	r16, 0xBF	; 191
    1508:	14 e0       	ldi	r17, 0x04	; 4
    150a:	c8 01       	movw	r24, r16
    150c:	6d e8       	ldi	r22, 0x8D	; 141
    150e:	72 e0       	ldi	r23, 0x02	; 2
    1510:	0e 94 a4 33 	call	0x6748	; 0x6748 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(portDescriptor);
    1514:	c8 01       	movw	r24, r16
    1516:	6f 2d       	mov	r22, r15
    1518:	4a e0       	ldi	r20, 0x0A	; 10
    151a:	50 e0       	ldi	r21, 0x00	; 0
    151c:	0e 94 a3 34 	call	0x6946	; 0x6946 <_ZN5Print5printEhi>
    return wifiExecuteCommand(); 
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	6f ef       	ldi	r22, 0xFF	; 255
    1526:	7f ef       	ldi	r23, 0xFF	; 255
    1528:	41 e0       	ldi	r20, 0x01	; 1
    152a:	0e 94 2a 09 	call	0x1254	; 0x1254 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
  }
    152e:	1f 91       	pop	r17
    1530:	0f 91       	pop	r16
    1532:	ff 90       	pop	r15
    1534:	08 95       	ret

00001536 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>:
#define GB_PrintDirty_h

class GB_PrintDirty {
public:

  static String getFixedDigitsString(const int number, const byte numberOfDigits){
    1536:	8f 92       	push	r8
    1538:	9f 92       	push	r9
    153a:	af 92       	push	r10
    153c:	bf 92       	push	r11
    153e:	cf 92       	push	r12
    1540:	df 92       	push	r13
    1542:	ef 92       	push	r14
    1544:	ff 92       	push	r15
    1546:	0f 93       	push	r16
    1548:	1f 93       	push	r17
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	27 97       	sbiw	r28, 0x07	; 7
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	f8 94       	cli
    1558:	de bf       	out	0x3e, r29	; 62
    155a:	0f be       	out	0x3f, r0	; 63
    155c:	cd bf       	out	0x3d, r28	; 61
    155e:	4c 01       	movw	r8, r24
    1560:	5b 01       	movw	r10, r22
    1562:	f4 2e       	mov	r15, r20
    String out;
    1564:	8e 01       	movw	r16, r28
    1566:	0f 5f       	subi	r16, 0xFF	; 255
    1568:	1f 4f       	sbci	r17, 0xFF	; 255
    156a:	c8 01       	movw	r24, r16
    156c:	6b e2       	ldi	r22, 0x2B	; 43
    156e:	71 e0       	ldi	r23, 0x01	; 1
    1570:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
    1574:	cc 24       	eor	r12, r12
    1576:	dd 24       	eor	r13, r13
    for (int i = 0; i< numberOfDigits; i++){
    1578:	ef 2c       	mov	r14, r15
    157a:	ff 24       	eor	r15, r15
    157c:	07 c0       	rjmp	.+14     	; 0x158c <_ZN13GB_PrintDirty20getFixedDigitsStringEih+0x56>
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    157e:	c8 01       	movw	r24, r16
    1580:	60 e3       	ldi	r22, 0x30	; 48
    1582:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <_ZN6String6concatEc>
    1586:	08 94       	sec
    1588:	c1 1c       	adc	r12, r1
    158a:	d1 1c       	adc	r13, r1
    158c:	ce 14       	cp	r12, r14
    158e:	df 04       	cpc	r13, r15
    1590:	b4 f3       	brlt	.-20     	; 0x157e <_ZN13GB_PrintDirty20getFixedDigitsStringEih+0x48>
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
    1592:	c8 01       	movw	r24, r16
    1594:	b5 01       	movw	r22, r10
    1596:	0e 94 57 37 	call	0x6eae	; 0x6eae <_ZN6String6concatEi>
      out +='0';
    }
    out += number;
    return out.substring(out.length()-numberOfDigits);
    159a:	4d 81       	ldd	r20, Y+5	; 0x05
    159c:	5e 81       	ldd	r21, Y+6	; 0x06
    159e:	4e 19       	sub	r20, r14
    15a0:	5f 09       	sbc	r21, r15
    15a2:	c4 01       	movw	r24, r8
    15a4:	b8 01       	movw	r22, r16
    15a6:	0e 94 dd 38 	call	0x71ba	; 0x71ba <_ZNK6String9substringEj>
    15aa:	c8 01       	movw	r24, r16
    15ac:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
  }
    15b0:	c4 01       	movw	r24, r8
    15b2:	27 96       	adiw	r28, 0x07	; 7
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	f8 94       	cli
    15b8:	de bf       	out	0x3e, r29	; 62
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	cd bf       	out	0x3d, r28	; 61
    15be:	cf 91       	pop	r28
    15c0:	df 91       	pop	r29
    15c2:	1f 91       	pop	r17
    15c4:	0f 91       	pop	r16
    15c6:	ff 90       	pop	r15
    15c8:	ef 90       	pop	r14
    15ca:	df 90       	pop	r13
    15cc:	cf 90       	pop	r12
    15ce:	bf 90       	pop	r11
    15d0:	af 90       	pop	r10
    15d2:	9f 90       	pop	r9
    15d4:	8f 90       	pop	r8
    15d6:	08 95       	ret

000015d8 <_ZN13GB_PrintDirty13getTimeStringEm>:
    out += getFixedDigitsString(temp,2);
    return out;
  }


  static String getTimeString(time_t time){
    15d8:	cf 92       	push	r12
    15da:	df 92       	push	r13
    15dc:	ef 92       	push	r14
    15de:	ff 92       	push	r15
    15e0:	0f 93       	push	r16
    15e2:	1f 93       	push	r17
    15e4:	df 93       	push	r29
    15e6:	cf 93       	push	r28
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	e1 97       	sbiw	r28, 0x31	; 49
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	f8 94       	cli
    15f2:	de bf       	out	0x3e, r29	; 62
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	cd bf       	out	0x3d, r28	; 61
    15f8:	d8 2e       	mov	r13, r24
    15fa:	c9 2e       	mov	r12, r25
    15fc:	7a 01       	movw	r14, r20
    15fe:	8b 01       	movw	r16, r22
    String out;
    1600:	6b e2       	ldi	r22, 0x2B	; 43
    1602:	71 e0       	ldi	r23, 0x01	; 1
    1604:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>

    tmElements_t tm;
    breakTime(time, tm);
    1608:	c8 01       	movw	r24, r16
    160a:	b7 01       	movw	r22, r14
    160c:	ae 01       	movw	r20, r28
    160e:	4f 5f       	subi	r20, 0xFF	; 255
    1610:	5f 4f       	sbci	r21, 0xFF	; 255
    1612:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <_Z9breakTimemR12tmElements_t>
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1616:	8d 2d       	mov	r24, r13
    1618:	9c 2d       	mov	r25, r12
    161a:	6b e5       	ldi	r22, 0x5B	; 91
    161c:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <_ZN6String6concatEc>

    out += '[';
    out += getFixedDigitsString(tm.Hour, 2);
    1620:	8e 01       	movw	r16, r28
    1622:	08 5f       	subi	r16, 0xF8	; 248
    1624:	1f 4f       	sbci	r17, 0xFF	; 255
    1626:	6b 81       	ldd	r22, Y+3	; 0x03
    1628:	c8 01       	movw	r24, r16
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	42 e0       	ldi	r20, 0x02	; 2
    162e:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1632:	8d 2d       	mov	r24, r13
    1634:	9c 2d       	mov	r25, r12
    1636:	b8 01       	movw	r22, r16
    1638:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <_ZN6String6concatERKS_>
    163c:	c8 01       	movw	r24, r16
    163e:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1642:	8d 2d       	mov	r24, r13
    1644:	9c 2d       	mov	r25, r12
    1646:	6a e3       	ldi	r22, 0x3A	; 58
    1648:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <_ZN6String6concatEc>
    out += ':';
    out += getFixedDigitsString(tm.Minute, 2);
    164c:	8e 01       	movw	r16, r28
    164e:	01 5f       	subi	r16, 0xF1	; 241
    1650:	1f 4f       	sbci	r17, 0xFF	; 255
    1652:	6a 81       	ldd	r22, Y+2	; 0x02
    1654:	c8 01       	movw	r24, r16
    1656:	70 e0       	ldi	r23, 0x00	; 0
    1658:	42 e0       	ldi	r20, 0x02	; 2
    165a:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    165e:	8d 2d       	mov	r24, r13
    1660:	9c 2d       	mov	r25, r12
    1662:	b8 01       	movw	r22, r16
    1664:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <_ZN6String6concatERKS_>
    1668:	c8 01       	movw	r24, r16
    166a:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    166e:	8d 2d       	mov	r24, r13
    1670:	9c 2d       	mov	r25, r12
    1672:	6a e3       	ldi	r22, 0x3A	; 58
    1674:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <_ZN6String6concatEc>
    out += ':';
    out += getFixedDigitsString(tm.Second, 2);
    1678:	8e 01       	movw	r16, r28
    167a:	0a 5e       	subi	r16, 0xEA	; 234
    167c:	1f 4f       	sbci	r17, 0xFF	; 255
    167e:	69 81       	ldd	r22, Y+1	; 0x01
    1680:	c8 01       	movw	r24, r16
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	42 e0       	ldi	r20, 0x02	; 2
    1686:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    168a:	8d 2d       	mov	r24, r13
    168c:	9c 2d       	mov	r25, r12
    168e:	b8 01       	movw	r22, r16
    1690:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <_ZN6String6concatERKS_>
    1694:	c8 01       	movw	r24, r16
    1696:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    169a:	8d 2d       	mov	r24, r13
    169c:	9c 2d       	mov	r25, r12
    169e:	60 e2       	ldi	r22, 0x20	; 32
    16a0:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <_ZN6String6concatEc>
    out += ' ';
    out += getFixedDigitsString(tm.Day, 2);
    16a4:	8e 01       	movw	r16, r28
    16a6:	03 5e       	subi	r16, 0xE3	; 227
    16a8:	1f 4f       	sbci	r17, 0xFF	; 255
    16aa:	6d 81       	ldd	r22, Y+5	; 0x05
    16ac:	c8 01       	movw	r24, r16
    16ae:	70 e0       	ldi	r23, 0x00	; 0
    16b0:	42 e0       	ldi	r20, 0x02	; 2
    16b2:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    16b6:	8d 2d       	mov	r24, r13
    16b8:	9c 2d       	mov	r25, r12
    16ba:	b8 01       	movw	r22, r16
    16bc:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <_ZN6String6concatERKS_>
    16c0:	c8 01       	movw	r24, r16
    16c2:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    16c6:	8d 2d       	mov	r24, r13
    16c8:	9c 2d       	mov	r25, r12
    16ca:	6e e2       	ldi	r22, 0x2E	; 46
    16cc:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <_ZN6String6concatEc>
    out +='.';
    out += getFixedDigitsString(tm.Month, 2);
    16d0:	8e 01       	movw	r16, r28
    16d2:	0c 5d       	subi	r16, 0xDC	; 220
    16d4:	1f 4f       	sbci	r17, 0xFF	; 255
    16d6:	6e 81       	ldd	r22, Y+6	; 0x06
    16d8:	c8 01       	movw	r24, r16
    16da:	70 e0       	ldi	r23, 0x00	; 0
    16dc:	42 e0       	ldi	r20, 0x02	; 2
    16de:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    16e2:	8d 2d       	mov	r24, r13
    16e4:	9c 2d       	mov	r25, r12
    16e6:	b8 01       	movw	r22, r16
    16e8:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <_ZN6String6concatERKS_>
    16ec:	c8 01       	movw	r24, r16
    16ee:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    16f2:	8d 2d       	mov	r24, r13
    16f4:	9c 2d       	mov	r25, r12
    16f6:	6e e2       	ldi	r22, 0x2E	; 46
    16f8:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <_ZN6String6concatEc>
    out += '.';
    out += getFixedDigitsString(tmYearToCalendar(tm.Year), 4); 
    16fc:	8e 01       	movw	r16, r28
    16fe:	05 5d       	subi	r16, 0xD5	; 213
    1700:	1f 4f       	sbci	r17, 0xFF	; 255
    1702:	6f 81       	ldd	r22, Y+7	; 0x07
    1704:	70 e0       	ldi	r23, 0x00	; 0
    1706:	6e 54       	subi	r22, 0x4E	; 78
    1708:	78 4f       	sbci	r23, 0xF8	; 248
    170a:	c8 01       	movw	r24, r16
    170c:	44 e0       	ldi	r20, 0x04	; 4
    170e:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1712:	8d 2d       	mov	r24, r13
    1714:	9c 2d       	mov	r25, r12
    1716:	b8 01       	movw	r22, r16
    1718:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <_ZN6String6concatERKS_>
    171c:	c8 01       	movw	r24, r16
    171e:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1722:	8d 2d       	mov	r24, r13
    1724:	9c 2d       	mov	r25, r12
    1726:	6d e5       	ldi	r22, 0x5D	; 93
    1728:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <_ZN6String6concatEc>
    out += ']';
    return out;
  } 
    172c:	8d 2d       	mov	r24, r13
    172e:	9c 2d       	mov	r25, r12
    1730:	e1 96       	adiw	r28, 0x31	; 49
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	1f 91       	pop	r17
    1742:	0f 91       	pop	r16
    1744:	ff 90       	pop	r15
    1746:	ef 90       	pop	r14
    1748:	df 90       	pop	r13
    174a:	cf 90       	pop	r12
    174c:	08 95       	ret

0000174e <_ZN9GB_Logger18getLogRecordSuffixERK9LogRecord>:
    else {
      return F("Unknown");
    }
  }
  
  static String getLogRecordSuffix(const LogRecord &logRecord){        
    174e:	df 92       	push	r13
    1750:	ef 92       	push	r14
    1752:	ff 92       	push	r15
    1754:	0f 93       	push	r16
    1756:	1f 93       	push	r17
    1758:	df 93       	push	r29
    175a:	cf 93       	push	r28
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
    1760:	2e 97       	sbiw	r28, 0x0e	; 14
    1762:	0f b6       	in	r0, 0x3f	; 63
    1764:	f8 94       	cli
    1766:	de bf       	out	0x3e, r29	; 62
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	cd bf       	out	0x3d, r28	; 61
    176c:	e8 2e       	mov	r14, r24
    176e:	d9 2e       	mov	r13, r25
    1770:	8b 01       	movw	r16, r22
    String out;
    1772:	6b e2       	ldi	r22, 0x2B	; 43
    1774:	71 e0       	ldi	r23, 0x01	; 1
    1776:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
  }
  static boolean isError(const LogRecord &logRecord){
    return (logRecord.data & B11000000) == B01000000;
  }
  static boolean isTemperature(const LogRecord &logRecord){
    return (logRecord.data & B11000000) == B11000000;
    177a:	f8 01       	movw	r30, r16
    177c:	f4 80       	ldd	r15, Z+4	; 0x04
    }
  }
  
  static String getLogRecordSuffix(const LogRecord &logRecord){        
    String out;
    if (isTemperature(logRecord)) {
    177e:	8f 2d       	mov	r24, r15
    1780:	80 7c       	andi	r24, 0xC0	; 192
    1782:	80 3c       	cpi	r24, 0xC0	; 192
    1784:	39 f5       	brne	.+78     	; 0x17d4 <_ZN9GB_Logger18getLogRecordSuffixERK9LogRecord+0x86>
      byte temperature = (logRecord.data & B00111111);
      out += flashStringLoad(F(" ["));
    1786:	8e 01       	movw	r16, r28
    1788:	0f 5f       	subi	r16, 0xFF	; 255
    178a:	1f 4f       	sbci	r17, 0xFF	; 255
    178c:	c8 01       	movw	r24, r16
    178e:	61 e2       	ldi	r22, 0x21	; 33
    1790:	71 e0       	ldi	r23, 0x01	; 1
    1792:	0e 94 3c 08 	call	0x1078	; 0x1078 <_ZL15flashStringLoadPK19__FlashStringHelper>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1796:	8e 2d       	mov	r24, r14
    1798:	9d 2d       	mov	r25, r13
    179a:	b8 01       	movw	r22, r16
    179c:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <_ZN6String6concatERKS_>
    17a0:	c8 01       	movw	r24, r16
    17a2:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
    17a6:	ff e3       	ldi	r31, 0x3F	; 63
    17a8:	ff 22       	and	r15, r31
    17aa:	8e 2d       	mov	r24, r14
    17ac:	9d 2d       	mov	r25, r13
    17ae:	6f 2d       	mov	r22, r15
    17b0:	0e 94 88 37 	call	0x6f10	; 0x6f10 <_ZN6String6concatEh>
      out += temperature;
      out += flashStringLoad(F("] C"));
    17b4:	8e 01       	movw	r16, r28
    17b6:	08 5f       	subi	r16, 0xF8	; 248
    17b8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ba:	c8 01       	movw	r24, r16
    17bc:	6d e1       	ldi	r22, 0x1D	; 29
    17be:	71 e0       	ldi	r23, 0x01	; 1
    17c0:	0e 94 3c 08 	call	0x1078	; 0x1078 <_ZL15flashStringLoadPK19__FlashStringHelper>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    17c4:	8e 2d       	mov	r24, r14
    17c6:	9d 2d       	mov	r25, r13
    17c8:	b8 01       	movw	r22, r16
    17ca:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <_ZN6String6concatERKS_>
    17ce:	c8 01       	movw	r24, r16
    17d0:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
    }
    //Serial.print(F(" HEX: "));
    //GB_PrintDirty::printRAM(&((LogRecord)logRecord), sizeof(LogRecord));  

    return out;
  }
    17d4:	8e 2d       	mov	r24, r14
    17d6:	9d 2d       	mov	r25, r13
    17d8:	2e 96       	adiw	r28, 0x0e	; 14
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	f8 94       	cli
    17de:	de bf       	out	0x3e, r29	; 62
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	cd bf       	out	0x3d, r28	; 61
    17e4:	cf 91       	pop	r28
    17e6:	df 91       	pop	r29
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	ff 90       	pop	r15
    17ee:	ef 90       	pop	r14
    17f0:	df 90       	pop	r13
    17f2:	08 95       	ret

000017f4 <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh>:
  }


private:

  static void printDirtyLogRecord(const LogRecord &logRecord, const __FlashStringHelper* description, const boolean isStored, const byte temperature = 0xFF){
    17f4:	af 92       	push	r10
    17f6:	bf 92       	push	r11
    17f8:	cf 92       	push	r12
    17fa:	df 92       	push	r13
    17fc:	ef 92       	push	r14
    17fe:	ff 92       	push	r15
    1800:	0f 93       	push	r16
    1802:	1f 93       	push	r17
    1804:	df 93       	push	r29
    1806:	cf 93       	push	r28
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
    180c:	6c 97       	sbiw	r28, 0x1c	; 28
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	de bf       	out	0x3e, r29	; 62
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	cd bf       	out	0x3d, r28	; 61
    1818:	6c 01       	movw	r12, r24
    181a:	5b 01       	movw	r10, r22
    181c:	04 2f       	mov	r16, r20
    if (!GB_SerialHelper::useSerialMonitor) {
    181e:	80 91 7d 02 	lds	r24, 0x027D
    1822:	88 23       	and	r24, r24
    1824:	09 f4       	brne	.+2      	; 0x1828 <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh+0x34>
    1826:	61 c0       	rjmp	.+194    	; 0x18ea <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh+0xf6>
      return;
    }
    Serial.print(F("LOG> ")); 
    1828:	8f eb       	ldi	r24, 0xBF	; 191
    182a:	94 e0       	ldi	r25, 0x04	; 4
    182c:	67 e1       	ldi	r22, 0x17	; 23
    182e:	71 e0       	ldi	r23, 0x01	; 1
    1830:	0e 94 a4 33 	call	0x6748	; 0x6748 <_ZN5Print5printEPK19__FlashStringHelper>
    if (!isStored) {
    1834:	00 23       	and	r16, r16
    1836:	31 f4       	brne	.+12     	; 0x1844 <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh+0x50>
      Serial.print(F("NOT STORED "));
    1838:	8f eb       	ldi	r24, 0xBF	; 191
    183a:	94 e0       	ldi	r25, 0x04	; 4
    183c:	6b e0       	ldi	r22, 0x0B	; 11
    183e:	71 e0       	ldi	r23, 0x01	; 1
    1840:	0e 94 a4 33 	call	0x6748	; 0x6748 <_ZN5Print5printEPK19__FlashStringHelper>
    GB_StorageHelper::getLogRecordByIndex(index, logRecord);
    return logRecord;
  }

  static String getLogRecordPrefix(const LogRecord &logRecord){        
    String out;
    1844:	7e 01       	movw	r14, r28
    1846:	08 94       	sec
    1848:	e1 1c       	adc	r14, r1
    184a:	f1 1c       	adc	r15, r1
    184c:	c7 01       	movw	r24, r14
    184e:	6b e2       	ldi	r22, 0x2B	; 43
    1850:	71 e0       	ldi	r23, 0x01	; 1
    1852:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
    out += GB_PrintDirty::getTimeString(logRecord.timeStamp);
    1856:	8e 01       	movw	r16, r28
    1858:	01 5f       	subi	r16, 0xF1	; 241
    185a:	1f 4f       	sbci	r17, 0xFF	; 255
    185c:	f6 01       	movw	r30, r12
    185e:	40 81       	ld	r20, Z
    1860:	51 81       	ldd	r21, Z+1	; 0x01
    1862:	62 81       	ldd	r22, Z+2	; 0x02
    1864:	73 81       	ldd	r23, Z+3	; 0x03
    1866:	c8 01       	movw	r24, r16
    1868:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <_ZN13GB_PrintDirty13getTimeStringEm>
    186c:	c7 01       	movw	r24, r14
    186e:	b8 01       	movw	r22, r16
    1870:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <_ZN6String6concatERKS_>
    1874:	c8 01       	movw	r24, r16
    1876:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    187a:	c7 01       	movw	r24, r14
    187c:	60 e2       	ldi	r22, 0x20	; 32
    187e:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <_ZN6String6concatEc>
    out += ' '; 
    out += GB_PrintDirty::getHEX(logRecord.data, true);
    1882:	8e 01       	movw	r16, r28
    1884:	0a 5e       	subi	r16, 0xEA	; 234
    1886:	1f 4f       	sbci	r17, 0xFF	; 255
    1888:	c8 01       	movw	r24, r16
    188a:	f6 01       	movw	r30, r12
    188c:	64 81       	ldd	r22, Z+4	; 0x04
    188e:	41 e0       	ldi	r20, 0x01	; 1
    1890:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN13GB_PrintDirty6getHEXEhh>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1894:	c7 01       	movw	r24, r14
    1896:	b8 01       	movw	r22, r16
    1898:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <_ZN6String6concatERKS_>
    189c:	c8 01       	movw	r24, r16
    189e:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    18a2:	c7 01       	movw	r24, r14
    18a4:	60 e2       	ldi	r22, 0x20	; 32
    18a6:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <_ZN6String6concatEc>
    }
    Serial.print(F("LOG> ")); 
    if (!isStored) {
      Serial.print(F("NOT STORED "));
    }
    Serial.print(getLogRecordPrefix(logRecord));    
    18aa:	8f eb       	ldi	r24, 0xBF	; 191
    18ac:	94 e0       	ldi	r25, 0x04	; 4
    18ae:	b7 01       	movw	r22, r14
    18b0:	0e 94 08 35 	call	0x6a10	; 0x6a10 <_ZN5Print5printERK6String>
    18b4:	c7 01       	movw	r24, r14
    18b6:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
    Serial.print(description);
    18ba:	8f eb       	ldi	r24, 0xBF	; 191
    18bc:	94 e0       	ldi	r25, 0x04	; 4
    18be:	b5 01       	movw	r22, r10
    18c0:	0e 94 a4 33 	call	0x6748	; 0x6748 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(getLogRecordSuffix(logRecord));  
    18c4:	8e 01       	movw	r16, r28
    18c6:	08 5f       	subi	r16, 0xF8	; 248
    18c8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ca:	c8 01       	movw	r24, r16
    18cc:	b6 01       	movw	r22, r12
    18ce:	0e 94 a7 0b 	call	0x174e	; 0x174e <_ZN9GB_Logger18getLogRecordSuffixERK9LogRecord>
    18d2:	8f eb       	ldi	r24, 0xBF	; 191
    18d4:	94 e0       	ldi	r25, 0x04	; 4
    18d6:	b8 01       	movw	r22, r16
    18d8:	0e 94 08 35 	call	0x6a10	; 0x6a10 <_ZN5Print5printERK6String>
    18dc:	c8 01       	movw	r24, r16
    18de:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>

    Serial.println();      
    18e2:	8f eb       	ldi	r24, 0xBF	; 191
    18e4:	94 e0       	ldi	r25, 0x04	; 4
    18e6:	0e 94 cf 33 	call	0x679e	; 0x679e <_ZN5Print7printlnEv>
  }
    18ea:	6c 96       	adiw	r28, 0x1c	; 28
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	f8 94       	cli
    18f0:	de bf       	out	0x3e, r29	; 62
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	cd bf       	out	0x3d, r28	; 61
    18f6:	cf 91       	pop	r28
    18f8:	df 91       	pop	r29
    18fa:	1f 91       	pop	r17
    18fc:	0f 91       	pop	r16
    18fe:	ff 90       	pop	r15
    1900:	ef 90       	pop	r14
    1902:	df 90       	pop	r13
    1904:	cf 90       	pop	r12
    1906:	bf 90       	pop	r11
    1908:	af 90       	pop	r10
    190a:	08 95       	ret

0000190c <_ZN9GB_Logger8logEventER5Event>:
public:

  // Normal event uses uses format [00DDDDDD]
  //   00 - prefix for normal events 
  //   DDDDDD - event identificator
  static void logEvent(Event &event){
    190c:	ef 92       	push	r14
    190e:	ff 92       	push	r15
    1910:	0f 93       	push	r16
    1912:	1f 93       	push	r17
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	00 d0       	rcall	.+0      	; 0x191a <_ZN9GB_Logger8logEventER5Event+0xe>
    191a:	00 d0       	rcall	.+0      	; 0x191c <_ZN9GB_Logger8logEventER5Event+0x10>
    191c:	0f 92       	push	r0
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	7c 01       	movw	r14, r24
    LogRecord logRecord(event.index);
    1924:	fc 01       	movw	r30, r24
    1926:	12 81       	ldd	r17, Z+2	; 0x02
struct LogRecord {
  time_t timeStamp;
  byte data;  

  LogRecord (byte data): 
  timeStamp(now()), data(data) {
    1928:	0e 94 37 20 	call	0x406e	; 0x406e <_Z3nowv>
    192c:	69 83       	std	Y+1, r22	; 0x01
    192e:	7a 83       	std	Y+2, r23	; 0x02
    1930:	8b 83       	std	Y+3, r24	; 0x03
    1932:	9c 83       	std	Y+4, r25	; 0x04
    1934:	1d 83       	std	Y+5, r17	; 0x05
    boolean isStored = GB_StorageHelper::storeLogRecord(logRecord);
    1936:	8e 01       	movw	r16, r28
    1938:	0f 5f       	subi	r16, 0xFF	; 255
    193a:	1f 4f       	sbci	r17, 0xFF	; 255
    193c:	c8 01       	movw	r24, r16
    193e:	0e 94 53 06 	call	0xca6	; 0xca6 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord>
    1942:	48 2f       	mov	r20, r24
    printDirtyLogRecord(logRecord, event.description, isStored);
    1944:	f7 01       	movw	r30, r14
    1946:	63 81       	ldd	r22, Z+3	; 0x03
    1948:	74 81       	ldd	r23, Z+4	; 0x04
    194a:	c8 01       	movw	r24, r16
    194c:	2f ef       	ldi	r18, 0xFF	; 255
    194e:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh>
    GB_SerialHelper::printDirtyEnd();
    1952:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN15GB_SerialHelper13printDirtyEndEv>
  }
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	cf 91       	pop	r28
    1962:	df 91       	pop	r29
    1964:	1f 91       	pop	r17
    1966:	0f 91       	pop	r16
    1968:	ff 90       	pop	r15
    196a:	ef 90       	pop	r14
    196c:	08 95       	ret

0000196e <_Z10turnOffFanv>:
    196e:	84 e0       	ldi	r24, 0x04	; 4
    1970:	0e 94 a0 30 	call	0x6140	; 0x6140 <digitalRead>
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	61 f0       	breq	.+24     	; 0x1990 <_Z10turnOffFanv+0x22>
    1978:	84 e0       	ldi	r24, 0x04	; 4
    197a:	61 e0       	ldi	r22, 0x01	; 1
    197c:	0e 94 4c 30 	call	0x6098	; 0x6098 <digitalWrite>
    1980:	85 e0       	ldi	r24, 0x05	; 5
    1982:	61 e0       	ldi	r22, 0x01	; 1
    1984:	0e 94 4c 30 	call	0x6098	; 0x6098 <digitalWrite>
    1988:	89 e6       	ldi	r24, 0x69	; 105
    198a:	92 e0       	ldi	r25, 0x02	; 2
    198c:	0e 94 86 0c 	call	0x190c	; 0x190c <_ZN9GB_Logger8logEventER5Event>
    1990:	08 95       	ret

00001992 <_Z9turnOnFani>:
    1992:	cf 93       	push	r28
    1994:	df 93       	push	r29
    1996:	ec 01       	movw	r28, r24
    1998:	84 e0       	ldi	r24, 0x04	; 4
    199a:	0e 94 a0 30 	call	0x6140	; 0x6140 <digitalRead>
    199e:	89 2b       	or	r24, r25
    19a0:	79 f4       	brne	.+30     	; 0x19c0 <_Z9turnOnFani+0x2e>
    19a2:	85 e0       	ldi	r24, 0x05	; 5
    19a4:	0e 94 a0 30 	call	0x6140	; 0x6140 <digitalRead>
    19a8:	8c 17       	cp	r24, r28
    19aa:	9d 07       	cpc	r25, r29
    19ac:	49 f4       	brne	.+18     	; 0x19c0 <_Z9turnOnFani+0x2e>
    19ae:	13 c0       	rjmp	.+38     	; 0x19d6 <_Z9turnOnFani+0x44>
    19b0:	8e e6       	ldi	r24, 0x6E	; 110
    19b2:	92 e0       	ldi	r25, 0x02	; 2
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <_Z9turnOnFani+0x28>
    19b6:	83 e7       	ldi	r24, 0x73	; 115
    19b8:	92 e0       	ldi	r25, 0x02	; 2
    19ba:	0e 94 86 0c 	call	0x190c	; 0x190c <_ZN9GB_Logger8logEventER5Event>
    19be:	0b c0       	rjmp	.+22     	; 0x19d6 <_Z9turnOnFani+0x44>
    19c0:	85 e0       	ldi	r24, 0x05	; 5
    19c2:	6c 2f       	mov	r22, r28
    19c4:	0e 94 4c 30 	call	0x6098	; 0x6098 <digitalWrite>
    19c8:	84 e0       	ldi	r24, 0x04	; 4
    19ca:	60 e0       	ldi	r22, 0x00	; 0
    19cc:	0e 94 4c 30 	call	0x6098	; 0x6098 <digitalWrite>
    19d0:	21 97       	sbiw	r28, 0x01	; 1
    19d2:	89 f7       	brne	.-30     	; 0x19b6 <_Z9turnOnFani+0x24>
    19d4:	ed cf       	rjmp	.-38     	; 0x19b0 <_Z9turnOnFani+0x1e>
    19d6:	df 91       	pop	r29
    19d8:	cf 91       	pop	r28
    19da:	08 95       	ret

000019dc <_Z12turnOffLightv>:
    19dc:	83 e0       	ldi	r24, 0x03	; 3
    19de:	0e 94 a0 30 	call	0x6140	; 0x6140 <digitalRead>
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	41 f0       	breq	.+16     	; 0x19f6 <_Z12turnOffLightv+0x1a>
    19e6:	83 e0       	ldi	r24, 0x03	; 3
    19e8:	61 e0       	ldi	r22, 0x01	; 1
    19ea:	0e 94 4c 30 	call	0x6098	; 0x6098 <digitalWrite>
    19ee:	8f e5       	ldi	r24, 0x5F	; 95
    19f0:	92 e0       	ldi	r25, 0x02	; 2
    19f2:	0e 94 86 0c 	call	0x190c	; 0x190c <_ZN9GB_Logger8logEventER5Event>
    19f6:	08 95       	ret

000019f8 <_Z11turnOnLightv>:
    19f8:	83 e0       	ldi	r24, 0x03	; 3
    19fa:	0e 94 a0 30 	call	0x6140	; 0x6140 <digitalRead>
    19fe:	89 2b       	or	r24, r25
    1a00:	41 f0       	breq	.+16     	; 0x1a12 <_Z11turnOnLightv+0x1a>
    1a02:	83 e0       	ldi	r24, 0x03	; 3
    1a04:	60 e0       	ldi	r22, 0x00	; 0
    1a06:	0e 94 4c 30 	call	0x6098	; 0x6098 <digitalWrite>
    1a0a:	84 e6       	ldi	r24, 0x64	; 100
    1a0c:	92 e0       	ldi	r25, 0x02	; 2
    1a0e:	0e 94 86 0c 	call	0x190c	; 0x190c <_ZN9GB_Logger8logEventER5Event>
    1a12:	08 95       	ret

00001a14 <_ZN9GB_Logger8logErrorER5Error>:

  // Error events uses format [01SSDDDD] 
  //   01 - prefix for error events 
  //   SS - length of errir seqence 
  //   DDDD - sequence data
  static void logError(Error &error){
    1a14:	8f 92       	push	r8
    1a16:	9f 92       	push	r9
    1a18:	af 92       	push	r10
    1a1a:	bf 92       	push	r11
    1a1c:	cf 92       	push	r12
    1a1e:	df 92       	push	r13
    1a20:	ef 92       	push	r14
    1a22:	ff 92       	push	r15
    1a24:	0f 93       	push	r16
    1a26:	1f 93       	push	r17
    1a28:	df 93       	push	r29
    1a2a:	cf 93       	push	r28
    1a2c:	00 d0       	rcall	.+0      	; 0x1a2e <_ZN9GB_Logger8logErrorER5Error+0x1a>
    1a2e:	00 d0       	rcall	.+0      	; 0x1a30 <_ZN9GB_Logger8logErrorER5Error+0x1c>
    1a30:	0f 92       	push	r0
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	7c 01       	movw	r14, r24
    LogRecord logRecord(B01000000|(B00000011 | error.sequenceSize-1)<<4 | (B00001111 & error.sequence));
    1a38:	fc 01       	movw	r30, r24
    1a3a:	12 81       	ldd	r17, Z+2	; 0x02
    1a3c:	1f 70       	andi	r17, 0x0F	; 15
    1a3e:	10 64       	ori	r17, 0x40	; 64
    1a40:	83 81       	ldd	r24, Z+3	; 0x03
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	83 60       	ori	r24, 0x03	; 3
    1a48:	24 e0       	ldi	r18, 0x04	; 4
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	2a 95       	dec	r18
    1a50:	e1 f7       	brne	.-8      	; 0x1a4a <_ZN9GB_Logger8logErrorER5Error+0x36>
    1a52:	18 2b       	or	r17, r24
    1a54:	0e 94 37 20 	call	0x406e	; 0x406e <_Z3nowv>
    1a58:	69 83       	std	Y+1, r22	; 0x01
    1a5a:	7a 83       	std	Y+2, r23	; 0x02
    1a5c:	8b 83       	std	Y+3, r24	; 0x03
    1a5e:	9c 83       	std	Y+4, r25	; 0x04
    1a60:	1d 83       	std	Y+5, r17	; 0x05
    boolean isStoredNow = false;
    if(!error.isStored){
    1a62:	f7 01       	movw	r30, r14
    1a64:	86 81       	ldd	r24, Z+6	; 0x06
    1a66:	88 23       	and	r24, r24
    1a68:	11 f0       	breq	.+4      	; 0x1a6e <_ZN9GB_Logger8logErrorER5Error+0x5a>
    1a6a:	40 e0       	ldi	r20, 0x00	; 0
    1a6c:	07 c0       	rjmp	.+14     	; 0x1a7c <_ZN9GB_Logger8logErrorER5Error+0x68>
      error.isStored = GB_StorageHelper::storeLogRecord(logRecord);
    1a6e:	ce 01       	movw	r24, r28
    1a70:	01 96       	adiw	r24, 0x01	; 1
    1a72:	0e 94 53 06 	call	0xca6	; 0xca6 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord>
    1a76:	f7 01       	movw	r30, r14
    1a78:	86 83       	std	Z+6, r24	; 0x06
    1a7a:	41 e0       	ldi	r20, 0x01	; 1
      isStoredNow = true;
    } 
    printDirtyLogRecord(logRecord, error.description, isStoredNow);
    1a7c:	f7 01       	movw	r30, r14
    1a7e:	64 81       	ldd	r22, Z+4	; 0x04
    1a80:	75 81       	ldd	r23, Z+5	; 0x05
    1a82:	ce 01       	movw	r24, r28
    1a84:	01 96       	adiw	r24, 0x01	; 1
    1a86:	2f ef       	ldi	r18, 0xFF	; 255
    1a88:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh>
    GB_SerialHelper::printDirtyEnd();
    1a8c:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN15GB_SerialHelper13printDirtyEndEv>
    error.isStored = true;   
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	f7 01       	movw	r30, r14
    1a94:	86 83       	std	Z+6, r24	; 0x06
    return (findByIndex(0xFF, 0xFF) == 0);
  }
  
  
void notify() {
  digitalWrite(ERROR_PIN, LOW);
    1a96:	8c e0       	ldi	r24, 0x0C	; 12
    1a98:	60 e0       	ldi	r22, 0x00	; 0
    1a9a:	0e 94 4c 30 	call	0x6098	; 0x6098 <digitalWrite>
  delay(1000);
    1a9e:	68 ee       	ldi	r22, 0xE8	; 232
    1aa0:	73 e0       	ldi	r23, 0x03	; 3
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	0e 94 6f 2f 	call	0x5ede	; 0x5ede <delay>
  for (int i = sequenceSize-1; i >= 0; i--){
    1aaa:	f7 01       	movw	r30, r14
    1aac:	83 81       	ldd	r24, Z+3	; 0x03
    1aae:	00 e0       	ldi	r16, 0x00	; 0
    1ab0:	10 e0       	ldi	r17, 0x00	; 0

  // Error events uses format [01SSDDDD] 
  //   01 - prefix for error events 
  //   SS - length of errir seqence 
  //   DDDD - sequence data
  static void logError(Error &error){
    1ab2:	a8 2e       	mov	r10, r24
    1ab4:	bb 24       	eor	r11, r11
    1ab6:	45 01       	movw	r8, r10
    1ab8:	08 94       	sec
    1aba:	81 08       	sbc	r8, r1
    1abc:	91 08       	sbc	r9, r1
    1abe:	25 c0       	rjmp	.+74     	; 0x1b0a <_ZN9GB_Logger8logErrorER5Error+0xf6>
    digitalWrite(ERROR_PIN, HIGH);
    1ac0:	8c e0       	ldi	r24, 0x0C	; 12
    1ac2:	61 e0       	ldi	r22, 0x01	; 1
    1ac4:	0e 94 4c 30 	call	0x6098	; 0x6098 <digitalWrite>
    if (bitRead(sequence, i)){
    1ac8:	f7 01       	movw	r30, r14
    1aca:	82 81       	ldd	r24, Z+2	; 0x02
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	02 c0       	rjmp	.+4      	; 0x1ad4 <_ZN9GB_Logger8logErrorER5Error+0xc0>
    1ad0:	95 95       	asr	r25
    1ad2:	87 95       	ror	r24
    1ad4:	ca 94       	dec	r12
    1ad6:	e2 f7       	brpl	.-8      	; 0x1ad0 <_ZN9GB_Logger8logErrorER5Error+0xbc>
    1ad8:	80 ff       	sbrs	r24, 0
    1ada:	05 c0       	rjmp	.+10     	; 0x1ae6 <_ZN9GB_Logger8logErrorER5Error+0xd2>
      delay(ERROR_LONG_SIGNAL_MS);
    1adc:	60 e9       	ldi	r22, 0x90	; 144
    1ade:	71 e0       	ldi	r23, 0x01	; 1
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	04 c0       	rjmp	.+8      	; 0x1aee <_ZN9GB_Logger8logErrorER5Error+0xda>
    } 
    else {
      delay(ERROR_SHORT_SIGNAL_MS);
    1ae6:	64 e6       	ldi	r22, 0x64	; 100
    1ae8:	70 e0       	ldi	r23, 0x00	; 0
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	0e 94 6f 2f 	call	0x5ede	; 0x5ede <delay>
    } 
    digitalWrite(ERROR_PIN, LOW);
    1af2:	8c e0       	ldi	r24, 0x0C	; 12
    1af4:	60 e0       	ldi	r22, 0x00	; 0
    1af6:	0e 94 4c 30 	call	0x6098	; 0x6098 <digitalWrite>
    delay(ERROR_DELAY_BETWEEN_SIGNALS_MS);
    1afa:	66 e9       	ldi	r22, 0x96	; 150
    1afc:	70 e0       	ldi	r23, 0x00	; 0
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	0e 94 6f 2f 	call	0x5ede	; 0x5ede <delay>
    1b06:	0f 5f       	subi	r16, 0xFF	; 255
    1b08:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0a:	64 01       	movw	r12, r8
    1b0c:	c0 1a       	sub	r12, r16
    1b0e:	d1 0a       	sbc	r13, r17
  
  
void notify() {
  digitalWrite(ERROR_PIN, LOW);
  delay(1000);
  for (int i = sequenceSize-1; i >= 0; i--){
    1b10:	0a 15       	cp	r16, r10
    1b12:	1b 05       	cpc	r17, r11
    1b14:	a9 f6       	brne	.-86     	; 0x1ac0 <_ZN9GB_Logger8logErrorER5Error+0xac>
      delay(ERROR_SHORT_SIGNAL_MS);
    } 
    digitalWrite(ERROR_PIN, LOW);
    delay(ERROR_DELAY_BETWEEN_SIGNALS_MS);
  }
  digitalWrite(ERROR_PIN, LOW);
    1b16:	8c e0       	ldi	r24, 0x0C	; 12
    1b18:	60 e0       	ldi	r22, 0x00	; 0
    1b1a:	0e 94 4c 30 	call	0x6098	; 0x6098 <digitalWrite>
  delay(1000);
    1b1e:	68 ee       	ldi	r22, 0xE8	; 232
    1b20:	73 e0       	ldi	r23, 0x03	; 3
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	0e 94 6f 2f 	call	0x5ede	; 0x5ede <delay>
    } 
    printDirtyLogRecord(logRecord, error.description, isStoredNow);
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
    1b2a:	0f 90       	pop	r0
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	cf 91       	pop	r28
    1b36:	df 91       	pop	r29
    1b38:	1f 91       	pop	r17
    1b3a:	0f 91       	pop	r16
    1b3c:	ff 90       	pop	r15
    1b3e:	ef 90       	pop	r14
    1b40:	df 90       	pop	r13
    1b42:	cf 90       	pop	r12
    1b44:	bf 90       	pop	r11
    1b46:	af 90       	pop	r10
    1b48:	9f 90       	pop	r9
    1b4a:	8f 90       	pop	r8
    1b4c:	08 95       	ret

00001b4e <_ZN13GB_Controller15checkFreeMemoryEv>:
    resetFunc(); //call
  }

  // discover-memory-overflow-errors-in-the-arduino-c-code
  static void checkFreeMemory(){
    if(freeMemory() < 200){ 
    1b4e:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <freeMemory>
    1b52:	88 3c       	cpi	r24, 0xC8	; 200
    1b54:	91 05       	cpc	r25, r1
    1b56:	2c f4       	brge	.+10     	; 0x1b62 <_ZN13GB_Controller15checkFreeMemoryEv+0x14>
      GB_Logger::logError(ERROR_MEMORY_LOW);   
    1b58:	84 e4       	ldi	r24, 0x44	; 68
    1b5a:	92 e0       	ldi	r25, 0x02	; 2
    1b5c:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <_ZN9GB_Logger8logErrorER5Error>
    1b60:	08 95       	ret
  static boolean stopLogError(Error &error){
    if (error.isStored){
    1b62:	80 91 4a 02 	lds	r24, 0x024A
    1b66:	88 23       	and	r24, r24
    1b68:	11 f0       	breq	.+4      	; 0x1b6e <_ZN13GB_Controller15checkFreeMemoryEv+0x20>
      error.isStored = false;
    1b6a:	10 92 4a 02 	sts	0x024A, r1
    1b6e:	08 95       	ret

00001b70 <_ZN14GB_Thermometer14getTemperatureEh>:
    }

    return true;
  }

  static float getTemperature(boolean forceLog = false){
    1b70:	8f 92       	push	r8
    1b72:	9f 92       	push	r9
    1b74:	af 92       	push	r10
    1b76:	bf 92       	push	r11
    1b78:	cf 92       	push	r12
    1b7a:	df 92       	push	r13
    1b7c:	ef 92       	push	r14
    1b7e:	ff 92       	push	r15
    1b80:	0f 93       	push	r16
    1b82:	1f 93       	push	r17
    1b84:	df 93       	push	r29
    1b86:	cf 93       	push	r28
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <_ZN14GB_Thermometer14getTemperatureEh+0x1a>
    1b8a:	00 d0       	rcall	.+0      	; 0x1b8c <_ZN14GB_Thermometer14getTemperatureEh+0x1c>
    1b8c:	0f 92       	push	r0
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
    1b92:	c8 2e       	mov	r12, r24

    if (statisticsTemperatureCount == 0){
    1b94:	20 91 f0 02 	lds	r18, 0x02F0
    1b98:	30 91 f1 02 	lds	r19, 0x02F1
    1b9c:	21 15       	cp	r18, r1
    1b9e:	31 05       	cpc	r19, r1
    1ba0:	49 f4       	brne	.+18     	; 0x1bb4 <_ZN14GB_Thermometer14getTemperatureEh+0x44>
      return workingTemperature; 
    1ba2:	80 90 e8 02 	lds	r8, 0x02E8
    1ba6:	90 90 e9 02 	lds	r9, 0x02E9
    1baa:	a0 90 ea 02 	lds	r10, 0x02EA
    1bae:	b0 90 eb 02 	lds	r11, 0x02EB
    1bb2:	5e c0       	rjmp	.+188    	; 0x1c70 <_ZN14GB_Thermometer14getTemperatureEh+0x100>
    }

    float freshTemperature = statisticsTemperatureSumm/statisticsTemperatureCount;
    1bb4:	b9 01       	movw	r22, r18
    1bb6:	88 27       	eor	r24, r24
    1bb8:	77 fd       	sbrc	r23, 7
    1bba:	80 95       	com	r24
    1bbc:	98 2f       	mov	r25, r24
    1bbe:	0e 94 fc 3a 	call	0x75f8	; 0x75f8 <__floatsisf>
    1bc2:	9b 01       	movw	r18, r22
    1bc4:	ac 01       	movw	r20, r24
    1bc6:	60 91 ec 02 	lds	r22, 0x02EC
    1bca:	70 91 ed 02 	lds	r23, 0x02ED
    1bce:	80 91 ee 02 	lds	r24, 0x02EE
    1bd2:	90 91 ef 02 	lds	r25, 0x02EF
    1bd6:	0e 94 61 3a 	call	0x74c2	; 0x74c2 <__divsf3>
    1bda:	4b 01       	movw	r8, r22
    1bdc:	5c 01       	movw	r10, r24

    if (((int)freshTemperature != (int)workingTemperature) || forceLog) {          
    1bde:	0e 94 c9 3a 	call	0x7592	; 0x7592 <__fixsfsi>
    1be2:	7b 01       	movw	r14, r22
    1be4:	8c 01       	movw	r16, r24
    1be6:	60 91 e8 02 	lds	r22, 0x02E8
    1bea:	70 91 e9 02 	lds	r23, 0x02E9
    1bee:	80 91 ea 02 	lds	r24, 0x02EA
    1bf2:	90 91 eb 02 	lds	r25, 0x02EB
    1bf6:	0e 94 c9 3a 	call	0x7592	; 0x7592 <__fixsfsi>
    1bfa:	e6 16       	cp	r14, r22
    1bfc:	f7 06       	cpc	r15, r23
    1bfe:	11 f4       	brne	.+4      	; 0x1c04 <_ZN14GB_Thermometer14getTemperatureEh+0x94>
    1c00:	cc 20       	and	r12, r12
    1c02:	f1 f0       	breq	.+60     	; 0x1c40 <_ZN14GB_Thermometer14getTemperatureEh+0xd0>
      GB_Logger::logTemperature((byte)freshTemperature);
    1c04:	c5 01       	movw	r24, r10
    1c06:	b4 01       	movw	r22, r8
    1c08:	0e 94 ce 3a 	call	0x759c	; 0x759c <__fixunssfsi>
    1c0c:	6b 01       	movw	r12, r22
    1c0e:	7c 01       	movw	r14, r24
    1c10:	16 2f       	mov	r17, r22
    1c12:	0e 94 37 20 	call	0x406e	; 0x406e <_Z3nowv>
    1c16:	69 83       	std	Y+1, r22	; 0x01
    1c18:	7a 83       	std	Y+2, r23	; 0x02
    1c1a:	8b 83       	std	Y+3, r24	; 0x03
    1c1c:	9c 83       	std	Y+4, r25	; 0x04
    1c1e:	10 6c       	ori	r17, 0xC0	; 192
    1c20:	1d 83       	std	Y+5, r17	; 0x05
  // Termometer events uses format [11TTTTTT].
  //   11 - prefix for termometer events
  //   TTTTTT - temperature [0..2^6] = [0..64]
  static void logTemperature(byte temperature){
    LogRecord logRecord(B11000000|temperature);
    boolean isStored = GB_StorageHelper::storeLogRecord(logRecord);
    1c22:	8e 01       	movw	r16, r28
    1c24:	0f 5f       	subi	r16, 0xFF	; 255
    1c26:	1f 4f       	sbci	r17, 0xFF	; 255
    1c28:	c8 01       	movw	r24, r16
    1c2a:	0e 94 53 06 	call	0xca6	; 0xca6 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord>
    1c2e:	48 2f       	mov	r20, r24
    printDirtyLogRecord(logRecord, FS(S_Temperature), isStored, temperature);
    1c30:	c8 01       	movw	r24, r16
    1c32:	63 e5       	ldi	r22, 0x53	; 83
    1c34:	72 e0       	ldi	r23, 0x02	; 2
    1c36:	2c 2d       	mov	r18, r12
    1c38:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh>
    GB_SerialHelper::printDirtyEnd();
    1c3c:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN15GB_SerialHelper13printDirtyEndEv>
    }

    workingTemperature = freshTemperature;
    1c40:	80 92 e8 02 	sts	0x02E8, r8
    1c44:	90 92 e9 02 	sts	0x02E9, r9
    1c48:	a0 92 ea 02 	sts	0x02EA, r10
    1c4c:	b0 92 eb 02 	sts	0x02EB, r11

    statisticsTemperatureSumm = 0.0;
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	a0 e0       	ldi	r26, 0x00	; 0
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	80 93 ec 02 	sts	0x02EC, r24
    1c5c:	90 93 ed 02 	sts	0x02ED, r25
    1c60:	a0 93 ee 02 	sts	0x02EE, r26
    1c64:	b0 93 ef 02 	sts	0x02EF, r27
    statisticsTemperatureCount = 0;
    1c68:	10 92 f1 02 	sts	0x02F1, r1
    1c6c:	10 92 f0 02 	sts	0x02F0, r1

    return workingTemperature;
  }
    1c70:	b4 01       	movw	r22, r8
    1c72:	c5 01       	movw	r24, r10
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	1f 91       	pop	r17
    1c84:	0f 91       	pop	r16
    1c86:	ff 90       	pop	r15
    1c88:	ef 90       	pop	r14
    1c8a:	df 90       	pop	r13
    1c8c:	cf 90       	pop	r12
    1c8e:	bf 90       	pop	r11
    1c90:	af 90       	pop	r10
    1c92:	9f 90       	pop	r9
    1c94:	8f 90       	pop	r8
    1c96:	08 95       	ret

00001c98 <_Z18updateGrowboxStatev>:
    1c98:	ef 92       	push	r14
    1c9a:	ff 92       	push	r15
    1c9c:	0f 93       	push	r16
    1c9e:	1f 93       	push	r17
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <_ZN14GB_Thermometer14getTemperatureEh>
    1ca6:	7b 01       	movw	r14, r22
    1ca8:	8c 01       	movw	r16, r24
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	4c e0       	ldi	r20, 0x0C	; 12
    1cb0:	52 e4       	ldi	r21, 0x42	; 66
    1cb2:	0e 94 ac 3b 	call	0x7758	; 0x7758 <__gesf2>
    1cb6:	88 23       	and	r24, r24
    1cb8:	5c f0       	brlt	.+22     	; 0x1cd0 <_Z18updateGrowboxStatev+0x38>
    1cba:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <_Z12turnOffLightv>
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	0e 94 c9 0c 	call	0x1992	; 0x1992 <_Z9turnOnFani>
    1cc6:	8d e3       	ldi	r24, 0x3D	; 61
    1cc8:	92 e0       	ldi	r25, 0x02	; 2
    1cca:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <_ZN9GB_Logger8logErrorER5Error>
    1cce:	45 c0       	rjmp	.+138    	; 0x1d5a <_Z18updateGrowboxStatev+0xc2>
    1cd0:	80 91 b8 01 	lds	r24, 0x01B8
    1cd4:	88 23       	and	r24, r24
    1cd6:	b9 f0       	breq	.+46     	; 0x1d06 <_Z18updateGrowboxStatev+0x6e>
    1cd8:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <_Z11turnOnLightv>
    1cdc:	c8 01       	movw	r24, r16
    1cde:	b7 01       	movw	r22, r14
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	48 eb       	ldi	r20, 0xB8	; 184
    1ce6:	51 e4       	ldi	r21, 0x41	; 65
    1ce8:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <__cmpsf2>
    1cec:	88 23       	and	r24, r24
    1cee:	74 f1       	brlt	.+92     	; 0x1d4c <_Z18updateGrowboxStatev+0xb4>
    1cf0:	c8 01       	movw	r24, r16
    1cf2:	b7 01       	movw	r22, r14
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	48 ee       	ldi	r20, 0xE8	; 232
    1cfa:	51 e4       	ldi	r21, 0x41	; 65
    1cfc:	0e 94 ac 3b 	call	0x7758	; 0x7758 <__gesf2>
    1d00:	18 16       	cp	r1, r24
    1d02:	24 f5       	brge	.+72     	; 0x1d4c <_Z18updateGrowboxStatev+0xb4>
    1d04:	16 c0       	rjmp	.+44     	; 0x1d32 <_Z18updateGrowboxStatev+0x9a>
    1d06:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <_Z12turnOffLightv>
    1d0a:	c8 01       	movw	r24, r16
    1d0c:	b7 01       	movw	r22, r14
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	48 e9       	ldi	r20, 0x98	; 152
    1d14:	51 e4       	ldi	r21, 0x41	; 65
    1d16:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <__cmpsf2>
    1d1a:	88 23       	and	r24, r24
    1d1c:	e4 f0       	brlt	.+56     	; 0x1d56 <_Z18updateGrowboxStatev+0xbe>
    1d1e:	c8 01       	movw	r24, r16
    1d20:	b7 01       	movw	r22, r14
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	40 ee       	ldi	r20, 0xE0	; 224
    1d28:	51 e4       	ldi	r21, 0x41	; 65
    1d2a:	0e 94 ac 3b 	call	0x7758	; 0x7758 <__gesf2>
    1d2e:	18 16       	cp	r1, r24
    1d30:	1c f4       	brge	.+6      	; 0x1d38 <_Z18updateGrowboxStatev+0xa0>
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	0c c0       	rjmp	.+24     	; 0x1d50 <_Z18updateGrowboxStatev+0xb8>
    1d38:	c8 01       	movw	r24, r16
    1d3a:	b7 01       	movw	r22, r14
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	48 ec       	ldi	r20, 0xC8	; 200
    1d42:	51 e4       	ldi	r21, 0x41	; 65
    1d44:	0e 94 ac 3b 	call	0x7758	; 0x7758 <__gesf2>
    1d48:	18 16       	cp	r1, r24
    1d4a:	2c f4       	brge	.+10     	; 0x1d56 <_Z18updateGrowboxStatev+0xbe>
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	0e 94 c9 0c 	call	0x1992	; 0x1992 <_Z9turnOnFani>
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <_Z18updateGrowboxStatev+0xc2>
    1d56:	0e 94 b7 0c 	call	0x196e	; 0x196e <_Z10turnOffFanv>
    1d5a:	1f 91       	pop	r17
    1d5c:	0f 91       	pop	r16
    1d5e:	ff 90       	pop	r15
    1d60:	ef 90       	pop	r14
    1d62:	08 95       	ret

00001d64 <_Z17switchToNightModev>:
    1d64:	80 91 b8 01 	lds	r24, 0x01B8
    1d68:	88 23       	and	r24, r24
    1d6a:	41 f0       	breq	.+16     	; 0x1d7c <_Z17switchToNightModev+0x18>
    1d6c:	10 92 b8 01 	sts	0x01B8, r1
    1d70:	8a e5       	ldi	r24, 0x5A	; 90
    1d72:	92 e0       	ldi	r25, 0x02	; 2
    1d74:	0e 94 86 0c 	call	0x190c	; 0x190c <_ZN9GB_Logger8logEventER5Event>
    1d78:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <_Z18updateGrowboxStatev>
    1d7c:	08 95       	ret

00001d7e <_Z15switchToDayModev>:
    1d7e:	80 91 b8 01 	lds	r24, 0x01B8
    1d82:	81 30       	cpi	r24, 0x01	; 1
    1d84:	49 f0       	breq	.+18     	; 0x1d98 <_Z15switchToDayModev+0x1a>
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	80 93 b8 01 	sts	0x01B8, r24
    1d8c:	85 e5       	ldi	r24, 0x55	; 85
    1d8e:	92 e0       	ldi	r25, 0x02	; 2
    1d90:	0e 94 86 0c 	call	0x190c	; 0x190c <_ZN9GB_Logger8logEventER5Event>
    1d94:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <_Z18updateGrowboxStatev>
    1d98:	08 95       	ret

00001d9a <_ZN15GB_SerialHelper11checkSerialEhh>:
      checkSerial(false, true);
    }
    //wifiExecuteCommand(F("at+con_status"));
  }

  static void checkSerial(boolean checkSerialMonitor, boolean checkWifi){
    1d9a:	cf 92       	push	r12
    1d9c:	df 92       	push	r13
    1d9e:	ef 92       	push	r14
    1da0:	ff 92       	push	r15
    1da2:	0f 93       	push	r16
    1da4:	1f 93       	push	r17
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	cd b7       	in	r28, 0x3d	; 61
    1dac:	de b7       	in	r29, 0x3e	; 62
    1dae:	27 97       	sbiw	r28, 0x07	; 7
    1db0:	0f b6       	in	r0, 0x3f	; 63
    1db2:	f8 94       	cli
    1db4:	de bf       	out	0x3e, r29	; 62
    1db6:	0f be       	out	0x3f, r0	; 63
    1db8:	cd bf       	out	0x3d, r28	; 61
    1dba:	06 2f       	mov	r16, r22

    boolean oldUseSerialMonitor  = useSerialMonitor;
    1dbc:	c0 90 7d 02 	lds	r12, 0x027D
    boolean oldUseSerialWifi     = useSerialWifi;
    1dc0:	d0 90 7e 02 	lds	r13, 0x027E
    boolean serialInUse          = (useSerialMonitor || useSerialWifi);
    1dc4:	cc 20       	and	r12, r12
    1dc6:	11 f0       	breq	.+4      	; 0x1dcc <_ZN15GB_SerialHelper11checkSerialEhh+0x32>
    1dc8:	11 e0       	ldi	r17, 0x01	; 1
    1dca:	04 c0       	rjmp	.+8      	; 0x1dd4 <_ZN15GB_SerialHelper11checkSerialEhh+0x3a>
    1dcc:	9d 2d       	mov	r25, r13
    1dce:	d1 10       	cpse	r13, r1
    1dd0:	91 e0       	ldi	r25, 0x01	; 1
    1dd2:	19 2f       	mov	r17, r25

    if (checkSerialMonitor){
    1dd4:	88 23       	and	r24, r24
    1dd6:	51 f0       	breq	.+20     	; 0x1dec <_ZN15GB_SerialHelper11checkSerialEhh+0x52>
      useSerialMonitor = (digitalRead(USE_SERIAL_MONOTOR_PIN) == SERIAL_ON);
    1dd8:	8b e0       	ldi	r24, 0x0B	; 11
    1dda:	0e 94 a0 30 	call	0x6140	; 0x6140 <digitalRead>
    1dde:	10 92 7d 02 	sts	0x027D, r1
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	19 f4       	brne	.+6      	; 0x1dec <_ZN15GB_SerialHelper11checkSerialEhh+0x52>
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	80 93 7d 02 	sts	0x027D, r24
    }

    // Start serial, if we need
    if (!serialInUse && (useSerialMonitor || checkWifi)){
    1dec:	11 23       	and	r17, r17
    1dee:	a9 f4       	brne	.+42     	; 0x1e1a <_ZN15GB_SerialHelper11checkSerialEhh+0x80>
    1df0:	80 91 7d 02 	lds	r24, 0x027D
    1df4:	88 23       	and	r24, r24
    1df6:	19 f4       	brne	.+6      	; 0x1dfe <_ZN15GB_SerialHelper11checkSerialEhh+0x64>
    1df8:	00 23       	and	r16, r16
    1dfa:	09 f4       	brne	.+2      	; 0x1dfe <_ZN15GB_SerialHelper11checkSerialEhh+0x64>
    1dfc:	ae c0       	rjmp	.+348    	; 0x1f5a <_ZN15GB_SerialHelper11checkSerialEhh+0x1c0>
      Serial.begin(115200);
    1dfe:	8f eb       	ldi	r24, 0xBF	; 191
    1e00:	94 e0       	ldi	r25, 0x04	; 4
    1e02:	40 e0       	ldi	r20, 0x00	; 0
    1e04:	52 ec       	ldi	r21, 0xC2	; 194
    1e06:	61 e0       	ldi	r22, 0x01	; 1
    1e08:	70 e0       	ldi	r23, 0x00	; 0
    1e0a:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <_ZN14HardwareSerial5beginEm>
      while (!Serial) {
    1e0e:	8f eb       	ldi	r24, 0xBF	; 191
    1e10:	94 e0       	ldi	r25, 0x04	; 4
    1e12:	0e 94 13 33 	call	0x6626	; 0x6626 <_ZN14HardwareSerialcvbEv>
    1e16:	88 23       	and	r24, r24
    1e18:	d1 f3       	breq	.-12     	; 0x1e0e <_ZN15GB_SerialHelper11checkSerialEhh+0x74>
    if (!serialInUse){
      return; 
    }

    boolean loadWifiConfiguration = false;
    if (checkWifi || s_restartWifi){
    1e1a:	00 23       	and	r16, r16
    1e1c:	29 f4       	brne	.+10     	; 0x1e28 <_ZN15GB_SerialHelper11checkSerialEhh+0x8e>
    1e1e:	80 91 7f 02 	lds	r24, 0x027F
    1e22:	88 23       	and	r24, r24
    1e24:	09 f4       	brne	.+2      	; 0x1e28 <_ZN15GB_SerialHelper11checkSerialEhh+0x8e>
    1e26:	4d c0       	rjmp	.+154    	; 0x1ec2 <_ZN15GB_SerialHelper11checkSerialEhh+0x128>
    1e28:	00 e0       	ldi	r16, 0x00	; 0
    1e2a:	10 e0       	ldi	r17, 0x00	; 0
      for (int i = 0; i<2; i++){ // Sometimes first command returns ERROR, two attempts
        cleanSerialBuffer();
        String input = wifiExecuteRawCommand(F("at+reset=0"), 500); // spec boot time 210
    1e2c:	7e 01       	movw	r14, r28
    1e2e:	08 94       	sec
    1e30:	e1 1c       	adc	r14, r1
    1e32:	f1 1c       	adc	r15, r1
    }

    boolean loadWifiConfiguration = false;
    if (checkWifi || s_restartWifi){
      for (int i = 0; i<2; i++){ // Sometimes first command returns ERROR, two attempts
        cleanSerialBuffer();
    1e34:	0e 94 57 07 	call	0xeae	; 0xeae <_ZN15GB_SerialHelper17cleanSerialBufferEv>
        String input = wifiExecuteRawCommand(F("at+reset=0"), 500); // spec boot time 210
    1e38:	c7 01       	movw	r24, r14
    1e3a:	62 e9       	ldi	r22, 0x92	; 146
    1e3c:	71 e0       	ldi	r23, 0x01	; 1
    1e3e:	44 ef       	ldi	r20, 0xF4	; 244
    1e40:	51 e0       	ldi	r21, 0x01	; 1
    1e42:	21 e0       	ldi	r18, 0x01	; 1
    1e44:	0e 94 8c 07 	call	0xf18	; 0xf18 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperih>
        useSerialWifi = input.startsWith(WIFI_RESPONSE_WELLCOME);
    1e48:	c7 01       	movw	r24, r14
    1e4a:	61 e0       	ldi	r22, 0x01	; 1
    1e4c:	72 e0       	ldi	r23, 0x02	; 2
    1e4e:	0e 94 b3 36 	call	0x6d66	; 0x6d66 <_ZNK6String10startsWithERKS_>
    1e52:	80 93 7e 02 	sts	0x027E, r24
        if (useSerialWifi) {
    1e56:	88 23       	and	r24, r24
    1e58:	61 f0       	breq	.+24     	; 0x1e72 <_ZN15GB_SerialHelper11checkSerialEhh+0xd8>
          s_restartWifi = false;
    1e5a:	10 92 7f 02 	sts	0x027F, r1
    1e5e:	80 91 fe 01 	lds	r24, 0x01FE
    1e62:	81 11       	cpse	r24, r1
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	18 2f       	mov	r17, r24
      return; 
    }

    boolean loadWifiConfiguration = false;
    if (checkWifi || s_restartWifi){
      for (int i = 0; i<2; i++){ // Sometimes first command returns ERROR, two attempts
    1e68:	ce 01       	movw	r24, r28
    1e6a:	01 96       	adiw	r24, 0x01	; 1
    1e6c:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
    1e70:	29 c0       	rjmp	.+82     	; 0x1ec4 <_ZN15GB_SerialHelper11checkSerialEhh+0x12a>
          if(g_isGrowboxStarted){
            loadWifiConfiguration = true;
          }
          break;
        }
        if (useSerialMonitor && input.length() > 0){
    1e72:	80 91 7d 02 	lds	r24, 0x027D
    1e76:	88 23       	and	r24, r24
    1e78:	d9 f0       	breq	.+54     	; 0x1eb0 <_ZN15GB_SerialHelper11checkSerialEhh+0x116>
    1e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7e:	89 2b       	or	r24, r25
    1e80:	b9 f0       	breq	.+46     	; 0x1eb0 <_ZN15GB_SerialHelper11checkSerialEhh+0x116>
          showWifiStatus(F("Not corrent wellcome message: "), false);
    1e82:	83 e7       	ldi	r24, 0x73	; 115
    1e84:	91 e0       	ldi	r25, 0x01	; 1
    1e86:	60 e0       	ldi	r22, 0x00	; 0
    1e88:	0e 94 70 07 	call	0xee0	; 0xee0 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
          GB_PrintDirty::printWithoutCRLF(input);
    1e8c:	c7 01       	movw	r24, r14
    1e8e:	0e 94 07 08 	call	0x100e	; 0x100e <_ZN13GB_PrintDirty16printWithoutCRLFERK6String>
          Serial.print(F(" > "));
    1e92:	8f eb       	ldi	r24, 0xBF	; 191
    1e94:	94 e0       	ldi	r25, 0x04	; 4
    1e96:	6f e6       	ldi	r22, 0x6F	; 111
    1e98:	71 e0       	ldi	r23, 0x01	; 1
    1e9a:	0e 94 a4 33 	call	0x6748	; 0x6748 <_ZN5Print5printEPK19__FlashStringHelper>
          GB_PrintDirty::printHEX(input); 
    1e9e:	c7 01       	movw	r24, r14
    1ea0:	0e 94 04 09 	call	0x1208	; 0x1208 <_ZN13GB_PrintDirty8printHEXERK6String>
          Serial.println();
    1ea4:	8f eb       	ldi	r24, 0xBF	; 191
    1ea6:	94 e0       	ldi	r25, 0x04	; 4
    1ea8:	0e 94 cf 33 	call	0x679e	; 0x679e <_ZN5Print7printlnEv>
          printDirtyEnd();
    1eac:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN15GB_SerialHelper13printDirtyEndEv>
      return; 
    }

    boolean loadWifiConfiguration = false;
    if (checkWifi || s_restartWifi){
      for (int i = 0; i<2; i++){ // Sometimes first command returns ERROR, two attempts
    1eb0:	c7 01       	movw	r24, r14
    1eb2:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
    1eb6:	0f 5f       	subi	r16, 0xFF	; 255
    1eb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eba:	02 30       	cpi	r16, 0x02	; 2
    1ebc:	11 05       	cpc	r17, r1
    1ebe:	09 f0       	breq	.+2      	; 0x1ec2 <_ZN15GB_SerialHelper11checkSerialEhh+0x128>
    1ec0:	b9 cf       	rjmp	.-142    	; 0x1e34 <_ZN15GB_SerialHelper11checkSerialEhh+0x9a>
    1ec2:	10 e0       	ldi	r17, 0x00	; 0
          printDirtyEnd();
        }
      }
    }

    if (useSerialMonitor != oldUseSerialMonitor){
    1ec4:	80 91 7d 02 	lds	r24, 0x027D
    1ec8:	8c 15       	cp	r24, r12
    1eca:	b9 f0       	breq	.+46     	; 0x1efa <_ZN15GB_SerialHelper11checkSerialEhh+0x160>
      Serial.print(F("Serial monitor: "));
    1ecc:	8f eb       	ldi	r24, 0xBF	; 191
    1ece:	94 e0       	ldi	r25, 0x04	; 4
    1ed0:	6e e5       	ldi	r22, 0x5E	; 94
    1ed2:	71 e0       	ldi	r23, 0x01	; 1
    1ed4:	0e 94 a4 33 	call	0x6748	; 0x6748 <_ZN5Print5printEPK19__FlashStringHelper>
      if (useSerialMonitor){
    1ed8:	80 91 7d 02 	lds	r24, 0x027D
    1edc:	88 23       	and	r24, r24
    1ede:	29 f0       	breq	.+10     	; 0x1eea <_ZN15GB_SerialHelper11checkSerialEhh+0x150>
        Serial.println(FS(S_enabled));
    1ee0:	8f eb       	ldi	r24, 0xBF	; 191
    1ee2:	94 e0       	ldi	r25, 0x04	; 4
    1ee4:	64 e2       	ldi	r22, 0x24	; 36
    1ee6:	71 e0       	ldi	r23, 0x01	; 1
    1ee8:	04 c0       	rjmp	.+8      	; 0x1ef2 <_ZN15GB_SerialHelper11checkSerialEhh+0x158>
      } 
      else {
        Serial.println(FS(S_disabled));
    1eea:	8f eb       	ldi	r24, 0xBF	; 191
    1eec:	94 e0       	ldi	r25, 0x04	; 4
    1eee:	6d e2       	ldi	r22, 0x2D	; 45
    1ef0:	71 e0       	ldi	r23, 0x01	; 1
    1ef2:	0e 94 ef 33 	call	0x67de	; 0x67de <_ZN5Print7printlnEPK19__FlashStringHelper>
      }
      printDirtyEnd();
    1ef6:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN15GB_SerialHelper13printDirtyEndEv>
    }
    if (useSerialWifi != oldUseSerialWifi && (useSerialMonitor || (useSerialMonitor != oldUseSerialMonitor ))){
    1efa:	90 91 7e 02 	lds	r25, 0x027E
    1efe:	9d 15       	cp	r25, r13
    1f00:	d9 f0       	breq	.+54     	; 0x1f38 <_ZN15GB_SerialHelper11checkSerialEhh+0x19e>
    1f02:	80 91 7d 02 	lds	r24, 0x027D
    1f06:	88 23       	and	r24, r24
    1f08:	11 f4       	brne	.+4      	; 0x1f0e <_ZN15GB_SerialHelper11checkSerialEhh+0x174>
    1f0a:	cc 20       	and	r12, r12
    1f0c:	a9 f0       	breq	.+42     	; 0x1f38 <_ZN15GB_SerialHelper11checkSerialEhh+0x19e>
      if(useSerialWifi){ 
    1f0e:	99 23       	and	r25, r25
    1f10:	59 f0       	breq	.+22     	; 0x1f28 <_ZN15GB_SerialHelper11checkSerialEhh+0x18e>
        Serial.print(F("Serial Wi-Fi:"));
    1f12:	8f eb       	ldi	r24, 0xBF	; 191
    1f14:	94 e0       	ldi	r25, 0x04	; 4
    1f16:	60 e5       	ldi	r22, 0x50	; 80
    1f18:	71 e0       	ldi	r23, 0x01	; 1
    1f1a:	0e 94 a4 33 	call	0x6748	; 0x6748 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.println(FS(S_connected)); // shows when useSerialMonitor=false
    1f1e:	8f eb       	ldi	r24, 0xBF	; 191
    1f20:	94 e0       	ldi	r25, 0x04	; 4
    1f22:	67 e3       	ldi	r22, 0x37	; 55
    1f24:	71 e0       	ldi	r23, 0x01	; 1
    1f26:	04 c0       	rjmp	.+8      	; 0x1f30 <_ZN15GB_SerialHelper11checkSerialEhh+0x196>
      } 
      else {
        Serial.println(FS(S_disconnected));
    1f28:	8f eb       	ldi	r24, 0xBF	; 191
    1f2a:	94 e0       	ldi	r25, 0x04	; 4
    1f2c:	62 e4       	ldi	r22, 0x42	; 66
    1f2e:	71 e0       	ldi	r23, 0x01	; 1
    1f30:	0e 94 ef 33 	call	0x67de	; 0x67de <_ZN5Print7printlnEPK19__FlashStringHelper>
      }
      printDirtyEnd();
    1f34:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN15GB_SerialHelper13printDirtyEndEv>
    }

    // Close Serial connection if nessesary
    boolean newSerialInUse = (useSerialMonitor || useSerialWifi);
    1f38:	80 91 7d 02 	lds	r24, 0x027D
    1f3c:	88 23       	and	r24, r24
    1f3e:	21 f4       	brne	.+8      	; 0x1f48 <_ZN15GB_SerialHelper11checkSerialEhh+0x1ae>
    1f40:	80 91 7e 02 	lds	r24, 0x027E
    1f44:	88 23       	and	r24, r24
    1f46:	29 f0       	breq	.+10     	; 0x1f52 <_ZN15GB_SerialHelper11checkSerialEhh+0x1b8>
    if (!newSerialInUse){
      Serial.end();
      return;
    } 
    else if (loadWifiConfiguration){
    1f48:	11 23       	and	r17, r17
    1f4a:	39 f0       	breq	.+14     	; 0x1f5a <_ZN15GB_SerialHelper11checkSerialEhh+0x1c0>
      startWifi();
    1f4c:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <_ZN15GB_SerialHelper9startWifiEv>
    1f50:	04 c0       	rjmp	.+8      	; 0x1f5a <_ZN15GB_SerialHelper11checkSerialEhh+0x1c0>
    }

    // Close Serial connection if nessesary
    boolean newSerialInUse = (useSerialMonitor || useSerialWifi);
    if (!newSerialInUse){
      Serial.end();
    1f52:	8f eb       	ldi	r24, 0xBF	; 191
    1f54:	94 e0       	ldi	r25, 0x04	; 4
    1f56:	0e 94 03 32 	call	0x6406	; 0x6406 <_ZN14HardwareSerial3endEv>
      return;
    } 
    else if (loadWifiConfiguration){
      startWifi();
    }
  }
    1f5a:	27 96       	adiw	r28, 0x07	; 7
    1f5c:	0f b6       	in	r0, 0x3f	; 63
    1f5e:	f8 94       	cli
    1f60:	de bf       	out	0x3e, r29	; 62
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	cd bf       	out	0x3d, r28	; 61
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	1f 91       	pop	r17
    1f6c:	0f 91       	pop	r16
    1f6e:	ff 90       	pop	r15
    1f70:	ef 90       	pop	r14
    1f72:	df 90       	pop	r13
    1f74:	cf 90       	pop	r12
    1f76:	08 95       	ret

00001f78 <_Z16updateWiFiStatusv>:
  }



  static void updateWiFiStatus(){
    if (s_restartWifi){
    1f78:	80 91 7f 02 	lds	r24, 0x027F
    1f7c:	88 23       	and	r24, r24
    1f7e:	21 f0       	breq	.+8      	; 0x1f88 <_Z16updateWiFiStatusv+0x10>
      checkSerial(false, true);
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	61 e0       	ldi	r22, 0x01	; 1
    1f84:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZN15GB_SerialHelper11checkSerialEhh>
    1f88:	08 95       	ret

00001f8a <_ZN14GB_Thermometer16updateStatisticsEv>:

    dallasTemperature.getAddress(oneWireAddress, 0); // search for devices on the bus and assign based on an index.
  }

  // TODO rename
  static boolean updateStatistics(){
    1f8a:	ef 92       	push	r14
    1f8c:	ff 92       	push	r15
    1f8e:	0f 93       	push	r16
    1f90:	1f 93       	push	r17

    if(!dallasTemperature.requestTemperaturesByAddress(oneWireAddress)){
    1f92:	8d ec       	ldi	r24, 0xCD	; 205
    1f94:	92 e0       	ldi	r25, 0x02	; 2
    1f96:	60 ee       	ldi	r22, 0xE0	; 224
    1f98:	72 e0       	ldi	r23, 0x02	; 2
    1f9a:	0e 94 f3 2c 	call	0x59e6	; 0x59e6 <_ZN17DallasTemperature28requestTemperaturesByAddressEPh>
    1f9e:	88 23       	and	r24, r24
    1fa0:	19 f4       	brne	.+6      	; 0x1fa8 <_ZN14GB_Thermometer16updateStatisticsEv+0x1e>
      GB_Logger::logError(ERROR_TERMOMETER_DISCONNECTED);
    1fa2:	8f e2       	ldi	r24, 0x2F	; 47
    1fa4:	92 e0       	ldi	r25, 0x02	; 2
    1fa6:	0e c0       	rjmp	.+28     	; 0x1fc4 <_ZN14GB_Thermometer16updateStatisticsEv+0x3a>
      return false;
    };

    float freshTemperature = dallasTemperature.getTempC(oneWireAddress);
    1fa8:	8d ec       	ldi	r24, 0xCD	; 205
    1faa:	92 e0       	ldi	r25, 0x02	; 2
    1fac:	60 ee       	ldi	r22, 0xE0	; 224
    1fae:	72 e0       	ldi	r23, 0x02	; 2
    1fb0:	0e 94 89 2c 	call	0x5912	; 0x5912 <_ZN17DallasTemperature8getTempCEPh>
    1fb4:	7b 01       	movw	r14, r22
    1fb6:	8c 01       	movw	r16, r24

    if ((int)freshTemperature == 0){
    1fb8:	0e 94 c9 3a 	call	0x7592	; 0x7592 <__fixsfsi>
    1fbc:	67 2b       	or	r22, r23
    1fbe:	31 f4       	brne	.+12     	; 0x1fcc <_ZN14GB_Thermometer16updateStatisticsEv+0x42>
      GB_Logger::logError(ERROR_TERMOMETER_ZERO_VALUE);  
    1fc0:	86 e3       	ldi	r24, 0x36	; 54
    1fc2:	92 e0       	ldi	r25, 0x02	; 2
    1fc4:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <_ZN9GB_Logger8logErrorER5Error>
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	39 c0       	rjmp	.+114    	; 0x203e <_ZN14GB_Thermometer16updateStatisticsEv+0xb4>
      return false;
    }

    statisticsTemperatureSumm += freshTemperature;
    1fcc:	60 91 ec 02 	lds	r22, 0x02EC
    1fd0:	70 91 ed 02 	lds	r23, 0x02ED
    1fd4:	80 91 ee 02 	lds	r24, 0x02EE
    1fd8:	90 91 ef 02 	lds	r25, 0x02EF
    1fdc:	a8 01       	movw	r20, r16
    1fde:	97 01       	movw	r18, r14
    1fe0:	0e 94 f9 39 	call	0x73f2	; 0x73f2 <__addsf3>
    1fe4:	60 93 ec 02 	sts	0x02EC, r22
    1fe8:	70 93 ed 02 	sts	0x02ED, r23
    1fec:	80 93 ee 02 	sts	0x02EE, r24
    1ff0:	90 93 ef 02 	sts	0x02EF, r25
    statisticsTemperatureCount++;
    1ff4:	20 91 f0 02 	lds	r18, 0x02F0
    1ff8:	30 91 f1 02 	lds	r19, 0x02F1
    1ffc:	2f 5f       	subi	r18, 0xFF	; 255
    1ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    2000:	30 93 f1 02 	sts	0x02F1, r19
    2004:	20 93 f0 02 	sts	0x02F0, r18
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
  static boolean stopLogError(Error &error){
    if (error.isStored){
    2008:	80 91 3c 02 	lds	r24, 0x023C
    200c:	88 23       	and	r24, r24
    200e:	11 f4       	brne	.+4      	; 0x2014 <_ZN14GB_Thermometer16updateStatisticsEv+0x8a>
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	03 c0       	rjmp	.+6      	; 0x201a <_ZN14GB_Thermometer16updateStatisticsEv+0x90>
      error.isStored = false;
    2014:	10 92 3c 02 	sts	0x023C, r1
    2018:	91 e0       	ldi	r25, 0x01	; 1
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
  static boolean stopLogError(Error &error){
    if (error.isStored){
    201a:	80 91 35 02 	lds	r24, 0x0235
    201e:	88 23       	and	r24, r24
    2020:	19 f0       	breq	.+6      	; 0x2028 <_ZN14GB_Thermometer16updateStatisticsEv+0x9e>
      error.isStored = false;
    2022:	10 92 35 02 	sts	0x0235, r1
    2026:	81 e0       	ldi	r24, 0x01	; 1

    boolean forceLog = 
      GB_Logger::stopLogError(ERROR_TERMOMETER_ZERO_VALUE) |
      GB_Logger::stopLogError(ERROR_TERMOMETER_DISCONNECTED); 
    if (forceLog) {
    2028:	89 2b       	or	r24, r25
    202a:	11 f0       	breq	.+4      	; 0x2030 <_ZN14GB_Thermometer16updateStatisticsEv+0xa6>
      getTemperature(true);
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	04 c0       	rjmp	.+8      	; 0x2038 <_ZN14GB_Thermometer16updateStatisticsEv+0xae>
    }
    else if (statisticsTemperatureCount > 100){
    2030:	25 36       	cpi	r18, 0x65	; 101
    2032:	31 05       	cpc	r19, r1
    2034:	1c f0       	brlt	.+6      	; 0x203c <_ZN14GB_Thermometer16updateStatisticsEv+0xb2>
      getTemperature(); // prevents overflow 
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <_ZN14GB_Thermometer14getTemperatureEh>
    203c:	81 e0       	ldi	r24, 0x01	; 1
    }

    return true;
  }
    203e:	1f 91       	pop	r17
    2040:	0f 91       	pop	r16
    2042:	ff 90       	pop	r15
    2044:	ef 90       	pop	r14
    2046:	08 95       	ret

00002048 <_Z27updateThermometerStatisticsv>:
    2048:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <_ZN14GB_Thermometer16updateStatisticsEv>
    204c:	08 95       	ret

0000204e <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_>:
    else {
      showWifiStatus(F("Start failed"));
    }
  }

  static boolean handleSerialEvent(String &input, boolean &isWifiRequest, byte &wifiPortDescriptor){
    204e:	6f 92       	push	r6
    2050:	7f 92       	push	r7
    2052:	8f 92       	push	r8
    2054:	9f 92       	push	r9
    2056:	af 92       	push	r10
    2058:	bf 92       	push	r11
    205a:	cf 92       	push	r12
    205c:	df 92       	push	r13
    205e:	ef 92       	push	r14
    2060:	ff 92       	push	r15
    2062:	0f 93       	push	r16
    2064:	1f 93       	push	r17
    2066:	df 93       	push	r29
    2068:	cf 93       	push	r28
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
    206e:	6d 97       	sbiw	r28, 0x1d	; 29
    2070:	0f b6       	in	r0, 0x3f	; 63
    2072:	f8 94       	cli
    2074:	de bf       	out	0x3e, r29	; 62
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	cd bf       	out	0x3d, r28	; 61
    207a:	7c 01       	movw	r14, r24
    207c:	4b 01       	movw	r8, r22
    207e:	5a 01       	movw	r10, r20

    input = "";  
    2080:	6b e2       	ldi	r22, 0x2B	; 43
    2082:	71 e0       	ldi	r23, 0x01	; 1
    2084:	0e 94 32 38 	call	0x7064	; 0x7064 <_ZN6StringaSEPKc>
    isWifiRequest = false; 
    2088:	f4 01       	movw	r30, r8
    208a:	10 82       	st	Z, r1
    wifiPortDescriptor = 0xFF;
    208c:	8f ef       	ldi	r24, 0xFF	; 255
    208e:	f5 01       	movw	r30, r10
    2090:	80 83       	st	Z, r24

    boolean isReadError = false;
    2092:	19 82       	std	Y+1, r1	; 0x01

    boolean isWifiRequestClientConnected = false;
    boolean isWifiRequestClientDisconnected = false;

    while (Serial.available()){
      input += (char) readByteFromSerialBuffer(isReadError); // Always use casting to (char) with String object!
    2094:	8e 01       	movw	r16, r28
    2096:	0f 5f       	subi	r16, 0xFF	; 255
    2098:	1f 4f       	sbci	r17, 0xFF	; 255
    209a:	da c0       	rjmp	.+436    	; 0x2250 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x202>
    209c:	c8 01       	movw	r24, r16
    209e:	0e 94 3d 07 	call	0xe7a	; 0xe7a <_ZN15GB_SerialHelper24readByteFromSerialBufferERh>
    20a2:	68 2f       	mov	r22, r24
    20a4:	c7 01       	movw	r24, r14
    20a6:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <_ZN6String6concatEc>

      if (input.equals(WIFI_REQUEST_HEADER)){ // length compires first 
    20aa:	c7 01       	movw	r24, r14
    20ac:	66 e1       	ldi	r22, 0x16	; 22
    20ae:	72 e0       	ldi	r23, 0x02	; 2
    20b0:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <_ZNK6String6equalsERKS_>
    20b4:	88 23       	and	r24, r24
    20b6:	09 f4       	brne	.+2      	; 0x20ba <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x6c>
    20b8:	b8 c0       	rjmp	.+368    	; 0x222a <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x1dc>
        input = "";     
    20ba:	c7 01       	movw	r24, r14
    20bc:	6b e2       	ldi	r22, 0x2B	; 43
    20be:	71 e0       	ldi	r23, 0x01	; 1
    20c0:	0e 94 32 38 	call	0x7064	; 0x7064 <_ZN6StringaSEPKc>
        byte firstRequestHeaderByte = readByteFromSerialBuffer(isReadError); // first byte
    20c4:	c8 01       	movw	r24, r16
    20c6:	0e 94 3d 07 	call	0xe7a	; 0xe7a <_ZN15GB_SerialHelper24readByteFromSerialBufferERh>
    20ca:	98 2f       	mov	r25, r24

        // Serial.print(F("WIFI-T> ")); Serial.println((byte)firstRequestHeaderByte, HEX); printDirtyEnd();

        if (firstRequestHeaderByte <= 0x07) {   
    20cc:	88 30       	cpi	r24, 0x08	; 8
    20ce:	08 f0       	brcs	.+2      	; 0x20d2 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x84>
    20d0:	92 c0       	rjmp	.+292    	; 0x21f6 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x1a8>
          // Recive data
          isWifiRequest = true;
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	f4 01       	movw	r30, r8
    20d6:	80 83       	st	Z, r24

          wifiPortDescriptor = firstRequestHeaderByte;
    20d8:	f5 01       	movw	r30, r10
    20da:	90 83       	st	Z, r25
    20dc:	00 e0       	ldi	r16, 0x00	; 0
    20de:	10 e0       	ldi	r17, 0x00	; 0
   return (index) == length; 
   }
   */
  static void skipByteFromSerialBuffer(boolean &isError, byte length = 1){
    int index = 0;
    while ((index < length) && Serial.available()){
    20e0:	8f eb       	ldi	r24, 0xBF	; 191
    20e2:	94 e0       	ldi	r25, 0x04	; 4
    20e4:	0e 94 69 32 	call	0x64d2	; 0x64d2 <_ZN14HardwareSerial9availableEv>
    20e8:	89 2b       	or	r24, r25
    20ea:	09 f4       	brne	.+2      	; 0x20ee <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0xa0>
    20ec:	30 c1       	rjmp	.+608    	; 0x234e <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x300>
      Serial.read();
    20ee:	8f eb       	ldi	r24, 0xBF	; 191
    20f0:	94 e0       	ldi	r25, 0x04	; 4
    20f2:	0e 94 9a 32 	call	0x6534	; 0x6534 <_ZN14HardwareSerial4readEv>
      index++;
    20f6:	0f 5f       	subi	r16, 0xFF	; 255
    20f8:	1f 4f       	sbci	r17, 0xFF	; 255
   return (index) == length; 
   }
   */
  static void skipByteFromSerialBuffer(boolean &isError, byte length = 1){
    int index = 0;
    while ((index < length) && Serial.available()){
    20fa:	08 30       	cpi	r16, 0x08	; 8
    20fc:	11 05       	cpc	r17, r1
    20fe:	09 f4       	brne	.+2      	; 0x2102 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0xb4>
    2100:	26 c1       	rjmp	.+588    	; 0x234e <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x300>
    2102:	ee cf       	rjmp	.-36     	; 0x20e0 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x92>
          // Optimization
          skipByteFromSerialBuffer(isReadError, 8); // skip Destination port, IP and data length

          // Read first line   
          while (Serial.available() && !input.endsWith("\r\n")){
            input += (char) readByteFromSerialBuffer(isReadError); // Always use casting to (char) with String object!
    2104:	c3 01       	movw	r24, r6
    2106:	0e 94 3d 07 	call	0xe7a	; 0xe7a <_ZN15GB_SerialHelper24readByteFromSerialBufferERh>
    210a:	68 2f       	mov	r22, r24
    210c:	c7 01       	movw	r24, r14
    210e:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <_ZN6String6concatEc>
    2112:	09 c0       	rjmp	.+18     	; 0x2126 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0xd8>
           */
          // Optimization
          skipByteFromSerialBuffer(isReadError, 8); // skip Destination port, IP and data length

          // Read first line   
          while (Serial.available() && !input.endsWith("\r\n")){
    2114:	32 e0       	ldi	r19, 0x02	; 2
    2116:	c3 2e       	mov	r12, r19
    2118:	d1 2c       	mov	r13, r1
    211a:	cc 0e       	add	r12, r28
    211c:	dd 1e       	adc	r13, r29
            input += (char) readByteFromSerialBuffer(isReadError); // Always use casting to (char) with String object!
    211e:	3e 01       	movw	r6, r28
    2120:	08 94       	sec
    2122:	61 1c       	adc	r6, r1
    2124:	71 1c       	adc	r7, r1
           */
          // Optimization
          skipByteFromSerialBuffer(isReadError, 8); // skip Destination port, IP and data length

          // Read first line   
          while (Serial.available() && !input.endsWith("\r\n")){
    2126:	8f eb       	ldi	r24, 0xBF	; 191
    2128:	94 e0       	ldi	r25, 0x04	; 4
    212a:	0e 94 69 32 	call	0x64d2	; 0x64d2 <_ZN14HardwareSerial9availableEv>
    212e:	89 2b       	or	r24, r25
    2130:	79 f0       	breq	.+30     	; 0x2150 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x102>
    2132:	c6 01       	movw	r24, r12
    2134:	6f e2       	ldi	r22, 0x2F	; 47
    2136:	71 e0       	ldi	r23, 0x01	; 1
    2138:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
    213c:	c7 01       	movw	r24, r14
    213e:	b6 01       	movw	r22, r12
    2140:	0e 94 02 36 	call	0x6c04	; 0x6c04 <_ZNK6String8endsWithERKS_>
    2144:	18 2f       	mov	r17, r24
    2146:	c6 01       	movw	r24, r12
    2148:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
    214c:	11 23       	and	r17, r17
    214e:	d1 f2       	breq	.-76     	; 0x2104 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0xb6>
            input += (char) readByteFromSerialBuffer(isReadError); // Always use casting to (char) with String object!
          }

          //Serial.print(F("WIFI-T> ")); Serial.println(input); printDirtyEnd(); 

          if (input.startsWith("GET /") && input.endsWith("\r\n")){
    2150:	8e 01       	movw	r16, r28
    2152:	07 5f       	subi	r16, 0xF7	; 247
    2154:	1f 4f       	sbci	r17, 0xFF	; 255
    2156:	c8 01       	movw	r24, r16
    2158:	62 e3       	ldi	r22, 0x32	; 50
    215a:	71 e0       	ldi	r23, 0x01	; 1
    215c:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
    2160:	c7 01       	movw	r24, r14
    2162:	b8 01       	movw	r22, r16
    2164:	0e 94 b3 36 	call	0x6d66	; 0x6d66 <_ZNK6String10startsWithERKS_>
    2168:	88 23       	and	r24, r24
    216a:	11 f4       	brne	.+4      	; 0x2170 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x122>
    216c:	10 e0       	ldi	r17, 0x00	; 0
    216e:	13 c0       	rjmp	.+38     	; 0x2196 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x148>
    2170:	8e 01       	movw	r16, r28
    2172:	00 5f       	subi	r16, 0xF0	; 240
    2174:	1f 4f       	sbci	r17, 0xFF	; 255
    2176:	c8 01       	movw	r24, r16
    2178:	6f e2       	ldi	r22, 0x2F	; 47
    217a:	71 e0       	ldi	r23, 0x01	; 1
    217c:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
    2180:	c7 01       	movw	r24, r14
    2182:	b8 01       	movw	r22, r16
    2184:	0e 94 02 36 	call	0x6c04	; 0x6c04 <_ZNK6String8endsWithERKS_>
    2188:	81 11       	cpse	r24, r1
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	18 2f       	mov	r17, r24
    218e:	ce 01       	movw	r24, r28
    2190:	40 96       	adiw	r24, 0x10	; 16
    2192:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
    2196:	ce 01       	movw	r24, r28
    2198:	09 96       	adiw	r24, 0x09	; 9
    219a:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
    219e:	11 23       	and	r17, r17
    21a0:	19 f1       	breq	.+70     	; 0x21e8 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x19a>
            int lastIndex = input.indexOf(' ', 4);
    21a2:	c7 01       	movw	r24, r14
    21a4:	60 e2       	ldi	r22, 0x20	; 32
    21a6:	44 e0       	ldi	r20, 0x04	; 4
    21a8:	50 e0       	ldi	r21, 0x00	; 0
    21aa:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <_ZNK6String7indexOfEcj>
    21ae:	9c 01       	movw	r18, r24
            if (lastIndex == -1){
    21b0:	ff ef       	ldi	r31, 0xFF	; 255
    21b2:	8f 3f       	cpi	r24, 0xFF	; 255
    21b4:	9f 07       	cpc	r25, r31
    21b6:	29 f4       	brne	.+10     	; 0x21c2 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x174>
              lastIndex = input.length()-2; // \r\n-1
    21b8:	f7 01       	movw	r30, r14
    21ba:	24 81       	ldd	r18, Z+4	; 0x04
    21bc:	35 81       	ldd	r19, Z+5	; 0x05
    21be:	22 50       	subi	r18, 0x02	; 2
    21c0:	30 40       	sbci	r19, 0x00	; 0
            }
            input = input.substring(4, lastIndex);             
    21c2:	8e 01       	movw	r16, r28
    21c4:	09 5e       	subi	r16, 0xE9	; 233
    21c6:	1f 4f       	sbci	r17, 0xFF	; 255
    21c8:	c8 01       	movw	r24, r16
    21ca:	b7 01       	movw	r22, r14
    21cc:	44 e0       	ldi	r20, 0x04	; 4
    21ce:	50 e0       	ldi	r21, 0x00	; 0
    21d0:	0e 94 96 38 	call	0x712c	; 0x712c <_ZNK6String9substringEjj>
    21d4:	c7 01       	movw	r24, r14
    21d6:	b8 01       	movw	r22, r16
    21d8:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <_ZN6StringaSERKS_>
    21dc:	c8 01       	movw	r24, r16
    21de:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
            //Serial.print(F("WIFI-T> ")); Serial.println(input); printDirtyEnd(); 

            cleanSerialBuffer(); // We are not interested in data which is remained
    21e2:	0e 94 57 07 	call	0xeae	; 0xeae <_ZN15GB_SerialHelper17cleanSerialBufferEv>
    21e6:	3b c0       	rjmp	.+118    	; 0x225e <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x210>

            break; // outside cicrle
          } 
          cleanSerialBuffer();
    21e8:	0e 94 57 07 	call	0xeae	; 0xeae <_ZN15GB_SerialHelper17cleanSerialBufferEv>
          closeConnection(wifiPortDescriptor);  // This is garbage request, only one attempt allowed
    21ec:	f5 01       	movw	r30, r10
    21ee:	80 81       	ld	r24, Z
    21f0:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <_ZN15GB_SerialHelper15closeConnectionEh>
    21f4:	96 c0       	rjmp	.+300    	; 0x2322 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x2d4>
        } 
        else if (firstRequestHeaderByte == 0x80){
    21f6:	80 38       	cpi	r24, 0x80	; 128
    21f8:	49 f4       	brne	.+18     	; 0x220c <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x1be>
          // TCP client connected
          isWifiRequestClientConnected = true;         
          wifiPortDescriptor = readByteFromSerialBuffer(isReadError); // second byte
    21fa:	c8 01       	movw	r24, r16
    21fc:	0e 94 3d 07 	call	0xe7a	; 0xe7a <_ZN15GB_SerialHelper24readByteFromSerialBufferERh>
    2200:	f5 01       	movw	r30, r10
    2202:	80 83       	st	Z, r24
          cleanSerialBuffer();
    2204:	0e 94 57 07 	call	0xeae	; 0xeae <_ZN15GB_SerialHelper17cleanSerialBufferEv>
    2208:	11 e0       	ldi	r17, 0x01	; 1
    220a:	2a c0       	rjmp	.+84     	; 0x2260 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x212>
          break; // outside cicrle
        }           
        else if (firstRequestHeaderByte == 0x81){
    220c:	81 38       	cpi	r24, 0x81	; 129
    220e:	51 f4       	brne	.+20     	; 0x2224 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x1d6>
          // TCP client disconnected
          isWifiRequestClientDisconnected = true;
          wifiPortDescriptor = readByteFromSerialBuffer(isReadError); // second byte
    2210:	c8 01       	movw	r24, r16
    2212:	0e 94 3d 07 	call	0xe7a	; 0xe7a <_ZN15GB_SerialHelper24readByteFromSerialBufferERh>
    2216:	f5 01       	movw	r30, r10
    2218:	80 83       	st	Z, r24
          cleanSerialBuffer();
    221a:	0e 94 57 07 	call	0xeae	; 0xeae <_ZN15GB_SerialHelper17cleanSerialBufferEv>
    221e:	10 e0       	ldi	r17, 0x00	; 0
    2220:	01 e0       	ldi	r16, 0x01	; 1
    2222:	1f c0       	rjmp	.+62     	; 0x2262 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x214>
          break; // outside circle
        } 
        else {
          // Data recive failed or undocumented command
          cleanSerialBuffer();     
    2224:	0e 94 57 07 	call	0xeae	; 0xeae <_ZN15GB_SerialHelper17cleanSerialBufferEv>
    2228:	7c c0       	rjmp	.+248    	; 0x2322 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x2d4>
        }
        return false;
      }
      else if (input.startsWith(WIFI_RESPONSE_WELLCOME) || input.startsWith(WIFI_RESPONSE_ERROR)){
    222a:	c7 01       	movw	r24, r14
    222c:	61 e0       	ldi	r22, 0x01	; 1
    222e:	72 e0       	ldi	r23, 0x02	; 2
    2230:	0e 94 b3 36 	call	0x6d66	; 0x6d66 <_ZNK6String10startsWithERKS_>
    2234:	88 23       	and	r24, r24
    2236:	39 f4       	brne	.+14     	; 0x2246 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x1f8>
    2238:	c7 01       	movw	r24, r14
    223a:	68 e0       	ldi	r22, 0x08	; 8
    223c:	72 e0       	ldi	r23, 0x02	; 2
    223e:	0e 94 b3 36 	call	0x6d66	; 0x6d66 <_ZNK6String10startsWithERKS_>
    2242:	88 23       	and	r24, r24
    2244:	29 f0       	breq	.+10     	; 0x2250 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x202>
        checkSerial(false, true); // manual restart
    2246:	80 e0       	ldi	r24, 0x00	; 0
    2248:	61 e0       	ldi	r22, 0x01	; 1
    224a:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZN15GB_SerialHelper11checkSerialEhh>
    224e:	69 c0       	rjmp	.+210    	; 0x2322 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x2d4>
    boolean isReadError = false;

    boolean isWifiRequestClientConnected = false;
    boolean isWifiRequestClientDisconnected = false;

    while (Serial.available()){
    2250:	8f eb       	ldi	r24, 0xBF	; 191
    2252:	94 e0       	ldi	r25, 0x04	; 4
    2254:	0e 94 69 32 	call	0x64d2	; 0x64d2 <_ZN14HardwareSerial9availableEv>
    2258:	89 2b       	or	r24, r25
    225a:	09 f0       	breq	.+2      	; 0x225e <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x210>
    225c:	1f cf       	rjmp	.-450    	; 0x209c <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x4e>
    225e:	10 e0       	ldi	r17, 0x00	; 0
    2260:	00 e0       	ldi	r16, 0x00	; 0
        return false;
      }

    } // while (Serial.available()) 

    if (!isWifiRequest){
    2262:	f4 01       	movw	r30, r8
    2264:	80 81       	ld	r24, Z
    2266:	88 23       	and	r24, r24
    2268:	19 f4       	brne	.+6      	; 0x2270 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x222>
      input.trim();
    226a:	c7 01       	movw	r24, r14
    226c:	0e 94 75 35 	call	0x6aea	; 0x6aea <_ZN6String4trimEv>
    }

    if (useSerialMonitor) {
    2270:	80 91 7d 02 	lds	r24, 0x027D
    2274:	88 23       	and	r24, r24
    2276:	09 f4       	brne	.+2      	; 0x227a <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x22c>
    2278:	46 c0       	rjmp	.+140    	; 0x2306 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x2b8>
      if (isWifiRequestClientConnected || isWifiRequestClientDisconnected) {
    227a:	11 23       	and	r17, r17
    227c:	11 f4       	brne	.+4      	; 0x2282 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x234>
    227e:	00 23       	and	r16, r16
    2280:	d9 f0       	breq	.+54     	; 0x22b8 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x26a>
        showWifiStatus(F("Client ")); 
    2282:	85 e8       	ldi	r24, 0x85	; 133
    2284:	92 e0       	ldi	r25, 0x02	; 2
    2286:	61 e0       	ldi	r22, 0x01	; 1
    2288:	0e 94 70 07 	call	0xee0	; 0xee0 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
        Serial.print(wifiPortDescriptor);
    228c:	8f eb       	ldi	r24, 0xBF	; 191
    228e:	94 e0       	ldi	r25, 0x04	; 4
    2290:	f5 01       	movw	r30, r10
    2292:	60 81       	ld	r22, Z
    2294:	4a e0       	ldi	r20, 0x0A	; 10
    2296:	50 e0       	ldi	r21, 0x00	; 0
    2298:	0e 94 a3 34 	call	0x6946	; 0x6946 <_ZN5Print5printEhi>
        if (isWifiRequestClientConnected){
    229c:	11 23       	and	r17, r17
    229e:	29 f0       	breq	.+10     	; 0x22aa <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x25c>
          Serial.println(FS(S_connected));
    22a0:	8f eb       	ldi	r24, 0xBF	; 191
    22a2:	94 e0       	ldi	r25, 0x04	; 4
    22a4:	67 e3       	ldi	r22, 0x37	; 55
    22a6:	71 e0       	ldi	r23, 0x01	; 1
    22a8:	04 c0       	rjmp	.+8      	; 0x22b2 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x264>
        } 
        else {
          Serial.println(FS(S_disconnected));
    22aa:	8f eb       	ldi	r24, 0xBF	; 191
    22ac:	94 e0       	ldi	r25, 0x04	; 4
    22ae:	62 e4       	ldi	r22, 0x42	; 66
    22b0:	71 e0       	ldi	r23, 0x01	; 1
    22b2:	0e 94 ef 33 	call	0x67de	; 0x67de <_ZN5Print7printlnEPK19__FlashStringHelper>
    22b6:	25 c0       	rjmp	.+74     	; 0x2302 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x2b4>
        }

      } 
      else {
        if (isWifiRequest){  
    22b8:	f4 01       	movw	r30, r8
    22ba:	80 81       	ld	r24, Z
    22bc:	88 23       	and	r24, r24
    22be:	59 f0       	breq	.+22     	; 0x22d6 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x288>
          showWifiStatus(F("GET "), false);
    22c0:	80 e8       	ldi	r24, 0x80	; 128
    22c2:	92 e0       	ldi	r25, 0x02	; 2
    22c4:	60 e0       	ldi	r22, 0x00	; 0
    22c6:	0e 94 70 07 	call	0xee0	; 0xee0 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
          Serial.println(input);
    22ca:	8f eb       	ldi	r24, 0xBF	; 191
    22cc:	94 e0       	ldi	r25, 0x04	; 4
    22ce:	b7 01       	movw	r22, r14
    22d0:	0e 94 3b 35 	call	0x6a76	; 0x6a76 <_ZN5Print7printlnERK6String>
    22d4:	16 c0       	rjmp	.+44     	; 0x2302 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x2b4>
        } 
        else {
          Serial.print(F("SERIAL> "));
    22d6:	8f eb       	ldi	r24, 0xBF	; 191
    22d8:	94 e0       	ldi	r25, 0x04	; 4
    22da:	67 e7       	ldi	r22, 0x77	; 119
    22dc:	72 e0       	ldi	r23, 0x02	; 2
    22de:	0e 94 a4 33 	call	0x6748	; 0x6748 <_ZN5Print5printEPK19__FlashStringHelper>
          GB_PrintDirty::printWithoutCRLF(input);
    22e2:	c7 01       	movw	r24, r14
    22e4:	0e 94 07 08 	call	0x100e	; 0x100e <_ZN13GB_PrintDirty16printWithoutCRLFERK6String>
          Serial.print(F(" > "));
    22e8:	8f eb       	ldi	r24, 0xBF	; 191
    22ea:	94 e0       	ldi	r25, 0x04	; 4
    22ec:	63 e7       	ldi	r22, 0x73	; 115
    22ee:	72 e0       	ldi	r23, 0x02	; 2
    22f0:	0e 94 a4 33 	call	0x6748	; 0x6748 <_ZN5Print5printEPK19__FlashStringHelper>
          GB_PrintDirty::printHEX(input);
    22f4:	c7 01       	movw	r24, r14
    22f6:	0e 94 04 09 	call	0x1208	; 0x1208 <_ZN13GB_PrintDirty8printHEXERK6String>
          Serial.println();
    22fa:	8f eb       	ldi	r24, 0xBF	; 191
    22fc:	94 e0       	ldi	r25, 0x04	; 4
    22fe:	0e 94 cf 33 	call	0x679e	; 0x679e <_ZN5Print7printlnEv>
        }  
      }
      printDirtyEnd();
    2302:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN15GB_SerialHelper13printDirtyEndEv>
    } 

    if (isWifiRequestClientConnected || isWifiRequestClientDisconnected){
    2306:	11 23       	and	r17, r17
    2308:	61 f4       	brne	.+24     	; 0x2322 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x2d4>
    230a:	00 23       	and	r16, r16
    230c:	51 f4       	brne	.+20     	; 0x2322 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x2d4>
      return false; 
    }
    else if (isWifiRequest){
    230e:	f4 01       	movw	r30, r8
    2310:	80 81       	ld	r24, Z
    2312:	88 23       	and	r24, r24
    2314:	21 f4       	brne	.+8      	; 0x231e <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x2d0>
    2316:	80 91 7d 02 	lds	r24, 0x027D
    231a:	88 23       	and	r24, r24
    231c:	19 f0       	breq	.+6      	; 0x2324 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x2d6>
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	01 c0       	rjmp	.+2      	; 0x2324 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x2d6>
    2322:	80 e0       	ldi	r24, 0x00	; 0
    } 
    else if (useSerialMonitor){
      return true;
    } 
    return false;
  } 
    2324:	6d 96       	adiw	r28, 0x1d	; 29
    2326:	0f b6       	in	r0, 0x3f	; 63
    2328:	f8 94       	cli
    232a:	de bf       	out	0x3e, r29	; 62
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	cd bf       	out	0x3d, r28	; 61
    2330:	cf 91       	pop	r28
    2332:	df 91       	pop	r29
    2334:	1f 91       	pop	r17
    2336:	0f 91       	pop	r16
    2338:	ff 90       	pop	r15
    233a:	ef 90       	pop	r14
    233c:	df 90       	pop	r13
    233e:	cf 90       	pop	r12
    2340:	bf 90       	pop	r11
    2342:	af 90       	pop	r10
    2344:	9f 90       	pop	r9
    2346:	8f 90       	pop	r8
    2348:	7f 90       	pop	r7
    234a:	6f 90       	pop	r6
    234c:	08 95       	ret
    int index = 0;
    while ((index < length) && Serial.available()){
      Serial.read();
      index++;
    }
    isError = ((index) == length); 
    234e:	19 82       	std	Y+1, r1	; 0x01
    2350:	08 30       	cpi	r16, 0x08	; 8
    2352:	11 05       	cpc	r17, r1
    2354:	09 f0       	breq	.+2      	; 0x2358 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0x30a>
    2356:	de ce       	rjmp	.-580    	; 0x2114 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0xc6>
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	db ce       	rjmp	.-586    	; 0x2114 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_+0xc6>

0000235e <loop>:
    235e:	8d e0       	ldi	r24, 0x0D	; 13
    2360:	0e 94 a0 30 	call	0x6140	; 0x6140 <digitalRead>
    2364:	60 e0       	ldi	r22, 0x00	; 0
    2366:	89 2b       	or	r24, r25
    2368:	09 f4       	brne	.+2      	; 0x236c <loop+0xe>
    236a:	61 e0       	ldi	r22, 0x01	; 1
    236c:	8d e0       	ldi	r24, 0x0D	; 13
    236e:	0e 94 4c 30 	call	0x6098	; 0x6098 <digitalWrite>
    2372:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <_ZN13GB_Controller15checkFreeMemoryEv>
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	60 e0       	ldi	r22, 0x00	; 0
    237a:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZN15GB_SerialHelper11checkSerialEhh>
    237e:	89 e2       	ldi	r24, 0x29	; 41
    2380:	93 e0       	ldi	r25, 0x03	; 3
    2382:	48 ee       	ldi	r20, 0xE8	; 232
    2384:	53 e0       	ldi	r21, 0x03	; 3
    2386:	60 e0       	ldi	r22, 0x00	; 0
    2388:	70 e0       	ldi	r23, 0x00	; 0
    238a:	0e 94 55 24 	call	0x48aa	; 0x48aa <_ZN15TimeAlarmsClass5delayEm>
    238e:	08 95       	ret

00002390 <_Z15printFreeMemoryv>:
    2390:	0f 93       	push	r16
    2392:	1f 93       	push	r17
    2394:	0f eb       	ldi	r16, 0xBF	; 191
    2396:	14 e0       	ldi	r17, 0x04	; 4
    2398:	c8 01       	movw	r24, r16
    239a:	63 ef       	ldi	r22, 0xF3	; 243
    239c:	70 e0       	ldi	r23, 0x00	; 0
    239e:	0e 94 a4 33 	call	0x6748	; 0x6748 <_ZN5Print5printEPK19__FlashStringHelper>
    23a2:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <freeMemory>
    23a6:	bc 01       	movw	r22, r24
    23a8:	c8 01       	movw	r24, r16
    23aa:	4a e0       	ldi	r20, 0x0A	; 10
    23ac:	50 e0       	ldi	r21, 0x00	; 0
    23ae:	0e 94 f5 34 	call	0x69ea	; 0x69ea <_ZN5Print5printEii>
    23b2:	c8 01       	movw	r24, r16
    23b4:	61 e0       	ldi	r22, 0x01	; 1
    23b6:	71 e0       	ldi	r23, 0x01	; 1
    23b8:	0e 94 ef 33 	call	0x67de	; 0x67de <_ZN5Print7printlnEPK19__FlashStringHelper>
    23bc:	1f 91       	pop	r17
    23be:	0f 91       	pop	r16
    23c0:	08 95       	ret

000023c2 <_Z14isDayInGrowboxv>:
    23c2:	0e 94 dd 20 	call	0x41ba	; 0x41ba <_Z10timeStatusv>
    23c6:	01 97       	sbiw	r24, 0x01	; 1
    23c8:	29 f4       	brne	.+10     	; 0x23d4 <_Z14isDayInGrowboxv+0x12>
    23ca:	88 e2       	ldi	r24, 0x28	; 40
    23cc:	92 e0       	ldi	r25, 0x02	; 2
    23ce:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <_ZN9GB_Logger8logErrorER5Error>
    23d2:	06 c0       	rjmp	.+12     	; 0x23e0 <_Z14isDayInGrowboxv+0x1e>
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
  static boolean stopLogError(Error &error){
    if (error.isStored){
    23d4:	80 91 2e 02 	lds	r24, 0x022E
    23d8:	88 23       	and	r24, r24
    23da:	11 f0       	breq	.+4      	; 0x23e0 <_Z14isDayInGrowboxv+0x1e>
      error.isStored = false;
    23dc:	10 92 2e 02 	sts	0x022E, r1
    23e0:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <_Z4hourv>
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	02 97       	sbiw	r24, 0x02	; 2
    23e8:	07 97       	sbiw	r24, 0x07	; 7
    23ea:	08 f4       	brcc	.+2      	; 0x23ee <_Z14isDayInGrowboxv+0x2c>
    23ec:	21 e0       	ldi	r18, 0x01	; 1
    23ee:	82 2f       	mov	r24, r18
    23f0:	08 95       	ret

000023f2 <setup>:
    23f2:	ef 92       	push	r14
    23f4:	ff 92       	push	r15
    23f6:	0f 93       	push	r16
    23f8:	1f 93       	push	r17
    23fa:	df 93       	push	r29
    23fc:	cf 93       	push	r28
    23fe:	cd b7       	in	r28, 0x3d	; 61
    2400:	de b7       	in	r29, 0x3e	; 62
    2402:	2e 97       	sbiw	r28, 0x0e	; 14
    2404:	0f b6       	in	r0, 0x3f	; 63
    2406:	f8 94       	cli
    2408:	de bf       	out	0x3e, r29	; 62
    240a:	0f be       	out	0x3f, r0	; 63
    240c:	cd bf       	out	0x3d, r28	; 61
    240e:	8d e0       	ldi	r24, 0x0D	; 13
    2410:	61 e0       	ldi	r22, 0x01	; 1
    2412:	0e 94 0d 30 	call	0x601a	; 0x601a <pinMode>
    2416:	8d e0       	ldi	r24, 0x0D	; 13
    2418:	61 e0       	ldi	r22, 0x01	; 1
    241a:	0e 94 0d 30 	call	0x601a	; 0x601a <pinMode>
    241e:	8c e0       	ldi	r24, 0x0C	; 12
    2420:	61 e0       	ldi	r22, 0x01	; 1
    2422:	0e 94 0d 30 	call	0x601a	; 0x601a <pinMode>
    2426:	8b e0       	ldi	r24, 0x0B	; 11
    2428:	62 e0       	ldi	r22, 0x02	; 2
    242a:	0e 94 0d 30 	call	0x601a	; 0x601a <pinMode>
    242e:	83 e0       	ldi	r24, 0x03	; 3
    2430:	61 e0       	ldi	r22, 0x01	; 1
    2432:	0e 94 0d 30 	call	0x601a	; 0x601a <pinMode>
    2436:	84 e0       	ldi	r24, 0x04	; 4
    2438:	61 e0       	ldi	r22, 0x01	; 1
    243a:	0e 94 0d 30 	call	0x601a	; 0x601a <pinMode>
    243e:	85 e0       	ldi	r24, 0x05	; 5
    2440:	61 e0       	ldi	r22, 0x01	; 1
    2442:	0e 94 0d 30 	call	0x601a	; 0x601a <pinMode>
    2446:	83 e0       	ldi	r24, 0x03	; 3
    2448:	61 e0       	ldi	r22, 0x01	; 1
    244a:	0e 94 4c 30 	call	0x6098	; 0x6098 <digitalWrite>
    244e:	84 e0       	ldi	r24, 0x04	; 4
    2450:	61 e0       	ldi	r22, 0x01	; 1
    2452:	0e 94 4c 30 	call	0x6098	; 0x6098 <digitalWrite>
    2456:	85 e0       	ldi	r24, 0x05	; 5
    2458:	61 e0       	ldi	r22, 0x01	; 1
    245a:	0e 94 4c 30 	call	0x6098	; 0x6098 <digitalWrite>
    245e:	10 92 fe 01 	sts	0x01FE, r1
    2462:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <freeMemory>
    2466:	7c 01       	movw	r14, r24
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	61 e0       	ldi	r22, 0x01	; 1
    246c:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZN15GB_SerialHelper11checkSerialEhh>
    2470:	80 91 7d 02 	lds	r24, 0x027D
    2474:	88 23       	and	r24, r24
    2476:	31 f0       	breq	.+12     	; 0x2484 <setup+0x92>
    2478:	0e 94 c8 11 	call	0x2390	; 0x2390 <_Z15printFreeMemoryv>
    247c:	8b e6       	ldi	r24, 0x6B	; 107
    247e:	96 e0       	ldi	r25, 0x06	; 6
    2480:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZL17printStatusOnBootPK19__FlashStringHelper>
    2484:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <_Z15initLoggerModelv>
    this->sequenceSize = sequenceSize;
    this->description = description;
  }
  
  static Error* findByIndex(byte sequence, byte sequenceSize){
    Error* currentItemPtr = lastAddedItem;
    2488:	e0 91 1d 02 	lds	r30, 0x021D
    248c:	f0 91 1e 02 	lds	r31, 0x021E
    2490:	0a c0       	rjmp	.+20     	; 0x24a6 <setup+0xb4>
    while (currentItemPtr != 0){
      if (currentItemPtr->sequence == sequence && currentItemPtr->sequenceSize == sequenceSize) {
    2492:	82 81       	ldd	r24, Z+2	; 0x02
    2494:	8f 3f       	cpi	r24, 0xFF	; 255
    2496:	19 f4       	brne	.+6      	; 0x249e <setup+0xac>
    2498:	83 81       	ldd	r24, Z+3	; 0x03
    249a:	8f 3f       	cpi	r24, 0xFF	; 255
    249c:	39 f0       	breq	.+14     	; 0x24ac <setup+0xba>
        return currentItemPtr;
      }
      currentItemPtr = (Error*)currentItemPtr->nextError;
    249e:	80 81       	ld	r24, Z
    24a0:	91 81       	ldd	r25, Z+1	; 0x01
    24a2:	9c 01       	movw	r18, r24
    24a4:	f9 01       	movw	r30, r18
    this->description = description;
  }
  
  static Error* findByIndex(byte sequence, byte sequenceSize){
    Error* currentItemPtr = lastAddedItem;
    while (currentItemPtr != 0){
    24a6:	30 97       	sbiw	r30, 0x00	; 0
    24a8:	a1 f7       	brne	.-24     	; 0x2492 <setup+0xa0>
    24aa:	7e c1       	rjmp	.+764    	; 0x27a8 <setup+0x3b6>
    24ac:	80 91 7d 02 	lds	r24, 0x027D
    24b0:	88 23       	and	r24, r24
    24b2:	21 f0       	breq	.+8      	; 0x24bc <setup+0xca>
    24b4:	80 e5       	ldi	r24, 0x50	; 80
    24b6:	96 e0       	ldi	r25, 0x06	; 6
    24b8:	0e 94 0d 07 	call	0xe1a	; 0xe1a <_ZL21printFatalErrorOnBootPK19__FlashStringHelper>
    24bc:	68 e8       	ldi	r22, 0x88	; 136
    24be:	73 e1       	ldi	r23, 0x13	; 19
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	0e 94 6f 2f 	call	0x5ede	; 0x5ede <delay>
    24c8:	f9 cf       	rjmp	.-14     	; 0x24bc <setup+0xca>
    // Serial.print("lastAddedEvent ev: ");
    //Serial.println(lastAddedEvent->description);
    Event* currentItemPtr = lastAddedEvent;
    while (currentItemPtr != 0){
      //Serial.println(currentItemPtr->description);
      if (currentItemPtr->index == index) {
    24ca:	82 81       	ldd	r24, Z+2	; 0x02
    24cc:	8f 3f       	cpi	r24, 0xFF	; 255
    24ce:	39 f0       	breq	.+14     	; 0x24de <setup+0xec>
        return currentItemPtr;
      }
      currentItemPtr = (Event*)currentItemPtr->nextEvent;
    24d0:	80 81       	ld	r24, Z
    24d2:	91 81       	ldd	r25, Z+1	; 0x01
    24d4:	9c 01       	movw	r18, r24
    24d6:	f9 01       	movw	r30, r18
    //Serial.print("search ev: ");    
    //Serial.println(index);
    // Serial.print("lastAddedEvent ev: ");
    //Serial.println(lastAddedEvent->description);
    Event* currentItemPtr = lastAddedEvent;
    while (currentItemPtr != 0){
    24d8:	30 97       	sbiw	r30, 0x00	; 0
    24da:	b9 f7       	brne	.-18     	; 0x24ca <setup+0xd8>
    24dc:	6a c1       	rjmp	.+724    	; 0x27b2 <setup+0x3c0>
    24de:	80 91 7d 02 	lds	r24, 0x027D
    24e2:	88 23       	and	r24, r24
    24e4:	21 f0       	breq	.+8      	; 0x24ee <setup+0xfc>
    24e6:	85 e3       	ldi	r24, 0x35	; 53
    24e8:	96 e0       	ldi	r25, 0x06	; 6
    24ea:	0e 94 0d 07 	call	0xe1a	; 0xe1a <_ZL21printFatalErrorOnBootPK19__FlashStringHelper>
    24ee:	68 e8       	ldi	r22, 0x88	; 136
    24f0:	73 e1       	ldi	r23, 0x13	; 19
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	0e 94 6f 2f 	call	0x5ede	; 0x5ede <delay>
    24fa:	f9 cf       	rjmp	.-14     	; 0x24ee <setup+0xfc>
    24fc:	8f e2       	ldi	r24, 0x2F	; 47
    24fe:	96 e0       	ldi	r25, 0x06	; 6
    2500:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZL17printStatusOnBootPK19__FlashStringHelper>
    2504:	83 e6       	ldi	r24, 0x63	; 99
    2506:	98 e2       	ldi	r25, 0x28	; 40
    2508:	0e 94 c6 20 	call	0x418c	; 0x418c <_Z15setSyncProviderPFmvE>
    250c:	0e 94 dd 20 	call	0x41ba	; 0x41ba <_Z10timeStatusv>
    2510:	89 2b       	or	r24, r25
    2512:	59 f0       	breq	.+22     	; 0x252a <setup+0x138>
    2514:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <_Z4yearv>
    2518:	8f 5d       	subi	r24, 0xDF	; 223
    251a:	97 40       	sbci	r25, 0x07	; 7
    251c:	34 f4       	brge	.+12     	; 0x252a <setup+0x138>
    251e:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <_Z4yearv>
    2522:	85 5e       	subi	r24, 0xE5	; 229
    2524:	97 40       	sbci	r25, 0x07	; 7
    2526:	0c f4       	brge	.+2      	; 0x252a <setup+0x138>
    2528:	12 c1       	rjmp	.+548    	; 0x274e <setup+0x35c>
    252a:	81 e2       	ldi	r24, 0x21	; 33
    252c:	92 e0       	ldi	r25, 0x02	; 2
    252e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <_ZN9GB_Logger8logErrorER5Error>
    2532:	e8 cf       	rjmp	.-48     	; 0x2504 <setup+0x112>
    2534:	10 92 27 02 	sts	0x0227, r1
    2538:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <_ZN13GB_Controller15checkFreeMemoryEv>
    253c:	80 91 7d 02 	lds	r24, 0x027D
    2540:	88 23       	and	r24, r24
    2542:	49 f0       	breq	.+18     	; 0x2556 <setup+0x164>
    2544:	84 e2       	ldi	r24, 0x24	; 36
    2546:	96 e0       	ldi	r25, 0x06	; 6
    2548:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZL17printStatusOnBootPK19__FlashStringHelper>
    254c:	04 c0       	rjmp	.+8      	; 0x2556 <setup+0x164>
public:

  static void start(){
    dallasTemperature.begin();
    while(dallasTemperature.getDeviceCount() == 0){
      GB_Logger::logError(ERROR_TERMOMETER_DISCONNECTED);
    254e:	8f e2       	ldi	r24, 0x2F	; 47
    2550:	92 e0       	ldi	r25, 0x02	; 2
    2552:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <_ZN9GB_Logger8logErrorER5Error>
      dallasTemperature.begin();
    2556:	8d ec       	ldi	r24, 0xCD	; 205
    2558:	92 e0       	ldi	r25, 0x02	; 2
    255a:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <_ZN17DallasTemperature5beginEv>

public:

  static void start(){
    dallasTemperature.begin();
    while(dallasTemperature.getDeviceCount() == 0){
    255e:	8d ec       	ldi	r24, 0xCD	; 205
    2560:	92 e0       	ldi	r25, 0x02	; 2
    2562:	0e 94 bd 2a 	call	0x557a	; 0x557a <_ZN17DallasTemperature14getDeviceCountEv>
    2566:	88 23       	and	r24, r24
    2568:	91 f3       	breq	.-28     	; 0x254e <setup+0x15c>
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
  static boolean stopLogError(Error &error){
    if (error.isStored){
    256a:	80 91 35 02 	lds	r24, 0x0235
    256e:	88 23       	and	r24, r24
    2570:	11 f0       	breq	.+4      	; 0x2576 <setup+0x184>
      error.isStored = false;
    2572:	10 92 35 02 	sts	0x0235, r1
      GB_Logger::logError(ERROR_TERMOMETER_DISCONNECTED);
      dallasTemperature.begin();
    }  
    GB_Logger::stopLogError(ERROR_TERMOMETER_DISCONNECTED);

    dallasTemperature.getAddress(oneWireAddress, 0); // search for devices on the bus and assign based on an index.
    2576:	8d ec       	ldi	r24, 0xCD	; 205
    2578:	92 e0       	ldi	r25, 0x02	; 2
    257a:	60 ee       	ldi	r22, 0xE0	; 224
    257c:	72 e0       	ldi	r23, 0x02	; 2
    257e:	40 e0       	ldi	r20, 0x00	; 0
    2580:	0e 94 4d 2d 	call	0x5a9a	; 0x5a9a <_ZN17DallasTemperature10getAddressEPhh>
    2584:	06 c0       	rjmp	.+12     	; 0x2592 <setup+0x1a0>
    2586:	68 ee       	ldi	r22, 0xE8	; 232
    2588:	73 e0       	ldi	r23, 0x03	; 3
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	0e 94 6f 2f 	call	0x5ede	; 0x5ede <delay>
    2592:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <_ZN14GB_Thermometer16updateStatisticsEv>
    2596:	88 23       	and	r24, r24
    2598:	b1 f3       	breq	.-20     	; 0x2586 <setup+0x194>
    259a:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <_ZN13GB_Controller15checkFreeMemoryEv>
    259e:	80 91 7d 02 	lds	r24, 0x027D
    25a2:	88 23       	and	r24, r24
    25a4:	21 f0       	breq	.+8      	; 0x25ae <setup+0x1bc>
    25a6:	8c e1       	ldi	r24, 0x1C	; 28
    25a8:	96 e0       	ldi	r25, 0x06	; 6
    25aa:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZL17printStatusOnBootPK19__FlashStringHelper>
    25ae:	00 e0       	ldi	r16, 0x00	; 0
    25b0:	10 e0       	ldi	r17, 0x00	; 0
    }
  }

  static void read(word address, void *data, const byte sizeofData) {
    for (word c = 0; c < sizeofData; c++){
      byte value =  read(address + c);
    25b2:	c8 01       	movw	r24, r16
    25b4:	0e 94 b1 06 	call	0xd62	; 0xd62 <_ZN10GB_Storage4readEj>
      ((byte*)data)[c] = value;
    25b8:	f8 01       	movw	r30, r16
    25ba:	e3 55       	subi	r30, 0x53	; 83
    25bc:	fd 4f       	sbci	r31, 0xFD	; 253
    25be:	80 83       	st	Z, r24
      write(address + c, value);
    }
  }

  static void read(word address, void *data, const byte sizeofData) {
    for (word c = 0; c < sizeofData; c++){
    25c0:	0f 5f       	subi	r16, 0xFF	; 255
    25c2:	1f 4f       	sbci	r17, 0xFF	; 255
    25c4:	00 32       	cpi	r16, 0x20	; 32
    25c6:	11 05       	cpc	r17, r1
    25c8:	a1 f7       	brne	.-24     	; 0x25b2 <setup+0x1c0>
  }

private :

  static boolean isBootRecordCorrect(){ // TODO rename it
    return (bootRecord.first_magic == MAGIC_NUMBER) && (bootRecord.last_magic == MAGIC_NUMBER);
    25ca:	80 91 ad 02 	lds	r24, 0x02AD
    25ce:	90 91 ae 02 	lds	r25, 0x02AE
    25d2:	85 55       	subi	r24, 0x55	; 85
    25d4:	9a 4a       	sbci	r25, 0xAA	; 170
    25d6:	09 f0       	breq	.+2      	; 0x25da <setup+0x1e8>
    25d8:	c0 c0       	rjmp	.+384    	; 0x275a <setup+0x368>
    25da:	80 91 cb 02 	lds	r24, 0x02CB
    25de:	90 91 cc 02 	lds	r25, 0x02CC
    25e2:	85 55       	subi	r24, 0x55	; 85
    25e4:	9a 4a       	sbci	r25, 0xAA	; 170
    25e6:	09 f0       	breq	.+2      	; 0x25ea <setup+0x1f8>
    25e8:	b8 c0       	rjmp	.+368    	; 0x275a <setup+0x368>

  static boolean start(){

    GB_Storage::read(0, &bootRecord, sizeof(BootRecord));
    if (isBootRecordCorrect()){
      bootRecord.lastStartupTimeStamp = now();      
    25ea:	0e 94 37 20 	call	0x406e	; 0x406e <_Z3nowv>
    25ee:	60 93 b3 02 	sts	0x02B3, r22
    25f2:	70 93 b4 02 	sts	0x02B4, r23
    25f6:	80 93 b5 02 	sts	0x02B5, r24
    25fa:	90 93 b6 02 	sts	0x02B6, r25
      GB_Storage::write(OFFSETOF(BootRecord, lastStartupTimeStamp), &(bootRecord.lastStartupTimeStamp), sizeof(bootRecord.lastStartupTimeStamp));      
    25fe:	86 e0       	ldi	r24, 0x06	; 6
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	63 eb       	ldi	r22, 0xB3	; 179
    2604:	72 e0       	ldi	r23, 0x02	; 2
    2606:	44 e0       	ldi	r20, 0x04	; 4
    2608:	0e 94 0c 06 	call	0xc18	; 0xc18 <_ZN10GB_Storage5writeEjPKvh>
    260c:	91 e0       	ldi	r25, 0x01	; 1
    260e:	11 c0       	rjmp	.+34     	; 0x2632 <setup+0x240>
      bootRecord.lastStartupTimeStamp = bootRecord.firstStartupTimeStamp;
      bootRecord.nextLogRecordAddress = sizeof(BootRecord);
      bootRecord.boolPreferencies.isLogOverflow = false;
      bootRecord.boolPreferencies.isLoggerEnabled = true;
      for(byte i=0; i<sizeof(bootRecord.reserved); i++){
        bootRecord.reserved[i] = 0;
    2610:	11 92       	st	Z+, r1
      bootRecord.firstStartupTimeStamp = now();
      bootRecord.lastStartupTimeStamp = bootRecord.firstStartupTimeStamp;
      bootRecord.nextLogRecordAddress = sizeof(BootRecord);
      bootRecord.boolPreferencies.isLogOverflow = false;
      bootRecord.boolPreferencies.isLoggerEnabled = true;
      for(byte i=0; i<sizeof(bootRecord.reserved); i++){
    2612:	82 e0       	ldi	r24, 0x02	; 2
    2614:	eb 3c       	cpi	r30, 0xCB	; 203
    2616:	f8 07       	cpc	r31, r24
    2618:	d9 f7       	brne	.-10     	; 0x2610 <setup+0x21e>
        bootRecord.reserved[i] = 0;
      }
      bootRecord.last_magic = MAGIC_NUMBER;
    261a:	85 e5       	ldi	r24, 0x55	; 85
    261c:	9a ea       	ldi	r25, 0xAA	; 170
    261e:	91 83       	std	Z+1, r25	; 0x01
    2620:	80 83       	st	Z, r24

      GB_Storage::write(0, &bootRecord, sizeof(BootRecord));
    2622:	7e 97       	sbiw	r30, 0x1e	; 30
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	bf 01       	movw	r22, r30
    262a:	40 e2       	ldi	r20, 0x20	; 32
    262c:	0e 94 0c 06 	call	0xc18	; 0xc18 <_ZN10GB_Storage5writeEjPKvh>
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	80 93 fe 01 	sts	0x01FE, r24
    2638:	99 23       	and	r25, r25
    263a:	19 f0       	breq	.+6      	; 0x2642 <setup+0x250>
    263c:	80 e5       	ldi	r24, 0x50	; 80
    263e:	92 e0       	ldi	r25, 0x02	; 2
    2640:	02 c0       	rjmp	.+4      	; 0x2646 <setup+0x254>
    2642:	8b e4       	ldi	r24, 0x4B	; 75
    2644:	92 e0       	ldi	r25, 0x02	; 2
    2646:	0e 94 86 0c 	call	0x190c	; 0x190c <_ZN9GB_Logger8logEventER5Event>
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <_ZN14GB_Thermometer14getTemperatureEh>
    2650:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <_Z14isDayInGrowboxv>
    2654:	88 23       	and	r24, r24
    2656:	19 f0       	breq	.+6      	; 0x265e <setup+0x26c>
    2658:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <_Z15switchToDayModev>
    265c:	02 c0       	rjmp	.+4      	; 0x2662 <setup+0x270>
    265e:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <_Z17switchToNightModev>
    2662:	89 e2       	ldi	r24, 0x29	; 41
    2664:	93 e0       	ldi	r25, 0x03	; 3
    2666:	44 e1       	ldi	r20, 0x14	; 20
    2668:	50 e0       	ldi	r21, 0x00	; 0
    266a:	60 e0       	ldi	r22, 0x00	; 0
    266c:	70 e0       	ldi	r23, 0x00	; 0
    266e:	24 e2       	ldi	r18, 0x24	; 36
    2670:	30 e1       	ldi	r19, 0x10	; 16
    2672:	0e 94 ee 23 	call	0x47dc	; 0x47dc <_ZN15TimeAlarmsClass11timerRepeatEmPFvvE>
    2676:	89 e2       	ldi	r24, 0x29	; 41
    2678:	93 e0       	ldi	r25, 0x03	; 3
    267a:	44 e1       	ldi	r20, 0x14	; 20
    267c:	50 e0       	ldi	r21, 0x00	; 0
    267e:	60 e0       	ldi	r22, 0x00	; 0
    2680:	70 e0       	ldi	r23, 0x00	; 0
    2682:	2c eb       	ldi	r18, 0xBC	; 188
    2684:	3f e0       	ldi	r19, 0x0F	; 15
    2686:	0e 94 ee 23 	call	0x47dc	; 0x47dc <_ZN15TimeAlarmsClass11timerRepeatEmPFvvE>
    268a:	89 e2       	ldi	r24, 0x29	; 41
    268c:	93 e0       	ldi	r25, 0x03	; 3
    268e:	4c e2       	ldi	r20, 0x2C	; 44
    2690:	51 e0       	ldi	r21, 0x01	; 1
    2692:	60 e0       	ldi	r22, 0x00	; 0
    2694:	70 e0       	ldi	r23, 0x00	; 0
    2696:	2c e4       	ldi	r18, 0x4C	; 76
    2698:	3e e0       	ldi	r19, 0x0E	; 14
    269a:	0e 94 ee 23 	call	0x47dc	; 0x47dc <_ZN15TimeAlarmsClass11timerRepeatEmPFvvE>
    269e:	89 e2       	ldi	r24, 0x29	; 41
    26a0:	93 e0       	ldi	r25, 0x03	; 3
    26a2:	61 e0       	ldi	r22, 0x01	; 1
    26a4:	70 e0       	ldi	r23, 0x00	; 0
    26a6:	40 e0       	ldi	r20, 0x00	; 0
    26a8:	50 e0       	ldi	r21, 0x00	; 0
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	0f eb       	ldi	r16, 0xBF	; 191
    26b0:	1e e0       	ldi	r17, 0x0E	; 14
    26b2:	0e 94 ff 23 	call	0x47fe	; 0x47fe <_ZN15TimeAlarmsClass11alarmRepeatEiiiPFvvE>
    26b6:	89 e2       	ldi	r24, 0x29	; 41
    26b8:	93 e0       	ldi	r25, 0x03	; 3
    26ba:	69 e0       	ldi	r22, 0x09	; 9
    26bc:	70 e0       	ldi	r23, 0x00	; 0
    26be:	40 e0       	ldi	r20, 0x00	; 0
    26c0:	50 e0       	ldi	r21, 0x00	; 0
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	02 eb       	ldi	r16, 0xB2	; 178
    26c8:	1e e0       	ldi	r17, 0x0E	; 14
    26ca:	0e 94 ff 23 	call	0x47fe	; 0x47fe <_ZN15TimeAlarmsClass11alarmRepeatEiiiPFvvE>
    26ce:	80 91 7d 02 	lds	r24, 0x027D
    26d2:	88 23       	and	r24, r24
    26d4:	69 f0       	breq	.+26     	; 0x26f0 <setup+0x2fe>
    26d6:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <freeMemory>
    26da:	e8 16       	cp	r14, r24
    26dc:	f9 06       	cpc	r15, r25
    26de:	11 f0       	breq	.+4      	; 0x26e4 <setup+0x2f2>
    26e0:	0e 94 c8 11 	call	0x2390	; 0x2390 <_Z15printFreeMemoryv>
    26e4:	8f eb       	ldi	r24, 0xBF	; 191
    26e6:	94 e0       	ldi	r25, 0x04	; 4
    26e8:	6f ef       	ldi	r22, 0xFF	; 255
    26ea:	75 e0       	ldi	r23, 0x05	; 5
    26ec:	0e 94 ef 33 	call	0x67de	; 0x67de <_ZN5Print7printlnEPK19__FlashStringHelper>
    26f0:	80 91 7d 02 	lds	r24, 0x027D
    26f4:	88 23       	and	r24, r24
    26f6:	11 f0       	breq	.+4      	; 0x26fc <setup+0x30a>
    26f8:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN15GB_SerialHelper13printDirtyEndEv>
    26fc:	80 91 7e 02 	lds	r24, 0x027E
    2700:	88 23       	and	r24, r24
    2702:	09 f4       	brne	.+2      	; 0x2706 <setup+0x314>
    2704:	5e c0       	rjmp	.+188    	; 0x27c2 <setup+0x3d0>
    2706:	7e 01       	movw	r14, r28
    2708:	08 94       	sec
    270a:	e1 1c       	adc	r14, r1
    270c:	f1 1c       	adc	r15, r1
    270e:	c7 01       	movw	r24, r14
    2710:	68 e3       	ldi	r22, 0x38	; 56
    2712:	71 e0       	ldi	r23, 0x01	; 1
    2714:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
    2718:	8e 01       	movw	r16, r28
    271a:	08 5f       	subi	r16, 0xF8	; 248
    271c:	1f 4f       	sbci	r17, 0xFF	; 255
    271e:	c8 01       	movw	r24, r16
    2720:	6d e3       	ldi	r22, 0x3D	; 61
    2722:	71 e0       	ldi	r23, 0x01	; 1
    2724:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
      cleanSerialBuffer();
    }
  }

  static void setWifiConfiguration(const String& _s_wifiSID, const String& _s_wifiPass){
    s_wifiSID = _s_wifiSID;
    2728:	80 e8       	ldi	r24, 0x80	; 128
    272a:	92 e0       	ldi	r25, 0x02	; 2
    272c:	b7 01       	movw	r22, r14
    272e:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <_ZN6StringaSERKS_>
    s_wifiPass = _s_wifiPass;
    2732:	87 e8       	ldi	r24, 0x87	; 135
    2734:	92 e0       	ldi	r25, 0x02	; 2
    2736:	b8 01       	movw	r22, r16
    2738:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <_ZN6StringaSERKS_>
    273c:	c8 01       	movw	r24, r16
    273e:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
    2742:	c7 01       	movw	r24, r14
    2744:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
    2748:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <_ZN15GB_SerialHelper9startWifiEv>
    274c:	3a c0       	rjmp	.+116    	; 0x27c2 <setup+0x3d0>
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
  static boolean stopLogError(Error &error){
    if (error.isStored){
    274e:	80 91 27 02 	lds	r24, 0x0227
    2752:	88 23       	and	r24, r24
    2754:	09 f0       	breq	.+2      	; 0x2758 <setup+0x366>
    2756:	ee ce       	rjmp	.-548    	; 0x2534 <setup+0x142>
    2758:	ef ce       	rjmp	.-546    	; 0x2538 <setup+0x146>
      bootRecord.lastStartupTimeStamp = now();      
      GB_Storage::write(OFFSETOF(BootRecord, lastStartupTimeStamp), &(bootRecord.lastStartupTimeStamp), sizeof(bootRecord.lastStartupTimeStamp));      
      return true;   
    } 
    else {
      bootRecord.first_magic = MAGIC_NUMBER;
    275a:	85 e5       	ldi	r24, 0x55	; 85
    275c:	9a ea       	ldi	r25, 0xAA	; 170
    275e:	90 93 ae 02 	sts	0x02AE, r25
    2762:	80 93 ad 02 	sts	0x02AD, r24
      bootRecord.firstStartupTimeStamp = now();
    2766:	0e 94 37 20 	call	0x406e	; 0x406e <_Z3nowv>
    276a:	60 93 af 02 	sts	0x02AF, r22
    276e:	70 93 b0 02 	sts	0x02B0, r23
    2772:	80 93 b1 02 	sts	0x02B1, r24
    2776:	90 93 b2 02 	sts	0x02B2, r25
      bootRecord.lastStartupTimeStamp = bootRecord.firstStartupTimeStamp;
    277a:	60 93 b3 02 	sts	0x02B3, r22
    277e:	70 93 b4 02 	sts	0x02B4, r23
    2782:	80 93 b5 02 	sts	0x02B5, r24
    2786:	90 93 b6 02 	sts	0x02B6, r25
      bootRecord.nextLogRecordAddress = sizeof(BootRecord);
    278a:	80 e2       	ldi	r24, 0x20	; 32
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	90 93 b8 02 	sts	0x02B8, r25
    2792:	80 93 b7 02 	sts	0x02B7, r24
      bootRecord.boolPreferencies.isLogOverflow = false;
    2796:	80 91 b9 02 	lds	r24, 0x02B9
      bootRecord.boolPreferencies.isLoggerEnabled = true;
    279a:	88 7f       	andi	r24, 0xF8	; 248
    279c:	82 60       	ori	r24, 0x02	; 2
    279e:	80 93 b9 02 	sts	0x02B9, r24
    27a2:	ea eb       	ldi	r30, 0xBA	; 186
    27a4:	f2 e0       	ldi	r31, 0x02	; 2
    27a6:	34 cf       	rjmp	.-408    	; 0x2610 <setup+0x21e>
  static Event* findByIndex(byte index){
    //Serial.print("search ev: ");    
    //Serial.println(index);
    // Serial.print("lastAddedEvent ev: ");
    //Serial.println(lastAddedEvent->description);
    Event* currentItemPtr = lastAddedEvent;
    27a8:	e0 91 1f 02 	lds	r30, 0x021F
    27ac:	f0 91 20 02 	lds	r31, 0x0220
    27b0:	93 ce       	rjmp	.-730    	; 0x24d8 <setup+0xe6>
    27b2:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <_ZN13GB_Controller15checkFreeMemoryEv>
    27b6:	80 91 7d 02 	lds	r24, 0x027D
    27ba:	88 23       	and	r24, r24
    27bc:	09 f4       	brne	.+2      	; 0x27c0 <setup+0x3ce>
    27be:	a2 ce       	rjmp	.-700    	; 0x2504 <setup+0x112>
    27c0:	9d ce       	rjmp	.-710    	; 0x24fc <setup+0x10a>
    27c2:	2e 96       	adiw	r28, 0x0e	; 14
    27c4:	0f b6       	in	r0, 0x3f	; 63
    27c6:	f8 94       	cli
    27c8:	de bf       	out	0x3e, r29	; 62
    27ca:	0f be       	out	0x3f, r0	; 63
    27cc:	cd bf       	out	0x3d, r28	; 61
    27ce:	cf 91       	pop	r28
    27d0:	df 91       	pop	r29
    27d2:	1f 91       	pop	r17
    27d4:	0f 91       	pop	r16
    27d6:	ff 90       	pop	r15
    27d8:	ef 90       	pop	r14
    27da:	08 95       	ret

000027dc <_ZN15GB_SerialHelper13stopHttpFrameEv>:
  static void startHttpFrame(const byte &wifiPortDescriptor){
    sendWifiFrameStart(wifiPortDescriptor, WIFI_RESPONSE_FRAME_SIZE);
    s_wifiResponseAutoFlushConut = 0;
  }

  static boolean stopHttpFrame(){
    27dc:	cf 93       	push	r28
    27de:	df 93       	push	r29
    if (s_wifiResponseAutoFlushConut > 0){
    27e0:	80 91 8f 02 	lds	r24, 0x028F
    27e4:	90 91 90 02 	lds	r25, 0x0290
    27e8:	18 16       	cp	r1, r24
    27ea:	19 06       	cpc	r1, r25
    27ec:	64 f0       	brlt	.+24     	; 0x2806 <_ZN15GB_SerialHelper13stopHttpFrameEv+0x2a>
    27ee:	13 c0       	rjmp	.+38     	; 0x2816 <_ZN15GB_SerialHelper13stopHttpFrameEv+0x3a>
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    27f0:	8f eb       	ldi	r24, 0xBF	; 191
    27f2:	94 e0       	ldi	r25, 0x04	; 4
    27f4:	60 e0       	ldi	r22, 0x00	; 0
    27f6:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <_ZN14HardwareSerial5writeEh>
      while (s_wifiResponseAutoFlushConut < WIFI_RESPONSE_FRAME_SIZE){
        s_wifiResponseAutoFlushConut += Serial.write(0x00);
    27fa:	c8 0f       	add	r28, r24
    27fc:	d9 1f       	adc	r29, r25
    27fe:	d0 93 90 02 	sts	0x0290, r29
    2802:	c0 93 8f 02 	sts	0x028F, r28
    s_wifiResponseAutoFlushConut = 0;
  }

  static boolean stopHttpFrame(){
    if (s_wifiResponseAutoFlushConut > 0){
      while (s_wifiResponseAutoFlushConut < WIFI_RESPONSE_FRAME_SIZE){
    2806:	c0 91 8f 02 	lds	r28, 0x028F
    280a:	d0 91 90 02 	lds	r29, 0x0290
    280e:	85 e0       	ldi	r24, 0x05	; 5
    2810:	c8 37       	cpi	r28, 0x78	; 120
    2812:	d8 07       	cpc	r29, r24
    2814:	6c f3       	brlt	.-38     	; 0x27f0 <_ZN15GB_SerialHelper13stopHttpFrameEv+0x14>
    Serial.print(length);
    Serial.print(',');
  }

  static boolean sendWifiFrameStop(boolean rebootOnFalse = true){
    return wifiExecuteCommand(0,-1,rebootOnFalse);
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	6f ef       	ldi	r22, 0xFF	; 255
    281c:	7f ef       	ldi	r23, 0xFF	; 255
    281e:	40 e0       	ldi	r20, 0x00	; 0
    2820:	0e 94 2a 09 	call	0x1254	; 0x1254 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperih>
      while (s_wifiResponseAutoFlushConut < WIFI_RESPONSE_FRAME_SIZE){
        s_wifiResponseAutoFlushConut += Serial.write(0x00);
      }
    }
    return sendWifiFrameStop(false);
  } 
    2824:	df 91       	pop	r29
    2826:	cf 91       	pop	r28
    2828:	08 95       	ret

0000282a <_ZL8sendDataPK19__FlashStringHelper>:
    282a:	bf 92       	push	r11
    282c:	cf 92       	push	r12
    282e:	df 92       	push	r13
    2830:	ef 92       	push	r14
    2832:	ff 92       	push	r15
    2834:	0f 93       	push	r16
    2836:	1f 93       	push	r17
    2838:	cf 93       	push	r28
    283a:	df 93       	push	r29
    283c:	6c 01       	movw	r12, r24
    283e:	80 91 ff 01 	lds	r24, 0x01FF
    2842:	88 23       	and	r24, r24
    2844:	09 f4       	brne	.+2      	; 0x2848 <_ZL8sendDataPK19__FlashStringHelper+0x1e>
    2846:	7a c0       	rjmp	.+244    	; 0x293c <_ZL8sendDataPK19__FlashStringHelper+0x112>
  }


  static boolean sendHttpResponseData(const byte &wifiPortDescriptor, const __FlashStringHelper* data){
    boolean isSendOK = true;
    if (!s_wifiIsHeaderSended){
    2848:	80 91 8e 02 	lds	r24, 0x028E
    284c:	88 23       	and	r24, r24
    284e:	89 f4       	brne	.+34     	; 0x2872 <_ZL8sendDataPK19__FlashStringHelper+0x48>
      sendHttpOKHeader(wifiPortDescriptor); 
    2850:	80 91 b9 01 	lds	r24, 0x01B9
    2854:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <_ZN15GB_SerialHelper16sendHttpOKHeaderEh>
      s_wifiIsHeaderSended = true;
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	80 93 8e 02 	sts	0x028E, r24
     return wifiExecuteCommand(); 
     */
  }

  static void startHttpFrame(const byte &wifiPortDescriptor){
    sendWifiFrameStart(wifiPortDescriptor, WIFI_RESPONSE_FRAME_SIZE);
    285e:	80 91 b9 01 	lds	r24, 0x01B9
    2862:	68 e7       	ldi	r22, 0x78	; 120
    2864:	75 e0       	ldi	r23, 0x05	; 5
    2866:	0e 94 e5 06 	call	0xdca	; 0xdca <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>
    s_wifiResponseAutoFlushConut = 0;
    286a:	10 92 90 02 	sts	0x0290, r1
    286e:	10 92 8f 02 	sts	0x028F, r1
    if (!s_wifiIsHeaderSended){
      sendHttpOKHeader(wifiPortDescriptor); 
      s_wifiIsHeaderSended = true;
      startHttpFrame(wifiPortDescriptor);
    } 
    if (s_wifiResponseAutoFlushConut + flashStringLength(data) < WIFI_RESPONSE_FRAME_SIZE){
    2872:	c0 91 8f 02 	lds	r28, 0x028F
    2876:	d0 91 90 02 	lds	r29, 0x0290
    287a:	c6 01       	movw	r24, r12
    287c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <strlen_P>
    2880:	7c 01       	movw	r14, r24
    2882:	8c 0f       	add	r24, r28
    2884:	9d 1f       	adc	r25, r29
    2886:	88 57       	subi	r24, 0x78	; 120
    2888:	95 40       	sbci	r25, 0x05	; 5
    288a:	1c f0       	brlt	.+6      	; 0x2892 <_ZL8sendDataPK19__FlashStringHelper+0x68>
    288c:	c0 e0       	ldi	r28, 0x00	; 0
    288e:	d0 e0       	ldi	r29, 0x00	; 0
    2890:	20 c0       	rjmp	.+64     	; 0x28d2 <_ZL8sendDataPK19__FlashStringHelper+0xa8>
      s_wifiResponseAutoFlushConut += Serial.print(data);
    2892:	8f eb       	ldi	r24, 0xBF	; 191
    2894:	94 e0       	ldi	r25, 0x04	; 4
    2896:	b6 01       	movw	r22, r12
    2898:	0e 94 a4 33 	call	0x6748	; 0x6748 <_ZN5Print5printEPK19__FlashStringHelper>
    289c:	c8 0f       	add	r28, r24
    289e:	d9 1f       	adc	r29, r25
    28a0:	d0 93 90 02 	sts	0x0290, r29
    28a4:	c0 93 8f 02 	sts	0x028F, r28
    28a8:	4e c0       	rjmp	.+156    	; 0x2946 <_ZL8sendDataPK19__FlashStringHelper+0x11c>
}

static char flashStringCharAt(const __FlashStringHelper* fstr, int index){ 
  if (index >= flashStringLength(fstr)){
    28aa:	ce 15       	cp	r28, r14
    28ac:	df 05       	cpc	r29, r15
    28ae:	14 f0       	brlt	.+4      	; 0x28b4 <_ZL8sendDataPK19__FlashStringHelper+0x8a>
    28b0:	6f ef       	ldi	r22, 0xFF	; 255
    28b2:	04 c0       	rjmp	.+8      	; 0x28bc <_ZL8sendDataPK19__FlashStringHelper+0x92>
    return 0xFF; 
  }
  const char PROGMEM * pstr = (const char PROGMEM *) fstr;
  return pgm_read_byte(pstr+index);
    28b4:	f6 01       	movw	r30, r12
    28b6:	ec 0f       	add	r30, r28
    28b8:	fd 1f       	adc	r31, r29
    28ba:	64 91       	lpm	r22, Z+
    } 
    else {
      int index = 0;
      while (s_wifiResponseAutoFlushConut < WIFI_RESPONSE_FRAME_SIZE){
        char c = flashStringCharAt(data, index++);
    28bc:	21 96       	adiw	r28, 0x01	; 1
        s_wifiResponseAutoFlushConut += Serial.print(c);
    28be:	8f eb       	ldi	r24, 0xBF	; 191
    28c0:	94 e0       	ldi	r25, 0x04	; 4
    28c2:	0e 94 c7 33 	call	0x678e	; 0x678e <_ZN5Print5printEc>
    28c6:	08 0f       	add	r16, r24
    28c8:	19 1f       	adc	r17, r25
    28ca:	10 93 90 02 	sts	0x0290, r17
    28ce:	00 93 8f 02 	sts	0x028F, r16
    if (s_wifiResponseAutoFlushConut + flashStringLength(data) < WIFI_RESPONSE_FRAME_SIZE){
      s_wifiResponseAutoFlushConut += Serial.print(data);
    } 
    else {
      int index = 0;
      while (s_wifiResponseAutoFlushConut < WIFI_RESPONSE_FRAME_SIZE){
    28d2:	00 91 8f 02 	lds	r16, 0x028F
    28d6:	10 91 90 02 	lds	r17, 0x0290
    28da:	85 e0       	ldi	r24, 0x05	; 5
    28dc:	08 37       	cpi	r16, 0x78	; 120
    28de:	18 07       	cpc	r17, r24
    28e0:	24 f3       	brlt	.-56     	; 0x28aa <_ZL8sendDataPK19__FlashStringHelper+0x80>
        char c = flashStringCharAt(data, index++);
        s_wifiResponseAutoFlushConut += Serial.print(c);
      }
      isSendOK = stopHttpFrame();
    28e2:	0e 94 ee 13 	call	0x27dc	; 0x27dc <_ZN15GB_SerialHelper13stopHttpFrameEv>
    28e6:	b8 2e       	mov	r11, r24
     return wifiExecuteCommand(); 
     */
  }

  static void startHttpFrame(const byte &wifiPortDescriptor){
    sendWifiFrameStart(wifiPortDescriptor, WIFI_RESPONSE_FRAME_SIZE);
    28e8:	80 91 b9 01 	lds	r24, 0x01B9
    28ec:	68 e7       	ldi	r22, 0x78	; 120
    28ee:	75 e0       	ldi	r23, 0x05	; 5
    28f0:	0e 94 e5 06 	call	0xdca	; 0xdca <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>
    s_wifiResponseAutoFlushConut = 0;
    28f4:	10 92 90 02 	sts	0x0290, r1
    28f8:	10 92 8f 02 	sts	0x028F, r1
    28fc:	cc 0e       	add	r12, r28
    28fe:	dd 1e       	adc	r13, r29
    2900:	14 c0       	rjmp	.+40     	; 0x292a <_ZL8sendDataPK19__FlashStringHelper+0x100>
        s_wifiResponseAutoFlushConut += Serial.print(c);
      }
      isSendOK = stopHttpFrame();
      startHttpFrame(wifiPortDescriptor);   
      while (index < flashStringLength(data)){
        char c = flashStringCharAt(data, index++);
    2902:	21 96       	adiw	r28, 0x01	; 1
    2904:	f6 01       	movw	r30, r12
    2906:	64 91       	lpm	r22, Z+
        s_wifiResponseAutoFlushConut += Serial.print(c);
    2908:	00 91 8f 02 	lds	r16, 0x028F
    290c:	10 91 90 02 	lds	r17, 0x0290
    2910:	8f eb       	ldi	r24, 0xBF	; 191
    2912:	94 e0       	ldi	r25, 0x04	; 4
    2914:	0e 94 c7 33 	call	0x678e	; 0x678e <_ZN5Print5printEc>
    2918:	08 0f       	add	r16, r24
    291a:	19 1f       	adc	r17, r25
    291c:	10 93 90 02 	sts	0x0290, r17
    2920:	00 93 8f 02 	sts	0x028F, r16
    2924:	08 94       	sec
    2926:	c1 1c       	adc	r12, r1
    2928:	d1 1c       	adc	r13, r1
        char c = flashStringCharAt(data, index++);
        s_wifiResponseAutoFlushConut += Serial.print(c);
      }
      isSendOK = stopHttpFrame();
      startHttpFrame(wifiPortDescriptor);   
      while (index < flashStringLength(data)){
    292a:	ce 15       	cp	r28, r14
    292c:	df 05       	cpc	r29, r15
    292e:	4c f3       	brlt	.-46     	; 0x2902 <_ZL8sendDataPK19__FlashStringHelper+0xd8>
    2930:	bb 20       	and	r11, r11
    2932:	49 f4       	brne	.+18     	; 0x2946 <_ZL8sendDataPK19__FlashStringHelper+0x11c>
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	80 93 00 02 	sts	0x0200, r24
    293a:	05 c0       	rjmp	.+10     	; 0x2946 <_ZL8sendDataPK19__FlashStringHelper+0x11c>
    293c:	8f eb       	ldi	r24, 0xBF	; 191
    293e:	94 e0       	ldi	r25, 0x04	; 4
    2940:	b6 01       	movw	r22, r12
    2942:	0e 94 a4 33 	call	0x6748	; 0x6748 <_ZN5Print5printEPK19__FlashStringHelper>
    2946:	df 91       	pop	r29
    2948:	cf 91       	pop	r28
    294a:	1f 91       	pop	r17
    294c:	0f 91       	pop	r16
    294e:	ff 90       	pop	r15
    2950:	ef 90       	pop	r14
    2952:	df 90       	pop	r13
    2954:	cf 90       	pop	r12
    2956:	bf 90       	pop	r11
    2958:	08 95       	ret

0000295a <_ZL17sendHTTPtagButtonPK19__FlashStringHelperS1_>:
    295a:	ef 92       	push	r14
    295c:	ff 92       	push	r15
    295e:	0f 93       	push	r16
    2960:	1f 93       	push	r17
    2962:	8c 01       	movw	r16, r24
    2964:	7b 01       	movw	r14, r22
    2966:	85 e0       	ldi	r24, 0x05	; 5
    2968:	93 e0       	ldi	r25, 0x03	; 3
    296a:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    296e:	c8 01       	movw	r24, r16
    2970:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    2974:	8a ef       	ldi	r24, 0xFA	; 250
    2976:	92 e0       	ldi	r25, 0x02	; 2
    2978:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    297c:	c7 01       	movw	r24, r14
    297e:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    2982:	86 ef       	ldi	r24, 0xF6	; 246
    2984:	92 e0       	ldi	r25, 0x02	; 2
    2986:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    298a:	1f 91       	pop	r17
    298c:	0f 91       	pop	r16
    298e:	ff 90       	pop	r15
    2990:	ef 90       	pop	r14
    2992:	08 95       	ret

00002994 <_ZL30printSendConfigurationControlsv>:
    2994:	8f e7       	ldi	r24, 0x7F	; 127
    2996:	95 e0       	ldi	r25, 0x05	; 5
    2998:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    299c:	8a e5       	ldi	r24, 0x5A	; 90
    299e:	95 e0       	ldi	r25, 0x05	; 5
    29a0:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    29a4:	82 e5       	ldi	r24, 0x52	; 82
    29a6:	95 e0       	ldi	r25, 0x05	; 5
    29a8:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    29ac:	08 95       	ret

000029ae <_ZL8sendDataRK6String>:
    29ae:	df 92       	push	r13
    29b0:	ef 92       	push	r14
    29b2:	ff 92       	push	r15
    29b4:	0f 93       	push	r16
    29b6:	1f 93       	push	r17
    29b8:	cf 93       	push	r28
    29ba:	df 93       	push	r29
    29bc:	7c 01       	movw	r14, r24
    29be:	80 91 ff 01 	lds	r24, 0x01FF
    29c2:	88 23       	and	r24, r24
    29c4:	09 f4       	brne	.+2      	; 0x29c8 <_ZL8sendDataRK6String+0x1a>
    29c6:	7f c0       	rjmp	.+254    	; 0x2ac6 <_ZL8sendDataRK6String+0x118>
    return isSendOK;
  }  

  static boolean sendHttpResponseData(const byte &wifiPortDescriptor, const String &data){
    boolean isSendOK = true;
    if (data.length() == 0){
    29c8:	f7 01       	movw	r30, r14
    29ca:	84 81       	ldd	r24, Z+4	; 0x04
    29cc:	95 81       	ldd	r25, Z+5	; 0x05
    29ce:	89 2b       	or	r24, r25
    29d0:	09 f4       	brne	.+2      	; 0x29d4 <_ZL8sendDataRK6String+0x26>
    29d2:	7e c0       	rjmp	.+252    	; 0x2ad0 <_ZL8sendDataRK6String+0x122>
      return isSendOK;
    }
    if (!s_wifiIsHeaderSended){
    29d4:	80 91 8e 02 	lds	r24, 0x028E
    29d8:	88 23       	and	r24, r24
    29da:	89 f4       	brne	.+34     	; 0x29fe <_ZL8sendDataRK6String+0x50>
      sendHttpOKHeader(wifiPortDescriptor); 
    29dc:	80 91 b9 01 	lds	r24, 0x01B9
    29e0:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <_ZN15GB_SerialHelper16sendHttpOKHeaderEh>
      s_wifiIsHeaderSended = true;
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	80 93 8e 02 	sts	0x028E, r24
     return wifiExecuteCommand(); 
     */
  }

  static void startHttpFrame(const byte &wifiPortDescriptor){
    sendWifiFrameStart(wifiPortDescriptor, WIFI_RESPONSE_FRAME_SIZE);
    29ea:	80 91 b9 01 	lds	r24, 0x01B9
    29ee:	68 e7       	ldi	r22, 0x78	; 120
    29f0:	75 e0       	ldi	r23, 0x05	; 5
    29f2:	0e 94 e5 06 	call	0xdca	; 0xdca <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>
    s_wifiResponseAutoFlushConut = 0;
    29f6:	10 92 90 02 	sts	0x0290, r1
    29fa:	10 92 8f 02 	sts	0x028F, r1
    if (!s_wifiIsHeaderSended){
      sendHttpOKHeader(wifiPortDescriptor); 
      s_wifiIsHeaderSended = true;
      startHttpFrame(wifiPortDescriptor);
    } 
    if (s_wifiResponseAutoFlushConut + data.length() < WIFI_RESPONSE_FRAME_SIZE){
    29fe:	c0 91 8f 02 	lds	r28, 0x028F
    2a02:	d0 91 90 02 	lds	r29, 0x0290
    2a06:	f7 01       	movw	r30, r14
    2a08:	84 81       	ldd	r24, Z+4	; 0x04
    2a0a:	95 81       	ldd	r25, Z+5	; 0x05
    2a0c:	8c 0f       	add	r24, r28
    2a0e:	9d 1f       	adc	r25, r29
    2a10:	88 57       	subi	r24, 0x78	; 120
    2a12:	95 40       	sbci	r25, 0x05	; 5
    2a14:	18 f0       	brcs	.+6      	; 0x2a1c <_ZL8sendDataRK6String+0x6e>
    2a16:	c0 e0       	ldi	r28, 0x00	; 0
    2a18:	d0 e0       	ldi	r29, 0x00	; 0
    2a1a:	20 c0       	rjmp	.+64     	; 0x2a5c <_ZL8sendDataRK6String+0xae>
      s_wifiResponseAutoFlushConut += Serial.print(data);
    2a1c:	8f eb       	ldi	r24, 0xBF	; 191
    2a1e:	94 e0       	ldi	r25, 0x04	; 4
    2a20:	b7 01       	movw	r22, r14
    2a22:	0e 94 08 35 	call	0x6a10	; 0x6a10 <_ZN5Print5printERK6String>
    2a26:	c8 0f       	add	r28, r24
    2a28:	d9 1f       	adc	r29, r25
    2a2a:	d0 93 90 02 	sts	0x0290, r29
    2a2e:	c0 93 8f 02 	sts	0x028F, r28
    2a32:	4e c0       	rjmp	.+156    	; 0x2ad0 <_ZL8sendDataRK6String+0x122>
    2a34:	be 01       	movw	r22, r28
    } 
    else {
      int index = 0;
      while (s_wifiResponseAutoFlushConut < WIFI_RESPONSE_FRAME_SIZE){
        char c = data[index++];
    2a36:	21 96       	adiw	r28, 0x01	; 1
    2a38:	c7 01       	movw	r24, r14
    2a3a:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <_ZNK6StringixEj>
    2a3e:	68 2f       	mov	r22, r24
        s_wifiResponseAutoFlushConut += Serial.print(c);
    2a40:	00 91 8f 02 	lds	r16, 0x028F
    2a44:	10 91 90 02 	lds	r17, 0x0290
    2a48:	8f eb       	ldi	r24, 0xBF	; 191
    2a4a:	94 e0       	ldi	r25, 0x04	; 4
    2a4c:	0e 94 c7 33 	call	0x678e	; 0x678e <_ZN5Print5printEc>
    2a50:	08 0f       	add	r16, r24
    2a52:	19 1f       	adc	r17, r25
    2a54:	10 93 90 02 	sts	0x0290, r17
    2a58:	00 93 8f 02 	sts	0x028F, r16
    if (s_wifiResponseAutoFlushConut + data.length() < WIFI_RESPONSE_FRAME_SIZE){
      s_wifiResponseAutoFlushConut += Serial.print(data);
    } 
    else {
      int index = 0;
      while (s_wifiResponseAutoFlushConut < WIFI_RESPONSE_FRAME_SIZE){
    2a5c:	80 91 8f 02 	lds	r24, 0x028F
    2a60:	90 91 90 02 	lds	r25, 0x0290
    2a64:	88 57       	subi	r24, 0x78	; 120
    2a66:	95 40       	sbci	r25, 0x05	; 5
    2a68:	2c f3       	brlt	.-54     	; 0x2a34 <_ZL8sendDataRK6String+0x86>
        char c = data[index++];
        s_wifiResponseAutoFlushConut += Serial.print(c);
      }
      isSendOK = stopHttpFrame();
    2a6a:	0e 94 ee 13 	call	0x27dc	; 0x27dc <_ZN15GB_SerialHelper13stopHttpFrameEv>
    2a6e:	d8 2e       	mov	r13, r24
     return wifiExecuteCommand(); 
     */
  }

  static void startHttpFrame(const byte &wifiPortDescriptor){
    sendWifiFrameStart(wifiPortDescriptor, WIFI_RESPONSE_FRAME_SIZE);
    2a70:	80 91 b9 01 	lds	r24, 0x01B9
    2a74:	68 e7       	ldi	r22, 0x78	; 120
    2a76:	75 e0       	ldi	r23, 0x05	; 5
    2a78:	0e 94 e5 06 	call	0xdca	; 0xdca <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>
    s_wifiResponseAutoFlushConut = 0;
    2a7c:	10 92 90 02 	sts	0x0290, r1
    2a80:	10 92 8f 02 	sts	0x028F, r1
    2a84:	13 c0       	rjmp	.+38     	; 0x2aac <_ZL8sendDataRK6String+0xfe>
      }
      isSendOK = stopHttpFrame();
      startHttpFrame(wifiPortDescriptor); 

      while (index < data.length()){
        char c = data[index++];
    2a86:	21 96       	adiw	r28, 0x01	; 1
    2a88:	c7 01       	movw	r24, r14
    2a8a:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <_ZNK6StringixEj>
    2a8e:	68 2f       	mov	r22, r24
        s_wifiResponseAutoFlushConut += Serial.print(c);
    2a90:	00 91 8f 02 	lds	r16, 0x028F
    2a94:	10 91 90 02 	lds	r17, 0x0290
    2a98:	8f eb       	ldi	r24, 0xBF	; 191
    2a9a:	94 e0       	ldi	r25, 0x04	; 4
    2a9c:	0e 94 c7 33 	call	0x678e	; 0x678e <_ZN5Print5printEc>
    2aa0:	08 0f       	add	r16, r24
    2aa2:	19 1f       	adc	r17, r25
    2aa4:	10 93 90 02 	sts	0x0290, r17
    2aa8:	00 93 8f 02 	sts	0x028F, r16
    2aac:	be 01       	movw	r22, r28
        s_wifiResponseAutoFlushConut += Serial.print(c);
      }
      isSendOK = stopHttpFrame();
      startHttpFrame(wifiPortDescriptor); 

      while (index < data.length()){
    2aae:	f7 01       	movw	r30, r14
    2ab0:	84 81       	ldd	r24, Z+4	; 0x04
    2ab2:	95 81       	ldd	r25, Z+5	; 0x05
    2ab4:	c8 17       	cp	r28, r24
    2ab6:	d9 07       	cpc	r29, r25
    2ab8:	30 f3       	brcs	.-52     	; 0x2a86 <_ZL8sendDataRK6String+0xd8>
    2aba:	dd 20       	and	r13, r13
    2abc:	49 f4       	brne	.+18     	; 0x2ad0 <_ZL8sendDataRK6String+0x122>
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	80 93 00 02 	sts	0x0200, r24
    2ac4:	05 c0       	rjmp	.+10     	; 0x2ad0 <_ZL8sendDataRK6String+0x122>
    2ac6:	8f eb       	ldi	r24, 0xBF	; 191
    2ac8:	94 e0       	ldi	r25, 0x04	; 4
    2aca:	b7 01       	movw	r22, r14
    2acc:	0e 94 08 35 	call	0x6a10	; 0x6a10 <_ZN5Print5printERK6String>
    2ad0:	df 91       	pop	r29
    2ad2:	cf 91       	pop	r28
    2ad4:	1f 91       	pop	r17
    2ad6:	0f 91       	pop	r16
    2ad8:	ff 90       	pop	r15
    2ada:	ef 90       	pop	r14
    2adc:	df 90       	pop	r13
    2ade:	08 95       	ret

00002ae0 <_ZL8sendDatac>:
    2ae0:	ff 92       	push	r15
    2ae2:	0f 93       	push	r16
    2ae4:	1f 93       	push	r17
    2ae6:	df 93       	push	r29
    2ae8:	cf 93       	push	r28
    2aea:	cd b7       	in	r28, 0x3d	; 61
    2aec:	de b7       	in	r29, 0x3e	; 62
    2aee:	27 97       	sbiw	r28, 0x07	; 7
    2af0:	0f b6       	in	r0, 0x3f	; 63
    2af2:	f8 94       	cli
    2af4:	de bf       	out	0x3e, r29	; 62
    2af6:	0f be       	out	0x3f, r0	; 63
    2af8:	cd bf       	out	0x3d, r28	; 61
    2afa:	f8 2e       	mov	r15, r24
    2afc:	8e 01       	movw	r16, r28
    2afe:	0f 5f       	subi	r16, 0xFF	; 255
    2b00:	1f 4f       	sbci	r17, 0xFF	; 255
    2b02:	c8 01       	movw	r24, r16
    2b04:	6b e2       	ldi	r22, 0x2B	; 43
    2b06:	71 e0       	ldi	r23, 0x01	; 1
    2b08:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
    2b0c:	c8 01       	movw	r24, r16
    2b0e:	6f 2d       	mov	r22, r15
    2b10:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <_ZN6String6concatEc>
    2b14:	c8 01       	movw	r24, r16
    2b16:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZL8sendDataRK6String>
    2b1a:	c8 01       	movw	r24, r16
    2b1c:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
    2b20:	27 96       	adiw	r28, 0x07	; 7
    2b22:	0f b6       	in	r0, 0x3f	; 63
    2b24:	f8 94       	cli
    2b26:	de bf       	out	0x3e, r29	; 62
    2b28:	0f be       	out	0x3f, r0	; 63
    2b2a:	cd bf       	out	0x3d, r28	; 61
    2b2c:	cf 91       	pop	r28
    2b2e:	df 91       	pop	r29
    2b30:	1f 91       	pop	r17
    2b32:	0f 91       	pop	r16
    2b34:	ff 90       	pop	r15
    2b36:	08 95       	ret

00002b38 <_ZL11sendHTTPtagPK19__FlashStringHelper8HTTP_TAG>:
    2b38:	0f 93       	push	r16
    2b3a:	1f 93       	push	r17
    2b3c:	cf 93       	push	r28
    2b3e:	df 93       	push	r29
    2b40:	8c 01       	movw	r16, r24
    2b42:	eb 01       	movw	r28, r22
    2b44:	8c e3       	ldi	r24, 0x3C	; 60
    2b46:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <_ZL8sendDatac>
    2b4a:	c1 30       	cpi	r28, 0x01	; 1
    2b4c:	d1 05       	cpc	r29, r1
    2b4e:	19 f4       	brne	.+6      	; 0x2b56 <_ZL11sendHTTPtagPK19__FlashStringHelper8HTTP_TAG+0x1e>
    2b50:	8f e2       	ldi	r24, 0x2F	; 47
    2b52:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <_ZL8sendDatac>
    2b56:	c8 01       	movw	r24, r16
    2b58:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    2b5c:	22 97       	sbiw	r28, 0x02	; 2
    2b5e:	19 f4       	brne	.+6      	; 0x2b66 <_ZL11sendHTTPtagPK19__FlashStringHelper8HTTP_TAG+0x2e>
    2b60:	8f e2       	ldi	r24, 0x2F	; 47
    2b62:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <_ZL8sendDatac>
    2b66:	8e e3       	ldi	r24, 0x3E	; 62
    2b68:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <_ZL8sendDatac>
    2b6c:	df 91       	pop	r29
    2b6e:	cf 91       	pop	r28
    2b70:	1f 91       	pop	r17
    2b72:	0f 91       	pop	r16
    2b74:	08 95       	ret

00002b76 <_ZL9sendTab_B8HTTP_TAG>:
    2b76:	bc 01       	movw	r22, r24
    2b78:	88 e6       	ldi	r24, 0x68	; 104
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <_ZL11sendHTTPtagPK19__FlashStringHelper8HTTP_TAG>
    2b80:	08 95       	ret

00002b82 <_ZL10sendTag_TD8HTTP_TAG>:
    2b82:	bc 01       	movw	r22, r24
    2b84:	87 ee       	ldi	r24, 0xE7	; 231
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <_ZL11sendHTTPtagPK19__FlashStringHelper8HTTP_TAG>
    2b8c:	08 95       	ret

00002b8e <_ZL10sendTag_TR8HTTP_TAG>:
    2b8e:	bc 01       	movw	r22, r24
    2b90:	8a ee       	ldi	r24, 0xEA	; 234
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <_ZL11sendHTTPtagPK19__FlashStringHelper8HTTP_TAG>
    2b98:	08 95       	ret

00002b9a <_ZL13sendTag_TABLE8HTTP_TAG>:
    2b9a:	bc 01       	movw	r22, r24
    2b9c:	8d ee       	ldi	r24, 0xED	; 237
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <_ZL11sendHTTPtagPK19__FlashStringHelper8HTTP_TAG>
    2ba4:	08 95       	ret

00002ba6 <_ZL10sendTag_HRv>:
    2ba6:	87 e3       	ldi	r24, 0x37	; 55
    2ba8:	93 e0       	ldi	r25, 0x03	; 3
    2baa:	62 e0       	ldi	r22, 0x02	; 2
    2bac:	70 e0       	ldi	r23, 0x00	; 0
    2bae:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <_ZL11sendHTTPtagPK19__FlashStringHelper8HTTP_TAG>
    2bb2:	08 95       	ret

00002bb4 <_ZL11sendTab_PRE8HTTP_TAG>:
    2bb4:	bc 01       	movw	r22, r24
    2bb6:	8d ec       	ldi	r24, 0xCD	; 205
    2bb8:	95 e0       	ldi	r25, 0x05	; 5
    2bba:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <_ZL11sendHTTPtagPK19__FlashStringHelper8HTTP_TAG>
    2bbe:	08 95       	ret

00002bc0 <_Z20printSendStorageDumpv>:
    2bc0:	bf 92       	push	r11
    2bc2:	cf 92       	push	r12
    2bc4:	df 92       	push	r13
    2bc6:	ef 92       	push	r14
    2bc8:	ff 92       	push	r15
    2bca:	0f 93       	push	r16
    2bcc:	1f 93       	push	r17
    2bce:	df 93       	push	r29
    2bd0:	cf 93       	push	r28
    2bd2:	cd b7       	in	r28, 0x3d	; 61
    2bd4:	de b7       	in	r29, 0x3e	; 62
    2bd6:	65 97       	sbiw	r28, 0x15	; 21
    2bd8:	0f b6       	in	r0, 0x3f	; 63
    2bda:	f8 94       	cli
    2bdc:	de bf       	out	0x3e, r29	; 62
    2bde:	0f be       	out	0x3f, r0	; 63
    2be0:	cd bf       	out	0x3d, r28	; 61
    2be2:	80 e0       	ldi	r24, 0x00	; 0
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <_ZL13sendTag_TABLE8HTTP_TAG>
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <_ZL10sendTag_TR8HTTP_TAG>
    2bf2:	80 e0       	ldi	r24, 0x00	; 0
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <_ZL10sendTag_TD8HTTP_TAG>
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <_ZL10sendTag_TD8HTTP_TAG>
    2c02:	10 e0       	ldi	r17, 0x00	; 0
    2c04:	7e 01       	movw	r14, r28
    2c06:	08 94       	sec
    2c08:	e1 1c       	adc	r14, r1
    2c0a:	f1 1c       	adc	r15, r1
    2c0c:	80 e0       	ldi	r24, 0x00	; 0
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <_ZL10sendTag_TD8HTTP_TAG>
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <_ZL9sendTab_B8HTTP_TAG>
    2c1c:	c7 01       	movw	r24, r14
    2c1e:	61 2f       	mov	r22, r17
    2c20:	40 e0       	ldi	r20, 0x00	; 0
    2c22:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN13GB_PrintDirty6getHEXEhh>
    2c26:	c7 01       	movw	r24, r14
    2c28:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZL8sendDataRK6String>
    2c2c:	c7 01       	movw	r24, r14
    2c2e:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <_ZL9sendTab_B8HTTP_TAG>
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <_ZL10sendTag_TD8HTTP_TAG>
    2c42:	1f 5f       	subi	r17, 0xFF	; 255
    2c44:	10 31       	cpi	r17, 0x10	; 16
    2c46:	11 f7       	brne	.-60     	; 0x2c0c <_Z20printSendStorageDumpv+0x4c>
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <_ZL10sendTag_TR8HTTP_TAG>
    2c50:	00 e0       	ldi	r16, 0x00	; 0
    2c52:	10 e0       	ldi	r17, 0x00	; 0
    2c54:	68 e0       	ldi	r22, 0x08	; 8
    2c56:	c6 2e       	mov	r12, r22
    2c58:	d1 2c       	mov	r13, r1
    2c5a:	cc 0e       	add	r12, r28
    2c5c:	dd 1e       	adc	r13, r29
    2c5e:	5f e0       	ldi	r21, 0x0F	; 15
    2c60:	e5 2e       	mov	r14, r21
    2c62:	f1 2c       	mov	r15, r1
    2c64:	ec 0e       	add	r14, r28
    2c66:	fd 1e       	adc	r15, r29
    2c68:	c8 01       	movw	r24, r16
    2c6a:	0e 94 b1 06 	call	0xd62	; 0xd62 <_ZN10GB_Storage4readEj>
    2c6e:	b8 2e       	mov	r11, r24
    2c70:	c8 01       	movw	r24, r16
    2c72:	8f 70       	andi	r24, 0x0F	; 15
    2c74:	90 70       	andi	r25, 0x00	; 0
    2c76:	89 2b       	or	r24, r25
    2c78:	59 f5       	brne	.+86     	; 0x2cd0 <_Z20printSendStorageDumpv+0x110>
    2c7a:	01 15       	cp	r16, r1
    2c7c:	11 05       	cpc	r17, r1
    2c7e:	21 f0       	breq	.+8      	; 0x2c88 <_Z20printSendStorageDumpv+0xc8>
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <_ZL10sendTag_TR8HTTP_TAG>
    2c88:	80 e0       	ldi	r24, 0x00	; 0
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <_ZL10sendTag_TR8HTTP_TAG>
    2c90:	80 e0       	ldi	r24, 0x00	; 0
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <_ZL10sendTag_TD8HTTP_TAG>
    2c98:	80 e0       	ldi	r24, 0x00	; 0
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <_ZL9sendTab_B8HTTP_TAG>
    2ca0:	b8 01       	movw	r22, r16
    2ca2:	44 e0       	ldi	r20, 0x04	; 4
    2ca4:	76 95       	lsr	r23
    2ca6:	67 95       	ror	r22
    2ca8:	4a 95       	dec	r20
    2caa:	e1 f7       	brne	.-8      	; 0x2ca4 <_Z20printSendStorageDumpv+0xe4>
    2cac:	c6 01       	movw	r24, r12
    2cae:	40 e0       	ldi	r20, 0x00	; 0
    2cb0:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN13GB_PrintDirty6getHEXEhh>
    2cb4:	c6 01       	movw	r24, r12
    2cb6:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZL8sendDataRK6String>
    2cba:	c6 01       	movw	r24, r12
    2cbc:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <_ZL9sendTab_B8HTTP_TAG>
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <_ZL10sendTag_TD8HTTP_TAG>
    2cd0:	80 e0       	ldi	r24, 0x00	; 0
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <_ZL10sendTag_TD8HTTP_TAG>
    2cd8:	c7 01       	movw	r24, r14
    2cda:	6b 2d       	mov	r22, r11
    2cdc:	40 e0       	ldi	r20, 0x00	; 0
    2cde:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN13GB_PrintDirty6getHEXEhh>
    2ce2:	c7 01       	movw	r24, r14
    2ce4:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZL8sendDataRK6String>
    2ce8:	c7 01       	movw	r24, r14
    2cea:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
    2cee:	81 e0       	ldi	r24, 0x01	; 1
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <_ZL10sendTag_TD8HTTP_TAG>
    2cf6:	80 91 00 02 	lds	r24, 0x0200
    2cfa:	88 23       	and	r24, r24
    2cfc:	79 f4       	brne	.+30     	; 0x2d1c <_Z20printSendStorageDumpv+0x15c>
    2cfe:	0f 5f       	subi	r16, 0xFF	; 255
    2d00:	1f 4f       	sbci	r17, 0xFF	; 255
    2d02:	80 e1       	ldi	r24, 0x10	; 16
    2d04:	00 30       	cpi	r16, 0x00	; 0
    2d06:	18 07       	cpc	r17, r24
    2d08:	09 f0       	breq	.+2      	; 0x2d0c <_Z20printSendStorageDumpv+0x14c>
    2d0a:	ae cf       	rjmp	.-164    	; 0x2c68 <_Z20printSendStorageDumpv+0xa8>
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <_ZL10sendTag_TR8HTTP_TAG>
    2d14:	81 e0       	ldi	r24, 0x01	; 1
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <_ZL13sendTag_TABLE8HTTP_TAG>
    2d1c:	65 96       	adiw	r28, 0x15	; 21
    2d1e:	0f b6       	in	r0, 0x3f	; 63
    2d20:	f8 94       	cli
    2d22:	de bf       	out	0x3e, r29	; 62
    2d24:	0f be       	out	0x3f, r0	; 63
    2d26:	cd bf       	out	0x3d, r28	; 61
    2d28:	cf 91       	pop	r28
    2d2a:	df 91       	pop	r29
    2d2c:	1f 91       	pop	r17
    2d2e:	0f 91       	pop	r16
    2d30:	ff 90       	pop	r15
    2d32:	ef 90       	pop	r14
    2d34:	df 90       	pop	r13
    2d36:	cf 90       	pop	r12
    2d38:	bf 90       	pop	r11
    2d3a:	08 95       	ret

00002d3c <_ZL8sendDatai>:
    2d3c:	ef 92       	push	r14
    2d3e:	ff 92       	push	r15
    2d40:	0f 93       	push	r16
    2d42:	1f 93       	push	r17
    2d44:	df 93       	push	r29
    2d46:	cf 93       	push	r28
    2d48:	cd b7       	in	r28, 0x3d	; 61
    2d4a:	de b7       	in	r29, 0x3e	; 62
    2d4c:	27 97       	sbiw	r28, 0x07	; 7
    2d4e:	0f b6       	in	r0, 0x3f	; 63
    2d50:	f8 94       	cli
    2d52:	de bf       	out	0x3e, r29	; 62
    2d54:	0f be       	out	0x3f, r0	; 63
    2d56:	cd bf       	out	0x3d, r28	; 61
    2d58:	7c 01       	movw	r14, r24
    2d5a:	8e 01       	movw	r16, r28
    2d5c:	0f 5f       	subi	r16, 0xFF	; 255
    2d5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d60:	c8 01       	movw	r24, r16
    2d62:	6b e2       	ldi	r22, 0x2B	; 43
    2d64:	71 e0       	ldi	r23, 0x01	; 1
    2d66:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
    2d6a:	c8 01       	movw	r24, r16
    2d6c:	b7 01       	movw	r22, r14
    2d6e:	0e 94 57 37 	call	0x6eae	; 0x6eae <_ZN6String6concatEi>
    2d72:	c8 01       	movw	r24, r16
    2d74:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZL8sendDataRK6String>
    2d78:	c8 01       	movw	r24, r16
    2d7a:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
    2d7e:	27 96       	adiw	r28, 0x07	; 7
    2d80:	0f b6       	in	r0, 0x3f	; 63
    2d82:	f8 94       	cli
    2d84:	de bf       	out	0x3e, r29	; 62
    2d86:	0f be       	out	0x3f, r0	; 63
    2d88:	cd bf       	out	0x3d, r28	; 61
    2d8a:	cf 91       	pop	r28
    2d8c:	df 91       	pop	r29
    2d8e:	1f 91       	pop	r17
    2d90:	0f 91       	pop	r16
    2d92:	ff 90       	pop	r15
    2d94:	ef 90       	pop	r14
    2d96:	08 95       	ret

00002d98 <_Z14sendFreeMemoryv>:
    2d98:	83 ef       	ldi	r24, 0xF3	; 243
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    2da0:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <freeMemory>
    2da4:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <_ZL8sendDatai>
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	91 e0       	ldi	r25, 0x01	; 1
    2dac:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    2db0:	88 e0       	ldi	r24, 0x08	; 8
    2db2:	91 e0       	ldi	r25, 0x01	; 1
    2db4:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    2db8:	08 95       	ret

00002dba <_ZL19printSendPinsStatusv>:
    2dba:	af 92       	push	r10
    2dbc:	bf 92       	push	r11
    2dbe:	cf 92       	push	r12
    2dc0:	df 92       	push	r13
    2dc2:	ef 92       	push	r14
    2dc4:	ff 92       	push	r15
    2dc6:	0f 93       	push	r16
    2dc8:	1f 93       	push	r17
    2dca:	df 93       	push	r29
    2dcc:	cf 93       	push	r28
    2dce:	cd b7       	in	r28, 0x3d	; 61
    2dd0:	de b7       	in	r29, 0x3e	; 62
    2dd2:	27 97       	sbiw	r28, 0x07	; 7
    2dd4:	0f b6       	in	r0, 0x3f	; 63
    2dd6:	f8 94       	cli
    2dd8:	de bf       	out	0x3e, r29	; 62
    2dda:	0f be       	out	0x3f, r0	; 63
    2ddc:	cd bf       	out	0x3d, r28	; 61
    2dde:	81 e4       	ldi	r24, 0x41	; 65
    2de0:	95 e0       	ldi	r25, 0x05	; 5
    2de2:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    2de6:	88 e0       	ldi	r24, 0x08	; 8
    2de8:	91 e0       	ldi	r25, 0x01	; 1
    2dea:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    2dee:	00 e0       	ldi	r16, 0x00	; 0
    2df0:	10 e0       	ldi	r17, 0x00	; 0
    2df2:	72 ef       	ldi	r23, 0xF2	; 242
    2df4:	c7 2e       	mov	r12, r23
    2df6:	7f ef       	ldi	r23, 0xFF	; 255
    2df8:	d7 2e       	mov	r13, r23
    2dfa:	5e 01       	movw	r10, r28
    2dfc:	08 94       	sec
    2dfe:	a1 1c       	adc	r10, r1
    2e00:	b1 1c       	adc	r11, r1
    2e02:	80 e2       	ldi	r24, 0x20	; 32
    2e04:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <_ZL8sendDatac>
    2e08:	0e 30       	cpi	r16, 0x0E	; 14
    2e0a:	11 05       	cpc	r17, r1
    2e0c:	3c f0       	brlt	.+14     	; 0x2e1c <_ZL19printSendPinsStatusv+0x62>
    2e0e:	81 e4       	ldi	r24, 0x41	; 65
    2e10:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <_ZL8sendDatac>
    2e14:	c6 01       	movw	r24, r12
    2e16:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <_ZL8sendDatai>
    2e1a:	0b c0       	rjmp	.+22     	; 0x2e32 <_ZL19printSendPinsStatusv+0x78>
    2e1c:	c5 01       	movw	r24, r10
    2e1e:	b8 01       	movw	r22, r16
    2e20:	42 e0       	ldi	r20, 0x02	; 2
    2e22:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
    2e26:	c5 01       	movw	r24, r10
    2e28:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZL8sendDataRK6String>
    2e2c:	c5 01       	movw	r24, r10
    2e2e:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
    2e32:	8e e3       	ldi	r24, 0x3E	; 62
    2e34:	95 e0       	ldi	r25, 0x05	; 5
    2e36:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    2e3a:	08 30       	cpi	r16, 0x08	; 8
    2e3c:	11 05       	cpc	r17, r1
    2e3e:	f4 f4       	brge	.+60     	; 0x2e7c <_ZL19printSendPinsStatusv+0xc2>
    2e40:	8a b1       	in	r24, 0x0a	; 10
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	00 2e       	mov	r0, r16
    2e46:	02 c0       	rjmp	.+4      	; 0x2e4c <_ZL19printSendPinsStatusv+0x92>
    2e48:	95 95       	asr	r25
    2e4a:	87 95       	ror	r24
    2e4c:	0a 94       	dec	r0
    2e4e:	e2 f7       	brpl	.-8      	; 0x2e48 <_ZL19printSendPinsStatusv+0x8e>
    2e50:	38 2f       	mov	r19, r24
    2e52:	31 70       	andi	r19, 0x01	; 1
    2e54:	8b b1       	in	r24, 0x0b	; 11
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	00 2e       	mov	r0, r16
    2e5a:	02 c0       	rjmp	.+4      	; 0x2e60 <_ZL19printSendPinsStatusv+0xa6>
    2e5c:	95 95       	asr	r25
    2e5e:	87 95       	ror	r24
    2e60:	0a 94       	dec	r0
    2e62:	e2 f7       	brpl	.-8      	; 0x2e5c <_ZL19printSendPinsStatusv+0xa2>
    2e64:	ee 24       	eor	r14, r14
    2e66:	e3 94       	inc	r14
    2e68:	e8 22       	and	r14, r24
    2e6a:	89 b1       	in	r24, 0x09	; 9
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	00 2e       	mov	r0, r16
    2e70:	02 c0       	rjmp	.+4      	; 0x2e76 <_ZL19printSendPinsStatusv+0xbc>
    2e72:	95 95       	asr	r25
    2e74:	87 95       	ror	r24
    2e76:	0a 94       	dec	r0
    2e78:	e2 f7       	brpl	.-8      	; 0x2e72 <_ZL19printSendPinsStatusv+0xb8>
    2e7a:	3a c0       	rjmp	.+116    	; 0x2ef0 <_ZL19printSendPinsStatusv+0x136>
    2e7c:	0e 30       	cpi	r16, 0x0E	; 14
    2e7e:	11 05       	cpc	r17, r1
    2e80:	d4 f4       	brge	.+52     	; 0x2eb6 <_ZL19printSendPinsStatusv+0xfc>
    2e82:	84 b1       	in	r24, 0x04	; 4
    2e84:	98 01       	movw	r18, r16
    2e86:	28 50       	subi	r18, 0x08	; 8
    2e88:	30 40       	sbci	r19, 0x00	; 0
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	02 2e       	mov	r0, r18
    2e8e:	02 c0       	rjmp	.+4      	; 0x2e94 <_ZL19printSendPinsStatusv+0xda>
    2e90:	95 95       	asr	r25
    2e92:	87 95       	ror	r24
    2e94:	0a 94       	dec	r0
    2e96:	e2 f7       	brpl	.-8      	; 0x2e90 <_ZL19printSendPinsStatusv+0xd6>
    2e98:	38 2f       	mov	r19, r24
    2e9a:	31 70       	andi	r19, 0x01	; 1
    2e9c:	85 b1       	in	r24, 0x05	; 5
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	02 2e       	mov	r0, r18
    2ea2:	02 c0       	rjmp	.+4      	; 0x2ea8 <_ZL19printSendPinsStatusv+0xee>
    2ea4:	95 95       	asr	r25
    2ea6:	87 95       	ror	r24
    2ea8:	0a 94       	dec	r0
    2eaa:	e2 f7       	brpl	.-8      	; 0x2ea4 <_ZL19printSendPinsStatusv+0xea>
    2eac:	ee 24       	eor	r14, r14
    2eae:	e3 94       	inc	r14
    2eb0:	e8 22       	and	r14, r24
    2eb2:	83 b1       	in	r24, 0x03	; 3
    2eb4:	17 c0       	rjmp	.+46     	; 0x2ee4 <_ZL19printSendPinsStatusv+0x12a>
    2eb6:	87 b1       	in	r24, 0x07	; 7
    2eb8:	2c 2d       	mov	r18, r12
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	0c 2c       	mov	r0, r12
    2ebe:	02 c0       	rjmp	.+4      	; 0x2ec4 <_ZL19printSendPinsStatusv+0x10a>
    2ec0:	95 95       	asr	r25
    2ec2:	87 95       	ror	r24
    2ec4:	0a 94       	dec	r0
    2ec6:	e2 f7       	brpl	.-8      	; 0x2ec0 <_ZL19printSendPinsStatusv+0x106>
    2ec8:	38 2f       	mov	r19, r24
    2eca:	31 70       	andi	r19, 0x01	; 1
    2ecc:	88 b1       	in	r24, 0x08	; 8
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	0c 2c       	mov	r0, r12
    2ed2:	02 c0       	rjmp	.+4      	; 0x2ed8 <_ZL19printSendPinsStatusv+0x11e>
    2ed4:	95 95       	asr	r25
    2ed6:	87 95       	ror	r24
    2ed8:	0a 94       	dec	r0
    2eda:	e2 f7       	brpl	.-8      	; 0x2ed4 <_ZL19printSendPinsStatusv+0x11a>
    2edc:	ee 24       	eor	r14, r14
    2ede:	e3 94       	inc	r14
    2ee0:	e8 22       	and	r14, r24
    2ee2:	86 b1       	in	r24, 0x06	; 6
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	02 c0       	rjmp	.+4      	; 0x2eec <_ZL19printSendPinsStatusv+0x132>
    2ee8:	95 95       	asr	r25
    2eea:	87 95       	ror	r24
    2eec:	2a 95       	dec	r18
    2eee:	e2 f7       	brpl	.-8      	; 0x2ee8 <_ZL19printSendPinsStatusv+0x12e>
    2ef0:	ff 24       	eor	r15, r15
    2ef2:	f3 94       	inc	r15
    2ef4:	f8 22       	and	r15, r24
    2ef6:	31 30       	cpi	r19, 0x01	; 1
    2ef8:	59 f4       	brne	.+22     	; 0x2f10 <_ZL19printSendPinsStatusv+0x156>
    2efa:	8b e3       	ldi	r24, 0x3B	; 59
    2efc:	95 e0       	ldi	r25, 0x05	; 5
    2efe:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    2f02:	8e 2d       	mov	r24, r14
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <_ZL8sendDatai>
    2f0a:	81 e3       	ldi	r24, 0x31	; 49
    2f0c:	95 e0       	ldi	r25, 0x05	; 5
    2f0e:	0a c0       	rjmp	.+20     	; 0x2f24 <_ZL19printSendPinsStatusv+0x16a>
    2f10:	88 e2       	ldi	r24, 0x28	; 40
    2f12:	95 e0       	ldi	r25, 0x05	; 5
    2f14:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    2f18:	8f 2d       	mov	r24, r15
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <_ZL8sendDatai>
    2f20:	84 e2       	ldi	r24, 0x24	; 36
    2f22:	95 e0       	ldi	r25, 0x05	; 5
    2f24:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    2f28:	08 30       	cpi	r16, 0x08	; 8
    2f2a:	11 05       	cpc	r17, r1
    2f2c:	91 f1       	breq	.+100    	; 0x2f92 <_ZL19printSendPinsStatusv+0x1d8>
    2f2e:	09 30       	cpi	r16, 0x09	; 9
    2f30:	11 05       	cpc	r17, r1
    2f32:	8c f4       	brge	.+34     	; 0x2f56 <_ZL19printSendPinsStatusv+0x19c>
    2f34:	03 30       	cpi	r16, 0x03	; 3
    2f36:	11 05       	cpc	r17, r1
    2f38:	19 f1       	breq	.+70     	; 0x2f80 <_ZL19printSendPinsStatusv+0x1c6>
    2f3a:	04 30       	cpi	r16, 0x04	; 4
    2f3c:	11 05       	cpc	r17, r1
    2f3e:	24 f4       	brge	.+8      	; 0x2f48 <_ZL19printSendPinsStatusv+0x18e>
    2f40:	02 30       	cpi	r16, 0x02	; 2
    2f42:	11 05       	cpc	r17, r1
    2f44:	b0 f5       	brcc	.+108    	; 0x2fb2 <_ZL19printSendPinsStatusv+0x1f8>
    2f46:	19 c0       	rjmp	.+50     	; 0x2f7a <_ZL19printSendPinsStatusv+0x1c0>
    2f48:	04 30       	cpi	r16, 0x04	; 4
    2f4a:	11 05       	cpc	r17, r1
    2f4c:	e1 f0       	breq	.+56     	; 0x2f86 <_ZL19printSendPinsStatusv+0x1cc>
    2f4e:	05 30       	cpi	r16, 0x05	; 5
    2f50:	11 05       	cpc	r17, r1
    2f52:	79 f5       	brne	.+94     	; 0x2fb2 <_ZL19printSendPinsStatusv+0x1f8>
    2f54:	1b c0       	rjmp	.+54     	; 0x2f8c <_ZL19printSendPinsStatusv+0x1d2>
    2f56:	0d 30       	cpi	r16, 0x0D	; 13
    2f58:	11 05       	cpc	r17, r1
    2f5a:	21 f1       	breq	.+72     	; 0x2fa4 <_ZL19printSendPinsStatusv+0x1ea>
    2f5c:	0e 30       	cpi	r16, 0x0E	; 14
    2f5e:	11 05       	cpc	r17, r1
    2f60:	3c f4       	brge	.+14     	; 0x2f70 <_ZL19printSendPinsStatusv+0x1b6>
    2f62:	0b 30       	cpi	r16, 0x0B	; 11
    2f64:	11 05       	cpc	r17, r1
    2f66:	c1 f0       	breq	.+48     	; 0x2f98 <_ZL19printSendPinsStatusv+0x1de>
    2f68:	0c 30       	cpi	r16, 0x0C	; 12
    2f6a:	11 05       	cpc	r17, r1
    2f6c:	11 f5       	brne	.+68     	; 0x2fb2 <_ZL19printSendPinsStatusv+0x1f8>
    2f6e:	17 c0       	rjmp	.+46     	; 0x2f9e <_ZL19printSendPinsStatusv+0x1e4>
    2f70:	c8 01       	movw	r24, r16
    2f72:	42 97       	sbiw	r24, 0x12	; 18
    2f74:	02 97       	sbiw	r24, 0x02	; 2
    2f76:	e8 f4       	brcc	.+58     	; 0x2fb2 <_ZL19printSendPinsStatusv+0x1f8>
    2f78:	18 c0       	rjmp	.+48     	; 0x2faa <_ZL19printSendPinsStatusv+0x1f0>
    2f7a:	8e ed       	ldi	r24, 0xDE	; 222
    2f7c:	94 e0       	ldi	r25, 0x04	; 4
    2f7e:	17 c0       	rjmp	.+46     	; 0x2fae <_ZL19printSendPinsStatusv+0x1f4>
    2f80:	84 ec       	ldi	r24, 0xC4	; 196
    2f82:	94 e0       	ldi	r25, 0x04	; 4
    2f84:	14 c0       	rjmp	.+40     	; 0x2fae <_ZL19printSendPinsStatusv+0x1f4>
    2f86:	8c ea       	ldi	r24, 0xAC	; 172
    2f88:	94 e0       	ldi	r25, 0x04	; 4
    2f8a:	11 c0       	rjmp	.+34     	; 0x2fae <_ZL19printSendPinsStatusv+0x1f4>
    2f8c:	86 e8       	ldi	r24, 0x86	; 134
    2f8e:	94 e0       	ldi	r25, 0x04	; 4
    2f90:	0e c0       	rjmp	.+28     	; 0x2fae <_ZL19printSendPinsStatusv+0x1f4>
    2f92:	83 e7       	ldi	r24, 0x73	; 115
    2f94:	94 e0       	ldi	r25, 0x04	; 4
    2f96:	0b c0       	rjmp	.+22     	; 0x2fae <_ZL19printSendPinsStatusv+0x1f4>
    2f98:	83 e5       	ldi	r24, 0x53	; 83
    2f9a:	94 e0       	ldi	r25, 0x04	; 4
    2f9c:	08 c0       	rjmp	.+16     	; 0x2fae <_ZL19printSendPinsStatusv+0x1f4>
    2f9e:	86 e4       	ldi	r24, 0x46	; 70
    2fa0:	94 e0       	ldi	r25, 0x04	; 4
    2fa2:	05 c0       	rjmp	.+10     	; 0x2fae <_ZL19printSendPinsStatusv+0x1f4>
    2fa4:	8f e3       	ldi	r24, 0x3F	; 63
    2fa6:	94 e0       	ldi	r25, 0x04	; 4
    2fa8:	02 c0       	rjmp	.+4      	; 0x2fae <_ZL19printSendPinsStatusv+0x1f4>
    2faa:	83 e0       	ldi	r24, 0x03	; 3
    2fac:	94 e0       	ldi	r25, 0x04	; 4
    2fae:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    2fb2:	88 e0       	ldi	r24, 0x08	; 8
    2fb4:	91 e0       	ldi	r25, 0x01	; 1
    2fb6:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    2fba:	0f 5f       	subi	r16, 0xFF	; 255
    2fbc:	1f 4f       	sbci	r17, 0xFF	; 255
    2fbe:	08 94       	sec
    2fc0:	c1 1c       	adc	r12, r1
    2fc2:	d1 1c       	adc	r13, r1
    2fc4:	04 31       	cpi	r16, 0x14	; 20
    2fc6:	11 05       	cpc	r17, r1
    2fc8:	09 f0       	breq	.+2      	; 0x2fcc <_ZL19printSendPinsStatusv+0x212>
    2fca:	1b cf       	rjmp	.-458    	; 0x2e02 <_ZL19printSendPinsStatusv+0x48>
    2fcc:	27 96       	adiw	r28, 0x07	; 7
    2fce:	0f b6       	in	r0, 0x3f	; 63
    2fd0:	f8 94       	cli
    2fd2:	de bf       	out	0x3e, r29	; 62
    2fd4:	0f be       	out	0x3f, r0	; 63
    2fd6:	cd bf       	out	0x3d, r28	; 61
    2fd8:	cf 91       	pop	r28
    2fda:	df 91       	pop	r29
    2fdc:	1f 91       	pop	r17
    2fde:	0f 91       	pop	r16
    2fe0:	ff 90       	pop	r15
    2fe2:	ef 90       	pop	r14
    2fe4:	df 90       	pop	r13
    2fe6:	cf 90       	pop	r12
    2fe8:	bf 90       	pop	r11
    2fea:	af 90       	pop	r10
    2fec:	08 95       	ret

00002fee <_ZL8sendDatam>:
    2fee:	0f 93       	push	r16
    2ff0:	1f 93       	push	r17
    2ff2:	df 93       	push	r29
    2ff4:	cf 93       	push	r28
    2ff6:	cd b7       	in	r28, 0x3d	; 61
    2ff8:	de b7       	in	r29, 0x3e	; 62
    2ffa:	27 97       	sbiw	r28, 0x07	; 7
    2ffc:	0f b6       	in	r0, 0x3f	; 63
    2ffe:	f8 94       	cli
    3000:	de bf       	out	0x3e, r29	; 62
    3002:	0f be       	out	0x3f, r0	; 63
    3004:	cd bf       	out	0x3d, r28	; 61
    3006:	ab 01       	movw	r20, r22
    3008:	bc 01       	movw	r22, r24
    300a:	8e 01       	movw	r16, r28
    300c:	0f 5f       	subi	r16, 0xFF	; 255
    300e:	1f 4f       	sbci	r17, 0xFF	; 255
    3010:	c8 01       	movw	r24, r16
    3012:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <_ZN13GB_PrintDirty13getTimeStringEm>
    3016:	c8 01       	movw	r24, r16
    3018:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZL8sendDataRK6String>
    301c:	c8 01       	movw	r24, r16
    301e:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
    3022:	27 96       	adiw	r28, 0x07	; 7
    3024:	0f b6       	in	r0, 0x3f	; 63
    3026:	f8 94       	cli
    3028:	de bf       	out	0x3e, r29	; 62
    302a:	0f be       	out	0x3f, r0	; 63
    302c:	cd bf       	out	0x3d, r28	; 61
    302e:	cf 91       	pop	r28
    3030:	df 91       	pop	r29
    3032:	1f 91       	pop	r17
    3034:	0f 91       	pop	r16
    3036:	08 95       	ret

00003038 <_ZL14sendTimeStatusv>:
    3038:	8e eb       	ldi	r24, 0xBE	; 190
    303a:	93 e0       	ldi	r25, 0x03	; 3
    303c:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    3040:	80 e0       	ldi	r24, 0x00	; 0
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <_ZL9sendTab_B8HTTP_TAG>
    3048:	80 91 b8 01 	lds	r24, 0x01B8
    304c:	88 23       	and	r24, r24
    304e:	19 f0       	breq	.+6      	; 0x3056 <_ZL14sendTimeStatusv+0x1e>
    3050:	8a eb       	ldi	r24, 0xBA	; 186
    3052:	93 e0       	ldi	r25, 0x03	; 3
    3054:	02 c0       	rjmp	.+4      	; 0x305a <_ZL14sendTimeStatusv+0x22>
    3056:	84 eb       	ldi	r24, 0xB4	; 180
    3058:	93 e0       	ldi	r25, 0x03	; 3
    305a:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    305e:	81 e0       	ldi	r24, 0x01	; 1
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <_ZL9sendTab_B8HTTP_TAG>
    3066:	87 ea       	ldi	r24, 0xA7	; 167
    3068:	93 e0       	ldi	r25, 0x03	; 3
    306a:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    306e:	0e 94 37 20 	call	0x406e	; 0x406e <_Z3nowv>
    3072:	0e 94 f7 17 	call	0x2fee	; 0x2fee <_ZL8sendDatam>
    3076:	8b e9       	ldi	r24, 0x9B	; 155
    3078:	93 e0       	ldi	r25, 0x03	; 3
    307a:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    307e:	81 e0       	ldi	r24, 0x01	; 1
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <_ZL8sendDatai>
    3086:	89 e8       	ldi	r24, 0x89	; 137
    3088:	93 e0       	ldi	r25, 0x03	; 3
    308a:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    308e:	89 e0       	ldi	r24, 0x09	; 9
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <_ZL8sendDatai>
    3096:	82 e8       	ldi	r24, 0x82	; 130
    3098:	93 e0       	ldi	r25, 0x03	; 3
    309a:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    309e:	08 95       	ret

000030a0 <_ZL8sendDataf>:
    30a0:	af 92       	push	r10
    30a2:	bf 92       	push	r11
    30a4:	cf 92       	push	r12
    30a6:	df 92       	push	r13
    30a8:	ef 92       	push	r14
    30aa:	ff 92       	push	r15
    30ac:	0f 93       	push	r16
    30ae:	1f 93       	push	r17
    30b0:	df 93       	push	r29
    30b2:	cf 93       	push	r28
    30b4:	cd b7       	in	r28, 0x3d	; 61
    30b6:	de b7       	in	r29, 0x3e	; 62
    30b8:	2e 97       	sbiw	r28, 0x0e	; 14
    30ba:	0f b6       	in	r0, 0x3f	; 63
    30bc:	f8 94       	cli
    30be:	de bf       	out	0x3e, r29	; 62
    30c0:	0f be       	out	0x3f, r0	; 63
    30c2:	cd bf       	out	0x3d, r28	; 61
    30c4:	7b 01       	movw	r14, r22
    30c6:	8c 01       	movw	r16, r24
      out = String("0x") + out;
    }
    return out;
  }
  static String floatToString(float number){
    String out;
    30c8:	5e 01       	movw	r10, r28
    30ca:	08 94       	sec
    30cc:	a1 1c       	adc	r10, r1
    30ce:	b1 1c       	adc	r11, r1
    30d0:	c5 01       	movw	r24, r10
    30d2:	6b e2       	ldi	r22, 0x2B	; 43
    30d4:	71 e0       	ldi	r23, 0x01	; 1
    30d6:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>

    int temp = number*100;
    30da:	c8 01       	movw	r24, r16
    30dc:	b7 01       	movw	r22, r14
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	48 ec       	ldi	r20, 0xC8	; 200
    30e4:	52 e4       	ldi	r21, 0x42	; 66
    30e6:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__mulsf3>
    30ea:	0e 94 c9 3a 	call	0x7592	; 0x7592 <__fixsfsi>
    30ee:	6b 01       	movw	r12, r22
    30f0:	7c 01       	movw	r14, r24
    30f2:	cb 01       	movw	r24, r22
    30f4:	64 e6       	ldi	r22, 0x64	; 100
    30f6:	70 e0       	ldi	r23, 0x00	; 0
    30f8:	0e 94 46 3c 	call	0x788c	; 0x788c <__divmodhi4>
    30fc:	c5 01       	movw	r24, r10
    30fe:	0e 94 57 37 	call	0x6eae	; 0x6eae <_ZN6String6concatEi>
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    3102:	c5 01       	movw	r24, r10
    3104:	6e e2       	ldi	r22, 0x2E	; 46
    3106:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <_ZN6String6concatEc>
    int whole = temp/100;
    int fract = temp%100;

    out += whole;
    out += '.';
    out += getFixedDigitsString(temp,2);
    310a:	8e 01       	movw	r16, r28
    310c:	08 5f       	subi	r16, 0xF8	; 248
    310e:	1f 4f       	sbci	r17, 0xFF	; 255
    3110:	c8 01       	movw	r24, r16
    3112:	b6 01       	movw	r22, r12
    3114:	42 e0       	ldi	r20, 0x02	; 2
    3116:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    311a:	c5 01       	movw	r24, r10
    311c:	b8 01       	movw	r22, r16
    311e:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <_ZN6String6concatERKS_>
    3122:	c8 01       	movw	r24, r16
    3124:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
    3128:	c5 01       	movw	r24, r10
    312a:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZL8sendDataRK6String>
    312e:	c5 01       	movw	r24, r10
    3130:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
    3134:	2e 96       	adiw	r28, 0x0e	; 14
    3136:	0f b6       	in	r0, 0x3f	; 63
    3138:	f8 94       	cli
    313a:	de bf       	out	0x3e, r29	; 62
    313c:	0f be       	out	0x3f, r0	; 63
    313e:	cd bf       	out	0x3d, r28	; 61
    3140:	cf 91       	pop	r28
    3142:	df 91       	pop	r29
    3144:	1f 91       	pop	r17
    3146:	0f 91       	pop	r16
    3148:	ff 90       	pop	r15
    314a:	ef 90       	pop	r14
    314c:	df 90       	pop	r13
    314e:	cf 90       	pop	r12
    3150:	bf 90       	pop	r11
    3152:	af 90       	pop	r10
    3154:	08 95       	ret

00003156 <_ZL21sendTemperatureStatusv>:
    3156:	af 92       	push	r10
    3158:	bf 92       	push	r11
    315a:	cf 92       	push	r12
    315c:	df 92       	push	r13
    315e:	ef 92       	push	r14
    3160:	ff 92       	push	r15
    3162:	0f 93       	push	r16
    3164:	1f 93       	push	r17
    3166:	cf 93       	push	r28
    3168:	df 93       	push	r29
  /////////////////////////////////////////////////////////////////////
  //                        GROWBOX COMMANDS                         //
  /////////////////////////////////////////////////////////////////////

  static void getStatistics(float &_workingTemperature, float &_statisticsTemperature, int &_statisticsTemperatureCount){
    _workingTemperature = workingTemperature;
    316a:	00 91 e8 02 	lds	r16, 0x02E8
    316e:	f0 90 e9 02 	lds	r15, 0x02E9
    3172:	e0 90 ea 02 	lds	r14, 0x02EA
    3176:	d0 90 eb 02 	lds	r13, 0x02EB

    if (statisticsTemperatureCount != 0){
    317a:	c0 91 f0 02 	lds	r28, 0x02F0
    317e:	d0 91 f1 02 	lds	r29, 0x02F1
    3182:	20 97       	sbiw	r28, 0x00	; 0
    3184:	29 f4       	brne	.+10     	; 0x3190 <_ZL21sendTemperatureStatusv+0x3a>
    3186:	a0 2e       	mov	r10, r16
    3188:	bf 2c       	mov	r11, r15
    318a:	ce 2c       	mov	r12, r14
    318c:	1d 2d       	mov	r17, r13
    318e:	16 c0       	rjmp	.+44     	; 0x31bc <_ZL21sendTemperatureStatusv+0x66>
      _statisticsTemperature = statisticsTemperatureSumm/statisticsTemperatureCount;
    3190:	be 01       	movw	r22, r28
    3192:	88 27       	eor	r24, r24
    3194:	77 fd       	sbrc	r23, 7
    3196:	80 95       	com	r24
    3198:	98 2f       	mov	r25, r24
    319a:	0e 94 fc 3a 	call	0x75f8	; 0x75f8 <__floatsisf>
    319e:	9b 01       	movw	r18, r22
    31a0:	ac 01       	movw	r20, r24
    31a2:	60 91 ec 02 	lds	r22, 0x02EC
    31a6:	70 91 ed 02 	lds	r23, 0x02ED
    31aa:	80 91 ee 02 	lds	r24, 0x02EE
    31ae:	90 91 ef 02 	lds	r25, 0x02EF
    31b2:	0e 94 61 3a 	call	0x74c2	; 0x74c2 <__divsf3>
    31b6:	5b 01       	movw	r10, r22
    31b8:	c8 2e       	mov	r12, r24
    31ba:	19 2f       	mov	r17, r25
    31bc:	83 e5       	ldi	r24, 0x53	; 83
    31be:	92 e0       	ldi	r25, 0x02	; 2
    31c0:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    31c4:	88 ef       	ldi	r24, 0xF8	; 248
    31c6:	93 e0       	ldi	r25, 0x03	; 3
    31c8:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    31cc:	20 2f       	mov	r18, r16
    31ce:	3f 2d       	mov	r19, r15
    31d0:	4e 2d       	mov	r20, r14
    31d2:	5d 2d       	mov	r21, r13
    31d4:	b9 01       	movw	r22, r18
    31d6:	ca 01       	movw	r24, r20
    31d8:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_ZL8sendDataf>
    31dc:	80 ef       	ldi	r24, 0xF0	; 240
    31de:	93 e0       	ldi	r25, 0x03	; 3
    31e0:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    31e4:	4c 2d       	mov	r20, r12
    31e6:	51 2f       	mov	r21, r17
    31e8:	b5 01       	movw	r22, r10
    31ea:	ca 01       	movw	r24, r20
    31ec:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_ZL8sendDataf>
    31f0:	87 ee       	ldi	r24, 0xE7	; 231
    31f2:	93 e0       	ldi	r25, 0x03	; 3
    31f4:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    31f8:	ce 01       	movw	r24, r28
    31fa:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <_ZL8sendDatai>
    31fe:	8f ed       	ldi	r24, 0xDF	; 223
    3200:	93 e0       	ldi	r25, 0x03	; 3
    3202:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    3206:	60 e0       	ldi	r22, 0x00	; 0
    3208:	70 e0       	ldi	r23, 0x00	; 0
    320a:	80 ed       	ldi	r24, 0xD0	; 208
    320c:	91 e4       	ldi	r25, 0x41	; 65
    320e:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_ZL8sendDataf>
    3212:	86 ec       	ldi	r24, 0xC6	; 198
    3214:	93 e0       	ldi	r25, 0x03	; 3
    3216:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    321a:	60 e0       	ldi	r22, 0x00	; 0
    321c:	70 e0       	ldi	r23, 0x00	; 0
    321e:	80 e4       	ldi	r24, 0x40	; 64
    3220:	90 e4       	ldi	r25, 0x40	; 64
    3222:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_ZL8sendDataf>
    3226:	86 ed       	ldi	r24, 0xD6	; 214
    3228:	93 e0       	ldi	r25, 0x03	; 3
    322a:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    322e:	60 e0       	ldi	r22, 0x00	; 0
    3230:	70 e0       	ldi	r23, 0x00	; 0
    3232:	80 eb       	ldi	r24, 0xB0	; 176
    3234:	91 e4       	ldi	r25, 0x41	; 65
    3236:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_ZL8sendDataf>
    323a:	86 ec       	ldi	r24, 0xC6	; 198
    323c:	93 e0       	ldi	r25, 0x03	; 3
    323e:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    3242:	60 e0       	ldi	r22, 0x00	; 0
    3244:	70 e0       	ldi	r23, 0x00	; 0
    3246:	80 ec       	ldi	r24, 0xC0	; 192
    3248:	90 e4       	ldi	r25, 0x40	; 64
    324a:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_ZL8sendDataf>
    324e:	8a ec       	ldi	r24, 0xCA	; 202
    3250:	93 e0       	ldi	r25, 0x03	; 3
    3252:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    3256:	60 e0       	ldi	r22, 0x00	; 0
    3258:	70 e0       	ldi	r23, 0x00	; 0
    325a:	8c e0       	ldi	r24, 0x0C	; 12
    325c:	92 e4       	ldi	r25, 0x42	; 66
    325e:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_ZL8sendDataf>
    3262:	88 e0       	ldi	r24, 0x08	; 8
    3264:	91 e0       	ldi	r25, 0x01	; 1
    3266:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    326a:	df 91       	pop	r29
    326c:	cf 91       	pop	r28
    326e:	1f 91       	pop	r17
    3270:	0f 91       	pop	r16
    3272:	ff 90       	pop	r15
    3274:	ef 90       	pop	r14
    3276:	df 90       	pop	r13
    3278:	cf 90       	pop	r12
    327a:	bf 90       	pop	r11
    327c:	af 90       	pop	r10
    327e:	08 95       	ret

00003280 <_ZL16printSendFullLoghhh>:
    3280:	2f 92       	push	r2
    3282:	3f 92       	push	r3
    3284:	4f 92       	push	r4
    3286:	5f 92       	push	r5
    3288:	6f 92       	push	r6
    328a:	7f 92       	push	r7
    328c:	8f 92       	push	r8
    328e:	9f 92       	push	r9
    3290:	af 92       	push	r10
    3292:	bf 92       	push	r11
    3294:	cf 92       	push	r12
    3296:	df 92       	push	r13
    3298:	ef 92       	push	r14
    329a:	ff 92       	push	r15
    329c:	0f 93       	push	r16
    329e:	1f 93       	push	r17
    32a0:	df 93       	push	r29
    32a2:	cf 93       	push	r28
    32a4:	cd b7       	in	r28, 0x3d	; 61
    32a6:	de b7       	in	r29, 0x3e	; 62
    32a8:	af 97       	sbiw	r28, 0x2f	; 47
    32aa:	0f b6       	in	r0, 0x3f	; 63
    32ac:	f8 94       	cli
    32ae:	de bf       	out	0x3e, r29	; 62
    32b0:	0f be       	out	0x3f, r0	; 63
    32b2:	cd bf       	out	0x3d, r28	; 61
    32b4:	8b a7       	std	Y+43, r24	; 0x2b
    32b6:	6c a7       	std	Y+44, r22	; 0x2c
    32b8:	4d a7       	std	Y+45, r20	; 0x2d
    32ba:	80 e0       	ldi	r24, 0x00	; 0
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <_ZL13sendTag_TABLE8HTTP_TAG>
    32c2:	21 e0       	ldi	r18, 0x01	; 1
    32c4:	2a a7       	std	Y+42, r18	; 0x2a
    32c6:	cc 24       	eor	r12, r12
    32c8:	dd 24       	eor	r13, r13
    32ca:	aa 24       	eor	r10, r10
    32cc:	bb 24       	eor	r11, r11
    32ce:	ce 01       	movw	r24, r28
    32d0:	0b 96       	adiw	r24, 0x0b	; 11
    32d2:	9f a7       	std	Y+47, r25	; 0x2f
    32d4:	8e a7       	std	Y+46, r24	; 0x2e
    32d6:	1e 01       	movw	r2, r28
    32d8:	08 94       	sec
    32da:	21 1c       	adc	r2, r1
    32dc:	31 1c       	adc	r3, r1
    32de:	b5 e1       	ldi	r27, 0x15	; 21
    32e0:	4b 2e       	mov	r4, r27
    32e2:	51 2c       	mov	r5, r1
    32e4:	4c 0e       	add	r4, r28
    32e6:	5d 1e       	adc	r5, r29
    32e8:	ac e1       	ldi	r26, 0x1C	; 28
    32ea:	6a 2e       	mov	r6, r26
    32ec:	71 2c       	mov	r7, r1
    32ee:	6c 0e       	add	r6, r28
    32f0:	7d 1e       	adc	r7, r29
    32f2:	f3 e2       	ldi	r31, 0x23	; 35
    32f4:	8f 2e       	mov	r8, r31
    32f6:	91 2c       	mov	r9, r1
    32f8:	8c 0e       	add	r8, r28
    32fa:	9d 1e       	adc	r9, r29
    32fc:	6b c0       	rjmp	.+214    	; 0x33d4 <_ZL16printSendFullLoghhh+0x154>
  static boolean isLogOverflow(){
    return bootRecord.boolPreferencies.isLogOverflow;
  }

  static word getLogRecordsCount(){
    if (bootRecord.boolPreferencies.isLogOverflow){
    32fe:	44 23       	and	r20, r20
    3300:	19 f0       	breq	.+6      	; 0x3308 <_ZL16printSendFullLoghhh+0x88>
    3302:	8c e2       	ldi	r24, 0x2C	; 44
    3304:	93 e0       	ldi	r25, 0x03	; 3
    3306:	0a c0       	rjmp	.+20     	; 0x331c <_ZL16printSendFullLoghhh+0x9c>
      return LOG_CAPACITY; 
    } 
    else {
      return (bootRecord.nextLogRecordAddress - sizeof(BootRecord))/sizeof(LogRecord);
    3308:	80 91 b7 02 	lds	r24, 0x02B7
    330c:	90 91 b8 02 	lds	r25, 0x02B8
    3310:	80 97       	sbiw	r24, 0x20	; 32
    3312:	65 e0       	ldi	r22, 0x05	; 5
    3314:	70 e0       	ldi	r23, 0x00	; 0
    3316:	0e 94 32 3c 	call	0x7864	; 0x7864 <__udivmodhi4>
    331a:	cb 01       	movw	r24, r22
    }
  }
  static boolean getLogRecordByIndex(word index, LogRecord &logRecord){
    if (index >= getLogRecordsCount()){
    331c:	c8 16       	cp	r12, r24
    331e:	d9 06       	cpc	r13, r25
    3320:	40 f5       	brcc	.+80     	; 0x3372 <_ZL16printSendFullLoghhh+0xf2>
      return false;
    }

    word logRecordOffset = 0;
    if (bootRecord.boolPreferencies.isLogOverflow){
    3322:	44 23       	and	r20, r20
    3324:	19 f4       	brne	.+6      	; 0x332c <_ZL16printSendFullLoghhh+0xac>
    3326:	80 e0       	ldi	r24, 0x00	; 0
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	05 c0       	rjmp	.+10     	; 0x3336 <_ZL16printSendFullLoghhh+0xb6>
      logRecordOffset = bootRecord.nextLogRecordAddress - sizeof(BootRecord);
    332c:	80 91 b7 02 	lds	r24, 0x02B7
    3330:	90 91 b8 02 	lds	r25, 0x02B8
    3334:	80 97       	sbiw	r24, 0x20	; 32
    }
    //Serial.print("logRecordOffset"); Serial.println(logRecordOffset);
    logRecordOffset += index * sizeof(LogRecord);
    3336:	8a 0d       	add	r24, r10
    3338:	9b 1d       	adc	r25, r11

    //Serial.print("logRecordOffset"); Serial.println(logRecordOffset);
    if (logRecordOffset >= LOG_RECORD_OVERFLOW_OFFSET){
    333a:	ef e0       	ldi	r30, 0x0F	; 15
    333c:	8c 3d       	cpi	r24, 0xDC	; 220
    333e:	9e 07       	cpc	r25, r30
    3340:	10 f0       	brcs	.+4      	; 0x3346 <_ZL16printSendFullLoghhh+0xc6>
      logRecordOffset -= LOG_RECORD_OVERFLOW_OFFSET;
    3342:	8c 5d       	subi	r24, 0xDC	; 220
    3344:	9f 40       	sbci	r25, 0x0F	; 15
    }
    //Serial.print("logRecordOffset"); Serial.println(logRecordOffset);
    word address = sizeof(BootRecord) + logRecordOffset; 
    3346:	e0 e2       	ldi	r30, 0x20	; 32
    3348:	ee 2e       	mov	r14, r30
    334a:	f1 2c       	mov	r15, r1
    334c:	e8 0e       	add	r14, r24
    334e:	f9 1e       	adc	r15, r25
    3350:	8e 01       	movw	r16, r28
    3352:	0a 5f       	subi	r16, 0xFA	; 250
    3354:	1f 4f       	sbci	r17, 0xFF	; 255
      byte value =  read(address + c);
    3356:	c7 01       	movw	r24, r14
    3358:	0e 94 b1 06 	call	0xd62	; 0xd62 <_ZN10GB_Storage4readEj>
      ((byte*)data)[c] = value;
    335c:	f8 01       	movw	r30, r16
    335e:	81 93       	st	Z+, r24
    3360:	8f 01       	movw	r16, r30
    3362:	08 94       	sec
    3364:	e1 1c       	adc	r14, r1
    3366:	f1 1c       	adc	r15, r1
      write(address + c, value);
    }
  }

  static void read(word address, void *data, const byte sizeofData) {
    for (word c = 0; c < sizeofData; c++){
    3368:	8e a5       	ldd	r24, Y+46	; 0x2e
    336a:	9f a5       	ldd	r25, Y+47	; 0x2f
    336c:	e8 17       	cp	r30, r24
    336e:	f9 07       	cpc	r31, r25
    3370:	91 f7       	brne	.-28     	; 0x3356 <_ZL16printSendFullLoghhh+0xd6>
  }  

  static LogRecord getLogRecordByIndex(int index){
    LogRecord logRecord;
    GB_StorageHelper::getLogRecordByIndex(index, logRecord);
    return logRecord;
    3372:	de 01       	movw	r26, r28
    3374:	50 96       	adiw	r26, 0x10	; 16
    3376:	fe 01       	movw	r30, r28
    3378:	36 96       	adiw	r30, 0x06	; 6
    337a:	85 e0       	ldi	r24, 0x05	; 5
    337c:	01 90       	ld	r0, Z+
    337e:	0d 92       	st	X+, r0
    3380:	81 50       	subi	r24, 0x01	; 1
    3382:	e1 f7       	brne	.-8      	; 0x337c <_ZL16printSendFullLoghhh+0xfc>
    3384:	de 01       	movw	r26, r28
    3386:	1b 96       	adiw	r26, 0x0b	; 11
    3388:	fe 01       	movw	r30, r28
    338a:	70 96       	adiw	r30, 0x10	; 16
    338c:	85 e0       	ldi	r24, 0x05	; 5
    338e:	01 90       	ld	r0, Z+
    3390:	0d 92       	st	X+, r0
    3392:	81 50       	subi	r24, 0x01	; 1
    3394:	e1 f7       	brne	.-8      	; 0x338e <_ZL16printSendFullLoghhh+0x10e>
    3396:	d1 01       	movw	r26, r2
    3398:	fe 01       	movw	r30, r28
    339a:	3b 96       	adiw	r30, 0x0b	; 11
    339c:	85 e0       	ldi	r24, 0x05	; 5
    339e:	01 90       	ld	r0, Z+
    33a0:	0d 92       	st	X+, r0
    33a2:	81 50       	subi	r24, 0x01	; 1
    33a4:	e1 f7       	brne	.-8      	; 0x339e <_ZL16printSendFullLoghhh+0x11e>
    33a6:	9b a5       	ldd	r25, Y+43	; 0x2b
    33a8:	99 23       	and	r25, r25
    33aa:	c1 f5       	brne	.+112    	; 0x341c <_ZL16printSendFullLoghhh+0x19c>
    33ac:	8d 81       	ldd	r24, Y+5	; 0x05
    33ae:	80 7c       	andi	r24, 0xC0	; 192
    33b0:	a9 f5       	brne	.+106    	; 0x341c <_ZL16printSendFullLoghhh+0x19c>
    33b2:	09 c0       	rjmp	.+18     	; 0x33c6 <_ZL16printSendFullLoghhh+0x146>
    33b4:	8d 81       	ldd	r24, Y+5	; 0x05
    33b6:	80 7c       	andi	r24, 0xC0	; 192
    33b8:	80 34       	cpi	r24, 0x40	; 64
    33ba:	99 f5       	brne	.+102    	; 0x3422 <_ZL16printSendFullLoghhh+0x1a2>
    33bc:	04 c0       	rjmp	.+8      	; 0x33c6 <_ZL16printSendFullLoghhh+0x146>
    33be:	8d 81       	ldd	r24, Y+5	; 0x05
    33c0:	80 7c       	andi	r24, 0xC0	; 192
    33c2:	80 3c       	cpi	r24, 0xC0	; 192
    33c4:	89 f5       	brne	.+98     	; 0x3428 <_ZL16printSendFullLoghhh+0x1a8>
    33c6:	08 94       	sec
    33c8:	c1 1c       	adc	r12, r1
    33ca:	d1 1c       	adc	r13, r1
    33cc:	e5 e0       	ldi	r30, 0x05	; 5
    33ce:	f0 e0       	ldi	r31, 0x00	; 0
    33d0:	ae 0e       	add	r10, r30
    33d2:	bf 1e       	adc	r11, r31
  static boolean isLogOverflow(){
    return bootRecord.boolPreferencies.isLogOverflow;
  }

  static word getLogRecordsCount(){
    if (bootRecord.boolPreferencies.isLogOverflow){
    33d4:	80 91 b9 02 	lds	r24, 0x02B9
    33d8:	48 2f       	mov	r20, r24
    33da:	41 70       	andi	r20, 0x01	; 1
    33dc:	80 ff       	sbrs	r24, 0
    33de:	03 c0       	rjmp	.+6      	; 0x33e6 <_ZL16printSendFullLoghhh+0x166>
    33e0:	8c e2       	ldi	r24, 0x2C	; 44
    33e2:	93 e0       	ldi	r25, 0x03	; 3
    33e4:	0a c0       	rjmp	.+20     	; 0x33fa <_ZL16printSendFullLoghhh+0x17a>
      return LOG_CAPACITY; 
    } 
    else {
      return (bootRecord.nextLogRecordAddress - sizeof(BootRecord))/sizeof(LogRecord);
    33e6:	80 91 b7 02 	lds	r24, 0x02B7
    33ea:	90 91 b8 02 	lds	r25, 0x02B8
    33ee:	80 97       	sbiw	r24, 0x20	; 32
    33f0:	65 e0       	ldi	r22, 0x05	; 5
    33f2:	70 e0       	ldi	r23, 0x00	; 0
    33f4:	0e 94 32 3c 	call	0x7864	; 0x7864 <__udivmodhi4>
    33f8:	cb 01       	movw	r24, r22
    33fa:	c8 16       	cp	r12, r24
    33fc:	d9 06       	cpc	r13, r25
    33fe:	0c f4       	brge	.+2      	; 0x3402 <_ZL16printSendFullLoghhh+0x182>
    3400:	7e cf       	rjmp	.-260    	; 0x32fe <_ZL16printSendFullLoghhh+0x7e>
    3402:	81 e0       	ldi	r24, 0x01	; 1
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <_ZL13sendTag_TABLE8HTTP_TAG>
    340a:	fa a5       	ldd	r31, Y+42	; 0x2a
    340c:	ff 23       	and	r31, r31
    340e:	09 f4       	brne	.+2      	; 0x3412 <_ZL16printSendFullLoghhh+0x192>
    3410:	64 c0       	rjmp	.+200    	; 0x34da <_ZL16printSendFullLoghhh+0x25a>
    3412:	8f e9       	ldi	r24, 0x9F	; 159
    3414:	95 e0       	ldi	r25, 0x05	; 5
    3416:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    341a:	5f c0       	rjmp	.+190    	; 0x34da <_ZL16printSendFullLoghhh+0x25a>
    341c:	2c a5       	ldd	r18, Y+44	; 0x2c
    341e:	22 23       	and	r18, r18
    3420:	49 f2       	breq	.-110    	; 0x33b4 <_ZL16printSendFullLoghhh+0x134>
    3422:	8d a5       	ldd	r24, Y+45	; 0x2d
    3424:	88 23       	and	r24, r24
    3426:	59 f2       	breq	.-106    	; 0x33be <_ZL16printSendFullLoghhh+0x13e>
    3428:	80 e0       	ldi	r24, 0x00	; 0
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <_ZL10sendTag_TR8HTTP_TAG>
    3430:	80 e0       	ldi	r24, 0x00	; 0
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <_ZL10sendTag_TD8HTTP_TAG>
    3438:	c6 01       	movw	r24, r12
    343a:	01 96       	adiw	r24, 0x01	; 1
    343c:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <_ZL8sendDatai>
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <_ZL10sendTag_TD8HTTP_TAG>
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <_ZL10sendTag_TD8HTTP_TAG>
    3450:	49 81       	ldd	r20, Y+1	; 0x01
    3452:	5a 81       	ldd	r21, Y+2	; 0x02
    3454:	6b 81       	ldd	r22, Y+3	; 0x03
    3456:	7c 81       	ldd	r23, Y+4	; 0x04
    3458:	c2 01       	movw	r24, r4
    345a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <_ZN13GB_PrintDirty13getTimeStringEm>
    345e:	c2 01       	movw	r24, r4
    3460:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZL8sendDataRK6String>
    3464:	c2 01       	movw	r24, r4
    3466:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
    346a:	81 e0       	ldi	r24, 0x01	; 1
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <_ZL10sendTag_TD8HTTP_TAG>
    3472:	80 e0       	ldi	r24, 0x00	; 0
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <_ZL10sendTag_TD8HTTP_TAG>
    347a:	c3 01       	movw	r24, r6
    347c:	6d 81       	ldd	r22, Y+5	; 0x05
    347e:	41 e0       	ldi	r20, 0x01	; 1
    3480:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN13GB_PrintDirty6getHEXEhh>
    3484:	c3 01       	movw	r24, r6
    3486:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZL8sendDataRK6String>
    348a:	c3 01       	movw	r24, r6
    348c:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
    3490:	81 e0       	ldi	r24, 0x01	; 1
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <_ZL10sendTag_TD8HTTP_TAG>
    3498:	80 e0       	ldi	r24, 0x00	; 0
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <_ZL10sendTag_TD8HTTP_TAG>
    34a0:	c1 01       	movw	r24, r2
    34a2:	0e 94 81 05 	call	0xb02	; 0xb02 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord>
    34a6:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    34aa:	c4 01       	movw	r24, r8
    34ac:	b1 01       	movw	r22, r2
    34ae:	0e 94 a7 0b 	call	0x174e	; 0x174e <_ZN9GB_Logger18getLogRecordSuffixERK9LogRecord>
    34b2:	c4 01       	movw	r24, r8
    34b4:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZL8sendDataRK6String>
    34b8:	c4 01       	movw	r24, r8
    34ba:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
    34be:	81 e0       	ldi	r24, 0x01	; 1
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <_ZL10sendTag_TD8HTTP_TAG>
    34c6:	81 e0       	ldi	r24, 0x01	; 1
    34c8:	90 e0       	ldi	r25, 0x00	; 0
    34ca:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <_ZL10sendTag_TR8HTTP_TAG>
    34ce:	80 91 00 02 	lds	r24, 0x0200
    34d2:	88 23       	and	r24, r24
    34d4:	11 f4       	brne	.+4      	; 0x34da <_ZL16printSendFullLoghhh+0x25a>
    34d6:	1a a6       	std	Y+42, r1	; 0x2a
    34d8:	76 cf       	rjmp	.-276    	; 0x33c6 <_ZL16printSendFullLoghhh+0x146>
    34da:	af 96       	adiw	r28, 0x2f	; 47
    34dc:	0f b6       	in	r0, 0x3f	; 63
    34de:	f8 94       	cli
    34e0:	de bf       	out	0x3e, r29	; 62
    34e2:	0f be       	out	0x3f, r0	; 63
    34e4:	cd bf       	out	0x3d, r28	; 61
    34e6:	cf 91       	pop	r28
    34e8:	df 91       	pop	r29
    34ea:	1f 91       	pop	r17
    34ec:	0f 91       	pop	r16
    34ee:	ff 90       	pop	r15
    34f0:	ef 90       	pop	r14
    34f2:	df 90       	pop	r13
    34f4:	cf 90       	pop	r12
    34f6:	bf 90       	pop	r11
    34f8:	af 90       	pop	r10
    34fa:	9f 90       	pop	r9
    34fc:	8f 90       	pop	r8
    34fe:	7f 90       	pop	r7
    3500:	6f 90       	pop	r6
    3502:	5f 90       	pop	r5
    3504:	4f 90       	pop	r4
    3506:	3f 90       	pop	r3
    3508:	2f 90       	pop	r2
    350a:	08 95       	ret

0000350c <_ZL8sendDataj>:
    350c:	ef 92       	push	r14
    350e:	ff 92       	push	r15
    3510:	0f 93       	push	r16
    3512:	1f 93       	push	r17
    3514:	df 93       	push	r29
    3516:	cf 93       	push	r28
    3518:	cd b7       	in	r28, 0x3d	; 61
    351a:	de b7       	in	r29, 0x3e	; 62
    351c:	27 97       	sbiw	r28, 0x07	; 7
    351e:	0f b6       	in	r0, 0x3f	; 63
    3520:	f8 94       	cli
    3522:	de bf       	out	0x3e, r29	; 62
    3524:	0f be       	out	0x3f, r0	; 63
    3526:	cd bf       	out	0x3d, r28	; 61
    3528:	7c 01       	movw	r14, r24
    352a:	8e 01       	movw	r16, r28
    352c:	0f 5f       	subi	r16, 0xFF	; 255
    352e:	1f 4f       	sbci	r17, 0xFF	; 255
    3530:	c8 01       	movw	r24, r16
    3532:	6b e2       	ldi	r22, 0x2B	; 43
    3534:	71 e0       	ldi	r23, 0x01	; 1
    3536:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
	String & operator += (unsigned int num)		{concat(num); return (*this);}
    353a:	c8 01       	movw	r24, r16
    353c:	b7 01       	movw	r22, r14
    353e:	0e 94 29 37 	call	0x6e52	; 0x6e52 <_ZN6String6concatEj>
    3542:	c8 01       	movw	r24, r16
    3544:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZL8sendDataRK6String>
    3548:	c8 01       	movw	r24, r16
    354a:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
    354e:	27 96       	adiw	r28, 0x07	; 7
    3550:	0f b6       	in	r0, 0x3f	; 63
    3552:	f8 94       	cli
    3554:	de bf       	out	0x3e, r29	; 62
    3556:	0f be       	out	0x3f, r0	; 63
    3558:	cd bf       	out	0x3d, r28	; 61
    355a:	cf 91       	pop	r28
    355c:	df 91       	pop	r29
    355e:	1f 91       	pop	r17
    3560:	0f 91       	pop	r16
    3562:	ff 90       	pop	r15
    3564:	ef 90       	pop	r14
    3566:	08 95       	ret

00003568 <_ZL14sendBootStatusv>:
    3568:	8c e6       	ldi	r24, 0x6C	; 108
    356a:	93 e0       	ldi	r25, 0x03	; 3
    356c:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    3570:	60 91 b3 02 	lds	r22, 0x02B3
    3574:	70 91 b4 02 	lds	r23, 0x02B4
    3578:	80 91 b5 02 	lds	r24, 0x02B5
    357c:	90 91 b6 02 	lds	r25, 0x02B6
    3580:	0e 94 f7 17 	call	0x2fee	; 0x2fee <_ZL8sendDatam>
    3584:	8a e5       	ldi	r24, 0x5A	; 90
    3586:	93 e0       	ldi	r25, 0x03	; 3
    3588:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    358c:	60 91 af 02 	lds	r22, 0x02AF
    3590:	70 91 b0 02 	lds	r23, 0x02B0
    3594:	80 91 b1 02 	lds	r24, 0x02B1
    3598:	90 91 b2 02 	lds	r25, 0x02B2
    359c:	0e 94 f7 17 	call	0x2fee	; 0x2fee <_ZL8sendDatam>
    35a0:	80 e5       	ldi	r24, 0x50	; 80
    35a2:	93 e0       	ldi	r25, 0x03	; 3
    35a4:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    35a8:	80 91 b9 02 	lds	r24, 0x02B9
    35ac:	86 95       	lsr	r24
    35ae:	83 70       	andi	r24, 0x03	; 3
    35b0:	19 f0       	breq	.+6      	; 0x35b8 <_ZL14sendBootStatusv+0x50>
    35b2:	84 e2       	ldi	r24, 0x24	; 36
    35b4:	91 e0       	ldi	r25, 0x01	; 1
    35b6:	02 c0       	rjmp	.+4      	; 0x35bc <_ZL14sendBootStatusv+0x54>
    35b8:	8d e2       	ldi	r24, 0x2D	; 45
    35ba:	91 e0       	ldi	r25, 0x01	; 1
    35bc:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    35c0:	85 e4       	ldi	r24, 0x45	; 69
    35c2:	93 e0       	ldi	r25, 0x03	; 3
    35c4:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
  static boolean isLogOverflow(){
    return bootRecord.boolPreferencies.isLogOverflow;
  }

  static word getLogRecordsCount(){
    if (bootRecord.boolPreferencies.isLogOverflow){
    35c8:	80 91 b9 02 	lds	r24, 0x02B9
    35cc:	80 ff       	sbrs	r24, 0
    35ce:	03 c0       	rjmp	.+6      	; 0x35d6 <_ZL14sendBootStatusv+0x6e>
    35d0:	8c e2       	ldi	r24, 0x2C	; 44
    35d2:	93 e0       	ldi	r25, 0x03	; 3
    35d4:	0a c0       	rjmp	.+20     	; 0x35ea <_ZL14sendBootStatusv+0x82>
      return LOG_CAPACITY; 
    } 
    else {
      return (bootRecord.nextLogRecordAddress - sizeof(BootRecord))/sizeof(LogRecord);
    35d6:	80 91 b7 02 	lds	r24, 0x02B7
    35da:	90 91 b8 02 	lds	r25, 0x02B8
    35de:	80 97       	sbiw	r24, 0x20	; 32
    35e0:	65 e0       	ldi	r22, 0x05	; 5
    35e2:	70 e0       	ldi	r23, 0x00	; 0
    35e4:	0e 94 32 3c 	call	0x7864	; 0x7864 <__udivmodhi4>
    35e8:	cb 01       	movw	r24, r22
    35ea:	0e 94 86 1a 	call	0x350c	; 0x350c <_ZL8sendDataj>
    35ee:	8f e2       	ldi	r24, 0x2F	; 47
    35f0:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <_ZL8sendDatac>
    35f4:	8c e2       	ldi	r24, 0x2C	; 44
    35f6:	93 e0       	ldi	r25, 0x03	; 3
    35f8:	0e 94 86 1a 	call	0x350c	; 0x350c <_ZL8sendDataj>
    35fc:	80 91 b9 02 	lds	r24, 0x02B9
    3600:	80 ff       	sbrs	r24, 0
    3602:	04 c0       	rjmp	.+8      	; 0x360c <_ZL14sendBootStatusv+0xa4>
    3604:	8a e3       	ldi	r24, 0x3A	; 58
    3606:	93 e0       	ldi	r25, 0x03	; 3
    3608:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    360c:	88 e0       	ldi	r24, 0x08	; 8
    360e:	91 e0       	ldi	r25, 0x01	; 1
    3610:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    3614:	08 95       	ret

00003616 <_ZL14executeCommandR6String>:
    3616:	cf 93       	push	r28
    3618:	df 93       	push	r29
    361a:	ec 01       	movw	r28, r24
    361c:	80 91 ff 01 	lds	r24, 0x01FF
    3620:	88 23       	and	r24, r24
    3622:	81 f1       	breq	.+96     	; 0x3684 <_ZL14executeCommandR6String+0x6e>
    3624:	8f ed       	ldi	r24, 0xDF	; 223
    3626:	92 e0       	ldi	r25, 0x02	; 2
    3628:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    362c:	8d ed       	ldi	r24, 0xDD	; 221
    362e:	92 e0       	ldi	r25, 0x02	; 2
    3630:	66 ed       	ldi	r22, 0xD6	; 214
    3632:	72 e0       	ldi	r23, 0x02	; 2
    3634:	0e 94 ad 14 	call	0x295a	; 0x295a <_ZL17sendHTTPtagButtonPK19__FlashStringHelperS1_>
    3638:	81 ed       	ldi	r24, 0xD1	; 209
    363a:	92 e0       	ldi	r25, 0x02	; 2
    363c:	67 ec       	ldi	r22, 0xC7	; 199
    363e:	72 e0       	ldi	r23, 0x02	; 2
    3640:	0e 94 ad 14 	call	0x295a	; 0x295a <_ZL17sendHTTPtagButtonPK19__FlashStringHelperS1_>
    3644:	81 ec       	ldi	r24, 0xC1	; 193
    3646:	92 e0       	ldi	r25, 0x02	; 2
    3648:	63 eb       	ldi	r22, 0xB3	; 179
    364a:	72 e0       	ldi	r23, 0x02	; 2
    364c:	0e 94 ad 14 	call	0x295a	; 0x295a <_ZL17sendHTTPtagButtonPK19__FlashStringHelperS1_>
    3650:	8a ea       	ldi	r24, 0xAA	; 170
    3652:	92 e0       	ldi	r25, 0x02	; 2
    3654:	6d e9       	ldi	r22, 0x9D	; 157
    3656:	72 e0       	ldi	r23, 0x02	; 2
    3658:	0e 94 ad 14 	call	0x295a	; 0x295a <_ZL17sendHTTPtagButtonPK19__FlashStringHelperS1_>
    365c:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <_ZL10sendTag_HRv>
    3660:	80 e0       	ldi	r24, 0x00	; 0
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <_ZL11sendTab_PRE8HTTP_TAG>
    3668:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <_Z14sendFreeMemoryv>
    366c:	0e 94 b4 1a 	call	0x3568	; 0x3568 <_ZL14sendBootStatusv>
    3670:	0e 94 1c 18 	call	0x3038	; 0x3038 <_ZL14sendTimeStatusv>
    3674:	0e 94 ab 18 	call	0x3156	; 0x3156 <_ZL21sendTemperatureStatusv>
    3678:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <_ZL10sendTag_HRv>
    367c:	81 e0       	ldi	r24, 0x01	; 1
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <_ZL11sendTab_PRE8HTTP_TAG>
    3684:	80 e0       	ldi	r24, 0x00	; 0
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <_ZL11sendTab_PRE8HTTP_TAG>
    368c:	ce 01       	movw	r24, r28
    368e:	6a e4       	ldi	r22, 0x4A	; 74
    3690:	71 e0       	ldi	r23, 0x01	; 1
    3692:	0e 94 24 36 	call	0x6c48	; 0x6c48 <_ZNK6String6equalsEPKc>
    3696:	88 23       	and	r24, r24
    3698:	19 f0       	breq	.+6      	; 0x36a0 <_ZL14executeCommandR6String+0x8a>
    369a:	0e 94 dd 16 	call	0x2dba	; 0x2dba <_ZL19printSendPinsStatusv>
    369e:	20 c0       	rjmp	.+64     	; 0x36e0 <_ZL14executeCommandR6String+0xca>
    36a0:	ce 01       	movw	r24, r28
    36a2:	6c e4       	ldi	r22, 0x4C	; 76
    36a4:	71 e0       	ldi	r23, 0x01	; 1
    36a6:	0e 94 24 36 	call	0x6c48	; 0x6c48 <_ZNK6String6equalsEPKc>
    36aa:	88 23       	and	r24, r24
    36ac:	19 f0       	breq	.+6      	; 0x36b4 <_ZL14executeCommandR6String+0x9e>
    36ae:	0e 94 ca 14 	call	0x2994	; 0x2994 <_ZL30printSendConfigurationControlsv>
    36b2:	16 c0       	rjmp	.+44     	; 0x36e0 <_ZL14executeCommandR6String+0xca>
    36b4:	ce 01       	movw	r24, r28
    36b6:	62 e5       	ldi	r22, 0x52	; 82
    36b8:	71 e0       	ldi	r23, 0x01	; 1
    36ba:	0e 94 24 36 	call	0x6c48	; 0x6c48 <_ZNK6String6equalsEPKc>
    36be:	88 23       	and	r24, r24
    36c0:	31 f0       	breq	.+12     	; 0x36ce <_ZL14executeCommandR6String+0xb8>
    36c2:	81 e0       	ldi	r24, 0x01	; 1
    36c4:	61 e0       	ldi	r22, 0x01	; 1
    36c6:	41 e0       	ldi	r20, 0x01	; 1
    36c8:	0e 94 40 19 	call	0x3280	; 0x3280 <_ZL16printSendFullLoghhh>
    36cc:	09 c0       	rjmp	.+18     	; 0x36e0 <_ZL14executeCommandR6String+0xca>
    36ce:	ce 01       	movw	r24, r28
    36d0:	67 e5       	ldi	r22, 0x57	; 87
    36d2:	71 e0       	ldi	r23, 0x01	; 1
    36d4:	0e 94 24 36 	call	0x6c48	; 0x6c48 <_ZNK6String6equalsEPKc>
    36d8:	88 23       	and	r24, r24
    36da:	11 f0       	breq	.+4      	; 0x36e0 <_ZL14executeCommandR6String+0xca>
    36dc:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <_Z20printSendStorageDumpv>
    36e0:	80 91 00 02 	lds	r24, 0x0200
    36e4:	88 23       	and	r24, r24
    36e6:	41 f4       	brne	.+16     	; 0x36f8 <_ZL14executeCommandR6String+0xe2>
    36e8:	81 e0       	ldi	r24, 0x01	; 1
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <_ZL11sendTab_PRE8HTTP_TAG>
    36f0:	85 e9       	ldi	r24, 0x95	; 149
    36f2:	92 e0       	ldi	r25, 0x02	; 2
    36f4:	0e 94 15 14 	call	0x282a	; 0x282a <_ZL8sendDataPK19__FlashStringHelper>
    36f8:	df 91       	pop	r29
    36fa:	cf 91       	pop	r28
    36fc:	08 95       	ret

000036fe <_Z11serialEventv>:
    36fe:	0f 93       	push	r16
    3700:	1f 93       	push	r17
    3702:	df 93       	push	r29
    3704:	cf 93       	push	r28
    3706:	cd b7       	in	r28, 0x3d	; 61
    3708:	de b7       	in	r29, 0x3e	; 62
    370a:	27 97       	sbiw	r28, 0x07	; 7
    370c:	0f b6       	in	r0, 0x3f	; 63
    370e:	f8 94       	cli
    3710:	de bf       	out	0x3e, r29	; 62
    3712:	0f be       	out	0x3f, r0	; 63
    3714:	cd bf       	out	0x3d, r28	; 61
    3716:	80 91 fe 01 	lds	r24, 0x01FE
    371a:	88 23       	and	r24, r24
    371c:	09 f4       	brne	.+2      	; 0x3720 <_Z11serialEventv+0x22>
    371e:	53 c0       	rjmp	.+166    	; 0x37c6 <_Z11serialEventv+0xc8>
    3720:	10 92 ff 01 	sts	0x01FF, r1
    3724:	10 92 00 02 	sts	0x0200, r1
    3728:	10 92 b9 01 	sts	0x01B9, r1
    372c:	8e 01       	movw	r16, r28
    372e:	0f 5f       	subi	r16, 0xFF	; 255
    3730:	1f 4f       	sbci	r17, 0xFF	; 255
    3732:	c8 01       	movw	r24, r16
    3734:	6b e2       	ldi	r22, 0x2B	; 43
    3736:	71 e0       	ldi	r23, 0x01	; 1
    3738:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
    373c:	c8 01       	movw	r24, r16
    373e:	6f ef       	ldi	r22, 0xFF	; 255
    3740:	71 e0       	ldi	r23, 0x01	; 1
    3742:	49 eb       	ldi	r20, 0xB9	; 185
    3744:	51 e0       	ldi	r21, 0x01	; 1
    3746:	0e 94 27 10 	call	0x204e	; 0x204e <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_>
    374a:	88 23       	and	r24, r24
    374c:	c9 f1       	breq	.+114    	; 0x37c0 <_Z11serialEventv+0xc2>
    374e:	80 91 ff 01 	lds	r24, 0x01FF
    3752:	88 23       	and	r24, r24
    3754:	11 f0       	breq	.+4      	; 0x375a <_Z11serialEventv+0x5c>
    } 
    return false;
  } 

  static void startHTTPResponse(const byte &wifiPortDescriptor){  
    s_wifiIsHeaderSended = false;
    3756:	10 92 8e 02 	sts	0x028E, r1
    375a:	ce 01       	movw	r24, r28
    375c:	01 96       	adiw	r24, 0x01	; 1
    375e:	0e 94 0b 1b 	call	0x3616	; 0x3616 <_ZL14executeCommandR6String>
    3762:	80 91 ff 01 	lds	r24, 0x01FF
    3766:	88 23       	and	r24, r24
    3768:	81 f0       	breq	.+32     	; 0x378a <_Z11serialEventv+0x8c>
  }

  static void finishHTTPResponse(const byte &wifiPortDescriptor){  
    if (s_wifiIsHeaderSended){
    376a:	80 91 8e 02 	lds	r24, 0x028E
    376e:	88 23       	and	r24, r24
    3770:	19 f0       	breq	.+6      	; 0x3778 <_Z11serialEventv+0x7a>
      stopHttpFrame();
    3772:	0e 94 ee 13 	call	0x27dc	; 0x27dc <_ZN15GB_SerialHelper13stopHttpFrameEv>
    3776:	04 c0       	rjmp	.+8      	; 0x3780 <_Z11serialEventv+0x82>
    } 
    else {
      sendHttpNotFoundHeader(wifiPortDescriptor);
    3778:	80 91 b9 01 	lds	r24, 0x01B9
    377c:	0e 94 ee 09 	call	0x13dc	; 0x13dc <_ZN15GB_SerialHelper22sendHttpNotFoundHeaderEh>
    }
    closeConnection(wifiPortDescriptor);
    3780:	80 91 b9 01 	lds	r24, 0x01B9
    3784:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <_ZN15GB_SerialHelper15closeConnectionEh>
    3788:	02 c0       	rjmp	.+4      	; 0x378e <_Z11serialEventv+0x90>
    378a:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN15GB_SerialHelper13printDirtyEndEv>
    378e:	80 91 7d 02 	lds	r24, 0x027D
    3792:	88 23       	and	r24, r24
    3794:	91 f0       	breq	.+36     	; 0x37ba <_Z11serialEventv+0xbc>
    3796:	80 91 00 02 	lds	r24, 0x0200
    379a:	88 23       	and	r24, r24
    379c:	71 f0       	breq	.+28     	; 0x37ba <_Z11serialEventv+0xbc>
    379e:	8f eb       	ldi	r24, 0xBF	; 191
    37a0:	94 e0       	ldi	r25, 0x04	; 4
    37a2:	6a ed       	ldi	r22, 0xDA	; 218
    37a4:	70 e0       	ldi	r23, 0x00	; 0
    37a6:	0e 94 a4 33 	call	0x6748	; 0x6748 <_ZN5Print5printEPK19__FlashStringHelper>
    37aa:	8f eb       	ldi	r24, 0xBF	; 191
    37ac:	94 e0       	ldi	r25, 0x04	; 4
    37ae:	6f e5       	ldi	r22, 0x5F	; 95
    37b0:	72 e0       	ldi	r23, 0x02	; 2
    37b2:	0e 94 ef 33 	call	0x67de	; 0x67de <_ZN5Print7printlnEPK19__FlashStringHelper>
    37b6:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN15GB_SerialHelper13printDirtyEndEv>
    37ba:	ce 01       	movw	r24, r28
    37bc:	01 96       	adiw	r24, 0x01	; 1
    37be:	01 c0       	rjmp	.+2      	; 0x37c2 <_Z11serialEventv+0xc4>
    37c0:	c8 01       	movw	r24, r16
    37c2:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
    37c6:	27 96       	adiw	r28, 0x07	; 7
    37c8:	0f b6       	in	r0, 0x3f	; 63
    37ca:	f8 94       	cli
    37cc:	de bf       	out	0x3e, r29	; 62
    37ce:	0f be       	out	0x3f, r0	; 63
    37d0:	cd bf       	out	0x3d, r28	; 61
    37d2:	cf 91       	pop	r28
    37d4:	df 91       	pop	r29
    37d6:	1f 91       	pop	r17
    37d8:	0f 91       	pop	r16
    37da:	08 95       	ret

000037dc <_Z15initLoggerModelv>:
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    37dc:	10 92 23 02 	sts	0x0223, r1
    this->sequenceSize = sequenceSize;
    37e0:	42 e0       	ldi	r20, 0x02	; 2
    37e2:	40 93 24 02 	sts	0x0224, r20
EVENT_SERIAL_UNKNOWN_COMMAND;

void initLoggerModel(){
  
  // Use F macro to reduce requirements to memory. We can't use F macro in constructors.
  ERROR_TIMER_NOT_SET.init(B00, 2, F("Error: Timer not set"));
    37e6:	86 e1       	ldi	r24, 0x16	; 22
    37e8:	98 e0       	ldi	r25, 0x08	; 8
    37ea:	90 93 26 02 	sts	0x0226, r25
    37ee:	80 93 25 02 	sts	0x0225, r24
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    37f2:	31 e0       	ldi	r19, 0x01	; 1
    37f4:	30 93 2a 02 	sts	0x022A, r19
    this->sequenceSize = sequenceSize;
    37f8:	23 e0       	ldi	r18, 0x03	; 3
    37fa:	20 93 2b 02 	sts	0x022B, r18
  ERROR_TIMER_NEEDS_SYNC.init(B001, 3, F("Error: Timer needs sync"));
    37fe:	8e ef       	ldi	r24, 0xFE	; 254
    3800:	97 e0       	ldi	r25, 0x07	; 7
    3802:	90 93 2d 02 	sts	0x022D, r25
    3806:	80 93 2c 02 	sts	0x022C, r24
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    380a:	30 93 31 02 	sts	0x0231, r19
    this->sequenceSize = sequenceSize;
    380e:	40 93 32 02 	sts	0x0232, r20
  ERROR_TERMOMETER_DISCONNECTED.init(B01, 2, F("Error: Termometer disconnected"));
    3812:	8f ed       	ldi	r24, 0xDF	; 223
    3814:	97 e0       	ldi	r25, 0x07	; 7
    3816:	90 93 34 02 	sts	0x0234, r25
    381a:	80 93 33 02 	sts	0x0233, r24
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    381e:	40 93 38 02 	sts	0x0238, r20
    this->sequenceSize = sequenceSize;
    3822:	20 93 39 02 	sts	0x0239, r18
  ERROR_TERMOMETER_ZERO_VALUE.init(B010, 3, F("Error: Termometer returned ZERO value"));
    3826:	89 eb       	ldi	r24, 0xB9	; 185
    3828:	97 e0       	ldi	r25, 0x07	; 7
    382a:	90 93 3b 02 	sts	0x023B, r25
    382e:	80 93 3a 02 	sts	0x023A, r24
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    3832:	10 92 3f 02 	sts	0x023F, r1
    this->sequenceSize = sequenceSize;
    3836:	20 93 40 02 	sts	0x0240, r18
  ERROR_TERMOMETER_CRITICAL_VALUE.init(B000, 3, F("Error: Termometer returned CRITICAL value"));
    383a:	8f e8       	ldi	r24, 0x8F	; 143
    383c:	97 e0       	ldi	r25, 0x07	; 7
    383e:	90 93 42 02 	sts	0x0242, r25
    3842:	80 93 41 02 	sts	0x0241, r24
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    3846:	57 e0       	ldi	r21, 0x07	; 7
    3848:	50 93 46 02 	sts	0x0246, r21
    this->sequenceSize = sequenceSize;
    384c:	20 93 47 02 	sts	0x0247, r18
  ERROR_MEMORY_LOW.init(B111, 3, F("Error: Memory remained less 200 bytes"));
    3850:	89 e6       	ldi	r24, 0x69	; 105
    3852:	97 e0       	ldi	r25, 0x07	; 7
    3854:	90 93 49 02 	sts	0x0249, r25
    3858:	80 93 48 02 	sts	0x0248, r24
  nextEvent(lastAddedEvent), index(0xFF) {
    lastAddedEvent = this;
  }

  void init(byte index, const __FlashStringHelper* description) {
    this->index = index;
    385c:	30 93 4d 02 	sts	0x024D, r19

  EVENT_FIRST_START_UP.init(1, F("FIRST STARTUP")), 
    3860:	8b e5       	ldi	r24, 0x5B	; 91
    3862:	97 e0       	ldi	r25, 0x07	; 7
    3864:	90 93 4f 02 	sts	0x024F, r25
    3868:	80 93 4e 02 	sts	0x024E, r24
    386c:	40 93 52 02 	sts	0x0252, r20
  EVENT_RESTART.init(2, F("RESTARTED")), 
    3870:	81 e5       	ldi	r24, 0x51	; 81
    3872:	97 e0       	ldi	r25, 0x07	; 7
    3874:	90 93 54 02 	sts	0x0254, r25
    3878:	80 93 53 02 	sts	0x0253, r24
    387c:	20 93 57 02 	sts	0x0257, r18
  EVENT_MODE_DAY.init(3, F("Growbox switched to DAY mode")), 
    3880:	84 e3       	ldi	r24, 0x34	; 52
    3882:	97 e0       	ldi	r25, 0x07	; 7
    3884:	90 93 59 02 	sts	0x0259, r25
    3888:	80 93 58 02 	sts	0x0258, r24
    388c:	84 e0       	ldi	r24, 0x04	; 4
    388e:	80 93 5c 02 	sts	0x025C, r24
  EVENT_MODE_NIGHT.init(4, F("Growbox switched to NIGHT mode")), 
    3892:	85 e1       	ldi	r24, 0x15	; 21
    3894:	97 e0       	ldi	r25, 0x07	; 7
    3896:	90 93 5e 02 	sts	0x025E, r25
    389a:	80 93 5d 02 	sts	0x025D, r24
    389e:	85 e0       	ldi	r24, 0x05	; 5
    38a0:	80 93 61 02 	sts	0x0261, r24
  EVENT_LIGHT_OFF.init(5, F("LIGHT turned OFF")), 
    38a4:	84 e0       	ldi	r24, 0x04	; 4
    38a6:	97 e0       	ldi	r25, 0x07	; 7
    38a8:	90 93 63 02 	sts	0x0263, r25
    38ac:	80 93 62 02 	sts	0x0262, r24
    38b0:	86 e0       	ldi	r24, 0x06	; 6
    38b2:	80 93 66 02 	sts	0x0266, r24
  EVENT_LIGHT_ON.init(6, F("LIGHT turned ON")), 
    38b6:	84 ef       	ldi	r24, 0xF4	; 244
    38b8:	96 e0       	ldi	r25, 0x06	; 6
    38ba:	90 93 68 02 	sts	0x0268, r25
    38be:	80 93 67 02 	sts	0x0267, r24
    38c2:	50 93 6b 02 	sts	0x026B, r21
  EVENT_FAN_OFF.init(7, F("FAN turned OFF")), 
    38c6:	85 ee       	ldi	r24, 0xE5	; 229
    38c8:	96 e0       	ldi	r25, 0x06	; 6
    38ca:	90 93 6d 02 	sts	0x026D, r25
    38ce:	80 93 6c 02 	sts	0x026C, r24
    38d2:	88 e0       	ldi	r24, 0x08	; 8
    38d4:	80 93 70 02 	sts	0x0270, r24
  EVENT_FAN_ON_MIN.init(8, F("FAN turned ON MIN speed")), 
    38d8:	8d ec       	ldi	r24, 0xCD	; 205
    38da:	96 e0       	ldi	r25, 0x06	; 6
    38dc:	90 93 72 02 	sts	0x0272, r25
    38e0:	80 93 71 02 	sts	0x0271, r24
    38e4:	89 e0       	ldi	r24, 0x09	; 9
    38e6:	80 93 75 02 	sts	0x0275, r24
  EVENT_FAN_ON_MAX.init(9, F("FAN turned ON MAX speed")),
    38ea:	85 eb       	ldi	r24, 0xB5	; 181
    38ec:	96 e0       	ldi	r25, 0x06	; 6
    38ee:	90 93 77 02 	sts	0x0277, r25
    38f2:	80 93 76 02 	sts	0x0276, r24
    38f6:	8a e0       	ldi	r24, 0x0A	; 10
    38f8:	80 93 7a 02 	sts	0x027A, r24
  EVENT_SERIAL_UNKNOWN_COMMAND.init(10, F("Unknown serial command"));
    38fc:	8e e9       	ldi	r24, 0x9E	; 158
    38fe:	96 e0       	ldi	r25, 0x06	; 6
    3900:	90 93 7c 02 	sts	0x027C, r25
    3904:	80 93 7b 02 	sts	0x027B, r24
}
    3908:	08 95       	ret

0000390a <_GLOBAL__I__ZN5Error13lastAddedItemE>:
  byte sequenceSize;
  const __FlashStringHelper* description; // FLASH
  boolean isStored; // should be stored in Log only once, but notification should repeated

    Error() : 
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    390a:	80 91 1d 02 	lds	r24, 0x021D
    390e:	90 91 1e 02 	lds	r25, 0x021E
    3912:	90 93 22 02 	sts	0x0222, r25
    3916:	80 93 21 02 	sts	0x0221, r24
    391a:	2f ef       	ldi	r18, 0xFF	; 255
    391c:	20 93 23 02 	sts	0x0223, r18
    3920:	20 93 24 02 	sts	0x0224, r18
    3924:	10 92 27 02 	sts	0x0227, r1
    lastAddedItem = this;
    3928:	81 e2       	ldi	r24, 0x21	; 33
    392a:	92 e0       	ldi	r25, 0x02	; 2
    392c:	90 93 29 02 	sts	0x0229, r25
    3930:	80 93 28 02 	sts	0x0228, r24
    3934:	20 93 2a 02 	sts	0x022A, r18
    3938:	20 93 2b 02 	sts	0x022B, r18
    393c:	10 92 2e 02 	sts	0x022E, r1
    3940:	88 e2       	ldi	r24, 0x28	; 40
    3942:	92 e0       	ldi	r25, 0x02	; 2
    3944:	90 93 30 02 	sts	0x0230, r25
    3948:	80 93 2f 02 	sts	0x022F, r24
    394c:	20 93 31 02 	sts	0x0231, r18
    3950:	20 93 32 02 	sts	0x0232, r18
    3954:	10 92 35 02 	sts	0x0235, r1
    3958:	8f e2       	ldi	r24, 0x2F	; 47
    395a:	92 e0       	ldi	r25, 0x02	; 2
    395c:	90 93 37 02 	sts	0x0237, r25
    3960:	80 93 36 02 	sts	0x0236, r24
    3964:	20 93 38 02 	sts	0x0238, r18
    3968:	20 93 39 02 	sts	0x0239, r18
    396c:	10 92 3c 02 	sts	0x023C, r1
    3970:	86 e3       	ldi	r24, 0x36	; 54
    3972:	92 e0       	ldi	r25, 0x02	; 2
    3974:	90 93 3e 02 	sts	0x023E, r25
    3978:	80 93 3d 02 	sts	0x023D, r24
    397c:	20 93 3f 02 	sts	0x023F, r18
    3980:	20 93 40 02 	sts	0x0240, r18
    3984:	10 92 43 02 	sts	0x0243, r1
    3988:	8d e3       	ldi	r24, 0x3D	; 61
    398a:	92 e0       	ldi	r25, 0x02	; 2
    398c:	90 93 45 02 	sts	0x0245, r25
    3990:	80 93 44 02 	sts	0x0244, r24
    3994:	20 93 46 02 	sts	0x0246, r18
    3998:	20 93 47 02 	sts	0x0247, r18
    399c:	10 92 4a 02 	sts	0x024A, r1
    39a0:	84 e4       	ldi	r24, 0x44	; 68
    39a2:	92 e0       	ldi	r25, 0x02	; 2
    39a4:	90 93 1e 02 	sts	0x021E, r25
    39a8:	80 93 1d 02 	sts	0x021D, r24
public:
  byte index;
  const __FlashStringHelper* description; // FLASH

  Event() : 
  nextEvent(lastAddedEvent), index(0xFF) {
    39ac:	80 91 1f 02 	lds	r24, 0x021F
    39b0:	90 91 20 02 	lds	r25, 0x0220
    39b4:	90 93 4c 02 	sts	0x024C, r25
    39b8:	80 93 4b 02 	sts	0x024B, r24
    39bc:	20 93 4d 02 	sts	0x024D, r18
    lastAddedEvent = this;
    39c0:	8b e4       	ldi	r24, 0x4B	; 75
    39c2:	92 e0       	ldi	r25, 0x02	; 2
    39c4:	90 93 51 02 	sts	0x0251, r25
    39c8:	80 93 50 02 	sts	0x0250, r24
    39cc:	20 93 52 02 	sts	0x0252, r18
    39d0:	80 e5       	ldi	r24, 0x50	; 80
    39d2:	92 e0       	ldi	r25, 0x02	; 2
    39d4:	90 93 56 02 	sts	0x0256, r25
    39d8:	80 93 55 02 	sts	0x0255, r24
    39dc:	20 93 57 02 	sts	0x0257, r18
    39e0:	85 e5       	ldi	r24, 0x55	; 85
    39e2:	92 e0       	ldi	r25, 0x02	; 2
    39e4:	90 93 5b 02 	sts	0x025B, r25
    39e8:	80 93 5a 02 	sts	0x025A, r24
    39ec:	20 93 5c 02 	sts	0x025C, r18
    39f0:	8a e5       	ldi	r24, 0x5A	; 90
    39f2:	92 e0       	ldi	r25, 0x02	; 2
    39f4:	90 93 60 02 	sts	0x0260, r25
    39f8:	80 93 5f 02 	sts	0x025F, r24
    39fc:	20 93 61 02 	sts	0x0261, r18
    3a00:	8f e5       	ldi	r24, 0x5F	; 95
    3a02:	92 e0       	ldi	r25, 0x02	; 2
    3a04:	90 93 65 02 	sts	0x0265, r25
    3a08:	80 93 64 02 	sts	0x0264, r24
    3a0c:	20 93 66 02 	sts	0x0266, r18
    3a10:	84 e6       	ldi	r24, 0x64	; 100
    3a12:	92 e0       	ldi	r25, 0x02	; 2
    3a14:	90 93 6a 02 	sts	0x026A, r25
    3a18:	80 93 69 02 	sts	0x0269, r24
    3a1c:	20 93 6b 02 	sts	0x026B, r18
    3a20:	89 e6       	ldi	r24, 0x69	; 105
    3a22:	92 e0       	ldi	r25, 0x02	; 2
    3a24:	90 93 6f 02 	sts	0x026F, r25
    3a28:	80 93 6e 02 	sts	0x026E, r24
    3a2c:	20 93 70 02 	sts	0x0270, r18
    3a30:	8e e6       	ldi	r24, 0x6E	; 110
    3a32:	92 e0       	ldi	r25, 0x02	; 2
    3a34:	90 93 74 02 	sts	0x0274, r25
    3a38:	80 93 73 02 	sts	0x0273, r24
    3a3c:	20 93 75 02 	sts	0x0275, r18
    3a40:	83 e7       	ldi	r24, 0x73	; 115
    3a42:	92 e0       	ldi	r25, 0x02	; 2
    3a44:	90 93 79 02 	sts	0x0279, r25
    3a48:	80 93 78 02 	sts	0x0278, r24
    3a4c:	20 93 7a 02 	sts	0x027A, r18
    3a50:	88 e7       	ldi	r24, 0x78	; 120
    3a52:	92 e0       	ldi	r25, 0x02	; 2
    3a54:	90 93 20 02 	sts	0x0220, r25
    3a58:	80 93 1f 02 	sts	0x021F, r24
    3a5c:	08 95       	ret

00003a5e <_Z41__static_initialization_and_destruction_0ii>:

String GB_SerialHelper::s_wifiSID;
String GB_SerialHelper::s_wifiPass;

boolean GB_SerialHelper::s_wifiIsHeaderSended;
int GB_SerialHelper::s_wifiResponseAutoFlushConut;
    3a5e:	81 30       	cpi	r24, 0x01	; 1
    3a60:	91 05       	cpc	r25, r1
    3a62:	49 f5       	brne	.+82     	; 0x3ab6 <_Z41__static_initialization_and_destruction_0ii+0x58>
    3a64:	6f 5f       	subi	r22, 0xFF	; 255
    3a66:	7f 4f       	sbci	r23, 0xFF	; 255
    3a68:	09 f0       	breq	.+2      	; 0x3a6c <_Z41__static_initialization_and_destruction_0ii+0xe>
    3a6a:	42 c0       	rjmp	.+132    	; 0x3af0 <_Z41__static_initialization_and_destruction_0ii+0x92>

#include "Global.h"
#include "PrintDirty.h"

// TODO optimize it
const String WIFI_RESPONSE_WELLCOME = "Welcome to RAK410\r\n";   // TODO optimize here!
    3a6c:	81 e9       	ldi	r24, 0x91	; 145
    3a6e:	92 e0       	ldi	r25, 0x02	; 2
    3a70:	60 e6       	ldi	r22, 0x60	; 96
    3a72:	71 e0       	ldi	r23, 0x01	; 1
    3a74:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
const String WIFI_RESPONSE_ERROR = "ERROR";//"ERROR\xFF\r\n";
    3a78:	88 e9       	ldi	r24, 0x98	; 152
    3a7a:	92 e0       	ldi	r25, 0x02	; 2
    3a7c:	64 e7       	ldi	r22, 0x74	; 116
    3a7e:	71 e0       	ldi	r23, 0x01	; 1
    3a80:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
const String WIFI_RESPONSE_OK = "OK";//"OK\r\n";
    3a84:	8f e9       	ldi	r24, 0x9F	; 159
    3a86:	92 e0       	ldi	r25, 0x02	; 2
    3a88:	6a e7       	ldi	r22, 0x7A	; 122
    3a8a:	71 e0       	ldi	r23, 0x01	; 1
    3a8c:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
const String WIFI_REQUEST_HEADER = "at+recv_data=";
    3a90:	86 ea       	ldi	r24, 0xA6	; 166
    3a92:	92 e0       	ldi	r25, 0x02	; 2
    3a94:	6d e7       	ldi	r22, 0x7D	; 125
    3a96:	71 e0       	ldi	r23, 0x01	; 1
    3a98:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
/*volatile*/boolean GB_SerialHelper::useSerialWifi = false;
boolean GB_SerialHelper::s_restartWifi = false;



String GB_SerialHelper::s_wifiSID;
    3a9c:	80 e8       	ldi	r24, 0x80	; 128
    3a9e:	92 e0       	ldi	r25, 0x02	; 2
    3aa0:	6b e8       	ldi	r22, 0x8B	; 139
    3aa2:	71 e0       	ldi	r23, 0x01	; 1
    3aa4:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
String GB_SerialHelper::s_wifiPass;
    3aa8:	87 e8       	ldi	r24, 0x87	; 135
    3aaa:	92 e0       	ldi	r25, 0x02	; 2
    3aac:	6b e8       	ldi	r22, 0x8B	; 139
    3aae:	71 e0       	ldi	r23, 0x01	; 1
    3ab0:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
    3ab4:	08 95       	ret
    3ab6:	89 2b       	or	r24, r25
    3ab8:	d9 f4       	brne	.+54     	; 0x3af0 <_Z41__static_initialization_and_destruction_0ii+0x92>
    3aba:	6f 5f       	subi	r22, 0xFF	; 255
    3abc:	7f 4f       	sbci	r23, 0xFF	; 255
    3abe:	c1 f4       	brne	.+48     	; 0x3af0 <_Z41__static_initialization_and_destruction_0ii+0x92>
    3ac0:	87 e8       	ldi	r24, 0x87	; 135
    3ac2:	92 e0       	ldi	r25, 0x02	; 2
    3ac4:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
/*volatile*/boolean GB_SerialHelper::useSerialWifi = false;
boolean GB_SerialHelper::s_restartWifi = false;



String GB_SerialHelper::s_wifiSID;
    3ac8:	80 e8       	ldi	r24, 0x80	; 128
    3aca:	92 e0       	ldi	r25, 0x02	; 2
    3acc:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
    3ad0:	86 ea       	ldi	r24, 0xA6	; 166
    3ad2:	92 e0       	ldi	r25, 0x02	; 2
    3ad4:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
#include "PrintDirty.h"

// TODO optimize it
const String WIFI_RESPONSE_WELLCOME = "Welcome to RAK410\r\n";   // TODO optimize here!
const String WIFI_RESPONSE_ERROR = "ERROR";//"ERROR\xFF\r\n";
const String WIFI_RESPONSE_OK = "OK";//"OK\r\n";
    3ad8:	8f e9       	ldi	r24, 0x9F	; 159
    3ada:	92 e0       	ldi	r25, 0x02	; 2
    3adc:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
#include "Global.h"
#include "PrintDirty.h"

// TODO optimize it
const String WIFI_RESPONSE_WELLCOME = "Welcome to RAK410\r\n";   // TODO optimize here!
const String WIFI_RESPONSE_ERROR = "ERROR";//"ERROR\xFF\r\n";
    3ae0:	88 e9       	ldi	r24, 0x98	; 152
    3ae2:	92 e0       	ldi	r25, 0x02	; 2
    3ae4:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>

#include "Global.h"
#include "PrintDirty.h"

// TODO optimize it
const String WIFI_RESPONSE_WELLCOME = "Welcome to RAK410\r\n";   // TODO optimize here!
    3ae8:	81 e9       	ldi	r24, 0x91	; 145
    3aea:	92 e0       	ldi	r25, 0x02	; 2
    3aec:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
    3af0:	08 95       	ret

00003af2 <_GLOBAL__D__ZN15GB_SerialHelper16useSerialMonitorE>:
String GB_SerialHelper::s_wifiPass;

boolean GB_SerialHelper::s_wifiIsHeaderSended;
int GB_SerialHelper::s_wifiResponseAutoFlushConut;
    3af2:	80 e0       	ldi	r24, 0x00	; 0
    3af4:	90 e0       	ldi	r25, 0x00	; 0
    3af6:	6f ef       	ldi	r22, 0xFF	; 255
    3af8:	7f ef       	ldi	r23, 0xFF	; 255
    3afa:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <_Z41__static_initialization_and_destruction_0ii>
    3afe:	08 95       	ret

00003b00 <_GLOBAL__I__ZN15GB_SerialHelper16useSerialMonitorE>:
    3b00:	81 e0       	ldi	r24, 0x01	; 1
    3b02:	90 e0       	ldi	r25, 0x00	; 0
    3b04:	6f ef       	ldi	r22, 0xFF	; 255
    3b06:	7f ef       	ldi	r23, 0xFF	; 255
    3b08:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <_Z41__static_initialization_and_destruction_0ii>
    3b0c:	08 95       	ret

00003b0e <_Z41__static_initialization_and_destruction_0ii>:
DeviceAddress GB_Thermometer::oneWireAddress;

// Visible only in this file
float GB_Thermometer::workingTemperature = 0.0;
double GB_Thermometer::statisticsTemperatureSumm = 0.0;
int GB_Thermometer::statisticsTemperatureCount = 0;
    3b0e:	81 30       	cpi	r24, 0x01	; 1
    3b10:	91 05       	cpc	r25, r1
    3b12:	11 f5       	brne	.+68     	; 0x3b58 <_Z41__static_initialization_and_destruction_0ii+0x4a>
    3b14:	6f 5f       	subi	r22, 0xFF	; 255
    3b16:	7f 4f       	sbci	r23, 0xFF	; 255
    3b18:	a1 f5       	brne	.+104    	; 0x3b82 <_Z41__static_initialization_and_destruction_0ii+0x74>
    3b1a:	82 ef       	ldi	r24, 0xF2	; 242
    3b1c:	92 e0       	ldi	r25, 0x02	; 2
    3b1e:	6c e8       	ldi	r22, 0x8C	; 140
    3b20:	71 e0       	ldi	r23, 0x01	; 1
    3b22:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
const String WIFI_RESPONSE_ERROR = "ERROR";//"ERROR\xFF\r\n";
    3b26:	89 ef       	ldi	r24, 0xF9	; 249
    3b28:	92 e0       	ldi	r25, 0x02	; 2
    3b2a:	60 ea       	ldi	r22, 0xA0	; 160
    3b2c:	71 e0       	ldi	r23, 0x01	; 1
    3b2e:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
const String WIFI_RESPONSE_OK = "OK";//"OK\r\n";
    3b32:	80 e0       	ldi	r24, 0x00	; 0
    3b34:	93 e0       	ldi	r25, 0x03	; 3
    3b36:	66 ea       	ldi	r22, 0xA6	; 166
    3b38:	71 e0       	ldi	r23, 0x01	; 1
    3b3a:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
const String WIFI_REQUEST_HEADER = "at+recv_data=";
    3b3e:	87 e0       	ldi	r24, 0x07	; 7
    3b40:	93 e0       	ldi	r25, 0x03	; 3
    3b42:	69 ea       	ldi	r22, 0xA9	; 169
    3b44:	71 e0       	ldi	r23, 0x01	; 1
    3b46:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
#include "Thermometer.h"

// Pass our oneWire reference to Dallas Temperature. 
DallasTemperature GB_Thermometer::dallasTemperature(&g_oneWirePin);
    3b4a:	8d ec       	ldi	r24, 0xCD	; 205
    3b4c:	92 e0       	ldi	r25, 0x02	; 2
    3b4e:	60 ef       	ldi	r22, 0xF0	; 240
    3b50:	71 e0       	ldi	r23, 0x01	; 1
    3b52:	0e 94 ae 2a 	call	0x555c	; 0x555c <_ZN17DallasTemperatureC1EP7OneWire>
    3b56:	08 95       	ret
    3b58:	89 2b       	or	r24, r25
    3b5a:	99 f4       	brne	.+38     	; 0x3b82 <_Z41__static_initialization_and_destruction_0ii+0x74>
    3b5c:	6f 5f       	subi	r22, 0xFF	; 255
    3b5e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b60:	81 f4       	brne	.+32     	; 0x3b82 <_Z41__static_initialization_and_destruction_0ii+0x74>
    3b62:	87 e0       	ldi	r24, 0x07	; 7
    3b64:	93 e0       	ldi	r25, 0x03	; 3
    3b66:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
#include "PrintDirty.h"

// TODO optimize it
const String WIFI_RESPONSE_WELLCOME = "Welcome to RAK410\r\n";   // TODO optimize here!
const String WIFI_RESPONSE_ERROR = "ERROR";//"ERROR\xFF\r\n";
const String WIFI_RESPONSE_OK = "OK";//"OK\r\n";
    3b6a:	80 e0       	ldi	r24, 0x00	; 0
    3b6c:	93 e0       	ldi	r25, 0x03	; 3
    3b6e:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
#include "Global.h"
#include "PrintDirty.h"

// TODO optimize it
const String WIFI_RESPONSE_WELLCOME = "Welcome to RAK410\r\n";   // TODO optimize here!
const String WIFI_RESPONSE_ERROR = "ERROR";//"ERROR\xFF\r\n";
    3b72:	89 ef       	ldi	r24, 0xF9	; 249
    3b74:	92 e0       	ldi	r25, 0x02	; 2
    3b76:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>

#include "Global.h"
#include "PrintDirty.h"

// TODO optimize it
const String WIFI_RESPONSE_WELLCOME = "Welcome to RAK410\r\n";   // TODO optimize here!
    3b7a:	82 ef       	ldi	r24, 0xF2	; 242
    3b7c:	92 e0       	ldi	r25, 0x02	; 2
    3b7e:	0e 94 0b 39 	call	0x7216	; 0x7216 <_ZN6StringD1Ev>
    3b82:	08 95       	ret

00003b84 <_GLOBAL__D__ZN14GB_Thermometer17dallasTemperatureE>:
DeviceAddress GB_Thermometer::oneWireAddress;

// Visible only in this file
float GB_Thermometer::workingTemperature = 0.0;
double GB_Thermometer::statisticsTemperatureSumm = 0.0;
int GB_Thermometer::statisticsTemperatureCount = 0;
    3b84:	80 e0       	ldi	r24, 0x00	; 0
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	6f ef       	ldi	r22, 0xFF	; 255
    3b8a:	7f ef       	ldi	r23, 0xFF	; 255
    3b8c:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <_Z41__static_initialization_and_destruction_0ii>
    3b90:	08 95       	ret

00003b92 <_GLOBAL__I__ZN14GB_Thermometer17dallasTemperatureE>:
    3b92:	81 e0       	ldi	r24, 0x01	; 1
    3b94:	90 e0       	ldi	r25, 0x00	; 0
    3b96:	6f ef       	ldi	r22, 0xFF	; 255
    3b98:	7f ef       	ldi	r23, 0xFF	; 255
    3b9a:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <_Z41__static_initialization_and_destruction_0ii>
    3b9e:	08 95       	ret

00003ba0 <freeMemory>:

int freeMemory() {
    3ba0:	df 93       	push	r29
    3ba2:	cf 93       	push	r28
    3ba4:	00 d0       	rcall	.+0      	; 0x3ba6 <freeMemory+0x6>
    3ba6:	cd b7       	in	r28, 0x3d	; 61
    3ba8:	de b7       	in	r29, 0x3e	; 62
  int free_memory;

  if ((int)__brkval == 0) {
    3baa:	20 91 e2 04 	lds	r18, 0x04E2
    3bae:	30 91 e3 04 	lds	r19, 0x04E3
    3bb2:	ce 01       	movw	r24, r28
    3bb4:	01 96       	adiw	r24, 0x01	; 1
    3bb6:	21 15       	cp	r18, r1
    3bb8:	31 05       	cpc	r19, r1
    3bba:	29 f4       	brne	.+10     	; 0x3bc6 <freeMemory+0x26>
    free_memory = ((int)&free_memory) - ((int)&__heap_start);
    3bbc:	86 5e       	subi	r24, 0xE6	; 230
    3bbe:	94 40       	sbci	r25, 0x04	; 4
    3bc0:	9a 83       	std	Y+2, r25	; 0x02
    3bc2:	89 83       	std	Y+1, r24	; 0x01
    3bc4:	18 c0       	rjmp	.+48     	; 0x3bf6 <freeMemory+0x56>
  } else {
    free_memory = ((int)&free_memory) - ((int)__brkval);
    3bc6:	ac 01       	movw	r20, r24
    3bc8:	42 1b       	sub	r20, r18
    3bca:	53 0b       	sbc	r21, r19
/* Calculates the size of the free list */
int freeListSize() {
  struct __freelist* current;
  int total = 0;

  for (current = __flp; current; current = current->nx) {
    3bcc:	e0 91 e4 04 	lds	r30, 0x04E4
    3bd0:	f0 91 e5 04 	lds	r31, 0x04E5
    3bd4:	20 e0       	ldi	r18, 0x00	; 0
    3bd6:	30 e0       	ldi	r19, 0x00	; 0
    3bd8:	08 c0       	rjmp	.+16     	; 0x3bea <freeMemory+0x4a>
    total += 2; /* Add two bytes for the memory block's header  */
    3bda:	80 81       	ld	r24, Z
    3bdc:	91 81       	ldd	r25, Z+1	; 0x01
    3bde:	02 96       	adiw	r24, 0x02	; 2
    total += (int) current->sz;
    3be0:	28 0f       	add	r18, r24
    3be2:	39 1f       	adc	r19, r25
/* Calculates the size of the free list */
int freeListSize() {
  struct __freelist* current;
  int total = 0;

  for (current = __flp; current; current = current->nx) {
    3be4:	02 80       	ldd	r0, Z+2	; 0x02
    3be6:	f3 81       	ldd	r31, Z+3	; 0x03
    3be8:	e0 2d       	mov	r30, r0
    3bea:	30 97       	sbiw	r30, 0x00	; 0
    3bec:	b1 f7       	brne	.-20     	; 0x3bda <freeMemory+0x3a>

  if ((int)__brkval == 0) {
    free_memory = ((int)&free_memory) - ((int)&__heap_start);
  } else {
    free_memory = ((int)&free_memory) - ((int)__brkval);
    free_memory += freeListSize();
    3bee:	24 0f       	add	r18, r20
    3bf0:	35 1f       	adc	r19, r21
    3bf2:	3a 83       	std	Y+2, r19	; 0x02
    3bf4:	29 83       	std	Y+1, r18	; 0x01
  }
  return free_memory;
    3bf6:	89 81       	ldd	r24, Y+1	; 0x01
    3bf8:	9a 81       	ldd	r25, Y+2	; 0x02
    3bfa:	0f 90       	pop	r0
    3bfc:	0f 90       	pop	r0
    3bfe:	cf 91       	pop	r28
    3c00:	df 91       	pop	r29
    3c02:	08 95       	ret

00003c04 <_Z9breakTimemR12tmElements_t>:
// leap year calulator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+Y)>0) && !((1970+Y)%4) && ( ((1970+Y)%100) || !((1970+Y)%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    3c04:	8f 92       	push	r8
    3c06:	9f 92       	push	r9
    3c08:	af 92       	push	r10
    3c0a:	bf 92       	push	r11
    3c0c:	cf 92       	push	r12
    3c0e:	df 92       	push	r13
    3c10:	ef 92       	push	r14
    3c12:	ff 92       	push	r15
    3c14:	0f 93       	push	r16
    3c16:	1f 93       	push	r17
    3c18:	cf 93       	push	r28
    3c1a:	df 93       	push	r29
    3c1c:	7b 01       	movw	r14, r22
    3c1e:	8c 01       	movw	r16, r24
    3c20:	ea 01       	movw	r28, r20
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    3c22:	2c e3       	ldi	r18, 0x3C	; 60
    3c24:	30 e0       	ldi	r19, 0x00	; 0
    3c26:	40 e0       	ldi	r20, 0x00	; 0
    3c28:	50 e0       	ldi	r21, 0x00	; 0
    3c2a:	0e 94 59 3c 	call	0x78b2	; 0x78b2 <__udivmodsi4>
    3c2e:	68 83       	st	Y, r22
  time /= 60; // now it is minutes
    3c30:	c8 01       	movw	r24, r16
    3c32:	b7 01       	movw	r22, r14
    3c34:	2c e3       	ldi	r18, 0x3C	; 60
    3c36:	30 e0       	ldi	r19, 0x00	; 0
    3c38:	40 e0       	ldi	r20, 0x00	; 0
    3c3a:	50 e0       	ldi	r21, 0x00	; 0
    3c3c:	0e 94 59 3c 	call	0x78b2	; 0x78b2 <__udivmodsi4>
    3c40:	12 2f       	mov	r17, r18
    3c42:	03 2f       	mov	r16, r19
    3c44:	f4 2e       	mov	r15, r20
    3c46:	e5 2e       	mov	r14, r21
  tm.Minute = time % 60;
    3c48:	62 2f       	mov	r22, r18
    3c4a:	73 2f       	mov	r23, r19
    3c4c:	84 2f       	mov	r24, r20
    3c4e:	95 2f       	mov	r25, r21
    3c50:	2c e3       	ldi	r18, 0x3C	; 60
    3c52:	30 e0       	ldi	r19, 0x00	; 0
    3c54:	40 e0       	ldi	r20, 0x00	; 0
    3c56:	50 e0       	ldi	r21, 0x00	; 0
    3c58:	0e 94 59 3c 	call	0x78b2	; 0x78b2 <__udivmodsi4>
    3c5c:	69 83       	std	Y+1, r22	; 0x01
  time /= 60; // now it is hours
    3c5e:	61 2f       	mov	r22, r17
    3c60:	70 2f       	mov	r23, r16
    3c62:	8f 2d       	mov	r24, r15
    3c64:	9e 2d       	mov	r25, r14
    3c66:	2c e3       	ldi	r18, 0x3C	; 60
    3c68:	30 e0       	ldi	r19, 0x00	; 0
    3c6a:	40 e0       	ldi	r20, 0x00	; 0
    3c6c:	50 e0       	ldi	r21, 0x00	; 0
    3c6e:	0e 94 59 3c 	call	0x78b2	; 0x78b2 <__udivmodsi4>
    3c72:	12 2f       	mov	r17, r18
    3c74:	03 2f       	mov	r16, r19
    3c76:	f4 2e       	mov	r15, r20
    3c78:	e5 2e       	mov	r14, r21
  tm.Hour = time % 24;
    3c7a:	62 2f       	mov	r22, r18
    3c7c:	73 2f       	mov	r23, r19
    3c7e:	84 2f       	mov	r24, r20
    3c80:	95 2f       	mov	r25, r21
    3c82:	28 e1       	ldi	r18, 0x18	; 24
    3c84:	30 e0       	ldi	r19, 0x00	; 0
    3c86:	40 e0       	ldi	r20, 0x00	; 0
    3c88:	50 e0       	ldi	r21, 0x00	; 0
    3c8a:	0e 94 59 3c 	call	0x78b2	; 0x78b2 <__udivmodsi4>
    3c8e:	6a 83       	std	Y+2, r22	; 0x02
  time /= 24; // now it is days
    3c90:	61 2f       	mov	r22, r17
    3c92:	70 2f       	mov	r23, r16
    3c94:	8f 2d       	mov	r24, r15
    3c96:	9e 2d       	mov	r25, r14
    3c98:	28 e1       	ldi	r18, 0x18	; 24
    3c9a:	30 e0       	ldi	r19, 0x00	; 0
    3c9c:	40 e0       	ldi	r20, 0x00	; 0
    3c9e:	50 e0       	ldi	r21, 0x00	; 0
    3ca0:	0e 94 59 3c 	call	0x78b2	; 0x78b2 <__udivmodsi4>
    3ca4:	79 01       	movw	r14, r18
    3ca6:	8a 01       	movw	r16, r20
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    3ca8:	c8 01       	movw	r24, r16
    3caa:	b7 01       	movw	r22, r14
    3cac:	6c 5f       	subi	r22, 0xFC	; 252
    3cae:	7f 4f       	sbci	r23, 0xFF	; 255
    3cb0:	8f 4f       	sbci	r24, 0xFF	; 255
    3cb2:	9f 4f       	sbci	r25, 0xFF	; 255
    3cb4:	27 e0       	ldi	r18, 0x07	; 7
    3cb6:	30 e0       	ldi	r19, 0x00	; 0
    3cb8:	40 e0       	ldi	r20, 0x00	; 0
    3cba:	50 e0       	ldi	r21, 0x00	; 0
    3cbc:	0e 94 59 3c 	call	0x78b2	; 0x78b2 <__udivmodsi4>
    3cc0:	6f 5f       	subi	r22, 0xFF	; 255
    3cc2:	6b 83       	std	Y+3, r22	; 0x03
    3cc4:	20 e0       	ldi	r18, 0x00	; 0
    3cc6:	aa 24       	eor	r10, r10
    3cc8:	bb 24       	eor	r11, r11
    3cca:	65 01       	movw	r12, r10
    3ccc:	01 c0       	rjmp	.+2      	; 0x3cd0 <_Z9breakTimemR12tmElements_t+0xcc>
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
    3cce:	2f 5f       	subi	r18, 0xFF	; 255
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3cd0:	82 2e       	mov	r8, r18
    3cd2:	99 24       	eor	r9, r9
    3cd4:	f4 01       	movw	r30, r8
    3cd6:	ee 54       	subi	r30, 0x4E	; 78
    3cd8:	f8 4f       	sbci	r31, 0xF8	; 248
    3cda:	cf 01       	movw	r24, r30
    3cdc:	83 70       	andi	r24, 0x03	; 3
    3cde:	90 70       	andi	r25, 0x00	; 0
    3ce0:	89 2b       	or	r24, r25
    3ce2:	99 f4       	brne	.+38     	; 0x3d0a <_Z9breakTimemR12tmElements_t+0x106>
    3ce4:	cf 01       	movw	r24, r30
    3ce6:	64 e6       	ldi	r22, 0x64	; 100
    3ce8:	70 e0       	ldi	r23, 0x00	; 0
    3cea:	0e 94 46 3c 	call	0x788c	; 0x788c <__divmodhi4>
    3cee:	89 2b       	or	r24, r25
    3cf0:	39 f4       	brne	.+14     	; 0x3d00 <_Z9breakTimemR12tmElements_t+0xfc>
    3cf2:	cf 01       	movw	r24, r30
    3cf4:	60 e9       	ldi	r22, 0x90	; 144
    3cf6:	71 e0       	ldi	r23, 0x01	; 1
    3cf8:	0e 94 46 3c 	call	0x788c	; 0x788c <__divmodhi4>
    3cfc:	89 2b       	or	r24, r25
    3cfe:	29 f4       	brne	.+10     	; 0x3d0a <_Z9breakTimemR12tmElements_t+0x106>
    3d00:	8e e6       	ldi	r24, 0x6E	; 110
    3d02:	91 e0       	ldi	r25, 0x01	; 1
    3d04:	a0 e0       	ldi	r26, 0x00	; 0
    3d06:	b0 e0       	ldi	r27, 0x00	; 0
    3d08:	04 c0       	rjmp	.+8      	; 0x3d12 <_Z9breakTimemR12tmElements_t+0x10e>
    3d0a:	8d e6       	ldi	r24, 0x6D	; 109
    3d0c:	91 e0       	ldi	r25, 0x01	; 1
    3d0e:	a0 e0       	ldi	r26, 0x00	; 0
    3d10:	b0 e0       	ldi	r27, 0x00	; 0
    3d12:	a8 0e       	add	r10, r24
    3d14:	b9 1e       	adc	r11, r25
    3d16:	ca 1e       	adc	r12, r26
    3d18:	db 1e       	adc	r13, r27
    3d1a:	c5 01       	movw	r24, r10
    3d1c:	a0 e0       	ldi	r26, 0x00	; 0
    3d1e:	b0 e0       	ldi	r27, 0x00	; 0
    3d20:	e8 16       	cp	r14, r24
    3d22:	f9 06       	cpc	r15, r25
    3d24:	0a 07       	cpc	r16, r26
    3d26:	1b 07       	cpc	r17, r27
    3d28:	90 f6       	brcc	.-92     	; 0x3cce <_Z9breakTimemR12tmElements_t+0xca>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    3d2a:	2e 83       	std	Y+6, r18	; 0x06
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    3d2c:	f4 01       	movw	r30, r8
    3d2e:	ee 54       	subi	r30, 0x4E	; 78
    3d30:	f8 4f       	sbci	r31, 0xF8	; 248
    3d32:	83 e0       	ldi	r24, 0x03	; 3
    3d34:	88 2e       	mov	r8, r24
    3d36:	91 2c       	mov	r9, r1
    3d38:	8e 22       	and	r8, r30
    3d3a:	9f 22       	and	r9, r31
    3d3c:	81 14       	cp	r8, r1
    3d3e:	91 04       	cpc	r9, r1
    3d40:	99 f4       	brne	.+38     	; 0x3d68 <_Z9breakTimemR12tmElements_t+0x164>
    3d42:	cf 01       	movw	r24, r30
    3d44:	64 e6       	ldi	r22, 0x64	; 100
    3d46:	70 e0       	ldi	r23, 0x00	; 0
    3d48:	0e 94 46 3c 	call	0x788c	; 0x788c <__divmodhi4>
    3d4c:	89 2b       	or	r24, r25
    3d4e:	39 f4       	brne	.+14     	; 0x3d5e <_Z9breakTimemR12tmElements_t+0x15a>
    3d50:	cf 01       	movw	r24, r30
    3d52:	60 e9       	ldi	r22, 0x90	; 144
    3d54:	71 e0       	ldi	r23, 0x01	; 1
    3d56:	0e 94 46 3c 	call	0x788c	; 0x788c <__divmodhi4>
    3d5a:	89 2b       	or	r24, r25
    3d5c:	29 f4       	brne	.+10     	; 0x3d68 <_Z9breakTimemR12tmElements_t+0x164>
    3d5e:	8e e6       	ldi	r24, 0x6E	; 110
    3d60:	91 e0       	ldi	r25, 0x01	; 1
    3d62:	a0 e0       	ldi	r26, 0x00	; 0
    3d64:	b0 e0       	ldi	r27, 0x00	; 0
    3d66:	04 c0       	rjmp	.+8      	; 0x3d70 <_Z9breakTimemR12tmElements_t+0x16c>
    3d68:	8d e6       	ldi	r24, 0x6D	; 109
    3d6a:	91 e0       	ldi	r25, 0x01	; 1
    3d6c:	a0 e0       	ldi	r26, 0x00	; 0
    3d6e:	b0 e0       	ldi	r27, 0x00	; 0
  time  -= days; // now it is days in this year, starting at 0
    3d70:	a8 1a       	sub	r10, r24
    3d72:	b9 0a       	sbc	r11, r25
    3d74:	ca 0a       	sbc	r12, r26
    3d76:	db 0a       	sbc	r13, r27
    3d78:	98 01       	movw	r18, r16
    3d7a:	87 01       	movw	r16, r14
    3d7c:	0a 19       	sub	r16, r10
    3d7e:	1b 09       	sbc	r17, r11
    3d80:	2c 09       	sbc	r18, r12
    3d82:	3d 09       	sbc	r19, r13
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    3d84:	cf 01       	movw	r24, r30
    3d86:	64 e6       	ldi	r22, 0x64	; 100
    3d88:	70 e0       	ldi	r23, 0x00	; 0
    3d8a:	0e 94 46 3c 	call	0x788c	; 0x788c <__divmodhi4>
    3d8e:	7c 01       	movw	r14, r24
    3d90:	cf 01       	movw	r24, r30
    3d92:	60 e9       	ldi	r22, 0x90	; 144
    3d94:	71 e0       	ldi	r23, 0x01	; 1
    3d96:	0e 94 46 3c 	call	0x788c	; 0x788c <__divmodhi4>
    3d9a:	ac 01       	movw	r20, r24
    3d9c:	e4 ec       	ldi	r30, 0xC4	; 196
    3d9e:	f1 e0       	ldi	r31, 0x01	; 1
    3da0:	60 e0       	ldi	r22, 0x00	; 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    3da2:	61 30       	cpi	r22, 0x01	; 1
    3da4:	51 f4       	brne	.+20     	; 0x3dba <_Z9breakTimemR12tmElements_t+0x1b6>
      if (LEAP_YEAR(year)) {
    3da6:	81 14       	cp	r8, r1
    3da8:	91 04       	cpc	r9, r1
    3daa:	49 f4       	brne	.+18     	; 0x3dbe <_Z9breakTimemR12tmElements_t+0x1ba>
    3dac:	e1 14       	cp	r14, r1
    3dae:	f1 04       	cpc	r15, r1
    3db0:	41 f4       	brne	.+16     	; 0x3dc2 <_Z9breakTimemR12tmElements_t+0x1be>
    3db2:	41 15       	cp	r20, r1
    3db4:	51 05       	cpc	r21, r1
    3db6:	29 f0       	breq	.+10     	; 0x3dc2 <_Z9breakTimemR12tmElements_t+0x1be>
    3db8:	02 c0       	rjmp	.+4      	; 0x3dbe <_Z9breakTimemR12tmElements_t+0x1ba>
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    3dba:	80 81       	ld	r24, Z
    3dbc:	03 c0       	rjmp	.+6      	; 0x3dc4 <_Z9breakTimemR12tmElements_t+0x1c0>
    3dbe:	8c e1       	ldi	r24, 0x1C	; 28
    3dc0:	01 c0       	rjmp	.+2      	; 0x3dc4 <_Z9breakTimemR12tmElements_t+0x1c0>
    3dc2:	8d e1       	ldi	r24, 0x1D	; 29
    }
    
    if (time >= monthLength) {
    3dc4:	90 e0       	ldi	r25, 0x00	; 0
    3dc6:	a0 e0       	ldi	r26, 0x00	; 0
    3dc8:	b0 e0       	ldi	r27, 0x00	; 0
    3dca:	08 17       	cp	r16, r24
    3dcc:	19 07       	cpc	r17, r25
    3dce:	2a 07       	cpc	r18, r26
    3dd0:	3b 07       	cpc	r19, r27
    3dd2:	40 f0       	brcs	.+16     	; 0x3de4 <_Z9breakTimemR12tmElements_t+0x1e0>
      time -= monthLength;
    3dd4:	08 1b       	sub	r16, r24
    3dd6:	19 0b       	sbc	r17, r25
    3dd8:	2a 0b       	sbc	r18, r26
    3dda:	3b 0b       	sbc	r19, r27
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    3ddc:	6f 5f       	subi	r22, 0xFF	; 255
    3dde:	31 96       	adiw	r30, 0x01	; 1
    3de0:	6c 30       	cpi	r22, 0x0C	; 12
    3de2:	f9 f6       	brne	.-66     	; 0x3da2 <_Z9breakTimemR12tmElements_t+0x19e>
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    3de4:	6f 5f       	subi	r22, 0xFF	; 255
    3de6:	6d 83       	std	Y+5, r22	; 0x05
  tm.Day = time + 1;     // day of month
    3de8:	80 2f       	mov	r24, r16
    3dea:	8f 5f       	subi	r24, 0xFF	; 255
    3dec:	8c 83       	std	Y+4, r24	; 0x04
}
    3dee:	df 91       	pop	r29
    3df0:	cf 91       	pop	r28
    3df2:	1f 91       	pop	r17
    3df4:	0f 91       	pop	r16
    3df6:	ff 90       	pop	r15
    3df8:	ef 90       	pop	r14
    3dfa:	df 90       	pop	r13
    3dfc:	cf 90       	pop	r12
    3dfe:	bf 90       	pop	r11
    3e00:	af 90       	pop	r10
    3e02:	9f 90       	pop	r9
    3e04:	8f 90       	pop	r8
    3e06:	08 95       	ret

00003e08 <_Z12refreshCachem>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    3e08:	ef 92       	push	r14
    3e0a:	ff 92       	push	r15
    3e0c:	0f 93       	push	r16
    3e0e:	1f 93       	push	r17
    3e10:	7b 01       	movw	r14, r22
    3e12:	8c 01       	movw	r16, r24
  if (t != cacheTime) {
    3e14:	80 91 25 03 	lds	r24, 0x0325
    3e18:	90 91 26 03 	lds	r25, 0x0326
    3e1c:	a0 91 27 03 	lds	r26, 0x0327
    3e20:	b0 91 28 03 	lds	r27, 0x0328
    3e24:	e8 16       	cp	r14, r24
    3e26:	f9 06       	cpc	r15, r25
    3e28:	0a 07       	cpc	r16, r26
    3e2a:	1b 07       	cpc	r17, r27
    3e2c:	71 f0       	breq	.+28     	; 0x3e4a <_Z12refreshCachem+0x42>
    breakTime(t, tm); 
    3e2e:	c8 01       	movw	r24, r16
    3e30:	b7 01       	movw	r22, r14
    3e32:	4a e1       	ldi	r20, 0x1A	; 26
    3e34:	53 e0       	ldi	r21, 0x03	; 3
    3e36:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <_Z9breakTimemR12tmElements_t>
    cacheTime = t; 
    3e3a:	e0 92 25 03 	sts	0x0325, r14
    3e3e:	f0 92 26 03 	sts	0x0326, r15
    3e42:	00 93 27 03 	sts	0x0327, r16
    3e46:	10 93 28 03 	sts	0x0328, r17
  }
}
    3e4a:	1f 91       	pop	r17
    3e4c:	0f 91       	pop	r16
    3e4e:	ff 90       	pop	r15
    3e50:	ef 90       	pop	r14
    3e52:	08 95       	ret

00003e54 <_Z4yearm>:
int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
    3e54:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <_Z12refreshCachem>
    3e58:	20 91 20 03 	lds	r18, 0x0320
    3e5c:	30 e0       	ldi	r19, 0x00	; 0
    3e5e:	2e 54       	subi	r18, 0x4E	; 78
    3e60:	38 4f       	sbci	r19, 0xF8	; 248
  return tmYearToCalendar(tm.Year);
}
    3e62:	c9 01       	movw	r24, r18
    3e64:	08 95       	ret

00003e66 <_Z8makeTimeR12tmElements_t>:
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
}

time_t makeTime(tmElements_t &tm){   
    3e66:	4f 92       	push	r4
    3e68:	5f 92       	push	r5
    3e6a:	6f 92       	push	r6
    3e6c:	7f 92       	push	r7
    3e6e:	8f 92       	push	r8
    3e70:	9f 92       	push	r9
    3e72:	af 92       	push	r10
    3e74:	bf 92       	push	r11
    3e76:	cf 92       	push	r12
    3e78:	df 92       	push	r13
    3e7a:	ef 92       	push	r14
    3e7c:	ff 92       	push	r15
    3e7e:	0f 93       	push	r16
    3e80:	1f 93       	push	r17
    3e82:	cf 93       	push	r28
    3e84:	df 93       	push	r29
    3e86:	4c 01       	movw	r8, r24
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
    3e88:	dc 01       	movw	r26, r24
    3e8a:	16 96       	adiw	r26, 0x06	; 6
    3e8c:	1c 91       	ld	r17, X
    3e8e:	61 2f       	mov	r22, r17
    3e90:	70 e0       	ldi	r23, 0x00	; 0
    3e92:	80 e0       	ldi	r24, 0x00	; 0
    3e94:	90 e0       	ldi	r25, 0x00	; 0
    3e96:	20 e8       	ldi	r18, 0x80	; 128
    3e98:	33 e3       	ldi	r19, 0x33	; 51
    3e9a:	41 ee       	ldi	r20, 0xE1	; 225
    3e9c:	51 e0       	ldi	r21, 0x01	; 1
    3e9e:	0e 94 13 3c 	call	0x7826	; 0x7826 <__mulsi3>
    3ea2:	5b 01       	movw	r10, r22
    3ea4:	6c 01       	movw	r12, r24
    3ea6:	22 eb       	ldi	r18, 0xB2	; 178
    3ea8:	37 e0       	ldi	r19, 0x07	; 7
  for (i = 0; i < tm.Year; i++) {
    3eaa:	e1 2f       	mov	r30, r17
    3eac:	f0 e0       	ldi	r31, 0x00	; 0
    3eae:	ee 54       	subi	r30, 0x4E	; 78
    3eb0:	f8 4f       	sbci	r31, 0xF8	; 248
    3eb2:	1d c0       	rjmp	.+58     	; 0x3eee <_Z8makeTimeR12tmElements_t+0x88>
    if (LEAP_YEAR(i)) {
    3eb4:	c9 01       	movw	r24, r18
    3eb6:	83 70       	andi	r24, 0x03	; 3
    3eb8:	90 70       	andi	r25, 0x00	; 0
    3eba:	89 2b       	or	r24, r25
    3ebc:	b1 f4       	brne	.+44     	; 0x3eea <_Z8makeTimeR12tmElements_t+0x84>
    3ebe:	c9 01       	movw	r24, r18
    3ec0:	64 e6       	ldi	r22, 0x64	; 100
    3ec2:	70 e0       	ldi	r23, 0x00	; 0
    3ec4:	0e 94 46 3c 	call	0x788c	; 0x788c <__divmodhi4>
    3ec8:	89 2b       	or	r24, r25
    3eca:	39 f4       	brne	.+14     	; 0x3eda <_Z8makeTimeR12tmElements_t+0x74>
    3ecc:	c9 01       	movw	r24, r18
    3ece:	60 e9       	ldi	r22, 0x90	; 144
    3ed0:	71 e0       	ldi	r23, 0x01	; 1
    3ed2:	0e 94 46 3c 	call	0x788c	; 0x788c <__divmodhi4>
    3ed6:	89 2b       	or	r24, r25
    3ed8:	41 f4       	brne	.+16     	; 0x3eea <_Z8makeTimeR12tmElements_t+0x84>
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    3eda:	80 e8       	ldi	r24, 0x80	; 128
    3edc:	91 e5       	ldi	r25, 0x51	; 81
    3ede:	a1 e0       	ldi	r26, 0x01	; 1
    3ee0:	b0 e0       	ldi	r27, 0x00	; 0
    3ee2:	a8 0e       	add	r10, r24
    3ee4:	b9 1e       	adc	r11, r25
    3ee6:	ca 1e       	adc	r12, r26
    3ee8:	db 1e       	adc	r13, r27
    3eea:	2f 5f       	subi	r18, 0xFF	; 255
    3eec:	3f 4f       	sbci	r19, 0xFF	; 255
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    3eee:	2e 17       	cp	r18, r30
    3ef0:	3f 07       	cpc	r19, r31
    3ef2:	01 f7       	brne	.-64     	; 0x3eb4 <_Z8makeTimeR12tmElements_t+0x4e>
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    3ef4:	d4 01       	movw	r26, r8
    3ef6:	15 96       	adiw	r26, 0x05	; 5
    3ef8:	8c 91       	ld	r24, X
    3efa:	48 2e       	mov	r4, r24
    3efc:	55 24       	eor	r5, r5
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    3efe:	c9 01       	movw	r24, r18
    3f00:	64 e6       	ldi	r22, 0x64	; 100
    3f02:	70 e0       	ldi	r23, 0x00	; 0
    3f04:	0e 94 46 3c 	call	0x788c	; 0x788c <__divmodhi4>
    3f08:	7c 01       	movw	r14, r24
    3f0a:	c9 01       	movw	r24, r18
    3f0c:	60 e9       	ldi	r22, 0x90	; 144
    3f0e:	71 e0       	ldi	r23, 0x01	; 1
    3f10:	0e 94 46 3c 	call	0x788c	; 0x788c <__divmodhi4>
    3f14:	8c 01       	movw	r16, r24
    3f16:	c1 e0       	ldi	r28, 0x01	; 1
    3f18:	d0 e0       	ldi	r29, 0x00	; 0
    3f1a:	93 e0       	ldi	r25, 0x03	; 3
    3f1c:	69 2e       	mov	r6, r25
    3f1e:	71 2c       	mov	r7, r1
    3f20:	62 22       	and	r6, r18
    3f22:	73 22       	and	r7, r19
    3f24:	27 c0       	rjmp	.+78     	; 0x3f74 <_Z8makeTimeR12tmElements_t+0x10e>
    3f26:	c2 30       	cpi	r28, 0x02	; 2
    3f28:	d1 05       	cpc	r29, r1
    3f2a:	91 f4       	brne	.+36     	; 0x3f50 <_Z8makeTimeR12tmElements_t+0xea>
    3f2c:	61 14       	cp	r6, r1
    3f2e:	71 04       	cpc	r7, r1
    3f30:	79 f4       	brne	.+30     	; 0x3f50 <_Z8makeTimeR12tmElements_t+0xea>
    3f32:	e1 14       	cp	r14, r1
    3f34:	f1 04       	cpc	r15, r1
    3f36:	19 f4       	brne	.+6      	; 0x3f3e <_Z8makeTimeR12tmElements_t+0xd8>
    3f38:	01 15       	cp	r16, r1
    3f3a:	11 05       	cpc	r17, r1
    3f3c:	49 f4       	brne	.+18     	; 0x3f50 <_Z8makeTimeR12tmElements_t+0xea>
      seconds += SECS_PER_DAY * 29;
    3f3e:	80 e8       	ldi	r24, 0x80	; 128
    3f40:	9b e3       	ldi	r25, 0x3B	; 59
    3f42:	a6 e2       	ldi	r26, 0x26	; 38
    3f44:	b0 e0       	ldi	r27, 0x00	; 0
    3f46:	a8 0e       	add	r10, r24
    3f48:	b9 1e       	adc	r11, r25
    3f4a:	ca 1e       	adc	r12, r26
    3f4c:	db 1e       	adc	r13, r27
    3f4e:	11 c0       	rjmp	.+34     	; 0x3f72 <_Z8makeTimeR12tmElements_t+0x10c>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    3f50:	fe 01       	movw	r30, r28
    3f52:	ed 53       	subi	r30, 0x3D	; 61
    3f54:	fe 4f       	sbci	r31, 0xFE	; 254
    3f56:	60 81       	ld	r22, Z
    3f58:	70 e0       	ldi	r23, 0x00	; 0
    3f5a:	80 e0       	ldi	r24, 0x00	; 0
    3f5c:	90 e0       	ldi	r25, 0x00	; 0
    3f5e:	20 e8       	ldi	r18, 0x80	; 128
    3f60:	31 e5       	ldi	r19, 0x51	; 81
    3f62:	41 e0       	ldi	r20, 0x01	; 1
    3f64:	50 e0       	ldi	r21, 0x00	; 0
    3f66:	0e 94 13 3c 	call	0x7826	; 0x7826 <__mulsi3>
    3f6a:	a6 0e       	add	r10, r22
    3f6c:	b7 1e       	adc	r11, r23
    3f6e:	c8 1e       	adc	r12, r24
    3f70:	d9 1e       	adc	r13, r25
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    3f72:	21 96       	adiw	r28, 0x01	; 1
    3f74:	c4 15       	cp	r28, r4
    3f76:	d5 05       	cpc	r29, r5
    3f78:	b4 f2       	brlt	.-84     	; 0x3f26 <_Z8makeTimeR12tmElements_t+0xc0>
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    }
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
    3f7a:	d4 01       	movw	r26, r8
    3f7c:	12 96       	adiw	r26, 0x02	; 2
    3f7e:	6c 91       	ld	r22, X
    3f80:	70 e0       	ldi	r23, 0x00	; 0
    3f82:	80 e0       	ldi	r24, 0x00	; 0
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	20 e1       	ldi	r18, 0x10	; 16
    3f88:	3e e0       	ldi	r19, 0x0E	; 14
    3f8a:	40 e0       	ldi	r20, 0x00	; 0
    3f8c:	50 e0       	ldi	r21, 0x00	; 0
    3f8e:	0e 94 13 3c 	call	0x7826	; 0x7826 <__mulsi3>
    3f92:	7b 01       	movw	r14, r22
    3f94:	8c 01       	movw	r16, r24
    3f96:	f4 01       	movw	r30, r8
    3f98:	61 81       	ldd	r22, Z+1	; 0x01
    3f9a:	70 e0       	ldi	r23, 0x00	; 0
    3f9c:	80 e0       	ldi	r24, 0x00	; 0
    3f9e:	90 e0       	ldi	r25, 0x00	; 0
    3fa0:	2c e3       	ldi	r18, 0x3C	; 60
    3fa2:	30 e0       	ldi	r19, 0x00	; 0
    3fa4:	40 e0       	ldi	r20, 0x00	; 0
    3fa6:	50 e0       	ldi	r21, 0x00	; 0
    3fa8:	0e 94 13 3c 	call	0x7826	; 0x7826 <__mulsi3>
    3fac:	e6 0e       	add	r14, r22
    3fae:	f7 1e       	adc	r15, r23
    3fb0:	08 1f       	adc	r16, r24
    3fb2:	19 1f       	adc	r17, r25
  seconds+= tm.Hour * SECS_PER_HOUR;
    3fb4:	d4 01       	movw	r26, r8
    3fb6:	8c 91       	ld	r24, X
    3fb8:	e8 0e       	add	r14, r24
    3fba:	f1 1c       	adc	r15, r1
    3fbc:	01 1d       	adc	r16, r1
    3fbe:	11 1d       	adc	r17, r1
  seconds+= tm.Minute * SECS_PER_MIN;
    3fc0:	14 96       	adiw	r26, 0x04	; 4
    3fc2:	6c 91       	ld	r22, X
    3fc4:	70 e0       	ldi	r23, 0x00	; 0
    3fc6:	61 50       	subi	r22, 0x01	; 1
    3fc8:	70 40       	sbci	r23, 0x00	; 0
    3fca:	88 27       	eor	r24, r24
    3fcc:	77 fd       	sbrc	r23, 7
    3fce:	80 95       	com	r24
    3fd0:	98 2f       	mov	r25, r24
    3fd2:	20 e8       	ldi	r18, 0x80	; 128
    3fd4:	31 e5       	ldi	r19, 0x51	; 81
    3fd6:	41 e0       	ldi	r20, 0x01	; 1
    3fd8:	50 e0       	ldi	r21, 0x00	; 0
    3fda:	0e 94 13 3c 	call	0x7826	; 0x7826 <__mulsi3>
    3fde:	e6 0e       	add	r14, r22
    3fe0:	f7 1e       	adc	r15, r23
    3fe2:	08 1f       	adc	r16, r24
    3fe4:	19 1f       	adc	r17, r25
    3fe6:	ea 0c       	add	r14, r10
    3fe8:	fb 1c       	adc	r15, r11
    3fea:	0c 1d       	adc	r16, r12
    3fec:	1d 1d       	adc	r17, r13
  seconds+= tm.Second;
  return (time_t)seconds; 
}
    3fee:	b7 01       	movw	r22, r14
    3ff0:	c8 01       	movw	r24, r16
    3ff2:	df 91       	pop	r29
    3ff4:	cf 91       	pop	r28
    3ff6:	1f 91       	pop	r17
    3ff8:	0f 91       	pop	r16
    3ffa:	ff 90       	pop	r15
    3ffc:	ef 90       	pop	r14
    3ffe:	df 90       	pop	r13
    4000:	cf 90       	pop	r12
    4002:	bf 90       	pop	r11
    4004:	af 90       	pop	r10
    4006:	9f 90       	pop	r9
    4008:	8f 90       	pop	r8
    400a:	7f 90       	pop	r7
    400c:	6f 90       	pop	r6
    400e:	5f 90       	pop	r5
    4010:	4f 90       	pop	r4
    4012:	08 95       	ret

00004014 <_Z7setTimem>:
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    4014:	60 93 10 03 	sts	0x0310, r22
    4018:	70 93 11 03 	sts	0x0311, r23
    401c:	80 93 12 03 	sts	0x0312, r24
    4020:	90 93 13 03 	sts	0x0313, r25
  nextSyncTime = (uint32_t)t + syncInterval;
    4024:	20 91 ba 01 	lds	r18, 0x01BA
    4028:	30 91 bb 01 	lds	r19, 0x01BB
    402c:	40 91 bc 01 	lds	r20, 0x01BC
    4030:	50 91 bd 01 	lds	r21, 0x01BD
    4034:	26 0f       	add	r18, r22
    4036:	37 1f       	adc	r19, r23
    4038:	48 1f       	adc	r20, r24
    403a:	59 1f       	adc	r21, r25
    403c:	20 93 14 03 	sts	0x0314, r18
    4040:	30 93 15 03 	sts	0x0315, r19
    4044:	40 93 16 03 	sts	0x0316, r20
    4048:	50 93 17 03 	sts	0x0317, r21
  Status = timeSet;
    404c:	82 e0       	ldi	r24, 0x02	; 2
    404e:	90 e0       	ldi	r25, 0x00	; 0
    4050:	90 93 19 03 	sts	0x0319, r25
    4054:	80 93 18 03 	sts	0x0318, r24
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    4058:	0e 94 61 2f 	call	0x5ec2	; 0x5ec2 <millis>
    405c:	60 93 21 03 	sts	0x0321, r22
    4060:	70 93 22 03 	sts	0x0322, r23
    4064:	80 93 23 03 	sts	0x0323, r24
    4068:	90 93 24 03 	sts	0x0324, r25
} 
    406c:	08 95       	ret

0000406e <_Z3nowv>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    406e:	ef 92       	push	r14
    4070:	ff 92       	push	r15
    4072:	0f 93       	push	r16
    4074:	1f 93       	push	r17
    4076:	1c c0       	rjmp	.+56     	; 0x40b0 <_Z3nowv+0x42>
  while (millis() - prevMillis >= 1000){      
    sysTime++;
    4078:	2f 5f       	subi	r18, 0xFF	; 255
    407a:	3f 4f       	sbci	r19, 0xFF	; 255
    407c:	4f 4f       	sbci	r20, 0xFF	; 255
    407e:	5f 4f       	sbci	r21, 0xFF	; 255
    4080:	20 93 10 03 	sts	0x0310, r18
    4084:	30 93 11 03 	sts	0x0311, r19
    4088:	40 93 12 03 	sts	0x0312, r20
    408c:	50 93 13 03 	sts	0x0313, r21
    prevMillis += 1000;	
    4090:	88 ee       	ldi	r24, 0xE8	; 232
    4092:	93 e0       	ldi	r25, 0x03	; 3
    4094:	a0 e0       	ldi	r26, 0x00	; 0
    4096:	b0 e0       	ldi	r27, 0x00	; 0
    4098:	e8 0e       	add	r14, r24
    409a:	f9 1e       	adc	r15, r25
    409c:	0a 1f       	adc	r16, r26
    409e:	1b 1f       	adc	r17, r27
    40a0:	e0 92 21 03 	sts	0x0321, r14
    40a4:	f0 92 22 03 	sts	0x0322, r15
    40a8:	00 93 23 03 	sts	0x0323, r16
    40ac:	10 93 24 03 	sts	0x0324, r17
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
  while (millis() - prevMillis >= 1000){      
    40b0:	0e 94 61 2f 	call	0x5ec2	; 0x5ec2 <millis>
    40b4:	e0 90 21 03 	lds	r14, 0x0321
    40b8:	f0 90 22 03 	lds	r15, 0x0322
    40bc:	00 91 23 03 	lds	r16, 0x0323
    40c0:	10 91 24 03 	lds	r17, 0x0324
    40c4:	6e 19       	sub	r22, r14
    40c6:	7f 09       	sbc	r23, r15
    40c8:	80 0b       	sbc	r24, r16
    40ca:	91 0b       	sbc	r25, r17
    40cc:	20 91 10 03 	lds	r18, 0x0310
    40d0:	30 91 11 03 	lds	r19, 0x0311
    40d4:	40 91 12 03 	lds	r20, 0x0312
    40d8:	50 91 13 03 	lds	r21, 0x0313
    40dc:	68 5e       	subi	r22, 0xE8	; 232
    40de:	73 40       	sbci	r23, 0x03	; 3
    40e0:	80 40       	sbci	r24, 0x00	; 0
    40e2:	90 40       	sbci	r25, 0x00	; 0
    40e4:	48 f6       	brcc	.-110    	; 0x4078 <_Z3nowv+0xa>
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    40e6:	80 91 14 03 	lds	r24, 0x0314
    40ea:	90 91 15 03 	lds	r25, 0x0315
    40ee:	a0 91 16 03 	lds	r26, 0x0316
    40f2:	b0 91 17 03 	lds	r27, 0x0317
    40f6:	28 17       	cp	r18, r24
    40f8:	39 07       	cpc	r19, r25
    40fa:	4a 07       	cpc	r20, r26
    40fc:	5b 07       	cpc	r21, r27
    40fe:	c8 f1       	brcs	.+114    	; 0x4172 <_Z3nowv+0x104>
    if (getTimePtr != 0) {
    4100:	e0 91 0e 03 	lds	r30, 0x030E
    4104:	f0 91 0f 03 	lds	r31, 0x030F
    4108:	30 97       	sbiw	r30, 0x00	; 0
    410a:	99 f1       	breq	.+102    	; 0x4172 <_Z3nowv+0x104>
      time_t t = getTimePtr();
    410c:	09 95       	icall
      if (t != 0) {
    410e:	61 15       	cp	r22, r1
    4110:	71 05       	cpc	r23, r1
    4112:	81 05       	cpc	r24, r1
    4114:	91 05       	cpc	r25, r1
    4116:	19 f0       	breq	.+6      	; 0x411e <_Z3nowv+0xb0>
        setTime(t);
    4118:	0e 94 0a 20 	call	0x4014	; 0x4014 <_Z7setTimem>
    411c:	2a c0       	rjmp	.+84     	; 0x4172 <_Z3nowv+0x104>
      } else {
        nextSyncTime = sysTime + syncInterval;
    411e:	80 91 ba 01 	lds	r24, 0x01BA
    4122:	90 91 bb 01 	lds	r25, 0x01BB
    4126:	a0 91 bc 01 	lds	r26, 0x01BC
    412a:	b0 91 bd 01 	lds	r27, 0x01BD
    412e:	20 91 10 03 	lds	r18, 0x0310
    4132:	30 91 11 03 	lds	r19, 0x0311
    4136:	40 91 12 03 	lds	r20, 0x0312
    413a:	50 91 13 03 	lds	r21, 0x0313
    413e:	82 0f       	add	r24, r18
    4140:	93 1f       	adc	r25, r19
    4142:	a4 1f       	adc	r26, r20
    4144:	b5 1f       	adc	r27, r21
    4146:	80 93 14 03 	sts	0x0314, r24
    414a:	90 93 15 03 	sts	0x0315, r25
    414e:	a0 93 16 03 	sts	0x0316, r26
    4152:	b0 93 17 03 	sts	0x0317, r27
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    4156:	20 e0       	ldi	r18, 0x00	; 0
    4158:	30 e0       	ldi	r19, 0x00	; 0
    415a:	80 91 18 03 	lds	r24, 0x0318
    415e:	90 91 19 03 	lds	r25, 0x0319
    4162:	89 2b       	or	r24, r25
    4164:	11 f0       	breq	.+4      	; 0x416a <_Z3nowv+0xfc>
    4166:	21 e0       	ldi	r18, 0x01	; 1
    4168:	30 e0       	ldi	r19, 0x00	; 0
    416a:	30 93 19 03 	sts	0x0319, r19
    416e:	20 93 18 03 	sts	0x0318, r18
    4172:	60 91 10 03 	lds	r22, 0x0310
    4176:	70 91 11 03 	lds	r23, 0x0311
      }
    }
  }  
  return (time_t)sysTime;
}
    417a:	80 91 12 03 	lds	r24, 0x0312
    417e:	90 91 13 03 	lds	r25, 0x0313
    4182:	1f 91       	pop	r17
    4184:	0f 91       	pop	r16
    4186:	ff 90       	pop	r15
    4188:	ef 90       	pop	r14
    418a:	08 95       	ret

0000418c <_Z15setSyncProviderPFmvE>:
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    418c:	90 93 0f 03 	sts	0x030F, r25
    4190:	80 93 0e 03 	sts	0x030E, r24
  nextSyncTime = sysTime;
    4194:	80 91 10 03 	lds	r24, 0x0310
    4198:	90 91 11 03 	lds	r25, 0x0311
    419c:	a0 91 12 03 	lds	r26, 0x0312
    41a0:	b0 91 13 03 	lds	r27, 0x0313
    41a4:	80 93 14 03 	sts	0x0314, r24
    41a8:	90 93 15 03 	sts	0x0315, r25
    41ac:	a0 93 16 03 	sts	0x0316, r26
    41b0:	b0 93 17 03 	sts	0x0317, r27
  now(); // this will sync the clock
    41b4:	0e 94 37 20 	call	0x406e	; 0x406e <_Z3nowv>
}
    41b8:	08 95       	ret

000041ba <_Z10timeStatusv>:
  sysTime += adjustment;
}

// indicates if time has been set and recently synchronized
timeStatus_t timeStatus() {
  now(); // required to actually update the status
    41ba:	0e 94 37 20 	call	0x406e	; 0x406e <_Z3nowv>
  return Status;
}
    41be:	80 91 18 03 	lds	r24, 0x0318
    41c2:	90 91 19 03 	lds	r25, 0x0319
    41c6:	08 95       	ret

000041c8 <_Z4yearv>:
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    41c8:	0e 94 37 20 	call	0x406e	; 0x406e <_Z3nowv>
    41cc:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <_Z4yearm>
}
    41d0:	08 95       	ret

000041d2 <_Z4hourv>:
    cacheTime = t; 
  }
}

int hour() { // the hour now 
  return hour(now()); 
    41d2:	0e 94 37 20 	call	0x406e	; 0x406e <_Z3nowv>
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
    41d6:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <_Z12refreshCachem>
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    41da:	80 91 1c 03 	lds	r24, 0x031C
    41de:	90 e0       	ldi	r25, 0x00	; 0
    41e0:	08 95       	ret

000041e2 <_ZN15TimeAlarmsClassC1Ev>:
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    41e2:	cf 93       	push	r28
    41e4:	df 93       	push	r29
    41e6:	dc 01       	movw	r26, r24
    41e8:	fc 01       	movw	r30, r24
    41ea:	20 e0       	ldi	r18, 0x00	; 0
    41ec:	30 e0       	ldi	r19, 0x00	; 0
//**************************************************************
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
    41ee:	82 85       	ldd	r24, Z+10	; 0x0a
  Mode.alarmType = dtNotAllocated;
    41f0:	80 7c       	andi	r24, 0xC0	; 192
    41f2:	82 87       	std	Z+10, r24	; 0x0a
  value = nextTrigger = 0;
    41f4:	16 82       	std	Z+6, r1	; 0x06
    41f6:	17 82       	std	Z+7, r1	; 0x07
    41f8:	10 86       	std	Z+8, r1	; 0x08
    41fa:	11 86       	std	Z+9, r1	; 0x09
    41fc:	12 82       	std	Z+2, r1	; 0x02
    41fe:	13 82       	std	Z+3, r1	; 0x03
    4200:	14 82       	std	Z+4, r1	; 0x04
    4202:	15 82       	std	Z+5, r1	; 0x05
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set 
    4204:	11 82       	std	Z+1, r1	; 0x01
    4206:	10 82       	st	Z, r1
    4208:	25 5f       	subi	r18, 0xF5	; 245
    420a:	3f 4f       	sbci	r19, 0xFF	; 255
    420c:	3b 96       	adiw	r30, 0x0b	; 11
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    420e:	22 34       	cpi	r18, 0x42	; 66
    4210:	31 05       	cpc	r19, r1
    4212:	69 f7       	brne	.-38     	; 0x41ee <_ZN15TimeAlarmsClassC1Ev+0xc>
{
  isServicing = false;
    4214:	ae 5b       	subi	r26, 0xBE	; 190
    4216:	bf 4f       	sbci	r27, 0xFF	; 255
    4218:	1c 92       	st	X, r1
    421a:	a2 54       	subi	r26, 0x42	; 66
    421c:	b0 40       	sbci	r27, 0x00	; 0
    421e:	ed 01       	movw	r28, r26
    4220:	20 e0       	ldi	r18, 0x00	; 0
    4222:	30 e0       	ldi	r19, 0x00	; 0
     }
     
     // returns true if this id is allocated
     bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
     {
        return( ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated );
    4224:	4b e0       	ldi	r20, 0x0B	; 11
    4226:	50 e0       	ldi	r21, 0x00	; 0
    4228:	24 9f       	mul	r18, r20
    422a:	f0 01       	movw	r30, r0
    422c:	25 9f       	mul	r18, r21
    422e:	f0 0d       	add	r31, r0
    4230:	34 9f       	mul	r19, r20
    4232:	f0 0d       	add	r31, r0
    4234:	11 24       	eor	r1, r1
    4236:	ea 0f       	add	r30, r26
    4238:	fb 1f       	adc	r31, r27
    423a:	92 85       	ldd	r25, Z+10	; 0x0a
    423c:	89 2f       	mov	r24, r25
    423e:	8f 70       	andi	r24, 0x0F	; 15
    4240:	61 f0       	breq	.+24     	; 0x425a <_ZN15TimeAlarmsClassC1Ev+0x78>
    void TimeAlarmsClass::free(AlarmID_t ID)
    {
      if(isAllocated(ID))
      {
        Alarm[ID].Mode.isEnabled = false;
    	Alarm[ID].Mode.alarmType = dtNotAllocated;
    4242:	90 7e       	andi	r25, 0xE0	; 224
    4244:	92 87       	std	Z+10, r25	; 0x0a
        Alarm[ID].onTickHandler = 0;
    4246:	19 82       	std	Y+1, r1	; 0x01
    4248:	18 82       	st	Y, r1
    	Alarm[ID].value = 0;
    424a:	1a 82       	std	Y+2, r1	; 0x02
    424c:	1b 82       	std	Y+3, r1	; 0x03
    424e:	1c 82       	std	Y+4, r1	; 0x04
    4250:	1d 82       	std	Y+5, r1	; 0x05
    	Alarm[ID].nextTrigger = 0;   	
    4252:	1e 82       	std	Y+6, r1	; 0x06
    4254:	1f 82       	std	Y+7, r1	; 0x07
    4256:	18 86       	std	Y+8, r1	; 0x08
    4258:	19 86       	std	Y+9, r1	; 0x09
    425a:	2f 5f       	subi	r18, 0xFF	; 255
    425c:	3f 4f       	sbci	r19, 0xFF	; 255
    425e:	2b 96       	adiw	r28, 0x0b	; 11
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
  for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
    4260:	26 30       	cpi	r18, 0x06	; 6
    4262:	31 05       	cpc	r19, r1
    4264:	09 f7       	brne	.-62     	; 0x4228 <_ZN15TimeAlarmsClassC1Ev+0x46>
     free(id);   // ensure  all Alarms are cleared and available for allocation  
}
    4266:	df 91       	pop	r29
    4268:	cf 91       	pop	r28
    426a:	08 95       	ret

0000426c <_GLOBAL__I__ZN10AlarmClassC2Ev>:
      }
      return dtINVALID_ALARM_ID; // no IDs available or time is invalid
    }
    
    // make one instance for the user to use
    TimeAlarmsClass Alarm = TimeAlarmsClass() ;
    426c:	89 e2       	ldi	r24, 0x29	; 41
    426e:	93 e0       	ldi	r25, 0x03	; 3
    4270:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <_ZN15TimeAlarmsClassC1Ev>
    4274:	08 95       	ret

00004276 <_ZN10AlarmClass17updateNextTriggerEv>:

//**************************************************************
//* Private Methods

 
void AlarmClass::updateNextTrigger()
    4276:	2f 92       	push	r2
    4278:	3f 92       	push	r3
    427a:	4f 92       	push	r4
    427c:	5f 92       	push	r5
    427e:	6f 92       	push	r6
    4280:	7f 92       	push	r7
    4282:	8f 92       	push	r8
    4284:	9f 92       	push	r9
    4286:	af 92       	push	r10
    4288:	bf 92       	push	r11
    428a:	cf 92       	push	r12
    428c:	df 92       	push	r13
    428e:	ef 92       	push	r14
    4290:	ff 92       	push	r15
    4292:	0f 93       	push	r16
    4294:	1f 93       	push	r17
    4296:	df 93       	push	r29
    4298:	cf 93       	push	r28
    429a:	00 d0       	rcall	.+0      	; 0x429c <_ZN10AlarmClass17updateNextTriggerEv+0x26>
    429c:	00 d0       	rcall	.+0      	; 0x429e <_ZN10AlarmClass17updateNextTriggerEv+0x28>
    429e:	00 d0       	rcall	.+0      	; 0x42a0 <_ZN10AlarmClass17updateNextTriggerEv+0x2a>
    42a0:	cd b7       	in	r28, 0x3d	; 61
    42a2:	de b7       	in	r29, 0x3e	; 62
    42a4:	9e 83       	std	Y+6, r25	; 0x06
    42a6:	8d 83       	std	Y+5, r24	; 0x05
{  
  if( (value != 0) && Mode.isEnabled )
    42a8:	fc 01       	movw	r30, r24
    42aa:	82 81       	ldd	r24, Z+2	; 0x02
    42ac:	93 81       	ldd	r25, Z+3	; 0x03
    42ae:	a4 81       	ldd	r26, Z+4	; 0x04
    42b0:	b5 81       	ldd	r27, Z+5	; 0x05
    42b2:	00 97       	sbiw	r24, 0x00	; 0
    42b4:	a1 05       	cpc	r26, r1
    42b6:	b1 05       	cpc	r27, r1
    42b8:	09 f4       	brne	.+2      	; 0x42bc <_ZN10AlarmClass17updateNextTriggerEv+0x46>
    42ba:	5b c1       	rjmp	.+694    	; 0x4572 <_ZN10AlarmClass17updateNextTriggerEv+0x2fc>
    42bc:	82 85       	ldd	r24, Z+10	; 0x0a
    42be:	84 ff       	sbrs	r24, 4
    42c0:	58 c1       	rjmp	.+688    	; 0x4572 <_ZN10AlarmClass17updateNextTriggerEv+0x2fc>
  {
    time_t time = now();
    42c2:	0e 94 37 20 	call	0x406e	; 0x406e <_Z3nowv>
    42c6:	69 83       	std	Y+1, r22	; 0x01
    42c8:	7a 83       	std	Y+2, r23	; 0x02
    42ca:	8b 83       	std	Y+3, r24	; 0x03
    42cc:	9c 83       	std	Y+4, r25	; 0x04
    if( dtIsAlarm(Mode.alarmType) && nextTrigger <= time )   // update alarm if next trigger is not yet in the future
    42ce:	ad 81       	ldd	r26, Y+5	; 0x05
    42d0:	be 81       	ldd	r27, Y+6	; 0x06
    42d2:	1a 96       	adiw	r26, 0x0a	; 10
    42d4:	3c 91       	ld	r19, X
    42d6:	1a 97       	sbiw	r26, 0x0a	; 10
    42d8:	23 2f       	mov	r18, r19
    42da:	2f 70       	andi	r18, 0x0F	; 15
    42dc:	82 2f       	mov	r24, r18
    42de:	82 5f       	subi	r24, 0xF2	; 242
    42e0:	8f 70       	andi	r24, 0x0F	; 15
    42e2:	83 30       	cpi	r24, 0x03	; 3
    42e4:	08 f0       	brcs	.+2      	; 0x42e8 <_ZN10AlarmClass17updateNextTriggerEv+0x72>
    42e6:	28 c1       	rjmp	.+592    	; 0x4538 <_ZN10AlarmClass17updateNextTriggerEv+0x2c2>
    42e8:	16 96       	adiw	r26, 0x06	; 6
    42ea:	8d 91       	ld	r24, X+
    42ec:	9d 91       	ld	r25, X+
    42ee:	0d 90       	ld	r0, X+
    42f0:	bc 91       	ld	r27, X
    42f2:	a0 2d       	mov	r26, r0
    42f4:	49 81       	ldd	r20, Y+1	; 0x01
    42f6:	5a 81       	ldd	r21, Y+2	; 0x02
    42f8:	6b 81       	ldd	r22, Y+3	; 0x03
    42fa:	7c 81       	ldd	r23, Y+4	; 0x04
    42fc:	48 17       	cp	r20, r24
    42fe:	59 07       	cpc	r21, r25
    4300:	6a 07       	cpc	r22, r26
    4302:	7b 07       	cpc	r23, r27
    4304:	08 f4       	brcc	.+2      	; 0x4308 <_ZN10AlarmClass17updateNextTriggerEv+0x92>
    4306:	18 c1       	rjmp	.+560    	; 0x4538 <_ZN10AlarmClass17updateNextTriggerEv+0x2c2>
    {      
      if(Mode.alarmType == dtExplicitAlarm ) // is the value a specific date and time in the future
    4308:	22 30       	cpi	r18, 0x02	; 2
    430a:	59 f4       	brne	.+22     	; 0x4322 <_ZN10AlarmClass17updateNextTriggerEv+0xac>
      {
        nextTrigger = value;  // yes, trigger on this value   
    430c:	ed 81       	ldd	r30, Y+5	; 0x05
    430e:	fe 81       	ldd	r31, Y+6	; 0x06
    4310:	82 81       	ldd	r24, Z+2	; 0x02
    4312:	93 81       	ldd	r25, Z+3	; 0x03
    4314:	a4 81       	ldd	r26, Z+4	; 0x04
    4316:	b5 81       	ldd	r27, Z+5	; 0x05
    4318:	86 83       	std	Z+6, r24	; 0x06
    431a:	97 83       	std	Z+7, r25	; 0x07
    431c:	a0 87       	std	Z+8, r26	; 0x08
    431e:	b1 87       	std	Z+9, r27	; 0x09
    4320:	0b c1       	rjmp	.+534    	; 0x4538 <_ZN10AlarmClass17updateNextTriggerEv+0x2c2>
      }
      else if(Mode.alarmType == dtDailyAlarm)  //if this is a daily alarm
    4322:	23 30       	cpi	r18, 0x03	; 3
    4324:	09 f0       	breq	.+2      	; 0x4328 <_ZN10AlarmClass17updateNextTriggerEv+0xb2>
    4326:	61 c0       	rjmp	.+194    	; 0x43ea <_ZN10AlarmClass17updateNextTriggerEv+0x174>
      {
        if( value + previousMidnight(now()) <= time)
    4328:	ad 81       	ldd	r26, Y+5	; 0x05
    432a:	be 81       	ldd	r27, Y+6	; 0x06
    432c:	12 96       	adiw	r26, 0x02	; 2
    432e:	ed 90       	ld	r14, X+
    4330:	fd 90       	ld	r15, X+
    4332:	0d 91       	ld	r16, X+
    4334:	1c 91       	ld	r17, X
    4336:	15 97       	sbiw	r26, 0x05	; 5
    4338:	0e 94 37 20 	call	0x406e	; 0x406e <_Z3nowv>
    433c:	20 e8       	ldi	r18, 0x80	; 128
    433e:	31 e5       	ldi	r19, 0x51	; 81
    4340:	41 e0       	ldi	r20, 0x01	; 1
    4342:	50 e0       	ldi	r21, 0x00	; 0
    4344:	0e 94 59 3c 	call	0x78b2	; 0x78b2 <__udivmodsi4>
    4348:	ca 01       	movw	r24, r20
    434a:	b9 01       	movw	r22, r18
    434c:	20 e8       	ldi	r18, 0x80	; 128
    434e:	31 e5       	ldi	r19, 0x51	; 81
    4350:	41 e0       	ldi	r20, 0x01	; 1
    4352:	50 e0       	ldi	r21, 0x00	; 0
    4354:	0e 94 13 3c 	call	0x7826	; 0x7826 <__mulsi3>
    4358:	e6 0e       	add	r14, r22
    435a:	f7 1e       	adc	r15, r23
    435c:	08 1f       	adc	r16, r24
    435e:	19 1f       	adc	r17, r25
    4360:	ed 81       	ldd	r30, Y+5	; 0x05
    4362:	fe 81       	ldd	r31, Y+6	; 0x06
    4364:	a2 80       	ldd	r10, Z+2	; 0x02
    4366:	b3 80       	ldd	r11, Z+3	; 0x03
    4368:	c4 80       	ldd	r12, Z+4	; 0x04
    436a:	d5 80       	ldd	r13, Z+5	; 0x05
    436c:	29 81       	ldd	r18, Y+1	; 0x01
    436e:	3a 81       	ldd	r19, Y+2	; 0x02
    4370:	4b 81       	ldd	r20, Y+3	; 0x03
    4372:	5c 81       	ldd	r21, Y+4	; 0x04
    4374:	2e 15       	cp	r18, r14
    4376:	3f 05       	cpc	r19, r15
    4378:	40 07       	cpc	r20, r16
    437a:	51 07       	cpc	r21, r17
    437c:	c8 f0       	brcs	.+50     	; 0x43b0 <_ZN10AlarmClass17updateNextTriggerEv+0x13a>
        {
          nextTrigger = value + nextMidnight(time); // if time has passed then set for tomorrow
    437e:	ca 01       	movw	r24, r20
    4380:	b9 01       	movw	r22, r18
    4382:	20 e8       	ldi	r18, 0x80	; 128
    4384:	31 e5       	ldi	r19, 0x51	; 81
    4386:	41 e0       	ldi	r20, 0x01	; 1
    4388:	50 e0       	ldi	r21, 0x00	; 0
    438a:	0e 94 59 3c 	call	0x78b2	; 0x78b2 <__udivmodsi4>
    438e:	2f 5f       	subi	r18, 0xFF	; 255
    4390:	3f 4f       	sbci	r19, 0xFF	; 255
    4392:	4f 4f       	sbci	r20, 0xFF	; 255
    4394:	5f 4f       	sbci	r21, 0xFF	; 255
    4396:	ca 01       	movw	r24, r20
    4398:	b9 01       	movw	r22, r18
    439a:	20 e8       	ldi	r18, 0x80	; 128
    439c:	31 e5       	ldi	r19, 0x51	; 81
    439e:	41 e0       	ldi	r20, 0x01	; 1
    43a0:	50 e0       	ldi	r21, 0x00	; 0
    43a2:	0e 94 13 3c 	call	0x7826	; 0x7826 <__mulsi3>
    43a6:	a6 0e       	add	r10, r22
    43a8:	b7 1e       	adc	r11, r23
    43aa:	c8 1e       	adc	r12, r24
    43ac:	d9 1e       	adc	r13, r25
    43ae:	ac c0       	rjmp	.+344    	; 0x4508 <_ZN10AlarmClass17updateNextTriggerEv+0x292>
        }
        else
        {
          nextTrigger = value + previousMidnight(time);  // set the date to today and add the time given in value   
    43b0:	69 81       	ldd	r22, Y+1	; 0x01
    43b2:	7a 81       	ldd	r23, Y+2	; 0x02
    43b4:	8b 81       	ldd	r24, Y+3	; 0x03
    43b6:	9c 81       	ldd	r25, Y+4	; 0x04
    43b8:	20 e8       	ldi	r18, 0x80	; 128
    43ba:	31 e5       	ldi	r19, 0x51	; 81
    43bc:	41 e0       	ldi	r20, 0x01	; 1
    43be:	50 e0       	ldi	r21, 0x00	; 0
    43c0:	0e 94 59 3c 	call	0x78b2	; 0x78b2 <__udivmodsi4>
    43c4:	ca 01       	movw	r24, r20
    43c6:	b9 01       	movw	r22, r18
    43c8:	20 e8       	ldi	r18, 0x80	; 128
    43ca:	31 e5       	ldi	r19, 0x51	; 81
    43cc:	41 e0       	ldi	r20, 0x01	; 1
    43ce:	50 e0       	ldi	r21, 0x00	; 0
    43d0:	0e 94 13 3c 	call	0x7826	; 0x7826 <__mulsi3>
    43d4:	a6 0e       	add	r10, r22
    43d6:	b7 1e       	adc	r11, r23
    43d8:	c8 1e       	adc	r12, r24
    43da:	d9 1e       	adc	r13, r25
    43dc:	ed 81       	ldd	r30, Y+5	; 0x05
    43de:	fe 81       	ldd	r31, Y+6	; 0x06
    43e0:	a6 82       	std	Z+6, r10	; 0x06
    43e2:	b7 82       	std	Z+7, r11	; 0x07
    43e4:	c0 86       	std	Z+8, r12	; 0x08
    43e6:	d1 86       	std	Z+9, r13	; 0x09
    43e8:	a7 c0       	rjmp	.+334    	; 0x4538 <_ZN10AlarmClass17updateNextTriggerEv+0x2c2>
        }
      }
      else if(Mode.alarmType == dtWeeklyAlarm)  // if this is a weekly alarm
    43ea:	24 30       	cpi	r18, 0x04	; 4
    43ec:	09 f0       	breq	.+2      	; 0x43f0 <_ZN10AlarmClass17updateNextTriggerEv+0x17a>
    43ee:	a0 c0       	rjmp	.+320    	; 0x4530 <_ZN10AlarmClass17updateNextTriggerEv+0x2ba>
      {
        if( (value + previousSunday(now())) <= time)
    43f0:	ad 81       	ldd	r26, Y+5	; 0x05
    43f2:	be 81       	ldd	r27, Y+6	; 0x06
    43f4:	12 96       	adiw	r26, 0x02	; 2
    43f6:	6d 90       	ld	r6, X+
    43f8:	7d 90       	ld	r7, X+
    43fa:	8d 90       	ld	r8, X+
    43fc:	9c 90       	ld	r9, X
    43fe:	15 97       	sbiw	r26, 0x05	; 5
    4400:	0e 94 37 20 	call	0x406e	; 0x406e <_Z3nowv>
    4404:	7b 01       	movw	r14, r22
    4406:	8c 01       	movw	r16, r24
    4408:	0e 94 37 20 	call	0x406e	; 0x406e <_Z3nowv>
    440c:	5b 01       	movw	r10, r22
    440e:	6c 01       	movw	r12, r24
    4410:	0e 94 37 20 	call	0x406e	; 0x406e <_Z3nowv>
    4414:	1b 01       	movw	r2, r22
    4416:	2c 01       	movw	r4, r24
    4418:	e6 0c       	add	r14, r6
    441a:	f7 1c       	adc	r15, r7
    441c:	08 1d       	adc	r16, r8
    441e:	19 1d       	adc	r17, r9
    4420:	c6 01       	movw	r24, r12
    4422:	b5 01       	movw	r22, r10
    4424:	20 e8       	ldi	r18, 0x80	; 128
    4426:	31 e5       	ldi	r19, 0x51	; 81
    4428:	41 e0       	ldi	r20, 0x01	; 1
    442a:	50 e0       	ldi	r21, 0x00	; 0
    442c:	0e 94 59 3c 	call	0x78b2	; 0x78b2 <__udivmodsi4>
    4430:	e6 1a       	sub	r14, r22
    4432:	f7 0a       	sbc	r15, r23
    4434:	08 0b       	sbc	r16, r24
    4436:	19 0b       	sbc	r17, r25
    4438:	c2 01       	movw	r24, r4
    443a:	b1 01       	movw	r22, r2
    443c:	20 e8       	ldi	r18, 0x80	; 128
    443e:	31 e5       	ldi	r19, 0x51	; 81
    4440:	41 e0       	ldi	r20, 0x01	; 1
    4442:	50 e0       	ldi	r21, 0x00	; 0
    4444:	0e 94 59 3c 	call	0x78b2	; 0x78b2 <__udivmodsi4>
    4448:	2c 5f       	subi	r18, 0xFC	; 252
    444a:	3f 4f       	sbci	r19, 0xFF	; 255
    444c:	4f 4f       	sbci	r20, 0xFF	; 255
    444e:	5f 4f       	sbci	r21, 0xFF	; 255
    4450:	ca 01       	movw	r24, r20
    4452:	b9 01       	movw	r22, r18
    4454:	27 e0       	ldi	r18, 0x07	; 7
    4456:	30 e0       	ldi	r19, 0x00	; 0
    4458:	40 e0       	ldi	r20, 0x00	; 0
    445a:	50 e0       	ldi	r21, 0x00	; 0
    445c:	0e 94 59 3c 	call	0x78b2	; 0x78b2 <__udivmodsi4>
    4460:	20 e8       	ldi	r18, 0x80	; 128
    4462:	31 e5       	ldi	r19, 0x51	; 81
    4464:	41 e0       	ldi	r20, 0x01	; 1
    4466:	50 e0       	ldi	r21, 0x00	; 0
    4468:	0e 94 13 3c 	call	0x7826	; 0x7826 <__mulsi3>
    446c:	e6 1a       	sub	r14, r22
    446e:	f7 0a       	sbc	r15, r23
    4470:	08 0b       	sbc	r16, r24
    4472:	19 0b       	sbc	r17, r25
    4474:	ed 81       	ldd	r30, Y+5	; 0x05
    4476:	fe 81       	ldd	r31, Y+6	; 0x06
    4478:	a2 80       	ldd	r10, Z+2	; 0x02
    447a:	b3 80       	ldd	r11, Z+3	; 0x03
    447c:	c4 80       	ldd	r12, Z+4	; 0x04
    447e:	d5 80       	ldd	r13, Z+5	; 0x05
    4480:	29 81       	ldd	r18, Y+1	; 0x01
    4482:	3a 81       	ldd	r19, Y+2	; 0x02
    4484:	4b 81       	ldd	r20, Y+3	; 0x03
    4486:	5c 81       	ldd	r21, Y+4	; 0x04
    4488:	2e 15       	cp	r18, r14
    448a:	3f 05       	cpc	r19, r15
    448c:	40 07       	cpc	r20, r16
    448e:	51 07       	cpc	r21, r17
    4490:	08 f4       	brcc	.+2      	; 0x4494 <_ZN10AlarmClass17updateNextTriggerEv+0x21e>
    4492:	43 c0       	rjmp	.+134    	; 0x451a <_ZN10AlarmClass17updateNextTriggerEv+0x2a4>
        {
          nextTrigger = value + nextSunday(time); // if day has passed then set for the next week.
    4494:	40 e8       	ldi	r20, 0x80	; 128
    4496:	5a e3       	ldi	r21, 0x3A	; 58
    4498:	69 e0       	ldi	r22, 0x09	; 9
    449a:	70 e0       	ldi	r23, 0x00	; 0
    449c:	a4 0e       	add	r10, r20
    449e:	b5 1e       	adc	r11, r21
    44a0:	c6 1e       	adc	r12, r22
    44a2:	d7 1e       	adc	r13, r23
    44a4:	69 81       	ldd	r22, Y+1	; 0x01
    44a6:	7a 81       	ldd	r23, Y+2	; 0x02
    44a8:	8b 81       	ldd	r24, Y+3	; 0x03
    44aa:	9c 81       	ldd	r25, Y+4	; 0x04
    44ac:	a6 0e       	add	r10, r22
    44ae:	b7 1e       	adc	r11, r23
    44b0:	c8 1e       	adc	r12, r24
    44b2:	d9 1e       	adc	r13, r25
    44b4:	20 e8       	ldi	r18, 0x80	; 128
    44b6:	31 e5       	ldi	r19, 0x51	; 81
    44b8:	41 e0       	ldi	r20, 0x01	; 1
    44ba:	50 e0       	ldi	r21, 0x00	; 0
    44bc:	0e 94 59 3c 	call	0x78b2	; 0x78b2 <__udivmodsi4>
    44c0:	a6 1a       	sub	r10, r22
    44c2:	b7 0a       	sbc	r11, r23
    44c4:	c8 0a       	sbc	r12, r24
    44c6:	d9 0a       	sbc	r13, r25
    44c8:	69 81       	ldd	r22, Y+1	; 0x01
    44ca:	7a 81       	ldd	r23, Y+2	; 0x02
    44cc:	8b 81       	ldd	r24, Y+3	; 0x03
    44ce:	9c 81       	ldd	r25, Y+4	; 0x04
    44d0:	20 e8       	ldi	r18, 0x80	; 128
    44d2:	31 e5       	ldi	r19, 0x51	; 81
    44d4:	41 e0       	ldi	r20, 0x01	; 1
    44d6:	50 e0       	ldi	r21, 0x00	; 0
    44d8:	0e 94 59 3c 	call	0x78b2	; 0x78b2 <__udivmodsi4>
    44dc:	2c 5f       	subi	r18, 0xFC	; 252
    44de:	3f 4f       	sbci	r19, 0xFF	; 255
    44e0:	4f 4f       	sbci	r20, 0xFF	; 255
    44e2:	5f 4f       	sbci	r21, 0xFF	; 255
    44e4:	ca 01       	movw	r24, r20
    44e6:	b9 01       	movw	r22, r18
    44e8:	27 e0       	ldi	r18, 0x07	; 7
    44ea:	30 e0       	ldi	r19, 0x00	; 0
    44ec:	40 e0       	ldi	r20, 0x00	; 0
    44ee:	50 e0       	ldi	r21, 0x00	; 0
    44f0:	0e 94 59 3c 	call	0x78b2	; 0x78b2 <__udivmodsi4>
    44f4:	20 e8       	ldi	r18, 0x80	; 128
    44f6:	31 e5       	ldi	r19, 0x51	; 81
    44f8:	41 e0       	ldi	r20, 0x01	; 1
    44fa:	50 e0       	ldi	r21, 0x00	; 0
    44fc:	0e 94 13 3c 	call	0x7826	; 0x7826 <__mulsi3>
    4500:	a6 1a       	sub	r10, r22
    4502:	b7 0a       	sbc	r11, r23
    4504:	c8 0a       	sbc	r12, r24
    4506:	d9 0a       	sbc	r13, r25
    4508:	ad 81       	ldd	r26, Y+5	; 0x05
    450a:	be 81       	ldd	r27, Y+6	; 0x06
    450c:	16 96       	adiw	r26, 0x06	; 6
    450e:	ad 92       	st	X+, r10
    4510:	bd 92       	st	X+, r11
    4512:	cd 92       	st	X+, r12
    4514:	dc 92       	st	X, r13
    4516:	19 97       	sbiw	r26, 0x09	; 9
    4518:	0f c0       	rjmp	.+30     	; 0x4538 <_ZN10AlarmClass17updateNextTriggerEv+0x2c2>
        }
        else
        {
          nextTrigger = value + previousSunday(time);  // set the date to this week today and add the time given in value 
    451a:	29 81       	ldd	r18, Y+1	; 0x01
    451c:	3a 81       	ldd	r19, Y+2	; 0x02
    451e:	4b 81       	ldd	r20, Y+3	; 0x03
    4520:	5c 81       	ldd	r21, Y+4	; 0x04
    4522:	a2 0e       	add	r10, r18
    4524:	b3 1e       	adc	r11, r19
    4526:	c4 1e       	adc	r12, r20
    4528:	d5 1e       	adc	r13, r21
    452a:	ca 01       	movw	r24, r20
    452c:	b9 01       	movw	r22, r18
    452e:	c2 cf       	rjmp	.-124    	; 0x44b4 <_ZN10AlarmClass17updateNextTriggerEv+0x23e>
        } 
      }
      else  // its not a recognized alarm type - this should not happen 
      {
        Mode.isEnabled = 0;  // Disable the alarm
    4530:	3f 7e       	andi	r19, 0xEF	; 239
    4532:	ed 81       	ldd	r30, Y+5	; 0x05
    4534:	fe 81       	ldd	r31, Y+6	; 0x06
    4536:	32 87       	std	Z+10, r19	; 0x0a
      }	  
    }
    if( Mode.alarmType == dtTimer)
    4538:	ad 81       	ldd	r26, Y+5	; 0x05
    453a:	be 81       	ldd	r27, Y+6	; 0x06
    453c:	1a 96       	adiw	r26, 0x0a	; 10
    453e:	8c 91       	ld	r24, X
    4540:	1a 97       	sbiw	r26, 0x0a	; 10
    4542:	8f 70       	andi	r24, 0x0F	; 15
    4544:	81 30       	cpi	r24, 0x01	; 1
    4546:	e9 f4       	brne	.+58     	; 0x4582 <_ZN10AlarmClass17updateNextTriggerEv+0x30c>
    {
      // its a timer
      nextTrigger = time + value;  // add the value to previous time (this ensures delay always at least Value seconds)
    4548:	12 96       	adiw	r26, 0x02	; 2
    454a:	8d 91       	ld	r24, X+
    454c:	9d 91       	ld	r25, X+
    454e:	0d 90       	ld	r0, X+
    4550:	bc 91       	ld	r27, X
    4552:	a0 2d       	mov	r26, r0
    4554:	29 81       	ldd	r18, Y+1	; 0x01
    4556:	3a 81       	ldd	r19, Y+2	; 0x02
    4558:	4b 81       	ldd	r20, Y+3	; 0x03
    455a:	5c 81       	ldd	r21, Y+4	; 0x04
    455c:	82 0f       	add	r24, r18
    455e:	93 1f       	adc	r25, r19
    4560:	a4 1f       	adc	r26, r20
    4562:	b5 1f       	adc	r27, r21
    4564:	ed 81       	ldd	r30, Y+5	; 0x05
    4566:	fe 81       	ldd	r31, Y+6	; 0x06
    4568:	86 83       	std	Z+6, r24	; 0x06
    456a:	97 83       	std	Z+7, r25	; 0x07
    456c:	a0 87       	std	Z+8, r26	; 0x08
    456e:	b1 87       	std	Z+9, r27	; 0x09
    4570:	08 c0       	rjmp	.+16     	; 0x4582 <_ZN10AlarmClass17updateNextTriggerEv+0x30c>
    }
  }
  else
  {
    Mode.isEnabled = 0;  // Disable if the value is 0
    4572:	ad 81       	ldd	r26, Y+5	; 0x05
    4574:	be 81       	ldd	r27, Y+6	; 0x06
    4576:	1a 96       	adiw	r26, 0x0a	; 10
    4578:	8c 91       	ld	r24, X
    457a:	1a 97       	sbiw	r26, 0x0a	; 10
    457c:	8f 7e       	andi	r24, 0xEF	; 239
    457e:	1a 96       	adiw	r26, 0x0a	; 10
    4580:	8c 93       	st	X, r24
  }
}
    4582:	26 96       	adiw	r28, 0x06	; 6
    4584:	0f b6       	in	r0, 0x3f	; 63
    4586:	f8 94       	cli
    4588:	de bf       	out	0x3e, r29	; 62
    458a:	0f be       	out	0x3f, r0	; 63
    458c:	cd bf       	out	0x3d, r28	; 61
    458e:	cf 91       	pop	r28
    4590:	df 91       	pop	r29
    4592:	1f 91       	pop	r17
    4594:	0f 91       	pop	r16
    4596:	ff 90       	pop	r15
    4598:	ef 90       	pop	r14
    459a:	df 90       	pop	r13
    459c:	cf 90       	pop	r12
    459e:	bf 90       	pop	r11
    45a0:	af 90       	pop	r10
    45a2:	9f 90       	pop	r9
    45a4:	8f 90       	pop	r8
    45a6:	7f 90       	pop	r7
    45a8:	6f 90       	pop	r6
    45aa:	5f 90       	pop	r5
    45ac:	4f 90       	pop	r4
    45ae:	3f 90       	pop	r3
    45b0:	2f 90       	pop	r2
    45b2:	08 95       	ret

000045b4 <_ZN15TimeAlarmsClass6enableEh>:
    
    AlarmID_t TimeAlarmsClass::timerRepeat(const int H,  const int M,  const int S, OnTick_t onTickHandler){ // trigger after the given number of seconds continuously
         return create( AlarmHMS(H,M,S), onTickHandler, IS_REPEAT, dtTimer);
    }
    
    void TimeAlarmsClass::enable(AlarmID_t ID)
    45b4:	ac 01       	movw	r20, r24
     }
     
     // returns true if this id is allocated
     bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
     {
        return( ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated );
    45b6:	66 30       	cpi	r22, 0x06	; 6
    45b8:	98 f5       	brcc	.+102    	; 0x4620 <_ZN15TimeAlarmsClass6enableEh+0x6c>
    45ba:	70 e0       	ldi	r23, 0x00	; 0
    45bc:	8b e0       	ldi	r24, 0x0B	; 11
    45be:	90 e0       	ldi	r25, 0x00	; 0
    45c0:	68 9f       	mul	r22, r24
    45c2:	f0 01       	movw	r30, r0
    45c4:	69 9f       	mul	r22, r25
    45c6:	f0 0d       	add	r31, r0
    45c8:	78 9f       	mul	r23, r24
    45ca:	f0 0d       	add	r31, r0
    45cc:	11 24       	eor	r1, r1
    45ce:	e4 0f       	add	r30, r20
    45d0:	f5 1f       	adc	r31, r21
    45d2:	82 85       	ldd	r24, Z+10	; 0x0a
    45d4:	8f 70       	andi	r24, 0x0F	; 15
    45d6:	21 f1       	breq	.+72     	; 0x4620 <_ZN15TimeAlarmsClass6enableEh+0x6c>
    }
    
    void TimeAlarmsClass::enable(AlarmID_t ID)
    {
      if(isAllocated(ID)) {
        Alarm[ID].Mode.isEnabled = (Alarm[ID].value != 0) && (Alarm[ID].onTickHandler != 0) ;  // only enable if value is non zero and a tick handler has been set
    45d8:	82 81       	ldd	r24, Z+2	; 0x02
    45da:	93 81       	ldd	r25, Z+3	; 0x03
    45dc:	a4 81       	ldd	r26, Z+4	; 0x04
    45de:	b5 81       	ldd	r27, Z+5	; 0x05
    45e0:	00 97       	sbiw	r24, 0x00	; 0
    45e2:	a1 05       	cpc	r26, r1
    45e4:	b1 05       	cpc	r27, r1
    45e6:	11 f4       	brne	.+4      	; 0x45ec <_ZN15TimeAlarmsClass6enableEh+0x38>
    45e8:	20 e0       	ldi	r18, 0x00	; 0
    45ea:	06 c0       	rjmp	.+12     	; 0x45f8 <_ZN15TimeAlarmsClass6enableEh+0x44>
    45ec:	20 e0       	ldi	r18, 0x00	; 0
    45ee:	80 81       	ld	r24, Z
    45f0:	91 81       	ldd	r25, Z+1	; 0x01
    45f2:	89 2b       	or	r24, r25
    45f4:	09 f0       	breq	.+2      	; 0x45f8 <_ZN15TimeAlarmsClass6enableEh+0x44>
    45f6:	21 e0       	ldi	r18, 0x01	; 1
    45f8:	8b e0       	ldi	r24, 0x0B	; 11
    45fa:	90 e0       	ldi	r25, 0x00	; 0
    45fc:	68 9f       	mul	r22, r24
    45fe:	f0 01       	movw	r30, r0
    4600:	69 9f       	mul	r22, r25
    4602:	f0 0d       	add	r31, r0
    4604:	78 9f       	mul	r23, r24
    4606:	f0 0d       	add	r31, r0
    4608:	11 24       	eor	r1, r1
    460a:	e4 0f       	add	r30, r20
    460c:	f5 1f       	adc	r31, r21
    460e:	22 95       	swap	r18
    4610:	20 7f       	andi	r18, 0xF0	; 240
    4612:	82 85       	ldd	r24, Z+10	; 0x0a
    4614:	8f 7e       	andi	r24, 0xEF	; 239
    4616:	82 2b       	or	r24, r18
    4618:	82 87       	std	Z+10, r24	; 0x0a
        Alarm[ID].updateNextTrigger(); // trigger is updated whenever  this is called, even if already enabled	 
    461a:	cf 01       	movw	r24, r30
    461c:	0e 94 3b 21 	call	0x4276	; 0x4276 <_ZN10AlarmClass17updateNextTriggerEv>
    4620:	08 95       	ret

00004622 <_ZN15TimeAlarmsClass13serviceAlarmsEv>:
    }
    
    //***********************************************************
    //* Private Methods
    
    void TimeAlarmsClass::serviceAlarms()
    4622:	cf 92       	push	r12
    4624:	df 92       	push	r13
    4626:	ef 92       	push	r14
    4628:	ff 92       	push	r15
    462a:	0f 93       	push	r16
    462c:	1f 93       	push	r17
    462e:	cf 93       	push	r28
    4630:	df 93       	push	r29
    4632:	ec 01       	movw	r28, r24
    {
      if(! isServicing)
    4634:	fc 01       	movw	r30, r24
    4636:	ee 5b       	subi	r30, 0xBE	; 190
    4638:	ff 4f       	sbci	r31, 0xFF	; 255
    463a:	80 81       	ld	r24, Z
    463c:	88 23       	and	r24, r24
    463e:	09 f0       	breq	.+2      	; 0x4642 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0x20>
    4640:	5b c0       	rjmp	.+182    	; 0x46f8 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xd6>
      {
        isServicing = true;
    4642:	81 e0       	ldi	r24, 0x01	; 1
    4644:	80 83       	st	Z, r24
        for( servicedAlarmId = 0; servicedAlarmId < dtNBR_ALARMS; servicedAlarmId++)
    4646:	fe 01       	movw	r30, r28
    4648:	ed 5b       	subi	r30, 0xBD	; 189
    464a:	ff 4f       	sbci	r31, 0xFF	; 255
    464c:	10 82       	st	Z, r1
    464e:	8f 01       	movw	r16, r30
        {
          if( Alarm[servicedAlarmId].Mode.isEnabled && (now() >= Alarm[servicedAlarmId].nextTrigger)  )
    4650:	9b e0       	ldi	r25, 0x0B	; 11
    4652:	c9 2e       	mov	r12, r25
    4654:	d1 2c       	mov	r13, r1
    4656:	48 c0       	rjmp	.+144    	; 0x46e8 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xc6>
    4658:	90 e0       	ldi	r25, 0x00	; 0
    465a:	8c 9d       	mul	r24, r12
    465c:	f0 01       	movw	r30, r0
    465e:	8d 9d       	mul	r24, r13
    4660:	f0 0d       	add	r31, r0
    4662:	9c 9d       	mul	r25, r12
    4664:	f0 0d       	add	r31, r0
    4666:	11 24       	eor	r1, r1
    4668:	ec 0f       	add	r30, r28
    466a:	fd 1f       	adc	r31, r29
    466c:	82 85       	ldd	r24, Z+10	; 0x0a
    466e:	84 ff       	sbrs	r24, 4
    4670:	37 c0       	rjmp	.+110    	; 0x46e0 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xbe>
    4672:	0e 94 37 20 	call	0x406e	; 0x406e <_Z3nowv>
    4676:	f8 01       	movw	r30, r16
    4678:	a0 81       	ld	r26, Z
    467a:	2a 2f       	mov	r18, r26
    467c:	30 e0       	ldi	r19, 0x00	; 0
    467e:	2c 9d       	mul	r18, r12
    4680:	f0 01       	movw	r30, r0
    4682:	2d 9d       	mul	r18, r13
    4684:	f0 0d       	add	r31, r0
    4686:	3c 9d       	mul	r19, r12
    4688:	f0 0d       	add	r31, r0
    468a:	11 24       	eor	r1, r1
    468c:	ec 0f       	add	r30, r28
    468e:	fd 1f       	adc	r31, r29
    4690:	26 81       	ldd	r18, Z+6	; 0x06
    4692:	37 81       	ldd	r19, Z+7	; 0x07
    4694:	40 85       	ldd	r20, Z+8	; 0x08
    4696:	51 85       	ldd	r21, Z+9	; 0x09
    4698:	62 17       	cp	r22, r18
    469a:	73 07       	cpc	r23, r19
    469c:	84 07       	cpc	r24, r20
    469e:	95 07       	cpc	r25, r21
    46a0:	f8 f0       	brcs	.+62     	; 0x46e0 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xbe>
          {
            OnTick_t TickHandler = Alarm[servicedAlarmId].onTickHandler;
    46a2:	e0 80       	ld	r14, Z
    46a4:	f1 80       	ldd	r15, Z+1	; 0x01
            if(Alarm[servicedAlarmId].Mode.isOneShot)
    46a6:	92 85       	ldd	r25, Z+10	; 0x0a
    46a8:	95 ff       	sbrs	r25, 5
    46aa:	12 c0       	rjmp	.+36     	; 0x46d0 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xae>
     }
     
     // returns true if this id is allocated
     bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
     {
        return( ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated );
    46ac:	a6 30       	cpi	r26, 0x06	; 6
    46ae:	98 f4       	brcc	.+38     	; 0x46d6 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xb4>
    46b0:	89 2f       	mov	r24, r25
    46b2:	8f 70       	andi	r24, 0x0F	; 15
    46b4:	81 f0       	breq	.+32     	; 0x46d6 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xb4>
    void TimeAlarmsClass::free(AlarmID_t ID)
    {
      if(isAllocated(ID))
      {
        Alarm[ID].Mode.isEnabled = false;
    	Alarm[ID].Mode.alarmType = dtNotAllocated;
    46b6:	90 7e       	andi	r25, 0xE0	; 224
    46b8:	92 87       	std	Z+10, r25	; 0x0a
        Alarm[ID].onTickHandler = 0;
    46ba:	11 82       	std	Z+1, r1	; 0x01
    46bc:	10 82       	st	Z, r1
    	Alarm[ID].value = 0;
    46be:	12 82       	std	Z+2, r1	; 0x02
    46c0:	13 82       	std	Z+3, r1	; 0x03
    46c2:	14 82       	std	Z+4, r1	; 0x04
    46c4:	15 82       	std	Z+5, r1	; 0x05
    	Alarm[ID].nextTrigger = 0;   	
    46c6:	16 82       	std	Z+6, r1	; 0x06
    46c8:	17 82       	std	Z+7, r1	; 0x07
    46ca:	10 86       	std	Z+8, r1	; 0x08
    46cc:	11 86       	std	Z+9, r1	; 0x09
    46ce:	03 c0       	rjmp	.+6      	; 0x46d6 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xb4>
          {
            OnTick_t TickHandler = Alarm[servicedAlarmId].onTickHandler;
            if(Alarm[servicedAlarmId].Mode.isOneShot)
               free(servicedAlarmId);  // free the ID if mode is OnShot		
            else   
               Alarm[servicedAlarmId].updateNextTrigger();
    46d0:	cf 01       	movw	r24, r30
    46d2:	0e 94 3b 21 	call	0x4276	; 0x4276 <_ZN10AlarmClass17updateNextTriggerEv>
            if( TickHandler != NULL) {        
    46d6:	e1 14       	cp	r14, r1
    46d8:	f1 04       	cpc	r15, r1
    46da:	11 f0       	breq	.+4      	; 0x46e0 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xbe>
              (*TickHandler)();     // call the handler  
    46dc:	f7 01       	movw	r30, r14
    46de:	09 95       	icall
    void TimeAlarmsClass::serviceAlarms()
    {
      if(! isServicing)
      {
        isServicing = true;
        for( servicedAlarmId = 0; servicedAlarmId < dtNBR_ALARMS; servicedAlarmId++)
    46e0:	f8 01       	movw	r30, r16
    46e2:	80 81       	ld	r24, Z
    46e4:	8f 5f       	subi	r24, 0xFF	; 255
    46e6:	80 83       	st	Z, r24
    46e8:	f8 01       	movw	r30, r16
    46ea:	80 81       	ld	r24, Z
    46ec:	86 30       	cpi	r24, 0x06	; 6
    46ee:	08 f4       	brcc	.+2      	; 0x46f2 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xd0>
    46f0:	b3 cf       	rjmp	.-154    	; 0x4658 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0x36>
            if( TickHandler != NULL) {        
              (*TickHandler)();     // call the handler  
            }
          }
        }
        isServicing = false;
    46f2:	ce 5b       	subi	r28, 0xBE	; 190
    46f4:	df 4f       	sbci	r29, 0xFF	; 255
    46f6:	18 82       	st	Y, r1
      }
    }
    46f8:	df 91       	pop	r29
    46fa:	cf 91       	pop	r28
    46fc:	1f 91       	pop	r17
    46fe:	0f 91       	pop	r16
    4700:	ff 90       	pop	r15
    4702:	ef 90       	pop	r14
    4704:	df 90       	pop	r13
    4706:	cf 90       	pop	r12
    4708:	08 95       	ret

0000470a <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th>:
    	}
        return nextTrigger == 0xffffffff ? 0 : nextTrigger;  	
     }
    
    // attempt to create an alarm and return true if successful
    AlarmID_t TimeAlarmsClass::create( time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType, uint8_t isEnabled) 
    470a:	4f 92       	push	r4
    470c:	5f 92       	push	r5
    470e:	6f 92       	push	r6
    4710:	7f 92       	push	r7
    4712:	8f 92       	push	r8
    4714:	9f 92       	push	r9
    4716:	af 92       	push	r10
    4718:	bf 92       	push	r11
    471a:	cf 92       	push	r12
    471c:	ef 92       	push	r14
    471e:	ff 92       	push	r15
    4720:	0f 93       	push	r16
    4722:	1f 93       	push	r17
    4724:	cf 93       	push	r28
    4726:	df 93       	push	r29
    4728:	2c 01       	movw	r4, r24
    472a:	4a 01       	movw	r8, r20
    472c:	5b 01       	movw	r10, r22
    472e:	39 01       	movw	r6, r18
    4730:	e7 01       	movw	r28, r14
    {
      if( ! (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR)) // only create alarm ids if the time is at least Jan 1 1971
    4732:	c7 01       	movw	r24, r14
    4734:	02 97       	sbiw	r24, 0x02	; 2
    4736:	03 97       	sbiw	r24, 0x03	; 3
    4738:	38 f4       	brcc	.+14     	; 0x4748 <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0x3e>
    473a:	0e 94 37 20 	call	0x406e	; 0x406e <_Z3nowv>
    473e:	60 50       	subi	r22, 0x00	; 0
    4740:	72 4e       	sbci	r23, 0xE2	; 226
    4742:	8f 4d       	sbci	r24, 0xDF	; 223
    4744:	91 40       	sbci	r25, 0x01	; 1
    4746:	c0 f1       	brcs	.+112    	; 0x47b8 <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xae>
    4748:	60 e0       	ldi	r22, 0x00	; 0
    474a:	70 e0       	ldi	r23, 0x00	; 0
      {  
    	for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
        {
          if( Alarm[id].Mode.alarmType == dtNotAllocated )
    474c:	2b e0       	ldi	r18, 0x0B	; 11
    474e:	30 e0       	ldi	r19, 0x00	; 0
     }
    
    // attempt to create an alarm and return true if successful
    AlarmID_t TimeAlarmsClass::create( time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType, uint8_t isEnabled) 
    {
      if( ! (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR)) // only create alarm ids if the time is at least Jan 1 1971
    4750:	16 2f       	mov	r17, r22
      {  
    	for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
        {
          if( Alarm[id].Mode.alarmType == dtNotAllocated )
    4752:	62 9f       	mul	r22, r18
    4754:	f0 01       	movw	r30, r0
    4756:	63 9f       	mul	r22, r19
    4758:	f0 0d       	add	r31, r0
    475a:	72 9f       	mul	r23, r18
    475c:	f0 0d       	add	r31, r0
    475e:	11 24       	eor	r1, r1
    4760:	e4 0d       	add	r30, r4
    4762:	f5 1d       	adc	r31, r5
    4764:	df 01       	movw	r26, r30
    4766:	1a 96       	adiw	r26, 0x0a	; 10
    4768:	82 85       	ldd	r24, Z+10	; 0x0a
    476a:	8f 70       	andi	r24, 0x0F	; 15
    476c:	01 f5       	brne	.+64     	; 0x47ae <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xa4>
    	  {
    	  // here if there is an Alarm id that is not allocated
      	    Alarm[id].onTickHandler = onTickHandler;
    476e:	71 82       	std	Z+1, r7	; 0x01
    4770:	60 82       	st	Z, r6
    	    Alarm[id].Mode.isOneShot = isOneShot;
    4772:	01 70       	andi	r16, 0x01	; 1
    4774:	02 95       	swap	r16
    4776:	00 0f       	add	r16, r16
    4778:	00 7e       	andi	r16, 0xE0	; 224
    477a:	8c 91       	ld	r24, X
    477c:	80 7d       	andi	r24, 0xD0	; 208
    	    Alarm[id].Mode.alarmType = alarmType;
    477e:	9e 01       	movw	r18, r28
    4780:	2f 70       	andi	r18, 0x0F	; 15
    4782:	80 2b       	or	r24, r16
    4784:	82 2b       	or	r24, r18
    4786:	8c 93       	st	X, r24
    	    Alarm[id].value = value;
    4788:	82 82       	std	Z+2, r8	; 0x02
    478a:	93 82       	std	Z+3, r9	; 0x03
    478c:	a4 82       	std	Z+4, r10	; 0x04
    478e:	b5 82       	std	Z+5, r11	; 0x05
    	    isEnabled ?  enable(id) : disable(id);   
    4790:	cc 20       	and	r12, r12
    4792:	21 f0       	breq	.+8      	; 0x479c <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0x92>
    4794:	c2 01       	movw	r24, r4
    4796:	0e 94 da 22 	call	0x45b4	; 0x45b4 <_ZN15TimeAlarmsClass6enableEh>
    479a:	0f c0       	rjmp	.+30     	; 0x47ba <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xb0>
     }
     
     // returns true if this id is allocated
     bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
     {
        return( ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated );
    479c:	66 30       	cpi	r22, 0x06	; 6
    479e:	68 f4       	brcc	.+26     	; 0x47ba <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xb0>
    47a0:	9c 91       	ld	r25, X
    47a2:	89 2f       	mov	r24, r25
    47a4:	8f 70       	andi	r24, 0x0F	; 15
    47a6:	49 f0       	breq	.+18     	; 0x47ba <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xb0>
    }
    
    void TimeAlarmsClass::disable(AlarmID_t ID)
    {
      if(isAllocated(ID))
        Alarm[ID].Mode.isEnabled = false;
    47a8:	9f 7e       	andi	r25, 0xEF	; 239
    47aa:	9c 93       	st	X, r25
    47ac:	06 c0       	rjmp	.+12     	; 0x47ba <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xb0>
    47ae:	6f 5f       	subi	r22, 0xFF	; 255
    47b0:	7f 4f       	sbci	r23, 0xFF	; 255
    // attempt to create an alarm and return true if successful
    AlarmID_t TimeAlarmsClass::create( time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType, uint8_t isEnabled) 
    {
      if( ! (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR)) // only create alarm ids if the time is at least Jan 1 1971
      {  
    	for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
    47b2:	66 30       	cpi	r22, 0x06	; 6
    47b4:	71 05       	cpc	r23, r1
    47b6:	61 f6       	brne	.-104    	; 0x4750 <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0x46>
    47b8:	1f ef       	ldi	r17, 0xFF	; 255
            return id;  // alarm created ok
    	  }  
        }
      }
      return dtINVALID_ALARM_ID; // no IDs available or time is invalid
    }
    47ba:	81 2f       	mov	r24, r17
    47bc:	df 91       	pop	r29
    47be:	cf 91       	pop	r28
    47c0:	1f 91       	pop	r17
    47c2:	0f 91       	pop	r16
    47c4:	ff 90       	pop	r15
    47c6:	ef 90       	pop	r14
    47c8:	cf 90       	pop	r12
    47ca:	bf 90       	pop	r11
    47cc:	af 90       	pop	r10
    47ce:	9f 90       	pop	r9
    47d0:	8f 90       	pop	r8
    47d2:	7f 90       	pop	r7
    47d4:	6f 90       	pop	r6
    47d6:	5f 90       	pop	r5
    47d8:	4f 90       	pop	r4
    47da:	08 95       	ret

000047dc <_ZN15TimeAlarmsClass11timerRepeatEmPFvvE>:
    
    AlarmID_t TimeAlarmsClass::timerOnce(const int H,  const int M,  const int S, OnTick_t onTickHandler){   // As above with HMS arguments
      return create( AlarmHMS(H,M,S), onTickHandler, IS_ONESHOT, dtTimer );
    }
      
    AlarmID_t TimeAlarmsClass::timerRepeat(time_t value, OnTick_t onTickHandler){ // trigger after the given number of seconds continuously
    47dc:	cf 92       	push	r12
    47de:	ef 92       	push	r14
    47e0:	ff 92       	push	r15
    47e2:	0f 93       	push	r16
         return create( value, onTickHandler, IS_REPEAT, dtTimer);
    47e4:	00 e0       	ldi	r16, 0x00	; 0
    47e6:	f1 e0       	ldi	r31, 0x01	; 1
    47e8:	ef 2e       	mov	r14, r31
    47ea:	f1 2c       	mov	r15, r1
    47ec:	cc 24       	eor	r12, r12
    47ee:	c3 94       	inc	r12
    47f0:	0e 94 85 23 	call	0x470a	; 0x470a <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th>
    }
    47f4:	0f 91       	pop	r16
    47f6:	ff 90       	pop	r15
    47f8:	ef 90       	pop	r14
    47fa:	cf 90       	pop	r12
    47fc:	08 95       	ret

000047fe <_ZN15TimeAlarmsClass11alarmRepeatEiiiPFvvE>:
       return create( value, onTickHandler, IS_REPEAT, dtDailyAlarm );
    else
       return dtINVALID_ALARM_ID; // dont't allocate if the time is greater than one day 	  
    }
    
    AlarmID_t TimeAlarmsClass::alarmRepeat(const int H,  const int M,  const int S, OnTick_t onTickHandler){ // as above with HMS arguments
    47fe:	2f 92       	push	r2
    4800:	3f 92       	push	r3
    4802:	4f 92       	push	r4
    4804:	5f 92       	push	r5
    4806:	6f 92       	push	r6
    4808:	7f 92       	push	r7
    480a:	8f 92       	push	r8
    480c:	9f 92       	push	r9
    480e:	af 92       	push	r10
    4810:	bf 92       	push	r11
    4812:	cf 92       	push	r12
    4814:	df 92       	push	r13
    4816:	ef 92       	push	r14
    4818:	ff 92       	push	r15
    481a:	0f 93       	push	r16
    481c:	1f 93       	push	r17
    481e:	1c 01       	movw	r2, r24
    4820:	2b 01       	movw	r4, r22
    4822:	49 01       	movw	r8, r18
         return create( AlarmHMS(H,M,S), onTickHandler, IS_REPEAT, dtDailyAlarm );
    4824:	66 27       	eor	r22, r22
    4826:	57 fd       	sbrc	r21, 7
    4828:	60 95       	com	r22
    482a:	76 2f       	mov	r23, r22
    482c:	cb 01       	movw	r24, r22
    482e:	ba 01       	movw	r22, r20
    4830:	2c e3       	ldi	r18, 0x3C	; 60
    4832:	30 e0       	ldi	r19, 0x00	; 0
    4834:	40 e0       	ldi	r20, 0x00	; 0
    4836:	50 e0       	ldi	r21, 0x00	; 0
    4838:	0e 94 13 3c 	call	0x7826	; 0x7826 <__mulsi3>
    483c:	6b 01       	movw	r12, r22
    483e:	7c 01       	movw	r14, r24
    4840:	aa 24       	eor	r10, r10
    4842:	97 fc       	sbrc	r9, 7
    4844:	a0 94       	com	r10
    4846:	ba 2c       	mov	r11, r10
    4848:	c8 0c       	add	r12, r8
    484a:	d9 1c       	adc	r13, r9
    484c:	ea 1c       	adc	r14, r10
    484e:	fb 1c       	adc	r15, r11
    4850:	66 24       	eor	r6, r6
    4852:	57 fc       	sbrc	r5, 7
    4854:	60 94       	com	r6
    4856:	76 2c       	mov	r7, r6
    4858:	c3 01       	movw	r24, r6
    485a:	b2 01       	movw	r22, r4
    485c:	20 e1       	ldi	r18, 0x10	; 16
    485e:	3e e0       	ldi	r19, 0x0E	; 14
    4860:	40 e0       	ldi	r20, 0x00	; 0
    4862:	50 e0       	ldi	r21, 0x00	; 0
    4864:	0e 94 13 3c 	call	0x7826	; 0x7826 <__mulsi3>
    4868:	c6 0e       	add	r12, r22
    486a:	d7 1e       	adc	r13, r23
    486c:	e8 1e       	adc	r14, r24
    486e:	f9 1e       	adc	r15, r25
    4870:	c1 01       	movw	r24, r2
    4872:	b7 01       	movw	r22, r14
    4874:	a6 01       	movw	r20, r12
    4876:	98 01       	movw	r18, r16
    4878:	00 e0       	ldi	r16, 0x00	; 0
    487a:	e3 e0       	ldi	r30, 0x03	; 3
    487c:	ee 2e       	mov	r14, r30
    487e:	f1 2c       	mov	r15, r1
    4880:	cc 24       	eor	r12, r12
    4882:	c3 94       	inc	r12
    4884:	0e 94 85 23 	call	0x470a	; 0x470a <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th>
    }
    4888:	1f 91       	pop	r17
    488a:	0f 91       	pop	r16
    488c:	ff 90       	pop	r15
    488e:	ef 90       	pop	r14
    4890:	df 90       	pop	r13
    4892:	cf 90       	pop	r12
    4894:	bf 90       	pop	r11
    4896:	af 90       	pop	r10
    4898:	9f 90       	pop	r9
    489a:	8f 90       	pop	r8
    489c:	7f 90       	pop	r7
    489e:	6f 90       	pop	r6
    48a0:	5f 90       	pop	r5
    48a2:	4f 90       	pop	r4
    48a4:	3f 90       	pop	r3
    48a6:	2f 90       	pop	r2
    48a8:	08 95       	ret

000048aa <_ZN15TimeAlarmsClass5delayEm>:
      else
         return dtINVALID_ALARM_ID; // valid ids only available when servicing a callback
    }
     
    // following functions are not Alarm ID specific.
    void TimeAlarmsClass::delay(unsigned long ms)
    48aa:	af 92       	push	r10
    48ac:	bf 92       	push	r11
    48ae:	cf 92       	push	r12
    48b0:	df 92       	push	r13
    48b2:	ef 92       	push	r14
    48b4:	ff 92       	push	r15
    48b6:	0f 93       	push	r16
    48b8:	1f 93       	push	r17
    48ba:	cf 93       	push	r28
    48bc:	df 93       	push	r29
    48be:	ec 01       	movw	r28, r24
    48c0:	5a 01       	movw	r10, r20
    48c2:	6b 01       	movw	r12, r22
    {
      unsigned long start = millis();
    48c4:	0e 94 61 2f 	call	0x5ec2	; 0x5ec2 <millis>
    48c8:	7b 01       	movw	r14, r22
    48ca:	8c 01       	movw	r16, r24
    48cc:	03 c0       	rjmp	.+6      	; 0x48d4 <_ZN15TimeAlarmsClass5delayEm+0x2a>
      while( millis() - start  <= ms)
        serviceAlarms();
    48ce:	ce 01       	movw	r24, r28
    48d0:	0e 94 11 23 	call	0x4622	; 0x4622 <_ZN15TimeAlarmsClass13serviceAlarmsEv>
     
    // following functions are not Alarm ID specific.
    void TimeAlarmsClass::delay(unsigned long ms)
    {
      unsigned long start = millis();
      while( millis() - start  <= ms)
    48d4:	0e 94 61 2f 	call	0x5ec2	; 0x5ec2 <millis>
    48d8:	6e 19       	sub	r22, r14
    48da:	7f 09       	sbc	r23, r15
    48dc:	80 0b       	sbc	r24, r16
    48de:	91 0b       	sbc	r25, r17
    48e0:	a6 16       	cp	r10, r22
    48e2:	b7 06       	cpc	r11, r23
    48e4:	c8 06       	cpc	r12, r24
    48e6:	d9 06       	cpc	r13, r25
    48e8:	90 f7       	brcc	.-28     	; 0x48ce <_ZN15TimeAlarmsClass5delayEm+0x24>
        serviceAlarms();
    }
    48ea:	df 91       	pop	r29
    48ec:	cf 91       	pop	r28
    48ee:	1f 91       	pop	r17
    48f0:	0f 91       	pop	r16
    48f2:	ff 90       	pop	r15
    48f4:	ef 90       	pop	r14
    48f6:	df 90       	pop	r13
    48f8:	cf 90       	pop	r12
    48fa:	bf 90       	pop	r11
    48fc:	af 90       	pop	r10
    48fe:	08 95       	ret

00004900 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    4900:	81 e0       	ldi	r24, 0x01	; 1
    4902:	80 93 b2 03 	sts	0x03B2, r24
  // set address of targeted slave
  txAddress = address;
    4906:	60 93 8f 03 	sts	0x038F, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    490a:	10 92 b0 03 	sts	0x03B0, r1
  txBufferLength = 0;
    490e:	10 92 b1 03 	sts	0x03B1, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
    4912:	08 95       	ret

00004914 <_ZN7TwoWire9availableEv>:
}

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
    4914:	20 91 8e 03 	lds	r18, 0x038E
    4918:	30 e0       	ldi	r19, 0x00	; 0
    491a:	80 91 8d 03 	lds	r24, 0x038D
    491e:	28 1b       	sub	r18, r24
    4920:	31 09       	sbc	r19, r1
{
  return rxBufferLength - rxBufferIndex;
}
    4922:	c9 01       	movw	r24, r18
    4924:	08 95       	ret

00004926 <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    4926:	40 91 8d 03 	lds	r20, 0x038D
    492a:	80 91 8e 03 	lds	r24, 0x038E
    492e:	48 17       	cp	r20, r24
    4930:	18 f0       	brcs	.+6      	; 0x4938 <_ZN7TwoWire4readEv+0x12>
    4932:	2f ef       	ldi	r18, 0xFF	; 255
    4934:	3f ef       	ldi	r19, 0xFF	; 255
    4936:	0a c0       	rjmp	.+20     	; 0x494c <_ZN7TwoWire4readEv+0x26>
    value = rxBuffer[rxBufferIndex];
    4938:	e4 2f       	mov	r30, r20
    493a:	f0 e0       	ldi	r31, 0x00	; 0
    493c:	e3 59       	subi	r30, 0x93	; 147
    493e:	fc 4f       	sbci	r31, 0xFC	; 252
    4940:	80 81       	ld	r24, Z
    4942:	28 2f       	mov	r18, r24
    4944:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    4946:	4f 5f       	subi	r20, 0xFF	; 255
    4948:	40 93 8d 03 	sts	0x038D, r20
  }

  return value;
}
    494c:	c9 01       	movw	r24, r18
    494e:	08 95       	ret

00004950 <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    4950:	e0 91 8d 03 	lds	r30, 0x038D
    4954:	80 91 8e 03 	lds	r24, 0x038E
    4958:	e8 17       	cp	r30, r24
    495a:	18 f0       	brcs	.+6      	; 0x4962 <_ZN7TwoWire4peekEv+0x12>
    495c:	ef ef       	ldi	r30, 0xFF	; 255
    495e:	ff ef       	ldi	r31, 0xFF	; 255
    4960:	06 c0       	rjmp	.+12     	; 0x496e <_ZN7TwoWire4peekEv+0x1e>
    value = rxBuffer[rxBufferIndex];
    4962:	f0 e0       	ldi	r31, 0x00	; 0
    4964:	e3 59       	subi	r30, 0x93	; 147
    4966:	fc 4f       	sbci	r31, 0xFC	; 252
    4968:	80 81       	ld	r24, Z
    496a:	e8 2f       	mov	r30, r24
    496c:	f0 e0       	ldi	r31, 0x00	; 0
  }

  return value;
}
    496e:	cf 01       	movw	r24, r30
    4970:	08 95       	ret

00004972 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    4972:	08 95       	ret

00004974 <_GLOBAL__I__ZN7TwoWire8rxBufferE>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    4974:	10 92 b6 03 	sts	0x03B6, r1
    4978:	10 92 b5 03 	sts	0x03B5, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    497c:	88 ee       	ldi	r24, 0xE8	; 232
    497e:	93 e0       	ldi	r25, 0x03	; 3
    4980:	a0 e0       	ldi	r26, 0x00	; 0
    4982:	b0 e0       	ldi	r27, 0x00	; 0
    4984:	80 93 b7 03 	sts	0x03B7, r24
    4988:	90 93 b8 03 	sts	0x03B8, r25
    498c:	a0 93 b9 03 	sts	0x03B9, r26
    4990:	b0 93 ba 03 	sts	0x03BA, r27
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    4994:	84 ed       	ldi	r24, 0xD4	; 212
    4996:	91 e0       	ldi	r25, 0x01	; 1
    4998:	90 93 b4 03 	sts	0x03B4, r25
    499c:	80 93 b3 03 	sts	0x03B3, r24
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    49a0:	08 95       	ret

000049a2 <_ZN7TwoWire5writeEPKhj>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
    49a2:	cf 92       	push	r12
    49a4:	df 92       	push	r13
    49a6:	ef 92       	push	r14
    49a8:	ff 92       	push	r15
    49aa:	0f 93       	push	r16
    49ac:	1f 93       	push	r17
    49ae:	cf 93       	push	r28
    49b0:	df 93       	push	r29
    49b2:	7c 01       	movw	r14, r24
    49b4:	6b 01       	movw	r12, r22
    49b6:	8a 01       	movw	r16, r20
{
  if(transmitting){
    49b8:	80 91 b2 03 	lds	r24, 0x03B2
    49bc:	88 23       	and	r24, r24
    49be:	a1 f0       	breq	.+40     	; 0x49e8 <_ZN7TwoWire5writeEPKhj+0x46>
    49c0:	c0 e0       	ldi	r28, 0x00	; 0
    49c2:	d0 e0       	ldi	r29, 0x00	; 0
    49c4:	0d c0       	rjmp	.+26     	; 0x49e0 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
      write(data[i]);
    49c6:	d7 01       	movw	r26, r14
    49c8:	ed 91       	ld	r30, X+
    49ca:	fc 91       	ld	r31, X
    49cc:	d6 01       	movw	r26, r12
    49ce:	ac 0f       	add	r26, r28
    49d0:	bd 1f       	adc	r27, r29
    49d2:	01 90       	ld	r0, Z+
    49d4:	f0 81       	ld	r31, Z
    49d6:	e0 2d       	mov	r30, r0
    49d8:	c7 01       	movw	r24, r14
    49da:	6c 91       	ld	r22, X
    49dc:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    49de:	21 96       	adiw	r28, 0x01	; 1
    49e0:	c0 17       	cp	r28, r16
    49e2:	d1 07       	cpc	r29, r17
    49e4:	80 f3       	brcs	.-32     	; 0x49c6 <_ZN7TwoWire5writeEPKhj+0x24>
    49e6:	04 c0       	rjmp	.+8      	; 0x49f0 <_ZN7TwoWire5writeEPKhj+0x4e>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    49e8:	cb 01       	movw	r24, r22
    49ea:	64 2f       	mov	r22, r20
    49ec:	0e 94 03 26 	call	0x4c06	; 0x4c06 <twi_transmit>
  }
  return quantity;
}
    49f0:	c8 01       	movw	r24, r16
    49f2:	df 91       	pop	r29
    49f4:	cf 91       	pop	r28
    49f6:	1f 91       	pop	r17
    49f8:	0f 91       	pop	r16
    49fa:	ff 90       	pop	r15
    49fc:	ef 90       	pop	r14
    49fe:	df 90       	pop	r13
    4a00:	cf 90       	pop	r12
    4a02:	08 95       	ret

00004a04 <_ZN7TwoWire5writeEh>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
    4a04:	df 93       	push	r29
    4a06:	cf 93       	push	r28
    4a08:	0f 92       	push	r0
    4a0a:	cd b7       	in	r28, 0x3d	; 61
    4a0c:	de b7       	in	r29, 0x3e	; 62
    4a0e:	fc 01       	movw	r30, r24
    4a10:	69 83       	std	Y+1, r22	; 0x01
{
  if(transmitting){
    4a12:	80 91 b2 03 	lds	r24, 0x03B2
    4a16:	88 23       	and	r24, r24
    4a18:	c9 f0       	breq	.+50     	; 0x4a4c <_ZN7TwoWire5writeEh+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    4a1a:	80 91 b1 03 	lds	r24, 0x03B1
    4a1e:	80 32       	cpi	r24, 0x20	; 32
    4a20:	38 f0       	brcs	.+14     	; 0x4a30 <_ZN7TwoWire5writeEh+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    4a22:	81 e0       	ldi	r24, 0x01	; 1
    4a24:	90 e0       	ldi	r25, 0x00	; 0
    4a26:	93 83       	std	Z+3, r25	; 0x03
    4a28:	82 83       	std	Z+2, r24	; 0x02
    4a2a:	20 e0       	ldi	r18, 0x00	; 0
    4a2c:	30 e0       	ldi	r19, 0x00	; 0
    4a2e:	15 c0       	rjmp	.+42     	; 0x4a5a <_ZN7TwoWire5writeEh+0x56>
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    4a30:	80 91 b0 03 	lds	r24, 0x03B0
    4a34:	e8 2f       	mov	r30, r24
    4a36:	f0 e0       	ldi	r31, 0x00	; 0
    4a38:	e0 57       	subi	r30, 0x70	; 112
    4a3a:	fc 4f       	sbci	r31, 0xFC	; 252
    4a3c:	99 81       	ldd	r25, Y+1	; 0x01
    4a3e:	90 83       	st	Z, r25
    ++txBufferIndex;
    4a40:	8f 5f       	subi	r24, 0xFF	; 255
    4a42:	80 93 b0 03 	sts	0x03B0, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    4a46:	80 93 b1 03 	sts	0x03B1, r24
    4a4a:	05 c0       	rjmp	.+10     	; 0x4a56 <_ZN7TwoWire5writeEh+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    4a4c:	ce 01       	movw	r24, r28
    4a4e:	01 96       	adiw	r24, 0x01	; 1
    4a50:	61 e0       	ldi	r22, 0x01	; 1
    4a52:	0e 94 03 26 	call	0x4c06	; 0x4c06 <twi_transmit>
    4a56:	21 e0       	ldi	r18, 0x01	; 1
    4a58:	30 e0       	ldi	r19, 0x00	; 0
  }
  return 1;
}
    4a5a:	c9 01       	movw	r24, r18
    4a5c:	0f 90       	pop	r0
    4a5e:	cf 91       	pop	r28
    4a60:	df 91       	pop	r29
    4a62:	08 95       	ret

00004a64 <_ZN7TwoWire15endTransmissionEh>:
//	the bus tenure has been properly ended with a STOP. It
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
    4a64:	0f 93       	push	r16
    4a66:	06 2f       	mov	r16, r22
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    4a68:	80 91 8f 03 	lds	r24, 0x038F
    4a6c:	60 e9       	ldi	r22, 0x90	; 144
    4a6e:	73 e0       	ldi	r23, 0x03	; 3
    4a70:	40 91 b1 03 	lds	r20, 0x03B1
    4a74:	21 e0       	ldi	r18, 0x01	; 1
    4a76:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    4a7a:	10 92 b0 03 	sts	0x03B0, r1
  txBufferLength = 0;
    4a7e:	10 92 b1 03 	sts	0x03B1, r1
  // indicate that we are done transmitting
  transmitting = 0;
    4a82:	10 92 b2 03 	sts	0x03B2, r1
  return ret;
}
    4a86:	0f 91       	pop	r16
    4a88:	08 95       	ret

00004a8a <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    4a8a:	61 e0       	ldi	r22, 0x01	; 1
    4a8c:	0e 94 32 25 	call	0x4a64	; 0x4a64 <_ZN7TwoWire15endTransmissionEh>
}
    4a90:	08 95       	ret

00004a92 <_ZN7TwoWire11requestFromEhhh>:
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    4a92:	41 32       	cpi	r20, 0x21	; 33
    4a94:	08 f0       	brcs	.+2      	; 0x4a98 <_ZN7TwoWire11requestFromEhhh+0x6>
    4a96:	40 e2       	ldi	r20, 0x20	; 32
    4a98:	86 2f       	mov	r24, r22
    4a9a:	6d e6       	ldi	r22, 0x6D	; 109
    4a9c:	73 e0       	ldi	r23, 0x03	; 3
    4a9e:	0e 94 65 25 	call	0x4aca	; 0x4aca <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    4aa2:	10 92 8d 03 	sts	0x038D, r1
  rxBufferLength = read;
    4aa6:	80 93 8e 03 	sts	0x038E, r24

  return read;
}
    4aaa:	08 95       	ret

00004aac <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    4aac:	21 e0       	ldi	r18, 0x01	; 1
    4aae:	0e 94 49 25 	call	0x4a92	; 0x4a92 <_ZN7TwoWire11requestFromEhhh>
}
    4ab2:	08 95       	ret

00004ab4 <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    4ab4:	10 92 8d 03 	sts	0x038D, r1
  rxBufferLength = 0;
    4ab8:	10 92 8e 03 	sts	0x038E, r1

  txBufferIndex = 0;
    4abc:	10 92 b0 03 	sts	0x03B0, r1
  txBufferLength = 0;
    4ac0:	10 92 b1 03 	sts	0x03B1, r1

  twi_init();
    4ac4:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <twi_init>
}
    4ac8:	08 95       	ret

00004aca <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    4aca:	38 2f       	mov	r19, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    4acc:	41 32       	cpi	r20, 0x21	; 33
    4ace:	10 f0       	brcs	.+4      	; 0x4ad4 <twi_readFrom+0xa>
    4ad0:	40 e0       	ldi	r20, 0x00	; 0
    4ad2:	42 c0       	rjmp	.+132    	; 0x4b58 <twi_readFrom+0x8e>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    4ad4:	80 91 bf 03 	lds	r24, 0x03BF
    4ad8:	88 23       	and	r24, r24
    4ada:	e1 f7       	brne	.-8      	; 0x4ad4 <twi_readFrom+0xa>
    continue;
  }
  twi_state = TWI_MRX;
    4adc:	91 e0       	ldi	r25, 0x01	; 1
    4ade:	90 93 bf 03 	sts	0x03BF, r25
  twi_sendStop = sendStop;
    4ae2:	20 93 c1 03 	sts	0x03C1, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    4ae6:	8f ef       	ldi	r24, 0xFF	; 255
    4ae8:	80 93 2c 04 	sts	0x042C, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    4aec:	10 92 e7 03 	sts	0x03E7, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    4af0:	41 50       	subi	r20, 0x01	; 1
    4af2:	40 93 e8 03 	sts	0x03E8, r20
    4af6:	4f 5f       	subi	r20, 0xFF	; 255
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    4af8:	90 93 c0 03 	sts	0x03C0, r25
  twi_slarw |= address << 1;
    4afc:	80 91 c0 03 	lds	r24, 0x03C0
    4b00:	33 0f       	add	r19, r19
    4b02:	83 2b       	or	r24, r19
    4b04:	80 93 c0 03 	sts	0x03C0, r24

  if (true == twi_inRepStart) {
    4b08:	80 91 c2 03 	lds	r24, 0x03C2
    4b0c:	81 30       	cpi	r24, 0x01	; 1
    4b0e:	41 f4       	brne	.+16     	; 0x4b20 <twi_readFrom+0x56>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    4b10:	10 92 c2 03 	sts	0x03C2, r1
    TWDR = twi_slarw;
    4b14:	80 91 c0 03 	lds	r24, 0x03C0
    4b18:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    4b1c:	85 ec       	ldi	r24, 0xC5	; 197
    4b1e:	01 c0       	rjmp	.+2      	; 0x4b22 <twi_readFrom+0x58>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    4b20:	85 ee       	ldi	r24, 0xE5	; 229
    4b22:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    4b26:	80 91 bf 03 	lds	r24, 0x03BF
    4b2a:	81 30       	cpi	r24, 0x01	; 1
    4b2c:	e1 f3       	breq	.-8      	; 0x4b26 <twi_readFrom+0x5c>
    continue;
  }

  if (twi_masterBufferIndex < length)
    4b2e:	80 91 e7 03 	lds	r24, 0x03E7
    4b32:	84 17       	cp	r24, r20
    4b34:	10 f4       	brcc	.+4      	; 0x4b3a <twi_readFrom+0x70>
    length = twi_masterBufferIndex;
    4b36:	40 91 e7 03 	lds	r20, 0x03E7
    4b3a:	20 e0       	ldi	r18, 0x00	; 0
    4b3c:	30 e0       	ldi	r19, 0x00	; 0
    4b3e:	0a c0       	rjmp	.+20     	; 0x4b54 <twi_readFrom+0x8a>

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    4b40:	fb 01       	movw	r30, r22
    4b42:	e2 0f       	add	r30, r18
    4b44:	f3 1f       	adc	r31, r19
    4b46:	d9 01       	movw	r26, r18
    4b48:	a9 53       	subi	r26, 0x39	; 57
    4b4a:	bc 4f       	sbci	r27, 0xFC	; 252
    4b4c:	8c 91       	ld	r24, X
    4b4e:	80 83       	st	Z, r24
    4b50:	2f 5f       	subi	r18, 0xFF	; 255
    4b52:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    4b54:	24 17       	cp	r18, r20
    4b56:	a0 f3       	brcs	.-24     	; 0x4b40 <twi_readFrom+0x76>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    4b58:	84 2f       	mov	r24, r20
    4b5a:	08 95       	ret

00004b5c <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    4b5c:	0f 93       	push	r16
    4b5e:	1f 93       	push	r17
    4b60:	58 2f       	mov	r21, r24
    4b62:	12 2f       	mov	r17, r18
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    4b64:	41 32       	cpi	r20, 0x21	; 33
    4b66:	10 f0       	brcs	.+4      	; 0x4b6c <twi_writeTo+0x10>
    4b68:	81 e0       	ldi	r24, 0x01	; 1
    4b6a:	4a c0       	rjmp	.+148    	; 0x4c00 <twi_writeTo+0xa4>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    4b6c:	80 91 bf 03 	lds	r24, 0x03BF
    4b70:	88 23       	and	r24, r24
    4b72:	e1 f7       	brne	.-8      	; 0x4b6c <twi_writeTo+0x10>
    continue;
  }
  twi_state = TWI_MTX;
    4b74:	82 e0       	ldi	r24, 0x02	; 2
    4b76:	80 93 bf 03 	sts	0x03BF, r24
  twi_sendStop = sendStop;
    4b7a:	00 93 c1 03 	sts	0x03C1, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    4b7e:	8f ef       	ldi	r24, 0xFF	; 255
    4b80:	80 93 2c 04 	sts	0x042C, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    4b84:	10 92 e7 03 	sts	0x03E7, r1
  twi_masterBufferLength = length;
    4b88:	40 93 e8 03 	sts	0x03E8, r20
    4b8c:	a7 ec       	ldi	r26, 0xC7	; 199
    4b8e:	b3 e0       	ldi	r27, 0x03	; 3
    4b90:	fb 01       	movw	r30, r22
    4b92:	02 c0       	rjmp	.+4      	; 0x4b98 <twi_writeTo+0x3c>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    4b94:	81 91       	ld	r24, Z+
    4b96:	8d 93       	st	X+, r24
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    4b98:	8e 2f       	mov	r24, r30
    4b9a:	86 1b       	sub	r24, r22
    4b9c:	84 17       	cp	r24, r20
    4b9e:	d0 f3       	brcs	.-12     	; 0x4b94 <twi_writeTo+0x38>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    4ba0:	10 92 c0 03 	sts	0x03C0, r1
  twi_slarw |= address << 1;
    4ba4:	80 91 c0 03 	lds	r24, 0x03C0
    4ba8:	55 0f       	add	r21, r21
    4baa:	85 2b       	or	r24, r21
    4bac:	80 93 c0 03 	sts	0x03C0, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    4bb0:	80 91 c2 03 	lds	r24, 0x03C2
    4bb4:	81 30       	cpi	r24, 0x01	; 1
    4bb6:	41 f4       	brne	.+16     	; 0x4bc8 <twi_writeTo+0x6c>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    4bb8:	10 92 c2 03 	sts	0x03C2, r1
    TWDR = twi_slarw;				
    4bbc:	80 91 c0 03 	lds	r24, 0x03C0
    4bc0:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    4bc4:	85 ec       	ldi	r24, 0xC5	; 197
    4bc6:	01 c0       	rjmp	.+2      	; 0x4bca <twi_writeTo+0x6e>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    4bc8:	85 ee       	ldi	r24, 0xE5	; 229
    4bca:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    4bce:	11 23       	and	r17, r17
    4bd0:	21 f0       	breq	.+8      	; 0x4bda <twi_writeTo+0x7e>
    4bd2:	80 91 bf 03 	lds	r24, 0x03BF
    4bd6:	82 30       	cpi	r24, 0x02	; 2
    4bd8:	e1 f3       	breq	.-8      	; 0x4bd2 <twi_writeTo+0x76>
    continue;
  }
  
  if (twi_error == 0xFF)
    4bda:	80 91 2c 04 	lds	r24, 0x042C
    4bde:	8f 3f       	cpi	r24, 0xFF	; 255
    4be0:	11 f4       	brne	.+4      	; 0x4be6 <twi_writeTo+0x8a>
    4be2:	80 e0       	ldi	r24, 0x00	; 0
    4be4:	0d c0       	rjmp	.+26     	; 0x4c00 <twi_writeTo+0xa4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    4be6:	80 91 2c 04 	lds	r24, 0x042C
    4bea:	80 32       	cpi	r24, 0x20	; 32
    4bec:	11 f4       	brne	.+4      	; 0x4bf2 <twi_writeTo+0x96>
    4bee:	82 e0       	ldi	r24, 0x02	; 2
    4bf0:	07 c0       	rjmp	.+14     	; 0x4c00 <twi_writeTo+0xa4>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    4bf2:	80 91 2c 04 	lds	r24, 0x042C
    4bf6:	80 33       	cpi	r24, 0x30	; 48
    4bf8:	11 f0       	breq	.+4      	; 0x4bfe <twi_writeTo+0xa2>
    4bfa:	84 e0       	ldi	r24, 0x04	; 4
    4bfc:	01 c0       	rjmp	.+2      	; 0x4c00 <twi_writeTo+0xa4>
    4bfe:	83 e0       	ldi	r24, 0x03	; 3
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    4c00:	1f 91       	pop	r17
    4c02:	0f 91       	pop	r16
    4c04:	08 95       	ret

00004c06 <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    4c06:	48 2f       	mov	r20, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    4c08:	61 32       	cpi	r22, 0x21	; 33
    4c0a:	10 f0       	brcs	.+4      	; 0x4c10 <twi_transmit+0xa>
    4c0c:	81 e0       	ldi	r24, 0x01	; 1
    4c0e:	08 95       	ret
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    4c10:	80 91 bf 03 	lds	r24, 0x03BF
    4c14:	84 30       	cpi	r24, 0x04	; 4
    4c16:	11 f0       	breq	.+4      	; 0x4c1c <twi_transmit+0x16>
    4c18:	82 e0       	ldi	r24, 0x02	; 2
    4c1a:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    4c1c:	60 93 0a 04 	sts	0x040A, r22
    4c20:	a9 ee       	ldi	r26, 0xE9	; 233
    4c22:	b3 e0       	ldi	r27, 0x03	; 3
    4c24:	84 2f       	mov	r24, r20
    4c26:	9c 01       	movw	r18, r24
    4c28:	f9 01       	movw	r30, r18
    4c2a:	02 c0       	rjmp	.+4      	; 0x4c30 <twi_transmit+0x2a>
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
    4c2c:	81 91       	ld	r24, Z+
    4c2e:	8d 93       	st	X+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    4c30:	8e 2f       	mov	r24, r30
    4c32:	84 1b       	sub	r24, r20
    4c34:	86 17       	cp	r24, r22
    4c36:	d0 f3       	brcs	.-12     	; 0x4c2c <twi_transmit+0x26>
    4c38:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    4c3a:	08 95       	ret

00004c3c <__vector_24>:
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    4c3c:	1f 92       	push	r1
    4c3e:	0f 92       	push	r0
    4c40:	0f b6       	in	r0, 0x3f	; 63
    4c42:	0f 92       	push	r0
    4c44:	11 24       	eor	r1, r1
    4c46:	2f 93       	push	r18
    4c48:	3f 93       	push	r19
    4c4a:	4f 93       	push	r20
    4c4c:	5f 93       	push	r21
    4c4e:	6f 93       	push	r22
    4c50:	7f 93       	push	r23
    4c52:	8f 93       	push	r24
    4c54:	9f 93       	push	r25
    4c56:	af 93       	push	r26
    4c58:	bf 93       	push	r27
    4c5a:	ef 93       	push	r30
    4c5c:	ff 93       	push	r31
  switch(TW_STATUS){
    4c5e:	80 91 b9 00 	lds	r24, 0x00B9
    4c62:	90 e0       	ldi	r25, 0x00	; 0
    4c64:	88 7f       	andi	r24, 0xF8	; 248
    4c66:	90 70       	andi	r25, 0x00	; 0
    4c68:	80 36       	cpi	r24, 0x60	; 96
    4c6a:	91 05       	cpc	r25, r1
    4c6c:	09 f4       	brne	.+2      	; 0x4c70 <__vector_24+0x34>
    4c6e:	f2 c0       	rjmp	.+484    	; 0x4e54 <__vector_24+0x218>
    4c70:	81 36       	cpi	r24, 0x61	; 97
    4c72:	91 05       	cpc	r25, r1
    4c74:	cc f5       	brge	.+114    	; 0x4ce8 <__vector_24+0xac>
    4c76:	88 32       	cpi	r24, 0x28	; 40
    4c78:	91 05       	cpc	r25, r1
    4c7a:	09 f4       	brne	.+2      	; 0x4c7e <__vector_24+0x42>
    4c7c:	7b c0       	rjmp	.+246    	; 0x4d74 <__vector_24+0x138>
    4c7e:	89 32       	cpi	r24, 0x29	; 41
    4c80:	91 05       	cpc	r25, r1
    4c82:	b4 f4       	brge	.+44     	; 0x4cb0 <__vector_24+0x74>
    4c84:	80 31       	cpi	r24, 0x10	; 16
    4c86:	91 05       	cpc	r25, r1
    4c88:	09 f4       	brne	.+2      	; 0x4c8c <__vector_24+0x50>
    4c8a:	6f c0       	rjmp	.+222    	; 0x4d6a <__vector_24+0x12e>
    4c8c:	81 31       	cpi	r24, 0x11	; 17
    4c8e:	91 05       	cpc	r25, r1
    4c90:	3c f4       	brge	.+14     	; 0x4ca0 <__vector_24+0x64>
    4c92:	00 97       	sbiw	r24, 0x00	; 0
    4c94:	09 f4       	brne	.+2      	; 0x4c98 <__vector_24+0x5c>
    4c96:	47 c1       	rjmp	.+654    	; 0x4f26 <__vector_24+0x2ea>
    4c98:	08 97       	sbiw	r24, 0x08	; 8
    4c9a:	09 f0       	breq	.+2      	; 0x4c9e <__vector_24+0x62>
    4c9c:	4f c1       	rjmp	.+670    	; 0x4f3c <__vector_24+0x300>
    4c9e:	65 c0       	rjmp	.+202    	; 0x4d6a <__vector_24+0x12e>
    4ca0:	88 31       	cpi	r24, 0x18	; 24
    4ca2:	91 05       	cpc	r25, r1
    4ca4:	09 f4       	brne	.+2      	; 0x4ca8 <__vector_24+0x6c>
    4ca6:	66 c0       	rjmp	.+204    	; 0x4d74 <__vector_24+0x138>
    4ca8:	80 97       	sbiw	r24, 0x20	; 32
    4caa:	09 f0       	breq	.+2      	; 0x4cae <__vector_24+0x72>
    4cac:	47 c1       	rjmp	.+654    	; 0x4f3c <__vector_24+0x300>
    4cae:	82 c0       	rjmp	.+260    	; 0x4db4 <__vector_24+0x178>
    4cb0:	80 34       	cpi	r24, 0x40	; 64
    4cb2:	91 05       	cpc	r25, r1
    4cb4:	09 f4       	brne	.+2      	; 0x4cb8 <__vector_24+0x7c>
    4cb6:	a4 c0       	rjmp	.+328    	; 0x4e00 <__vector_24+0x1c4>
    4cb8:	81 34       	cpi	r24, 0x41	; 65
    4cba:	91 05       	cpc	r25, r1
    4cbc:	44 f4       	brge	.+16     	; 0x4cce <__vector_24+0x92>
    4cbe:	80 33       	cpi	r24, 0x30	; 48
    4cc0:	91 05       	cpc	r25, r1
    4cc2:	09 f4       	brne	.+2      	; 0x4cc6 <__vector_24+0x8a>
    4cc4:	82 c0       	rjmp	.+260    	; 0x4dca <__vector_24+0x18e>
    4cc6:	c8 97       	sbiw	r24, 0x38	; 56
    4cc8:	09 f0       	breq	.+2      	; 0x4ccc <__vector_24+0x90>
    4cca:	38 c1       	rjmp	.+624    	; 0x4f3c <__vector_24+0x300>
    4ccc:	89 c0       	rjmp	.+274    	; 0x4de0 <__vector_24+0x1a4>
    4cce:	80 35       	cpi	r24, 0x50	; 80
    4cd0:	91 05       	cpc	r25, r1
    4cd2:	09 f4       	brne	.+2      	; 0x4cd6 <__vector_24+0x9a>
    4cd4:	89 c0       	rjmp	.+274    	; 0x4de8 <__vector_24+0x1ac>
    4cd6:	88 35       	cpi	r24, 0x58	; 88
    4cd8:	91 05       	cpc	r25, r1
    4cda:	09 f4       	brne	.+2      	; 0x4cde <__vector_24+0xa2>
    4cdc:	96 c0       	rjmp	.+300    	; 0x4e0a <__vector_24+0x1ce>
    4cde:	88 34       	cpi	r24, 0x48	; 72
    4ce0:	91 05       	cpc	r25, r1
    4ce2:	09 f0       	breq	.+2      	; 0x4ce6 <__vector_24+0xaa>
    4ce4:	2b c1       	rjmp	.+598    	; 0x4f3c <__vector_24+0x300>
    4ce6:	ae c0       	rjmp	.+348    	; 0x4e44 <__vector_24+0x208>
    4ce8:	88 39       	cpi	r24, 0x98	; 152
    4cea:	91 05       	cpc	r25, r1
    4cec:	09 f4       	brne	.+2      	; 0x4cf0 <__vector_24+0xb4>
    4cee:	13 c1       	rjmp	.+550    	; 0x4f16 <__vector_24+0x2da>
    4cf0:	89 39       	cpi	r24, 0x99	; 153
    4cf2:	91 05       	cpc	r25, r1
    4cf4:	ec f4       	brge	.+58     	; 0x4d30 <__vector_24+0xf4>
    4cf6:	88 37       	cpi	r24, 0x78	; 120
    4cf8:	91 05       	cpc	r25, r1
    4cfa:	09 f4       	brne	.+2      	; 0x4cfe <__vector_24+0xc2>
    4cfc:	ab c0       	rjmp	.+342    	; 0x4e54 <__vector_24+0x218>
    4cfe:	89 37       	cpi	r24, 0x79	; 121
    4d00:	91 05       	cpc	r25, r1
    4d02:	4c f4       	brge	.+18     	; 0x4d16 <__vector_24+0xda>
    4d04:	88 36       	cpi	r24, 0x68	; 104
    4d06:	91 05       	cpc	r25, r1
    4d08:	09 f4       	brne	.+2      	; 0x4d0c <__vector_24+0xd0>
    4d0a:	a4 c0       	rjmp	.+328    	; 0x4e54 <__vector_24+0x218>
    4d0c:	80 37       	cpi	r24, 0x70	; 112
    4d0e:	91 05       	cpc	r25, r1
    4d10:	09 f0       	breq	.+2      	; 0x4d14 <__vector_24+0xd8>
    4d12:	14 c1       	rjmp	.+552    	; 0x4f3c <__vector_24+0x300>
    4d14:	9f c0       	rjmp	.+318    	; 0x4e54 <__vector_24+0x218>
    4d16:	88 38       	cpi	r24, 0x88	; 136
    4d18:	91 05       	cpc	r25, r1
    4d1a:	09 f4       	brne	.+2      	; 0x4d1e <__vector_24+0xe2>
    4d1c:	fc c0       	rjmp	.+504    	; 0x4f16 <__vector_24+0x2da>
    4d1e:	80 39       	cpi	r24, 0x90	; 144
    4d20:	91 05       	cpc	r25, r1
    4d22:	09 f4       	brne	.+2      	; 0x4d26 <__vector_24+0xea>
    4d24:	9d c0       	rjmp	.+314    	; 0x4e60 <__vector_24+0x224>
    4d26:	80 38       	cpi	r24, 0x80	; 128
    4d28:	91 05       	cpc	r25, r1
    4d2a:	09 f0       	breq	.+2      	; 0x4d2e <__vector_24+0xf2>
    4d2c:	07 c1       	rjmp	.+526    	; 0x4f3c <__vector_24+0x300>
    4d2e:	98 c0       	rjmp	.+304    	; 0x4e60 <__vector_24+0x224>
    4d30:	80 3b       	cpi	r24, 0xB0	; 176
    4d32:	91 05       	cpc	r25, r1
    4d34:	09 f4       	brne	.+2      	; 0x4d38 <__vector_24+0xfc>
    4d36:	c6 c0       	rjmp	.+396    	; 0x4ec4 <__vector_24+0x288>
    4d38:	81 3b       	cpi	r24, 0xB1	; 177
    4d3a:	91 05       	cpc	r25, r1
    4d3c:	4c f4       	brge	.+18     	; 0x4d50 <__vector_24+0x114>
    4d3e:	80 3a       	cpi	r24, 0xA0	; 160
    4d40:	91 05       	cpc	r25, r1
    4d42:	09 f4       	brne	.+2      	; 0x4d46 <__vector_24+0x10a>
    4d44:	9f c0       	rjmp	.+318    	; 0x4e84 <__vector_24+0x248>
    4d46:	88 3a       	cpi	r24, 0xA8	; 168
    4d48:	91 05       	cpc	r25, r1
    4d4a:	09 f0       	breq	.+2      	; 0x4d4e <__vector_24+0x112>
    4d4c:	f7 c0       	rjmp	.+494    	; 0x4f3c <__vector_24+0x300>
    4d4e:	ba c0       	rjmp	.+372    	; 0x4ec4 <__vector_24+0x288>
    4d50:	80 3c       	cpi	r24, 0xC0	; 192
    4d52:	91 05       	cpc	r25, r1
    4d54:	09 f4       	brne	.+2      	; 0x4d58 <__vector_24+0x11c>
    4d56:	e3 c0       	rjmp	.+454    	; 0x4f1e <__vector_24+0x2e2>
    4d58:	88 3c       	cpi	r24, 0xC8	; 200
    4d5a:	91 05       	cpc	r25, r1
    4d5c:	09 f4       	brne	.+2      	; 0x4d60 <__vector_24+0x124>
    4d5e:	df c0       	rjmp	.+446    	; 0x4f1e <__vector_24+0x2e2>
    4d60:	88 3b       	cpi	r24, 0xB8	; 184
    4d62:	91 05       	cpc	r25, r1
    4d64:	09 f0       	breq	.+2      	; 0x4d68 <__vector_24+0x12c>
    4d66:	ea c0       	rjmp	.+468    	; 0x4f3c <__vector_24+0x300>
    4d68:	c2 c0       	rjmp	.+388    	; 0x4eee <__vector_24+0x2b2>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    4d6a:	80 91 c0 03 	lds	r24, 0x03C0
    4d6e:	80 93 bb 00 	sts	0x00BB, r24
    4d72:	cf c0       	rjmp	.+414    	; 0x4f12 <__vector_24+0x2d6>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4d74:	90 91 e7 03 	lds	r25, 0x03E7
    4d78:	80 91 e8 03 	lds	r24, 0x03E8
    4d7c:	98 17       	cp	r25, r24
    4d7e:	68 f4       	brcc	.+26     	; 0x4d9a <__vector_24+0x15e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    4d80:	90 91 e7 03 	lds	r25, 0x03E7
    4d84:	e9 2f       	mov	r30, r25
    4d86:	f0 e0       	ldi	r31, 0x00	; 0
    4d88:	e9 53       	subi	r30, 0x39	; 57
    4d8a:	fc 4f       	sbci	r31, 0xFC	; 252
    4d8c:	80 81       	ld	r24, Z
    4d8e:	80 93 bb 00 	sts	0x00BB, r24
    4d92:	9f 5f       	subi	r25, 0xFF	; 255
    4d94:	90 93 e7 03 	sts	0x03E7, r25
    4d98:	bc c0       	rjmp	.+376    	; 0x4f12 <__vector_24+0x2d6>
        twi_reply(1);
      }else{
	if (twi_sendStop)
    4d9a:	80 91 c1 03 	lds	r24, 0x03C1
    4d9e:	88 23       	and	r24, r24
    4da0:	09 f4       	brne	.+2      	; 0x4da4 <__vector_24+0x168>
    4da2:	4b c0       	rjmp	.+150    	; 0x4e3a <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4da4:	85 ed       	ldi	r24, 0xD5	; 213
    4da6:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4daa:	80 91 bc 00 	lds	r24, 0x00BC
    4dae:	84 fd       	sbrc	r24, 4
    4db0:	fc cf       	rjmp	.-8      	; 0x4daa <__vector_24+0x16e>
    4db2:	c2 c0       	rjmp	.+388    	; 0x4f38 <__vector_24+0x2fc>
	  twi_state = TWI_READY;
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    4db4:	80 e2       	ldi	r24, 0x20	; 32
    4db6:	80 93 2c 04 	sts	0x042C, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4dba:	85 ed       	ldi	r24, 0xD5	; 213
    4dbc:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4dc0:	80 91 bc 00 	lds	r24, 0x00BC
    4dc4:	84 fd       	sbrc	r24, 4
    4dc6:	fc cf       	rjmp	.-8      	; 0x4dc0 <__vector_24+0x184>
    4dc8:	b7 c0       	rjmp	.+366    	; 0x4f38 <__vector_24+0x2fc>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4dca:	80 e3       	ldi	r24, 0x30	; 48
    4dcc:	80 93 2c 04 	sts	0x042C, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4dd0:	85 ed       	ldi	r24, 0xD5	; 213
    4dd2:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4dd6:	80 91 bc 00 	lds	r24, 0x00BC
    4dda:	84 fd       	sbrc	r24, 4
    4ddc:	fc cf       	rjmp	.-8      	; 0x4dd6 <__vector_24+0x19a>
    4dde:	ac c0       	rjmp	.+344    	; 0x4f38 <__vector_24+0x2fc>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    4de0:	88 e3       	ldi	r24, 0x38	; 56
    4de2:	80 93 2c 04 	sts	0x042C, r24
    4de6:	9b c0       	rjmp	.+310    	; 0x4f1e <__vector_24+0x2e2>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4de8:	80 91 e7 03 	lds	r24, 0x03E7
    4dec:	90 91 bb 00 	lds	r25, 0x00BB
    4df0:	e8 2f       	mov	r30, r24
    4df2:	f0 e0       	ldi	r31, 0x00	; 0
    4df4:	e9 53       	subi	r30, 0x39	; 57
    4df6:	fc 4f       	sbci	r31, 0xFC	; 252
    4df8:	90 83       	st	Z, r25
    4dfa:	8f 5f       	subi	r24, 0xFF	; 255
    4dfc:	80 93 e7 03 	sts	0x03E7, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4e00:	90 91 e7 03 	lds	r25, 0x03E7
    4e04:	80 91 e8 03 	lds	r24, 0x03E8
    4e08:	82 c0       	rjmp	.+260    	; 0x4f0e <__vector_24+0x2d2>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4e0a:	80 91 e7 03 	lds	r24, 0x03E7
    4e0e:	90 91 bb 00 	lds	r25, 0x00BB
    4e12:	e8 2f       	mov	r30, r24
    4e14:	f0 e0       	ldi	r31, 0x00	; 0
    4e16:	e9 53       	subi	r30, 0x39	; 57
    4e18:	fc 4f       	sbci	r31, 0xFC	; 252
    4e1a:	90 83       	st	Z, r25
    4e1c:	8f 5f       	subi	r24, 0xFF	; 255
    4e1e:	80 93 e7 03 	sts	0x03E7, r24
	if (twi_sendStop)
    4e22:	80 91 c1 03 	lds	r24, 0x03C1
    4e26:	88 23       	and	r24, r24
    4e28:	41 f0       	breq	.+16     	; 0x4e3a <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4e2a:	85 ed       	ldi	r24, 0xD5	; 213
    4e2c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4e30:	80 91 bc 00 	lds	r24, 0x00BC
    4e34:	84 fd       	sbrc	r24, 4
    4e36:	fc cf       	rjmp	.-8      	; 0x4e30 <__vector_24+0x1f4>
    4e38:	7f c0       	rjmp	.+254    	; 0x4f38 <__vector_24+0x2fc>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    4e3a:	81 e0       	ldi	r24, 0x01	; 1
    4e3c:	80 93 c2 03 	sts	0x03C2, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4e40:	84 ea       	ldi	r24, 0xA4	; 164
    4e42:	6e c0       	rjmp	.+220    	; 0x4f20 <__vector_24+0x2e4>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4e44:	85 ed       	ldi	r24, 0xD5	; 213
    4e46:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4e4a:	80 91 bc 00 	lds	r24, 0x00BC
    4e4e:	84 fd       	sbrc	r24, 4
    4e50:	fc cf       	rjmp	.-8      	; 0x4e4a <__vector_24+0x20e>
    4e52:	72 c0       	rjmp	.+228    	; 0x4f38 <__vector_24+0x2fc>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    4e54:	83 e0       	ldi	r24, 0x03	; 3
    4e56:	80 93 bf 03 	sts	0x03BF, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    4e5a:	10 92 2b 04 	sts	0x042B, r1
    4e5e:	59 c0       	rjmp	.+178    	; 0x4f12 <__vector_24+0x2d6>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4e60:	80 91 2b 04 	lds	r24, 0x042B
    4e64:	80 32       	cpi	r24, 0x20	; 32
    4e66:	08 f0       	brcs	.+2      	; 0x4e6a <__vector_24+0x22e>
    4e68:	56 c0       	rjmp	.+172    	; 0x4f16 <__vector_24+0x2da>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    4e6a:	80 91 2b 04 	lds	r24, 0x042B
    4e6e:	90 91 bb 00 	lds	r25, 0x00BB
    4e72:	e8 2f       	mov	r30, r24
    4e74:	f0 e0       	ldi	r31, 0x00	; 0
    4e76:	e5 5f       	subi	r30, 0xF5	; 245
    4e78:	fb 4f       	sbci	r31, 0xFB	; 251
    4e7a:	90 83       	st	Z, r25
    4e7c:	8f 5f       	subi	r24, 0xFF	; 255
    4e7e:	80 93 2b 04 	sts	0x042B, r24
    4e82:	47 c0       	rjmp	.+142    	; 0x4f12 <__vector_24+0x2d6>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4e84:	80 91 2b 04 	lds	r24, 0x042B
    4e88:	80 32       	cpi	r24, 0x20	; 32
    4e8a:	30 f4       	brcc	.+12     	; 0x4e98 <__vector_24+0x25c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    4e8c:	e0 91 2b 04 	lds	r30, 0x042B
    4e90:	f0 e0       	ldi	r31, 0x00	; 0
    4e92:	e5 5f       	subi	r30, 0xF5	; 245
    4e94:	fb 4f       	sbci	r31, 0xFB	; 251
    4e96:	10 82       	st	Z, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4e98:	85 ed       	ldi	r24, 0xD5	; 213
    4e9a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4e9e:	80 91 bc 00 	lds	r24, 0x00BC
    4ea2:	84 fd       	sbrc	r24, 4
    4ea4:	fc cf       	rjmp	.-8      	; 0x4e9e <__vector_24+0x262>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    4ea6:	10 92 bf 03 	sts	0x03BF, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    4eaa:	60 91 2b 04 	lds	r22, 0x042B
    4eae:	e0 91 c5 03 	lds	r30, 0x03C5
    4eb2:	f0 91 c6 03 	lds	r31, 0x03C6
    4eb6:	8b e0       	ldi	r24, 0x0B	; 11
    4eb8:	94 e0       	ldi	r25, 0x04	; 4
    4eba:	70 e0       	ldi	r23, 0x00	; 0
    4ebc:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    4ebe:	10 92 2b 04 	sts	0x042B, r1
    4ec2:	2d c0       	rjmp	.+90     	; 0x4f1e <__vector_24+0x2e2>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    4ec4:	84 e0       	ldi	r24, 0x04	; 4
    4ec6:	80 93 bf 03 	sts	0x03BF, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    4eca:	10 92 09 04 	sts	0x0409, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    4ece:	10 92 0a 04 	sts	0x040A, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    4ed2:	e0 91 c3 03 	lds	r30, 0x03C3
    4ed6:	f0 91 c4 03 	lds	r31, 0x03C4
    4eda:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    4edc:	80 91 0a 04 	lds	r24, 0x040A
    4ee0:	88 23       	and	r24, r24
    4ee2:	29 f4       	brne	.+10     	; 0x4eee <__vector_24+0x2b2>
        twi_txBufferLength = 1;
    4ee4:	81 e0       	ldi	r24, 0x01	; 1
    4ee6:	80 93 0a 04 	sts	0x040A, r24
        twi_txBuffer[0] = 0x00;
    4eea:	10 92 e9 03 	sts	0x03E9, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    4eee:	90 91 09 04 	lds	r25, 0x0409
    4ef2:	e9 2f       	mov	r30, r25
    4ef4:	f0 e0       	ldi	r31, 0x00	; 0
    4ef6:	e7 51       	subi	r30, 0x17	; 23
    4ef8:	fc 4f       	sbci	r31, 0xFC	; 252
    4efa:	80 81       	ld	r24, Z
    4efc:	80 93 bb 00 	sts	0x00BB, r24
    4f00:	9f 5f       	subi	r25, 0xFF	; 255
    4f02:	90 93 09 04 	sts	0x0409, r25
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    4f06:	90 91 09 04 	lds	r25, 0x0409
    4f0a:	80 91 0a 04 	lds	r24, 0x040A
    4f0e:	98 17       	cp	r25, r24
    4f10:	10 f4       	brcc	.+4      	; 0x4f16 <__vector_24+0x2da>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4f12:	85 ec       	ldi	r24, 0xC5	; 197
    4f14:	01 c0       	rjmp	.+2      	; 0x4f18 <__vector_24+0x2dc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4f16:	85 e8       	ldi	r24, 0x85	; 133
    4f18:	80 93 bc 00 	sts	0x00BC, r24
    4f1c:	0f c0       	rjmp	.+30     	; 0x4f3c <__vector_24+0x300>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4f1e:	85 ec       	ldi	r24, 0xC5	; 197
    4f20:	80 93 bc 00 	sts	0x00BC, r24
    4f24:	09 c0       	rjmp	.+18     	; 0x4f38 <__vector_24+0x2fc>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    4f26:	10 92 2c 04 	sts	0x042C, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4f2a:	85 ed       	ldi	r24, 0xD5	; 213
    4f2c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4f30:	80 91 bc 00 	lds	r24, 0x00BC
    4f34:	84 fd       	sbrc	r24, 4
    4f36:	fc cf       	rjmp	.-8      	; 0x4f30 <__vector_24+0x2f4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    4f38:	10 92 bf 03 	sts	0x03BF, r1
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    4f3c:	ff 91       	pop	r31
    4f3e:	ef 91       	pop	r30
    4f40:	bf 91       	pop	r27
    4f42:	af 91       	pop	r26
    4f44:	9f 91       	pop	r25
    4f46:	8f 91       	pop	r24
    4f48:	7f 91       	pop	r23
    4f4a:	6f 91       	pop	r22
    4f4c:	5f 91       	pop	r21
    4f4e:	4f 91       	pop	r20
    4f50:	3f 91       	pop	r19
    4f52:	2f 91       	pop	r18
    4f54:	0f 90       	pop	r0
    4f56:	0f be       	out	0x3f, r0	; 63
    4f58:	0f 90       	pop	r0
    4f5a:	1f 90       	pop	r1
    4f5c:	18 95       	reti

00004f5e <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    4f5e:	10 92 bf 03 	sts	0x03BF, r1
  twi_sendStop = true;		// default value
    4f62:	81 e0       	ldi	r24, 0x01	; 1
    4f64:	80 93 c1 03 	sts	0x03C1, r24
  twi_inRepStart = false;
    4f68:	10 92 c2 03 	sts	0x03C2, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    4f6c:	82 e1       	ldi	r24, 0x12	; 18
    4f6e:	61 e0       	ldi	r22, 0x01	; 1
    4f70:	0e 94 4c 30 	call	0x6098	; 0x6098 <digitalWrite>
  digitalWrite(SCL, 1);
    4f74:	83 e1       	ldi	r24, 0x13	; 19
    4f76:	61 e0       	ldi	r22, 0x01	; 1
    4f78:	0e 94 4c 30 	call	0x6098	; 0x6098 <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    4f7c:	e9 eb       	ldi	r30, 0xB9	; 185
    4f7e:	f0 e0       	ldi	r31, 0x00	; 0
    4f80:	80 81       	ld	r24, Z
    4f82:	8e 7f       	andi	r24, 0xFE	; 254
    4f84:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    4f86:	80 81       	ld	r24, Z
    4f88:	8d 7f       	andi	r24, 0xFD	; 253
    4f8a:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    4f8c:	88 e4       	ldi	r24, 0x48	; 72
    4f8e:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    4f92:	85 e4       	ldi	r24, 0x45	; 69
    4f94:	80 93 bc 00 	sts	0x00BC, r24
}
    4f98:	08 95       	ret

00004f9a <_ZN9DS1307RTC4readER12tmElements_t>:
  tm.Second &= 0x7f;  // start the clock
  write(tm); 
}

// Aquire data from the RTC chip in BCD format
bool DS1307RTC::read(tmElements_t &tm)
    4f9a:	0f 93       	push	r16
    4f9c:	1f 93       	push	r17
    4f9e:	cf 93       	push	r28
    4fa0:	df 93       	push	r29
    4fa2:	ec 01       	movw	r28, r24
{
  uint8_t sec;
  Wire.beginTransmission(DS1307_CTRL_ID);
    4fa4:	83 eb       	ldi	r24, 0xB3	; 179
    4fa6:	93 e0       	ldi	r25, 0x03	; 3
    4fa8:	68 e6       	ldi	r22, 0x68	; 104
    4faa:	70 e0       	ldi	r23, 0x00	; 0
    4fac:	0e 94 80 24 	call	0x4900	; 0x4900 <_ZN7TwoWire17beginTransmissionEi>
#if ARDUINO >= 100  
  Wire.write((uint8_t)0x00); 
    4fb0:	83 eb       	ldi	r24, 0xB3	; 179
    4fb2:	93 e0       	ldi	r25, 0x03	; 3
    4fb4:	60 e0       	ldi	r22, 0x00	; 0
    4fb6:	0e 94 02 25 	call	0x4a04	; 0x4a04 <_ZN7TwoWire5writeEh>
#else
  Wire.send(0x00);
#endif  
  if (Wire.endTransmission() != 0) {
    4fba:	83 eb       	ldi	r24, 0xB3	; 179
    4fbc:	93 e0       	ldi	r25, 0x03	; 3
    4fbe:	0e 94 45 25 	call	0x4a8a	; 0x4a8a <_ZN7TwoWire15endTransmissionEv>
    4fc2:	88 23       	and	r24, r24
    4fc4:	19 f0       	breq	.+6      	; 0x4fcc <_ZN9DS1307RTC4readER12tmElements_t+0x32>
    exists = false;
    4fc6:	10 92 2d 04 	sts	0x042D, r1
    4fca:	11 c0       	rjmp	.+34     	; 0x4fee <_ZN9DS1307RTC4readER12tmElements_t+0x54>
    return false;
  }
  exists = true;
    4fcc:	81 e0       	ldi	r24, 0x01	; 1
    4fce:	80 93 2d 04 	sts	0x042D, r24

  // request the 7 data fields   (secs, min, hr, dow, date, mth, yr)
  Wire.requestFrom(DS1307_CTRL_ID, tmNbrFields);
    4fd2:	83 eb       	ldi	r24, 0xB3	; 179
    4fd4:	93 e0       	ldi	r25, 0x03	; 3
    4fd6:	68 e6       	ldi	r22, 0x68	; 104
    4fd8:	70 e0       	ldi	r23, 0x00	; 0
    4fda:	47 e0       	ldi	r20, 0x07	; 7
    4fdc:	50 e0       	ldi	r21, 0x00	; 0
    4fde:	0e 94 56 25 	call	0x4aac	; 0x4aac <_ZN7TwoWire11requestFromEii>
  if (Wire.available() < tmNbrFields) return false;
    4fe2:	83 eb       	ldi	r24, 0xB3	; 179
    4fe4:	93 e0       	ldi	r25, 0x03	; 3
    4fe6:	0e 94 8a 24 	call	0x4914	; 0x4914 <_ZN7TwoWire9availableEv>
    4fea:	07 97       	sbiw	r24, 0x07	; 7
    4fec:	14 f4       	brge	.+4      	; 0x4ff2 <_ZN9DS1307RTC4readER12tmElements_t+0x58>
    4fee:	80 e0       	ldi	r24, 0x00	; 0
    4ff0:	65 c0       	rjmp	.+202    	; 0x50bc <_ZN9DS1307RTC4readER12tmElements_t+0x122>
#if ARDUINO >= 100
  sec = Wire.read();
    4ff2:	83 eb       	ldi	r24, 0xB3	; 179
    4ff4:	93 e0       	ldi	r25, 0x03	; 3
    4ff6:	0e 94 93 24 	call	0x4926	; 0x4926 <_ZN7TwoWire4readEv>
    4ffa:	08 2f       	mov	r16, r24
  tm.Second = bcd2dec(sec & 0x7f);   
    4ffc:	8f 77       	andi	r24, 0x7F	; 127
    4ffe:	82 95       	swap	r24
    5000:	8f 70       	andi	r24, 0x0F	; 15
    5002:	1a e0       	ldi	r17, 0x0A	; 10
    5004:	81 9f       	mul	r24, r17
    5006:	c0 01       	movw	r24, r0
    5008:	11 24       	eor	r1, r1
    500a:	20 2f       	mov	r18, r16
    500c:	2f 70       	andi	r18, 0x0F	; 15
    500e:	28 0f       	add	r18, r24
    5010:	28 83       	st	Y, r18
  tm.Minute = bcd2dec(Wire.read() );
    5012:	83 eb       	ldi	r24, 0xB3	; 179
    5014:	93 e0       	ldi	r25, 0x03	; 3
    5016:	0e 94 93 24 	call	0x4926	; 0x4926 <_ZN7TwoWire4readEv>
    501a:	28 2f       	mov	r18, r24
    501c:	22 95       	swap	r18
    501e:	2f 70       	andi	r18, 0x0F	; 15
    5020:	21 9f       	mul	r18, r17
    5022:	90 01       	movw	r18, r0
    5024:	11 24       	eor	r1, r1
    5026:	8f 70       	andi	r24, 0x0F	; 15
    5028:	82 0f       	add	r24, r18
    502a:	89 83       	std	Y+1, r24	; 0x01
  tm.Hour =   bcd2dec(Wire.read() & 0x3f);  // mask assumes 24hr clock
    502c:	83 eb       	ldi	r24, 0xB3	; 179
    502e:	93 e0       	ldi	r25, 0x03	; 3
    5030:	0e 94 93 24 	call	0x4926	; 0x4926 <_ZN7TwoWire4readEv>
    5034:	28 2f       	mov	r18, r24
    5036:	2f 73       	andi	r18, 0x3F	; 63
    5038:	22 95       	swap	r18
    503a:	2f 70       	andi	r18, 0x0F	; 15
    503c:	21 9f       	mul	r18, r17
    503e:	90 01       	movw	r18, r0
    5040:	11 24       	eor	r1, r1
    5042:	8f 70       	andi	r24, 0x0F	; 15
    5044:	82 0f       	add	r24, r18
    5046:	8a 83       	std	Y+2, r24	; 0x02
  tm.Wday = bcd2dec(Wire.read() );
    5048:	83 eb       	ldi	r24, 0xB3	; 179
    504a:	93 e0       	ldi	r25, 0x03	; 3
    504c:	0e 94 93 24 	call	0x4926	; 0x4926 <_ZN7TwoWire4readEv>
    5050:	28 2f       	mov	r18, r24
    5052:	22 95       	swap	r18
    5054:	2f 70       	andi	r18, 0x0F	; 15
    5056:	21 9f       	mul	r18, r17
    5058:	90 01       	movw	r18, r0
    505a:	11 24       	eor	r1, r1
    505c:	8f 70       	andi	r24, 0x0F	; 15
    505e:	82 0f       	add	r24, r18
    5060:	8b 83       	std	Y+3, r24	; 0x03
  tm.Day = bcd2dec(Wire.read() );
    5062:	83 eb       	ldi	r24, 0xB3	; 179
    5064:	93 e0       	ldi	r25, 0x03	; 3
    5066:	0e 94 93 24 	call	0x4926	; 0x4926 <_ZN7TwoWire4readEv>
    506a:	28 2f       	mov	r18, r24
    506c:	22 95       	swap	r18
    506e:	2f 70       	andi	r18, 0x0F	; 15
    5070:	21 9f       	mul	r18, r17
    5072:	90 01       	movw	r18, r0
    5074:	11 24       	eor	r1, r1
    5076:	8f 70       	andi	r24, 0x0F	; 15
    5078:	82 0f       	add	r24, r18
    507a:	8c 83       	std	Y+4, r24	; 0x04
  tm.Month = bcd2dec(Wire.read() );
    507c:	83 eb       	ldi	r24, 0xB3	; 179
    507e:	93 e0       	ldi	r25, 0x03	; 3
    5080:	0e 94 93 24 	call	0x4926	; 0x4926 <_ZN7TwoWire4readEv>
    5084:	28 2f       	mov	r18, r24
    5086:	22 95       	swap	r18
    5088:	2f 70       	andi	r18, 0x0F	; 15
    508a:	21 9f       	mul	r18, r17
    508c:	90 01       	movw	r18, r0
    508e:	11 24       	eor	r1, r1
    5090:	8f 70       	andi	r24, 0x0F	; 15
    5092:	82 0f       	add	r24, r18
    5094:	8d 83       	std	Y+5, r24	; 0x05
  tm.Year = y2kYearToTm((bcd2dec(Wire.read())));
    5096:	83 eb       	ldi	r24, 0xB3	; 179
    5098:	93 e0       	ldi	r25, 0x03	; 3
    509a:	0e 94 93 24 	call	0x4926	; 0x4926 <_ZN7TwoWire4readEv>
    509e:	28 2f       	mov	r18, r24
    50a0:	2f 70       	andi	r18, 0x0F	; 15
    50a2:	22 5e       	subi	r18, 0xE2	; 226
    50a4:	82 95       	swap	r24
    50a6:	8f 70       	andi	r24, 0x0F	; 15
    50a8:	81 9f       	mul	r24, r17
    50aa:	c0 01       	movw	r24, r0
    50ac:	11 24       	eor	r1, r1
    50ae:	28 0f       	add	r18, r24
    50b0:	2e 83       	std	Y+6, r18	; 0x06
    50b2:	80 2f       	mov	r24, r16
    50b4:	80 95       	com	r24
    50b6:	88 1f       	adc	r24, r24
    50b8:	88 27       	eor	r24, r24
    50ba:	88 1f       	adc	r24, r24
  tm.Month = bcd2dec(Wire.receive() );
  tm.Year = y2kYearToTm((bcd2dec(Wire.receive())));
#endif
  if (sec & 0x80) return false; // clock is halted
  return true;
}
    50bc:	df 91       	pop	r29
    50be:	cf 91       	pop	r28
    50c0:	1f 91       	pop	r17
    50c2:	0f 91       	pop	r16
    50c4:	08 95       	ret

000050c6 <_ZN9DS1307RTC3getEv>:
{
  Wire.begin();
}
  
// PUBLIC FUNCTIONS
time_t DS1307RTC::get()   // Aquire data from buffer and convert to time_t
    50c6:	0f 93       	push	r16
    50c8:	1f 93       	push	r17
    50ca:	df 93       	push	r29
    50cc:	cf 93       	push	r28
    50ce:	cd b7       	in	r28, 0x3d	; 61
    50d0:	de b7       	in	r29, 0x3e	; 62
    50d2:	27 97       	sbiw	r28, 0x07	; 7
    50d4:	0f b6       	in	r0, 0x3f	; 63
    50d6:	f8 94       	cli
    50d8:	de bf       	out	0x3e, r29	; 62
    50da:	0f be       	out	0x3f, r0	; 63
    50dc:	cd bf       	out	0x3d, r28	; 61
{
  tmElements_t tm;
  if (read(tm) == false) return 0;
    50de:	8e 01       	movw	r16, r28
    50e0:	0f 5f       	subi	r16, 0xFF	; 255
    50e2:	1f 4f       	sbci	r17, 0xFF	; 255
    50e4:	c8 01       	movw	r24, r16
    50e6:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <_ZN9DS1307RTC4readER12tmElements_t>
    50ea:	88 23       	and	r24, r24
    50ec:	29 f4       	brne	.+10     	; 0x50f8 <_ZN9DS1307RTC3getEv+0x32>
    50ee:	20 e0       	ldi	r18, 0x00	; 0
    50f0:	30 e0       	ldi	r19, 0x00	; 0
    50f2:	40 e0       	ldi	r20, 0x00	; 0
    50f4:	50 e0       	ldi	r21, 0x00	; 0
    50f6:	05 c0       	rjmp	.+10     	; 0x5102 <_ZN9DS1307RTC3getEv+0x3c>
  return(makeTime(tm));
    50f8:	c8 01       	movw	r24, r16
    50fa:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <_Z8makeTimeR12tmElements_t>
    50fe:	9b 01       	movw	r18, r22
    5100:	ac 01       	movw	r20, r24
}
    5102:	b9 01       	movw	r22, r18
    5104:	ca 01       	movw	r24, r20
    5106:	27 96       	adiw	r28, 0x07	; 7
    5108:	0f b6       	in	r0, 0x3f	; 63
    510a:	f8 94       	cli
    510c:	de bf       	out	0x3e, r29	; 62
    510e:	0f be       	out	0x3f, r0	; 63
    5110:	cd bf       	out	0x3d, r28	; 61
    5112:	cf 91       	pop	r28
    5114:	df 91       	pop	r29
    5116:	1f 91       	pop	r17
    5118:	0f 91       	pop	r16
    511a:	08 95       	ret

0000511c <_GLOBAL__I__ZN9DS1307RTCC2Ev>:

#define DS1307_CTRL_ID 0x68 

DS1307RTC::DS1307RTC()
{
  Wire.begin();
    511c:	83 eb       	ldi	r24, 0xB3	; 179
    511e:	93 e0       	ldi	r25, 0x03	; 3
    5120:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <_ZN7TwoWire5beginEv>
  return ((num/16 * 10) + (num % 16));
}

bool DS1307RTC::exists = false;

DS1307RTC RTC = DS1307RTC(); // create an instance for the user
    5124:	08 95       	ret

00005126 <_ZN7OneWire12reset_searchEv>:

//
// You need to use this function to start a search again from the beginning.
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
    5126:	fc 01       	movw	r30, r24
{
  // reset the search state
  LastDiscrepancy = 0;
    5128:	13 86       	std	Z+11, r1	; 0x0b
  LastDeviceFlag = FALSE;
    512a:	15 86       	std	Z+13, r1	; 0x0d
  LastFamilyDiscrepancy = 0;
    512c:	14 86       	std	Z+12, r1	; 0x0c
    512e:	87 e0       	ldi	r24, 0x07	; 7
    5130:	90 e0       	ldi	r25, 0x00	; 0
  for(int i = 7; ; i--) {
    ROM_NO[i] = 0;
    5132:	12 86       	std	Z+10, r1	; 0x0a
    5134:	31 97       	sbiw	r30, 0x01	; 1
    if ( i == 0) break;
    5136:	00 97       	sbiw	r24, 0x00	; 0
    5138:	11 f0       	breq	.+4      	; 0x513e <_ZN7OneWire12reset_searchEv+0x18>
{
  // reset the search state
  LastDiscrepancy = 0;
  LastDeviceFlag = FALSE;
  LastFamilyDiscrepancy = 0;
  for(int i = 7; ; i--) {
    513a:	01 97       	sbiw	r24, 0x01	; 1
    513c:	fa cf       	rjmp	.-12     	; 0x5132 <_ZN7OneWire12reset_searchEv+0xc>
    513e:	08 95       	ret

00005140 <_ZN7OneWire4crc8EPKhh>:
// and the registers.  (note: this might better be done without to
// table, it would probably be smaller and certainly fast enough
// compared to all those delayMicrosecond() calls.  But I got
// confused, so I use this table from the examples.)
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
    5140:	dc 01       	movw	r26, r24
    5142:	80 e0       	ldi	r24, 0x00	; 0
    5144:	0b c0       	rjmp	.+22     	; 0x515c <_ZN7OneWire4crc8EPKhh+0x1c>
{
	uint8_t crc = 0;

	while (len--) {
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
    5146:	e8 2f       	mov	r30, r24
    5148:	f0 e0       	ldi	r31, 0x00	; 0
    514a:	8d 91       	ld	r24, X+
    514c:	90 e0       	ldi	r25, 0x00	; 0
    514e:	e8 27       	eor	r30, r24
    5150:	f9 27       	eor	r31, r25
    5152:	e5 5d       	subi	r30, 0xD5	; 213
    5154:	f7 4f       	sbci	r31, 0xF7	; 247
    5156:	e4 91       	lpm	r30, Z+
    5158:	61 50       	subi	r22, 0x01	; 1
    515a:	8e 2f       	mov	r24, r30
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;

	while (len--) {
    515c:	66 23       	and	r22, r22
    515e:	99 f7       	brne	.-26     	; 0x5146 <_ZN7OneWire4crc8EPKhh+0x6>
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
	}
	return crc;
}
    5160:	08 95       	ret

00005162 <_ZN7OneWire8read_bitEv>:

//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
    5162:	df 92       	push	r13
    5164:	ef 92       	push	r14
    5166:	ff 92       	push	r15
    5168:	0f 93       	push	r16
    516a:	1f 93       	push	r17
    516c:	fc 01       	movw	r30, r24
{
	IO_REG_TYPE mask=bitmask;
    516e:	e0 80       	ld	r14, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    5170:	01 81       	ldd	r16, Z+1	; 0x01
    5172:	12 81       	ldd	r17, Z+2	; 0x02
	uint8_t r;

	noInterrupts();
    5174:	f8 94       	cli
	DIRECT_MODE_OUTPUT(reg, mask);
    5176:	f8 01       	movw	r30, r16
    5178:	81 81       	ldd	r24, Z+1	; 0x01
    517a:	8e 29       	or	r24, r14
    517c:	81 83       	std	Z+1, r24	; 0x01
	DIRECT_WRITE_LOW(reg, mask);
    517e:	82 81       	ldd	r24, Z+2	; 0x02
    5180:	de 2c       	mov	r13, r14
    5182:	d0 94       	com	r13
    5184:	8d 21       	and	r24, r13
    5186:	82 83       	std	Z+2, r24	; 0x02
	delayMicroseconds(3);
    5188:	83 e0       	ldi	r24, 0x03	; 3
    518a:	90 e0       	ldi	r25, 0x00	; 0
    518c:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <delayMicroseconds>
	DIRECT_MODE_INPUT(reg, mask);	// let pin float, pull up will raise
    5190:	f8 01       	movw	r30, r16
    5192:	81 81       	ldd	r24, Z+1	; 0x01
    5194:	8d 21       	and	r24, r13
    5196:	81 83       	std	Z+1, r24	; 0x01
	delayMicroseconds(10);
    5198:	8a e0       	ldi	r24, 0x0A	; 10
    519a:	90 e0       	ldi	r25, 0x00	; 0
    519c:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <delayMicroseconds>
	r = DIRECT_READ(reg, mask);
    51a0:	f8 01       	movw	r30, r16
    51a2:	00 81       	ld	r16, Z
	interrupts();
    51a4:	78 94       	sei
	delayMicroseconds(53);
    51a6:	85 e3       	ldi	r24, 0x35	; 53
    51a8:	90 e0       	ldi	r25, 0x00	; 0
    51aa:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <delayMicroseconds>
    51ae:	80 e0       	ldi	r24, 0x00	; 0
    51b0:	10 e0       	ldi	r17, 0x00	; 0
    51b2:	ff 24       	eor	r15, r15
    51b4:	0e 21       	and	r16, r14
    51b6:	1f 21       	and	r17, r15
    51b8:	01 2b       	or	r16, r17
    51ba:	09 f0       	breq	.+2      	; 0x51be <_ZN7OneWire8read_bitEv+0x5c>
    51bc:	81 e0       	ldi	r24, 0x01	; 1
	return r;
}
    51be:	1f 91       	pop	r17
    51c0:	0f 91       	pop	r16
    51c2:	ff 90       	pop	r15
    51c4:	ef 90       	pop	r14
    51c6:	df 90       	pop	r13
    51c8:	08 95       	ret

000051ca <_ZN7OneWire4readEv>:
}

//
// Read a byte
//
uint8_t OneWire::read() {
    51ca:	ef 92       	push	r14
    51cc:	ff 92       	push	r15
    51ce:	0f 93       	push	r16
    51d0:	1f 93       	push	r17
    51d2:	cf 93       	push	r28
    51d4:	df 93       	push	r29
    51d6:	7c 01       	movw	r14, r24
    51d8:	01 e0       	ldi	r16, 0x01	; 1
    51da:	10 e0       	ldi	r17, 0x00	; 0
    51dc:	c0 e0       	ldi	r28, 0x00	; 0
    51de:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
	if ( OneWire::read_bit()) r |= bitMask;
    51e0:	c7 01       	movw	r24, r14
    51e2:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN7OneWire8read_bitEv>
    51e6:	81 11       	cpse	r24, r1
    51e8:	10 2b       	or	r17, r16
//
uint8_t OneWire::read() {
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    51ea:	00 0f       	add	r16, r16
    51ec:	21 96       	adiw	r28, 0x01	; 1
    51ee:	c8 30       	cpi	r28, 0x08	; 8
    51f0:	d1 05       	cpc	r29, r1
    51f2:	b1 f7       	brne	.-20     	; 0x51e0 <_ZN7OneWire4readEv+0x16>
	if ( OneWire::read_bit()) r |= bitMask;
    }
    return r;
}
    51f4:	81 2f       	mov	r24, r17
    51f6:	df 91       	pop	r29
    51f8:	cf 91       	pop	r28
    51fa:	1f 91       	pop	r17
    51fc:	0f 91       	pop	r16
    51fe:	ff 90       	pop	r15
    5200:	ef 90       	pop	r14
    5202:	08 95       	ret

00005204 <_ZN7OneWire9write_bitEh>:

//
// Write a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
void OneWire::write_bit(uint8_t v)
    5204:	1f 93       	push	r17
    5206:	cf 93       	push	r28
    5208:	df 93       	push	r29
    520a:	fc 01       	movw	r30, r24
{
	IO_REG_TYPE mask=bitmask;
    520c:	10 81       	ld	r17, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    520e:	c1 81       	ldd	r28, Z+1	; 0x01
    5210:	d2 81       	ldd	r29, Z+2	; 0x02
    5212:	91 2f       	mov	r25, r17
    5214:	90 95       	com	r25

	if (v & 1) {
    5216:	60 ff       	sbrs	r22, 0
    5218:	12 c0       	rjmp	.+36     	; 0x523e <_ZN7OneWire9write_bitEh+0x3a>
		noInterrupts();
    521a:	f8 94       	cli
		DIRECT_WRITE_LOW(reg, mask);
    521c:	8a 81       	ldd	r24, Y+2	; 0x02
    521e:	89 23       	and	r24, r25
    5220:	8a 83       	std	Y+2, r24	; 0x02
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    5222:	89 81       	ldd	r24, Y+1	; 0x01
    5224:	81 2b       	or	r24, r17
    5226:	89 83       	std	Y+1, r24	; 0x01
		delayMicroseconds(10);
    5228:	8a e0       	ldi	r24, 0x0A	; 10
    522a:	90 e0       	ldi	r25, 0x00	; 0
    522c:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <delayMicroseconds>
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
    5230:	8a 81       	ldd	r24, Y+2	; 0x02
    5232:	81 2b       	or	r24, r17
    5234:	8a 83       	std	Y+2, r24	; 0x02
		interrupts();
    5236:	78 94       	sei
		delayMicroseconds(55);
    5238:	87 e3       	ldi	r24, 0x37	; 55
    523a:	90 e0       	ldi	r25, 0x00	; 0
    523c:	11 c0       	rjmp	.+34     	; 0x5260 <_ZN7OneWire9write_bitEh+0x5c>
	} else {
		noInterrupts();
    523e:	f8 94       	cli
		DIRECT_WRITE_LOW(reg, mask);
    5240:	8a 81       	ldd	r24, Y+2	; 0x02
    5242:	89 23       	and	r24, r25
    5244:	8a 83       	std	Y+2, r24	; 0x02
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    5246:	89 81       	ldd	r24, Y+1	; 0x01
    5248:	81 2b       	or	r24, r17
    524a:	89 83       	std	Y+1, r24	; 0x01
		delayMicroseconds(65);
    524c:	81 e4       	ldi	r24, 0x41	; 65
    524e:	90 e0       	ldi	r25, 0x00	; 0
    5250:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <delayMicroseconds>
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
    5254:	8a 81       	ldd	r24, Y+2	; 0x02
    5256:	81 2b       	or	r24, r17
    5258:	8a 83       	std	Y+2, r24	; 0x02
		interrupts();
    525a:	78 94       	sei
		delayMicroseconds(5);
    525c:	85 e0       	ldi	r24, 0x05	; 5
    525e:	90 e0       	ldi	r25, 0x00	; 0
    5260:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <delayMicroseconds>
	}
}
    5264:	df 91       	pop	r29
    5266:	cf 91       	pop	r28
    5268:	1f 91       	pop	r17
    526a:	08 95       	ret

0000526c <_ZN7OneWire5writeEhh>:
// pin high, if you need power after the write (e.g. DS18S20 in
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) {
    526c:	cf 92       	push	r12
    526e:	df 92       	push	r13
    5270:	ef 92       	push	r14
    5272:	ff 92       	push	r15
    5274:	0f 93       	push	r16
    5276:	1f 93       	push	r17
    5278:	cf 93       	push	r28
    527a:	df 93       	push	r29
    527c:	8c 01       	movw	r16, r24
    527e:	e4 2e       	mov	r14, r20
    5280:	ff 24       	eor	r15, r15
    5282:	f3 94       	inc	r15
    5284:	c0 e0       	ldi	r28, 0x00	; 0
    5286:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
	OneWire::write_bit( (bitMask & v)?1:0);
    5288:	c6 2e       	mov	r12, r22
    528a:	dd 24       	eor	r13, r13
    528c:	60 e0       	ldi	r22, 0x00	; 0
    528e:	8f 2d       	mov	r24, r15
    5290:	90 e0       	ldi	r25, 0x00	; 0
    5292:	8c 21       	and	r24, r12
    5294:	9d 21       	and	r25, r13
    5296:	89 2b       	or	r24, r25
    5298:	09 f0       	breq	.+2      	; 0x529c <_ZN7OneWire5writeEhh+0x30>
    529a:	61 e0       	ldi	r22, 0x01	; 1
    529c:	c8 01       	movw	r24, r16
    529e:	0e 94 02 29 	call	0x5204	; 0x5204 <_ZN7OneWire9write_bitEh>
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) {
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    52a2:	ff 0c       	add	r15, r15
    52a4:	21 96       	adiw	r28, 0x01	; 1
    52a6:	c8 30       	cpi	r28, 0x08	; 8
    52a8:	d1 05       	cpc	r29, r1
    52aa:	81 f7       	brne	.-32     	; 0x528c <_ZN7OneWire5writeEhh+0x20>
	OneWire::write_bit( (bitMask & v)?1:0);
    }
    if ( !power) {
    52ac:	ee 20       	and	r14, r14
    52ae:	a9 f4       	brne	.+42     	; 0x52da <_ZN7OneWire5writeEhh+0x6e>
	noInterrupts();
    52b0:	f8 94       	cli
	DIRECT_MODE_INPUT(baseReg, bitmask);
    52b2:	d8 01       	movw	r26, r16
    52b4:	11 96       	adiw	r26, 0x01	; 1
    52b6:	ed 91       	ld	r30, X+
    52b8:	fc 91       	ld	r31, X
    52ba:	12 97       	sbiw	r26, 0x02	; 2
    52bc:	91 81       	ldd	r25, Z+1	; 0x01
    52be:	8c 91       	ld	r24, X
    52c0:	80 95       	com	r24
    52c2:	98 23       	and	r25, r24
    52c4:	91 83       	std	Z+1, r25	; 0x01
	DIRECT_WRITE_LOW(baseReg, bitmask);
    52c6:	11 96       	adiw	r26, 0x01	; 1
    52c8:	ed 91       	ld	r30, X+
    52ca:	fc 91       	ld	r31, X
    52cc:	12 97       	sbiw	r26, 0x02	; 2
    52ce:	92 81       	ldd	r25, Z+2	; 0x02
    52d0:	8c 91       	ld	r24, X
    52d2:	80 95       	com	r24
    52d4:	98 23       	and	r25, r24
    52d6:	92 83       	std	Z+2, r25	; 0x02
	interrupts();
    52d8:	78 94       	sei
    }
}
    52da:	df 91       	pop	r29
    52dc:	cf 91       	pop	r28
    52de:	1f 91       	pop	r17
    52e0:	0f 91       	pop	r16
    52e2:	ff 90       	pop	r15
    52e4:	ef 90       	pop	r14
    52e6:	df 90       	pop	r13
    52e8:	cf 90       	pop	r12
    52ea:	08 95       	ret

000052ec <_ZN7OneWire6selectEPKh>:
}

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
    52ec:	ef 92       	push	r14
    52ee:	ff 92       	push	r15
    52f0:	0f 93       	push	r16
    52f2:	1f 93       	push	r17
    52f4:	cf 93       	push	r28
    52f6:	df 93       	push	r29
    52f8:	8c 01       	movw	r16, r24
    52fa:	7b 01       	movw	r14, r22
{
    uint8_t i;

    write(0x55);           // Choose ROM
    52fc:	65 e5       	ldi	r22, 0x55	; 85
    52fe:	40 e0       	ldi	r20, 0x00	; 0
    5300:	0e 94 36 29 	call	0x526c	; 0x526c <_ZN7OneWire5writeEhh>
    5304:	c0 e0       	ldi	r28, 0x00	; 0
    5306:	d0 e0       	ldi	r29, 0x00	; 0

    for (i = 0; i < 8; i++) write(rom[i]);
    5308:	f7 01       	movw	r30, r14
    530a:	ec 0f       	add	r30, r28
    530c:	fd 1f       	adc	r31, r29
    530e:	c8 01       	movw	r24, r16
    5310:	60 81       	ld	r22, Z
    5312:	40 e0       	ldi	r20, 0x00	; 0
    5314:	0e 94 36 29 	call	0x526c	; 0x526c <_ZN7OneWire5writeEhh>
    5318:	21 96       	adiw	r28, 0x01	; 1
    531a:	c8 30       	cpi	r28, 0x08	; 8
    531c:	d1 05       	cpc	r29, r1
    531e:	a1 f7       	brne	.-24     	; 0x5308 <_ZN7OneWire6selectEPKh+0x1c>
}
    5320:	df 91       	pop	r29
    5322:	cf 91       	pop	r28
    5324:	1f 91       	pop	r17
    5326:	0f 91       	pop	r16
    5328:	ff 90       	pop	r15
    532a:	ef 90       	pop	r14
    532c:	08 95       	ret

0000532e <_ZN7OneWire5resetEv>:
// the bus to come high, if it doesn't then it is broken or shorted
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
    532e:	df 92       	push	r13
    5330:	ef 92       	push	r14
    5332:	ff 92       	push	r15
    5334:	0f 93       	push	r16
    5336:	1f 93       	push	r17
    5338:	cf 93       	push	r28
    533a:	df 93       	push	r29
    533c:	fc 01       	movw	r30, r24
{
	IO_REG_TYPE mask = bitmask;
    533e:	00 81       	ld	r16, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    5340:	c1 81       	ldd	r28, Z+1	; 0x01
    5342:	d2 81       	ldd	r29, Z+2	; 0x02
	uint8_t r;
	uint8_t retries = 125;

	noInterrupts();
    5344:	f8 94       	cli
	DIRECT_MODE_INPUT(reg, mask);
    5346:	89 81       	ldd	r24, Y+1	; 0x01
    5348:	d0 2e       	mov	r13, r16
    534a:	d0 94       	com	r13
    534c:	8d 21       	and	r24, r13
    534e:	89 83       	std	Y+1, r24	; 0x01
	interrupts();
    5350:	78 94       	sei
    5352:	1d e7       	ldi	r17, 0x7D	; 125
	// wait until the wire is high... just in case
	do {
    5354:	e0 2e       	mov	r14, r16
    5356:	ff 24       	eor	r15, r15
		if (--retries == 0) return 0;
    5358:	11 50       	subi	r17, 0x01	; 1
    535a:	59 f1       	breq	.+86     	; 0x53b2 <_ZN7OneWire5resetEv+0x84>
		delayMicroseconds(2);
    535c:	82 e0       	ldi	r24, 0x02	; 2
    535e:	90 e0       	ldi	r25, 0x00	; 0
    5360:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <delayMicroseconds>

	noInterrupts();
	DIRECT_MODE_INPUT(reg, mask);
	interrupts();
	// wait until the wire is high... just in case
	do {
    5364:	88 81       	ld	r24, Y
    5366:	90 e0       	ldi	r25, 0x00	; 0
    5368:	8e 21       	and	r24, r14
    536a:	9f 21       	and	r25, r15
    536c:	89 2b       	or	r24, r25
    536e:	a1 f3       	breq	.-24     	; 0x5358 <_ZN7OneWire5resetEv+0x2a>
		if (--retries == 0) return 0;
		delayMicroseconds(2);
	} while ( !DIRECT_READ(reg, mask));

	noInterrupts();
    5370:	f8 94       	cli
	DIRECT_WRITE_LOW(reg, mask);
    5372:	8a 81       	ldd	r24, Y+2	; 0x02
    5374:	8d 21       	and	r24, r13
    5376:	8a 83       	std	Y+2, r24	; 0x02
	DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    5378:	89 81       	ldd	r24, Y+1	; 0x01
    537a:	80 2b       	or	r24, r16
    537c:	89 83       	std	Y+1, r24	; 0x01
	interrupts();
    537e:	78 94       	sei
	delayMicroseconds(480);
    5380:	80 ee       	ldi	r24, 0xE0	; 224
    5382:	91 e0       	ldi	r25, 0x01	; 1
    5384:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <delayMicroseconds>
	noInterrupts();
    5388:	f8 94       	cli
	DIRECT_MODE_INPUT(reg, mask);	// allow it to float
    538a:	89 81       	ldd	r24, Y+1	; 0x01
    538c:	8d 21       	and	r24, r13
    538e:	89 83       	std	Y+1, r24	; 0x01
	delayMicroseconds(70);
    5390:	86 e4       	ldi	r24, 0x46	; 70
    5392:	90 e0       	ldi	r25, 0x00	; 0
    5394:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <delayMicroseconds>
	r = !DIRECT_READ(reg, mask);
    5398:	88 81       	ld	r24, Y
    539a:	10 e0       	ldi	r17, 0x00	; 0
    539c:	90 e0       	ldi	r25, 0x00	; 0
    539e:	e8 22       	and	r14, r24
    53a0:	f9 22       	and	r15, r25
    53a2:	ef 28       	or	r14, r15
    53a4:	09 f4       	brne	.+2      	; 0x53a8 <_ZN7OneWire5resetEv+0x7a>
    53a6:	11 e0       	ldi	r17, 0x01	; 1
	interrupts();
    53a8:	78 94       	sei
	delayMicroseconds(410);
    53aa:	8a e9       	ldi	r24, 0x9A	; 154
    53ac:	91 e0       	ldi	r25, 0x01	; 1
    53ae:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <delayMicroseconds>
	return r;
}
    53b2:	81 2f       	mov	r24, r17
    53b4:	df 91       	pop	r29
    53b6:	cf 91       	pop	r28
    53b8:	1f 91       	pop	r17
    53ba:	0f 91       	pop	r16
    53bc:	ff 90       	pop	r15
    53be:	ef 90       	pop	r14
    53c0:	df 90       	pop	r13
    53c2:	08 95       	ret

000053c4 <_ZN7OneWire6searchEPh>:
// Perform the 1-Wire Search Algorithm on the 1-Wire bus using the existing
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
    53c4:	af 92       	push	r10
    53c6:	bf 92       	push	r11
    53c8:	df 92       	push	r13
    53ca:	ef 92       	push	r14
    53cc:	ff 92       	push	r15
    53ce:	0f 93       	push	r16
    53d0:	1f 93       	push	r17
    53d2:	cf 93       	push	r28
    53d4:	df 93       	push	r29
    53d6:	ec 01       	movw	r28, r24
    53d8:	5b 01       	movw	r10, r22
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = 0;

   // if the last call was not the last one
   if (!LastDeviceFlag)
    53da:	8d 85       	ldd	r24, Y+13	; 0x0d
    53dc:	88 23       	and	r24, r24
    53de:	09 f0       	breq	.+2      	; 0x53e2 <_ZN7OneWire6searchEPh+0x1e>
    53e0:	61 c0       	rjmp	.+194    	; 0x54a4 <_ZN7OneWire6searchEPh+0xe0>
   {
      // 1-Wire reset
      if (!reset())
    53e2:	ce 01       	movw	r24, r28
    53e4:	0e 94 97 29 	call	0x532e	; 0x532e <_ZN7OneWire5resetEv>
    53e8:	88 23       	and	r24, r24
    53ea:	29 f4       	brne	.+10     	; 0x53f6 <_ZN7OneWire6searchEPh+0x32>
      {
         // reset the search
         LastDiscrepancy = 0;
    53ec:	1b 86       	std	Y+11, r1	; 0x0b
         LastDeviceFlag = FALSE;
    53ee:	1d 86       	std	Y+13, r1	; 0x0d
         LastFamilyDiscrepancy = 0;
    53f0:	1c 86       	std	Y+12, r1	; 0x0c
    53f2:	90 e0       	ldi	r25, 0x00	; 0
    53f4:	6b c0       	rjmp	.+214    	; 0x54cc <_ZN7OneWire6searchEPh+0x108>
         return FALSE;
      }

      // issue the search command
      write(0xF0);
    53f6:	ce 01       	movw	r24, r28
    53f8:	60 ef       	ldi	r22, 0xF0	; 240
    53fa:	40 e0       	ldi	r20, 0x00	; 0
    53fc:	0e 94 36 29 	call	0x526c	; 0x526c <_ZN7OneWire5writeEhh>
    5400:	01 e0       	ldi	r16, 0x01	; 1
    5402:	dd 24       	eor	r13, r13
    5404:	ee 24       	eor	r14, r14
    5406:	ff 24       	eor	r15, r15
    5408:	f3 94       	inc	r15

      // loop to do the search
      do
      {
         // read a bit and its complement
         id_bit = read_bit();
    540a:	ce 01       	movw	r24, r28
    540c:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN7OneWire8read_bitEv>
    5410:	18 2f       	mov	r17, r24
         cmp_id_bit = read_bit();
    5412:	ce 01       	movw	r24, r28
    5414:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN7OneWire8read_bitEv>

         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1))
    5418:	11 30       	cpi	r17, 0x01	; 1
    541a:	19 f4       	brne	.+6      	; 0x5422 <_ZN7OneWire6searchEPh+0x5e>
    541c:	81 30       	cpi	r24, 0x01	; 1
    541e:	e1 f4       	brne	.+56     	; 0x5458 <_ZN7OneWire6searchEPh+0x94>
    5420:	39 c0       	rjmp	.+114    	; 0x5494 <_ZN7OneWire6searchEPh+0xd0>
            break;
         else
         {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit)
    5422:	18 17       	cp	r17, r24
    5424:	09 f5       	brne	.+66     	; 0x5468 <_ZN7OneWire6searchEPh+0xa4>
               search_direction = id_bit;  // bit write value for search
            else
            {
               // if this discrepancy if before the Last Discrepancy
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy)
    5426:	8b 85       	ldd	r24, Y+11	; 0x0b
    5428:	08 17       	cp	r16, r24
    542a:	70 f4       	brcc	.+28     	; 0x5448 <_ZN7OneWire6searchEPh+0x84>
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
    542c:	60 e0       	ldi	r22, 0x00	; 0
    542e:	fe 01       	movw	r30, r28
    5430:	ee 0d       	add	r30, r14
    5432:	f1 1d       	adc	r31, r1
    5434:	83 81       	ldd	r24, Z+3	; 0x03
    5436:	90 e0       	ldi	r25, 0x00	; 0
    5438:	2f 2d       	mov	r18, r15
    543a:	30 e0       	ldi	r19, 0x00	; 0
    543c:	82 23       	and	r24, r18
    543e:	93 23       	and	r25, r19
    5440:	18 16       	cp	r1, r24
    5442:	19 06       	cpc	r1, r25
    5444:	4c f0       	brlt	.+18     	; 0x5458 <_ZN7OneWire6searchEPh+0x94>
    5446:	03 c0       	rjmp	.+6      	; 0x544e <_ZN7OneWire6searchEPh+0x8a>
               else
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    5448:	60 e0       	ldi	r22, 0x00	; 0
    544a:	08 17       	cp	r16, r24
    544c:	29 f0       	breq	.+10     	; 0x5458 <_ZN7OneWire6searchEPh+0x94>
               if (search_direction == 0)
               {
                  last_zero = id_bit_number;

                  // check for Last discrepancy in family
                  if (last_zero < 9)
    544e:	09 30       	cpi	r16, 0x09	; 9
    5450:	08 f0       	brcs	.+2      	; 0x5454 <_ZN7OneWire6searchEPh+0x90>
    5452:	4c c0       	rjmp	.+152    	; 0x54ec <_ZN7OneWire6searchEPh+0x128>
                     LastFamilyDiscrepancy = last_zero;
    5454:	0c 87       	std	Y+12, r16	; 0x0c
    5456:	4a c0       	rjmp	.+148    	; 0x54ec <_ZN7OneWire6searchEPh+0x128>
            }

            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
    5458:	fe 01       	movw	r30, r28
    545a:	ee 0d       	add	r30, r14
    545c:	f1 1d       	adc	r31, r1
    545e:	83 81       	ldd	r24, Z+3	; 0x03
    5460:	8f 29       	or	r24, r15
    5462:	83 83       	std	Z+3, r24	; 0x03
    5464:	61 e0       	ldi	r22, 0x01	; 1
    5466:	09 c0       	rjmp	.+18     	; 0x547a <_ZN7OneWire6searchEPh+0xb6>
    5468:	61 2f       	mov	r22, r17
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;
    546a:	fe 01       	movw	r30, r28
    546c:	ee 0d       	add	r30, r14
    546e:	f1 1d       	adc	r31, r1
    5470:	9f 2d       	mov	r25, r15
    5472:	90 95       	com	r25
    5474:	83 81       	ldd	r24, Z+3	; 0x03
    5476:	89 23       	and	r24, r25
    5478:	83 83       	std	Z+3, r24	; 0x03

            // serial number search direction write bit
            write_bit(search_direction);
    547a:	ce 01       	movw	r24, r28
    547c:	0e 94 02 29 	call	0x5204	; 0x5204 <_ZN7OneWire9write_bitEh>

            // increment the byte counter id_bit_number
            // and shift the mask rom_byte_mask
            id_bit_number++;
    5480:	0f 5f       	subi	r16, 0xFF	; 255
            rom_byte_mask <<= 1;
    5482:	ff 0c       	add	r15, r15

            // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
            if (rom_byte_mask == 0)
    5484:	19 f4       	brne	.+6      	; 0x548c <_ZN7OneWire6searchEPh+0xc8>
            {
                rom_byte_number++;
    5486:	e3 94       	inc	r14
    5488:	ff 24       	eor	r15, r15
    548a:	f3 94       	inc	r15

      // issue the search command
      write(0xF0);

      // loop to do the search
      do
    548c:	87 e0       	ldi	r24, 0x07	; 7
    548e:	8e 15       	cp	r24, r14
    5490:	08 f0       	brcs	.+2      	; 0x5494 <_ZN7OneWire6searchEPh+0xd0>
    5492:	bb cf       	rjmp	.-138    	; 0x540a <_ZN7OneWire6searchEPh+0x46>
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7

      // if the search was successful then
      if (!(id_bit_number < 65))
    5494:	01 34       	cpi	r16, 0x41	; 65
    5496:	30 f0       	brcs	.+12     	; 0x54a4 <_ZN7OneWire6searchEPh+0xe0>
      {
         // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
         LastDiscrepancy = last_zero;
    5498:	db 86       	std	Y+11, r13	; 0x0b

         // check for last device
         if (LastDiscrepancy == 0)
    549a:	dd 20       	and	r13, r13
    549c:	11 f5       	brne	.+68     	; 0x54e2 <_ZN7OneWire6searchEPh+0x11e>
            LastDeviceFlag = TRUE;
    549e:	81 e0       	ldi	r24, 0x01	; 1
    54a0:	8d 87       	std	Y+13, r24	; 0x0d
    54a2:	1f c0       	rjmp	.+62     	; 0x54e2 <_ZN7OneWire6searchEPh+0x11e>
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
   {
      LastDiscrepancy = 0;
    54a4:	1b 86       	std	Y+11, r1	; 0x0b
      LastDeviceFlag = FALSE;
    54a6:	1d 86       	std	Y+13, r1	; 0x0d
      LastFamilyDiscrepancy = 0;
    54a8:	1c 86       	std	Y+12, r1	; 0x0c
    54aa:	90 e0       	ldi	r25, 0x00	; 0
    54ac:	de 01       	movw	r26, r28
    54ae:	20 e0       	ldi	r18, 0x00	; 0
    54b0:	30 e0       	ldi	r19, 0x00	; 0
      search_result = FALSE;
   }
   for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
    54b2:	f5 01       	movw	r30, r10
    54b4:	e2 0f       	add	r30, r18
    54b6:	f3 1f       	adc	r31, r19
    54b8:	13 96       	adiw	r26, 0x03	; 3
    54ba:	8c 91       	ld	r24, X
    54bc:	13 97       	sbiw	r26, 0x03	; 3
    54be:	80 83       	st	Z, r24
    54c0:	2f 5f       	subi	r18, 0xFF	; 255
    54c2:	3f 4f       	sbci	r19, 0xFF	; 255
    54c4:	11 96       	adiw	r26, 0x01	; 1
    54c6:	28 30       	cpi	r18, 0x08	; 8
    54c8:	31 05       	cpc	r19, r1
    54ca:	99 f7       	brne	.-26     	; 0x54b2 <_ZN7OneWire6searchEPh+0xee>
   return search_result;
  }
    54cc:	89 2f       	mov	r24, r25
    54ce:	df 91       	pop	r29
    54d0:	cf 91       	pop	r28
    54d2:	1f 91       	pop	r17
    54d4:	0f 91       	pop	r16
    54d6:	ff 90       	pop	r15
    54d8:	ef 90       	pop	r14
    54da:	df 90       	pop	r13
    54dc:	bf 90       	pop	r11
    54de:	af 90       	pop	r10
    54e0:	08 95       	ret
         search_result = TRUE;
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
    54e2:	8b 81       	ldd	r24, Y+3	; 0x03
    54e4:	88 23       	and	r24, r24
    54e6:	f1 f2       	breq	.-68     	; 0x54a4 <_ZN7OneWire6searchEPh+0xe0>
    54e8:	91 e0       	ldi	r25, 0x01	; 1
    54ea:	e0 cf       	rjmp	.-64     	; 0x54ac <_ZN7OneWire6searchEPh+0xe8>
    54ec:	d0 2e       	mov	r13, r16
    54ee:	bd cf       	rjmp	.-134    	; 0x546a <_ZN7OneWire6searchEPh+0xa6>

000054f0 <_ZN7OneWireC1Eh>:
*/

#include "OneWire.h"


OneWire::OneWire(uint8_t pin)
    54f0:	ff 92       	push	r15
    54f2:	0f 93       	push	r16
    54f4:	1f 93       	push	r17
    54f6:	8c 01       	movw	r16, r24
    54f8:	f6 2e       	mov	r15, r22
{
	pinMode(pin, INPUT);
    54fa:	86 2f       	mov	r24, r22
    54fc:	60 e0       	ldi	r22, 0x00	; 0
    54fe:	0e 94 0d 30 	call	0x601a	; 0x601a <pinMode>
	bitmask = PIN_TO_BITMASK(pin);
    5502:	8f 2d       	mov	r24, r15
    5504:	90 e0       	ldi	r25, 0x00	; 0
    5506:	fc 01       	movw	r30, r24
    5508:	e3 5a       	subi	r30, 0xA3	; 163
    550a:	f6 4f       	sbci	r31, 0xF6	; 246
    550c:	e4 91       	lpm	r30, Z+
    550e:	d8 01       	movw	r26, r16
    5510:	ec 93       	st	X, r30
	baseReg = PIN_TO_BASEREG(pin);
    5512:	87 5b       	subi	r24, 0xB7	; 183
    5514:	96 4f       	sbci	r25, 0xF6	; 246
    5516:	fc 01       	movw	r30, r24
    5518:	64 91       	lpm	r22, Z+
    551a:	e6 2f       	mov	r30, r22
    551c:	f0 e0       	ldi	r31, 0x00	; 0
    551e:	ee 0f       	add	r30, r30
    5520:	ff 1f       	adc	r31, r31
    5522:	e1 5c       	subi	r30, 0xC1	; 193
    5524:	f6 4f       	sbci	r31, 0xF6	; 246
    5526:	85 91       	lpm	r24, Z+
    5528:	94 91       	lpm	r25, Z+
    552a:	12 96       	adiw	r26, 0x02	; 2
    552c:	9c 93       	st	X, r25
    552e:	8e 93       	st	-X, r24
    5530:	11 97       	sbiw	r26, 0x01	; 1
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
  // reset the search state
  LastDiscrepancy = 0;
    5532:	1b 96       	adiw	r26, 0x0b	; 11
    5534:	1c 92       	st	X, r1
    5536:	1b 97       	sbiw	r26, 0x0b	; 11
  LastDeviceFlag = FALSE;
    5538:	1d 96       	adiw	r26, 0x0d	; 13
    553a:	1c 92       	st	X, r1
    553c:	1d 97       	sbiw	r26, 0x0d	; 13
  LastFamilyDiscrepancy = 0;
    553e:	1c 96       	adiw	r26, 0x0c	; 12
    5540:	1c 92       	st	X, r1
    5542:	f8 01       	movw	r30, r16
    5544:	87 e0       	ldi	r24, 0x07	; 7
    5546:	90 e0       	ldi	r25, 0x00	; 0
  for(int i = 7; ; i--) {
    ROM_NO[i] = 0;
    5548:	12 86       	std	Z+10, r1	; 0x0a
    554a:	31 97       	sbiw	r30, 0x01	; 1
    if ( i == 0) break;
    554c:	00 97       	sbiw	r24, 0x00	; 0
    554e:	11 f0       	breq	.+4      	; 0x5554 <_ZN7OneWireC1Eh+0x64>
{
  // reset the search state
  LastDiscrepancy = 0;
  LastDeviceFlag = FALSE;
  LastFamilyDiscrepancy = 0;
  for(int i = 7; ; i--) {
    5550:	01 97       	sbiw	r24, 0x01	; 1
    5552:	fa cf       	rjmp	.-12     	; 0x5548 <_ZN7OneWireC1Eh+0x58>
	bitmask = PIN_TO_BITMASK(pin);
	baseReg = PIN_TO_BASEREG(pin);
#if ONEWIRE_SEARCH
	reset_search();
#endif
}
    5554:	1f 91       	pop	r17
    5556:	0f 91       	pop	r16
    5558:	ff 90       	pop	r15
    555a:	08 95       	ret

0000555c <_ZN17DallasTemperatureC1EP7OneWire>:
extern "C" {
    #include "WConstants.h"
}
#endif

DallasTemperature::DallasTemperature(OneWire* _oneWire)
    555c:	fc 01       	movw	r30, r24
  #if REQUIRESALARMS
  : _AlarmHandler(&defaultAlarmHandler)
    555e:	87 e7       	ldi	r24, 0x77	; 119
    5560:	9b e2       	ldi	r25, 0x2B	; 43
    5562:	92 8b       	std	Z+18, r25	; 0x12
    5564:	81 8b       	std	Z+17, r24	; 0x11
  #endif
{
  _wire = _oneWire;
    5566:	76 83       	std	Z+6, r23	; 0x06
    5568:	65 83       	std	Z+5, r22	; 0x05
  devices = 0;
    556a:	14 82       	std	Z+4, r1	; 0x04
  parasite = false;
    556c:	10 82       	st	Z, r1
  bitResolution = 9;
    556e:	89 e0       	ldi	r24, 0x09	; 9
    5570:	81 83       	std	Z+1, r24	; 0x01
  waitForConversion = true;
    5572:	81 e0       	ldi	r24, 0x01	; 1
    5574:	82 83       	std	Z+2, r24	; 0x02
  checkForConversion = true;
    5576:	83 83       	std	Z+3, r24	; 0x03
}
    5578:	08 95       	ret

0000557a <_ZN17DallasTemperature14getDeviceCountEv>:

// returns the number of devices found on the bus
uint8_t DallasTemperature::getDeviceCount(void)
{
  return devices;
}
    557a:	fc 01       	movw	r30, r24
    557c:	84 81       	ldd	r24, Z+4	; 0x04
    557e:	08 95       	ret

00005580 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>:
{
  return toFahrenheit(getTempCByIndex(deviceIndex));
}

// reads scratchpad and returns the temperature in degrees C
float DallasTemperature::calculateTemperature(uint8_t* deviceAddress, uint8_t* scratchPad)
    5580:	6f 92       	push	r6
    5582:	7f 92       	push	r7
    5584:	8f 92       	push	r8
    5586:	9f 92       	push	r9
    5588:	af 92       	push	r10
    558a:	bf 92       	push	r11
    558c:	cf 92       	push	r12
    558e:	df 92       	push	r13
    5590:	ef 92       	push	r14
    5592:	ff 92       	push	r15
    5594:	0f 93       	push	r16
    5596:	1f 93       	push	r17
    5598:	cf 93       	push	r28
    559a:	df 93       	push	r29
    559c:	fb 01       	movw	r30, r22
    559e:	ea 01       	movw	r28, r20
{
  int16_t rawTemperature = (((int16_t)scratchPad[TEMP_MSB]) << 8) | scratchPad[TEMP_LSB];
    55a0:	99 81       	ldd	r25, Y+1	; 0x01
    55a2:	80 e0       	ldi	r24, 0x00	; 0
    55a4:	28 81       	ld	r18, Y
    55a6:	30 e0       	ldi	r19, 0x00	; 0
    55a8:	28 2b       	or	r18, r24
    55aa:	39 2b       	or	r19, r25

  switch (deviceAddress[0])
    55ac:	e0 81       	ld	r30, Z
    55ae:	e2 32       	cpi	r30, 0x22	; 34
    55b0:	31 f0       	breq	.+12     	; 0x55be <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3e>
    55b2:	e8 32       	cpi	r30, 0x28	; 40
    55b4:	21 f0       	breq	.+8      	; 0x55be <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3e>
    55b6:	e0 31       	cpi	r30, 0x10	; 16
    55b8:	09 f0       	breq	.+2      	; 0x55bc <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3c>
    55ba:	84 c0       	rjmp	.+264    	; 0x56c4 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
    55bc:	4b c0       	rjmp	.+150    	; 0x5654 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xd4>
  {
    case DS18B20MODEL:
    case DS1822MODEL:
      switch (scratchPad[CONFIGURATION])
    55be:	4c 81       	ldd	r20, Y+4	; 0x04
    55c0:	4f 33       	cpi	r20, 0x3F	; 63
    55c2:	29 f1       	breq	.+74     	; 0x560e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x8e>
    55c4:	40 34       	cpi	r20, 0x40	; 64
    55c6:	20 f4       	brcc	.+8      	; 0x55d0 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x50>
    55c8:	4f 31       	cpi	r20, 0x1F	; 31
    55ca:	09 f0       	breq	.+2      	; 0x55ce <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x4e>
    55cc:	7b c0       	rjmp	.+246    	; 0x56c4 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
    55ce:	2f c0       	rjmp	.+94     	; 0x562e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xae>
    55d0:	4f 35       	cpi	r20, 0x5F	; 95
    55d2:	79 f0       	breq	.+30     	; 0x55f2 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x72>
    55d4:	4f 37       	cpi	r20, 0x7F	; 127
    55d6:	09 f0       	breq	.+2      	; 0x55da <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x5a>
    55d8:	75 c0       	rjmp	.+234    	; 0x56c4 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
      {
        case TEMP_12_BIT:
          return (float)rawTemperature * 0.0625;
    55da:	b9 01       	movw	r22, r18
    55dc:	88 27       	eor	r24, r24
    55de:	77 fd       	sbrc	r23, 7
    55e0:	80 95       	com	r24
    55e2:	98 2f       	mov	r25, r24
    55e4:	0e 94 fc 3a 	call	0x75f8	; 0x75f8 <__floatsisf>
    55e8:	20 e0       	ldi	r18, 0x00	; 0
    55ea:	30 e0       	ldi	r19, 0x00	; 0
    55ec:	40 e8       	ldi	r20, 0x80	; 128
    55ee:	5d e3       	ldi	r21, 0x3D	; 61
    55f0:	2e c0       	rjmp	.+92     	; 0x564e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xce>
          break;
        case TEMP_11_BIT:
          return (float)(rawTemperature >> 1) * 0.125;
    55f2:	35 95       	asr	r19
    55f4:	27 95       	ror	r18
    55f6:	b9 01       	movw	r22, r18
    55f8:	88 27       	eor	r24, r24
    55fa:	77 fd       	sbrc	r23, 7
    55fc:	80 95       	com	r24
    55fe:	98 2f       	mov	r25, r24
    5600:	0e 94 fc 3a 	call	0x75f8	; 0x75f8 <__floatsisf>
    5604:	20 e0       	ldi	r18, 0x00	; 0
    5606:	30 e0       	ldi	r19, 0x00	; 0
    5608:	40 e0       	ldi	r20, 0x00	; 0
    560a:	5e e3       	ldi	r21, 0x3E	; 62
    560c:	20 c0       	rjmp	.+64     	; 0x564e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xce>
          break;
        case TEMP_10_BIT:
          return (float)(rawTemperature >> 2) * 0.25;
    560e:	35 95       	asr	r19
    5610:	27 95       	ror	r18
    5612:	35 95       	asr	r19
    5614:	27 95       	ror	r18
    5616:	b9 01       	movw	r22, r18
    5618:	88 27       	eor	r24, r24
    561a:	77 fd       	sbrc	r23, 7
    561c:	80 95       	com	r24
    561e:	98 2f       	mov	r25, r24
    5620:	0e 94 fc 3a 	call	0x75f8	; 0x75f8 <__floatsisf>
    5624:	20 e0       	ldi	r18, 0x00	; 0
    5626:	30 e0       	ldi	r19, 0x00	; 0
    5628:	40 e8       	ldi	r20, 0x80	; 128
    562a:	5e e3       	ldi	r21, 0x3E	; 62
    562c:	10 c0       	rjmp	.+32     	; 0x564e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xce>
          break;
        case TEMP_9_BIT:
          return (float)(rawTemperature >> 3) * 0.5;
    562e:	93 e0       	ldi	r25, 0x03	; 3
    5630:	35 95       	asr	r19
    5632:	27 95       	ror	r18
    5634:	9a 95       	dec	r25
    5636:	e1 f7       	brne	.-8      	; 0x5630 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xb0>
    5638:	b9 01       	movw	r22, r18
    563a:	88 27       	eor	r24, r24
    563c:	77 fd       	sbrc	r23, 7
    563e:	80 95       	com	r24
    5640:	98 2f       	mov	r25, r24
    5642:	0e 94 fc 3a 	call	0x75f8	; 0x75f8 <__floatsisf>
    5646:	20 e0       	ldi	r18, 0x00	; 0
    5648:	30 e0       	ldi	r19, 0x00	; 0
    564a:	40 e0       	ldi	r20, 0x00	; 0
    564c:	5f e3       	ldi	r21, 0x3F	; 63
    564e:	0e 94 b0 3b 	call	0x7760	; 0x7760 <__mulsf3>
    5652:	32 c0       	rjmp	.+100    	; 0x56b8 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x138>
      TEMPERATURE = TEMP_READ - 0.25 + --------------------------
                                               COUNT_PER_C
      */

      // Good spot. Thanks Nic Johns for your contribution
      return (float)(rawTemperature >> 1) - 0.25 +((float)(scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) / (float)scratchPad[COUNT_PER_C] );
    5654:	ef 80       	ldd	r14, Y+7	; 0x07
    5656:	35 95       	asr	r19
    5658:	27 95       	ror	r18
    565a:	b9 01       	movw	r22, r18
    565c:	88 27       	eor	r24, r24
    565e:	77 fd       	sbrc	r23, 7
    5660:	80 95       	com	r24
    5662:	98 2f       	mov	r25, r24
    5664:	0e 94 fc 3a 	call	0x75f8	; 0x75f8 <__floatsisf>
    5668:	20 e0       	ldi	r18, 0x00	; 0
    566a:	30 e0       	ldi	r19, 0x00	; 0
    566c:	40 e8       	ldi	r20, 0x80	; 128
    566e:	5e e3       	ldi	r21, 0x3E	; 62
    5670:	0e 94 f8 39 	call	0x73f0	; 0x73f0 <__subsf3>
    5674:	3b 01       	movw	r6, r22
    5676:	4c 01       	movw	r8, r24
    5678:	6e 2d       	mov	r22, r14
    567a:	70 e0       	ldi	r23, 0x00	; 0
    567c:	2e 81       	ldd	r18, Y+6	; 0x06
    567e:	62 1b       	sub	r22, r18
    5680:	71 09       	sbc	r23, r1
    5682:	88 27       	eor	r24, r24
    5684:	77 fd       	sbrc	r23, 7
    5686:	80 95       	com	r24
    5688:	98 2f       	mov	r25, r24
    568a:	0e 94 fc 3a 	call	0x75f8	; 0x75f8 <__floatsisf>
    568e:	5b 01       	movw	r10, r22
    5690:	6c 01       	movw	r12, r24
    5692:	ff 24       	eor	r15, r15
    5694:	00 e0       	ldi	r16, 0x00	; 0
    5696:	10 e0       	ldi	r17, 0x00	; 0
    5698:	c8 01       	movw	r24, r16
    569a:	b7 01       	movw	r22, r14
    569c:	0e 94 fa 3a 	call	0x75f4	; 0x75f4 <__floatunsisf>
    56a0:	9b 01       	movw	r18, r22
    56a2:	ac 01       	movw	r20, r24
    56a4:	c6 01       	movw	r24, r12
    56a6:	b5 01       	movw	r22, r10
    56a8:	0e 94 61 3a 	call	0x74c2	; 0x74c2 <__divsf3>
    56ac:	9b 01       	movw	r18, r22
    56ae:	ac 01       	movw	r20, r24
    56b0:	c4 01       	movw	r24, r8
    56b2:	b3 01       	movw	r22, r6
    56b4:	0e 94 f9 39 	call	0x73f2	; 0x73f2 <__addsf3>
    56b8:	9b 01       	movw	r18, r22
    56ba:	ac 01       	movw	r20, r24
      break;
  }
}
    56bc:	83 2f       	mov	r24, r19
    56be:	94 2f       	mov	r25, r20
    56c0:	75 2f       	mov	r23, r21
    56c2:	00 c0       	rjmp	.+0      	; 0x56c4 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
    56c4:	26 2f       	mov	r18, r22
    56c6:	38 2f       	mov	r19, r24
    56c8:	49 2f       	mov	r20, r25
    56ca:	57 2f       	mov	r21, r23
    56cc:	b9 01       	movw	r22, r18
    56ce:	ca 01       	movw	r24, r20
    56d0:	df 91       	pop	r29
    56d2:	cf 91       	pop	r28
    56d4:	1f 91       	pop	r17
    56d6:	0f 91       	pop	r16
    56d8:	ff 90       	pop	r15
    56da:	ef 90       	pop	r14
    56dc:	df 90       	pop	r13
    56de:	cf 90       	pop	r12
    56e0:	bf 90       	pop	r11
    56e2:	af 90       	pop	r10
    56e4:	9f 90       	pop	r9
    56e6:	8f 90       	pop	r8
    56e8:	7f 90       	pop	r7
    56ea:	6f 90       	pop	r6
    56ec:	08 95       	ret

000056ee <_ZN17DallasTemperature19defaultAlarmHandlerEPh>:
}

// The default alarm handler
void DallasTemperature::defaultAlarmHandler(uint8_t* deviceAddress)
{
}
    56ee:	08 95       	ret

000056f0 <_ZN17DallasTemperature15readPowerSupplyEPh>:
  if (parasite) delay(10); // 10ms delay
  _wire->reset();
}

// reads the device's power requirements
bool DallasTemperature::readPowerSupply(uint8_t* deviceAddress)
    56f0:	ef 92       	push	r14
    56f2:	ff 92       	push	r15
    56f4:	0f 93       	push	r16
    56f6:	1f 93       	push	r17
    56f8:	8c 01       	movw	r16, r24
    56fa:	7b 01       	movw	r14, r22
{
  bool ret = false;
  _wire->reset();
    56fc:	fc 01       	movw	r30, r24
    56fe:	85 81       	ldd	r24, Z+5	; 0x05
    5700:	96 81       	ldd	r25, Z+6	; 0x06
    5702:	0e 94 97 29 	call	0x532e	; 0x532e <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
    5706:	f8 01       	movw	r30, r16
    5708:	85 81       	ldd	r24, Z+5	; 0x05
    570a:	96 81       	ldd	r25, Z+6	; 0x06
    570c:	b7 01       	movw	r22, r14
    570e:	0e 94 76 29 	call	0x52ec	; 0x52ec <_ZN7OneWire6selectEPKh>
  _wire->write(READPOWERSUPPLY);
    5712:	f8 01       	movw	r30, r16
    5714:	85 81       	ldd	r24, Z+5	; 0x05
    5716:	96 81       	ldd	r25, Z+6	; 0x06
    5718:	64 eb       	ldi	r22, 0xB4	; 180
    571a:	40 e0       	ldi	r20, 0x00	; 0
    571c:	0e 94 36 29 	call	0x526c	; 0x526c <_ZN7OneWire5writeEhh>
  if (_wire->read_bit() == 0) ret = true;
    5720:	f8 01       	movw	r30, r16
    5722:	85 81       	ldd	r24, Z+5	; 0x05
    5724:	96 81       	ldd	r25, Z+6	; 0x06
    5726:	0e 94 b1 28 	call	0x5162	; 0x5162 <_ZN7OneWire8read_bitEv>
    572a:	f8 2e       	mov	r15, r24
  _wire->reset();
    572c:	f8 01       	movw	r30, r16
    572e:	85 81       	ldd	r24, Z+5	; 0x05
    5730:	96 81       	ldd	r25, Z+6	; 0x06
    5732:	0e 94 97 29 	call	0x532e	; 0x532e <_ZN7OneWire5resetEv>
    5736:	80 e0       	ldi	r24, 0x00	; 0
    5738:	ff 20       	and	r15, r15
    573a:	09 f4       	brne	.+2      	; 0x573e <_ZN17DallasTemperature15readPowerSupplyEPh+0x4e>
    573c:	81 e0       	ldi	r24, 0x01	; 1
  return ret;
}
    573e:	1f 91       	pop	r17
    5740:	0f 91       	pop	r16
    5742:	ff 90       	pop	r15
    5744:	ef 90       	pop	r14
    5746:	08 95       	ret

00005748 <_ZN17DallasTemperature14readScratchPadEPhS0_>:
  readScratchPad(deviceAddress, scratchPad);
  return (_wire->crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]);
}

// read device's scratch pad
void DallasTemperature::readScratchPad(uint8_t* deviceAddress, uint8_t* scratchPad)
    5748:	cf 92       	push	r12
    574a:	df 92       	push	r13
    574c:	ef 92       	push	r14
    574e:	ff 92       	push	r15
    5750:	0f 93       	push	r16
    5752:	1f 93       	push	r17
    5754:	8c 01       	movw	r16, r24
    5756:	6b 01       	movw	r12, r22
    5758:	7a 01       	movw	r14, r20
{
  // send the command
  _wire->reset();
    575a:	fc 01       	movw	r30, r24
    575c:	85 81       	ldd	r24, Z+5	; 0x05
    575e:	96 81       	ldd	r25, Z+6	; 0x06
    5760:	0e 94 97 29 	call	0x532e	; 0x532e <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
    5764:	f8 01       	movw	r30, r16
    5766:	85 81       	ldd	r24, Z+5	; 0x05
    5768:	96 81       	ldd	r25, Z+6	; 0x06
    576a:	b6 01       	movw	r22, r12
    576c:	0e 94 76 29 	call	0x52ec	; 0x52ec <_ZN7OneWire6selectEPKh>
  _wire->write(READSCRATCH);
    5770:	f8 01       	movw	r30, r16
    5772:	85 81       	ldd	r24, Z+5	; 0x05
    5774:	96 81       	ldd	r25, Z+6	; 0x06
    5776:	6e eb       	ldi	r22, 0xBE	; 190
    5778:	40 e0       	ldi	r20, 0x00	; 0
    577a:	0e 94 36 29 	call	0x526c	; 0x526c <_ZN7OneWire5writeEhh>

  
  // read the response

  // byte 0: temperature LSB
  scratchPad[TEMP_LSB] = _wire->read();
    577e:	f8 01       	movw	r30, r16
    5780:	85 81       	ldd	r24, Z+5	; 0x05
    5782:	96 81       	ldd	r25, Z+6	; 0x06
    5784:	0e 94 e5 28 	call	0x51ca	; 0x51ca <_ZN7OneWire4readEv>
    5788:	f7 01       	movw	r30, r14
    578a:	80 83       	st	Z, r24

  // byte 1: temperature MSB
  scratchPad[TEMP_MSB] = _wire->read();
    578c:	f8 01       	movw	r30, r16
    578e:	85 81       	ldd	r24, Z+5	; 0x05
    5790:	96 81       	ldd	r25, Z+6	; 0x06
    5792:	0e 94 e5 28 	call	0x51ca	; 0x51ca <_ZN7OneWire4readEv>
    5796:	f7 01       	movw	r30, r14
    5798:	81 83       	std	Z+1, r24	; 0x01

  // byte 2: high alarm temp
  scratchPad[HIGH_ALARM_TEMP] = _wire->read();
    579a:	f8 01       	movw	r30, r16
    579c:	85 81       	ldd	r24, Z+5	; 0x05
    579e:	96 81       	ldd	r25, Z+6	; 0x06
    57a0:	0e 94 e5 28 	call	0x51ca	; 0x51ca <_ZN7OneWire4readEv>
    57a4:	f7 01       	movw	r30, r14
    57a6:	82 83       	std	Z+2, r24	; 0x02

  // byte 3: low alarm temp
  scratchPad[LOW_ALARM_TEMP] = _wire->read();
    57a8:	f8 01       	movw	r30, r16
    57aa:	85 81       	ldd	r24, Z+5	; 0x05
    57ac:	96 81       	ldd	r25, Z+6	; 0x06
    57ae:	0e 94 e5 28 	call	0x51ca	; 0x51ca <_ZN7OneWire4readEv>
    57b2:	f7 01       	movw	r30, r14
    57b4:	83 83       	std	Z+3, r24	; 0x03

  // byte 4:
  // DS18S20: store for crc
  // DS18B20 & DS1822: configuration register
  scratchPad[CONFIGURATION] = _wire->read();
    57b6:	f8 01       	movw	r30, r16
    57b8:	85 81       	ldd	r24, Z+5	; 0x05
    57ba:	96 81       	ldd	r25, Z+6	; 0x06
    57bc:	0e 94 e5 28 	call	0x51ca	; 0x51ca <_ZN7OneWire4readEv>
    57c0:	f7 01       	movw	r30, r14
    57c2:	84 83       	std	Z+4, r24	; 0x04

  // byte 5:
  // internal use & crc
  scratchPad[INTERNAL_BYTE] = _wire->read();
    57c4:	f8 01       	movw	r30, r16
    57c6:	85 81       	ldd	r24, Z+5	; 0x05
    57c8:	96 81       	ldd	r25, Z+6	; 0x06
    57ca:	0e 94 e5 28 	call	0x51ca	; 0x51ca <_ZN7OneWire4readEv>
    57ce:	f7 01       	movw	r30, r14
    57d0:	85 83       	std	Z+5, r24	; 0x05

  // byte 6:
  // DS18S20: COUNT_REMAIN
  // DS18B20 & DS1822: store for crc
  scratchPad[COUNT_REMAIN] = _wire->read();
    57d2:	f8 01       	movw	r30, r16
    57d4:	85 81       	ldd	r24, Z+5	; 0x05
    57d6:	96 81       	ldd	r25, Z+6	; 0x06
    57d8:	0e 94 e5 28 	call	0x51ca	; 0x51ca <_ZN7OneWire4readEv>
    57dc:	f7 01       	movw	r30, r14
    57de:	86 83       	std	Z+6, r24	; 0x06

  // byte 7:
  // DS18S20: COUNT_PER_C
  // DS18B20 & DS1822: store for crc
  scratchPad[COUNT_PER_C] = _wire->read();
    57e0:	f8 01       	movw	r30, r16
    57e2:	85 81       	ldd	r24, Z+5	; 0x05
    57e4:	96 81       	ldd	r25, Z+6	; 0x06
    57e6:	0e 94 e5 28 	call	0x51ca	; 0x51ca <_ZN7OneWire4readEv>
    57ea:	f7 01       	movw	r30, r14
    57ec:	87 83       	std	Z+7, r24	; 0x07

  // byte 8:
  // SCTRACHPAD_CRC
  scratchPad[SCRATCHPAD_CRC] = _wire->read();
    57ee:	f8 01       	movw	r30, r16
    57f0:	85 81       	ldd	r24, Z+5	; 0x05
    57f2:	96 81       	ldd	r25, Z+6	; 0x06
    57f4:	0e 94 e5 28 	call	0x51ca	; 0x51ca <_ZN7OneWire4readEv>
    57f8:	f7 01       	movw	r30, r14
    57fa:	80 87       	std	Z+8, r24	; 0x08

  _wire->reset();
    57fc:	f8 01       	movw	r30, r16
    57fe:	85 81       	ldd	r24, Z+5	; 0x05
    5800:	96 81       	ldd	r25, Z+6	; 0x06
    5802:	0e 94 97 29 	call	0x532e	; 0x532e <_ZN7OneWire5resetEv>
}
    5806:	1f 91       	pop	r17
    5808:	0f 91       	pop	r16
    580a:	ff 90       	pop	r15
    580c:	ef 90       	pop	r14
    580e:	df 90       	pop	r13
    5810:	cf 90       	pop	r12
    5812:	08 95       	ret

00005814 <_ZN17DallasTemperature21isConversionAvailableEPh>:
bool DallasTemperature::getCheckForConversion()
{
	return checkForConversion;
}

bool DallasTemperature::isConversionAvailable(uint8_t* deviceAddress)
    5814:	df 93       	push	r29
    5816:	cf 93       	push	r28
    5818:	cd b7       	in	r28, 0x3d	; 61
    581a:	de b7       	in	r29, 0x3e	; 62
    581c:	29 97       	sbiw	r28, 0x09	; 9
    581e:	0f b6       	in	r0, 0x3f	; 63
    5820:	f8 94       	cli
    5822:	de bf       	out	0x3e, r29	; 62
    5824:	0f be       	out	0x3f, r0	; 63
    5826:	cd bf       	out	0x3d, r28	; 61
{
	// Check if the clock has been raised indicating the conversion is complete
  	ScratchPad scratchPad;
  	readScratchPad(deviceAddress, scratchPad);
    5828:	ae 01       	movw	r20, r28
    582a:	4f 5f       	subi	r20, 0xFF	; 255
    582c:	5f 4f       	sbci	r21, 0xFF	; 255
    582e:	0e 94 a4 2b 	call	0x5748	; 0x5748 <_ZN17DallasTemperature14readScratchPadEPhS0_>
    5832:	89 81       	ldd	r24, Y+1	; 0x01
    5834:	81 11       	cpse	r24, r1
    5836:	81 e0       	ldi	r24, 0x01	; 1
	return scratchPad[0];
}	
    5838:	29 96       	adiw	r28, 0x09	; 9
    583a:	0f b6       	in	r0, 0x3f	; 63
    583c:	f8 94       	cli
    583e:	de bf       	out	0x3e, r29	; 62
    5840:	0f be       	out	0x3f, r0	; 63
    5842:	cd bf       	out	0x3d, r28	; 61
    5844:	cf 91       	pop	r28
    5846:	df 91       	pop	r29
    5848:	08 95       	ret

0000584a <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>:
  
  return true;
}


void DallasTemperature::blockTillConversionComplete(uint8_t* bitResolution, uint8_t* deviceAddress)
    584a:	cf 92       	push	r12
    584c:	df 92       	push	r13
    584e:	ef 92       	push	r14
    5850:	ff 92       	push	r15
    5852:	0f 93       	push	r16
    5854:	1f 93       	push	r17
    5856:	cf 93       	push	r28
    5858:	df 93       	push	r29
    585a:	ec 01       	movw	r28, r24
    585c:	6b 01       	movw	r12, r22
{
	if(deviceAddress != 0 && checkForConversion && !parasite)
    585e:	45 2b       	or	r20, r21
    5860:	e1 f0       	breq	.+56     	; 0x589a <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
    5862:	8b 81       	ldd	r24, Y+3	; 0x03
    5864:	88 23       	and	r24, r24
    5866:	c9 f0       	breq	.+50     	; 0x589a <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
    5868:	88 81       	ld	r24, Y
    586a:	88 23       	and	r24, r24
    586c:	b1 f4       	brne	.+44     	; 0x589a <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
	{
	  	// Continue to check if the IC has responded with a temperature
	  	// NB: Could cause issues with multiple devices (one device may respond faster)
	  	unsigned long start = millis();
    586e:	0e 94 61 2f 	call	0x5ec2	; 0x5ec2 <millis>
    5872:	7b 01       	movw	r14, r22
    5874:	8c 01       	movw	r16, r24
		while(!isConversionAvailable(0) && ((millis() - start) < 750));	
    5876:	ce 01       	movw	r24, r28
    5878:	60 e0       	ldi	r22, 0x00	; 0
    587a:	70 e0       	ldi	r23, 0x00	; 0
    587c:	0e 94 0a 2c 	call	0x5814	; 0x5814 <_ZN17DallasTemperature21isConversionAvailableEPh>
    5880:	88 23       	and	r24, r24
    5882:	59 f4       	brne	.+22     	; 0x589a <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
    5884:	0e 94 61 2f 	call	0x5ec2	; 0x5ec2 <millis>
    5888:	6e 19       	sub	r22, r14
    588a:	7f 09       	sbc	r23, r15
    588c:	80 0b       	sbc	r24, r16
    588e:	91 0b       	sbc	r25, r17
    5890:	6e 5e       	subi	r22, 0xEE	; 238
    5892:	72 40       	sbci	r23, 0x02	; 2
    5894:	80 40       	sbci	r24, 0x00	; 0
    5896:	90 40       	sbci	r25, 0x00	; 0
    5898:	70 f3       	brcs	.-36     	; 0x5876 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x2c>
	}
	
  	// Wait a fix number of cycles till conversion is complete (based on IC datasheet)
	  switch (*bitResolution)
    589a:	f6 01       	movw	r30, r12
    589c:	60 81       	ld	r22, Z
    589e:	69 30       	cpi	r22, 0x09	; 9
    58a0:	39 f0       	breq	.+14     	; 0x58b0 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x66>
    58a2:	69 30       	cpi	r22, 0x09	; 9
    58a4:	a0 f0       	brcs	.+40     	; 0x58ce <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x84>
    58a6:	6a 30       	cpi	r22, 0x0A	; 10
    58a8:	41 f0       	breq	.+16     	; 0x58ba <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x70>
    58aa:	6b 30       	cpi	r22, 0x0B	; 11
    58ac:	81 f4       	brne	.+32     	; 0x58ce <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x84>
    58ae:	0a c0       	rjmp	.+20     	; 0x58c4 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x7a>
	  {
	    case 9:
	      delay(94);
    58b0:	6e e5       	ldi	r22, 0x5E	; 94
    58b2:	70 e0       	ldi	r23, 0x00	; 0
    58b4:	80 e0       	ldi	r24, 0x00	; 0
    58b6:	90 e0       	ldi	r25, 0x00	; 0
    58b8:	0e c0       	rjmp	.+28     	; 0x58d6 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x8c>
	      break;
	    case 10:
	      delay(188);
    58ba:	6c eb       	ldi	r22, 0xBC	; 188
    58bc:	70 e0       	ldi	r23, 0x00	; 0
    58be:	80 e0       	ldi	r24, 0x00	; 0
    58c0:	90 e0       	ldi	r25, 0x00	; 0
    58c2:	09 c0       	rjmp	.+18     	; 0x58d6 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x8c>
	      break;
	    case 11:
	      delay(375);
    58c4:	67 e7       	ldi	r22, 0x77	; 119
    58c6:	71 e0       	ldi	r23, 0x01	; 1
    58c8:	80 e0       	ldi	r24, 0x00	; 0
    58ca:	90 e0       	ldi	r25, 0x00	; 0
    58cc:	04 c0       	rjmp	.+8      	; 0x58d6 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x8c>
	      break;
	    case 12:
	    default:
	      delay(750);
    58ce:	6e ee       	ldi	r22, 0xEE	; 238
    58d0:	72 e0       	ldi	r23, 0x02	; 2
    58d2:	80 e0       	ldi	r24, 0x00	; 0
    58d4:	90 e0       	ldi	r25, 0x00	; 0
    58d6:	0e 94 6f 2f 	call	0x5ede	; 0x5ede <delay>
	      break;
	  }

}
    58da:	df 91       	pop	r29
    58dc:	cf 91       	pop	r28
    58de:	1f 91       	pop	r17
    58e0:	0f 91       	pop	r16
    58e2:	ff 90       	pop	r15
    58e4:	ef 90       	pop	r14
    58e6:	df 90       	pop	r13
    58e8:	cf 90       	pop	r12
    58ea:	08 95       	ret

000058ec <_ZN17DallasTemperature11isConnectedEPhS0_>:
  return isConnected(deviceAddress, scratchPad);
}

// attempt to determine if the device at the given address is connected to the bus
// also allows for updating the read scratchpad
bool DallasTemperature::isConnected(uint8_t* deviceAddress, uint8_t* scratchPad)
    58ec:	0f 93       	push	r16
    58ee:	1f 93       	push	r17
    58f0:	8a 01       	movw	r16, r20
{
  readScratchPad(deviceAddress, scratchPad);
    58f2:	0e 94 a4 2b 	call	0x5748	; 0x5748 <_ZN17DallasTemperature14readScratchPadEPhS0_>
  return (_wire->crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]);
    58f6:	c8 01       	movw	r24, r16
    58f8:	68 e0       	ldi	r22, 0x08	; 8
    58fa:	0e 94 a0 28 	call	0x5140	; 0x5140 <_ZN7OneWire4crc8EPKhh>
    58fe:	20 e0       	ldi	r18, 0x00	; 0
    5900:	f8 01       	movw	r30, r16
    5902:	90 85       	ldd	r25, Z+8	; 0x08
    5904:	89 17       	cp	r24, r25
    5906:	09 f4       	brne	.+2      	; 0x590a <_ZN17DallasTemperature11isConnectedEPhS0_+0x1e>
    5908:	21 e0       	ldi	r18, 0x01	; 1
}
    590a:	82 2f       	mov	r24, r18
    590c:	1f 91       	pop	r17
    590e:	0f 91       	pop	r16
    5910:	08 95       	ret

00005912 <_ZN17DallasTemperature8getTempCEPh>:
// returns temperature in degrees C or DEVICE_DISCONNECTED if the
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DallasTemperature::getTempC(uint8_t* deviceAddress)
    5912:	cf 92       	push	r12
    5914:	df 92       	push	r13
    5916:	ef 92       	push	r14
    5918:	ff 92       	push	r15
    591a:	0f 93       	push	r16
    591c:	1f 93       	push	r17
    591e:	df 93       	push	r29
    5920:	cf 93       	push	r28
    5922:	cd b7       	in	r28, 0x3d	; 61
    5924:	de b7       	in	r29, 0x3e	; 62
    5926:	29 97       	sbiw	r28, 0x09	; 9
    5928:	0f b6       	in	r0, 0x3f	; 63
    592a:	f8 94       	cli
    592c:	de bf       	out	0x3e, r29	; 62
    592e:	0f be       	out	0x3f, r0	; 63
    5930:	cd bf       	out	0x3d, r28	; 61
    5932:	8c 01       	movw	r16, r24
    5934:	7b 01       	movw	r14, r22
  // TODO: Multiple devices (up to 64) on the same bus may take 
  //       some time to negotiate a response
  // What happens in case of collision?

  ScratchPad scratchPad;
  if (isConnected(deviceAddress, scratchPad)) return calculateTemperature(deviceAddress, scratchPad);
    5936:	6e 01       	movw	r12, r28
    5938:	08 94       	sec
    593a:	c1 1c       	adc	r12, r1
    593c:	d1 1c       	adc	r13, r1
    593e:	a6 01       	movw	r20, r12
    5940:	0e 94 76 2c 	call	0x58ec	; 0x58ec <_ZN17DallasTemperature11isConnectedEPhS0_>
    5944:	88 23       	and	r24, r24
    5946:	29 f4       	brne	.+10     	; 0x5952 <_ZN17DallasTemperature8getTempCEPh+0x40>
    5948:	60 e0       	ldi	r22, 0x00	; 0
    594a:	70 e0       	ldi	r23, 0x00	; 0
    594c:	8e ef       	ldi	r24, 0xFE	; 254
    594e:	92 ec       	ldi	r25, 0xC2	; 194
    5950:	05 c0       	rjmp	.+10     	; 0x595c <_ZN17DallasTemperature8getTempCEPh+0x4a>
    5952:	c8 01       	movw	r24, r16
    5954:	b7 01       	movw	r22, r14
    5956:	a6 01       	movw	r20, r12
    5958:	0e 94 c0 2a 	call	0x5580	; 0x5580 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>
  return DEVICE_DISCONNECTED;
}
    595c:	29 96       	adiw	r28, 0x09	; 9
    595e:	0f b6       	in	r0, 0x3f	; 63
    5960:	f8 94       	cli
    5962:	de bf       	out	0x3e, r29	; 62
    5964:	0f be       	out	0x3f, r0	; 63
    5966:	cd bf       	out	0x3d, r28	; 61
    5968:	cf 91       	pop	r28
    596a:	df 91       	pop	r29
    596c:	1f 91       	pop	r17
    596e:	0f 91       	pop	r16
    5970:	ff 90       	pop	r15
    5972:	ef 90       	pop	r14
    5974:	df 90       	pop	r13
    5976:	cf 90       	pop	r12
    5978:	08 95       	ret

0000597a <_ZN17DallasTemperature13getResolutionEPh>:
	return bitResolution;
}

// returns the current resolution of the device, 9-12
// returns 0 if device not found
uint8_t DallasTemperature::getResolution(uint8_t* deviceAddress)
    597a:	df 93       	push	r29
    597c:	cf 93       	push	r28
    597e:	cd b7       	in	r28, 0x3d	; 61
    5980:	de b7       	in	r29, 0x3e	; 62
    5982:	29 97       	sbiw	r28, 0x09	; 9
    5984:	0f b6       	in	r0, 0x3f	; 63
    5986:	f8 94       	cli
    5988:	de bf       	out	0x3e, r29	; 62
    598a:	0f be       	out	0x3f, r0	; 63
    598c:	cd bf       	out	0x3d, r28	; 61
    598e:	9c 01       	movw	r18, r24
    5990:	fb 01       	movw	r30, r22
{
  if (deviceAddress[0] == DS18S20MODEL) return 9; // this model has a fixed resolution
    5992:	80 81       	ld	r24, Z
    5994:	80 31       	cpi	r24, 0x10	; 16
    5996:	d9 f0       	breq	.+54     	; 0x59ce <_ZN17DallasTemperature13getResolutionEPh+0x54>

  ScratchPad scratchPad;
  if (isConnected(deviceAddress, scratchPad))
    5998:	c9 01       	movw	r24, r18
    599a:	ae 01       	movw	r20, r28
    599c:	4f 5f       	subi	r20, 0xFF	; 255
    599e:	5f 4f       	sbci	r21, 0xFF	; 255
    59a0:	0e 94 76 2c 	call	0x58ec	; 0x58ec <_ZN17DallasTemperature11isConnectedEPhS0_>
    59a4:	88 23       	and	r24, r24
    59a6:	a9 f0       	breq	.+42     	; 0x59d2 <_ZN17DallasTemperature13getResolutionEPh+0x58>
  {
	switch (scratchPad[CONFIGURATION])
    59a8:	8d 81       	ldd	r24, Y+5	; 0x05
    59aa:	8f 33       	cpi	r24, 0x3F	; 63
    59ac:	71 f0       	breq	.+28     	; 0x59ca <_ZN17DallasTemperature13getResolutionEPh+0x50>
    59ae:	80 34       	cpi	r24, 0x40	; 64
    59b0:	18 f4       	brcc	.+6      	; 0x59b8 <_ZN17DallasTemperature13getResolutionEPh+0x3e>
    59b2:	8f 31       	cpi	r24, 0x1F	; 31
    59b4:	71 f4       	brne	.+28     	; 0x59d2 <_ZN17DallasTemperature13getResolutionEPh+0x58>
    59b6:	0b c0       	rjmp	.+22     	; 0x59ce <_ZN17DallasTemperature13getResolutionEPh+0x54>
    59b8:	8f 35       	cpi	r24, 0x5F	; 95
    59ba:	19 f0       	breq	.+6      	; 0x59c2 <_ZN17DallasTemperature13getResolutionEPh+0x48>
    59bc:	8f 37       	cpi	r24, 0x7F	; 127
    59be:	49 f4       	brne	.+18     	; 0x59d2 <_ZN17DallasTemperature13getResolutionEPh+0x58>
    59c0:	02 c0       	rjmp	.+4      	; 0x59c6 <_ZN17DallasTemperature13getResolutionEPh+0x4c>
    59c2:	8b e0       	ldi	r24, 0x0B	; 11
    59c4:	07 c0       	rjmp	.+14     	; 0x59d4 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
    59c6:	8c e0       	ldi	r24, 0x0C	; 12
    59c8:	05 c0       	rjmp	.+10     	; 0x59d4 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
    59ca:	8a e0       	ldi	r24, 0x0A	; 10
    59cc:	03 c0       	rjmp	.+6      	; 0x59d4 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
        
      case TEMP_11_BIT:
        return 11;
        
      case TEMP_10_BIT:
        return 10;
    59ce:	89 e0       	ldi	r24, 0x09	; 9
    59d0:	01 c0       	rjmp	.+2      	; 0x59d4 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
    59d2:	80 e0       	ldi	r24, 0x00	; 0
        return 9;
        
	}
  }
  return 0;
}
    59d4:	29 96       	adiw	r28, 0x09	; 9
    59d6:	0f b6       	in	r0, 0x3f	; 63
    59d8:	f8 94       	cli
    59da:	de bf       	out	0x3e, r29	; 62
    59dc:	0f be       	out	0x3f, r0	; 63
    59de:	cd bf       	out	0x3d, r28	; 61
    59e0:	cf 91       	pop	r28
    59e2:	df 91       	pop	r29
    59e4:	08 95       	ret

000059e6 <_ZN17DallasTemperature28requestTemperaturesByAddressEPh>:
}

// sends command for one device to perform a temperature by address
// returns FALSE if device is disconnected
// returns TRUE  otherwise
bool DallasTemperature::requestTemperaturesByAddress(uint8_t* deviceAddress)
    59e6:	ef 92       	push	r14
    59e8:	ff 92       	push	r15
    59ea:	0f 93       	push	r16
    59ec:	1f 93       	push	r17
    59ee:	df 93       	push	r29
    59f0:	cf 93       	push	r28
    59f2:	cd b7       	in	r28, 0x3d	; 61
    59f4:	de b7       	in	r29, 0x3e	; 62
    59f6:	2a 97       	sbiw	r28, 0x0a	; 10
    59f8:	0f b6       	in	r0, 0x3f	; 63
    59fa:	f8 94       	cli
    59fc:	de bf       	out	0x3e, r29	; 62
    59fe:	0f be       	out	0x3f, r0	; 63
    5a00:	cd bf       	out	0x3d, r28	; 61
    5a02:	8c 01       	movw	r16, r24
    5a04:	7b 01       	movw	r14, r22
{

  _wire->reset();
    5a06:	fc 01       	movw	r30, r24
    5a08:	85 81       	ldd	r24, Z+5	; 0x05
    5a0a:	96 81       	ldd	r25, Z+6	; 0x06
    5a0c:	0e 94 97 29 	call	0x532e	; 0x532e <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
    5a10:	f8 01       	movw	r30, r16
    5a12:	85 81       	ldd	r24, Z+5	; 0x05
    5a14:	96 81       	ldd	r25, Z+6	; 0x06
    5a16:	b7 01       	movw	r22, r14
    5a18:	0e 94 76 29 	call	0x52ec	; 0x52ec <_ZN7OneWire6selectEPKh>
  _wire->write(STARTCONVO, parasite);
    5a1c:	f8 01       	movw	r30, r16
    5a1e:	85 81       	ldd	r24, Z+5	; 0x05
    5a20:	96 81       	ldd	r25, Z+6	; 0x06
    5a22:	64 e4       	ldi	r22, 0x44	; 68
    5a24:	40 81       	ld	r20, Z
    5a26:	0e 94 36 29 	call	0x526c	; 0x526c <_ZN7OneWire5writeEhh>
  
    // check device
  ScratchPad scratchPad;
  if (!isConnected(deviceAddress, scratchPad)) return false;
    5a2a:	c8 01       	movw	r24, r16
    5a2c:	b7 01       	movw	r22, r14
    5a2e:	ae 01       	movw	r20, r28
    5a30:	4e 5f       	subi	r20, 0xFE	; 254
    5a32:	5f 4f       	sbci	r21, 0xFF	; 255
    5a34:	0e 94 76 2c 	call	0x58ec	; 0x58ec <_ZN17DallasTemperature11isConnectedEPhS0_>
    5a38:	88 23       	and	r24, r24
    5a3a:	89 f0       	breq	.+34     	; 0x5a5e <_ZN17DallasTemperature28requestTemperaturesByAddressEPh+0x78>
  
  
  // ASYNC mode?
  if (!waitForConversion) return true;   
    5a3c:	f8 01       	movw	r30, r16
    5a3e:	82 81       	ldd	r24, Z+2	; 0x02
    5a40:	88 23       	and	r24, r24
    5a42:	61 f0       	breq	.+24     	; 0x5a5c <_ZN17DallasTemperature28requestTemperaturesByAddressEPh+0x76>
  uint8_t bitResolution = getResolution(deviceAddress);
    5a44:	c8 01       	movw	r24, r16
    5a46:	b7 01       	movw	r22, r14
    5a48:	0e 94 bd 2c 	call	0x597a	; 0x597a <_ZN17DallasTemperature13getResolutionEPh>
    5a4c:	89 83       	std	Y+1, r24	; 0x01
  blockTillConversionComplete(&bitResolution, deviceAddress);
    5a4e:	c8 01       	movw	r24, r16
    5a50:	be 01       	movw	r22, r28
    5a52:	6f 5f       	subi	r22, 0xFF	; 255
    5a54:	7f 4f       	sbci	r23, 0xFF	; 255
    5a56:	a7 01       	movw	r20, r14
    5a58:	0e 94 25 2c 	call	0x584a	; 0x584a <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>
    5a5c:	81 e0       	ldi	r24, 0x01	; 1
  
  return true;
}
    5a5e:	2a 96       	adiw	r28, 0x0a	; 10
    5a60:	0f b6       	in	r0, 0x3f	; 63
    5a62:	f8 94       	cli
    5a64:	de bf       	out	0x3e, r29	; 62
    5a66:	0f be       	out	0x3f, r0	; 63
    5a68:	cd bf       	out	0x3d, r28	; 61
    5a6a:	cf 91       	pop	r28
    5a6c:	df 91       	pop	r29
    5a6e:	1f 91       	pop	r17
    5a70:	0f 91       	pop	r16
    5a72:	ff 90       	pop	r15
    5a74:	ef 90       	pop	r14
    5a76:	08 95       	ret

00005a78 <_ZN17DallasTemperature12validAddressEPh>:
{
  return devices;
}

// returns true if address is valid
bool DallasTemperature::validAddress(uint8_t* deviceAddress)
    5a78:	0f 93       	push	r16
    5a7a:	1f 93       	push	r17
    5a7c:	8b 01       	movw	r16, r22
{
  return (_wire->crc8(deviceAddress, 7) == deviceAddress[7]);
    5a7e:	cb 01       	movw	r24, r22
    5a80:	67 e0       	ldi	r22, 0x07	; 7
    5a82:	0e 94 a0 28 	call	0x5140	; 0x5140 <_ZN7OneWire4crc8EPKhh>
    5a86:	20 e0       	ldi	r18, 0x00	; 0
    5a88:	f8 01       	movw	r30, r16
    5a8a:	97 81       	ldd	r25, Z+7	; 0x07
    5a8c:	89 17       	cp	r24, r25
    5a8e:	09 f4       	brne	.+2      	; 0x5a92 <_ZN17DallasTemperature12validAddressEPh+0x1a>
    5a90:	21 e0       	ldi	r18, 0x01	; 1
}
    5a92:	82 2f       	mov	r24, r18
    5a94:	1f 91       	pop	r17
    5a96:	0f 91       	pop	r16
    5a98:	08 95       	ret

00005a9a <_ZN17DallasTemperature10getAddressEPhh>:

// finds an address at a given index on the bus
// returns true if the device was found
bool DallasTemperature::getAddress(uint8_t* deviceAddress, uint8_t index)
    5a9a:	ef 92       	push	r14
    5a9c:	ff 92       	push	r15
    5a9e:	0f 93       	push	r16
    5aa0:	1f 93       	push	r17
    5aa2:	cf 93       	push	r28
    5aa4:	df 93       	push	r29
    5aa6:	ec 01       	movw	r28, r24
    5aa8:	7b 01       	movw	r14, r22
    5aaa:	04 2f       	mov	r16, r20
{
  uint8_t depth = 0;

  _wire->reset_search();
    5aac:	8d 81       	ldd	r24, Y+5	; 0x05
    5aae:	9e 81       	ldd	r25, Y+6	; 0x06
    5ab0:	0e 94 93 28 	call	0x5126	; 0x5126 <_ZN7OneWire12reset_searchEv>
    5ab4:	10 e0       	ldi	r17, 0x00	; 0
    5ab6:	07 c0       	rjmp	.+14     	; 0x5ac6 <_ZN17DallasTemperature10getAddressEPhh+0x2c>

  while (depth <= index && _wire->search(deviceAddress))
  {
    if (depth == index && validAddress(deviceAddress)) return true;
    5ab8:	ce 01       	movw	r24, r28
    5aba:	b7 01       	movw	r22, r14
    5abc:	0e 94 3c 2d 	call	0x5a78	; 0x5a78 <_ZN17DallasTemperature12validAddressEPh>
    5ac0:	88 23       	and	r24, r24
    5ac2:	a9 f0       	breq	.+42     	; 0x5aee <_ZN17DallasTemperature10getAddressEPhh+0x54>
    5ac4:	0a c0       	rjmp	.+20     	; 0x5ada <_ZN17DallasTemperature10getAddressEPhh+0x40>
{
  uint8_t depth = 0;

  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
    5ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    5ac8:	9e 81       	ldd	r25, Y+6	; 0x06
    5aca:	b7 01       	movw	r22, r14
    5acc:	0e 94 e2 29 	call	0x53c4	; 0x53c4 <_ZN7OneWire6searchEPh>
    5ad0:	88 23       	and	r24, r24
    5ad2:	29 f0       	breq	.+10     	; 0x5ade <_ZN17DallasTemperature10getAddressEPhh+0x44>
  {
    if (depth == index && validAddress(deviceAddress)) return true;
    5ad4:	10 17       	cp	r17, r16
    5ad6:	59 f4       	brne	.+22     	; 0x5aee <_ZN17DallasTemperature10getAddressEPhh+0x54>
    5ad8:	ef cf       	rjmp	.-34     	; 0x5ab8 <_ZN17DallasTemperature10getAddressEPhh+0x1e>
    5ada:	81 e0       	ldi	r24, 0x01	; 1
    5adc:	01 c0       	rjmp	.+2      	; 0x5ae0 <_ZN17DallasTemperature10getAddressEPhh+0x46>
    5ade:	80 e0       	ldi	r24, 0x00	; 0
    depth++;
  }

  return false;
}
    5ae0:	df 91       	pop	r29
    5ae2:	cf 91       	pop	r28
    5ae4:	1f 91       	pop	r17
    5ae6:	0f 91       	pop	r16
    5ae8:	ff 90       	pop	r15
    5aea:	ef 90       	pop	r14
    5aec:	08 95       	ret
  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
  {
    if (depth == index && validAddress(deviceAddress)) return true;
    depth++;
    5aee:	1f 5f       	subi	r17, 0xFF	; 255
{
  uint8_t depth = 0;

  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
    5af0:	01 17       	cp	r16, r17
    5af2:	a8 f3       	brcs	.-22     	; 0x5ade <_ZN17DallasTemperature10getAddressEPhh+0x44>
    5af4:	e8 cf       	rjmp	.-48     	; 0x5ac6 <_ZN17DallasTemperature10getAddressEPhh+0x2c>

00005af6 <_ZN17DallasTemperature5beginEv>:
  waitForConversion = true;
  checkForConversion = true;
}

// initialise the bus
void DallasTemperature::begin(void)
    5af6:	af 92       	push	r10
    5af8:	bf 92       	push	r11
    5afa:	cf 92       	push	r12
    5afc:	df 92       	push	r13
    5afe:	ef 92       	push	r14
    5b00:	ff 92       	push	r15
    5b02:	0f 93       	push	r16
    5b04:	1f 93       	push	r17
    5b06:	df 93       	push	r29
    5b08:	cf 93       	push	r28
    5b0a:	cd b7       	in	r28, 0x3d	; 61
    5b0c:	de b7       	in	r29, 0x3e	; 62
    5b0e:	61 97       	sbiw	r28, 0x11	; 17
    5b10:	0f b6       	in	r0, 0x3f	; 63
    5b12:	f8 94       	cli
    5b14:	de bf       	out	0x3e, r29	; 62
    5b16:	0f be       	out	0x3f, r0	; 63
    5b18:	cd bf       	out	0x3d, r28	; 61
    5b1a:	7c 01       	movw	r14, r24
{
  DeviceAddress deviceAddress;

  _wire->reset_search();
    5b1c:	fc 01       	movw	r30, r24
    5b1e:	85 81       	ldd	r24, Z+5	; 0x05
    5b20:	96 81       	ldd	r25, Z+6	; 0x06
    5b22:	0e 94 93 28 	call	0x5126	; 0x5126 <_ZN7OneWire12reset_searchEv>
  devices = 0; // Reset the number of devices when we enumerate wire devices
    5b26:	f7 01       	movw	r30, r14
    5b28:	14 82       	std	Z+4, r1	; 0x04

  while (_wire->search(deviceAddress))
    5b2a:	6e 01       	movw	r12, r28
    5b2c:	08 94       	sec
    5b2e:	c1 1c       	adc	r12, r1
    5b30:	d1 1c       	adc	r13, r1
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;

      ScratchPad scratchPad;

      readScratchPad(deviceAddress, scratchPad);
    5b32:	79 e0       	ldi	r23, 0x09	; 9
    5b34:	a7 2e       	mov	r10, r23
    5b36:	b1 2c       	mov	r11, r1
    5b38:	ac 0e       	add	r10, r28
    5b3a:	bd 1e       	adc	r11, r29

  while (_wire->search(deviceAddress))
  {
    if (validAddress(deviceAddress))
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;
    5b3c:	01 e0       	ldi	r16, 0x01	; 1
    5b3e:	2b c0       	rjmp	.+86     	; 0x5b96 <_ZN17DallasTemperature5beginEv+0xa0>
  _wire->reset_search();
  devices = 0; // Reset the number of devices when we enumerate wire devices

  while (_wire->search(deviceAddress))
  {
    if (validAddress(deviceAddress))
    5b40:	c7 01       	movw	r24, r14
    5b42:	b6 01       	movw	r22, r12
    5b44:	0e 94 3c 2d 	call	0x5a78	; 0x5a78 <_ZN17DallasTemperature12validAddressEPh>
    5b48:	88 23       	and	r24, r24
    5b4a:	29 f1       	breq	.+74     	; 0x5b96 <_ZN17DallasTemperature5beginEv+0xa0>
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;
    5b4c:	f7 01       	movw	r30, r14
    5b4e:	80 81       	ld	r24, Z
    5b50:	88 23       	and	r24, r24
    5b52:	41 f4       	brne	.+16     	; 0x5b64 <_ZN17DallasTemperature5beginEv+0x6e>
    5b54:	c7 01       	movw	r24, r14
    5b56:	b6 01       	movw	r22, r12
    5b58:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <_ZN17DallasTemperature15readPowerSupplyEPh>
    5b5c:	88 23       	and	r24, r24
    5b5e:	11 f0       	breq	.+4      	; 0x5b64 <_ZN17DallasTemperature5beginEv+0x6e>
    5b60:	f7 01       	movw	r30, r14
    5b62:	00 83       	st	Z, r16

      ScratchPad scratchPad;

      readScratchPad(deviceAddress, scratchPad);
    5b64:	c7 01       	movw	r24, r14
    5b66:	b6 01       	movw	r22, r12
    5b68:	a5 01       	movw	r20, r10
    5b6a:	0e 94 a4 2b 	call	0x5748	; 0x5748 <_ZN17DallasTemperature14readScratchPadEPhS0_>

	  bitResolution = max(bitResolution, getResolution(deviceAddress));
    5b6e:	f7 01       	movw	r30, r14
    5b70:	11 81       	ldd	r17, Z+1	; 0x01
    5b72:	c7 01       	movw	r24, r14
    5b74:	b6 01       	movw	r22, r12
    5b76:	0e 94 bd 2c 	call	0x597a	; 0x597a <_ZN17DallasTemperature13getResolutionEPh>
    5b7a:	81 17       	cp	r24, r17
    5b7c:	18 f4       	brcc	.+6      	; 0x5b84 <_ZN17DallasTemperature5beginEv+0x8e>
    5b7e:	f7 01       	movw	r30, r14
    5b80:	81 81       	ldd	r24, Z+1	; 0x01
    5b82:	04 c0       	rjmp	.+8      	; 0x5b8c <_ZN17DallasTemperature5beginEv+0x96>
    5b84:	c7 01       	movw	r24, r14
    5b86:	b6 01       	movw	r22, r12
    5b88:	0e 94 bd 2c 	call	0x597a	; 0x597a <_ZN17DallasTemperature13getResolutionEPh>
    5b8c:	f7 01       	movw	r30, r14
    5b8e:	81 83       	std	Z+1, r24	; 0x01

      devices++;
    5b90:	84 81       	ldd	r24, Z+4	; 0x04
    5b92:	8f 5f       	subi	r24, 0xFF	; 255
    5b94:	84 83       	std	Z+4, r24	; 0x04
  DeviceAddress deviceAddress;

  _wire->reset_search();
  devices = 0; // Reset the number of devices when we enumerate wire devices

  while (_wire->search(deviceAddress))
    5b96:	f7 01       	movw	r30, r14
    5b98:	85 81       	ldd	r24, Z+5	; 0x05
    5b9a:	96 81       	ldd	r25, Z+6	; 0x06
    5b9c:	b6 01       	movw	r22, r12
    5b9e:	0e 94 e2 29 	call	0x53c4	; 0x53c4 <_ZN7OneWire6searchEPh>
    5ba2:	88 23       	and	r24, r24
    5ba4:	69 f6       	brne	.-102    	; 0x5b40 <_ZN17DallasTemperature5beginEv+0x4a>
	  bitResolution = max(bitResolution, getResolution(deviceAddress));

      devices++;
    }
  }
}
    5ba6:	61 96       	adiw	r28, 0x11	; 17
    5ba8:	0f b6       	in	r0, 0x3f	; 63
    5baa:	f8 94       	cli
    5bac:	de bf       	out	0x3e, r29	; 62
    5bae:	0f be       	out	0x3f, r0	; 63
    5bb0:	cd bf       	out	0x3d, r28	; 61
    5bb2:	cf 91       	pop	r28
    5bb4:	df 91       	pop	r29
    5bb6:	1f 91       	pop	r17
    5bb8:	0f 91       	pop	r16
    5bba:	ff 90       	pop	r15
    5bbc:	ef 90       	pop	r14
    5bbe:	df 90       	pop	r13
    5bc0:	cf 90       	pop	r12
    5bc2:	bf 90       	pop	r11
    5bc4:	af 90       	pop	r10
    5bc6:	08 95       	ret

00005bc8 <malloc>:
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	if (len < sizeof(struct __freelist) - sizeof(size_t))
    5bc8:	0f 93       	push	r16
    5bca:	1f 93       	push	r17
    5bcc:	cf 93       	push	r28
    5bce:	df 93       	push	r29
    5bd0:	bc 01       	movw	r22, r24
    5bd2:	82 30       	cpi	r24, 0x02	; 2
    5bd4:	91 05       	cpc	r25, r1
    5bd6:	10 f4       	brcc	.+4      	; 0x5bdc <malloc+0x14>
    5bd8:	62 e0       	ldi	r22, 0x02	; 2
    5bda:	70 e0       	ldi	r23, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    5bdc:	e0 91 e4 04 	lds	r30, 0x04E4
    5be0:	f0 91 e5 04 	lds	r31, 0x04E5
    5be4:	a0 e0       	ldi	r26, 0x00	; 0
    5be6:	b0 e0       	ldi	r27, 0x00	; 0
    5be8:	40 e0       	ldi	r20, 0x00	; 0
    5bea:	50 e0       	ldi	r21, 0x00	; 0
    5bec:	24 c0       	rjmp	.+72     	; 0x5c36 <malloc+0x6e>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    5bee:	80 81       	ld	r24, Z
    5bf0:	91 81       	ldd	r25, Z+1	; 0x01
    5bf2:	86 17       	cp	r24, r22
    5bf4:	97 07       	cpc	r25, r23
    5bf6:	d0 f0       	brcs	.+52     	; 0x5c2c <malloc+0x64>
			continue;
		if (fp1->sz == len) {
    5bf8:	86 17       	cp	r24, r22
    5bfa:	97 07       	cpc	r25, r23
    5bfc:	71 f4       	brne	.+28     	; 0x5c1a <malloc+0x52>
    5bfe:	82 81       	ldd	r24, Z+2	; 0x02
    5c00:	93 81       	ldd	r25, Z+3	; 0x03
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    5c02:	10 97       	sbiw	r26, 0x00	; 0
    5c04:	29 f0       	breq	.+10     	; 0x5c10 <malloc+0x48>
				fp2->nx = fp1->nx;
    5c06:	13 96       	adiw	r26, 0x03	; 3
    5c08:	9c 93       	st	X, r25
    5c0a:	8e 93       	st	-X, r24
    5c0c:	12 97       	sbiw	r26, 0x02	; 2
    5c0e:	2c c0       	rjmp	.+88     	; 0x5c68 <malloc+0xa0>
			else
				__flp = fp1->nx;
    5c10:	90 93 e5 04 	sts	0x04E5, r25
    5c14:	80 93 e4 04 	sts	0x04E4, r24
    5c18:	27 c0       	rjmp	.+78     	; 0x5c68 <malloc+0xa0>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    5c1a:	41 15       	cp	r20, r1
    5c1c:	51 05       	cpc	r21, r1
    5c1e:	19 f0       	breq	.+6      	; 0x5c26 <malloc+0x5e>
    5c20:	84 17       	cp	r24, r20
    5c22:	95 07       	cpc	r25, r21
    5c24:	18 f4       	brcc	.+6      	; 0x5c2c <malloc+0x64>
    5c26:	ef 01       	movw	r28, r30
    5c28:	8d 01       	movw	r16, r26
    5c2a:	ac 01       	movw	r20, r24
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    5c2c:	df 01       	movw	r26, r30
    5c2e:	82 81       	ldd	r24, Z+2	; 0x02
    5c30:	93 81       	ldd	r25, Z+3	; 0x03
    5c32:	9c 01       	movw	r18, r24
    5c34:	f9 01       	movw	r30, r18
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
    5c36:	30 97       	sbiw	r30, 0x00	; 0
    5c38:	d1 f6       	brne	.-76     	; 0x5bee <malloc+0x26>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    5c3a:	41 15       	cp	r20, r1
    5c3c:	51 05       	cpc	r21, r1
    5c3e:	f9 f0       	breq	.+62     	; 0x5c7e <malloc+0xb6>
		if (s - len < sizeof(struct __freelist)) {
    5c40:	ca 01       	movw	r24, r20
    5c42:	86 1b       	sub	r24, r22
    5c44:	97 0b       	sbc	r25, r23
    5c46:	84 30       	cpi	r24, 0x04	; 4
    5c48:	91 05       	cpc	r25, r1
    5c4a:	80 f4       	brcc	.+32     	; 0x5c6c <malloc+0xa4>
    5c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    5c4e:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    5c50:	01 15       	cp	r16, r1
    5c52:	11 05       	cpc	r17, r1
    5c54:	21 f0       	breq	.+8      	; 0x5c5e <malloc+0x96>
				sfp2->nx = sfp1->nx;
    5c56:	f8 01       	movw	r30, r16
    5c58:	93 83       	std	Z+3, r25	; 0x03
    5c5a:	82 83       	std	Z+2, r24	; 0x02
    5c5c:	04 c0       	rjmp	.+8      	; 0x5c66 <malloc+0x9e>
			else
				__flp = sfp1->nx;
    5c5e:	90 93 e5 04 	sts	0x04E5, r25
    5c62:	80 93 e4 04 	sts	0x04E4, r24
			return &(sfp1->nx);
    5c66:	fe 01       	movw	r30, r28
    5c68:	32 96       	adiw	r30, 0x02	; 2
    5c6a:	45 c0       	rjmp	.+138    	; 0x5cf6 <malloc+0x12e>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    5c6c:	fe 01       	movw	r30, r28
    5c6e:	e8 0f       	add	r30, r24
    5c70:	f9 1f       	adc	r31, r25
    5c72:	61 93       	st	Z+, r22
    5c74:	71 93       	st	Z+, r23
		sfp1->sz = s - sizeof(size_t);
    5c76:	02 97       	sbiw	r24, 0x02	; 2
    5c78:	99 83       	std	Y+1, r25	; 0x01
    5c7a:	88 83       	st	Y, r24
    5c7c:	3c c0       	rjmp	.+120    	; 0x5cf6 <malloc+0x12e>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
    5c7e:	80 91 e2 04 	lds	r24, 0x04E2
    5c82:	90 91 e3 04 	lds	r25, 0x04E3
    5c86:	89 2b       	or	r24, r25
    5c88:	41 f4       	brne	.+16     	; 0x5c9a <malloc+0xd2>
		__brkval = __malloc_heap_start;
    5c8a:	80 91 c0 01 	lds	r24, 0x01C0
    5c8e:	90 91 c1 01 	lds	r25, 0x01C1
    5c92:	90 93 e3 04 	sts	0x04E3, r25
    5c96:	80 93 e2 04 	sts	0x04E2, r24
	cp = __malloc_heap_end;
    5c9a:	40 91 c2 01 	lds	r20, 0x01C2
    5c9e:	50 91 c3 01 	lds	r21, 0x01C3
	if (cp == 0)
    5ca2:	41 15       	cp	r20, r1
    5ca4:	51 05       	cpc	r21, r1
    5ca6:	41 f4       	brne	.+16     	; 0x5cb8 <malloc+0xf0>
		cp = STACK_POINTER() - __malloc_margin;
    5ca8:	4d b7       	in	r20, 0x3d	; 61
    5caa:	5e b7       	in	r21, 0x3e	; 62
    5cac:	80 91 be 01 	lds	r24, 0x01BE
    5cb0:	90 91 bf 01 	lds	r25, 0x01BF
    5cb4:	48 1b       	sub	r20, r24
    5cb6:	59 0b       	sbc	r21, r25
	if (cp <= __brkval)
    5cb8:	20 91 e2 04 	lds	r18, 0x04E2
    5cbc:	30 91 e3 04 	lds	r19, 0x04E3
    5cc0:	24 17       	cp	r18, r20
    5cc2:	35 07       	cpc	r19, r21
    5cc4:	b0 f4       	brcc	.+44     	; 0x5cf2 <malloc+0x12a>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    5cc6:	ca 01       	movw	r24, r20
    5cc8:	82 1b       	sub	r24, r18
    5cca:	93 0b       	sbc	r25, r19
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    5ccc:	86 17       	cp	r24, r22
    5cce:	97 07       	cpc	r25, r23
    5cd0:	80 f0       	brcs	.+32     	; 0x5cf2 <malloc+0x12a>
    5cd2:	ab 01       	movw	r20, r22
    5cd4:	4e 5f       	subi	r20, 0xFE	; 254
    5cd6:	5f 4f       	sbci	r21, 0xFF	; 255
    5cd8:	84 17       	cp	r24, r20
    5cda:	95 07       	cpc	r25, r21
    5cdc:	50 f0       	brcs	.+20     	; 0x5cf2 <malloc+0x12a>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    5cde:	42 0f       	add	r20, r18
    5ce0:	53 1f       	adc	r21, r19
    5ce2:	50 93 e3 04 	sts	0x04E3, r21
    5ce6:	40 93 e2 04 	sts	0x04E2, r20
		fp1->sz = len;
    5cea:	f9 01       	movw	r30, r18
    5cec:	61 93       	st	Z+, r22
    5cee:	71 93       	st	Z+, r23
    5cf0:	02 c0       	rjmp	.+4      	; 0x5cf6 <malloc+0x12e>
		return &(fp1->nx);
    5cf2:	e0 e0       	ldi	r30, 0x00	; 0
    5cf4:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
    5cf6:	cf 01       	movw	r24, r30
    5cf8:	df 91       	pop	r29
    5cfa:	cf 91       	pop	r28
    5cfc:	1f 91       	pop	r17
    5cfe:	0f 91       	pop	r16
    5d00:	08 95       	ret

00005d02 <free>:
{
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    5d02:	cf 93       	push	r28
    5d04:	df 93       	push	r29
    5d06:	9c 01       	movw	r18, r24
    5d08:	00 97       	sbiw	r24, 0x00	; 0
    5d0a:	09 f4       	brne	.+2      	; 0x5d0e <free+0xc>
    5d0c:	8f c0       	rjmp	.+286    	; 0x5e2c <free+0x12a>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    5d0e:	ec 01       	movw	r28, r24
    5d10:	22 97       	sbiw	r28, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    5d12:	1b 82       	std	Y+3, r1	; 0x03
    5d14:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    5d16:	60 91 e4 04 	lds	r22, 0x04E4
    5d1a:	70 91 e5 04 	lds	r23, 0x04E5
    5d1e:	61 15       	cp	r22, r1
    5d20:	71 05       	cpc	r23, r1
    5d22:	81 f4       	brne	.+32     	; 0x5d44 <free+0x42>
		if ((char *)p + fpnew->sz == __brkval)
    5d24:	88 81       	ld	r24, Y
    5d26:	99 81       	ldd	r25, Y+1	; 0x01
    5d28:	82 0f       	add	r24, r18
    5d2a:	93 1f       	adc	r25, r19
    5d2c:	20 91 e2 04 	lds	r18, 0x04E2
    5d30:	30 91 e3 04 	lds	r19, 0x04E3
    5d34:	28 17       	cp	r18, r24
    5d36:	39 07       	cpc	r19, r25
    5d38:	39 f5       	brne	.+78     	; 0x5d88 <free+0x86>
			__brkval = cpnew;
    5d3a:	d0 93 e3 04 	sts	0x04E3, r29
    5d3e:	c0 93 e2 04 	sts	0x04E2, r28
    5d42:	74 c0       	rjmp	.+232    	; 0x5e2c <free+0x12a>
		else
			__flp = fpnew;
    5d44:	db 01       	movw	r26, r22
    5d46:	40 e0       	ldi	r20, 0x00	; 0
    5d48:	50 e0       	ldi	r21, 0x00	; 0
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    5d4a:	ac 17       	cp	r26, r28
    5d4c:	bd 07       	cpc	r27, r29
    5d4e:	08 f1       	brcs	.+66     	; 0x5d92 <free+0x90>
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    5d50:	bb 83       	std	Y+3, r27	; 0x03
    5d52:	aa 83       	std	Y+2, r26	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    5d54:	fe 01       	movw	r30, r28
    5d56:	21 91       	ld	r18, Z+
    5d58:	31 91       	ld	r19, Z+
    5d5a:	e2 0f       	add	r30, r18
    5d5c:	f3 1f       	adc	r31, r19
    5d5e:	ae 17       	cp	r26, r30
    5d60:	bf 07       	cpc	r27, r31
    5d62:	79 f4       	brne	.+30     	; 0x5d82 <free+0x80>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    5d64:	8d 91       	ld	r24, X+
    5d66:	9c 91       	ld	r25, X
    5d68:	11 97       	sbiw	r26, 0x01	; 1
    5d6a:	28 0f       	add	r18, r24
    5d6c:	39 1f       	adc	r19, r25
    5d6e:	2e 5f       	subi	r18, 0xFE	; 254
    5d70:	3f 4f       	sbci	r19, 0xFF	; 255
    5d72:	39 83       	std	Y+1, r19	; 0x01
    5d74:	28 83       	st	Y, r18
			fpnew->nx = fp1->nx;
    5d76:	12 96       	adiw	r26, 0x02	; 2
    5d78:	8d 91       	ld	r24, X+
    5d7a:	9c 91       	ld	r25, X
    5d7c:	13 97       	sbiw	r26, 0x03	; 3
    5d7e:	9b 83       	std	Y+3, r25	; 0x03
    5d80:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (fp2 == 0) {
    5d82:	41 15       	cp	r20, r1
    5d84:	51 05       	cpc	r21, r1
    5d86:	71 f4       	brne	.+28     	; 0x5da4 <free+0xa2>
			/* new head of freelist */
			__flp = fpnew;
    5d88:	d0 93 e5 04 	sts	0x04E5, r29
    5d8c:	c0 93 e4 04 	sts	0x04E4, r28
    5d90:	4d c0       	rjmp	.+154    	; 0x5e2c <free+0x12a>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    5d92:	12 96       	adiw	r26, 0x02	; 2
    5d94:	8d 91       	ld	r24, X+
    5d96:	9c 91       	ld	r25, X
    5d98:	13 97       	sbiw	r26, 0x03	; 3
    5d9a:	ad 01       	movw	r20, r26
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
    5d9c:	00 97       	sbiw	r24, 0x00	; 0
    5d9e:	11 f0       	breq	.+4      	; 0x5da4 <free+0xa2>
    5da0:	dc 01       	movw	r26, r24
    5da2:	d3 cf       	rjmp	.-90     	; 0x5d4a <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    5da4:	da 01       	movw	r26, r20
    5da6:	13 96       	adiw	r26, 0x03	; 3
    5da8:	dc 93       	st	X, r29
    5daa:	ce 93       	st	-X, r28
    5dac:	12 97       	sbiw	r26, 0x02	; 2
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    5dae:	fa 01       	movw	r30, r20
    5db0:	21 91       	ld	r18, Z+
    5db2:	31 91       	ld	r19, Z+
    5db4:	e2 0f       	add	r30, r18
    5db6:	f3 1f       	adc	r31, r19
    5db8:	ce 17       	cp	r28, r30
    5dba:	df 07       	cpc	r29, r31
    5dbc:	69 f4       	brne	.+26     	; 0x5dd8 <free+0xd6>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    5dbe:	88 81       	ld	r24, Y
    5dc0:	99 81       	ldd	r25, Y+1	; 0x01
    5dc2:	28 0f       	add	r18, r24
    5dc4:	39 1f       	adc	r19, r25
    5dc6:	2e 5f       	subi	r18, 0xFE	; 254
    5dc8:	3f 4f       	sbci	r19, 0xFF	; 255
    5dca:	fa 01       	movw	r30, r20
    5dcc:	31 83       	std	Z+1, r19	; 0x01
    5dce:	20 83       	st	Z, r18
		fp2->nx = fpnew->nx;
    5dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    5dd2:	9b 81       	ldd	r25, Y+3	; 0x03
    5dd4:	93 83       	std	Z+3, r25	; 0x03
    5dd6:	82 83       	std	Z+2, r24	; 0x02
    5dd8:	e0 e0       	ldi	r30, 0x00	; 0
    5dda:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1->nx != 0;
    5ddc:	db 01       	movw	r26, r22
    5dde:	12 96       	adiw	r26, 0x02	; 2
    5de0:	8d 91       	ld	r24, X+
    5de2:	9c 91       	ld	r25, X
    5de4:	13 97       	sbiw	r26, 0x03	; 3
    5de6:	00 97       	sbiw	r24, 0x00	; 0
    5de8:	19 f0       	breq	.+6      	; 0x5df0 <free+0xee>
    5dea:	bc 01       	movw	r22, r24
    5dec:	fd 01       	movw	r30, r26
    5dee:	f6 cf       	rjmp	.-20     	; 0x5ddc <free+0xda>
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
    5df0:	ab 01       	movw	r20, r22
    5df2:	4e 5f       	subi	r20, 0xFE	; 254
    5df4:	5f 4f       	sbci	r21, 0xFF	; 255
	if (cp2 + fp1->sz == __brkval) {
    5df6:	db 01       	movw	r26, r22
    5df8:	8d 91       	ld	r24, X+
    5dfa:	9c 91       	ld	r25, X
    5dfc:	84 0f       	add	r24, r20
    5dfe:	95 1f       	adc	r25, r21
    5e00:	20 91 e2 04 	lds	r18, 0x04E2
    5e04:	30 91 e3 04 	lds	r19, 0x04E3
    5e08:	28 17       	cp	r18, r24
    5e0a:	39 07       	cpc	r19, r25
    5e0c:	79 f4       	brne	.+30     	; 0x5e2c <free+0x12a>
		if (fp2 == NULL)
    5e0e:	30 97       	sbiw	r30, 0x00	; 0
    5e10:	29 f4       	brne	.+10     	; 0x5e1c <free+0x11a>
			/* Freelist is empty now. */
			__flp = NULL;
    5e12:	10 92 e5 04 	sts	0x04E5, r1
    5e16:	10 92 e4 04 	sts	0x04E4, r1
    5e1a:	02 c0       	rjmp	.+4      	; 0x5e20 <free+0x11e>
		else
			fp2->nx = NULL;
    5e1c:	13 82       	std	Z+3, r1	; 0x03
    5e1e:	12 82       	std	Z+2, r1	; 0x02
		__brkval = cp2 - sizeof(size_t);
    5e20:	42 50       	subi	r20, 0x02	; 2
    5e22:	50 40       	sbci	r21, 0x00	; 0
    5e24:	50 93 e3 04 	sts	0x04E3, r21
    5e28:	40 93 e2 04 	sts	0x04E2, r20
	}
}
    5e2c:	df 91       	pop	r29
    5e2e:	cf 91       	pop	r28
    5e30:	08 95       	ret

00005e32 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    5e32:	1f 92       	push	r1
    5e34:	0f 92       	push	r0
    5e36:	0f b6       	in	r0, 0x3f	; 63
    5e38:	0f 92       	push	r0
    5e3a:	11 24       	eor	r1, r1
    5e3c:	2f 93       	push	r18
    5e3e:	3f 93       	push	r19
    5e40:	8f 93       	push	r24
    5e42:	9f 93       	push	r25
    5e44:	af 93       	push	r26
    5e46:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    5e48:	80 91 32 04 	lds	r24, 0x0432
    5e4c:	90 91 33 04 	lds	r25, 0x0433
    5e50:	a0 91 34 04 	lds	r26, 0x0434
    5e54:	b0 91 35 04 	lds	r27, 0x0435
	unsigned char f = timer0_fract;
    5e58:	30 91 36 04 	lds	r19, 0x0436

	m += MILLIS_INC;
    5e5c:	01 96       	adiw	r24, 0x01	; 1
    5e5e:	a1 1d       	adc	r26, r1
    5e60:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    5e62:	23 2f       	mov	r18, r19
    5e64:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    5e66:	2d 37       	cpi	r18, 0x7D	; 125
    5e68:	20 f0       	brcs	.+8      	; 0x5e72 <__vector_16+0x40>
		f -= FRACT_MAX;
    5e6a:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    5e6c:	01 96       	adiw	r24, 0x01	; 1
    5e6e:	a1 1d       	adc	r26, r1
    5e70:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    5e72:	20 93 36 04 	sts	0x0436, r18
	timer0_millis = m;
    5e76:	80 93 32 04 	sts	0x0432, r24
    5e7a:	90 93 33 04 	sts	0x0433, r25
    5e7e:	a0 93 34 04 	sts	0x0434, r26
    5e82:	b0 93 35 04 	sts	0x0435, r27
	timer0_overflow_count++;
    5e86:	80 91 2e 04 	lds	r24, 0x042E
    5e8a:	90 91 2f 04 	lds	r25, 0x042F
    5e8e:	a0 91 30 04 	lds	r26, 0x0430
    5e92:	b0 91 31 04 	lds	r27, 0x0431
    5e96:	01 96       	adiw	r24, 0x01	; 1
    5e98:	a1 1d       	adc	r26, r1
    5e9a:	b1 1d       	adc	r27, r1
    5e9c:	80 93 2e 04 	sts	0x042E, r24
    5ea0:	90 93 2f 04 	sts	0x042F, r25
    5ea4:	a0 93 30 04 	sts	0x0430, r26
    5ea8:	b0 93 31 04 	sts	0x0431, r27
}
    5eac:	bf 91       	pop	r27
    5eae:	af 91       	pop	r26
    5eb0:	9f 91       	pop	r25
    5eb2:	8f 91       	pop	r24
    5eb4:	3f 91       	pop	r19
    5eb6:	2f 91       	pop	r18
    5eb8:	0f 90       	pop	r0
    5eba:	0f be       	out	0x3f, r0	; 63
    5ebc:	0f 90       	pop	r0
    5ebe:	1f 90       	pop	r1
    5ec0:	18 95       	reti

00005ec2 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    5ec2:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    5ec4:	f8 94       	cli
	m = timer0_millis;
    5ec6:	20 91 32 04 	lds	r18, 0x0432
    5eca:	30 91 33 04 	lds	r19, 0x0433
    5ece:	40 91 34 04 	lds	r20, 0x0434
    5ed2:	50 91 35 04 	lds	r21, 0x0435
	SREG = oldSREG;
    5ed6:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    5ed8:	b9 01       	movw	r22, r18
    5eda:	ca 01       	movw	r24, r20
    5edc:	08 95       	ret

00005ede <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    5ede:	9b 01       	movw	r18, r22
    5ee0:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    5ee2:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    5ee4:	f8 94       	cli
	m = timer0_overflow_count;
    5ee6:	80 91 2e 04 	lds	r24, 0x042E
    5eea:	90 91 2f 04 	lds	r25, 0x042F
    5eee:	a0 91 30 04 	lds	r26, 0x0430
    5ef2:	b0 91 31 04 	lds	r27, 0x0431
#if defined(TCNT0)
	t = TCNT0;
    5ef6:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    5ef8:	a8 9b       	sbis	0x15, 0	; 21
    5efa:	05 c0       	rjmp	.+10     	; 0x5f06 <delay+0x28>
    5efc:	6f 3f       	cpi	r22, 0xFF	; 255
    5efe:	19 f0       	breq	.+6      	; 0x5f06 <delay+0x28>
		m++;
    5f00:	01 96       	adiw	r24, 0x01	; 1
    5f02:	a1 1d       	adc	r26, r1
    5f04:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    5f06:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    5f08:	ba 2f       	mov	r27, r26
    5f0a:	a9 2f       	mov	r26, r25
    5f0c:	98 2f       	mov	r25, r24
    5f0e:	88 27       	eor	r24, r24
    5f10:	86 0f       	add	r24, r22
    5f12:	91 1d       	adc	r25, r1
    5f14:	a1 1d       	adc	r26, r1
    5f16:	b1 1d       	adc	r27, r1
    5f18:	62 e0       	ldi	r22, 0x02	; 2
    5f1a:	88 0f       	add	r24, r24
    5f1c:	99 1f       	adc	r25, r25
    5f1e:	aa 1f       	adc	r26, r26
    5f20:	bb 1f       	adc	r27, r27
    5f22:	6a 95       	dec	r22
    5f24:	d1 f7       	brne	.-12     	; 0x5f1a <delay+0x3c>
    5f26:	bc 01       	movw	r22, r24
    5f28:	2d c0       	rjmp	.+90     	; 0x5f84 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    5f2a:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    5f2c:	f8 94       	cli
	m = timer0_overflow_count;
    5f2e:	80 91 2e 04 	lds	r24, 0x042E
    5f32:	90 91 2f 04 	lds	r25, 0x042F
    5f36:	a0 91 30 04 	lds	r26, 0x0430
    5f3a:	b0 91 31 04 	lds	r27, 0x0431
#if defined(TCNT0)
	t = TCNT0;
    5f3e:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    5f40:	a8 9b       	sbis	0x15, 0	; 21
    5f42:	05 c0       	rjmp	.+10     	; 0x5f4e <delay+0x70>
    5f44:	ef 3f       	cpi	r30, 0xFF	; 255
    5f46:	19 f0       	breq	.+6      	; 0x5f4e <delay+0x70>
		m++;
    5f48:	01 96       	adiw	r24, 0x01	; 1
    5f4a:	a1 1d       	adc	r26, r1
    5f4c:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    5f4e:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    5f50:	ba 2f       	mov	r27, r26
    5f52:	a9 2f       	mov	r26, r25
    5f54:	98 2f       	mov	r25, r24
    5f56:	88 27       	eor	r24, r24
    5f58:	8e 0f       	add	r24, r30
    5f5a:	91 1d       	adc	r25, r1
    5f5c:	a1 1d       	adc	r26, r1
    5f5e:	b1 1d       	adc	r27, r1
    5f60:	e2 e0       	ldi	r30, 0x02	; 2
    5f62:	88 0f       	add	r24, r24
    5f64:	99 1f       	adc	r25, r25
    5f66:	aa 1f       	adc	r26, r26
    5f68:	bb 1f       	adc	r27, r27
    5f6a:	ea 95       	dec	r30
    5f6c:	d1 f7       	brne	.-12     	; 0x5f62 <delay+0x84>
    5f6e:	86 1b       	sub	r24, r22
    5f70:	97 0b       	sbc	r25, r23
    5f72:	88 5e       	subi	r24, 0xE8	; 232
    5f74:	93 40       	sbci	r25, 0x03	; 3
    5f76:	c8 f2       	brcs	.-78     	; 0x5f2a <delay+0x4c>
			ms--;
    5f78:	21 50       	subi	r18, 0x01	; 1
    5f7a:	30 40       	sbci	r19, 0x00	; 0
    5f7c:	40 40       	sbci	r20, 0x00	; 0
    5f7e:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    5f80:	68 51       	subi	r22, 0x18	; 24
    5f82:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    5f84:	21 15       	cp	r18, r1
    5f86:	31 05       	cpc	r19, r1
    5f88:	41 05       	cpc	r20, r1
    5f8a:	51 05       	cpc	r21, r1
    5f8c:	71 f6       	brne	.-100    	; 0x5f2a <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    5f8e:	08 95       	ret

00005f90 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    5f90:	01 97       	sbiw	r24, 0x01	; 1
    5f92:	39 f0       	breq	.+14     	; 0x5fa2 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    5f94:	88 0f       	add	r24, r24
    5f96:	99 1f       	adc	r25, r25
    5f98:	88 0f       	add	r24, r24
    5f9a:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    5f9c:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    5f9e:	01 97       	sbiw	r24, 0x01	; 1
    5fa0:	f1 f7       	brne	.-4      	; 0x5f9e <delayMicroseconds+0xe>
    5fa2:	08 95       	ret

00005fa4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    5fa4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    5fa6:	84 b5       	in	r24, 0x24	; 36
    5fa8:	82 60       	ori	r24, 0x02	; 2
    5faa:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    5fac:	84 b5       	in	r24, 0x24	; 36
    5fae:	81 60       	ori	r24, 0x01	; 1
    5fb0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    5fb2:	85 b5       	in	r24, 0x25	; 37
    5fb4:	82 60       	ori	r24, 0x02	; 2
    5fb6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    5fb8:	85 b5       	in	r24, 0x25	; 37
    5fba:	81 60       	ori	r24, 0x01	; 1
    5fbc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    5fbe:	ee e6       	ldi	r30, 0x6E	; 110
    5fc0:	f0 e0       	ldi	r31, 0x00	; 0
    5fc2:	80 81       	ld	r24, Z
    5fc4:	81 60       	ori	r24, 0x01	; 1
    5fc6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    5fc8:	e1 e8       	ldi	r30, 0x81	; 129
    5fca:	f0 e0       	ldi	r31, 0x00	; 0
    5fcc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    5fce:	80 81       	ld	r24, Z
    5fd0:	82 60       	ori	r24, 0x02	; 2
    5fd2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    5fd4:	80 81       	ld	r24, Z
    5fd6:	81 60       	ori	r24, 0x01	; 1
    5fd8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    5fda:	e0 e8       	ldi	r30, 0x80	; 128
    5fdc:	f0 e0       	ldi	r31, 0x00	; 0
    5fde:	80 81       	ld	r24, Z
    5fe0:	81 60       	ori	r24, 0x01	; 1
    5fe2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    5fe4:	e1 eb       	ldi	r30, 0xB1	; 177
    5fe6:	f0 e0       	ldi	r31, 0x00	; 0
    5fe8:	80 81       	ld	r24, Z
    5fea:	84 60       	ori	r24, 0x04	; 4
    5fec:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    5fee:	e0 eb       	ldi	r30, 0xB0	; 176
    5ff0:	f0 e0       	ldi	r31, 0x00	; 0
    5ff2:	80 81       	ld	r24, Z
    5ff4:	81 60       	ori	r24, 0x01	; 1
    5ff6:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    5ff8:	ea e7       	ldi	r30, 0x7A	; 122
    5ffa:	f0 e0       	ldi	r31, 0x00	; 0
    5ffc:	80 81       	ld	r24, Z
    5ffe:	84 60       	ori	r24, 0x04	; 4
    6000:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    6002:	80 81       	ld	r24, Z
    6004:	82 60       	ori	r24, 0x02	; 2
    6006:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    6008:	80 81       	ld	r24, Z
    600a:	81 60       	ori	r24, 0x01	; 1
    600c:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    600e:	80 81       	ld	r24, Z
    6010:	80 68       	ori	r24, 0x80	; 128
    6012:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    6014:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    6018:	08 95       	ret

0000601a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    601a:	cf 93       	push	r28
    601c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    601e:	48 2f       	mov	r20, r24
    6020:	50 e0       	ldi	r21, 0x00	; 0
    6022:	ca 01       	movw	r24, r20
    6024:	83 5a       	subi	r24, 0xA3	; 163
    6026:	96 4f       	sbci	r25, 0xF6	; 246
    6028:	fc 01       	movw	r30, r24
    602a:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    602c:	47 5b       	subi	r20, 0xB7	; 183
    602e:	56 4f       	sbci	r21, 0xF6	; 246
    6030:	fa 01       	movw	r30, r20
    6032:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    6034:	88 23       	and	r24, r24
    6036:	69 f1       	breq	.+90     	; 0x6092 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    6038:	90 e0       	ldi	r25, 0x00	; 0
    603a:	88 0f       	add	r24, r24
    603c:	99 1f       	adc	r25, r25
    603e:	fc 01       	movw	r30, r24
    6040:	e5 5d       	subi	r30, 0xD5	; 213
    6042:	f6 4f       	sbci	r31, 0xF6	; 246
    6044:	a5 91       	lpm	r26, Z+
    6046:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    6048:	fc 01       	movw	r30, r24
    604a:	eb 5c       	subi	r30, 0xCB	; 203
    604c:	f6 4f       	sbci	r31, 0xF6	; 246
    604e:	c5 91       	lpm	r28, Z+
    6050:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    6052:	66 23       	and	r22, r22
    6054:	51 f4       	brne	.+20     	; 0x606a <pinMode+0x50>
		uint8_t oldSREG = SREG;
    6056:	2f b7       	in	r18, 0x3f	; 63
                cli();
    6058:	f8 94       	cli
		*reg &= ~bit;
    605a:	8c 91       	ld	r24, X
    605c:	93 2f       	mov	r25, r19
    605e:	90 95       	com	r25
    6060:	89 23       	and	r24, r25
    6062:	8c 93       	st	X, r24
		*out &= ~bit;
    6064:	88 81       	ld	r24, Y
    6066:	89 23       	and	r24, r25
    6068:	0b c0       	rjmp	.+22     	; 0x6080 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    606a:	62 30       	cpi	r22, 0x02	; 2
    606c:	61 f4       	brne	.+24     	; 0x6086 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    606e:	2f b7       	in	r18, 0x3f	; 63
                cli();
    6070:	f8 94       	cli
		*reg &= ~bit;
    6072:	8c 91       	ld	r24, X
    6074:	93 2f       	mov	r25, r19
    6076:	90 95       	com	r25
    6078:	89 23       	and	r24, r25
    607a:	8c 93       	st	X, r24
		*out |= bit;
    607c:	88 81       	ld	r24, Y
    607e:	83 2b       	or	r24, r19
    6080:	88 83       	st	Y, r24
		SREG = oldSREG;
    6082:	2f bf       	out	0x3f, r18	; 63
    6084:	06 c0       	rjmp	.+12     	; 0x6092 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    6086:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6088:	f8 94       	cli
		*reg |= bit;
    608a:	8c 91       	ld	r24, X
    608c:	83 2b       	or	r24, r19
    608e:	8c 93       	st	X, r24
		SREG = oldSREG;
    6090:	9f bf       	out	0x3f, r25	; 63
	}
}
    6092:	df 91       	pop	r29
    6094:	cf 91       	pop	r28
    6096:	08 95       	ret

00006098 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    6098:	48 2f       	mov	r20, r24
    609a:	50 e0       	ldi	r21, 0x00	; 0
    609c:	ca 01       	movw	r24, r20
    609e:	8f 58       	subi	r24, 0x8F	; 143
    60a0:	96 4f       	sbci	r25, 0xF6	; 246
    60a2:	fc 01       	movw	r30, r24
    60a4:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    60a6:	ca 01       	movw	r24, r20
    60a8:	83 5a       	subi	r24, 0xA3	; 163
    60aa:	96 4f       	sbci	r25, 0xF6	; 246
    60ac:	fc 01       	movw	r30, r24
    60ae:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    60b0:	47 5b       	subi	r20, 0xB7	; 183
    60b2:	56 4f       	sbci	r21, 0xF6	; 246
    60b4:	fa 01       	movw	r30, r20
    60b6:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    60b8:	33 23       	and	r19, r19
    60ba:	09 f4       	brne	.+2      	; 0x60be <digitalWrite+0x26>
    60bc:	40 c0       	rjmp	.+128    	; 0x613e <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    60be:	22 23       	and	r18, r18
    60c0:	51 f1       	breq	.+84     	; 0x6116 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    60c2:	23 30       	cpi	r18, 0x03	; 3
    60c4:	71 f0       	breq	.+28     	; 0x60e2 <digitalWrite+0x4a>
    60c6:	24 30       	cpi	r18, 0x04	; 4
    60c8:	28 f4       	brcc	.+10     	; 0x60d4 <digitalWrite+0x3c>
    60ca:	21 30       	cpi	r18, 0x01	; 1
    60cc:	a1 f0       	breq	.+40     	; 0x60f6 <digitalWrite+0x5e>
    60ce:	22 30       	cpi	r18, 0x02	; 2
    60d0:	11 f5       	brne	.+68     	; 0x6116 <digitalWrite+0x7e>
    60d2:	14 c0       	rjmp	.+40     	; 0x60fc <digitalWrite+0x64>
    60d4:	26 30       	cpi	r18, 0x06	; 6
    60d6:	b1 f0       	breq	.+44     	; 0x6104 <digitalWrite+0x6c>
    60d8:	27 30       	cpi	r18, 0x07	; 7
    60da:	c1 f0       	breq	.+48     	; 0x610c <digitalWrite+0x74>
    60dc:	24 30       	cpi	r18, 0x04	; 4
    60de:	d9 f4       	brne	.+54     	; 0x6116 <digitalWrite+0x7e>
    60e0:	04 c0       	rjmp	.+8      	; 0x60ea <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    60e2:	80 91 80 00 	lds	r24, 0x0080
    60e6:	8f 77       	andi	r24, 0x7F	; 127
    60e8:	03 c0       	rjmp	.+6      	; 0x60f0 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    60ea:	80 91 80 00 	lds	r24, 0x0080
    60ee:	8f 7d       	andi	r24, 0xDF	; 223
    60f0:	80 93 80 00 	sts	0x0080, r24
    60f4:	10 c0       	rjmp	.+32     	; 0x6116 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    60f6:	84 b5       	in	r24, 0x24	; 36
    60f8:	8f 77       	andi	r24, 0x7F	; 127
    60fa:	02 c0       	rjmp	.+4      	; 0x6100 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    60fc:	84 b5       	in	r24, 0x24	; 36
    60fe:	8f 7d       	andi	r24, 0xDF	; 223
    6100:	84 bd       	out	0x24, r24	; 36
    6102:	09 c0       	rjmp	.+18     	; 0x6116 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    6104:	80 91 b0 00 	lds	r24, 0x00B0
    6108:	8f 77       	andi	r24, 0x7F	; 127
    610a:	03 c0       	rjmp	.+6      	; 0x6112 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    610c:	80 91 b0 00 	lds	r24, 0x00B0
    6110:	8f 7d       	andi	r24, 0xDF	; 223
    6112:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    6116:	e3 2f       	mov	r30, r19
    6118:	f0 e0       	ldi	r31, 0x00	; 0
    611a:	ee 0f       	add	r30, r30
    611c:	ff 1f       	adc	r31, r31
    611e:	eb 5c       	subi	r30, 0xCB	; 203
    6120:	f6 4f       	sbci	r31, 0xF6	; 246
    6122:	a5 91       	lpm	r26, Z+
    6124:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    6126:	2f b7       	in	r18, 0x3f	; 63
	cli();
    6128:	f8 94       	cli

	if (val == LOW) {
    612a:	66 23       	and	r22, r22
    612c:	21 f4       	brne	.+8      	; 0x6136 <digitalWrite+0x9e>
		*out &= ~bit;
    612e:	8c 91       	ld	r24, X
    6130:	90 95       	com	r25
    6132:	89 23       	and	r24, r25
    6134:	02 c0       	rjmp	.+4      	; 0x613a <digitalWrite+0xa2>
	} else {
		*out |= bit;
    6136:	8c 91       	ld	r24, X
    6138:	89 2b       	or	r24, r25
    613a:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    613c:	2f bf       	out	0x3f, r18	; 63
    613e:	08 95       	ret

00006140 <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    6140:	68 2f       	mov	r22, r24
    6142:	70 e0       	ldi	r23, 0x00	; 0
    6144:	cb 01       	movw	r24, r22
    6146:	8f 58       	subi	r24, 0x8F	; 143
    6148:	96 4f       	sbci	r25, 0xF6	; 246
    614a:	fc 01       	movw	r30, r24
    614c:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    614e:	cb 01       	movw	r24, r22
    6150:	83 5a       	subi	r24, 0xA3	; 163
    6152:	96 4f       	sbci	r25, 0xF6	; 246
    6154:	fc 01       	movw	r30, r24
    6156:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    6158:	67 5b       	subi	r22, 0xB7	; 183
    615a:	76 4f       	sbci	r23, 0xF6	; 246
    615c:	fb 01       	movw	r30, r22
    615e:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
    6160:	99 23       	and	r25, r25
    6162:	19 f4       	brne	.+6      	; 0x616a <digitalRead+0x2a>
    6164:	20 e0       	ldi	r18, 0x00	; 0
    6166:	30 e0       	ldi	r19, 0x00	; 0
    6168:	3c c0       	rjmp	.+120    	; 0x61e2 <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    616a:	22 23       	and	r18, r18
    616c:	51 f1       	breq	.+84     	; 0x61c2 <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    616e:	23 30       	cpi	r18, 0x03	; 3
    6170:	71 f0       	breq	.+28     	; 0x618e <digitalRead+0x4e>
    6172:	24 30       	cpi	r18, 0x04	; 4
    6174:	28 f4       	brcc	.+10     	; 0x6180 <digitalRead+0x40>
    6176:	21 30       	cpi	r18, 0x01	; 1
    6178:	a1 f0       	breq	.+40     	; 0x61a2 <digitalRead+0x62>
    617a:	22 30       	cpi	r18, 0x02	; 2
    617c:	11 f5       	brne	.+68     	; 0x61c2 <digitalRead+0x82>
    617e:	14 c0       	rjmp	.+40     	; 0x61a8 <digitalRead+0x68>
    6180:	26 30       	cpi	r18, 0x06	; 6
    6182:	b1 f0       	breq	.+44     	; 0x61b0 <digitalRead+0x70>
    6184:	27 30       	cpi	r18, 0x07	; 7
    6186:	c1 f0       	breq	.+48     	; 0x61b8 <digitalRead+0x78>
    6188:	24 30       	cpi	r18, 0x04	; 4
    618a:	d9 f4       	brne	.+54     	; 0x61c2 <digitalRead+0x82>
    618c:	04 c0       	rjmp	.+8      	; 0x6196 <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    618e:	80 91 80 00 	lds	r24, 0x0080
    6192:	8f 77       	andi	r24, 0x7F	; 127
    6194:	03 c0       	rjmp	.+6      	; 0x619c <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    6196:	80 91 80 00 	lds	r24, 0x0080
    619a:	8f 7d       	andi	r24, 0xDF	; 223
    619c:	80 93 80 00 	sts	0x0080, r24
    61a0:	10 c0       	rjmp	.+32     	; 0x61c2 <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    61a2:	84 b5       	in	r24, 0x24	; 36
    61a4:	8f 77       	andi	r24, 0x7F	; 127
    61a6:	02 c0       	rjmp	.+4      	; 0x61ac <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    61a8:	84 b5       	in	r24, 0x24	; 36
    61aa:	8f 7d       	andi	r24, 0xDF	; 223
    61ac:	84 bd       	out	0x24, r24	; 36
    61ae:	09 c0       	rjmp	.+18     	; 0x61c2 <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    61b0:	80 91 b0 00 	lds	r24, 0x00B0
    61b4:	8f 77       	andi	r24, 0x7F	; 127
    61b6:	03 c0       	rjmp	.+6      	; 0x61be <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    61b8:	80 91 b0 00 	lds	r24, 0x00B0
    61bc:	8f 7d       	andi	r24, 0xDF	; 223
    61be:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    61c2:	89 2f       	mov	r24, r25
    61c4:	90 e0       	ldi	r25, 0x00	; 0
    61c6:	88 0f       	add	r24, r24
    61c8:	99 1f       	adc	r25, r25
    61ca:	81 5c       	subi	r24, 0xC1	; 193
    61cc:	96 4f       	sbci	r25, 0xF6	; 246
    61ce:	fc 01       	movw	r30, r24
    61d0:	a5 91       	lpm	r26, Z+
    61d2:	b4 91       	lpm	r27, Z+
    61d4:	8c 91       	ld	r24, X
    61d6:	20 e0       	ldi	r18, 0x00	; 0
    61d8:	30 e0       	ldi	r19, 0x00	; 0
    61da:	84 23       	and	r24, r20
    61dc:	11 f0       	breq	.+4      	; 0x61e2 <digitalRead+0xa2>
    61de:	21 e0       	ldi	r18, 0x01	; 1
    61e0:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    61e2:	c9 01       	movw	r24, r18
    61e4:	08 95       	ret

000061e6 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
    61e6:	1f 92       	push	r1
    61e8:	0f 92       	push	r0
    61ea:	0f b6       	in	r0, 0x3f	; 63
    61ec:	0f 92       	push	r0
    61ee:	11 24       	eor	r1, r1
    61f0:	2f 93       	push	r18
    61f2:	3f 93       	push	r19
    61f4:	4f 93       	push	r20
    61f6:	8f 93       	push	r24
    61f8:	9f 93       	push	r25
    61fa:	ef 93       	push	r30
    61fc:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    61fe:	80 91 c0 00 	lds	r24, 0x00C0
    6202:	82 fd       	sbrc	r24, 2
    6204:	1d c0       	rjmp	.+58     	; 0x6240 <__vector_18+0x5a>
      unsigned char c = UDR0;
    6206:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    620a:	20 91 77 04 	lds	r18, 0x0477
    620e:	30 91 78 04 	lds	r19, 0x0478

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    6212:	2f 5f       	subi	r18, 0xFF	; 255
    6214:	3f 4f       	sbci	r19, 0xFF	; 255
    6216:	2f 73       	andi	r18, 0x3F	; 63
    6218:	30 70       	andi	r19, 0x00	; 0
    621a:	80 91 79 04 	lds	r24, 0x0479
    621e:	90 91 7a 04 	lds	r25, 0x047A
    6222:	28 17       	cp	r18, r24
    6224:	39 07       	cpc	r19, r25
    6226:	71 f0       	breq	.+28     	; 0x6244 <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    6228:	e0 91 77 04 	lds	r30, 0x0477
    622c:	f0 91 78 04 	lds	r31, 0x0478
    6230:	e9 5c       	subi	r30, 0xC9	; 201
    6232:	fb 4f       	sbci	r31, 0xFB	; 251
    6234:	40 83       	st	Z, r20
    buffer->head = i;
    6236:	30 93 78 04 	sts	0x0478, r19
    623a:	20 93 77 04 	sts	0x0477, r18
    623e:	02 c0       	rjmp	.+4      	; 0x6244 <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    6240:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    6244:	ff 91       	pop	r31
    6246:	ef 91       	pop	r30
    6248:	9f 91       	pop	r25
    624a:	8f 91       	pop	r24
    624c:	4f 91       	pop	r20
    624e:	3f 91       	pop	r19
    6250:	2f 91       	pop	r18
    6252:	0f 90       	pop	r0
    6254:	0f be       	out	0x3f, r0	; 63
    6256:	0f 90       	pop	r0
    6258:	1f 90       	pop	r1
    625a:	18 95       	reti

0000625c <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    625c:	e0 91 cb 04 	lds	r30, 0x04CB
    6260:	f0 91 cc 04 	lds	r31, 0x04CC
    6264:	e0 5c       	subi	r30, 0xC0	; 192
    6266:	ff 4f       	sbci	r31, 0xFF	; 255
    6268:	81 91       	ld	r24, Z+
    626a:	91 91       	ld	r25, Z+
    626c:	20 81       	ld	r18, Z
    626e:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    6270:	82 1b       	sub	r24, r18
    6272:	93 0b       	sbc	r25, r19
    6274:	8f 73       	andi	r24, 0x3F	; 63
    6276:	90 70       	andi	r25, 0x00	; 0
    6278:	89 2b       	or	r24, r25
    627a:	11 f0       	breq	.+4      	; 0x6280 <_Z14serialEventRunv+0x24>
    627c:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <_Z11serialEventv>
    6280:	08 95       	ret

00006282 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    6282:	1f 92       	push	r1
    6284:	0f 92       	push	r0
    6286:	0f b6       	in	r0, 0x3f	; 63
    6288:	0f 92       	push	r0
    628a:	11 24       	eor	r1, r1
    628c:	2f 93       	push	r18
    628e:	3f 93       	push	r19
    6290:	8f 93       	push	r24
    6292:	9f 93       	push	r25
    6294:	ef 93       	push	r30
    6296:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    6298:	20 91 bb 04 	lds	r18, 0x04BB
    629c:	30 91 bc 04 	lds	r19, 0x04BC
    62a0:	80 91 bd 04 	lds	r24, 0x04BD
    62a4:	90 91 be 04 	lds	r25, 0x04BE
    62a8:	28 17       	cp	r18, r24
    62aa:	39 07       	cpc	r19, r25
    62ac:	31 f4       	brne	.+12     	; 0x62ba <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    62ae:	80 91 c1 00 	lds	r24, 0x00C1
    62b2:	8f 7d       	andi	r24, 0xDF	; 223
    62b4:	80 93 c1 00 	sts	0x00C1, r24
    62b8:	14 c0       	rjmp	.+40     	; 0x62e2 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    62ba:	e0 91 bd 04 	lds	r30, 0x04BD
    62be:	f0 91 be 04 	lds	r31, 0x04BE
    62c2:	e5 58       	subi	r30, 0x85	; 133
    62c4:	fb 4f       	sbci	r31, 0xFB	; 251
    62c6:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    62c8:	80 91 bd 04 	lds	r24, 0x04BD
    62cc:	90 91 be 04 	lds	r25, 0x04BE
    62d0:	01 96       	adiw	r24, 0x01	; 1
    62d2:	8f 73       	andi	r24, 0x3F	; 63
    62d4:	90 70       	andi	r25, 0x00	; 0
    62d6:	90 93 be 04 	sts	0x04BE, r25
    62da:	80 93 bd 04 	sts	0x04BD, r24
	
  #if defined(UDR0)
    UDR0 = c;
    62de:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    62e2:	ff 91       	pop	r31
    62e4:	ef 91       	pop	r30
    62e6:	9f 91       	pop	r25
    62e8:	8f 91       	pop	r24
    62ea:	3f 91       	pop	r19
    62ec:	2f 91       	pop	r18
    62ee:	0f 90       	pop	r0
    62f0:	0f be       	out	0x3f, r0	; 63
    62f2:	0f 90       	pop	r0
    62f4:	1f 90       	pop	r1
    62f6:	18 95       	reti

000062f8 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    62f8:	af 92       	push	r10
    62fa:	bf 92       	push	r11
    62fc:	df 92       	push	r13
    62fe:	ef 92       	push	r14
    6300:	ff 92       	push	r15
    6302:	0f 93       	push	r16
    6304:	1f 93       	push	r17
    6306:	cf 93       	push	r28
    6308:	df 93       	push	r29
    630a:	ec 01       	movw	r28, r24
    630c:	7a 01       	movw	r14, r20
    630e:	8b 01       	movw	r16, r22
    6310:	dd 24       	eor	r13, r13
    6312:	40 30       	cpi	r20, 0x00	; 0
    6314:	81 ee       	ldi	r24, 0xE1	; 225
    6316:	58 07       	cpc	r21, r24
    6318:	80 e0       	ldi	r24, 0x00	; 0
    631a:	68 07       	cpc	r22, r24
    631c:	80 e0       	ldi	r24, 0x00	; 0
    631e:	78 07       	cpc	r23, r24
    6320:	11 f0       	breq	.+4      	; 0x6326 <_ZN14HardwareSerial5beginEm+0x2e>
    6322:	dd 24       	eor	r13, r13
    6324:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    6326:	91 e0       	ldi	r25, 0x01	; 1
    6328:	a9 2e       	mov	r10, r25
    632a:	b1 2c       	mov	r11, r1
    632c:	ec 89       	ldd	r30, Y+20	; 0x14
    632e:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    6330:	dd 20       	and	r13, r13
    6332:	69 f0       	breq	.+26     	; 0x634e <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    6334:	c5 01       	movw	r24, r10
    6336:	08 a0       	ldd	r0, Y+32	; 0x20
    6338:	02 c0       	rjmp	.+4      	; 0x633e <_ZN14HardwareSerial5beginEm+0x46>
    633a:	88 0f       	add	r24, r24
    633c:	99 1f       	adc	r25, r25
    633e:	0a 94       	dec	r0
    6340:	e2 f7       	brpl	.-8      	; 0x633a <_ZN14HardwareSerial5beginEm+0x42>
    6342:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    6344:	60 e0       	ldi	r22, 0x00	; 0
    6346:	79 e0       	ldi	r23, 0x09	; 9
    6348:	8d e3       	ldi	r24, 0x3D	; 61
    634a:	90 e0       	ldi	r25, 0x00	; 0
    634c:	05 c0       	rjmp	.+10     	; 0x6358 <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    634e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    6350:	60 e8       	ldi	r22, 0x80	; 128
    6352:	74 e8       	ldi	r23, 0x84	; 132
    6354:	8e e1       	ldi	r24, 0x1E	; 30
    6356:	90 e0       	ldi	r25, 0x00	; 0
    6358:	a8 01       	movw	r20, r16
    635a:	97 01       	movw	r18, r14
    635c:	0e 94 59 3c 	call	0x78b2	; 0x78b2 <__udivmodsi4>
    6360:	21 50       	subi	r18, 0x01	; 1
    6362:	30 40       	sbci	r19, 0x00	; 0
    6364:	40 40       	sbci	r20, 0x00	; 0
    6366:	50 40       	sbci	r21, 0x00	; 0
    6368:	56 95       	lsr	r21
    636a:	47 95       	ror	r20
    636c:	37 95       	ror	r19
    636e:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    6370:	80 e1       	ldi	r24, 0x10	; 16
    6372:	20 30       	cpi	r18, 0x00	; 0
    6374:	38 07       	cpc	r19, r24
    6376:	20 f0       	brcs	.+8      	; 0x6380 <_ZN14HardwareSerial5beginEm+0x88>
    6378:	dd 20       	and	r13, r13
    637a:	11 f0       	breq	.+4      	; 0x6380 <_ZN14HardwareSerial5beginEm+0x88>
    637c:	dd 24       	eor	r13, r13
    637e:	d6 cf       	rjmp	.-84     	; 0x632c <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    6380:	e8 89       	ldd	r30, Y+16	; 0x10
    6382:	f9 89       	ldd	r31, Y+17	; 0x11
    6384:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    6386:	ea 89       	ldd	r30, Y+18	; 0x12
    6388:	fb 89       	ldd	r31, Y+19	; 0x13
    638a:	20 83       	st	Z, r18

  transmitting = false;
    638c:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    638e:	ee 89       	ldd	r30, Y+22	; 0x16
    6390:	ff 89       	ldd	r31, Y+23	; 0x17
    6392:	40 81       	ld	r20, Z
    6394:	21 e0       	ldi	r18, 0x01	; 1
    6396:	30 e0       	ldi	r19, 0x00	; 0
    6398:	c9 01       	movw	r24, r18
    639a:	0c 8c       	ldd	r0, Y+28	; 0x1c
    639c:	02 c0       	rjmp	.+4      	; 0x63a2 <_ZN14HardwareSerial5beginEm+0xaa>
    639e:	88 0f       	add	r24, r24
    63a0:	99 1f       	adc	r25, r25
    63a2:	0a 94       	dec	r0
    63a4:	e2 f7       	brpl	.-8      	; 0x639e <_ZN14HardwareSerial5beginEm+0xa6>
    63a6:	48 2b       	or	r20, r24
    63a8:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    63aa:	ee 89       	ldd	r30, Y+22	; 0x16
    63ac:	ff 89       	ldd	r31, Y+23	; 0x17
    63ae:	40 81       	ld	r20, Z
    63b0:	c9 01       	movw	r24, r18
    63b2:	0d 8c       	ldd	r0, Y+29	; 0x1d
    63b4:	02 c0       	rjmp	.+4      	; 0x63ba <_ZN14HardwareSerial5beginEm+0xc2>
    63b6:	88 0f       	add	r24, r24
    63b8:	99 1f       	adc	r25, r25
    63ba:	0a 94       	dec	r0
    63bc:	e2 f7       	brpl	.-8      	; 0x63b6 <_ZN14HardwareSerial5beginEm+0xbe>
    63be:	48 2b       	or	r20, r24
    63c0:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    63c2:	ee 89       	ldd	r30, Y+22	; 0x16
    63c4:	ff 89       	ldd	r31, Y+23	; 0x17
    63c6:	40 81       	ld	r20, Z
    63c8:	c9 01       	movw	r24, r18
    63ca:	0e 8c       	ldd	r0, Y+30	; 0x1e
    63cc:	02 c0       	rjmp	.+4      	; 0x63d2 <_ZN14HardwareSerial5beginEm+0xda>
    63ce:	88 0f       	add	r24, r24
    63d0:	99 1f       	adc	r25, r25
    63d2:	0a 94       	dec	r0
    63d4:	e2 f7       	brpl	.-8      	; 0x63ce <_ZN14HardwareSerial5beginEm+0xd6>
    63d6:	48 2b       	or	r20, r24
    63d8:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    63da:	ee 89       	ldd	r30, Y+22	; 0x16
    63dc:	ff 89       	ldd	r31, Y+23	; 0x17
    63de:	80 81       	ld	r24, Z
    63e0:	0f 8c       	ldd	r0, Y+31	; 0x1f
    63e2:	02 c0       	rjmp	.+4      	; 0x63e8 <_ZN14HardwareSerial5beginEm+0xf0>
    63e4:	22 0f       	add	r18, r18
    63e6:	33 1f       	adc	r19, r19
    63e8:	0a 94       	dec	r0
    63ea:	e2 f7       	brpl	.-8      	; 0x63e4 <_ZN14HardwareSerial5beginEm+0xec>
    63ec:	20 95       	com	r18
    63ee:	28 23       	and	r18, r24
    63f0:	20 83       	st	Z, r18
}
    63f2:	df 91       	pop	r29
    63f4:	cf 91       	pop	r28
    63f6:	1f 91       	pop	r17
    63f8:	0f 91       	pop	r16
    63fa:	ff 90       	pop	r15
    63fc:	ef 90       	pop	r14
    63fe:	df 90       	pop	r13
    6400:	bf 90       	pop	r11
    6402:	af 90       	pop	r10
    6404:	08 95       	ret

00006406 <_ZN14HardwareSerial3endEv>:
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
  cbi(*_ucsrb, _udrie);
}

void HardwareSerial::end()
    6406:	cf 93       	push	r28
    6408:	df 93       	push	r29
    640a:	dc 01       	movw	r26, r24
{
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    640c:	1e 96       	adiw	r26, 0x0e	; 14
    640e:	8d 91       	ld	r24, X+
    6410:	9c 91       	ld	r25, X
    6412:	1f 97       	sbiw	r26, 0x0f	; 15
    6414:	ec 01       	movw	r28, r24
    6416:	c0 5c       	subi	r28, 0xC0	; 192
    6418:	df 4f       	sbci	r29, 0xFF	; 255
    641a:	fc 01       	movw	r30, r24
    641c:	ee 5b       	subi	r30, 0xBE	; 190
    641e:	ff 4f       	sbci	r31, 0xFF	; 255
    6420:	28 81       	ld	r18, Y
    6422:	39 81       	ldd	r19, Y+1	; 0x01
    6424:	80 81       	ld	r24, Z
    6426:	91 81       	ldd	r25, Z+1	; 0x01
    6428:	28 17       	cp	r18, r24
    642a:	39 07       	cpc	r19, r25
    642c:	c9 f7       	brne	.-14     	; 0x6420 <_ZN14HardwareSerial3endEv+0x1a>
    ;

  cbi(*_ucsrb, _rxen);
    642e:	56 96       	adiw	r26, 0x16	; 22
    6430:	ed 91       	ld	r30, X+
    6432:	fc 91       	ld	r31, X
    6434:	57 97       	sbiw	r26, 0x17	; 23
    6436:	40 81       	ld	r20, Z
    6438:	21 e0       	ldi	r18, 0x01	; 1
    643a:	30 e0       	ldi	r19, 0x00	; 0
    643c:	c9 01       	movw	r24, r18
    643e:	5c 96       	adiw	r26, 0x1c	; 28
    6440:	0c 90       	ld	r0, X
    6442:	5c 97       	sbiw	r26, 0x1c	; 28
    6444:	02 c0       	rjmp	.+4      	; 0x644a <_ZN14HardwareSerial3endEv+0x44>
    6446:	88 0f       	add	r24, r24
    6448:	99 1f       	adc	r25, r25
    644a:	0a 94       	dec	r0
    644c:	e2 f7       	brpl	.-8      	; 0x6446 <_ZN14HardwareSerial3endEv+0x40>
    644e:	80 95       	com	r24
    6450:	84 23       	and	r24, r20
    6452:	80 83       	st	Z, r24
  cbi(*_ucsrb, _txen);
    6454:	56 96       	adiw	r26, 0x16	; 22
    6456:	ed 91       	ld	r30, X+
    6458:	fc 91       	ld	r31, X
    645a:	57 97       	sbiw	r26, 0x17	; 23
    645c:	40 81       	ld	r20, Z
    645e:	c9 01       	movw	r24, r18
    6460:	5d 96       	adiw	r26, 0x1d	; 29
    6462:	0c 90       	ld	r0, X
    6464:	5d 97       	sbiw	r26, 0x1d	; 29
    6466:	02 c0       	rjmp	.+4      	; 0x646c <_ZN14HardwareSerial3endEv+0x66>
    6468:	88 0f       	add	r24, r24
    646a:	99 1f       	adc	r25, r25
    646c:	0a 94       	dec	r0
    646e:	e2 f7       	brpl	.-8      	; 0x6468 <_ZN14HardwareSerial3endEv+0x62>
    6470:	80 95       	com	r24
    6472:	84 23       	and	r24, r20
    6474:	80 83       	st	Z, r24
  cbi(*_ucsrb, _rxcie);  
    6476:	56 96       	adiw	r26, 0x16	; 22
    6478:	ed 91       	ld	r30, X+
    647a:	fc 91       	ld	r31, X
    647c:	57 97       	sbiw	r26, 0x17	; 23
    647e:	40 81       	ld	r20, Z
    6480:	c9 01       	movw	r24, r18
    6482:	5e 96       	adiw	r26, 0x1e	; 30
    6484:	0c 90       	ld	r0, X
    6486:	5e 97       	sbiw	r26, 0x1e	; 30
    6488:	02 c0       	rjmp	.+4      	; 0x648e <_ZN14HardwareSerial3endEv+0x88>
    648a:	88 0f       	add	r24, r24
    648c:	99 1f       	adc	r25, r25
    648e:	0a 94       	dec	r0
    6490:	e2 f7       	brpl	.-8      	; 0x648a <_ZN14HardwareSerial3endEv+0x84>
    6492:	80 95       	com	r24
    6494:	84 23       	and	r24, r20
    6496:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
    6498:	56 96       	adiw	r26, 0x16	; 22
    649a:	ed 91       	ld	r30, X+
    649c:	fc 91       	ld	r31, X
    649e:	57 97       	sbiw	r26, 0x17	; 23
    64a0:	80 81       	ld	r24, Z
    64a2:	5f 96       	adiw	r26, 0x1f	; 31
    64a4:	0c 90       	ld	r0, X
    64a6:	5f 97       	sbiw	r26, 0x1f	; 31
    64a8:	02 c0       	rjmp	.+4      	; 0x64ae <_ZN14HardwareSerial3endEv+0xa8>
    64aa:	22 0f       	add	r18, r18
    64ac:	33 1f       	adc	r19, r19
    64ae:	0a 94       	dec	r0
    64b0:	e2 f7       	brpl	.-8      	; 0x64aa <_ZN14HardwareSerial3endEv+0xa4>
    64b2:	20 95       	com	r18
    64b4:	28 23       	and	r18, r24
    64b6:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    64b8:	1c 96       	adiw	r26, 0x0c	; 12
    64ba:	ed 91       	ld	r30, X+
    64bc:	fc 91       	ld	r31, X
    64be:	1d 97       	sbiw	r26, 0x0d	; 13
    64c0:	ee 5b       	subi	r30, 0xBE	; 190
    64c2:	ff 4f       	sbci	r31, 0xFF	; 255
    64c4:	80 81       	ld	r24, Z
    64c6:	91 81       	ldd	r25, Z+1	; 0x01
    64c8:	92 93       	st	-Z, r25
    64ca:	82 93       	st	-Z, r24
}
    64cc:	df 91       	pop	r29
    64ce:	cf 91       	pop	r28
    64d0:	08 95       	ret

000064d2 <_ZN14HardwareSerial9availableEv>:

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    64d2:	dc 01       	movw	r26, r24
    64d4:	1c 96       	adiw	r26, 0x0c	; 12
    64d6:	ed 91       	ld	r30, X+
    64d8:	fc 91       	ld	r31, X
    64da:	1d 97       	sbiw	r26, 0x0d	; 13
    64dc:	e0 5c       	subi	r30, 0xC0	; 192
    64de:	ff 4f       	sbci	r31, 0xFF	; 255
    64e0:	21 91       	ld	r18, Z+
    64e2:	31 91       	ld	r19, Z+
    64e4:	80 81       	ld	r24, Z
    64e6:	91 81       	ldd	r25, Z+1	; 0x01
    64e8:	28 1b       	sub	r18, r24
    64ea:	39 0b       	sbc	r19, r25
    64ec:	2f 73       	andi	r18, 0x3F	; 63
    64ee:	30 70       	andi	r19, 0x00	; 0
}
    64f0:	c9 01       	movw	r24, r18
    64f2:	08 95       	ret

000064f4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    64f4:	dc 01       	movw	r26, r24
    64f6:	1c 96       	adiw	r26, 0x0c	; 12
    64f8:	ed 91       	ld	r30, X+
    64fa:	fc 91       	ld	r31, X
    64fc:	1d 97       	sbiw	r26, 0x0d	; 13
    64fe:	e0 5c       	subi	r30, 0xC0	; 192
    6500:	ff 4f       	sbci	r31, 0xFF	; 255
    6502:	20 81       	ld	r18, Z
    6504:	31 81       	ldd	r19, Z+1	; 0x01
    6506:	e0 54       	subi	r30, 0x40	; 64
    6508:	f0 40       	sbci	r31, 0x00	; 0
    650a:	df 01       	movw	r26, r30
    650c:	ae 5b       	subi	r26, 0xBE	; 190
    650e:	bf 4f       	sbci	r27, 0xFF	; 255
    6510:	8d 91       	ld	r24, X+
    6512:	9c 91       	ld	r25, X
    6514:	11 97       	sbiw	r26, 0x01	; 1
    6516:	28 17       	cp	r18, r24
    6518:	39 07       	cpc	r19, r25
    651a:	19 f4       	brne	.+6      	; 0x6522 <_ZN14HardwareSerial4peekEv+0x2e>
    651c:	2f ef       	ldi	r18, 0xFF	; 255
    651e:	3f ef       	ldi	r19, 0xFF	; 255
    6520:	07 c0       	rjmp	.+14     	; 0x6530 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    6522:	8d 91       	ld	r24, X+
    6524:	9c 91       	ld	r25, X
    6526:	e8 0f       	add	r30, r24
    6528:	f9 1f       	adc	r31, r25
    652a:	80 81       	ld	r24, Z
    652c:	28 2f       	mov	r18, r24
    652e:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    6530:	c9 01       	movw	r24, r18
    6532:	08 95       	ret

00006534 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    6534:	dc 01       	movw	r26, r24
    6536:	1c 96       	adiw	r26, 0x0c	; 12
    6538:	ed 91       	ld	r30, X+
    653a:	fc 91       	ld	r31, X
    653c:	1d 97       	sbiw	r26, 0x0d	; 13
    653e:	e0 5c       	subi	r30, 0xC0	; 192
    6540:	ff 4f       	sbci	r31, 0xFF	; 255
    6542:	20 81       	ld	r18, Z
    6544:	31 81       	ldd	r19, Z+1	; 0x01
    6546:	e0 54       	subi	r30, 0x40	; 64
    6548:	f0 40       	sbci	r31, 0x00	; 0
    654a:	df 01       	movw	r26, r30
    654c:	ae 5b       	subi	r26, 0xBE	; 190
    654e:	bf 4f       	sbci	r27, 0xFF	; 255
    6550:	8d 91       	ld	r24, X+
    6552:	9c 91       	ld	r25, X
    6554:	11 97       	sbiw	r26, 0x01	; 1
    6556:	28 17       	cp	r18, r24
    6558:	39 07       	cpc	r19, r25
    655a:	19 f4       	brne	.+6      	; 0x6562 <_ZN14HardwareSerial4readEv+0x2e>
    655c:	2f ef       	ldi	r18, 0xFF	; 255
    655e:	3f ef       	ldi	r19, 0xFF	; 255
    6560:	10 c0       	rjmp	.+32     	; 0x6582 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    6562:	8d 91       	ld	r24, X+
    6564:	9c 91       	ld	r25, X
    6566:	11 97       	sbiw	r26, 0x01	; 1
    6568:	e8 0f       	add	r30, r24
    656a:	f9 1f       	adc	r31, r25
    656c:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    656e:	8d 91       	ld	r24, X+
    6570:	9c 91       	ld	r25, X
    6572:	11 97       	sbiw	r26, 0x01	; 1
    6574:	01 96       	adiw	r24, 0x01	; 1
    6576:	8f 73       	andi	r24, 0x3F	; 63
    6578:	90 70       	andi	r25, 0x00	; 0
    657a:	11 96       	adiw	r26, 0x01	; 1
    657c:	9c 93       	st	X, r25
    657e:	8e 93       	st	-X, r24
    return c;
    6580:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    6582:	c9 01       	movw	r24, r18
    6584:	08 95       	ret

00006586 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
    6586:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    6588:	91 96       	adiw	r26, 0x21	; 33
    658a:	8c 91       	ld	r24, X
    658c:	91 97       	sbiw	r26, 0x21	; 33
    658e:	88 23       	and	r24, r24
    6590:	39 f0       	breq	.+14     	; 0x65a0 <_ZN14HardwareSerial5flushEv+0x1a>
    6592:	54 96       	adiw	r26, 0x14	; 20
    6594:	ed 91       	ld	r30, X+
    6596:	fc 91       	ld	r31, X
    6598:	55 97       	sbiw	r26, 0x15	; 21
    659a:	80 81       	ld	r24, Z
    659c:	86 ff       	sbrs	r24, 6
    659e:	f9 cf       	rjmp	.-14     	; 0x6592 <_ZN14HardwareSerial5flushEv+0xc>
  transmitting = false;
    65a0:	91 96       	adiw	r26, 0x21	; 33
    65a2:	1c 92       	st	X, r1
}
    65a4:	08 95       	ret

000065a6 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    65a6:	cf 93       	push	r28
    65a8:	df 93       	push	r29
    65aa:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    65ac:	ee 85       	ldd	r30, Y+14	; 0x0e
    65ae:	ff 85       	ldd	r31, Y+15	; 0x0f
    65b0:	e0 5c       	subi	r30, 0xC0	; 192
    65b2:	ff 4f       	sbci	r31, 0xFF	; 255
    65b4:	20 81       	ld	r18, Z
    65b6:	31 81       	ldd	r19, Z+1	; 0x01
    65b8:	e0 54       	subi	r30, 0x40	; 64
    65ba:	f0 40       	sbci	r31, 0x00	; 0
    65bc:	2f 5f       	subi	r18, 0xFF	; 255
    65be:	3f 4f       	sbci	r19, 0xFF	; 255
    65c0:	2f 73       	andi	r18, 0x3F	; 63
    65c2:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    65c4:	df 01       	movw	r26, r30
    65c6:	ae 5b       	subi	r26, 0xBE	; 190
    65c8:	bf 4f       	sbci	r27, 0xFF	; 255
    65ca:	8d 91       	ld	r24, X+
    65cc:	9c 91       	ld	r25, X
    65ce:	11 97       	sbiw	r26, 0x01	; 1
    65d0:	28 17       	cp	r18, r24
    65d2:	39 07       	cpc	r19, r25
    65d4:	d1 f3       	breq	.-12     	; 0x65ca <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    65d6:	e0 5c       	subi	r30, 0xC0	; 192
    65d8:	ff 4f       	sbci	r31, 0xFF	; 255
    65da:	80 81       	ld	r24, Z
    65dc:	91 81       	ldd	r25, Z+1	; 0x01
    65de:	e0 54       	subi	r30, 0x40	; 64
    65e0:	f0 40       	sbci	r31, 0x00	; 0
    65e2:	e8 0f       	add	r30, r24
    65e4:	f9 1f       	adc	r31, r25
    65e6:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    65e8:	ee 85       	ldd	r30, Y+14	; 0x0e
    65ea:	ff 85       	ldd	r31, Y+15	; 0x0f
    65ec:	e0 5c       	subi	r30, 0xC0	; 192
    65ee:	ff 4f       	sbci	r31, 0xFF	; 255
    65f0:	31 83       	std	Z+1, r19	; 0x01
    65f2:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    65f4:	ee 89       	ldd	r30, Y+22	; 0x16
    65f6:	ff 89       	ldd	r31, Y+23	; 0x17
    65f8:	20 81       	ld	r18, Z
    65fa:	81 e0       	ldi	r24, 0x01	; 1
    65fc:	90 e0       	ldi	r25, 0x00	; 0
    65fe:	0f 8c       	ldd	r0, Y+31	; 0x1f
    6600:	02 c0       	rjmp	.+4      	; 0x6606 <_ZN14HardwareSerial5writeEh+0x60>
    6602:	88 0f       	add	r24, r24
    6604:	99 1f       	adc	r25, r25
    6606:	0a 94       	dec	r0
    6608:	e2 f7       	brpl	.-8      	; 0x6602 <_ZN14HardwareSerial5writeEh+0x5c>
    660a:	28 2b       	or	r18, r24
    660c:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    660e:	81 e0       	ldi	r24, 0x01	; 1
    6610:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    6612:	ec 89       	ldd	r30, Y+20	; 0x14
    6614:	fd 89       	ldd	r31, Y+21	; 0x15
    6616:	80 81       	ld	r24, Z
    6618:	80 64       	ori	r24, 0x40	; 64
    661a:	80 83       	st	Z, r24
  
  return 1;
}
    661c:	81 e0       	ldi	r24, 0x01	; 1
    661e:	90 e0       	ldi	r25, 0x00	; 0
    6620:	df 91       	pop	r29
    6622:	cf 91       	pop	r28
    6624:	08 95       	ret

00006626 <_ZN14HardwareSerialcvbEv>:

HardwareSerial::operator bool() {
	return true;
}
    6626:	81 e0       	ldi	r24, 0x01	; 1
    6628:	08 95       	ret

0000662a <_GLOBAL__I_rx_buffer>:
  public:
    Print() : write_error(0) {}
    662a:	10 92 c2 04 	sts	0x04C2, r1
    662e:	10 92 c1 04 	sts	0x04C1, r1
    6632:	88 ee       	ldi	r24, 0xE8	; 232
    6634:	93 e0       	ldi	r25, 0x03	; 3
    6636:	a0 e0       	ldi	r26, 0x00	; 0
    6638:	b0 e0       	ldi	r27, 0x00	; 0
    663a:	80 93 c3 04 	sts	0x04C3, r24
    663e:	90 93 c4 04 	sts	0x04C4, r25
    6642:	a0 93 c5 04 	sts	0x04C5, r26
    6646:	b0 93 c6 04 	sts	0x04C6, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    664a:	84 ee       	ldi	r24, 0xE4	; 228
    664c:	91 e0       	ldi	r25, 0x01	; 1
    664e:	90 93 c0 04 	sts	0x04C0, r25
    6652:	80 93 bf 04 	sts	0x04BF, r24
{
  _rx_buffer = rx_buffer;
    6656:	87 e3       	ldi	r24, 0x37	; 55
    6658:	94 e0       	ldi	r25, 0x04	; 4
    665a:	90 93 cc 04 	sts	0x04CC, r25
    665e:	80 93 cb 04 	sts	0x04CB, r24
  _tx_buffer = tx_buffer;
    6662:	8b e7       	ldi	r24, 0x7B	; 123
    6664:	94 e0       	ldi	r25, 0x04	; 4
    6666:	90 93 ce 04 	sts	0x04CE, r25
    666a:	80 93 cd 04 	sts	0x04CD, r24
  _ubrrh = ubrrh;
    666e:	85 ec       	ldi	r24, 0xC5	; 197
    6670:	90 e0       	ldi	r25, 0x00	; 0
    6672:	90 93 d0 04 	sts	0x04D0, r25
    6676:	80 93 cf 04 	sts	0x04CF, r24
  _ubrrl = ubrrl;
    667a:	84 ec       	ldi	r24, 0xC4	; 196
    667c:	90 e0       	ldi	r25, 0x00	; 0
    667e:	90 93 d2 04 	sts	0x04D2, r25
    6682:	80 93 d1 04 	sts	0x04D1, r24
  _ucsra = ucsra;
    6686:	80 ec       	ldi	r24, 0xC0	; 192
    6688:	90 e0       	ldi	r25, 0x00	; 0
    668a:	90 93 d4 04 	sts	0x04D4, r25
    668e:	80 93 d3 04 	sts	0x04D3, r24
  _ucsrb = ucsrb;
    6692:	81 ec       	ldi	r24, 0xC1	; 193
    6694:	90 e0       	ldi	r25, 0x00	; 0
    6696:	90 93 d6 04 	sts	0x04D6, r25
    669a:	80 93 d5 04 	sts	0x04D5, r24
  _ucsrc = ucsrc;
    669e:	82 ec       	ldi	r24, 0xC2	; 194
    66a0:	90 e0       	ldi	r25, 0x00	; 0
    66a2:	90 93 d8 04 	sts	0x04D8, r25
    66a6:	80 93 d7 04 	sts	0x04D7, r24
  _udr = udr;
    66aa:	86 ec       	ldi	r24, 0xC6	; 198
    66ac:	90 e0       	ldi	r25, 0x00	; 0
    66ae:	90 93 da 04 	sts	0x04DA, r25
    66b2:	80 93 d9 04 	sts	0x04D9, r24
  _rxen = rxen;
    66b6:	84 e0       	ldi	r24, 0x04	; 4
    66b8:	80 93 db 04 	sts	0x04DB, r24
  _txen = txen;
    66bc:	83 e0       	ldi	r24, 0x03	; 3
    66be:	80 93 dc 04 	sts	0x04DC, r24
  _rxcie = rxcie;
    66c2:	87 e0       	ldi	r24, 0x07	; 7
    66c4:	80 93 dd 04 	sts	0x04DD, r24
  _udrie = udrie;
    66c8:	85 e0       	ldi	r24, 0x05	; 5
    66ca:	80 93 de 04 	sts	0x04DE, r24
  _u2x = u2x;
    66ce:	81 e0       	ldi	r24, 0x01	; 1
    66d0:	80 93 df 04 	sts	0x04DF, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    66d4:	08 95       	ret

000066d6 <main>:
#include <Arduino.h>

int main(void)
    66d6:	cf 93       	push	r28
    66d8:	df 93       	push	r29
{
	init();
    66da:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    66de:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    66e2:	ce e2       	ldi	r28, 0x2E	; 46
    66e4:	d1 e3       	ldi	r29, 0x31	; 49
#endif
	
	setup();
    
	for (;;) {
		loop();
    66e6:	0e 94 af 11 	call	0x235e	; 0x235e <loop>
		if (serialEventRun) serialEventRun();
    66ea:	20 97       	sbiw	r28, 0x00	; 0
    66ec:	e1 f3       	breq	.-8      	; 0x66e6 <main+0x10>
    66ee:	0e 94 2e 31 	call	0x625c	; 0x625c <_Z14serialEventRunv>
    66f2:	f9 cf       	rjmp	.-14     	; 0x66e6 <main+0x10>

000066f4 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    66f4:	cf 92       	push	r12
    66f6:	df 92       	push	r13
    66f8:	ef 92       	push	r14
    66fa:	ff 92       	push	r15
    66fc:	0f 93       	push	r16
    66fe:	1f 93       	push	r17
    6700:	cf 93       	push	r28
    6702:	df 93       	push	r29
    6704:	7c 01       	movw	r14, r24
    6706:	6b 01       	movw	r12, r22
    6708:	8a 01       	movw	r16, r20
    670a:	c0 e0       	ldi	r28, 0x00	; 0
    670c:	d0 e0       	ldi	r29, 0x00	; 0
    670e:	0f c0       	rjmp	.+30     	; 0x672e <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    6710:	d6 01       	movw	r26, r12
    6712:	6d 91       	ld	r22, X+
    6714:	6d 01       	movw	r12, r26
    6716:	d7 01       	movw	r26, r14
    6718:	ed 91       	ld	r30, X+
    671a:	fc 91       	ld	r31, X
    671c:	01 90       	ld	r0, Z+
    671e:	f0 81       	ld	r31, Z
    6720:	e0 2d       	mov	r30, r0
    6722:	c7 01       	movw	r24, r14
    6724:	09 95       	icall
    6726:	c8 0f       	add	r28, r24
    6728:	d9 1f       	adc	r29, r25
    672a:	01 50       	subi	r16, 0x01	; 1
    672c:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    672e:	01 15       	cp	r16, r1
    6730:	11 05       	cpc	r17, r1
    6732:	71 f7       	brne	.-36     	; 0x6710 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    6734:	ce 01       	movw	r24, r28
    6736:	df 91       	pop	r29
    6738:	cf 91       	pop	r28
    673a:	1f 91       	pop	r17
    673c:	0f 91       	pop	r16
    673e:	ff 90       	pop	r15
    6740:	ef 90       	pop	r14
    6742:	df 90       	pop	r13
    6744:	cf 90       	pop	r12
    6746:	08 95       	ret

00006748 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
    6748:	ef 92       	push	r14
    674a:	ff 92       	push	r15
    674c:	0f 93       	push	r16
    674e:	1f 93       	push	r17
    6750:	cf 93       	push	r28
    6752:	df 93       	push	r29
    6754:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    6756:	8b 01       	movw	r16, r22
    6758:	c0 e0       	ldi	r28, 0x00	; 0
    675a:	d0 e0       	ldi	r29, 0x00	; 0
    675c:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    675e:	0f 5f       	subi	r16, 0xFF	; 255
    6760:	1f 4f       	sbci	r17, 0xFF	; 255
    6762:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    6764:	66 23       	and	r22, r22
    6766:	59 f0       	breq	.+22     	; 0x677e <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    n += write(c);
    6768:	d7 01       	movw	r26, r14
    676a:	ed 91       	ld	r30, X+
    676c:	fc 91       	ld	r31, X
    676e:	01 90       	ld	r0, Z+
    6770:	f0 81       	ld	r31, Z
    6772:	e0 2d       	mov	r30, r0
    6774:	c7 01       	movw	r24, r14
    6776:	09 95       	icall
    6778:	c8 0f       	add	r28, r24
    677a:	d9 1f       	adc	r29, r25
    677c:	ef cf       	rjmp	.-34     	; 0x675c <_ZN5Print5printEPK19__FlashStringHelper+0x14>
  }
  return n;
}
    677e:	ce 01       	movw	r24, r28
    6780:	df 91       	pop	r29
    6782:	cf 91       	pop	r28
    6784:	1f 91       	pop	r17
    6786:	0f 91       	pop	r16
    6788:	ff 90       	pop	r15
    678a:	ef 90       	pop	r14
    678c:	08 95       	ret

0000678e <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    678e:	dc 01       	movw	r26, r24
{
  return write(c);
    6790:	ed 91       	ld	r30, X+
    6792:	fc 91       	ld	r31, X
    6794:	01 90       	ld	r0, Z+
    6796:	f0 81       	ld	r31, Z
    6798:	e0 2d       	mov	r30, r0
    679a:	09 95       	icall
}
    679c:	08 95       	ret

0000679e <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    679e:	ef 92       	push	r14
    67a0:	ff 92       	push	r15
    67a2:	0f 93       	push	r16
    67a4:	1f 93       	push	r17
    67a6:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    67a8:	dc 01       	movw	r26, r24
    67aa:	ed 91       	ld	r30, X+
    67ac:	fc 91       	ld	r31, X
    67ae:	01 90       	ld	r0, Z+
    67b0:	f0 81       	ld	r31, Z
    67b2:	e0 2d       	mov	r30, r0
    67b4:	6d e0       	ldi	r22, 0x0D	; 13
    67b6:	09 95       	icall
    67b8:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    67ba:	d8 01       	movw	r26, r16
    67bc:	ed 91       	ld	r30, X+
    67be:	fc 91       	ld	r31, X
    67c0:	01 90       	ld	r0, Z+
    67c2:	f0 81       	ld	r31, Z
    67c4:	e0 2d       	mov	r30, r0
    67c6:	c8 01       	movw	r24, r16
    67c8:	6a e0       	ldi	r22, 0x0A	; 10
    67ca:	09 95       	icall
    67cc:	9c 01       	movw	r18, r24
    67ce:	2e 0d       	add	r18, r14
    67d0:	3f 1d       	adc	r19, r15
    67d2:	c9 01       	movw	r24, r18
    67d4:	1f 91       	pop	r17
    67d6:	0f 91       	pop	r16
    67d8:	ff 90       	pop	r15
    67da:	ef 90       	pop	r14
    67dc:	08 95       	ret

000067de <_ZN5Print7printlnEPK19__FlashStringHelper>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    67de:	ef 92       	push	r14
    67e0:	ff 92       	push	r15
    67e2:	0f 93       	push	r16
    67e4:	1f 93       	push	r17
    67e6:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    67e8:	0e 94 a4 33 	call	0x6748	; 0x6748 <_ZN5Print5printEPK19__FlashStringHelper>
    67ec:	8c 01       	movw	r16, r24
  n += println();
    67ee:	c7 01       	movw	r24, r14
    67f0:	0e 94 cf 33 	call	0x679e	; 0x679e <_ZN5Print7printlnEv>
    67f4:	9c 01       	movw	r18, r24
    67f6:	20 0f       	add	r18, r16
    67f8:	31 1f       	adc	r19, r17
  return n;
}
    67fa:	c9 01       	movw	r24, r18
    67fc:	1f 91       	pop	r17
    67fe:	0f 91       	pop	r16
    6800:	ff 90       	pop	r15
    6802:	ef 90       	pop	r14
    6804:	08 95       	ret

00006806 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    6806:	cf 93       	push	r28
    6808:	df 93       	push	r29
    680a:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    680c:	61 15       	cp	r22, r1
    680e:	71 05       	cpc	r23, r1
    6810:	19 f4       	brne	.+6      	; 0x6818 <_ZN5Print5writeEPKc+0x12>
    6812:	20 e0       	ldi	r18, 0x00	; 0
    6814:	30 e0       	ldi	r19, 0x00	; 0
    6816:	0f c0       	rjmp	.+30     	; 0x6836 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
    6818:	db 01       	movw	r26, r22
    681a:	0d 90       	ld	r0, X+
    681c:	00 20       	and	r0, r0
    681e:	e9 f7       	brne	.-6      	; 0x681a <_ZN5Print5writeEPKc+0x14>
    6820:	11 97       	sbiw	r26, 0x01	; 1
    6822:	a6 1b       	sub	r26, r22
    6824:	b7 0b       	sbc	r27, r23
    6826:	e8 81       	ld	r30, Y
    6828:	f9 81       	ldd	r31, Y+1	; 0x01
    682a:	02 80       	ldd	r0, Z+2	; 0x02
    682c:	f3 81       	ldd	r31, Z+3	; 0x03
    682e:	e0 2d       	mov	r30, r0
    6830:	ad 01       	movw	r20, r26
    6832:	09 95       	icall
    6834:	9c 01       	movw	r18, r24
    }
    6836:	c9 01       	movw	r24, r18
    6838:	df 91       	pop	r29
    683a:	cf 91       	pop	r28
    683c:	08 95       	ret

0000683e <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    683e:	4f 92       	push	r4
    6840:	5f 92       	push	r5
    6842:	7f 92       	push	r7
    6844:	8f 92       	push	r8
    6846:	9f 92       	push	r9
    6848:	af 92       	push	r10
    684a:	bf 92       	push	r11
    684c:	cf 92       	push	r12
    684e:	df 92       	push	r13
    6850:	ef 92       	push	r14
    6852:	ff 92       	push	r15
    6854:	0f 93       	push	r16
    6856:	1f 93       	push	r17
    6858:	df 93       	push	r29
    685a:	cf 93       	push	r28
    685c:	cd b7       	in	r28, 0x3d	; 61
    685e:	de b7       	in	r29, 0x3e	; 62
    6860:	a1 97       	sbiw	r28, 0x21	; 33
    6862:	0f b6       	in	r0, 0x3f	; 63
    6864:	f8 94       	cli
    6866:	de bf       	out	0x3e, r29	; 62
    6868:	0f be       	out	0x3f, r0	; 63
    686a:	cd bf       	out	0x3d, r28	; 61
    686c:	2c 01       	movw	r4, r24
    686e:	74 2e       	mov	r7, r20
    6870:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    6872:	22 30       	cpi	r18, 0x02	; 2
    6874:	08 f4       	brcc	.+2      	; 0x6878 <_ZN5Print11printNumberEmh+0x3a>
    6876:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    6878:	19 a2       	std	Y+33, r1	; 0x21
    687a:	31 e2       	ldi	r19, 0x21	; 33
    687c:	c3 2e       	mov	r12, r19
    687e:	d1 2c       	mov	r13, r1
    6880:	cc 0e       	add	r12, r28
    6882:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    6884:	82 2e       	mov	r8, r18
    6886:	99 24       	eor	r9, r9
    6888:	aa 24       	eor	r10, r10
    688a:	bb 24       	eor	r11, r11
    688c:	67 2d       	mov	r22, r7
    688e:	75 2f       	mov	r23, r21
    6890:	a5 01       	movw	r20, r10
    6892:	94 01       	movw	r18, r8
    6894:	0e 94 59 3c 	call	0x78b2	; 0x78b2 <__udivmodsi4>
    6898:	79 01       	movw	r14, r18
    689a:	8a 01       	movw	r16, r20
    char c = m - base * n;
    689c:	c8 01       	movw	r24, r16
    689e:	b7 01       	movw	r22, r14
    68a0:	a5 01       	movw	r20, r10
    68a2:	94 01       	movw	r18, r8
    68a4:	0e 94 13 3c 	call	0x7826	; 0x7826 <__mulsi3>
    68a8:	47 2d       	mov	r20, r7
    68aa:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    68ac:	08 94       	sec
    68ae:	c1 08       	sbc	r12, r1
    68b0:	d1 08       	sbc	r13, r1
    68b2:	4a 30       	cpi	r20, 0x0A	; 10
    68b4:	14 f4       	brge	.+4      	; 0x68ba <_ZN5Print11printNumberEmh+0x7c>
    68b6:	40 5d       	subi	r20, 0xD0	; 208
    68b8:	01 c0       	rjmp	.+2      	; 0x68bc <_ZN5Print11printNumberEmh+0x7e>
    68ba:	49 5c       	subi	r20, 0xC9	; 201
    68bc:	f6 01       	movw	r30, r12
    68be:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    68c0:	e1 14       	cp	r14, r1
    68c2:	f1 04       	cpc	r15, r1
    68c4:	01 05       	cpc	r16, r1
    68c6:	11 05       	cpc	r17, r1
    68c8:	21 f0       	breq	.+8      	; 0x68d2 <_ZN5Print11printNumberEmh+0x94>
    68ca:	7e 2c       	mov	r7, r14
    68cc:	5f 2d       	mov	r21, r15
    68ce:	c8 01       	movw	r24, r16
    68d0:	dd cf       	rjmp	.-70     	; 0x688c <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    68d2:	c2 01       	movw	r24, r4
    68d4:	b6 01       	movw	r22, r12
    68d6:	0e 94 03 34 	call	0x6806	; 0x6806 <_ZN5Print5writeEPKc>
}
    68da:	a1 96       	adiw	r28, 0x21	; 33
    68dc:	0f b6       	in	r0, 0x3f	; 63
    68de:	f8 94       	cli
    68e0:	de bf       	out	0x3e, r29	; 62
    68e2:	0f be       	out	0x3f, r0	; 63
    68e4:	cd bf       	out	0x3d, r28	; 61
    68e6:	cf 91       	pop	r28
    68e8:	df 91       	pop	r29
    68ea:	1f 91       	pop	r17
    68ec:	0f 91       	pop	r16
    68ee:	ff 90       	pop	r15
    68f0:	ef 90       	pop	r14
    68f2:	df 90       	pop	r13
    68f4:	cf 90       	pop	r12
    68f6:	bf 90       	pop	r11
    68f8:	af 90       	pop	r10
    68fa:	9f 90       	pop	r9
    68fc:	8f 90       	pop	r8
    68fe:	7f 90       	pop	r7
    6900:	5f 90       	pop	r5
    6902:	4f 90       	pop	r4
    6904:	08 95       	ret

00006906 <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    6906:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    6908:	21 15       	cp	r18, r1
    690a:	31 05       	cpc	r19, r1
    690c:	41 f4       	brne	.+16     	; 0x691e <_ZN5Print5printEmi+0x18>
    690e:	ed 91       	ld	r30, X+
    6910:	fc 91       	ld	r31, X
    6912:	01 90       	ld	r0, Z+
    6914:	f0 81       	ld	r31, Z
    6916:	e0 2d       	mov	r30, r0
    6918:	64 2f       	mov	r22, r20
    691a:	09 95       	icall
    691c:	08 95       	ret
  else return printNumber(n, base);
    691e:	0e 94 1f 34 	call	0x683e	; 0x683e <_ZN5Print11printNumberEmh>
}
    6922:	08 95       	ret

00006924 <_ZN5Print5printEji>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
    6924:	ef 92       	push	r14
    6926:	ff 92       	push	r15
    6928:	0f 93       	push	r16
    692a:	1f 93       	push	r17
    692c:	9a 01       	movw	r18, r20
{
  return print((unsigned long) n, base);
    692e:	7b 01       	movw	r14, r22
    6930:	00 e0       	ldi	r16, 0x00	; 0
    6932:	10 e0       	ldi	r17, 0x00	; 0
    6934:	b8 01       	movw	r22, r16
    6936:	a7 01       	movw	r20, r14
    6938:	0e 94 83 34 	call	0x6906	; 0x6906 <_ZN5Print5printEmi>
}
    693c:	1f 91       	pop	r17
    693e:	0f 91       	pop	r16
    6940:	ff 90       	pop	r15
    6942:	ef 90       	pop	r14
    6944:	08 95       	ret

00006946 <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    6946:	ef 92       	push	r14
    6948:	ff 92       	push	r15
    694a:	0f 93       	push	r16
    694c:	1f 93       	push	r17
    694e:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    6950:	e6 2e       	mov	r14, r22
    6952:	ff 24       	eor	r15, r15
    6954:	00 e0       	ldi	r16, 0x00	; 0
    6956:	10 e0       	ldi	r17, 0x00	; 0
    6958:	b8 01       	movw	r22, r16
    695a:	a7 01       	movw	r20, r14
    695c:	0e 94 83 34 	call	0x6906	; 0x6906 <_ZN5Print5printEmi>
}
    6960:	1f 91       	pop	r17
    6962:	0f 91       	pop	r16
    6964:	ff 90       	pop	r15
    6966:	ef 90       	pop	r14
    6968:	08 95       	ret

0000696a <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    696a:	cf 92       	push	r12
    696c:	df 92       	push	r13
    696e:	ef 92       	push	r14
    6970:	ff 92       	push	r15
    6972:	0f 93       	push	r16
    6974:	1f 93       	push	r17
    6976:	cf 93       	push	r28
    6978:	df 93       	push	r29
    697a:	ec 01       	movw	r28, r24
    697c:	6a 01       	movw	r12, r20
    697e:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    6980:	21 15       	cp	r18, r1
    6982:	31 05       	cpc	r19, r1
    6984:	41 f4       	brne	.+16     	; 0x6996 <_ZN5Print5printEli+0x2c>
    return write(n);
    6986:	e8 81       	ld	r30, Y
    6988:	f9 81       	ldd	r31, Y+1	; 0x01
    698a:	01 90       	ld	r0, Z+
    698c:	f0 81       	ld	r31, Z
    698e:	e0 2d       	mov	r30, r0
    6990:	64 2f       	mov	r22, r20
    6992:	09 95       	icall
    6994:	1f c0       	rjmp	.+62     	; 0x69d4 <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    6996:	2a 30       	cpi	r18, 0x0A	; 10
    6998:	31 05       	cpc	r19, r1
    699a:	d1 f4       	brne	.+52     	; 0x69d0 <_ZN5Print5printEli+0x66>
    if (n < 0) {
    699c:	77 ff       	sbrs	r23, 7
    699e:	17 c0       	rjmp	.+46     	; 0x69ce <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    69a0:	e8 81       	ld	r30, Y
    69a2:	f9 81       	ldd	r31, Y+1	; 0x01
    69a4:	01 90       	ld	r0, Z+
    69a6:	f0 81       	ld	r31, Z
    69a8:	e0 2d       	mov	r30, r0
    69aa:	6d e2       	ldi	r22, 0x2D	; 45
    69ac:	09 95       	icall
    69ae:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    69b0:	44 27       	eor	r20, r20
    69b2:	55 27       	eor	r21, r21
    69b4:	ba 01       	movw	r22, r20
    69b6:	4c 19       	sub	r20, r12
    69b8:	5d 09       	sbc	r21, r13
    69ba:	6e 09       	sbc	r22, r14
    69bc:	7f 09       	sbc	r23, r15
    69be:	ce 01       	movw	r24, r28
    69c0:	2a e0       	ldi	r18, 0x0A	; 10
    69c2:	0e 94 1f 34 	call	0x683e	; 0x683e <_ZN5Print11printNumberEmh>
    69c6:	98 01       	movw	r18, r16
    69c8:	28 0f       	add	r18, r24
    69ca:	39 1f       	adc	r19, r25
    69cc:	04 c0       	rjmp	.+8      	; 0x69d6 <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    69ce:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    69d0:	0e 94 1f 34 	call	0x683e	; 0x683e <_ZN5Print11printNumberEmh>
    69d4:	9c 01       	movw	r18, r24
  }
}
    69d6:	c9 01       	movw	r24, r18
    69d8:	df 91       	pop	r29
    69da:	cf 91       	pop	r28
    69dc:	1f 91       	pop	r17
    69de:	0f 91       	pop	r16
    69e0:	ff 90       	pop	r15
    69e2:	ef 90       	pop	r14
    69e4:	df 90       	pop	r13
    69e6:	cf 90       	pop	r12
    69e8:	08 95       	ret

000069ea <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    69ea:	ef 92       	push	r14
    69ec:	ff 92       	push	r15
    69ee:	0f 93       	push	r16
    69f0:	1f 93       	push	r17
    69f2:	7b 01       	movw	r14, r22
    69f4:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    69f6:	00 27       	eor	r16, r16
    69f8:	f7 fc       	sbrc	r15, 7
    69fa:	00 95       	com	r16
    69fc:	10 2f       	mov	r17, r16
    69fe:	b8 01       	movw	r22, r16
    6a00:	a7 01       	movw	r20, r14
    6a02:	0e 94 b5 34 	call	0x696a	; 0x696a <_ZN5Print5printEli>
}
    6a06:	1f 91       	pop	r17
    6a08:	0f 91       	pop	r16
    6a0a:	ff 90       	pop	r15
    6a0c:	ef 90       	pop	r14
    6a0e:	08 95       	ret

00006a10 <_ZN5Print5printERK6String>:
    n += write(c);
  }
  return n;
}

size_t Print::print(const String &s)
    6a10:	af 92       	push	r10
    6a12:	bf 92       	push	r11
    6a14:	cf 92       	push	r12
    6a16:	df 92       	push	r13
    6a18:	ef 92       	push	r14
    6a1a:	ff 92       	push	r15
    6a1c:	0f 93       	push	r16
    6a1e:	1f 93       	push	r17
    6a20:	cf 93       	push	r28
    6a22:	df 93       	push	r29
    6a24:	5c 01       	movw	r10, r24
    6a26:	6b 01       	movw	r12, r22
    6a28:	ee 24       	eor	r14, r14
    6a2a:	ff 24       	eor	r15, r15
    6a2c:	c0 e0       	ldi	r28, 0x00	; 0
    6a2e:	d0 e0       	ldi	r29, 0x00	; 0
    6a30:	10 c0       	rjmp	.+32     	; 0x6a52 <_ZN5Print5printERK6String+0x42>
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    n += write(s[i]);
    6a32:	d5 01       	movw	r26, r10
    6a34:	ed 91       	ld	r30, X+
    6a36:	fc 91       	ld	r31, X
    6a38:	00 81       	ld	r16, Z
    6a3a:	11 81       	ldd	r17, Z+1	; 0x01
    6a3c:	c6 01       	movw	r24, r12
    6a3e:	be 01       	movw	r22, r28
    6a40:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <_ZNK6StringixEj>
    6a44:	68 2f       	mov	r22, r24
    6a46:	c5 01       	movw	r24, r10
    6a48:	f8 01       	movw	r30, r16
    6a4a:	09 95       	icall
    6a4c:	e8 0e       	add	r14, r24
    6a4e:	f9 1e       	adc	r15, r25
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    6a50:	21 96       	adiw	r28, 0x01	; 1
    6a52:	f6 01       	movw	r30, r12
    6a54:	84 81       	ldd	r24, Z+4	; 0x04
    6a56:	95 81       	ldd	r25, Z+5	; 0x05
    6a58:	c8 17       	cp	r28, r24
    6a5a:	d9 07       	cpc	r29, r25
    6a5c:	50 f3       	brcs	.-44     	; 0x6a32 <_ZN5Print5printERK6String+0x22>
    n += write(s[i]);
  }
  return n;
}
    6a5e:	c7 01       	movw	r24, r14
    6a60:	df 91       	pop	r29
    6a62:	cf 91       	pop	r28
    6a64:	1f 91       	pop	r17
    6a66:	0f 91       	pop	r16
    6a68:	ff 90       	pop	r15
    6a6a:	ef 90       	pop	r14
    6a6c:	df 90       	pop	r13
    6a6e:	cf 90       	pop	r12
    6a70:	bf 90       	pop	r11
    6a72:	af 90       	pop	r10
    6a74:	08 95       	ret

00006a76 <_ZN5Print7printlnERK6String>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
    6a76:	ef 92       	push	r14
    6a78:	ff 92       	push	r15
    6a7a:	0f 93       	push	r16
    6a7c:	1f 93       	push	r17
    6a7e:	7c 01       	movw	r14, r24
{
  size_t n = print(s);
    6a80:	0e 94 08 35 	call	0x6a10	; 0x6a10 <_ZN5Print5printERK6String>
    6a84:	8c 01       	movw	r16, r24
  n += println();
    6a86:	c7 01       	movw	r24, r14
    6a88:	0e 94 cf 33 	call	0x679e	; 0x679e <_ZN5Print7printlnEv>
    6a8c:	9c 01       	movw	r18, r24
    6a8e:	20 0f       	add	r18, r16
    6a90:	31 1f       	adc	r19, r17
  return n;
}
    6a92:	c9 01       	movw	r24, r18
    6a94:	1f 91       	pop	r17
    6a96:	0f 91       	pop	r16
    6a98:	ff 90       	pop	r15
    6a9a:	ef 90       	pop	r14
    6a9c:	08 95       	ret

00006a9e <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
    6a9e:	fc 01       	movw	r30, r24
    6aa0:	9b 01       	movw	r18, r22
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    6aa2:	84 81       	ldd	r24, Z+4	; 0x04
    6aa4:	95 81       	ldd	r25, Z+5	; 0x05
    6aa6:	68 17       	cp	r22, r24
    6aa8:	79 07       	cpc	r23, r25
    6aaa:	28 f4       	brcc	.+10     	; 0x6ab6 <_ZN6StringixEj+0x18>
    6aac:	60 81       	ld	r22, Z
    6aae:	71 81       	ldd	r23, Z+1	; 0x01
    6ab0:	61 15       	cp	r22, r1
    6ab2:	71 05       	cpc	r23, r1
    6ab4:	29 f4       	brne	.+10     	; 0x6ac0 <_ZN6StringixEj+0x22>
		dummy_writable_char = 0;
    6ab6:	10 92 e1 04 	sts	0x04E1, r1
    6aba:	61 ee       	ldi	r22, 0xE1	; 225
    6abc:	74 e0       	ldi	r23, 0x04	; 4
    6abe:	02 c0       	rjmp	.+4      	; 0x6ac4 <_ZN6StringixEj+0x26>
		return dummy_writable_char;
	}
	return buffer[index];
    6ac0:	62 0f       	add	r22, r18
    6ac2:	73 1f       	adc	r23, r19
}
    6ac4:	cb 01       	movw	r24, r22
    6ac6:	08 95       	ret

00006ac8 <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
    6ac8:	fc 01       	movw	r30, r24
{
	if (index >= len || !buffer) return 0;
    6aca:	84 81       	ldd	r24, Z+4	; 0x04
    6acc:	95 81       	ldd	r25, Z+5	; 0x05
    6ace:	68 17       	cp	r22, r24
    6ad0:	79 07       	cpc	r23, r25
    6ad2:	48 f4       	brcc	.+18     	; 0x6ae6 <_ZNK6StringixEj+0x1e>
    6ad4:	01 90       	ld	r0, Z+
    6ad6:	f0 81       	ld	r31, Z
    6ad8:	e0 2d       	mov	r30, r0
    6ada:	30 97       	sbiw	r30, 0x00	; 0
    6adc:	21 f0       	breq	.+8      	; 0x6ae6 <_ZNK6StringixEj+0x1e>
	return buffer[index];
    6ade:	e6 0f       	add	r30, r22
    6ae0:	f7 1f       	adc	r31, r23
    6ae2:	80 81       	ld	r24, Z
    6ae4:	08 95       	ret
    6ae6:	80 e0       	ldi	r24, 0x00	; 0
}
    6ae8:	08 95       	ret

00006aea <_ZN6String4trimEv>:
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}

void String::trim(void)
    6aea:	cf 92       	push	r12
    6aec:	df 92       	push	r13
    6aee:	ef 92       	push	r14
    6af0:	ff 92       	push	r15
    6af2:	0f 93       	push	r16
    6af4:	1f 93       	push	r17
    6af6:	cf 93       	push	r28
    6af8:	df 93       	push	r29
    6afa:	6c 01       	movw	r12, r24
{
	if (!buffer || len == 0) return;
    6afc:	dc 01       	movw	r26, r24
    6afe:	ed 90       	ld	r14, X+
    6b00:	fc 90       	ld	r15, X
    6b02:	11 97       	sbiw	r26, 0x01	; 1
    6b04:	e1 14       	cp	r14, r1
    6b06:	f1 04       	cpc	r15, r1
    6b08:	09 f4       	brne	.+2      	; 0x6b0c <_ZN6String4trimEv+0x22>
    6b0a:	41 c0       	rjmp	.+130    	; 0x6b8e <_ZN6String4trimEv+0xa4>
    6b0c:	14 96       	adiw	r26, 0x04	; 4
    6b0e:	cd 91       	ld	r28, X+
    6b10:	dc 91       	ld	r29, X
    6b12:	15 97       	sbiw	r26, 0x05	; 5
    6b14:	20 97       	sbiw	r28, 0x00	; 0
    6b16:	d9 f1       	breq	.+118    	; 0x6b8e <_ZN6String4trimEv+0xa4>
    6b18:	87 01       	movw	r16, r14
    6b1a:	02 c0       	rjmp	.+4      	; 0x6b20 <_ZN6String4trimEv+0x36>
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    6b1c:	0f 5f       	subi	r16, 0xFF	; 255
    6b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    6b20:	f8 01       	movw	r30, r16
    6b22:	80 81       	ld	r24, Z
    6b24:	99 27       	eor	r25, r25
    6b26:	87 fd       	sbrc	r24, 7
    6b28:	90 95       	com	r25
    6b2a:	0e 94 81 3c 	call	0x7902	; 0x7902 <isspace>
    6b2e:	89 2b       	or	r24, r25
    6b30:	a9 f7       	brne	.-22     	; 0x6b1c <_ZN6String4trimEv+0x32>
	char *end = buffer + len - 1;
    6b32:	21 97       	sbiw	r28, 0x01	; 1
    6b34:	ce 0d       	add	r28, r14
    6b36:	df 1d       	adc	r29, r15
    6b38:	01 c0       	rjmp	.+2      	; 0x6b3c <_ZN6String4trimEv+0x52>
	while (isspace(*end) && end >= begin) end--;
    6b3a:	21 97       	sbiw	r28, 0x01	; 1
    6b3c:	88 81       	ld	r24, Y
    6b3e:	99 27       	eor	r25, r25
    6b40:	87 fd       	sbrc	r24, 7
    6b42:	90 95       	com	r25
    6b44:	0e 94 81 3c 	call	0x7902	; 0x7902 <isspace>
    6b48:	89 2b       	or	r24, r25
    6b4a:	19 f0       	breq	.+6      	; 0x6b52 <_ZN6String4trimEv+0x68>
    6b4c:	c0 17       	cp	r28, r16
    6b4e:	d1 07       	cpc	r29, r17
    6b50:	a0 f7       	brcc	.-24     	; 0x6b3a <_ZN6String4trimEv+0x50>
	len = end + 1 - begin;
    6b52:	fe 01       	movw	r30, r28
    6b54:	31 96       	adiw	r30, 0x01	; 1
    6b56:	e0 1b       	sub	r30, r16
    6b58:	f1 0b       	sbc	r31, r17
    6b5a:	d6 01       	movw	r26, r12
    6b5c:	15 96       	adiw	r26, 0x05	; 5
    6b5e:	fc 93       	st	X, r31
    6b60:	ee 93       	st	-X, r30
    6b62:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    6b64:	2d 91       	ld	r18, X+
    6b66:	3c 91       	ld	r19, X
    6b68:	20 17       	cp	r18, r16
    6b6a:	31 07       	cpc	r19, r17
    6b6c:	28 f4       	brcc	.+10     	; 0x6b78 <_ZN6String4trimEv+0x8e>
    6b6e:	c9 01       	movw	r24, r18
    6b70:	b8 01       	movw	r22, r16
    6b72:	af 01       	movw	r20, r30
    6b74:	0e 94 02 05 	call	0xa04	; 0xa04 <memcpy>
	buffer[len] = 0;
    6b78:	d6 01       	movw	r26, r12
    6b7a:	ed 91       	ld	r30, X+
    6b7c:	fc 91       	ld	r31, X
    6b7e:	11 97       	sbiw	r26, 0x01	; 1
    6b80:	14 96       	adiw	r26, 0x04	; 4
    6b82:	8d 91       	ld	r24, X+
    6b84:	9c 91       	ld	r25, X
    6b86:	15 97       	sbiw	r26, 0x05	; 5
    6b88:	e8 0f       	add	r30, r24
    6b8a:	f9 1f       	adc	r31, r25
    6b8c:	10 82       	st	Z, r1
}
    6b8e:	df 91       	pop	r29
    6b90:	cf 91       	pop	r28
    6b92:	1f 91       	pop	r17
    6b94:	0f 91       	pop	r16
    6b96:	ff 90       	pop	r15
    6b98:	ef 90       	pop	r14
    6b9a:	df 90       	pop	r13
    6b9c:	cf 90       	pop	r12
    6b9e:	08 95       	ret

00006ba0 <_ZN6String11toUpperCaseEv>:
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}

void String::toUpperCase(void)
    6ba0:	cf 93       	push	r28
    6ba2:	df 93       	push	r29
    6ba4:	fc 01       	movw	r30, r24
{
	if (!buffer) return;
    6ba6:	c0 81       	ld	r28, Z
    6ba8:	d1 81       	ldd	r29, Z+1	; 0x01
    6baa:	20 97       	sbiw	r28, 0x00	; 0
    6bac:	39 f4       	brne	.+14     	; 0x6bbc <_ZN6String11toUpperCaseEv+0x1c>
    6bae:	09 c0       	rjmp	.+18     	; 0x6bc2 <_ZN6String11toUpperCaseEv+0x22>
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
    6bb0:	99 27       	eor	r25, r25
    6bb2:	87 fd       	sbrc	r24, 7
    6bb4:	90 95       	com	r25
    6bb6:	0e 94 89 3c 	call	0x7912	; 0x7912 <toupper>
    6bba:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    6bbc:	88 81       	ld	r24, Y
    6bbe:	88 23       	and	r24, r24
    6bc0:	b9 f7       	brne	.-18     	; 0x6bb0 <_ZN6String11toUpperCaseEv+0x10>
		*p = toupper(*p);
	}
}
    6bc2:	df 91       	pop	r29
    6bc4:	cf 91       	pop	r28
    6bc6:	08 95       	ret

00006bc8 <_ZNK6String7indexOfEcj>:
int String::indexOf(char c) const
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
    6bc8:	cf 93       	push	r28
    6bca:	df 93       	push	r29
    6bcc:	fc 01       	movw	r30, r24
{
	if (fromIndex >= len) return -1;
    6bce:	84 81       	ldd	r24, Z+4	; 0x04
    6bd0:	95 81       	ldd	r25, Z+5	; 0x05
    6bd2:	48 17       	cp	r20, r24
    6bd4:	59 07       	cpc	r21, r25
    6bd6:	68 f4       	brcc	.+26     	; 0x6bf2 <_ZNK6String7indexOfEcj+0x2a>
	const char* temp = strchr(buffer + fromIndex, ch);
    6bd8:	c0 81       	ld	r28, Z
    6bda:	d1 81       	ldd	r29, Z+1	; 0x01
    6bdc:	77 27       	eor	r23, r23
    6bde:	67 fd       	sbrc	r22, 7
    6be0:	70 95       	com	r23
    6be2:	ce 01       	movw	r24, r28
    6be4:	84 0f       	add	r24, r20
    6be6:	95 1f       	adc	r25, r21
    6be8:	0e 94 0b 05 	call	0xa16	; 0xa16 <strchr>
    6bec:	9c 01       	movw	r18, r24
	if (temp == NULL) return -1;
    6bee:	00 97       	sbiw	r24, 0x00	; 0
    6bf0:	19 f4       	brne	.+6      	; 0x6bf8 <_ZNK6String7indexOfEcj+0x30>
    6bf2:	2f ef       	ldi	r18, 0xFF	; 255
    6bf4:	3f ef       	ldi	r19, 0xFF	; 255
    6bf6:	02 c0       	rjmp	.+4      	; 0x6bfc <_ZNK6String7indexOfEcj+0x34>
	return temp - buffer;
    6bf8:	2c 1b       	sub	r18, r28
    6bfa:	3d 0b       	sbc	r19, r29
}
    6bfc:	c9 01       	movw	r24, r18
    6bfe:	df 91       	pop	r29
    6c00:	cf 91       	pop	r28
    6c02:	08 95       	ret

00006c04 <_ZNK6String8endsWithERKS_>:
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
    6c04:	fc 01       	movw	r30, r24
    6c06:	db 01       	movw	r26, r22
{
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    6c08:	24 81       	ldd	r18, Z+4	; 0x04
    6c0a:	35 81       	ldd	r19, Z+5	; 0x05
    6c0c:	14 96       	adiw	r26, 0x04	; 4
    6c0e:	4d 91       	ld	r20, X+
    6c10:	5c 91       	ld	r21, X
    6c12:	15 97       	sbiw	r26, 0x05	; 5
    6c14:	24 17       	cp	r18, r20
    6c16:	35 07       	cpc	r19, r21
    6c18:	a8 f0       	brcs	.+42     	; 0x6c44 <_ZNK6String8endsWithERKS_+0x40>
    6c1a:	80 81       	ld	r24, Z
    6c1c:	91 81       	ldd	r25, Z+1	; 0x01
    6c1e:	00 97       	sbiw	r24, 0x00	; 0
    6c20:	89 f0       	breq	.+34     	; 0x6c44 <_ZNK6String8endsWithERKS_+0x40>
    6c22:	6d 91       	ld	r22, X+
    6c24:	7c 91       	ld	r23, X
    6c26:	61 15       	cp	r22, r1
    6c28:	71 05       	cpc	r23, r1
    6c2a:	61 f0       	breq	.+24     	; 0x6c44 <_ZNK6String8endsWithERKS_+0x40>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
    6c2c:	24 1b       	sub	r18, r20
    6c2e:	35 0b       	sbc	r19, r21
    6c30:	82 0f       	add	r24, r18
    6c32:	93 1f       	adc	r25, r19
    6c34:	0e 94 16 05 	call	0xa2c	; 0xa2c <strcmp>
    6c38:	9c 01       	movw	r18, r24
    6c3a:	80 e0       	ldi	r24, 0x00	; 0
    6c3c:	23 2b       	or	r18, r19
    6c3e:	19 f4       	brne	.+6      	; 0x6c46 <_ZNK6String8endsWithERKS_+0x42>
    6c40:	81 e0       	ldi	r24, 0x01	; 1
    6c42:	08 95       	ret
    6c44:	80 e0       	ldi	r24, 0x00	; 0
}
    6c46:	08 95       	ret

00006c48 <_ZNK6String6equalsEPKc>:
unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
    6c48:	dc 01       	movw	r26, r24
    6c4a:	fb 01       	movw	r30, r22
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    6c4c:	14 96       	adiw	r26, 0x04	; 4
    6c4e:	8d 91       	ld	r24, X+
    6c50:	9c 91       	ld	r25, X
    6c52:	15 97       	sbiw	r26, 0x05	; 5
    6c54:	89 2b       	or	r24, r25
    6c56:	31 f4       	brne	.+12     	; 0x6c64 <_ZNK6String6equalsEPKc+0x1c>
    6c58:	61 15       	cp	r22, r1
    6c5a:	71 05       	cpc	r23, r1
    6c5c:	a9 f0       	breq	.+42     	; 0x6c88 <_ZNK6String6equalsEPKc+0x40>
    6c5e:	90 e0       	ldi	r25, 0x00	; 0
    6c60:	80 81       	ld	r24, Z
    6c62:	08 c0       	rjmp	.+16     	; 0x6c74 <_ZNK6String6equalsEPKc+0x2c>
    6c64:	0d 90       	ld	r0, X+
    6c66:	bc 91       	ld	r27, X
    6c68:	a0 2d       	mov	r26, r0
	if (cstr == NULL) return buffer[0] == 0;
    6c6a:	61 15       	cp	r22, r1
    6c6c:	71 05       	cpc	r23, r1
    6c6e:	29 f4       	brne	.+10     	; 0x6c7a <_ZNK6String6equalsEPKc+0x32>
    6c70:	90 e0       	ldi	r25, 0x00	; 0
    6c72:	8c 91       	ld	r24, X
    6c74:	88 23       	and	r24, r24
    6c76:	49 f4       	brne	.+18     	; 0x6c8a <_ZNK6String6equalsEPKc+0x42>
    6c78:	07 c0       	rjmp	.+14     	; 0x6c88 <_ZNK6String6equalsEPKc+0x40>
	return strcmp(buffer, cstr) == 0;
    6c7a:	cd 01       	movw	r24, r26
    6c7c:	0e 94 16 05 	call	0xa2c	; 0xa2c <strcmp>
    6c80:	9c 01       	movw	r18, r24
    6c82:	90 e0       	ldi	r25, 0x00	; 0
    6c84:	23 2b       	or	r18, r19
    6c86:	09 f4       	brne	.+2      	; 0x6c8a <_ZNK6String6equalsEPKc+0x42>
    6c88:	91 e0       	ldi	r25, 0x01	; 1
}
    6c8a:	89 2f       	mov	r24, r25
    6c8c:	08 95       	ret

00006c8e <_ZNK6String9compareToERKS_>:

/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
    6c8e:	cf 93       	push	r28
    6c90:	df 93       	push	r29
    6c92:	9c 01       	movw	r18, r24
    6c94:	fb 01       	movw	r30, r22
{
	if (!buffer || !s.buffer) {
    6c96:	ec 01       	movw	r28, r24
    6c98:	a8 81       	ld	r26, Y
    6c9a:	b9 81       	ldd	r27, Y+1	; 0x01
    6c9c:	10 97       	sbiw	r26, 0x00	; 0
    6c9e:	29 f0       	breq	.+10     	; 0x6caa <_ZNK6String9compareToERKS_+0x1c>
    6ca0:	60 81       	ld	r22, Z
    6ca2:	71 81       	ldd	r23, Z+1	; 0x01
    6ca4:	61 15       	cp	r22, r1
    6ca6:	71 05       	cpc	r23, r1
    6ca8:	d1 f4       	brne	.+52     	; 0x6cde <_ZNK6String9compareToERKS_+0x50>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    6caa:	c0 81       	ld	r28, Z
    6cac:	d1 81       	ldd	r29, Z+1	; 0x01
    6cae:	20 97       	sbiw	r28, 0x00	; 0
    6cb0:	59 f0       	breq	.+22     	; 0x6cc8 <_ZNK6String9compareToERKS_+0x3a>
    6cb2:	84 81       	ldd	r24, Z+4	; 0x04
    6cb4:	95 81       	ldd	r25, Z+5	; 0x05
    6cb6:	89 2b       	or	r24, r25
    6cb8:	39 f0       	breq	.+14     	; 0x6cc8 <_ZNK6String9compareToERKS_+0x3a>
    6cba:	88 81       	ld	r24, Y
    6cbc:	90 e0       	ldi	r25, 0x00	; 0
    6cbe:	22 27       	eor	r18, r18
    6cc0:	33 27       	eor	r19, r19
    6cc2:	28 1b       	sub	r18, r24
    6cc4:	39 0b       	sbc	r19, r25
    6cc6:	12 c0       	rjmp	.+36     	; 0x6cec <_ZNK6String9compareToERKS_+0x5e>
		if (buffer && len > 0) return *(unsigned char *)buffer;
    6cc8:	10 97       	sbiw	r26, 0x00	; 0
    6cca:	71 f0       	breq	.+28     	; 0x6ce8 <_ZNK6String9compareToERKS_+0x5a>
    6ccc:	f9 01       	movw	r30, r18
    6cce:	84 81       	ldd	r24, Z+4	; 0x04
    6cd0:	95 81       	ldd	r25, Z+5	; 0x05
    6cd2:	89 2b       	or	r24, r25
    6cd4:	49 f0       	breq	.+18     	; 0x6ce8 <_ZNK6String9compareToERKS_+0x5a>
    6cd6:	8c 91       	ld	r24, X
    6cd8:	28 2f       	mov	r18, r24
    6cda:	30 e0       	ldi	r19, 0x00	; 0
    6cdc:	07 c0       	rjmp	.+14     	; 0x6cec <_ZNK6String9compareToERKS_+0x5e>
		return 0;
	}
	return strcmp(buffer, s.buffer);
    6cde:	cd 01       	movw	r24, r26
    6ce0:	0e 94 16 05 	call	0xa2c	; 0xa2c <strcmp>
    6ce4:	9c 01       	movw	r18, r24
    6ce6:	02 c0       	rjmp	.+4      	; 0x6cec <_ZNK6String9compareToERKS_+0x5e>
    6ce8:	20 e0       	ldi	r18, 0x00	; 0
    6cea:	30 e0       	ldi	r19, 0x00	; 0
}
    6cec:	c9 01       	movw	r24, r18
    6cee:	df 91       	pop	r29
    6cf0:	cf 91       	pop	r28
    6cf2:	08 95       	ret

00006cf4 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
    6cf4:	fc 01       	movw	r30, r24
    6cf6:	db 01       	movw	r26, r22
{
	return (len == s2.len && compareTo(s2) == 0);
    6cf8:	24 81       	ldd	r18, Z+4	; 0x04
    6cfa:	35 81       	ldd	r19, Z+5	; 0x05
    6cfc:	14 96       	adiw	r26, 0x04	; 4
    6cfe:	8d 91       	ld	r24, X+
    6d00:	9c 91       	ld	r25, X
    6d02:	15 97       	sbiw	r26, 0x05	; 5
    6d04:	28 17       	cp	r18, r24
    6d06:	39 07       	cpc	r19, r25
    6d08:	11 f0       	breq	.+4      	; 0x6d0e <_ZNK6String6equalsERKS_+0x1a>
    6d0a:	20 e0       	ldi	r18, 0x00	; 0
    6d0c:	07 c0       	rjmp	.+14     	; 0x6d1c <_ZNK6String6equalsERKS_+0x28>
    6d0e:	cf 01       	movw	r24, r30
    6d10:	0e 94 47 36 	call	0x6c8e	; 0x6c8e <_ZNK6String9compareToERKS_>
    6d14:	20 e0       	ldi	r18, 0x00	; 0
    6d16:	89 2b       	or	r24, r25
    6d18:	09 f4       	brne	.+2      	; 0x6d1c <_ZNK6String6equalsERKS_+0x28>
    6d1a:	21 e0       	ldi	r18, 0x01	; 1
}
    6d1c:	82 2f       	mov	r24, r18
    6d1e:	08 95       	ret

00006d20 <_ZNK6String10startsWithERKS_j>:
{
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
    6d20:	fc 01       	movw	r30, r24
    6d22:	db 01       	movw	r26, r22
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    6d24:	14 96       	adiw	r26, 0x04	; 4
    6d26:	2d 91       	ld	r18, X+
    6d28:	3c 91       	ld	r19, X
    6d2a:	15 97       	sbiw	r26, 0x05	; 5
    6d2c:	84 81       	ldd	r24, Z+4	; 0x04
    6d2e:	95 81       	ldd	r25, Z+5	; 0x05
    6d30:	82 1b       	sub	r24, r18
    6d32:	93 0b       	sbc	r25, r19
    6d34:	84 17       	cp	r24, r20
    6d36:	95 07       	cpc	r25, r21
    6d38:	a0 f0       	brcs	.+40     	; 0x6d62 <_ZNK6String10startsWithERKS_j+0x42>
    6d3a:	80 81       	ld	r24, Z
    6d3c:	91 81       	ldd	r25, Z+1	; 0x01
    6d3e:	00 97       	sbiw	r24, 0x00	; 0
    6d40:	81 f0       	breq	.+32     	; 0x6d62 <_ZNK6String10startsWithERKS_j+0x42>
    6d42:	6d 91       	ld	r22, X+
    6d44:	7c 91       	ld	r23, X
    6d46:	61 15       	cp	r22, r1
    6d48:	71 05       	cpc	r23, r1
    6d4a:	59 f0       	breq	.+22     	; 0x6d62 <_ZNK6String10startsWithERKS_j+0x42>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
    6d4c:	84 0f       	add	r24, r20
    6d4e:	95 1f       	adc	r25, r21
    6d50:	a9 01       	movw	r20, r18
    6d52:	0e 94 26 05 	call	0xa4c	; 0xa4c <strncmp>
    6d56:	9c 01       	movw	r18, r24
    6d58:	80 e0       	ldi	r24, 0x00	; 0
    6d5a:	23 2b       	or	r18, r19
    6d5c:	19 f4       	brne	.+6      	; 0x6d64 <_ZNK6String10startsWithERKS_j+0x44>
    6d5e:	81 e0       	ldi	r24, 0x01	; 1
    6d60:	08 95       	ret
    6d62:	80 e0       	ldi	r24, 0x00	; 0
}
    6d64:	08 95       	ret

00006d66 <_ZNK6String10startsWithERKS_>:
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	} 
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
    6d66:	fc 01       	movw	r30, r24
    6d68:	db 01       	movw	r26, r22
{
	if (len < s2.len) return 0;
    6d6a:	24 81       	ldd	r18, Z+4	; 0x04
    6d6c:	35 81       	ldd	r19, Z+5	; 0x05
    6d6e:	14 96       	adiw	r26, 0x04	; 4
    6d70:	8d 91       	ld	r24, X+
    6d72:	9c 91       	ld	r25, X
    6d74:	15 97       	sbiw	r26, 0x05	; 5
    6d76:	28 17       	cp	r18, r24
    6d78:	39 07       	cpc	r19, r25
    6d7a:	10 f4       	brcc	.+4      	; 0x6d80 <_ZNK6String10startsWithERKS_+0x1a>
    6d7c:	80 e0       	ldi	r24, 0x00	; 0
    6d7e:	08 95       	ret
	return startsWith(s2, 0);
    6d80:	cf 01       	movw	r24, r30
    6d82:	40 e0       	ldi	r20, 0x00	; 0
    6d84:	50 e0       	ldi	r21, 0x00	; 0
    6d86:	0e 94 90 36 	call	0x6d20	; 0x6d20 <_ZNK6String10startsWithERKS_j>
}
    6d8a:	08 95       	ret

00006d8c <_ZN6String12changeBufferEj>:
		return 1;
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
    6d8c:	0f 93       	push	r16
    6d8e:	1f 93       	push	r17
    6d90:	cf 93       	push	r28
    6d92:	df 93       	push	r29
    6d94:	ec 01       	movw	r28, r24
    6d96:	8b 01       	movw	r16, r22
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    6d98:	6f 5f       	subi	r22, 0xFF	; 255
    6d9a:	7f 4f       	sbci	r23, 0xFF	; 255
    6d9c:	88 81       	ld	r24, Y
    6d9e:	99 81       	ldd	r25, Y+1	; 0x01
    6da0:	0e 94 17 39 	call	0x722e	; 0x722e <realloc>
	if (newbuffer) {
    6da4:	00 97       	sbiw	r24, 0x00	; 0
    6da6:	11 f4       	brne	.+4      	; 0x6dac <_ZN6String12changeBufferEj+0x20>
    6da8:	80 e0       	ldi	r24, 0x00	; 0
    6daa:	05 c0       	rjmp	.+10     	; 0x6db6 <_ZN6String12changeBufferEj+0x2a>
		buffer = newbuffer;
    6dac:	99 83       	std	Y+1, r25	; 0x01
    6dae:	88 83       	st	Y, r24
		capacity = maxStrLen;
    6db0:	1b 83       	std	Y+3, r17	; 0x03
    6db2:	0a 83       	std	Y+2, r16	; 0x02
    6db4:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    6db6:	df 91       	pop	r29
    6db8:	cf 91       	pop	r28
    6dba:	1f 91       	pop	r17
    6dbc:	0f 91       	pop	r16
    6dbe:	08 95       	ret

00006dc0 <_ZN6String7reserveEj>:
	if (buffer) free(buffer);
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
    6dc0:	cf 93       	push	r28
    6dc2:	df 93       	push	r29
    6dc4:	ec 01       	movw	r28, r24
{
	if (buffer && capacity >= size) return 1;
    6dc6:	88 81       	ld	r24, Y
    6dc8:	99 81       	ldd	r25, Y+1	; 0x01
    6dca:	89 2b       	or	r24, r25
    6dcc:	29 f0       	breq	.+10     	; 0x6dd8 <_ZN6String7reserveEj+0x18>
    6dce:	8a 81       	ldd	r24, Y+2	; 0x02
    6dd0:	9b 81       	ldd	r25, Y+3	; 0x03
    6dd2:	86 17       	cp	r24, r22
    6dd4:	97 07       	cpc	r25, r23
    6dd6:	60 f4       	brcc	.+24     	; 0x6df0 <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    6dd8:	ce 01       	movw	r24, r28
    6dda:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <_ZN6String12changeBufferEj>
    6dde:	88 23       	and	r24, r24
    6de0:	41 f0       	breq	.+16     	; 0x6df2 <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    6de2:	8c 81       	ldd	r24, Y+4	; 0x04
    6de4:	9d 81       	ldd	r25, Y+5	; 0x05
    6de6:	89 2b       	or	r24, r25
    6de8:	19 f4       	brne	.+6      	; 0x6df0 <_ZN6String7reserveEj+0x30>
    6dea:	e8 81       	ld	r30, Y
    6dec:	f9 81       	ldd	r31, Y+1	; 0x01
    6dee:	10 82       	st	Z, r1
    6df0:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    6df2:	df 91       	pop	r29
    6df4:	cf 91       	pop	r28
    6df6:	08 95       	ret

00006df8 <_ZN6String6concatEPKcj>:
unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
    6df8:	ef 92       	push	r14
    6dfa:	ff 92       	push	r15
    6dfc:	0f 93       	push	r16
    6dfe:	1f 93       	push	r17
    6e00:	cf 93       	push	r28
    6e02:	df 93       	push	r29
    6e04:	ec 01       	movw	r28, r24
    6e06:	7b 01       	movw	r14, r22
{
	unsigned int newlen = len + length;
    6e08:	6c 81       	ldd	r22, Y+4	; 0x04
    6e0a:	7d 81       	ldd	r23, Y+5	; 0x05
	if (!cstr) return 0;
    6e0c:	e1 14       	cp	r14, r1
    6e0e:	f1 04       	cpc	r15, r1
    6e10:	c1 f0       	breq	.+48     	; 0x6e42 <_ZN6String6concatEPKcj+0x4a>
	if (length == 0) return 1;
    6e12:	41 15       	cp	r20, r1
    6e14:	51 05       	cpc	r21, r1
    6e16:	99 f0       	breq	.+38     	; 0x6e3e <_ZN6String6concatEPKcj+0x46>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    6e18:	8a 01       	movw	r16, r20
    6e1a:	06 0f       	add	r16, r22
    6e1c:	17 1f       	adc	r17, r23
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
    6e1e:	b8 01       	movw	r22, r16
    6e20:	0e 94 e0 36 	call	0x6dc0	; 0x6dc0 <_ZN6String7reserveEj>
    6e24:	88 23       	and	r24, r24
    6e26:	69 f0       	breq	.+26     	; 0x6e42 <_ZN6String6concatEPKcj+0x4a>
	strcpy(buffer + len, cstr);
    6e28:	88 81       	ld	r24, Y
    6e2a:	99 81       	ldd	r25, Y+1	; 0x01
    6e2c:	2c 81       	ldd	r18, Y+4	; 0x04
    6e2e:	3d 81       	ldd	r19, Y+5	; 0x05
    6e30:	82 0f       	add	r24, r18
    6e32:	93 1f       	adc	r25, r19
    6e34:	b7 01       	movw	r22, r14
    6e36:	0e 94 1f 05 	call	0xa3e	; 0xa3e <strcpy>
	len = newlen;
    6e3a:	1d 83       	std	Y+5, r17	; 0x05
    6e3c:	0c 83       	std	Y+4, r16	; 0x04
    6e3e:	81 e0       	ldi	r24, 0x01	; 1
    6e40:	01 c0       	rjmp	.+2      	; 0x6e44 <_ZN6String6concatEPKcj+0x4c>
	return 1;
    6e42:	80 e0       	ldi	r24, 0x00	; 0
}
    6e44:	df 91       	pop	r29
    6e46:	cf 91       	pop	r28
    6e48:	1f 91       	pop	r17
    6e4a:	0f 91       	pop	r16
    6e4c:	ff 90       	pop	r15
    6e4e:	ef 90       	pop	r14
    6e50:	08 95       	ret

00006e52 <_ZN6String6concatEj>:
	char buf[7];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(unsigned int num)
    6e52:	ef 92       	push	r14
    6e54:	ff 92       	push	r15
    6e56:	0f 93       	push	r16
    6e58:	1f 93       	push	r17
    6e5a:	df 93       	push	r29
    6e5c:	cf 93       	push	r28
    6e5e:	00 d0       	rcall	.+0      	; 0x6e60 <_ZN6String6concatEj+0xe>
    6e60:	00 d0       	rcall	.+0      	; 0x6e62 <_ZN6String6concatEj+0x10>
    6e62:	00 d0       	rcall	.+0      	; 0x6e64 <_ZN6String6concatEj+0x12>
    6e64:	cd b7       	in	r28, 0x3d	; 61
    6e66:	de b7       	in	r29, 0x3e	; 62
    6e68:	7c 01       	movw	r14, r24
    6e6a:	cb 01       	movw	r24, r22
{
	char buf[6];
	utoa(num, buf, 10);
    6e6c:	8e 01       	movw	r16, r28
    6e6e:	0f 5f       	subi	r16, 0xFF	; 255
    6e70:	1f 4f       	sbci	r17, 0xFF	; 255
    6e72:	b8 01       	movw	r22, r16
    6e74:	4a e0       	ldi	r20, 0x0A	; 10
    6e76:	50 e0       	ldi	r21, 0x00	; 0
    6e78:	0e 94 55 05 	call	0xaaa	; 0xaaa <utoa>
	return concat(buf, strlen(buf));
    6e7c:	f8 01       	movw	r30, r16
    6e7e:	01 90       	ld	r0, Z+
    6e80:	00 20       	and	r0, r0
    6e82:	e9 f7       	brne	.-6      	; 0x6e7e <_ZN6String6concatEj+0x2c>
    6e84:	31 97       	sbiw	r30, 0x01	; 1
    6e86:	e0 1b       	sub	r30, r16
    6e88:	f1 0b       	sbc	r31, r17
    6e8a:	c7 01       	movw	r24, r14
    6e8c:	b8 01       	movw	r22, r16
    6e8e:	af 01       	movw	r20, r30
    6e90:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <_ZN6String6concatEPKcj>
}
    6e94:	26 96       	adiw	r28, 0x06	; 6
    6e96:	0f b6       	in	r0, 0x3f	; 63
    6e98:	f8 94       	cli
    6e9a:	de bf       	out	0x3e, r29	; 62
    6e9c:	0f be       	out	0x3f, r0	; 63
    6e9e:	cd bf       	out	0x3d, r28	; 61
    6ea0:	cf 91       	pop	r28
    6ea2:	df 91       	pop	r29
    6ea4:	1f 91       	pop	r17
    6ea6:	0f 91       	pop	r16
    6ea8:	ff 90       	pop	r15
    6eaa:	ef 90       	pop	r14
    6eac:	08 95       	ret

00006eae <_ZN6String6concatEi>:
	char buf[4];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
    6eae:	ef 92       	push	r14
    6eb0:	ff 92       	push	r15
    6eb2:	0f 93       	push	r16
    6eb4:	1f 93       	push	r17
    6eb6:	df 93       	push	r29
    6eb8:	cf 93       	push	r28
    6eba:	cd b7       	in	r28, 0x3d	; 61
    6ebc:	de b7       	in	r29, 0x3e	; 62
    6ebe:	27 97       	sbiw	r28, 0x07	; 7
    6ec0:	0f b6       	in	r0, 0x3f	; 63
    6ec2:	f8 94       	cli
    6ec4:	de bf       	out	0x3e, r29	; 62
    6ec6:	0f be       	out	0x3f, r0	; 63
    6ec8:	cd bf       	out	0x3d, r28	; 61
    6eca:	7c 01       	movw	r14, r24
    6ecc:	cb 01       	movw	r24, r22
{
	char buf[7];
	itoa(num, buf, 10);
    6ece:	8e 01       	movw	r16, r28
    6ed0:	0f 5f       	subi	r16, 0xFF	; 255
    6ed2:	1f 4f       	sbci	r17, 0xFF	; 255
    6ed4:	b8 01       	movw	r22, r16
    6ed6:	4a e0       	ldi	r20, 0x0A	; 10
    6ed8:	50 e0       	ldi	r21, 0x00	; 0
    6eda:	0e 94 34 05 	call	0xa68	; 0xa68 <itoa>
	return concat(buf, strlen(buf));
    6ede:	f8 01       	movw	r30, r16
    6ee0:	01 90       	ld	r0, Z+
    6ee2:	00 20       	and	r0, r0
    6ee4:	e9 f7       	brne	.-6      	; 0x6ee0 <_ZN6String6concatEi+0x32>
    6ee6:	31 97       	sbiw	r30, 0x01	; 1
    6ee8:	e0 1b       	sub	r30, r16
    6eea:	f1 0b       	sbc	r31, r17
    6eec:	c7 01       	movw	r24, r14
    6eee:	b8 01       	movw	r22, r16
    6ef0:	af 01       	movw	r20, r30
    6ef2:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <_ZN6String6concatEPKcj>
}
    6ef6:	27 96       	adiw	r28, 0x07	; 7
    6ef8:	0f b6       	in	r0, 0x3f	; 63
    6efa:	f8 94       	cli
    6efc:	de bf       	out	0x3e, r29	; 62
    6efe:	0f be       	out	0x3f, r0	; 63
    6f00:	cd bf       	out	0x3d, r28	; 61
    6f02:	cf 91       	pop	r28
    6f04:	df 91       	pop	r29
    6f06:	1f 91       	pop	r17
    6f08:	0f 91       	pop	r16
    6f0a:	ff 90       	pop	r15
    6f0c:	ef 90       	pop	r14
    6f0e:	08 95       	ret

00006f10 <_ZN6String6concatEh>:
	buf[0] = c;
	buf[1] = 0;
	return concat(buf, 1);
}

unsigned char String::concat(unsigned char num)
    6f10:	ef 92       	push	r14
    6f12:	ff 92       	push	r15
    6f14:	0f 93       	push	r16
    6f16:	1f 93       	push	r17
    6f18:	df 93       	push	r29
    6f1a:	cf 93       	push	r28
    6f1c:	00 d0       	rcall	.+0      	; 0x6f1e <_ZN6String6concatEh+0xe>
    6f1e:	00 d0       	rcall	.+0      	; 0x6f20 <_ZN6String6concatEh+0x10>
    6f20:	cd b7       	in	r28, 0x3d	; 61
    6f22:	de b7       	in	r29, 0x3e	; 62
    6f24:	7c 01       	movw	r14, r24
    6f26:	86 2f       	mov	r24, r22
{
	char buf[4];
	itoa(num, buf, 10);
    6f28:	90 e0       	ldi	r25, 0x00	; 0
    6f2a:	8e 01       	movw	r16, r28
    6f2c:	0f 5f       	subi	r16, 0xFF	; 255
    6f2e:	1f 4f       	sbci	r17, 0xFF	; 255
    6f30:	b8 01       	movw	r22, r16
    6f32:	4a e0       	ldi	r20, 0x0A	; 10
    6f34:	50 e0       	ldi	r21, 0x00	; 0
    6f36:	0e 94 34 05 	call	0xa68	; 0xa68 <itoa>
	return concat(buf, strlen(buf));
    6f3a:	f8 01       	movw	r30, r16
    6f3c:	01 90       	ld	r0, Z+
    6f3e:	00 20       	and	r0, r0
    6f40:	e9 f7       	brne	.-6      	; 0x6f3c <_ZN6String6concatEh+0x2c>
    6f42:	31 97       	sbiw	r30, 0x01	; 1
    6f44:	e0 1b       	sub	r30, r16
    6f46:	f1 0b       	sbc	r31, r17
    6f48:	c7 01       	movw	r24, r14
    6f4a:	b8 01       	movw	r22, r16
    6f4c:	af 01       	movw	r20, r30
    6f4e:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <_ZN6String6concatEPKcj>
}
    6f52:	0f 90       	pop	r0
    6f54:	0f 90       	pop	r0
    6f56:	0f 90       	pop	r0
    6f58:	0f 90       	pop	r0
    6f5a:	cf 91       	pop	r28
    6f5c:	df 91       	pop	r29
    6f5e:	1f 91       	pop	r17
    6f60:	0f 91       	pop	r16
    6f62:	ff 90       	pop	r15
    6f64:	ef 90       	pop	r14
    6f66:	08 95       	ret

00006f68 <_ZN6String6concatEc>:
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}

unsigned char String::concat(char c)
    6f68:	df 93       	push	r29
    6f6a:	cf 93       	push	r28
    6f6c:	00 d0       	rcall	.+0      	; 0x6f6e <_ZN6String6concatEc+0x6>
    6f6e:	cd b7       	in	r28, 0x3d	; 61
    6f70:	de b7       	in	r29, 0x3e	; 62
{
	char buf[2];
	buf[0] = c;
    6f72:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    6f74:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
    6f76:	be 01       	movw	r22, r28
    6f78:	6f 5f       	subi	r22, 0xFF	; 255
    6f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    6f7c:	41 e0       	ldi	r20, 0x01	; 1
    6f7e:	50 e0       	ldi	r21, 0x00	; 0
    6f80:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <_ZN6String6concatEPKcj>
}
    6f84:	0f 90       	pop	r0
    6f86:	0f 90       	pop	r0
    6f88:	cf 91       	pop	r28
    6f8a:	df 91       	pop	r29
    6f8c:	08 95       	ret

00006f8e <_ZN6String6concatERKS_>:

/*********************************************/
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
    6f8e:	fb 01       	movw	r30, r22
{
	return concat(s.buffer, s.len);
    6f90:	60 81       	ld	r22, Z
    6f92:	71 81       	ldd	r23, Z+1	; 0x01
    6f94:	44 81       	ldd	r20, Z+4	; 0x04
    6f96:	55 81       	ldd	r21, Z+5	; 0x05
    6f98:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <_ZN6String6concatEPKcj>
}
    6f9c:	08 95       	ret

00006f9e <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
	flags = 0;
}

void String::invalidate(void)
    6f9e:	cf 93       	push	r28
    6fa0:	df 93       	push	r29
    6fa2:	ec 01       	movw	r28, r24
{
	if (buffer) free(buffer);
    6fa4:	88 81       	ld	r24, Y
    6fa6:	99 81       	ldd	r25, Y+1	; 0x01
    6fa8:	00 97       	sbiw	r24, 0x00	; 0
    6faa:	11 f0       	breq	.+4      	; 0x6fb0 <_ZN6String10invalidateEv+0x12>
    6fac:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <free>
	buffer = NULL;
    6fb0:	19 82       	std	Y+1, r1	; 0x01
    6fb2:	18 82       	st	Y, r1
	capacity = len = 0;
    6fb4:	1d 82       	std	Y+5, r1	; 0x05
    6fb6:	1c 82       	std	Y+4, r1	; 0x04
    6fb8:	1b 82       	std	Y+3, r1	; 0x03
    6fba:	1a 82       	std	Y+2, r1	; 0x02
}
    6fbc:	df 91       	pop	r29
    6fbe:	cf 91       	pop	r28
    6fc0:	08 95       	ret

00006fc2 <_ZplRK15StringSumHelperRK6String>:

/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
    6fc2:	0f 93       	push	r16
    6fc4:	1f 93       	push	r17
    6fc6:	18 2f       	mov	r17, r24
    6fc8:	09 2f       	mov	r16, r25
    6fca:	fb 01       	movw	r30, r22
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    6fcc:	60 81       	ld	r22, Z
    6fce:	71 81       	ldd	r23, Z+1	; 0x01
    6fd0:	44 81       	ldd	r20, Z+4	; 0x04
    6fd2:	55 81       	ldd	r21, Z+5	; 0x05
    6fd4:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <_ZN6String6concatEPKcj>
    6fd8:	88 23       	and	r24, r24
    6fda:	21 f4       	brne	.+8      	; 0x6fe4 <_ZplRK15StringSumHelperRK6String+0x22>
    6fdc:	81 2f       	mov	r24, r17
    6fde:	90 2f       	mov	r25, r16
    6fe0:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <_ZN6String10invalidateEv>
	return a;
}
    6fe4:	81 2f       	mov	r24, r17
    6fe6:	90 2f       	mov	r25, r16
    6fe8:	1f 91       	pop	r17
    6fea:	0f 91       	pop	r16
    6fec:	08 95       	ret

00006fee <_ZN6String4copyEPKcj>:

/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
    6fee:	ef 92       	push	r14
    6ff0:	ff 92       	push	r15
    6ff2:	0f 93       	push	r16
    6ff4:	1f 93       	push	r17
    6ff6:	cf 93       	push	r28
    6ff8:	df 93       	push	r29
    6ffa:	ec 01       	movw	r28, r24
    6ffc:	7b 01       	movw	r14, r22
    6ffe:	8a 01       	movw	r16, r20
{
	if (!reserve(length)) {
    7000:	ba 01       	movw	r22, r20
    7002:	0e 94 e0 36 	call	0x6dc0	; 0x6dc0 <_ZN6String7reserveEj>
    7006:	88 23       	and	r24, r24
    7008:	21 f4       	brne	.+8      	; 0x7012 <_ZN6String4copyEPKcj+0x24>
		invalidate();
    700a:	ce 01       	movw	r24, r28
    700c:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <_ZN6String10invalidateEv>
    7010:	07 c0       	rjmp	.+14     	; 0x7020 <_ZN6String4copyEPKcj+0x32>
		return *this;
	}
	len = length;
    7012:	1d 83       	std	Y+5, r17	; 0x05
    7014:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    7016:	88 81       	ld	r24, Y
    7018:	99 81       	ldd	r25, Y+1	; 0x01
    701a:	b7 01       	movw	r22, r14
    701c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <strcpy>
	return *this;
}
    7020:	ce 01       	movw	r24, r28
    7022:	df 91       	pop	r29
    7024:	cf 91       	pop	r28
    7026:	1f 91       	pop	r17
    7028:	0f 91       	pop	r16
    702a:	ff 90       	pop	r15
    702c:	ef 90       	pop	r14
    702e:	08 95       	ret

00007030 <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    7030:	cf 93       	push	r28
    7032:	df 93       	push	r29
    7034:	ec 01       	movw	r28, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    7036:	19 82       	std	Y+1, r1	; 0x01
    7038:	18 82       	st	Y, r1
	capacity = 0;
    703a:	1b 82       	std	Y+3, r1	; 0x03
    703c:	1a 82       	std	Y+2, r1	; 0x02
	len = 0;
    703e:	1d 82       	std	Y+5, r1	; 0x05
    7040:	1c 82       	std	Y+4, r1	; 0x04
	flags = 0;
    7042:	1e 82       	std	Y+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    7044:	61 15       	cp	r22, r1
    7046:	71 05       	cpc	r23, r1
    7048:	51 f0       	breq	.+20     	; 0x705e <_ZN6StringC1EPKc+0x2e>
    704a:	db 01       	movw	r26, r22
    704c:	0d 90       	ld	r0, X+
    704e:	00 20       	and	r0, r0
    7050:	e9 f7       	brne	.-6      	; 0x704c <_ZN6StringC1EPKc+0x1c>
    7052:	11 97       	sbiw	r26, 0x01	; 1
    7054:	a6 1b       	sub	r26, r22
    7056:	b7 0b       	sbc	r27, r23
    7058:	ad 01       	movw	r20, r26
    705a:	0e 94 f7 37 	call	0x6fee	; 0x6fee <_ZN6String4copyEPKcj>
}
    705e:	df 91       	pop	r29
    7060:	cf 91       	pop	r28
    7062:	08 95       	ret

00007064 <_ZN6StringaSEPKc>:
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    7064:	0f 93       	push	r16
    7066:	1f 93       	push	r17
    7068:	18 2f       	mov	r17, r24
    706a:	09 2f       	mov	r16, r25
{
	if (cstr) copy(cstr, strlen(cstr));
    706c:	61 15       	cp	r22, r1
    706e:	71 05       	cpc	r23, r1
    7070:	59 f0       	breq	.+22     	; 0x7088 <_ZN6StringaSEPKc+0x24>
    7072:	db 01       	movw	r26, r22
    7074:	0d 90       	ld	r0, X+
    7076:	00 20       	and	r0, r0
    7078:	e9 f7       	brne	.-6      	; 0x7074 <_ZN6StringaSEPKc+0x10>
    707a:	11 97       	sbiw	r26, 0x01	; 1
    707c:	a6 1b       	sub	r26, r22
    707e:	b7 0b       	sbc	r27, r23
    7080:	ad 01       	movw	r20, r26
    7082:	0e 94 f7 37 	call	0x6fee	; 0x6fee <_ZN6String4copyEPKcj>
    7086:	02 c0       	rjmp	.+4      	; 0x708c <_ZN6StringaSEPKc+0x28>
	else invalidate();
    7088:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <_ZN6String10invalidateEv>
	
	return *this;
}
    708c:	81 2f       	mov	r24, r17
    708e:	90 2f       	mov	r25, r16
    7090:	1f 91       	pop	r17
    7092:	0f 91       	pop	r16
    7094:	08 95       	ret

00007096 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    7096:	ef 92       	push	r14
    7098:	ff 92       	push	r15
    709a:	0f 93       	push	r16
    709c:	1f 93       	push	r17
    709e:	df 93       	push	r29
    70a0:	cf 93       	push	r28
    70a2:	cd b7       	in	r28, 0x3d	; 61
    70a4:	de b7       	in	r29, 0x3e	; 62
    70a6:	29 97       	sbiw	r28, 0x09	; 9
    70a8:	0f b6       	in	r0, 0x3f	; 63
    70aa:	f8 94       	cli
    70ac:	de bf       	out	0x3e, r29	; 62
    70ae:	0f be       	out	0x3f, r0	; 63
    70b0:	cd bf       	out	0x3d, r28	; 61
    70b2:	8c 01       	movw	r16, r24
    70b4:	86 2f       	mov	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    70b6:	f8 01       	movw	r30, r16
    70b8:	11 82       	std	Z+1, r1	; 0x01
    70ba:	10 82       	st	Z, r1
	capacity = 0;
    70bc:	13 82       	std	Z+3, r1	; 0x03
    70be:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    70c0:	15 82       	std	Z+5, r1	; 0x05
    70c2:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    70c4:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned char value, unsigned char base)
{
	init();
	char buf[9];
	utoa(value, buf, base);
    70c6:	90 e0       	ldi	r25, 0x00	; 0
    70c8:	7e 01       	movw	r14, r28
    70ca:	08 94       	sec
    70cc:	e1 1c       	adc	r14, r1
    70ce:	f1 1c       	adc	r15, r1
    70d0:	b7 01       	movw	r22, r14
    70d2:	50 e0       	ldi	r21, 0x00	; 0
    70d4:	0e 94 55 05 	call	0xaaa	; 0xaaa <utoa>
	*this = buf;
    70d8:	c8 01       	movw	r24, r16
    70da:	b7 01       	movw	r22, r14
    70dc:	0e 94 32 38 	call	0x7064	; 0x7064 <_ZN6StringaSEPKc>
}
    70e0:	29 96       	adiw	r28, 0x09	; 9
    70e2:	0f b6       	in	r0, 0x3f	; 63
    70e4:	f8 94       	cli
    70e6:	de bf       	out	0x3e, r29	; 62
    70e8:	0f be       	out	0x3f, r0	; 63
    70ea:	cd bf       	out	0x3d, r28	; 61
    70ec:	cf 91       	pop	r28
    70ee:	df 91       	pop	r29
    70f0:	1f 91       	pop	r17
    70f2:	0f 91       	pop	r16
    70f4:	ff 90       	pop	r15
    70f6:	ef 90       	pop	r14
    70f8:	08 95       	ret

000070fa <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
    70fa:	df 93       	push	r29
    70fc:	cf 93       	push	r28
    70fe:	00 d0       	rcall	.+0      	; 0x7100 <_ZN6StringC1Ec+0x6>
    7100:	cd b7       	in	r28, 0x3d	; 61
    7102:	de b7       	in	r29, 0x3e	; 62
    7104:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    7106:	11 82       	std	Z+1, r1	; 0x01
    7108:	10 82       	st	Z, r1
	capacity = 0;
    710a:	13 82       	std	Z+3, r1	; 0x03
    710c:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    710e:	15 82       	std	Z+5, r1	; 0x05
    7110:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    7112:	16 82       	std	Z+6, r1	; 0x06

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
    7114:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    7116:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
    7118:	be 01       	movw	r22, r28
    711a:	6f 5f       	subi	r22, 0xFF	; 255
    711c:	7f 4f       	sbci	r23, 0xFF	; 255
    711e:	0e 94 32 38 	call	0x7064	; 0x7064 <_ZN6StringaSEPKc>
}
    7122:	0f 90       	pop	r0
    7124:	0f 90       	pop	r0
    7126:	cf 91       	pop	r28
    7128:	df 91       	pop	r29
    712a:	08 95       	ret

0000712c <_ZNK6String9substringEjj>:
String String::substring( unsigned int left ) const
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
    712c:	bf 92       	push	r11
    712e:	cf 92       	push	r12
    7130:	df 92       	push	r13
    7132:	ef 92       	push	r14
    7134:	ff 92       	push	r15
    7136:	0f 93       	push	r16
    7138:	1f 93       	push	r17
    713a:	cf 93       	push	r28
    713c:	df 93       	push	r29
    713e:	08 2f       	mov	r16, r24
    7140:	b9 2e       	mov	r11, r25
    7142:	6b 01       	movw	r12, r22
    7144:	7a 01       	movw	r14, r20
    7146:	e9 01       	movw	r28, r18
{
	if (left > right) {
    7148:	24 17       	cp	r18, r20
    714a:	35 07       	cpc	r19, r21
    714c:	10 f4       	brcc	.+4      	; 0x7152 <_ZNK6String9substringEjj+0x26>
    714e:	ea 01       	movw	r28, r20
    7150:	79 01       	movw	r14, r18
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    7152:	80 2f       	mov	r24, r16
    7154:	9b 2d       	mov	r25, r11
    7156:	67 eb       	ldi	r22, 0xB7	; 183
    7158:	71 e0       	ldi	r23, 0x01	; 1
    715a:	0e 94 18 38 	call	0x7030	; 0x7030 <_ZN6StringC1EPKc>
	if (left > len) return out;
    715e:	d6 01       	movw	r26, r12
    7160:	14 96       	adiw	r26, 0x04	; 4
    7162:	8d 91       	ld	r24, X+
    7164:	9c 91       	ld	r25, X
    7166:	15 97       	sbiw	r26, 0x05	; 5
    7168:	8e 15       	cp	r24, r14
    716a:	9f 05       	cpc	r25, r15
    716c:	d0 f0       	brcs	.+52     	; 0x71a2 <_ZNK6String9substringEjj+0x76>
    716e:	8c 17       	cp	r24, r28
    7170:	9d 07       	cpc	r25, r29
    7172:	08 f4       	brcc	.+2      	; 0x7176 <_ZNK6String9substringEjj+0x4a>
    7174:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    7176:	d6 01       	movw	r26, r12
    7178:	ed 91       	ld	r30, X+
    717a:	fc 91       	ld	r31, X
    717c:	11 97       	sbiw	r26, 0x01	; 1
    717e:	ec 0f       	add	r30, r28
    7180:	fd 1f       	adc	r31, r29
    7182:	10 81       	ld	r17, Z
	buffer[right] = '\0';	
    7184:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    7186:	6d 91       	ld	r22, X+
    7188:	7c 91       	ld	r23, X
    718a:	6e 0d       	add	r22, r14
    718c:	7f 1d       	adc	r23, r15
    718e:	80 2f       	mov	r24, r16
    7190:	9b 2d       	mov	r25, r11
    7192:	0e 94 32 38 	call	0x7064	; 0x7064 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    7196:	d6 01       	movw	r26, r12
    7198:	ed 91       	ld	r30, X+
    719a:	fc 91       	ld	r31, X
    719c:	ec 0f       	add	r30, r28
    719e:	fd 1f       	adc	r31, r29
    71a0:	10 83       	st	Z, r17
	return out;
}
    71a2:	80 2f       	mov	r24, r16
    71a4:	9b 2d       	mov	r25, r11
    71a6:	df 91       	pop	r29
    71a8:	cf 91       	pop	r28
    71aa:	1f 91       	pop	r17
    71ac:	0f 91       	pop	r16
    71ae:	ff 90       	pop	r15
    71b0:	ef 90       	pop	r14
    71b2:	df 90       	pop	r13
    71b4:	cf 90       	pop	r12
    71b6:	bf 90       	pop	r11
    71b8:	08 95       	ret

000071ba <_ZNK6String9substringEj>:
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}

String String::substring( unsigned int left ) const
    71ba:	0f 93       	push	r16
    71bc:	1f 93       	push	r17
    71be:	8c 01       	movw	r16, r24
    71c0:	fb 01       	movw	r30, r22
{
	return substring(left, len);
    71c2:	24 81       	ldd	r18, Z+4	; 0x04
    71c4:	35 81       	ldd	r19, Z+5	; 0x05
    71c6:	0e 94 96 38 	call	0x712c	; 0x712c <_ZNK6String9substringEjj>
}
    71ca:	c8 01       	movw	r24, r16
    71cc:	1f 91       	pop	r17
    71ce:	0f 91       	pop	r16
    71d0:	08 95       	ret

000071d2 <_ZN6StringaSERKS_>:
	rhs.capacity = 0;
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
    71d2:	cf 93       	push	r28
    71d4:	df 93       	push	r29
    71d6:	ec 01       	movw	r28, r24
    71d8:	fb 01       	movw	r30, r22
{
	if (this == &rhs) return *this;
    71da:	86 17       	cp	r24, r22
    71dc:	97 07       	cpc	r25, r23
    71de:	61 f0       	breq	.+24     	; 0x71f8 <_ZN6StringaSERKS_+0x26>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    71e0:	60 81       	ld	r22, Z
    71e2:	71 81       	ldd	r23, Z+1	; 0x01
    71e4:	61 15       	cp	r22, r1
    71e6:	71 05       	cpc	r23, r1
    71e8:	29 f0       	breq	.+10     	; 0x71f4 <_ZN6StringaSERKS_+0x22>
    71ea:	44 81       	ldd	r20, Z+4	; 0x04
    71ec:	55 81       	ldd	r21, Z+5	; 0x05
    71ee:	0e 94 f7 37 	call	0x6fee	; 0x6fee <_ZN6String4copyEPKcj>
    71f2:	02 c0       	rjmp	.+4      	; 0x71f8 <_ZN6StringaSERKS_+0x26>
	else invalidate();
    71f4:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <_ZN6String10invalidateEv>
	
	return *this;
}
    71f8:	ce 01       	movw	r24, r28
    71fa:	df 91       	pop	r29
    71fc:	cf 91       	pop	r28
    71fe:	08 95       	ret

00007200 <_ZN6StringC2ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    7200:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    7202:	11 82       	std	Z+1, r1	; 0x01
    7204:	10 82       	st	Z, r1
	capacity = 0;
    7206:	13 82       	std	Z+3, r1	; 0x03
    7208:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    720a:	15 82       	std	Z+5, r1	; 0x05
    720c:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    720e:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
    7210:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <_ZN6StringaSERKS_>
}
    7214:	08 95       	ret

00007216 <_ZN6StringD1Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    7216:	fc 01       	movw	r30, r24
{
	free(buffer);
    7218:	80 81       	ld	r24, Z
    721a:	91 81       	ldd	r25, Z+1	; 0x01
    721c:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <free>
}
    7220:	08 95       	ret

00007222 <_ZN6StringD2Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    7222:	fc 01       	movw	r30, r24
{
	free(buffer);
    7224:	80 81       	ld	r24, Z
    7226:	91 81       	ldd	r25, Z+1	; 0x01
    7228:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <free>
}
    722c:	08 95       	ret

0000722e <realloc>:
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
    722e:	6f 92       	push	r6
    7230:	7f 92       	push	r7
    7232:	8f 92       	push	r8
    7234:	9f 92       	push	r9
    7236:	af 92       	push	r10
    7238:	bf 92       	push	r11
    723a:	cf 92       	push	r12
    723c:	df 92       	push	r13
    723e:	ef 92       	push	r14
    7240:	ff 92       	push	r15
    7242:	0f 93       	push	r16
    7244:	1f 93       	push	r17
    7246:	cf 93       	push	r28
    7248:	df 93       	push	r29
    724a:	8c 01       	movw	r16, r24
    724c:	00 97       	sbiw	r24, 0x00	; 0
    724e:	29 f4       	brne	.+10     	; 0x725a <realloc+0x2c>
		return malloc(len);
    7250:	cb 01       	movw	r24, r22
    7252:	0e 94 e4 2d 	call	0x5bc8	; 0x5bc8 <malloc>
    7256:	8c 01       	movw	r16, r24
    7258:	bb c0       	rjmp	.+374    	; 0x73d0 <realloc+0x1a2>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
    725a:	8e ef       	ldi	r24, 0xFE	; 254
    725c:	e8 2e       	mov	r14, r24
    725e:	8f ef       	ldi	r24, 0xFF	; 255
    7260:	f8 2e       	mov	r15, r24
    7262:	e0 0e       	add	r14, r16
    7264:	f1 1e       	adc	r15, r17
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
    7266:	48 01       	movw	r8, r16
    7268:	86 0e       	add	r8, r22
    726a:	97 1e       	adc	r9, r23
	if (cp < cp1)
    726c:	8e 14       	cp	r8, r14
    726e:	9f 04       	cpc	r9, r15
    7270:	08 f4       	brcc	.+2      	; 0x7274 <realloc+0x46>
    7272:	ac c0       	rjmp	.+344    	; 0x73cc <realloc+0x19e>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
    7274:	d7 01       	movw	r26, r14
    7276:	4d 91       	ld	r20, X+
    7278:	5c 91       	ld	r21, X
    727a:	11 97       	sbiw	r26, 0x01	; 1
    727c:	46 17       	cp	r20, r22
    727e:	57 07       	cpc	r21, r23
    7280:	b8 f0       	brcs	.+46     	; 0x72b0 <realloc+0x82>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    7282:	45 30       	cpi	r20, 0x05	; 5
    7284:	51 05       	cpc	r21, r1
    7286:	08 f4       	brcc	.+2      	; 0x728a <realloc+0x5c>
    7288:	a3 c0       	rjmp	.+326    	; 0x73d0 <realloc+0x1a2>
    728a:	ca 01       	movw	r24, r20
    728c:	04 97       	sbiw	r24, 0x04	; 4
    728e:	86 17       	cp	r24, r22
    7290:	97 07       	cpc	r25, r23
    7292:	08 f4       	brcc	.+2      	; 0x7296 <realloc+0x68>
    7294:	9d c0       	rjmp	.+314    	; 0x73d0 <realloc+0x1a2>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
    7296:	42 50       	subi	r20, 0x02	; 2
    7298:	50 40       	sbci	r21, 0x00	; 0
    729a:	46 1b       	sub	r20, r22
    729c:	57 0b       	sbc	r21, r23
    729e:	f4 01       	movw	r30, r8
    72a0:	41 93       	st	Z+, r20
    72a2:	51 93       	st	Z+, r21
		fp1->sz = len;
    72a4:	6d 93       	st	X+, r22
    72a6:	7c 93       	st	X, r23
		free(&(fp2->nx));
    72a8:	cf 01       	movw	r24, r30
    72aa:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <free>
    72ae:	90 c0       	rjmp	.+288    	; 0x73d0 <realloc+0x1a2>

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
    72b0:	5b 01       	movw	r10, r22
    72b2:	a4 1a       	sub	r10, r20
    72b4:	b5 0a       	sbc	r11, r21
	cp = (char *)ptr + fp1->sz;
    72b6:	38 01       	movw	r6, r16
    72b8:	64 0e       	add	r6, r20
    72ba:	75 1e       	adc	r7, r21
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
    72bc:	a0 91 e4 04 	lds	r26, 0x04E4
    72c0:	b0 91 e5 04 	lds	r27, 0x04E5
    72c4:	cc 24       	eor	r12, r12
    72c6:	dd 24       	eor	r13, r13
    72c8:	e0 e0       	ldi	r30, 0x00	; 0
    72ca:	f0 e0       	ldi	r31, 0x00	; 0
    72cc:	47 c0       	rjmp	.+142    	; 0x735c <realloc+0x12e>
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
    72ce:	a6 15       	cp	r26, r6
    72d0:	b7 05       	cpc	r27, r7
    72d2:	a9 f5       	brne	.+106    	; 0x733e <realloc+0x110>
    72d4:	cd 91       	ld	r28, X+
    72d6:	dc 91       	ld	r29, X
    72d8:	11 97       	sbiw	r26, 0x01	; 1
    72da:	ce 01       	movw	r24, r28
    72dc:	02 96       	adiw	r24, 0x02	; 2
    72de:	8a 15       	cp	r24, r10
    72e0:	9b 05       	cpc	r25, r11
    72e2:	68 f1       	brcs	.+90     	; 0x733e <realloc+0x110>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
    72e4:	ce 01       	movw	r24, r28
    72e6:	8a 19       	sub	r24, r10
    72e8:	9b 09       	sbc	r25, r11
    72ea:	02 96       	adiw	r24, 0x02	; 2
    72ec:	12 96       	adiw	r26, 0x02	; 2
    72ee:	2c 91       	ld	r18, X
    72f0:	12 97       	sbiw	r26, 0x02	; 2
    72f2:	13 96       	adiw	r26, 0x03	; 3
    72f4:	3c 91       	ld	r19, X
    72f6:	05 97       	sbiw	r24, 0x05	; 5
    72f8:	58 f0       	brcs	.+22     	; 0x7310 <realloc+0xe2>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
    72fa:	f4 01       	movw	r30, r8
				fp2->nx = fp3->nx;
    72fc:	22 83       	std	Z+2, r18	; 0x02
    72fe:	33 83       	std	Z+3, r19	; 0x03
				fp2->sz = fp3->sz - incr;
    7300:	ca 19       	sub	r28, r10
    7302:	db 09       	sbc	r29, r11
    7304:	d1 83       	std	Z+1, r29	; 0x01
    7306:	c0 83       	st	Z, r28
				fp1->sz = len;
    7308:	d7 01       	movw	r26, r14
    730a:	6d 93       	st	X+, r22
    730c:	7c 93       	st	X, r23
    730e:	09 c0       	rjmp	.+18     	; 0x7322 <realloc+0xf4>
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
    7310:	4e 5f       	subi	r20, 0xFE	; 254
    7312:	5f 4f       	sbci	r21, 0xFF	; 255
    7314:	4c 0f       	add	r20, r28
    7316:	5d 1f       	adc	r21, r29
    7318:	f7 01       	movw	r30, r14
    731a:	51 83       	std	Z+1, r21	; 0x01
    731c:	40 83       	st	Z, r20
				fp2 = fp3->nx;
    731e:	c9 01       	movw	r24, r18
    7320:	fc 01       	movw	r30, r24
			}
			if (ofp3)
    7322:	c1 14       	cp	r12, r1
    7324:	d1 04       	cpc	r13, r1
    7326:	31 f0       	breq	.+12     	; 0x7334 <realloc+0x106>
				ofp3->nx = fp2;
    7328:	d6 01       	movw	r26, r12
    732a:	13 96       	adiw	r26, 0x03	; 3
    732c:	fc 93       	st	X, r31
    732e:	ee 93       	st	-X, r30
    7330:	12 97       	sbiw	r26, 0x02	; 2
    7332:	4e c0       	rjmp	.+156    	; 0x73d0 <realloc+0x1a2>
			else
				__flp = fp2;
    7334:	f0 93 e5 04 	sts	0x04E5, r31
    7338:	e0 93 e4 04 	sts	0x04E4, r30
    733c:	49 c0       	rjmp	.+146    	; 0x73d0 <realloc+0x1a2>
    733e:	8d 91       	ld	r24, X+
    7340:	9c 91       	ld	r25, X
    7342:	11 97       	sbiw	r26, 0x01	; 1
    7344:	e8 17       	cp	r30, r24
    7346:	f9 07       	cpc	r31, r25
    7348:	08 f4       	brcc	.+2      	; 0x734c <realloc+0x11e>
    734a:	fc 01       	movw	r30, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
    734c:	6d 01       	movw	r12, r26
    734e:	12 96       	adiw	r26, 0x02	; 2
    7350:	8c 91       	ld	r24, X
    7352:	12 97       	sbiw	r26, 0x02	; 2
    7354:	13 96       	adiw	r26, 0x03	; 3
    7356:	9c 91       	ld	r25, X
    7358:	9c 01       	movw	r18, r24
    735a:	d9 01       	movw	r26, r18
	 */
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
    735c:	10 97       	sbiw	r26, 0x00	; 0
    735e:	09 f0       	breq	.+2      	; 0x7362 <realloc+0x134>
    7360:	b6 cf       	rjmp	.-148    	; 0x72ce <realloc+0xa0>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
    7362:	80 91 e2 04 	lds	r24, 0x04E2
    7366:	90 91 e3 04 	lds	r25, 0x04E3
    736a:	86 15       	cp	r24, r6
    736c:	97 05       	cpc	r25, r7
    736e:	e9 f4       	brne	.+58     	; 0x73aa <realloc+0x17c>
    7370:	e6 17       	cp	r30, r22
    7372:	f7 07       	cpc	r31, r23
    7374:	d0 f4       	brcc	.+52     	; 0x73aa <realloc+0x17c>
		cp1 = __malloc_heap_end;
    7376:	20 91 c2 01 	lds	r18, 0x01C2
    737a:	30 91 c3 01 	lds	r19, 0x01C3
		cp = (char *)ptr + len;
		if (cp1 == 0)
    737e:	21 15       	cp	r18, r1
    7380:	31 05       	cpc	r19, r1
    7382:	41 f4       	brne	.+16     	; 0x7394 <realloc+0x166>
			cp1 = STACK_POINTER() - __malloc_margin;
    7384:	2d b7       	in	r18, 0x3d	; 61
    7386:	3e b7       	in	r19, 0x3e	; 62
    7388:	80 91 be 01 	lds	r24, 0x01BE
    738c:	90 91 bf 01 	lds	r25, 0x01BF
    7390:	28 1b       	sub	r18, r24
    7392:	39 0b       	sbc	r19, r25
		if (cp < cp1) {
    7394:	82 16       	cp	r8, r18
    7396:	93 06       	cpc	r9, r19
    7398:	c8 f4       	brcc	.+50     	; 0x73cc <realloc+0x19e>
			__brkval = cp;
    739a:	90 92 e3 04 	sts	0x04E3, r9
    739e:	80 92 e2 04 	sts	0x04E2, r8
			fp1->sz = len;
    73a2:	f7 01       	movw	r30, r14
    73a4:	71 83       	std	Z+1, r23	; 0x01
    73a6:	60 83       	st	Z, r22
    73a8:	13 c0       	rjmp	.+38     	; 0x73d0 <realloc+0x1a2>

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
    73aa:	cb 01       	movw	r24, r22
    73ac:	0e 94 e4 2d 	call	0x5bc8	; 0x5bc8 <malloc>
    73b0:	ec 01       	movw	r28, r24
    73b2:	00 97       	sbiw	r24, 0x00	; 0
    73b4:	59 f0       	breq	.+22     	; 0x73cc <realloc+0x19e>
		return 0;
	memcpy(memp, ptr, fp1->sz);
    73b6:	d7 01       	movw	r26, r14
    73b8:	4d 91       	ld	r20, X+
    73ba:	5c 91       	ld	r21, X
    73bc:	b8 01       	movw	r22, r16
    73be:	0e 94 02 05 	call	0xa04	; 0xa04 <memcpy>
	free(ptr);
    73c2:	c8 01       	movw	r24, r16
    73c4:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <free>
    73c8:	8e 01       	movw	r16, r28
    73ca:	02 c0       	rjmp	.+4      	; 0x73d0 <realloc+0x1a2>
	return memp;
    73cc:	00 e0       	ldi	r16, 0x00	; 0
    73ce:	10 e0       	ldi	r17, 0x00	; 0
}
    73d0:	c8 01       	movw	r24, r16
    73d2:	df 91       	pop	r29
    73d4:	cf 91       	pop	r28
    73d6:	1f 91       	pop	r17
    73d8:	0f 91       	pop	r16
    73da:	ff 90       	pop	r15
    73dc:	ef 90       	pop	r14
    73de:	df 90       	pop	r13
    73e0:	cf 90       	pop	r12
    73e2:	bf 90       	pop	r11
    73e4:	af 90       	pop	r10
    73e6:	9f 90       	pop	r9
    73e8:	8f 90       	pop	r8
    73ea:	7f 90       	pop	r7
    73ec:	6f 90       	pop	r6
    73ee:	08 95       	ret

000073f0 <__subsf3>:
    73f0:	50 58       	subi	r21, 0x80	; 128

000073f2 <__addsf3>:
    73f2:	bb 27       	eor	r27, r27
    73f4:	aa 27       	eor	r26, r26
    73f6:	0e d0       	rcall	.+28     	; 0x7414 <__addsf3x>
    73f8:	75 c1       	rjmp	.+746    	; 0x76e4 <__fp_round>
    73fa:	66 d1       	rcall	.+716    	; 0x76c8 <__fp_pscA>
    73fc:	30 f0       	brcs	.+12     	; 0x740a <__addsf3+0x18>
    73fe:	6b d1       	rcall	.+726    	; 0x76d6 <__fp_pscB>
    7400:	20 f0       	brcs	.+8      	; 0x740a <__addsf3+0x18>
    7402:	31 f4       	brne	.+12     	; 0x7410 <__addsf3+0x1e>
    7404:	9f 3f       	cpi	r25, 0xFF	; 255
    7406:	11 f4       	brne	.+4      	; 0x740c <__addsf3+0x1a>
    7408:	1e f4       	brtc	.+6      	; 0x7410 <__addsf3+0x1e>
    740a:	5b c1       	rjmp	.+694    	; 0x76c2 <__fp_nan>
    740c:	0e f4       	brtc	.+2      	; 0x7410 <__addsf3+0x1e>
    740e:	e0 95       	com	r30
    7410:	e7 fb       	bst	r30, 7
    7412:	51 c1       	rjmp	.+674    	; 0x76b6 <__fp_inf>

00007414 <__addsf3x>:
    7414:	e9 2f       	mov	r30, r25
    7416:	77 d1       	rcall	.+750    	; 0x7706 <__fp_split3>
    7418:	80 f3       	brcs	.-32     	; 0x73fa <__addsf3+0x8>
    741a:	ba 17       	cp	r27, r26
    741c:	62 07       	cpc	r22, r18
    741e:	73 07       	cpc	r23, r19
    7420:	84 07       	cpc	r24, r20
    7422:	95 07       	cpc	r25, r21
    7424:	18 f0       	brcs	.+6      	; 0x742c <__addsf3x+0x18>
    7426:	71 f4       	brne	.+28     	; 0x7444 <__addsf3x+0x30>
    7428:	9e f5       	brtc	.+102    	; 0x7490 <__addsf3x+0x7c>
    742a:	8f c1       	rjmp	.+798    	; 0x774a <__fp_zero>
    742c:	0e f4       	brtc	.+2      	; 0x7430 <__addsf3x+0x1c>
    742e:	e0 95       	com	r30
    7430:	0b 2e       	mov	r0, r27
    7432:	ba 2f       	mov	r27, r26
    7434:	a0 2d       	mov	r26, r0
    7436:	0b 01       	movw	r0, r22
    7438:	b9 01       	movw	r22, r18
    743a:	90 01       	movw	r18, r0
    743c:	0c 01       	movw	r0, r24
    743e:	ca 01       	movw	r24, r20
    7440:	a0 01       	movw	r20, r0
    7442:	11 24       	eor	r1, r1
    7444:	ff 27       	eor	r31, r31
    7446:	59 1b       	sub	r21, r25
    7448:	99 f0       	breq	.+38     	; 0x7470 <__addsf3x+0x5c>
    744a:	59 3f       	cpi	r21, 0xF9	; 249
    744c:	50 f4       	brcc	.+20     	; 0x7462 <__addsf3x+0x4e>
    744e:	50 3e       	cpi	r21, 0xE0	; 224
    7450:	68 f1       	brcs	.+90     	; 0x74ac <__addsf3x+0x98>
    7452:	1a 16       	cp	r1, r26
    7454:	f0 40       	sbci	r31, 0x00	; 0
    7456:	a2 2f       	mov	r26, r18
    7458:	23 2f       	mov	r18, r19
    745a:	34 2f       	mov	r19, r20
    745c:	44 27       	eor	r20, r20
    745e:	58 5f       	subi	r21, 0xF8	; 248
    7460:	f3 cf       	rjmp	.-26     	; 0x7448 <__addsf3x+0x34>
    7462:	46 95       	lsr	r20
    7464:	37 95       	ror	r19
    7466:	27 95       	ror	r18
    7468:	a7 95       	ror	r26
    746a:	f0 40       	sbci	r31, 0x00	; 0
    746c:	53 95       	inc	r21
    746e:	c9 f7       	brne	.-14     	; 0x7462 <__addsf3x+0x4e>
    7470:	7e f4       	brtc	.+30     	; 0x7490 <__addsf3x+0x7c>
    7472:	1f 16       	cp	r1, r31
    7474:	ba 0b       	sbc	r27, r26
    7476:	62 0b       	sbc	r22, r18
    7478:	73 0b       	sbc	r23, r19
    747a:	84 0b       	sbc	r24, r20
    747c:	ba f0       	brmi	.+46     	; 0x74ac <__addsf3x+0x98>
    747e:	91 50       	subi	r25, 0x01	; 1
    7480:	a1 f0       	breq	.+40     	; 0x74aa <__addsf3x+0x96>
    7482:	ff 0f       	add	r31, r31
    7484:	bb 1f       	adc	r27, r27
    7486:	66 1f       	adc	r22, r22
    7488:	77 1f       	adc	r23, r23
    748a:	88 1f       	adc	r24, r24
    748c:	c2 f7       	brpl	.-16     	; 0x747e <__addsf3x+0x6a>
    748e:	0e c0       	rjmp	.+28     	; 0x74ac <__addsf3x+0x98>
    7490:	ba 0f       	add	r27, r26
    7492:	62 1f       	adc	r22, r18
    7494:	73 1f       	adc	r23, r19
    7496:	84 1f       	adc	r24, r20
    7498:	48 f4       	brcc	.+18     	; 0x74ac <__addsf3x+0x98>
    749a:	87 95       	ror	r24
    749c:	77 95       	ror	r23
    749e:	67 95       	ror	r22
    74a0:	b7 95       	ror	r27
    74a2:	f7 95       	ror	r31
    74a4:	9e 3f       	cpi	r25, 0xFE	; 254
    74a6:	08 f0       	brcs	.+2      	; 0x74aa <__addsf3x+0x96>
    74a8:	b3 cf       	rjmp	.-154    	; 0x7410 <__addsf3+0x1e>
    74aa:	93 95       	inc	r25
    74ac:	88 0f       	add	r24, r24
    74ae:	08 f0       	brcs	.+2      	; 0x74b2 <__addsf3x+0x9e>
    74b0:	99 27       	eor	r25, r25
    74b2:	ee 0f       	add	r30, r30
    74b4:	97 95       	ror	r25
    74b6:	87 95       	ror	r24
    74b8:	08 95       	ret

000074ba <__cmpsf2>:
    74ba:	d9 d0       	rcall	.+434    	; 0x766e <__fp_cmp>
    74bc:	08 f4       	brcc	.+2      	; 0x74c0 <__cmpsf2+0x6>
    74be:	81 e0       	ldi	r24, 0x01	; 1
    74c0:	08 95       	ret

000074c2 <__divsf3>:
    74c2:	0c d0       	rcall	.+24     	; 0x74dc <__divsf3x>
    74c4:	0f c1       	rjmp	.+542    	; 0x76e4 <__fp_round>
    74c6:	07 d1       	rcall	.+526    	; 0x76d6 <__fp_pscB>
    74c8:	40 f0       	brcs	.+16     	; 0x74da <__divsf3+0x18>
    74ca:	fe d0       	rcall	.+508    	; 0x76c8 <__fp_pscA>
    74cc:	30 f0       	brcs	.+12     	; 0x74da <__divsf3+0x18>
    74ce:	21 f4       	brne	.+8      	; 0x74d8 <__divsf3+0x16>
    74d0:	5f 3f       	cpi	r21, 0xFF	; 255
    74d2:	19 f0       	breq	.+6      	; 0x74da <__divsf3+0x18>
    74d4:	f0 c0       	rjmp	.+480    	; 0x76b6 <__fp_inf>
    74d6:	51 11       	cpse	r21, r1
    74d8:	39 c1       	rjmp	.+626    	; 0x774c <__fp_szero>
    74da:	f3 c0       	rjmp	.+486    	; 0x76c2 <__fp_nan>

000074dc <__divsf3x>:
    74dc:	14 d1       	rcall	.+552    	; 0x7706 <__fp_split3>
    74de:	98 f3       	brcs	.-26     	; 0x74c6 <__divsf3+0x4>

000074e0 <__divsf3_pse>:
    74e0:	99 23       	and	r25, r25
    74e2:	c9 f3       	breq	.-14     	; 0x74d6 <__divsf3+0x14>
    74e4:	55 23       	and	r21, r21
    74e6:	b1 f3       	breq	.-20     	; 0x74d4 <__divsf3+0x12>
    74e8:	95 1b       	sub	r25, r21
    74ea:	55 0b       	sbc	r21, r21
    74ec:	bb 27       	eor	r27, r27
    74ee:	aa 27       	eor	r26, r26
    74f0:	62 17       	cp	r22, r18
    74f2:	73 07       	cpc	r23, r19
    74f4:	84 07       	cpc	r24, r20
    74f6:	38 f0       	brcs	.+14     	; 0x7506 <__divsf3_pse+0x26>
    74f8:	9f 5f       	subi	r25, 0xFF	; 255
    74fa:	5f 4f       	sbci	r21, 0xFF	; 255
    74fc:	22 0f       	add	r18, r18
    74fe:	33 1f       	adc	r19, r19
    7500:	44 1f       	adc	r20, r20
    7502:	aa 1f       	adc	r26, r26
    7504:	a9 f3       	breq	.-22     	; 0x74f0 <__divsf3_pse+0x10>
    7506:	33 d0       	rcall	.+102    	; 0x756e <__divsf3_pse+0x8e>
    7508:	0e 2e       	mov	r0, r30
    750a:	3a f0       	brmi	.+14     	; 0x751a <__divsf3_pse+0x3a>
    750c:	e0 e8       	ldi	r30, 0x80	; 128
    750e:	30 d0       	rcall	.+96     	; 0x7570 <__divsf3_pse+0x90>
    7510:	91 50       	subi	r25, 0x01	; 1
    7512:	50 40       	sbci	r21, 0x00	; 0
    7514:	e6 95       	lsr	r30
    7516:	00 1c       	adc	r0, r0
    7518:	ca f7       	brpl	.-14     	; 0x750c <__divsf3_pse+0x2c>
    751a:	29 d0       	rcall	.+82     	; 0x756e <__divsf3_pse+0x8e>
    751c:	fe 2f       	mov	r31, r30
    751e:	27 d0       	rcall	.+78     	; 0x756e <__divsf3_pse+0x8e>
    7520:	66 0f       	add	r22, r22
    7522:	77 1f       	adc	r23, r23
    7524:	88 1f       	adc	r24, r24
    7526:	bb 1f       	adc	r27, r27
    7528:	26 17       	cp	r18, r22
    752a:	37 07       	cpc	r19, r23
    752c:	48 07       	cpc	r20, r24
    752e:	ab 07       	cpc	r26, r27
    7530:	b0 e8       	ldi	r27, 0x80	; 128
    7532:	09 f0       	breq	.+2      	; 0x7536 <__divsf3_pse+0x56>
    7534:	bb 0b       	sbc	r27, r27
    7536:	80 2d       	mov	r24, r0
    7538:	bf 01       	movw	r22, r30
    753a:	ff 27       	eor	r31, r31
    753c:	93 58       	subi	r25, 0x83	; 131
    753e:	5f 4f       	sbci	r21, 0xFF	; 255
    7540:	2a f0       	brmi	.+10     	; 0x754c <__divsf3_pse+0x6c>
    7542:	9e 3f       	cpi	r25, 0xFE	; 254
    7544:	51 05       	cpc	r21, r1
    7546:	68 f0       	brcs	.+26     	; 0x7562 <__divsf3_pse+0x82>
    7548:	b6 c0       	rjmp	.+364    	; 0x76b6 <__fp_inf>
    754a:	00 c1       	rjmp	.+512    	; 0x774c <__fp_szero>
    754c:	5f 3f       	cpi	r21, 0xFF	; 255
    754e:	ec f3       	brlt	.-6      	; 0x754a <__divsf3_pse+0x6a>
    7550:	98 3e       	cpi	r25, 0xE8	; 232
    7552:	dc f3       	brlt	.-10     	; 0x754a <__divsf3_pse+0x6a>
    7554:	86 95       	lsr	r24
    7556:	77 95       	ror	r23
    7558:	67 95       	ror	r22
    755a:	b7 95       	ror	r27
    755c:	f7 95       	ror	r31
    755e:	9f 5f       	subi	r25, 0xFF	; 255
    7560:	c9 f7       	brne	.-14     	; 0x7554 <__divsf3_pse+0x74>
    7562:	88 0f       	add	r24, r24
    7564:	91 1d       	adc	r25, r1
    7566:	96 95       	lsr	r25
    7568:	87 95       	ror	r24
    756a:	97 f9       	bld	r25, 7
    756c:	08 95       	ret
    756e:	e1 e0       	ldi	r30, 0x01	; 1
    7570:	66 0f       	add	r22, r22
    7572:	77 1f       	adc	r23, r23
    7574:	88 1f       	adc	r24, r24
    7576:	bb 1f       	adc	r27, r27
    7578:	62 17       	cp	r22, r18
    757a:	73 07       	cpc	r23, r19
    757c:	84 07       	cpc	r24, r20
    757e:	ba 07       	cpc	r27, r26
    7580:	20 f0       	brcs	.+8      	; 0x758a <__divsf3_pse+0xaa>
    7582:	62 1b       	sub	r22, r18
    7584:	73 0b       	sbc	r23, r19
    7586:	84 0b       	sbc	r24, r20
    7588:	ba 0b       	sbc	r27, r26
    758a:	ee 1f       	adc	r30, r30
    758c:	88 f7       	brcc	.-30     	; 0x7570 <__divsf3_pse+0x90>
    758e:	e0 95       	com	r30
    7590:	08 95       	ret

00007592 <__fixsfsi>:
    7592:	04 d0       	rcall	.+8      	; 0x759c <__fixunssfsi>
    7594:	68 94       	set
    7596:	b1 11       	cpse	r27, r1
    7598:	d9 c0       	rjmp	.+434    	; 0x774c <__fp_szero>
    759a:	08 95       	ret

0000759c <__fixunssfsi>:
    759c:	bc d0       	rcall	.+376    	; 0x7716 <__fp_splitA>
    759e:	88 f0       	brcs	.+34     	; 0x75c2 <__fixunssfsi+0x26>
    75a0:	9f 57       	subi	r25, 0x7F	; 127
    75a2:	90 f0       	brcs	.+36     	; 0x75c8 <__fixunssfsi+0x2c>
    75a4:	b9 2f       	mov	r27, r25
    75a6:	99 27       	eor	r25, r25
    75a8:	b7 51       	subi	r27, 0x17	; 23
    75aa:	a0 f0       	brcs	.+40     	; 0x75d4 <__fixunssfsi+0x38>
    75ac:	d1 f0       	breq	.+52     	; 0x75e2 <__fixunssfsi+0x46>
    75ae:	66 0f       	add	r22, r22
    75b0:	77 1f       	adc	r23, r23
    75b2:	88 1f       	adc	r24, r24
    75b4:	99 1f       	adc	r25, r25
    75b6:	1a f0       	brmi	.+6      	; 0x75be <__fixunssfsi+0x22>
    75b8:	ba 95       	dec	r27
    75ba:	c9 f7       	brne	.-14     	; 0x75ae <__fixunssfsi+0x12>
    75bc:	12 c0       	rjmp	.+36     	; 0x75e2 <__fixunssfsi+0x46>
    75be:	b1 30       	cpi	r27, 0x01	; 1
    75c0:	81 f0       	breq	.+32     	; 0x75e2 <__fixunssfsi+0x46>
    75c2:	c3 d0       	rcall	.+390    	; 0x774a <__fp_zero>
    75c4:	b1 e0       	ldi	r27, 0x01	; 1
    75c6:	08 95       	ret
    75c8:	c0 c0       	rjmp	.+384    	; 0x774a <__fp_zero>
    75ca:	67 2f       	mov	r22, r23
    75cc:	78 2f       	mov	r23, r24
    75ce:	88 27       	eor	r24, r24
    75d0:	b8 5f       	subi	r27, 0xF8	; 248
    75d2:	39 f0       	breq	.+14     	; 0x75e2 <__fixunssfsi+0x46>
    75d4:	b9 3f       	cpi	r27, 0xF9	; 249
    75d6:	cc f3       	brlt	.-14     	; 0x75ca <__fixunssfsi+0x2e>
    75d8:	86 95       	lsr	r24
    75da:	77 95       	ror	r23
    75dc:	67 95       	ror	r22
    75de:	b3 95       	inc	r27
    75e0:	d9 f7       	brne	.-10     	; 0x75d8 <__fixunssfsi+0x3c>
    75e2:	3e f4       	brtc	.+14     	; 0x75f2 <__fixunssfsi+0x56>
    75e4:	90 95       	com	r25
    75e6:	80 95       	com	r24
    75e8:	70 95       	com	r23
    75ea:	61 95       	neg	r22
    75ec:	7f 4f       	sbci	r23, 0xFF	; 255
    75ee:	8f 4f       	sbci	r24, 0xFF	; 255
    75f0:	9f 4f       	sbci	r25, 0xFF	; 255
    75f2:	08 95       	ret

000075f4 <__floatunsisf>:
    75f4:	e8 94       	clt
    75f6:	09 c0       	rjmp	.+18     	; 0x760a <__floatsisf+0x12>

000075f8 <__floatsisf>:
    75f8:	97 fb       	bst	r25, 7
    75fa:	3e f4       	brtc	.+14     	; 0x760a <__floatsisf+0x12>
    75fc:	90 95       	com	r25
    75fe:	80 95       	com	r24
    7600:	70 95       	com	r23
    7602:	61 95       	neg	r22
    7604:	7f 4f       	sbci	r23, 0xFF	; 255
    7606:	8f 4f       	sbci	r24, 0xFF	; 255
    7608:	9f 4f       	sbci	r25, 0xFF	; 255
    760a:	99 23       	and	r25, r25
    760c:	a9 f0       	breq	.+42     	; 0x7638 <__floatsisf+0x40>
    760e:	f9 2f       	mov	r31, r25
    7610:	96 e9       	ldi	r25, 0x96	; 150
    7612:	bb 27       	eor	r27, r27
    7614:	93 95       	inc	r25
    7616:	f6 95       	lsr	r31
    7618:	87 95       	ror	r24
    761a:	77 95       	ror	r23
    761c:	67 95       	ror	r22
    761e:	b7 95       	ror	r27
    7620:	f1 11       	cpse	r31, r1
    7622:	f8 cf       	rjmp	.-16     	; 0x7614 <__floatsisf+0x1c>
    7624:	fa f4       	brpl	.+62     	; 0x7664 <__floatsisf+0x6c>
    7626:	bb 0f       	add	r27, r27
    7628:	11 f4       	brne	.+4      	; 0x762e <__floatsisf+0x36>
    762a:	60 ff       	sbrs	r22, 0
    762c:	1b c0       	rjmp	.+54     	; 0x7664 <__floatsisf+0x6c>
    762e:	6f 5f       	subi	r22, 0xFF	; 255
    7630:	7f 4f       	sbci	r23, 0xFF	; 255
    7632:	8f 4f       	sbci	r24, 0xFF	; 255
    7634:	9f 4f       	sbci	r25, 0xFF	; 255
    7636:	16 c0       	rjmp	.+44     	; 0x7664 <__floatsisf+0x6c>
    7638:	88 23       	and	r24, r24
    763a:	11 f0       	breq	.+4      	; 0x7640 <__floatsisf+0x48>
    763c:	96 e9       	ldi	r25, 0x96	; 150
    763e:	11 c0       	rjmp	.+34     	; 0x7662 <__floatsisf+0x6a>
    7640:	77 23       	and	r23, r23
    7642:	21 f0       	breq	.+8      	; 0x764c <__floatsisf+0x54>
    7644:	9e e8       	ldi	r25, 0x8E	; 142
    7646:	87 2f       	mov	r24, r23
    7648:	76 2f       	mov	r23, r22
    764a:	05 c0       	rjmp	.+10     	; 0x7656 <__floatsisf+0x5e>
    764c:	66 23       	and	r22, r22
    764e:	71 f0       	breq	.+28     	; 0x766c <__floatsisf+0x74>
    7650:	96 e8       	ldi	r25, 0x86	; 134
    7652:	86 2f       	mov	r24, r22
    7654:	70 e0       	ldi	r23, 0x00	; 0
    7656:	60 e0       	ldi	r22, 0x00	; 0
    7658:	2a f0       	brmi	.+10     	; 0x7664 <__floatsisf+0x6c>
    765a:	9a 95       	dec	r25
    765c:	66 0f       	add	r22, r22
    765e:	77 1f       	adc	r23, r23
    7660:	88 1f       	adc	r24, r24
    7662:	da f7       	brpl	.-10     	; 0x765a <__floatsisf+0x62>
    7664:	88 0f       	add	r24, r24
    7666:	96 95       	lsr	r25
    7668:	87 95       	ror	r24
    766a:	97 f9       	bld	r25, 7
    766c:	08 95       	ret

0000766e <__fp_cmp>:
    766e:	99 0f       	add	r25, r25
    7670:	00 08       	sbc	r0, r0
    7672:	55 0f       	add	r21, r21
    7674:	aa 0b       	sbc	r26, r26
    7676:	e0 e8       	ldi	r30, 0x80	; 128
    7678:	fe ef       	ldi	r31, 0xFE	; 254
    767a:	16 16       	cp	r1, r22
    767c:	17 06       	cpc	r1, r23
    767e:	e8 07       	cpc	r30, r24
    7680:	f9 07       	cpc	r31, r25
    7682:	c0 f0       	brcs	.+48     	; 0x76b4 <__fp_cmp+0x46>
    7684:	12 16       	cp	r1, r18
    7686:	13 06       	cpc	r1, r19
    7688:	e4 07       	cpc	r30, r20
    768a:	f5 07       	cpc	r31, r21
    768c:	98 f0       	brcs	.+38     	; 0x76b4 <__fp_cmp+0x46>
    768e:	62 1b       	sub	r22, r18
    7690:	73 0b       	sbc	r23, r19
    7692:	84 0b       	sbc	r24, r20
    7694:	95 0b       	sbc	r25, r21
    7696:	39 f4       	brne	.+14     	; 0x76a6 <__fp_cmp+0x38>
    7698:	0a 26       	eor	r0, r26
    769a:	61 f0       	breq	.+24     	; 0x76b4 <__fp_cmp+0x46>
    769c:	23 2b       	or	r18, r19
    769e:	24 2b       	or	r18, r20
    76a0:	25 2b       	or	r18, r21
    76a2:	21 f4       	brne	.+8      	; 0x76ac <__fp_cmp+0x3e>
    76a4:	08 95       	ret
    76a6:	0a 26       	eor	r0, r26
    76a8:	09 f4       	brne	.+2      	; 0x76ac <__fp_cmp+0x3e>
    76aa:	a1 40       	sbci	r26, 0x01	; 1
    76ac:	a6 95       	lsr	r26
    76ae:	8f ef       	ldi	r24, 0xFF	; 255
    76b0:	81 1d       	adc	r24, r1
    76b2:	81 1d       	adc	r24, r1
    76b4:	08 95       	ret

000076b6 <__fp_inf>:
    76b6:	97 f9       	bld	r25, 7
    76b8:	9f 67       	ori	r25, 0x7F	; 127
    76ba:	80 e8       	ldi	r24, 0x80	; 128
    76bc:	70 e0       	ldi	r23, 0x00	; 0
    76be:	60 e0       	ldi	r22, 0x00	; 0
    76c0:	08 95       	ret

000076c2 <__fp_nan>:
    76c2:	9f ef       	ldi	r25, 0xFF	; 255
    76c4:	80 ec       	ldi	r24, 0xC0	; 192
    76c6:	08 95       	ret

000076c8 <__fp_pscA>:
    76c8:	00 24       	eor	r0, r0
    76ca:	0a 94       	dec	r0
    76cc:	16 16       	cp	r1, r22
    76ce:	17 06       	cpc	r1, r23
    76d0:	18 06       	cpc	r1, r24
    76d2:	09 06       	cpc	r0, r25
    76d4:	08 95       	ret

000076d6 <__fp_pscB>:
    76d6:	00 24       	eor	r0, r0
    76d8:	0a 94       	dec	r0
    76da:	12 16       	cp	r1, r18
    76dc:	13 06       	cpc	r1, r19
    76de:	14 06       	cpc	r1, r20
    76e0:	05 06       	cpc	r0, r21
    76e2:	08 95       	ret

000076e4 <__fp_round>:
    76e4:	09 2e       	mov	r0, r25
    76e6:	03 94       	inc	r0
    76e8:	00 0c       	add	r0, r0
    76ea:	11 f4       	brne	.+4      	; 0x76f0 <__fp_round+0xc>
    76ec:	88 23       	and	r24, r24
    76ee:	52 f0       	brmi	.+20     	; 0x7704 <__fp_round+0x20>
    76f0:	bb 0f       	add	r27, r27
    76f2:	40 f4       	brcc	.+16     	; 0x7704 <__fp_round+0x20>
    76f4:	bf 2b       	or	r27, r31
    76f6:	11 f4       	brne	.+4      	; 0x76fc <__fp_round+0x18>
    76f8:	60 ff       	sbrs	r22, 0
    76fa:	04 c0       	rjmp	.+8      	; 0x7704 <__fp_round+0x20>
    76fc:	6f 5f       	subi	r22, 0xFF	; 255
    76fe:	7f 4f       	sbci	r23, 0xFF	; 255
    7700:	8f 4f       	sbci	r24, 0xFF	; 255
    7702:	9f 4f       	sbci	r25, 0xFF	; 255
    7704:	08 95       	ret

00007706 <__fp_split3>:
    7706:	57 fd       	sbrc	r21, 7
    7708:	90 58       	subi	r25, 0x80	; 128
    770a:	44 0f       	add	r20, r20
    770c:	55 1f       	adc	r21, r21
    770e:	59 f0       	breq	.+22     	; 0x7726 <__fp_splitA+0x10>
    7710:	5f 3f       	cpi	r21, 0xFF	; 255
    7712:	71 f0       	breq	.+28     	; 0x7730 <__fp_splitA+0x1a>
    7714:	47 95       	ror	r20

00007716 <__fp_splitA>:
    7716:	88 0f       	add	r24, r24
    7718:	97 fb       	bst	r25, 7
    771a:	99 1f       	adc	r25, r25
    771c:	61 f0       	breq	.+24     	; 0x7736 <__fp_splitA+0x20>
    771e:	9f 3f       	cpi	r25, 0xFF	; 255
    7720:	79 f0       	breq	.+30     	; 0x7740 <__fp_splitA+0x2a>
    7722:	87 95       	ror	r24
    7724:	08 95       	ret
    7726:	12 16       	cp	r1, r18
    7728:	13 06       	cpc	r1, r19
    772a:	14 06       	cpc	r1, r20
    772c:	55 1f       	adc	r21, r21
    772e:	f2 cf       	rjmp	.-28     	; 0x7714 <__fp_split3+0xe>
    7730:	46 95       	lsr	r20
    7732:	f1 df       	rcall	.-30     	; 0x7716 <__fp_splitA>
    7734:	08 c0       	rjmp	.+16     	; 0x7746 <__fp_splitA+0x30>
    7736:	16 16       	cp	r1, r22
    7738:	17 06       	cpc	r1, r23
    773a:	18 06       	cpc	r1, r24
    773c:	99 1f       	adc	r25, r25
    773e:	f1 cf       	rjmp	.-30     	; 0x7722 <__fp_splitA+0xc>
    7740:	86 95       	lsr	r24
    7742:	71 05       	cpc	r23, r1
    7744:	61 05       	cpc	r22, r1
    7746:	08 94       	sec
    7748:	08 95       	ret

0000774a <__fp_zero>:
    774a:	e8 94       	clt

0000774c <__fp_szero>:
    774c:	bb 27       	eor	r27, r27
    774e:	66 27       	eor	r22, r22
    7750:	77 27       	eor	r23, r23
    7752:	cb 01       	movw	r24, r22
    7754:	97 f9       	bld	r25, 7
    7756:	08 95       	ret

00007758 <__gesf2>:
    7758:	8a df       	rcall	.-236    	; 0x766e <__fp_cmp>
    775a:	08 f4       	brcc	.+2      	; 0x775e <__gesf2+0x6>
    775c:	8f ef       	ldi	r24, 0xFF	; 255
    775e:	08 95       	ret

00007760 <__mulsf3>:
    7760:	0b d0       	rcall	.+22     	; 0x7778 <__mulsf3x>
    7762:	c0 cf       	rjmp	.-128    	; 0x76e4 <__fp_round>
    7764:	b1 df       	rcall	.-158    	; 0x76c8 <__fp_pscA>
    7766:	28 f0       	brcs	.+10     	; 0x7772 <__mulsf3+0x12>
    7768:	b6 df       	rcall	.-148    	; 0x76d6 <__fp_pscB>
    776a:	18 f0       	brcs	.+6      	; 0x7772 <__mulsf3+0x12>
    776c:	95 23       	and	r25, r21
    776e:	09 f0       	breq	.+2      	; 0x7772 <__mulsf3+0x12>
    7770:	a2 cf       	rjmp	.-188    	; 0x76b6 <__fp_inf>
    7772:	a7 cf       	rjmp	.-178    	; 0x76c2 <__fp_nan>
    7774:	11 24       	eor	r1, r1
    7776:	ea cf       	rjmp	.-44     	; 0x774c <__fp_szero>

00007778 <__mulsf3x>:
    7778:	c6 df       	rcall	.-116    	; 0x7706 <__fp_split3>
    777a:	a0 f3       	brcs	.-24     	; 0x7764 <__mulsf3+0x4>

0000777c <__mulsf3_pse>:
    777c:	95 9f       	mul	r25, r21
    777e:	d1 f3       	breq	.-12     	; 0x7774 <__mulsf3+0x14>
    7780:	95 0f       	add	r25, r21
    7782:	50 e0       	ldi	r21, 0x00	; 0
    7784:	55 1f       	adc	r21, r21
    7786:	62 9f       	mul	r22, r18
    7788:	f0 01       	movw	r30, r0
    778a:	72 9f       	mul	r23, r18
    778c:	bb 27       	eor	r27, r27
    778e:	f0 0d       	add	r31, r0
    7790:	b1 1d       	adc	r27, r1
    7792:	63 9f       	mul	r22, r19
    7794:	aa 27       	eor	r26, r26
    7796:	f0 0d       	add	r31, r0
    7798:	b1 1d       	adc	r27, r1
    779a:	aa 1f       	adc	r26, r26
    779c:	64 9f       	mul	r22, r20
    779e:	66 27       	eor	r22, r22
    77a0:	b0 0d       	add	r27, r0
    77a2:	a1 1d       	adc	r26, r1
    77a4:	66 1f       	adc	r22, r22
    77a6:	82 9f       	mul	r24, r18
    77a8:	22 27       	eor	r18, r18
    77aa:	b0 0d       	add	r27, r0
    77ac:	a1 1d       	adc	r26, r1
    77ae:	62 1f       	adc	r22, r18
    77b0:	73 9f       	mul	r23, r19
    77b2:	b0 0d       	add	r27, r0
    77b4:	a1 1d       	adc	r26, r1
    77b6:	62 1f       	adc	r22, r18
    77b8:	83 9f       	mul	r24, r19
    77ba:	a0 0d       	add	r26, r0
    77bc:	61 1d       	adc	r22, r1
    77be:	22 1f       	adc	r18, r18
    77c0:	74 9f       	mul	r23, r20
    77c2:	33 27       	eor	r19, r19
    77c4:	a0 0d       	add	r26, r0
    77c6:	61 1d       	adc	r22, r1
    77c8:	23 1f       	adc	r18, r19
    77ca:	84 9f       	mul	r24, r20
    77cc:	60 0d       	add	r22, r0
    77ce:	21 1d       	adc	r18, r1
    77d0:	82 2f       	mov	r24, r18
    77d2:	76 2f       	mov	r23, r22
    77d4:	6a 2f       	mov	r22, r26
    77d6:	11 24       	eor	r1, r1
    77d8:	9f 57       	subi	r25, 0x7F	; 127
    77da:	50 40       	sbci	r21, 0x00	; 0
    77dc:	8a f0       	brmi	.+34     	; 0x7800 <__mulsf3_pse+0x84>
    77de:	e1 f0       	breq	.+56     	; 0x7818 <__mulsf3_pse+0x9c>
    77e0:	88 23       	and	r24, r24
    77e2:	4a f0       	brmi	.+18     	; 0x77f6 <__mulsf3_pse+0x7a>
    77e4:	ee 0f       	add	r30, r30
    77e6:	ff 1f       	adc	r31, r31
    77e8:	bb 1f       	adc	r27, r27
    77ea:	66 1f       	adc	r22, r22
    77ec:	77 1f       	adc	r23, r23
    77ee:	88 1f       	adc	r24, r24
    77f0:	91 50       	subi	r25, 0x01	; 1
    77f2:	50 40       	sbci	r21, 0x00	; 0
    77f4:	a9 f7       	brne	.-22     	; 0x77e0 <__mulsf3_pse+0x64>
    77f6:	9e 3f       	cpi	r25, 0xFE	; 254
    77f8:	51 05       	cpc	r21, r1
    77fa:	70 f0       	brcs	.+28     	; 0x7818 <__mulsf3_pse+0x9c>
    77fc:	5c cf       	rjmp	.-328    	; 0x76b6 <__fp_inf>
    77fe:	a6 cf       	rjmp	.-180    	; 0x774c <__fp_szero>
    7800:	5f 3f       	cpi	r21, 0xFF	; 255
    7802:	ec f3       	brlt	.-6      	; 0x77fe <__mulsf3_pse+0x82>
    7804:	98 3e       	cpi	r25, 0xE8	; 232
    7806:	dc f3       	brlt	.-10     	; 0x77fe <__mulsf3_pse+0x82>
    7808:	86 95       	lsr	r24
    780a:	77 95       	ror	r23
    780c:	67 95       	ror	r22
    780e:	b7 95       	ror	r27
    7810:	f7 95       	ror	r31
    7812:	e7 95       	ror	r30
    7814:	9f 5f       	subi	r25, 0xFF	; 255
    7816:	c1 f7       	brne	.-16     	; 0x7808 <__mulsf3_pse+0x8c>
    7818:	fe 2b       	or	r31, r30
    781a:	88 0f       	add	r24, r24
    781c:	91 1d       	adc	r25, r1
    781e:	96 95       	lsr	r25
    7820:	87 95       	ror	r24
    7822:	97 f9       	bld	r25, 7
    7824:	08 95       	ret

00007826 <__mulsi3>:
    7826:	62 9f       	mul	r22, r18
    7828:	d0 01       	movw	r26, r0
    782a:	73 9f       	mul	r23, r19
    782c:	f0 01       	movw	r30, r0
    782e:	82 9f       	mul	r24, r18
    7830:	e0 0d       	add	r30, r0
    7832:	f1 1d       	adc	r31, r1
    7834:	64 9f       	mul	r22, r20
    7836:	e0 0d       	add	r30, r0
    7838:	f1 1d       	adc	r31, r1
    783a:	92 9f       	mul	r25, r18
    783c:	f0 0d       	add	r31, r0
    783e:	83 9f       	mul	r24, r19
    7840:	f0 0d       	add	r31, r0
    7842:	74 9f       	mul	r23, r20
    7844:	f0 0d       	add	r31, r0
    7846:	65 9f       	mul	r22, r21
    7848:	f0 0d       	add	r31, r0
    784a:	99 27       	eor	r25, r25
    784c:	72 9f       	mul	r23, r18
    784e:	b0 0d       	add	r27, r0
    7850:	e1 1d       	adc	r30, r1
    7852:	f9 1f       	adc	r31, r25
    7854:	63 9f       	mul	r22, r19
    7856:	b0 0d       	add	r27, r0
    7858:	e1 1d       	adc	r30, r1
    785a:	f9 1f       	adc	r31, r25
    785c:	bd 01       	movw	r22, r26
    785e:	cf 01       	movw	r24, r30
    7860:	11 24       	eor	r1, r1
    7862:	08 95       	ret

00007864 <__udivmodhi4>:
    7864:	aa 1b       	sub	r26, r26
    7866:	bb 1b       	sub	r27, r27
    7868:	51 e1       	ldi	r21, 0x11	; 17
    786a:	07 c0       	rjmp	.+14     	; 0x787a <__udivmodhi4_ep>

0000786c <__udivmodhi4_loop>:
    786c:	aa 1f       	adc	r26, r26
    786e:	bb 1f       	adc	r27, r27
    7870:	a6 17       	cp	r26, r22
    7872:	b7 07       	cpc	r27, r23
    7874:	10 f0       	brcs	.+4      	; 0x787a <__udivmodhi4_ep>
    7876:	a6 1b       	sub	r26, r22
    7878:	b7 0b       	sbc	r27, r23

0000787a <__udivmodhi4_ep>:
    787a:	88 1f       	adc	r24, r24
    787c:	99 1f       	adc	r25, r25
    787e:	5a 95       	dec	r21
    7880:	a9 f7       	brne	.-22     	; 0x786c <__udivmodhi4_loop>
    7882:	80 95       	com	r24
    7884:	90 95       	com	r25
    7886:	bc 01       	movw	r22, r24
    7888:	cd 01       	movw	r24, r26
    788a:	08 95       	ret

0000788c <__divmodhi4>:
    788c:	97 fb       	bst	r25, 7
    788e:	09 2e       	mov	r0, r25
    7890:	07 26       	eor	r0, r23
    7892:	0a d0       	rcall	.+20     	; 0x78a8 <__divmodhi4_neg1>
    7894:	77 fd       	sbrc	r23, 7
    7896:	04 d0       	rcall	.+8      	; 0x78a0 <__divmodhi4_neg2>
    7898:	e5 df       	rcall	.-54     	; 0x7864 <__udivmodhi4>
    789a:	06 d0       	rcall	.+12     	; 0x78a8 <__divmodhi4_neg1>
    789c:	00 20       	and	r0, r0
    789e:	1a f4       	brpl	.+6      	; 0x78a6 <__divmodhi4_exit>

000078a0 <__divmodhi4_neg2>:
    78a0:	70 95       	com	r23
    78a2:	61 95       	neg	r22
    78a4:	7f 4f       	sbci	r23, 0xFF	; 255

000078a6 <__divmodhi4_exit>:
    78a6:	08 95       	ret

000078a8 <__divmodhi4_neg1>:
    78a8:	f6 f7       	brtc	.-4      	; 0x78a6 <__divmodhi4_exit>
    78aa:	90 95       	com	r25
    78ac:	81 95       	neg	r24
    78ae:	9f 4f       	sbci	r25, 0xFF	; 255
    78b0:	08 95       	ret

000078b2 <__udivmodsi4>:
    78b2:	a1 e2       	ldi	r26, 0x21	; 33
    78b4:	1a 2e       	mov	r1, r26
    78b6:	aa 1b       	sub	r26, r26
    78b8:	bb 1b       	sub	r27, r27
    78ba:	fd 01       	movw	r30, r26
    78bc:	0d c0       	rjmp	.+26     	; 0x78d8 <__udivmodsi4_ep>

000078be <__udivmodsi4_loop>:
    78be:	aa 1f       	adc	r26, r26
    78c0:	bb 1f       	adc	r27, r27
    78c2:	ee 1f       	adc	r30, r30
    78c4:	ff 1f       	adc	r31, r31
    78c6:	a2 17       	cp	r26, r18
    78c8:	b3 07       	cpc	r27, r19
    78ca:	e4 07       	cpc	r30, r20
    78cc:	f5 07       	cpc	r31, r21
    78ce:	20 f0       	brcs	.+8      	; 0x78d8 <__udivmodsi4_ep>
    78d0:	a2 1b       	sub	r26, r18
    78d2:	b3 0b       	sbc	r27, r19
    78d4:	e4 0b       	sbc	r30, r20
    78d6:	f5 0b       	sbc	r31, r21

000078d8 <__udivmodsi4_ep>:
    78d8:	66 1f       	adc	r22, r22
    78da:	77 1f       	adc	r23, r23
    78dc:	88 1f       	adc	r24, r24
    78de:	99 1f       	adc	r25, r25
    78e0:	1a 94       	dec	r1
    78e2:	69 f7       	brne	.-38     	; 0x78be <__udivmodsi4_loop>
    78e4:	60 95       	com	r22
    78e6:	70 95       	com	r23
    78e8:	80 95       	com	r24
    78ea:	90 95       	com	r25
    78ec:	9b 01       	movw	r18, r22
    78ee:	ac 01       	movw	r20, r24
    78f0:	bd 01       	movw	r22, r26
    78f2:	cf 01       	movw	r24, r30
    78f4:	08 95       	ret

000078f6 <__tablejump2__>:
    78f6:	ee 0f       	add	r30, r30
    78f8:	ff 1f       	adc	r31, r31

000078fa <__tablejump__>:
    78fa:	05 90       	lpm	r0, Z+
    78fc:	f4 91       	lpm	r31, Z+
    78fe:	e0 2d       	mov	r30, r0
    7900:	09 94       	ijmp

00007902 <isspace>:
    7902:	91 11       	cpse	r25, r1
    7904:	0e c0       	rjmp	.+28     	; 0x7922 <__ctype_isfalse>
    7906:	80 32       	cpi	r24, 0x20	; 32
    7908:	19 f0       	breq	.+6      	; 0x7910 <isspace+0xe>
    790a:	89 50       	subi	r24, 0x09	; 9
    790c:	85 50       	subi	r24, 0x05	; 5
    790e:	d0 f7       	brcc	.-12     	; 0x7904 <isspace+0x2>
    7910:	08 95       	ret

00007912 <toupper>:
    7912:	91 11       	cpse	r25, r1
    7914:	08 95       	ret
    7916:	81 56       	subi	r24, 0x61	; 97
    7918:	8a 51       	subi	r24, 0x1A	; 26
    791a:	08 f4       	brcc	.+2      	; 0x791e <toupper+0xc>
    791c:	80 52       	subi	r24, 0x20	; 32
    791e:	85 58       	subi	r24, 0x85	; 133
    7920:	08 95       	ret

00007922 <__ctype_isfalse>:
    7922:	99 27       	eor	r25, r25
    7924:	88 27       	eor	r24, r24

00007926 <__ctype_istrue>:
    7926:	08 95       	ret

00007928 <__do_global_dtors>:
    7928:	19 e0       	ldi	r17, 0x09	; 9
    792a:	c8 e9       	ldi	r28, 0x98	; 152
    792c:	d9 e0       	ldi	r29, 0x09	; 9
    792e:	04 c0       	rjmp	.+8      	; 0x7938 <.do_global_dtors_start>

00007930 <.do_global_dtors_loop>:
    7930:	fe 01       	movw	r30, r28
    7932:	0e 94 7d 3c 	call	0x78fa	; 0x78fa <__tablejump__>
    7936:	22 96       	adiw	r28, 0x02	; 2

00007938 <.do_global_dtors_start>:
    7938:	ce 39       	cpi	r28, 0x9E	; 158
    793a:	d1 07       	cpc	r29, r17
    793c:	c9 f7       	brne	.-14     	; 0x7930 <.do_global_dtors_loop>
    793e:	f8 94       	cli

00007940 <__stop_program>:
    7940:	ff cf       	rjmp	.-2      	; 0x7940 <__stop_program>
