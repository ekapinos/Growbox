
Growbox.cpp.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__dtors_end>
    total += 2; /* Add two bytes for the memory block's header  */
    total += (int) current->sz;
  }

  return total;
}
       4:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__bad_interrupt>
   
int month(){
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
       8:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__bad_interrupt>
TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
  for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
     free(id);   // ensure  all Alarms are cleared and available for allocation  
}
       c:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__bad_interrupt>
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
  txBufferLength = 0;
}
      10:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__bad_interrupt>
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
}
      14:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__bad_interrupt>
    exists = false;
    return false;
  }
  exists = true;
  return true;
}
      18:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__bad_interrupt>
void OneWire::depower()
{
	noInterrupts();
	DIRECT_MODE_INPUT(baseReg, bitmask);
	interrupts();
}
      1c:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__bad_interrupt>
  devices = 0;
  parasite = false;
  bitResolution = 9;
  waitForConversion = true;
  checkForConversion = true;
}
      20:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      24:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__bad_interrupt>
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
      28:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__bad_interrupt>
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
      2c:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__bad_interrupt>
// initial characters that are not digits (or the minus sign) are skipped
// function is terminated by the first character that is not a digit.
long Stream::parseInt()
{
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
}
      30:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__bad_interrupt>
	return operator[](loc);
}

void String::setCharAt(unsigned int loc, char c) 
{
	if (loc < len) buffer[loc] = c;
      34:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__bad_interrupt>
      38:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__bad_interrupt>
      3c:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__bad_interrupt>
      40:	0c 94 ea 2f 	jmp	0x5fd4	; 0x5fd4 <__vector_16>
      44:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__bad_interrupt>
      48:	0c 94 c4 31 	jmp	0x6388	; 0x6388 <__vector_18>
      4c:	0c 94 12 32 	jmp	0x6424	; 0x6424 <__vector_19>
      50:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__bad_interrupt>
      54:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__bad_interrupt>
      58:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__bad_interrupt>
      5c:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__bad_interrupt>
      60:	0c 94 ef 26 	jmp	0x4dde	; 0x4dde <__vector_24>
      64:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__bad_interrupt>

00000068 <_ZL20S_WIFI_at_recv_data_>:
      68:	61 74 2b 72 65 63 76 5f 64 61 74 61 3d 00           at+recv_data=.

00000076 <_ZL7S_table>:
      76:	74 61 62 6c 65 00                                   table.

0000007c <_ZL4S_tr>:
      7c:	74 72 00                                            tr.

0000007f <_ZL4S_td>:
      7f:	74 64 00                                            td.

00000082 <_ZL3S_b>:
      82:	62 00                                               b.

00000084 <_ZL4S_0x>:
      84:	30 78 00                                            0x.

00000087 <_ZZN15GB_SerialHelper16sendHttpOKHeaderEhE3__c>:
      87:	48 54 54 50 2f 31 2e 31 20 32 30 30 20 4f 4b 0d     HTTP/1.1 200 OK.
      97:	0a 43 6f 6e 6e 65 63 74 69 6f 6e 3a 20 63 6c 6f     .Connection: clo
      a7:	73 65 0d 0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65     se..Content-Type
      b7:	3a 20 74 65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 00     : text/html.....

000000c7 <_ZZN15GB_SerialHelper18sendWifiFrameStartEhjE3__c>:
      c7:	61 74 2b 73 65 6e 64 5f 64 61 74 61 3d 00           at+send_data=.

000000d5 <_ZL18S_WIFI_RESPONSE_OK>:
      d5:	4f 4b 00                                            OK.

000000d8 <_ZL6S_CRLF>:
      d8:	0d 0a 00                                            ...

000000db <_ZL21S_WIFI_RESPONSE_ERROR>:
      db:	45 52 52 4f 52 00                                   ERROR.

000000e1 <_ZL7S_empty>:
	...

000000e2 <_ZL6S_Next>:
      e2:	20 3e 20 00                                          > .

000000e6 <_ZZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperiE3__c>:
      e6:	45 72 72 6f 72 20 00                                Error .

000000ed <_ZZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperiE3__c_0>:
      ed:	20 28 72 65 62 6f 6f 74 29 00                        (reboot).

000000f7 <_ZZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperiE3__c>:
      f7:	4e 6f 20 72 65 73 70 6f 6e 73 65 00                 No response.

00000103 <_ZL6S_WIFI>:
     103:	57 49 46 49 3e 20 00                                WIFI> .

0000010a <_ZZN13GB_PrintDirty16printWithoutCRLFERK6StringE3__c_0>:
     10a:	5c 6e 00                                            \n.

0000010d <_ZZN13GB_PrintDirty16printWithoutCRLFERK6StringE3__c>:
     10d:	5c 72 00                                            \r.

00000110 <_ZL13S_Free_memory>:
     110:	46 72 65 65 20 6d 65 6d 6f 72 79 3a 20 00           Free memory: .

0000011e <_ZL7S_bytes>:
     11e:	20 62 79 74 65 73 00                                 bytes.

00000125 <_ZZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhhE3__c_0>:
     125:	4e 4f 54 20 53 54 4f 52 45 44 20 00                 NOT STORED .

00000131 <_ZZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhhE3__c>:
     131:	4c 4f 47 3e 20 00                                   LOG> .

00000137 <_ZZN9GB_Logger18getLogRecordSuffixERK9LogRecordE3__c_0>:
     137:	5d 20 43 00                                         ] C.

0000013b <_ZZN9GB_Logger18getLogRecordSuffixERK9LogRecordE3__c>:
     13b:	20 5b 00                                             [.

0000013e <_ZL24S_WIFI_RESPONSE_WELLCOME>:
     13e:	57 65 6c 63 6f 6d 65 20 74 6f 20 52 41 4b 34 31     Welcome to RAK41
     14e:	30 0d 0a 00                                         0...

00000152 <_ZL9S_enabled>:
     152:	20 65 6e 61 62 6c 65 64 00                           enabled.

0000015b <_ZL10S_disabled>:
     15b:	20 64 69 73 61 62 6c 65 64 00                        disabled.

00000165 <_ZL11S_connected>:
     165:	20 63 6f 6e 6e 65 63 74 65 64 00                     connected.

00000170 <_ZL14S_disconnected>:
     170:	20 64 69 73 63 6f 6e 6e 65 63 74 65 64 00            disconnected.

0000017e <_ZZN15GB_SerialHelper11checkSerialEhhE3__c_3>:
     17e:	53 65 72 69 61 6c 20 57 69 2d 46 69 3a 00           Serial Wi-Fi:.

0000018c <_ZZN15GB_SerialHelper11checkSerialEhhE3__c_2>:
     18c:	53 65 72 69 61 6c 20 6d 6f 6e 69 74 6f 72 3a 20     Serial monitor: 
	...

0000019d <_ZZN15GB_SerialHelper11checkSerialEhhE3__c_1>:
     19d:	4e 6f 74 20 63 6f 72 72 65 63 74 20 77 65 6c 6c     Not correct well
     1ad:	63 6f 6d 65 20 6d 65 73 73 61 67 65 3a 20 00        come message: .

000001bc <_ZZN15GB_SerialHelper11checkSerialEhhE3__c_0>:
     1bc:	61 74 2b 72 65 73 65 74 3d 30 00                    at+reset=0.

000001c7 <_ZZN15GB_SerialHelper11checkSerialEhhE3__c>:
     1c7:	52 65 73 74 61 72 74 69 6e 67 2e 2e 2e 00           Restarting....

000001d5 <_ZZN15GB_SerialHelper9startWifiEvE3__c_1>:
     1d5:	53 74 61 72 74 20 66 61 69 6c 65 64 00              Start failed.

000001e2 <_ZZN15GB_SerialHelper9startWifiEvE3__c_0>:
     1e2:	53 74 61 72 74 65 64 00                             Started.

000001ea <_ZZN15GB_SerialHelper9startWifiEvE3__c>:
     1ea:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

000001f6 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_7>:
     1f6:	61 74 2b 6c 74 63 70 3d 38 30 00                    at+ltcp=80.

00000201 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_6>:
     201:	61 74 2b 61 70 3d 47 72 6f 77 62 6f 78 2c 31 00     at+ap=Growbox,1.

00000211 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_5>:
     211:	61 74 2b 69 70 64 68 63 70 3d 31 00                 at+ipdhcp=1.

0000021d <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_4>:
     21d:	61 74 2b 69 70 73 74 61 74 69 63 3d 31 39 32 2e     at+ipstatic=192.
     22d:	31 36 38 2e 30 2e 31 2c 32 35 35 2e 32 35 35 2e     168.0.1,255.255.
     23d:	30 2e 30 2c 30 2e 30 2e 30 2e 30 2c 30 2c 30 00     0.0,0.0.0.0,0,0.

0000024d <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_3>:
     24d:	61 74 2b 70 73 6b 3d 69 6e 67 6f 64 77 65 74 72     at+psk=ingodwetr
     25d:	75 73 74 00                                         ust.

00000261 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_2>:
     261:	61 74 2b 69 70 64 68 63 70 3d 30 00                 at+ipdhcp=0.

0000026d <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_1>:
     26d:	61 74 2b 63 6f 6e 6e 65 63 74 3d 00                 at+connect=.

00000279 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_0>:
     279:	61 74 2b 70 73 6b 3d 00                             at+psk=.

00000281 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c>:
     281:	61 74 2b 73 63 61 6e 3d 30 00                       at+scan=0.

0000028b <_ZL13S_Temperature>:
     28b:	54 65 6d 70 65 72 61 74 75 72 65 00                 Temperature.

00000297 <_ZZ11serialEventvE3__c_1>:
     297:	53 65 6e 64 20 72 65 73 70 6f 6e 63 65 20 65 72     Send responce er
     2a7:	72 6f 72 00                                         ror.

000002ab <_ZZ11serialEventvE3__c_0>:
     2ab:	2c 20 6e 6f 77 20 00                                , now .

000002b2 <_ZZ11serialEventvE3__c>:
     2b2:	73 65 72 69 61 6c 45 76 65 6e 74 28 29 20 66 72     serialEvent() fr
     2c2:	65 65 20 6d 65 6d 6f 72 79 20 6f 6e 20 73 74 61     ee memory on sta
     2d2:	72 74 20 3a 20 00                                   rt : .

000002d8 <_ZZN15GB_SerialHelper17handleSerialEventER6StringRhS2_S1_E3__c_1>:
     2d8:	2c 20 6d 61 78 3a 20 00                             , max: .

000002e0 <_ZZN15GB_SerialHelper17handleSerialEventER6StringRhS2_S1_E3__c_0>:
     2e0:	53 45 52 49 41 4c 3e 20 66 72 65 65 20 6d 65 6d     SERIAL> free mem
     2f0:	6f 72 79 20 6f 6e 20 73 74 61 72 74 3a 20 00        ory on start: .

000002ff <_ZZN15GB_SerialHelper17handleSerialEventER6StringRhS2_S1_E3__c>:
     2ff:	53 45 52 49 41 4c 3e 20 00                          SERIAL> .

00000308 <_ZL5S_url>:
     308:	2f 00                                               /.

0000030a <_ZL9S_url_log>:
     30a:	2f 6c 6f 67 00                                      /log.

0000030f <_ZL10S_url_conf>:
     30f:	2f 63 6f 6e 66 00                                   /conf.

00000315 <_ZL13S_url_storage>:
     315:	2f 73 74 6f 72 61 67 65 00                          /storage.

0000031e <_ZL6S_html>:
     31e:	68 74 6d 6c 00                                      html.

00000323 <_ZL4S_hr>:
     323:	68 72 00                                            hr.

00000326 <_ZL5S_pre>:
     326:	70 72 65 00                                         pre.

0000032a <_ZZL14executeCommandRK6StringS1_E3__c_3>:
     32a:	53 74 6f 72 61 67 65 20 64 75 6d 70 00              Storage dump.

00000337 <_ZZL14executeCommandRK6StringS1_E3__c_2>:
     337:	43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 00           Configuration.

00000345 <_ZZL14executeCommandRK6StringS1_E3__c_1>:
     345:	44 61 69 6c 79 20 6c 6f 67 00                       Daily log.

0000034f <_ZZL14executeCommandRK6StringS1_E3__c_0>:
     34f:	53 74 61 74 75 73 00                                Status.

00000356 <_ZZL14executeCommandRK6StringS1_E3__c>:
     356:	3c 68 31 3e 47 72 6f 77 62 6f 78 3c 2f 68 31 3e     <h1>Growbox</h1>
	...

00000367 <_ZZL13sendTagButtonPKcPK19__FlashStringHelperE3__c_1>:
     367:	22 2f 3e 00                                         "/>.

0000036b <_ZZL13sendTagButtonPKcPK19__FlashStringHelperE3__c_0>:
     36b:	27 22 20 76 61 6c 75 65 3d 22 00                    '" value=".

00000376 <_ZZL13sendTagButtonPKcPK19__FlashStringHelperE3__c>:
     376:	3c 69 6e 70 75 74 20 74 79 70 65 3d 22 62 75 74     <input type="but
     386:	74 6f 6e 22 20 6f 6e 63 6c 69 63 6b 3d 22 64 6f     ton" onclick="do
     396:	63 75 6d 65 6e 74 2e 6c 6f 63 61 74 69 6f 6e 3d     cument.location=
     3a6:	27 00                                               '.

000003a8 <_ZZL14sendBootStatusvE3__c_3>:
     3a8:	2c 20 6f 76 65 72 66 6c 6f 77 00                    , overflow.

000003b3 <_ZZL14sendBootStatusvE3__c_2>:
     3b3:	2c 20 72 65 63 6f 72 64 73 20 00                    , records .

000003be <_ZZL14sendBootStatusvE3__c_1>:
     3be:	0d 0a 4c 6f 67 67 65 72 3a 00                       ..Logger:.

000003c8 <_ZZL14sendBootStatusvE3__c_0>:
     3c8:	2c 20 66 69 72 73 74 20 73 74 61 72 74 75 70 3a     , first startup:
     3d8:	20 00                                                .

000003da <_ZZL14sendBootStatusvE3__c>:
     3da:	43 6f 6e 74 72 6f 6c 6c 65 72 3a 20 73 74 61 72     Controller: star
     3ea:	74 75 70 3a 20 00                                   tup: .

000003f0 <_ZZL14sendTimeStatusvE3__c_5>:
     3f0:	3a 30 30 5d 0d 0a 00                                :00]...

000003f7 <_ZZL14sendTimeStatusvE3__c_4>:
     3f7:	3a 30 30 5d 2c 20 64 6f 77 6e 20 74 69 6d 65 20     :00], down time 
     407:	5b 00                                               [.

00000409 <_ZZL14sendTimeStatusvE3__c_3>:
     409:	2c 20 75 70 20 74 69 6d 65 20 5b 00                 , up time [.

00000415 <_ZZL14sendTimeStatusvE3__c_2>:
     415:	20 6d 6f 64 65 2c 20 74 69 6d 65 20 00               mode, time .

00000422 <_ZZL14sendTimeStatusvE3__c_1>:
     422:	4e 49 47 48 54 00                                   NIGHT.

00000428 <_ZZL14sendTimeStatusvE3__c_0>:
     428:	44 41 59 00                                         DAY.

0000042c <_ZZL14sendTimeStatusvE3__c>:
     42c:	43 6c 6f 63 6b 3a 20 00                             Clock: .

00000434 <_ZL11S_PlusMinus>:
     434:	2b 2f 2d 00                                         +/-.

00000438 <_ZZL21sendTemperatureStatusvE3__c_4>:
     438:	2c 20 63 72 69 74 69 63 61 6c 20 00                 , critical .

00000444 <_ZZL21sendTemperatureStatusvE3__c_3>:
     444:	2c 20 6e 69 67 68 74 20 00                          , night .

0000044d <_ZZL21sendTemperatureStatusvE3__c_2>:
     44d:	29 2c 20 64 61 79 20 00                             ), day .

00000455 <_ZZL21sendTemperatureStatusvE3__c_1>:
     455:	20 28 63 6f 75 6e 74 20 00                           (count .

0000045e <_ZZL21sendTemperatureStatusvE3__c_0>:
     45e:	2c 20 6e 65 78 74 20 00                             , next .

00000466 <_ZZL21sendTemperatureStatusvE3__c>:
     466:	3a 20 63 75 72 72 65 6e 74 20 00                    : current .

00000471 <_ZZL19printSendPinsStatusvE3__c_13>:
     471:	52 65 73 65 72 76 65 64 20 62 79 20 49 32 43 2e     Reserved by I2C.
     481:	20 43 61 6e 20 62 65 20 75 73 65 64 2c 20 69 66      Can be used, if
     491:	20 53 43 4c 2c 20 53 44 41 20 70 69 6e 73 20 77      SCL, SDA pins w
     4a1:	69 6c 6c 20 62 65 20 75 73 65 64 00                 ill be used.

000004ad <_ZZL19printSendPinsStatusvE3__c_12>:
     4ad:	42 72 65 65 7a 65 00                                Breeze.

000004b4 <_ZZL19printSendPinsStatusvE3__c_11>:
     4b4:	45 72 72 6f 72 20 73 74 61 74 75 73 00              Error status.

000004c1 <_ZZL19printSendPinsStatusvE3__c_10>:
     4c1:	55 73 65 20 73 65 72 69 61 6c 20 6d 6f 6e 69 74     Use serial monit
     4d1:	6f 72 20 6f 6e 28 31 29 2f 6f 66 66 28 30 29 00     or on(1)/off(0).

000004e1 <_ZZL19printSendPinsStatusvE3__c_9>:
     4e1:	31 2d 57 69 72 65 3a 20 74 65 72 6d 6f 6d 65 74     1-Wire: termomet
     4f1:	65 72 00                                            er.

000004f4 <_ZZL19printSendPinsStatusvE3__c_8>:
     4f4:	52 65 6c 61 79 3a 20 66 75 6e 20 6d 61 78 28 30     Relay: fun max(0
     504:	29 2f 6d 69 6e 28 31 29 20 73 70 65 65 64 20 73     )/min(1) speed s
     514:	77 69 74 63 68 00                                   witch.

0000051a <_ZZL19printSendPinsStatusvE3__c_7>:
     51a:	52 65 6c 61 79 3a 20 66 75 6e 20 6f 6e 28 30 29     Relay: fun on(0)
     52a:	2f 6f 66 66 28 31 29 00                             /off(1).

00000532 <_ZZL19printSendPinsStatusvE3__c_6>:
     532:	52 65 6c 61 79 3a 20 6c 69 67 68 74 20 6f 6e 28     Relay: light on(
     542:	30 29 2f 6f 66 66 28 31 29 00                       0)/off(1).

0000054c <_ZZL19printSendPinsStatusvE3__c_5>:
     54c:	52 65 73 65 72 76 65 64 20 62 79 20 53 65 72 69     Reserved by Seri
     55c:	61 6c 2f 55 53 42 2e 20 43 61 6e 20 62 65 20 75     al/USB. Can be u
     56c:	73 65 64 2c 20 69 66 20 53 65 72 69 61 6c 2f 55     sed, if Serial/U
     57c:	53 42 20 77 6f 6e 27 74 20 62 65 20 63 6f 6e 6e     SB won't be conn
     58c:	65 63 74 65 64 00                                   ected.

00000592 <_ZZL19printSendPinsStatusvE3__c_4>:
     592:	20 20 20 00                                            .

00000596 <_ZZL19printSendPinsStatusvE3__c_3>:
     596:	20 20 2d 20 20 20 20 20 00                            -     .

0000059f <_ZZL19printSendPinsStatusvE3__c_2>:
     59f:	20 20 20 20 20 2d 20 20 20 00                            -   .

000005a9 <_ZZL19printSendPinsStatusvE3__c_1>:
     5a9:	20 20 00                                              .

000005ac <_ZZL19printSendPinsStatusvE3__c_0>:
     5ac:	20 20 00                                              .

000005af <_ZZL19printSendPinsStatusvE3__c>:
     5af:	50 69 6e 20 4f 55 54 50 55 54 20 49 4e 50 55 54     Pin OUTPUT INPUT
	...

000005c0 <_ZZL30printSendConfigurationControlsvE3__c_1>:
     5c0:	3c 2f 66 6f 72 6d 3e 00                             </form>.

000005c8 <_ZZL30printSendConfigurationControlsvE3__c_0>:
     5c8:	3c 69 6e 70 75 74 20 74 79 70 65 3d 22 73 75 62     <input type="sub
     5d8:	6d 69 74 22 20 76 61 6c 75 65 3d 22 53 75 62 6d     mit" value="Subm
     5e8:	69 74 22 3e 00                                      it">.

000005ed <_ZZL30printSendConfigurationControlsvE3__c>:
     5ed:	3c 66 6f 72 6d 20 61 63 74 69 6f 6e 3d 22 2f 22     <form action="/"
     5fd:	20 6d 65 74 68 6f 64 3d 22 70 6f 73 74 22 3e 00      method="post">.

0000060d <_ZZL16printSendFullLoghhhE3__c>:
     60d:	4c 6f 67 20 65 6d 70 74 79 00                       Log empty.

00000617 <_ZZN9GB_Logger23getLogRecordDescriptionER9LogRecordE3__c_1>:
     617:	55 6e 6b 6e 6f 77 6e 00                             Unknown.

0000061f <_ZZN9GB_Logger23getLogRecordDescriptionER9LogRecordE3__c_0>:
     61f:	55 6e 6b 6e 6f 77 6e 20 65 72 72 6f 72 00           Unknown error.

0000062d <_ZZN9GB_Logger23getLogRecordDescriptionER9LogRecordE3__c>:
     62d:	55 6e 6b 6e 6f 77 6e 20 65 76 65 6e 74 00           Unknown event.

0000063b <_ZZN15GB_SerialHelper22sendHttpNotFoundHeaderEhE3__c>:
     63b:	48 54 54 50 2f 31 2e 31 20 34 30 34 20 4e 6f 74     HTTP/1.1 404 Not
     64b:	20 46 6f 75 6e 64 0d 0a 43 6f 6e 6e 65 63 74 69      Found..Connecti
     65b:	6f 6e 3a 20 63 6c 6f 73 65 0d 0a 0d 0a 00           on: close.....

00000669 <_ZZN15GB_SerialHelper15closeConnectionEhE3__c>:
     669:	61 74 2b 63 6c 73 3d 00                             at+cls=.

00000671 <_ZZ5setupE3__c_9>:
     671:	66 6c 61 74 36 35 72 6f 75 74 65 72 00              flat65router.

0000067e <_ZZ5setupE3__c_8>:
     67e:	48 65 6c 6c 00                                      Hell.

00000683 <_ZZ5setupE3__c_7>:
     683:	47 72 6f 77 62 6f 78 20 73 75 63 63 65 73 73 66     Growbox successf
     693:	75 6c 6c 79 20 73 74 61 72 74 65 64 00              ully started.

000006a0 <_ZZ5setupE3__c_6>:
     6a0:	73 74 6f 72 61 67 65 00                             storage.

000006a8 <_ZZ5setupE3__c_5>:
     6a8:	74 65 72 6d 6f 6d 65 74 65 72 00                    termometer.

000006b3 <_ZZ5setupE3__c_4>:
     6b3:	63 6c 6f 63 6b 00                                   clock.

000006b9 <_ZZ5setupE3__c_1>:
     6b9:	6e 6f 74 20 61 6c 6c 20 45 76 65 6e 74 73 20 69     not all Events i
     6c9:	6e 69 74 69 61 6c 69 7a 65 64 00                    nitialized.

000006d4 <_ZZ5setupE3__c_0>:
     6d4:	6e 6f 74 20 61 6c 6c 20 45 72 72 6f 72 73 20 69     not all Errors i
     6e4:	6e 69 74 69 61 6c 69 7a 65 64 00                    nitialized.

000006ef <_ZZ5setupE3__c>:
     6ef:	73 6f 66 74 77 61 72 65 20 63 6f 6e 66 69 67 75     software configu
     6ff:	72 61 74 69 6f 6e 00                                ration.

00000706 <_ZZL21printFatalErrorOnBootPK19__FlashStringHelperE3__c>:
     706:	46 61 74 61 6c 20 65 72 72 6f 72 3a 20 00           Fatal error: .

00000714 <_ZZL17printStatusOnBootPK19__FlashStringHelperE3__c_0>:
     714:	2e 2e 2e 00                                         ....

00000718 <_ZZL17printStatusOnBootPK19__FlashStringHelperE3__c>:
     718:	43 68 65 63 6b 69 6e 67 20 00                       Checking .

00000722 <_ZZ15initLoggerModelvE3__c_14>:
     722:	55 6e 6b 6e 6f 77 6e 20 73 65 72 69 61 6c 20 63     Unknown serial c
     732:	6f 6d 6d 61 6e 64 00                                ommand.

00000739 <_ZZ15initLoggerModelvE3__c_13>:
     739:	46 41 4e 20 74 75 72 6e 65 64 20 4f 4e 20 4d 41     FAN turned ON MA
     749:	58 20 73 70 65 65 64 00                             X speed.

00000751 <_ZZ15initLoggerModelvE3__c_12>:
     751:	46 41 4e 20 74 75 72 6e 65 64 20 4f 4e 20 4d 49     FAN turned ON MI
     761:	4e 20 73 70 65 65 64 00                             N speed.

00000769 <_ZZ15initLoggerModelvE3__c_11>:
     769:	46 41 4e 20 74 75 72 6e 65 64 20 4f 46 46 00        FAN turned OFF.

00000778 <_ZZ15initLoggerModelvE3__c_10>:
     778:	4c 49 47 48 54 20 74 75 72 6e 65 64 20 4f 4e 00     LIGHT turned ON.

00000788 <_ZZ15initLoggerModelvE3__c_9>:
     788:	4c 49 47 48 54 20 74 75 72 6e 65 64 20 4f 46 46     LIGHT turned OFF
	...

00000799 <_ZZ15initLoggerModelvE3__c_8>:
     799:	47 72 6f 77 62 6f 78 20 73 77 69 74 63 68 65 64     Growbox switched
     7a9:	20 74 6f 20 4e 49 47 48 54 20 6d 6f 64 65 00         to NIGHT mode.

000007b8 <_ZZ15initLoggerModelvE3__c_7>:
     7b8:	47 72 6f 77 62 6f 78 20 73 77 69 74 63 68 65 64     Growbox switched
     7c8:	20 74 6f 20 44 41 59 20 6d 6f 64 65 00               to DAY mode.

000007d5 <_ZZ15initLoggerModelvE3__c_6>:
     7d5:	52 45 53 54 41 52 54 45 44 00                       RESTARTED.

000007df <_ZZ15initLoggerModelvE3__c_5>:
     7df:	46 49 52 53 54 20 53 54 41 52 54 55 50 00           FIRST STARTUP.

000007ed <_ZZ15initLoggerModelvE3__c_4>:
     7ed:	45 72 72 6f 72 3a 20 4d 65 6d 6f 72 79 20 72 65     Error: Memory re
     7fd:	6d 61 69 6e 65 64 20 6c 65 73 73 20 32 30 30 20     mained less 200 
     80d:	62 79 74 65 73 00                                   bytes.

00000813 <_ZZ15initLoggerModelvE3__c_3>:
     813:	45 72 72 6f 72 3a 20 54 65 72 6d 6f 6d 65 74 65     Error: Termomete
     823:	72 20 72 65 74 75 72 6e 65 64 20 43 52 49 54 49     r returned CRITI
     833:	43 41 4c 20 76 61 6c 75 65 00                       CAL value.

0000083d <_ZZ15initLoggerModelvE3__c_2>:
     83d:	45 72 72 6f 72 3a 20 54 65 72 6d 6f 6d 65 74 65     Error: Termomete
     84d:	72 20 72 65 74 75 72 6e 65 64 20 5a 45 52 4f 20     r returned ZERO 
     85d:	76 61 6c 75 65 00                                   value.

00000863 <_ZZ15initLoggerModelvE3__c_1>:
     863:	45 72 72 6f 72 3a 20 54 65 72 6d 6f 6d 65 74 65     Error: Termomete
     873:	72 20 64 69 73 63 6f 6e 6e 65 63 74 65 64 00        r disconnected.

00000882 <_ZZ15initLoggerModelvE3__c_0>:
     882:	45 72 72 6f 72 3a 20 54 69 6d 65 72 20 6e 65 65     Error: Timer nee
     892:	64 73 20 73 79 6e 63 00                             ds sync.

0000089a <_ZZ15initLoggerModelvE3__c>:
     89a:	45 72 72 6f 72 3a 20 54 69 6d 65 72 20 6e 6f 74     Error: Timer not
     8aa:	20 73 65 74 00                                       set.

000008af <_ZL20S_WIFI_at_recv_data_>:
     8af:	61 74 2b 72 65 63 76 5f 64 61 74 61 3d 00           at+recv_data=.

000008bd <_ZL20S_WIFI_at_recv_data_>:
     8bd:	61 74 2b 72 65 63 76 5f 64 61 74 61 3d 00           at+recv_data=.

000008cb <_ZL11dscrc_table>:
     8cb:	00 5e bc e2 61 3f dd 83 c2 9c 7e 20 a3 fd 1f 41     .^..a?....~ ...A
     8db:	9d c3 21 7f fc a2 40 1e 5f 01 e3 bd 3e 60 82 dc     ..!...@._...>`..
     8eb:	23 7d 9f c1 42 1c fe a0 e1 bf 5d 03 80 de 3c 62     #}..B.....]...<b
     8fb:	be e0 02 5c df 81 63 3d 7c 22 c0 9e 1d 43 a1 ff     ...\..c=|"...C..
     90b:	46 18 fa a4 27 79 9b c5 84 da 38 66 e5 bb 59 07     F...'y....8f..Y.
     91b:	db 85 67 39 ba e4 06 58 19 47 a5 fb 78 26 c4 9a     ..g9...X.G..x&..
     92b:	65 3b d9 87 04 5a b8 e6 a7 f9 1b 45 c6 98 7a 24     e;...Z.....E..z$
     93b:	f8 a6 44 1a 99 c7 25 7b 3a 64 86 d8 5b 05 e7 b9     ..D...%{:d..[...
     94b:	8c d2 30 6e ed b3 51 0f 4e 10 f2 ac 2f 71 93 cd     ..0n..Q.N.../q..
     95b:	11 4f ad f3 70 2e cc 92 d3 8d 6f 31 b2 ec 0e 50     .O..p.....o1...P
     96b:	af f1 13 4d ce 90 72 2c 6d 33 d1 8f 0c 52 b0 ee     ...M..r,m3...R..
     97b:	32 6c 8e d0 53 0d ef b1 f0 ae 4c 12 91 cf 2d 73     2l..S.....L...-s
     98b:	ca 94 76 28 ab f5 17 49 08 56 b4 ea 69 37 d5 8b     ..v(...I.V..i7..
     99b:	57 09 eb b5 36 68 8a d4 95 cb 29 77 f4 aa 48 16     W...6h....)w..H.
     9ab:	e9 b7 55 0b 88 d6 34 6a 2b 75 97 c9 4a 14 f6 a8     ..U...4j+u..J...
     9bb:	74 2a c8 96 15 4b a9 f7 b6 e8 0a 54 d7 89 6b 35     t*...K.....T..k5

000009cb <port_to_mode_PGM>:
     9cb:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000009d5 <port_to_output_PGM>:
     9d5:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000009df <port_to_input_PGM>:
     9df:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000009e9 <digital_pin_to_port_PGM>:
     9e9:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     9f9:	03 03 03 03                                         ....

000009fd <digital_pin_to_bit_mask_PGM>:
     9fd:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     a0d:	04 08 10 20                                         ... 

00000a11 <digital_pin_to_timer_PGM>:
     a11:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     a21:	00 00 00 00 00                                      .....

00000a26 <__ctors_start>:
     a26:	a7 05       	cpc	r26, r7
     a28:	f5 05       	cpc	r31, r5
     a2a:	b1 1d       	adc	r27, r1
     a2c:	8b 1e       	adc	r8, r27
     a2e:	92 1e       	adc	r9, r18
     a30:	07 22       	and	r0, r23
     a32:	8b 25       	eor	r24, r11
     a34:	5f 29       	or	r21, r15
     a36:	e6 33       	cpi	r30, 0x36	; 54

00000a38 <__ctors_end>:
     a38:	84 1e       	adc	r8, r20

00000a3a <__dtors_end>:
     a3a:	11 24       	eor	r1, r1
     a3c:	1f be       	out	0x3f, r1	; 63
     a3e:	cf ef       	ldi	r28, 0xFF	; 255
     a40:	d8 e0       	ldi	r29, 0x08	; 8
     a42:	de bf       	out	0x3e, r29	; 62
     a44:	cd bf       	out	0x3d, r28	; 61

00000a46 <__do_copy_data>:
     a46:	11 e0       	ldi	r17, 0x01	; 1
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b1 e0       	ldi	r27, 0x01	; 1
     a4c:	ea e0       	ldi	r30, 0x0A	; 10
     a4e:	f9 e7       	ldi	r31, 0x79	; 121
     a50:	02 c0       	rjmp	.+4      	; 0xa56 <.do_copy_data_start>

00000a52 <.do_copy_data_loop>:
     a52:	05 90       	lpm	r0, Z+
     a54:	0d 92       	st	X+, r0

00000a56 <.do_copy_data_start>:
     a56:	ac 33       	cpi	r26, 0x3C	; 60
     a58:	b1 07       	cpc	r27, r17
     a5a:	d9 f7       	brne	.-10     	; 0xa52 <.do_copy_data_loop>

00000a5c <__do_clear_bss>:
     a5c:	13 e0       	ldi	r17, 0x03	; 3
     a5e:	ac e3       	ldi	r26, 0x3C	; 60
     a60:	b1 e0       	ldi	r27, 0x01	; 1
     a62:	01 c0       	rjmp	.+2      	; 0xa66 <.do_clear_bss_start>

00000a64 <.do_clear_bss_loop>:
     a64:	1d 92       	st	X+, r1

00000a66 <.do_clear_bss_start>:
     a66:	a4 3e       	cpi	r26, 0xE4	; 228
     a68:	b1 07       	cpc	r27, r17
     a6a:	e1 f7       	brne	.-8      	; 0xa64 <.do_clear_bss_loop>

00000a6c <__do_global_ctors>:
     a6c:	1a e0       	ldi	r17, 0x0A	; 10
     a6e:	c8 e3       	ldi	r28, 0x38	; 56
     a70:	da e0       	ldi	r29, 0x0A	; 10
     a72:	04 c0       	rjmp	.+8      	; 0xa7c <.do_global_ctors_start>

00000a74 <.do_global_ctors_loop>:
     a74:	22 97       	sbiw	r28, 0x02	; 2
     a76:	fe 01       	movw	r30, r28
     a78:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <__tablejump__>

00000a7c <.do_global_ctors_start>:
     a7c:	c6 32       	cpi	r28, 0x26	; 38
     a7e:	d1 07       	cpc	r29, r17
     a80:	c9 f7       	brne	.-14     	; 0xa74 <.do_global_ctors_loop>
     a82:	0e 94 3c 34 	call	0x6878	; 0x6878 <main>
     a86:	0c 94 78 3c 	jmp	0x78f0	; 0x78f0 <__do_global_dtors>

00000a8a <__bad_interrupt>:
     a8a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000a8e <strlen_P>:
     a8e:	fc 01       	movw	r30, r24
     a90:	05 90       	lpm	r0, Z+
     a92:	00 20       	and	r0, r0
     a94:	e9 f7       	brne	.-6      	; 0xa90 <strlen_P+0x2>
     a96:	80 95       	com	r24
     a98:	90 95       	com	r25
     a9a:	8e 0f       	add	r24, r30
     a9c:	9f 1f       	adc	r25, r31
     a9e:	08 95       	ret

00000aa0 <memcpy>:
     aa0:	fb 01       	movw	r30, r22
     aa2:	dc 01       	movw	r26, r24
     aa4:	02 c0       	rjmp	.+4      	; 0xaaa <memcpy+0xa>
     aa6:	01 90       	ld	r0, Z+
     aa8:	0d 92       	st	X+, r0
     aaa:	41 50       	subi	r20, 0x01	; 1
     aac:	50 40       	sbci	r21, 0x00	; 0
     aae:	d8 f7       	brcc	.-10     	; 0xaa6 <memcpy+0x6>
     ab0:	08 95       	ret

00000ab2 <strcpy>:
     ab2:	fb 01       	movw	r30, r22
     ab4:	dc 01       	movw	r26, r24
     ab6:	01 90       	ld	r0, Z+
     ab8:	0d 92       	st	X+, r0
     aba:	00 20       	and	r0, r0
     abc:	e1 f7       	brne	.-8      	; 0xab6 <strcpy+0x4>
     abe:	08 95       	ret

00000ac0 <itoa>:
     ac0:	fb 01       	movw	r30, r22
     ac2:	9f 01       	movw	r18, r30
     ac4:	e8 94       	clt
     ac6:	42 30       	cpi	r20, 0x02	; 2
     ac8:	c4 f0       	brlt	.+48     	; 0xafa <itoa+0x3a>
     aca:	45 32       	cpi	r20, 0x25	; 37
     acc:	b4 f4       	brge	.+44     	; 0xafa <itoa+0x3a>
     ace:	4a 30       	cpi	r20, 0x0A	; 10
     ad0:	29 f4       	brne	.+10     	; 0xadc <itoa+0x1c>
     ad2:	97 fb       	bst	r25, 7
     ad4:	1e f4       	brtc	.+6      	; 0xadc <itoa+0x1c>
     ad6:	90 95       	com	r25
     ad8:	81 95       	neg	r24
     ada:	9f 4f       	sbci	r25, 0xFF	; 255
     adc:	64 2f       	mov	r22, r20
     ade:	77 27       	eor	r23, r23
     ae0:	0e 94 21 3c 	call	0x7842	; 0x7842 <__udivmodhi4>
     ae4:	80 5d       	subi	r24, 0xD0	; 208
     ae6:	8a 33       	cpi	r24, 0x3A	; 58
     ae8:	0c f0       	brlt	.+2      	; 0xaec <itoa+0x2c>
     aea:	89 5d       	subi	r24, 0xD9	; 217
     aec:	81 93       	st	Z+, r24
     aee:	cb 01       	movw	r24, r22
     af0:	00 97       	sbiw	r24, 0x00	; 0
     af2:	a1 f7       	brne	.-24     	; 0xadc <itoa+0x1c>
     af4:	16 f4       	brtc	.+4      	; 0xafa <itoa+0x3a>
     af6:	5d e2       	ldi	r21, 0x2D	; 45
     af8:	51 93       	st	Z+, r21
     afa:	10 82       	st	Z, r1
     afc:	c9 01       	movw	r24, r18
     afe:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <strrev>

00000b02 <utoa>:
     b02:	fb 01       	movw	r30, r22
     b04:	9f 01       	movw	r18, r30
     b06:	42 30       	cpi	r20, 0x02	; 2
     b08:	74 f0       	brlt	.+28     	; 0xb26 <utoa+0x24>
     b0a:	45 32       	cpi	r20, 0x25	; 37
     b0c:	64 f4       	brge	.+24     	; 0xb26 <utoa+0x24>
     b0e:	64 2f       	mov	r22, r20
     b10:	77 27       	eor	r23, r23
     b12:	0e 94 21 3c 	call	0x7842	; 0x7842 <__udivmodhi4>
     b16:	80 5d       	subi	r24, 0xD0	; 208
     b18:	8a 33       	cpi	r24, 0x3A	; 58
     b1a:	0c f0       	brlt	.+2      	; 0xb1e <utoa+0x1c>
     b1c:	89 5d       	subi	r24, 0xD9	; 217
     b1e:	81 93       	st	Z+, r24
     b20:	cb 01       	movw	r24, r22
     b22:	00 97       	sbiw	r24, 0x00	; 0
     b24:	a1 f7       	brne	.-24     	; 0xb0e <utoa+0xc>
     b26:	10 82       	st	Z, r1
     b28:	c9 01       	movw	r24, r18
     b2a:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <strrev>

00000b2e <strrev>:
     b2e:	dc 01       	movw	r26, r24
     b30:	fc 01       	movw	r30, r24
     b32:	67 2f       	mov	r22, r23
     b34:	71 91       	ld	r23, Z+
     b36:	77 23       	and	r23, r23
     b38:	e1 f7       	brne	.-8      	; 0xb32 <strrev+0x4>
     b3a:	32 97       	sbiw	r30, 0x02	; 2
     b3c:	04 c0       	rjmp	.+8      	; 0xb46 <strrev+0x18>
     b3e:	7c 91       	ld	r23, X
     b40:	6d 93       	st	X+, r22
     b42:	70 83       	st	Z, r23
     b44:	62 91       	ld	r22, -Z
     b46:	ae 17       	cp	r26, r30
     b48:	bf 07       	cpc	r27, r31
     b4a:	c8 f3       	brcs	.-14     	; 0xb3e <strrev+0x10>
     b4c:	08 95       	ret

00000b4e <_GLOBAL__I_g_oneWirePin>:
#include "Global.h"

// Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)
OneWire g_oneWirePin(ONE_WIRE_PIN);
     b4e:	8c e3       	ldi	r24, 0x3C	; 60
     b50:	91 e0       	ldi	r25, 0x01	; 1
     b52:	68 e0       	ldi	r22, 0x08	; 8
     b54:	0e 94 49 2b 	call	0x5692	; 0x5692 <_ZN7OneWireC1Eh>

boolean g_isGrowboxStarted = false;
     b58:	08 95       	ret

00000b5a <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord>:
    out += ' '; 
    return out;
  }

  static const __FlashStringHelper* getLogRecordDescription(LogRecord &logRecord) {
    byte data = (logRecord.data & B00111111);   
     b5a:	fc 01       	movw	r30, r24
     b5c:	24 81       	ldd	r18, Z+4	; 0x04
     b5e:	42 2f       	mov	r20, r18
     b60:	4f 73       	andi	r20, 0x3F	; 63

    return out;
  }

  static boolean isEvent(const LogRecord &logRecord){
    return (logRecord.data & B11000000) == B00000000;
     b62:	82 2f       	mov	r24, r18
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	80 7c       	andi	r24, 0xC0	; 192
     b68:	90 70       	andi	r25, 0x00	; 0
    return out;
  }

  static const __FlashStringHelper* getLogRecordDescription(LogRecord &logRecord) {
    byte data = (logRecord.data & B00111111);   
    if (isEvent(logRecord)){
     b6a:	00 97       	sbiw	r24, 0x00	; 0
     b6c:	91 f4       	brne	.+36     	; 0xb92 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x38>
  static Event* findByIndex(byte index){
    //Serial.print("search ev: ");    
    //Serial.println(index);
    // Serial.print("lastAddedEvent ev: ");
    //Serial.println(lastAddedEvent->description);
    Event* currentItemPtr = lastAddedEvent;
     b6e:	e0 91 51 01 	lds	r30, 0x0151
     b72:	f0 91 52 01 	lds	r31, 0x0152
     b76:	07 c0       	rjmp	.+14     	; 0xb86 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x2c>
    while (currentItemPtr != 0){
      //Serial.println(currentItemPtr->description);
      if (currentItemPtr->index == index) {
     b78:	82 81       	ldd	r24, Z+2	; 0x02
     b7a:	84 17       	cp	r24, r20
     b7c:	39 f0       	breq	.+14     	; 0xb8c <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x32>
        return currentItemPtr;
      }
      currentItemPtr = (Event*)currentItemPtr->nextEvent;
     b7e:	80 81       	ld	r24, Z
     b80:	91 81       	ldd	r25, Z+1	; 0x01
     b82:	9c 01       	movw	r18, r24
     b84:	f9 01       	movw	r30, r18
    //Serial.print("search ev: ");    
    //Serial.println(index);
    // Serial.print("lastAddedEvent ev: ");
    //Serial.println(lastAddedEvent->description);
    Event* currentItemPtr = lastAddedEvent;
    while (currentItemPtr != 0){
     b86:	30 97       	sbiw	r30, 0x00	; 0
     b88:	b9 f7       	brne	.-18     	; 0xb78 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x1e>
     b8a:	29 c0       	rjmp	.+82     	; 0xbde <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x84>
      Event* foundItemPtr = Event::findByIndex(data);
      if (foundItemPtr == 0){
        return F("Unknown event");
      } 
      else {
        return foundItemPtr->description;
     b8c:	23 81       	ldd	r18, Z+3	; 0x03
     b8e:	34 81       	ldd	r19, Z+4	; 0x04
     b90:	24 c0       	rjmp	.+72     	; 0xbda <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x80>
      }
    } 
    else if (isTemperature(logRecord)){
     b92:	80 3c       	cpi	r24, 0xC0	; 192
     b94:	91 05       	cpc	r25, r1
     b96:	19 f4       	brne	.+6      	; 0xb9e <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x44>
      return FS(S_Temperature);
     b98:	2b e8       	ldi	r18, 0x8B	; 139
     b9a:	32 e0       	ldi	r19, 0x02	; 2
     b9c:	1e c0       	rjmp	.+60     	; 0xbda <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x80>
    } 
    else if (isError(logRecord)){    
     b9e:	80 34       	cpi	r24, 0x40	; 64
     ba0:	91 05       	cpc	r25, r1
     ba2:	c9 f4       	brne	.+50     	; 0xbd6 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x7c>
      byte sequence = (data & B00001111); 
     ba4:	52 2f       	mov	r21, r18
     ba6:	5f 70       	andi	r21, 0x0F	; 15
      byte sequenceSize = (data & B00110000)>>4; 
     ba8:	42 95       	swap	r20
     baa:	4f 70       	andi	r20, 0x0F	; 15
    this->sequenceSize = sequenceSize;
    this->description = description;
  }
  
  static Error* findByIndex(byte sequence, byte sequenceSize){
    Error* currentItemPtr = lastAddedItem;
     bac:	e0 91 4f 01 	lds	r30, 0x014F
     bb0:	f0 91 50 01 	lds	r31, 0x0150
     bb4:	0a c0       	rjmp	.+20     	; 0xbca <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x70>
    while (currentItemPtr != 0){
      if (currentItemPtr->sequence == sequence && currentItemPtr->sequenceSize == sequenceSize) {
     bb6:	82 81       	ldd	r24, Z+2	; 0x02
     bb8:	85 17       	cp	r24, r21
     bba:	19 f4       	brne	.+6      	; 0xbc2 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x68>
     bbc:	83 81       	ldd	r24, Z+3	; 0x03
     bbe:	84 17       	cp	r24, r20
     bc0:	39 f0       	breq	.+14     	; 0xbd0 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x76>
        return currentItemPtr;
      }
      currentItemPtr = (Error*)currentItemPtr->nextError;
     bc2:	80 81       	ld	r24, Z
     bc4:	91 81       	ldd	r25, Z+1	; 0x01
     bc6:	9c 01       	movw	r18, r24
     bc8:	f9 01       	movw	r30, r18
    this->description = description;
  }
  
  static Error* findByIndex(byte sequence, byte sequenceSize){
    Error* currentItemPtr = lastAddedItem;
    while (currentItemPtr != 0){
     bca:	30 97       	sbiw	r30, 0x00	; 0
     bcc:	a1 f7       	brne	.-24     	; 0xbb6 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x5c>
     bce:	0a c0       	rjmp	.+20     	; 0xbe4 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x8a>
      Error* foundItemPtr = Error::findByIndex(sequence, sequenceSize);
      if (foundItemPtr == 0){
        return F("Unknown error");
      } 
      else {
        return foundItemPtr->description;
     bd0:	24 81       	ldd	r18, Z+4	; 0x04
     bd2:	35 81       	ldd	r19, Z+5	; 0x05
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x80>
      }
    } 
    else {
      return F("Unknown");
     bd6:	27 e1       	ldi	r18, 0x17	; 23
     bd8:	36 e0       	ldi	r19, 0x06	; 6
    }
  }
     bda:	c9 01       	movw	r24, r18
     bdc:	08 95       	ret
  static const __FlashStringHelper* getLogRecordDescription(LogRecord &logRecord) {
    byte data = (logRecord.data & B00111111);   
    if (isEvent(logRecord)){
      Event* foundItemPtr = Event::findByIndex(data);
      if (foundItemPtr == 0){
        return F("Unknown event");
     bde:	2d e2       	ldi	r18, 0x2D	; 45
     be0:	36 e0       	ldi	r19, 0x06	; 6
     be2:	fb cf       	rjmp	.-10     	; 0xbda <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x80>
    else if (isError(logRecord)){    
      byte sequence = (data & B00001111); 
      byte sequenceSize = (data & B00110000)>>4; 
      Error* foundItemPtr = Error::findByIndex(sequence, sequenceSize);
      if (foundItemPtr == 0){
        return F("Unknown error");
     be4:	2f e1       	ldi	r18, 0x1F	; 31
     be6:	36 e0       	ldi	r19, 0x06	; 6
     be8:	f8 cf       	rjmp	.-16     	; 0xbda <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x80>

00000bea <_GLOBAL__I_g_isDayInGrowbox>:
enum HTTP_TAG {
  HTTP_TAG_OPEN, HTTP_TAG_CLOSED, HTTP_TAG_SINGLE
};

static int flashStringLength(const char PROGMEM* pstr){ 
  return strlen_P(pstr);
     bea:	88 e6       	ldi	r24, 0x68	; 104
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 47 05 	call	0xa8e	; 0xa8e <strlen_P>
const char S_WIFI_RESPONSE_OK[] PROGMEM  = "OK";
const char S_WIFI_GET_[] PROGMEM  = "GET /";
const char S_WIFI_POST_[] PROGMEM  = "POST /"; 
const char S_WIFI_at_recv_data_ [] PROGMEM  = "at+recv_data="; 

const size_t SLENGTH_WIFI_at_recv_data_ = flashStringLength(S_WIFI_at_recv_data_);
     bf2:	90 93 4e 01 	sts	0x014E, r25
     bf6:	80 93 4d 01 	sts	0x014D, r24
     bfa:	08 95       	ret

00000bfc <_ZL17flashStringCharAtPKcih>:
}

static char flashStringCharAt(const char PROGMEM* pstr, int index, boolean checkOverflow = true){ 
     bfc:	0f 93       	push	r16
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	ec 01       	movw	r28, r24
     c06:	8b 01       	movw	r16, r22
  if (checkOverflow){
     c08:	44 23       	and	r20, r20
     c0a:	39 f0       	breq	.+14     	; 0xc1a <_ZL17flashStringCharAtPKcih+0x1e>
enum HTTP_TAG {
  HTTP_TAG_OPEN, HTTP_TAG_CLOSED, HTTP_TAG_SINGLE
};

static int flashStringLength(const char PROGMEM* pstr){ 
  return strlen_P(pstr);
     c0c:	0e 94 47 05 	call	0xa8e	; 0xa8e <strlen_P>
}

static char flashStringCharAt(const char PROGMEM* pstr, int index, boolean checkOverflow = true){ 
  if (checkOverflow){
    if (index >= flashStringLength(pstr)){
     c10:	08 17       	cp	r16, r24
     c12:	19 07       	cpc	r17, r25
     c14:	14 f0       	brlt	.+4      	; 0xc1a <_ZL17flashStringCharAtPKcih+0x1e>
     c16:	8f ef       	ldi	r24, 0xFF	; 255
     c18:	04 c0       	rjmp	.+8      	; 0xc22 <_ZL17flashStringCharAtPKcih+0x26>
      return 0xFF; 
    }
  }
  return pgm_read_byte(pstr+index);
     c1a:	c0 0f       	add	r28, r16
     c1c:	d1 1f       	adc	r29, r17
     c1e:	fe 01       	movw	r30, r28
     c20:	84 91       	lpm	r24, Z+
}
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	1f 91       	pop	r17
     c28:	0f 91       	pop	r16
     c2a:	08 95       	ret

00000c2c <_ZN10GB_Storage5writeEjPKvh>:
    else {
      return 0xFF;
    }
  }

  static void write(word address, const void* data, const byte sizeofData) {
     c2c:	af 92       	push	r10
     c2e:	bf 92       	push	r11
     c30:	df 92       	push	r13
     c32:	ef 92       	push	r14
     c34:	ff 92       	push	r15
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	ec 01       	movw	r28, r24
     c40:	5b 01       	movw	r10, r22
     c42:	00 e0       	ldi	r16, 0x00	; 0
     c44:	10 e0       	ldi	r17, 0x00	; 0
    for (word c = 0; c < sizeofData; c++){
     c46:	e4 2e       	mov	r14, r20
     c48:	ff 24       	eor	r15, r15
     c4a:	2a c0       	rjmp	.+84     	; 0xca0 <_ZN10GB_Storage5writeEjPKvh+0x74>
      byte value = ((byte*)data)[c];
     c4c:	f5 01       	movw	r30, r10
     c4e:	e0 0f       	add	r30, r16
     c50:	f1 1f       	adc	r31, r17
     c52:	d0 80       	ld	r13, Z
      return true;
    return false;
  }

  static void write(const word address, const byte data) {
    if (address >= CAPACITY){
     c54:	80 e1       	ldi	r24, 0x10	; 16
     c56:	c0 30       	cpi	r28, 0x00	; 0
     c58:	d8 07       	cpc	r29, r24
     c5a:	f8 f4       	brcc	.+62     	; 0xc9a <_ZN10GB_Storage5writeEjPKvh+0x6e>
      return;
    }
    Wire.beginTransmission(AT24C32);
     c5c:	81 eb       	ldi	r24, 0xB1	; 177
     c5e:	92 e0       	ldi	r25, 0x02	; 2
     c60:	60 e5       	ldi	r22, 0x50	; 80
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((byte)(address >> 8)); // MSB
     c68:	81 eb       	ldi	r24, 0xB1	; 177
     c6a:	92 e0       	ldi	r25, 0x02	; 2
     c6c:	6d 2f       	mov	r22, r29
     c6e:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <_ZN7TwoWire5writeEh>
    Wire.write((byte)(address & 0xFF)); // LSB
     c72:	81 eb       	ldi	r24, 0xB1	; 177
     c74:	92 e0       	ldi	r25, 0x02	; 2
     c76:	6c 2f       	mov	r22, r28
     c78:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <_ZN7TwoWire5writeEh>
    Wire.write(data);
     c7c:	81 eb       	ldi	r24, 0xB1	; 177
     c7e:	92 e0       	ldi	r25, 0x02	; 2
     c80:	6d 2d       	mov	r22, r13
     c82:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <_ZN7TwoWire5writeEh>
    Wire.endTransmission();  
     c86:	81 eb       	ldi	r24, 0xB1	; 177
     c88:	92 e0       	ldi	r25, 0x02	; 2
     c8a:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <_ZN7TwoWire15endTransmissionEv>
    delay(10);  // http://www.hobbytronics.co.uk/arduino-external-eeprom
     c8e:	6a e0       	ldi	r22, 0x0A	; 10
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0e 94 40 30 	call	0x6080	; 0x6080 <delay>
      return 0xFF;
    }
  }

  static void write(word address, const void* data, const byte sizeofData) {
    for (word c = 0; c < sizeofData; c++){
     c9a:	0f 5f       	subi	r16, 0xFF	; 255
     c9c:	1f 4f       	sbci	r17, 0xFF	; 255
     c9e:	21 96       	adiw	r28, 0x01	; 1
     ca0:	0e 15       	cp	r16, r14
     ca2:	1f 05       	cpc	r17, r15
     ca4:	98 f2       	brcs	.-90     	; 0xc4c <_ZN10GB_Storage5writeEjPKvh+0x20>
      byte value = ((byte*)data)[c];
      write(address + c, value);
    }
  }
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	ff 90       	pop	r15
     cb0:	ef 90       	pop	r14
     cb2:	df 90       	pop	r13
     cb4:	bf 90       	pop	r11
     cb6:	af 90       	pop	r10
     cb8:	08 95       	ret

00000cba <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord>:

  /////////////////////////////////////////////////////////////////////
  //                            LOG RECORDS                          //
  /////////////////////////////////////////////////////////////////////

  static boolean storeLogRecord(LogRecord &logRecord){ 
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	ec 01       	movw	r28, r24
    boolean storeLog = g_isGrowboxStarted && isBootRecordCorrect() && bootRecord.boolPreferencies.isLoggerEnabled && GB_Storage::isPresent(); // TODO check in another places
     cc0:	80 91 4a 01 	lds	r24, 0x014A
     cc4:	88 23       	and	r24, r24
     cc6:	09 f4       	brne	.+2      	; 0xcca <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0x10>
     cc8:	52 c0       	rjmp	.+164    	; 0xd6e <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb4>
  }

private :

  static boolean isBootRecordCorrect(){ // TODO rename it
    return (bootRecord.first_magic == MAGIC_NUMBER) && (bootRecord.last_magic == MAGIC_NUMBER);
     cca:	80 91 c5 01 	lds	r24, 0x01C5
     cce:	90 91 c6 01 	lds	r25, 0x01C6
     cd2:	85 55       	subi	r24, 0x55	; 85
     cd4:	9a 4a       	sbci	r25, 0xAA	; 170
     cd6:	09 f0       	breq	.+2      	; 0xcda <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0x20>
     cd8:	4a c0       	rjmp	.+148    	; 0xd6e <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb4>
     cda:	80 91 e3 01 	lds	r24, 0x01E3
     cde:	90 91 e4 01 	lds	r25, 0x01E4
     ce2:	85 55       	subi	r24, 0x55	; 85
     ce4:	9a 4a       	sbci	r25, 0xAA	; 170
     ce6:	09 f0       	breq	.+2      	; 0xcea <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0x30>
     ce8:	42 c0       	rjmp	.+132    	; 0xd6e <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb4>
  /////////////////////////////////////////////////////////////////////
  //                            LOG RECORDS                          //
  /////////////////////////////////////////////////////////////////////

  static boolean storeLogRecord(LogRecord &logRecord){ 
    boolean storeLog = g_isGrowboxStarted && isBootRecordCorrect() && bootRecord.boolPreferencies.isLoggerEnabled && GB_Storage::isPresent(); // TODO check in another places
     cea:	80 91 d1 01 	lds	r24, 0x01D1
     cee:	86 95       	lsr	r24
     cf0:	83 70       	andi	r24, 0x03	; 3
     cf2:	e9 f1       	breq	.+122    	; 0xd6e <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb4>
  static const int AT24C32 = 0x50; // External EEPROM I2C address
public:
  static const word CAPACITY = 0x1000; // 4K byte = 32K bit

  static boolean isPresent(void) {     // check if the device is present
    Wire.beginTransmission(AT24C32);
     cf4:	81 eb       	ldi	r24, 0xB1	; 177
     cf6:	92 e0       	ldi	r25, 0x02	; 2
     cf8:	60 e5       	ldi	r22, 0x50	; 80
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <_ZN7TwoWire17beginTransmissionEi>
    if (Wire.endTransmission() == 0)
     d00:	81 eb       	ldi	r24, 0xB1	; 177
     d02:	92 e0       	ldi	r25, 0x02	; 2
     d04:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <_ZN7TwoWire15endTransmissionEv>
     d08:	88 23       	and	r24, r24
     d0a:	89 f5       	brne	.+98     	; 0xd6e <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb4>
    if (!storeLog){
      return false;
    }
    GB_Storage::write(bootRecord.nextLogRecordAddress, &logRecord, sizeof(LogRecord));
     d0c:	80 91 cf 01 	lds	r24, 0x01CF
     d10:	90 91 d0 01 	lds	r25, 0x01D0
     d14:	be 01       	movw	r22, r28
     d16:	45 e0       	ldi	r20, 0x05	; 5
     d18:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN10GB_Storage5writeEjPKvh>
  static boolean isBootRecordCorrect(){ // TODO rename it
    return (bootRecord.first_magic == MAGIC_NUMBER) && (bootRecord.last_magic == MAGIC_NUMBER);
  }

  static void increaseLogPointer(){
    bootRecord.nextLogRecordAddress += sizeof(LogRecord); 
     d1c:	80 91 cf 01 	lds	r24, 0x01CF
     d20:	90 91 d0 01 	lds	r25, 0x01D0
     d24:	05 96       	adiw	r24, 0x05	; 5
     d26:	90 93 d0 01 	sts	0x01D0, r25
     d2a:	80 93 cf 01 	sts	0x01CF, r24
    if (bootRecord.nextLogRecordAddress >= (sizeof(BootRecord) + LOG_RECORD_OVERFLOW_OFFSET)){
     d2e:	8c 5f       	subi	r24, 0xFC	; 252
     d30:	9f 40       	sbci	r25, 0x0F	; 15
     d32:	a0 f0       	brcs	.+40     	; 0xd5c <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xa2>
      bootRecord.nextLogRecordAddress = sizeof(BootRecord);
     d34:	80 e2       	ldi	r24, 0x20	; 32
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	90 93 d0 01 	sts	0x01D0, r25
     d3c:	80 93 cf 01 	sts	0x01CF, r24
      if (!bootRecord.boolPreferencies.isLogOverflow){
     d40:	80 91 d1 01 	lds	r24, 0x01D1
     d44:	80 fd       	sbrc	r24, 0
     d46:	0a c0       	rjmp	.+20     	; 0xd5c <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xa2>
        bootRecord.boolPreferencies.isLogOverflow = true;
     d48:	81 60       	ori	r24, 0x01	; 1
     d4a:	80 93 d1 01 	sts	0x01D1, r24
        GB_Storage::write(OFFSETOF(BootRecord, boolPreferencies), &(bootRecord.boolPreferencies), sizeof(bootRecord.boolPreferencies)); 
     d4e:	8c e0       	ldi	r24, 0x0C	; 12
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	61 ed       	ldi	r22, 0xD1	; 209
     d54:	71 e0       	ldi	r23, 0x01	; 1
     d56:	41 e0       	ldi	r20, 0x01	; 1
     d58:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN10GB_Storage5writeEjPKvh>
      }
    }
    GB_Storage::write(OFFSETOF(BootRecord, nextLogRecordAddress), &(bootRecord.nextLogRecordAddress), sizeof(bootRecord.nextLogRecordAddress)); 
     d5c:	8a e0       	ldi	r24, 0x0A	; 10
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	6f ec       	ldi	r22, 0xCF	; 207
     d62:	71 e0       	ldi	r23, 0x01	; 1
     d64:	42 e0       	ldi	r20, 0x02	; 2
     d66:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN10GB_Storage5writeEjPKvh>
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	01 c0       	rjmp	.+2      	; 0xd70 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb6>
    if (!storeLog){
      return false;
    }
    GB_Storage::write(bootRecord.nextLogRecordAddress, &logRecord, sizeof(LogRecord));
    increaseLogPointer();
    return true;
     d6e:	80 e0       	ldi	r24, 0x00	; 0
  }
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	08 95       	ret

00000d76 <_ZN10GB_Storage4readEj>:
    Wire.write(data);
    Wire.endTransmission();  
    delay(10);  // http://www.hobbytronics.co.uk/arduino-external-eeprom
  }

  static byte read(word address) {
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	8c 01       	movw	r16, r24
    Wire.beginTransmission(AT24C32);
     d7c:	81 eb       	ldi	r24, 0xB1	; 177
     d7e:	92 e0       	ldi	r25, 0x02	; 2
     d80:	60 e5       	ldi	r22, 0x50	; 80
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((byte)(address >> 8)); // MSB
     d88:	81 eb       	ldi	r24, 0xB1	; 177
     d8a:	92 e0       	ldi	r25, 0x02	; 2
     d8c:	61 2f       	mov	r22, r17
     d8e:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <_ZN7TwoWire5writeEh>
    Wire.write((byte)(address & 0xFF)); // LSB
     d92:	81 eb       	ldi	r24, 0xB1	; 177
     d94:	92 e0       	ldi	r25, 0x02	; 2
     d96:	60 2f       	mov	r22, r16
     d98:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <_ZN7TwoWire5writeEh>
    Wire.endTransmission();
     d9c:	81 eb       	ldi	r24, 0xB1	; 177
     d9e:	92 e0       	ldi	r25, 0x02	; 2
     da0:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <_ZN7TwoWire15endTransmissionEv>
    delay(10);  // http://www.hobbytronics.co.uk/arduino-external-eeprom
     da4:	6a e0       	ldi	r22, 0x0A	; 10
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	0e 94 40 30 	call	0x6080	; 0x6080 <delay>
    Wire.requestFrom(AT24C32, 1);
     db0:	81 eb       	ldi	r24, 0xB1	; 177
     db2:	92 e0       	ldi	r25, 0x02	; 2
     db4:	60 e5       	ldi	r22, 0x50	; 80
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	41 e0       	ldi	r20, 0x01	; 1
     dba:	50 e0       	ldi	r21, 0x00	; 0
     dbc:	0e 94 27 26 	call	0x4c4e	; 0x4c4e <_ZN7TwoWire11requestFromEii>
    if (Wire.available()) {
     dc0:	81 eb       	ldi	r24, 0xB1	; 177
     dc2:	92 e0       	ldi	r25, 0x02	; 2
     dc4:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <_ZN7TwoWire9availableEv>
     dc8:	89 2b       	or	r24, r25
     dca:	11 f4       	brne	.+4      	; 0xdd0 <_ZN10GB_Storage4readEj+0x5a>
     dcc:	8f ef       	ldi	r24, 0xFF	; 255
     dce:	04 c0       	rjmp	.+8      	; 0xdd8 <_ZN10GB_Storage4readEj+0x62>
      return Wire.read();
     dd0:	81 eb       	ldi	r24, 0xB1	; 177
     dd2:	92 e0       	ldi	r25, 0x02	; 2
     dd4:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <_ZN7TwoWire4readEv>
    } 
    else {
      return 0xFF;
    }
  }
     dd8:	1f 91       	pop	r17
     dda:	0f 91       	pop	r16
     ddc:	08 95       	ret

00000dde <_ZL15flashStringLoadPKc>:
    }
  }
  return true; 
}

static String flashStringLoad(const char PROGMEM* pstr){
     dde:	cf 92       	push	r12
     de0:	df 92       	push	r13
     de2:	ef 92       	push	r14
     de4:	ff 92       	push	r15
     de6:	0f 93       	push	r16
     de8:	1f 93       	push	r17
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	f8 2e       	mov	r15, r24
     df0:	e9 2e       	mov	r14, r25
     df2:	6b 01       	movw	r12, r22
enum HTTP_TAG {
  HTTP_TAG_OPEN, HTTP_TAG_CLOSED, HTTP_TAG_SINGLE
};

static int flashStringLength(const char PROGMEM* pstr){ 
  return strlen_P(pstr);
     df4:	cb 01       	movw	r24, r22
     df6:	0e 94 47 05 	call	0xa8e	; 0xa8e <strlen_P>
     dfa:	18 2f       	mov	r17, r24
     dfc:	09 2f       	mov	r16, r25
     dfe:	c8 2f       	mov	r28, r24
     e00:	d9 2f       	mov	r29, r25
}

static String flashStringLoad(const char PROGMEM* pstr){
  int length = flashStringLength(pstr);

  String str;
     e02:	8f 2d       	mov	r24, r15
     e04:	9e 2d       	mov	r25, r14
     e06:	60 e0       	ldi	r22, 0x00	; 0
     e08:	71 e0       	ldi	r23, 0x01	; 1
     e0a:	0e 94 07 38 	call	0x700e	; 0x700e <_ZN6StringC1EPKc>
  str.reserve(length);
     e0e:	8f 2d       	mov	r24, r15
     e10:	9e 2d       	mov	r25, r14
     e12:	61 2f       	mov	r22, r17
     e14:	70 2f       	mov	r23, r16
     e16:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <_ZN6String7reserveEj>
     e1a:	00 e0       	ldi	r16, 0x00	; 0
     e1c:	10 e0       	ldi	r17, 0x00	; 0
     e1e:	0c c0       	rjmp	.+24     	; 0xe38 <_ZL15flashStringLoadPKc+0x5a>
  for (int i = 0; i< length; i++){
    str += flashStringCharAt(pstr, i, false);
     e20:	c6 01       	movw	r24, r12
     e22:	b8 01       	movw	r22, r16
     e24:	40 e0       	ldi	r20, 0x00	; 0
     e26:	0e 94 fe 05 	call	0xbfc	; 0xbfc <_ZL17flashStringCharAtPKcih>
     e2a:	68 2f       	mov	r22, r24
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
     e2c:	8f 2d       	mov	r24, r15
     e2e:	9e 2d       	mov	r25, r14
     e30:	0e 94 a3 37 	call	0x6f46	; 0x6f46 <_ZN6String6concatEc>
static String flashStringLoad(const char PROGMEM* pstr){
  int length = flashStringLength(pstr);

  String str;
  str.reserve(length);
  for (int i = 0; i< length; i++){
     e34:	0f 5f       	subi	r16, 0xFF	; 255
     e36:	1f 4f       	sbci	r17, 0xFF	; 255
     e38:	0c 17       	cp	r16, r28
     e3a:	1d 07       	cpc	r17, r29
     e3c:	8c f3       	brlt	.-30     	; 0xe20 <_ZL15flashStringLoadPKc+0x42>
    str += flashStringCharAt(pstr, i, false);
  }
  return str; 
}
     e3e:	8f 2d       	mov	r24, r15
     e40:	9e 2d       	mov	r25, r14
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	1f 91       	pop	r17
     e48:	0f 91       	pop	r16
     e4a:	ff 90       	pop	r15
     e4c:	ef 90       	pop	r14
     e4e:	df 90       	pop	r13
     e50:	cf 90       	pop	r12
     e52:	08 95       	ret

00000e54 <_ZN13GB_PrintDirty6getHEXEhh>:
    }
    out += number;
    return out.substring(out.length()-numberOfDigits);
  }

  static String getHEX(byte number, boolean addPrefix = false){
     e54:	bf 92       	push	r11
     e56:	cf 92       	push	r12
     e58:	df 92       	push	r13
     e5a:	ef 92       	push	r14
     e5c:	ff 92       	push	r15
     e5e:	0f 93       	push	r16
     e60:	1f 93       	push	r17
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	6c 97       	sbiw	r28, 0x1c	; 28
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	cd bf       	out	0x3d, r28	; 61
     e76:	d8 2e       	mov	r13, r24
     e78:	c9 2e       	mov	r12, r25
     e7a:	16 2f       	mov	r17, r22
     e7c:	b4 2e       	mov	r11, r20
    String out(number, HEX);
     e7e:	40 e1       	ldi	r20, 0x10	; 16
     e80:	0e 94 3a 38 	call	0x7074	; 0x7074 <_ZN6StringC1Ehh>
    out.toUpperCase();
     e84:	8d 2d       	mov	r24, r13
     e86:	9c 2d       	mov	r25, r12
     e88:	0e 94 a1 36 	call	0x6d42	; 0x6d42 <_ZN6String11toUpperCaseEv>
    if(number < 0x10){
     e8c:	10 31       	cpi	r17, 0x10	; 16
     e8e:	f8 f4       	brcc	.+62     	; 0xece <_ZN13GB_PrintDirty6getHEXEhh+0x7a>
      out = String('0') + out;
     e90:	7e 01       	movw	r14, r28
     e92:	08 94       	sec
     e94:	e1 1c       	adc	r14, r1
     e96:	f1 1c       	adc	r15, r1
     e98:	c7 01       	movw	r24, r14
     e9a:	60 e3       	ldi	r22, 0x30	; 48
     e9c:	0e 94 6c 38 	call	0x70d8	; 0x70d8 <_ZN6StringC1Ec>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
     ea0:	8e 01       	movw	r16, r28
     ea2:	08 5f       	subi	r16, 0xF8	; 248
     ea4:	1f 4f       	sbci	r17, 0xFF	; 255
     ea6:	c8 01       	movw	r24, r16
     ea8:	b7 01       	movw	r22, r14
     eaa:	0e 94 ef 38 	call	0x71de	; 0x71de <_ZN6StringC2ERKS_>
     eae:	c8 01       	movw	r24, r16
     eb0:	6d 2d       	mov	r22, r13
     eb2:	7c 2d       	mov	r23, r12
     eb4:	0e 94 d0 37 	call	0x6fa0	; 0x6fa0 <_ZplRK15StringSumHelperRK6String>
     eb8:	bc 01       	movw	r22, r24
     eba:	8d 2d       	mov	r24, r13
     ebc:	9c 2d       	mov	r25, r12
     ebe:	0e 94 d8 38 	call	0x71b0	; 0x71b0 <_ZN6StringaSERKS_>
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
{
     ec2:	c8 01       	movw	r24, r16
     ec4:	0e 94 00 39 	call	0x7200	; 0x7200 <_ZN6StringD2Ev>
     ec8:	c7 01       	movw	r24, r14
     eca:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
    }
    if (addPrefix){
     ece:	bb 20       	and	r11, r11
     ed0:	09 f1       	breq	.+66     	; 0xf14 <_ZN13GB_PrintDirty6getHEXEhh+0xc0>
      out = flashStringLoad(S_0x) + out;
     ed2:	8f e0       	ldi	r24, 0x0F	; 15
     ed4:	e8 2e       	mov	r14, r24
     ed6:	f1 2c       	mov	r15, r1
     ed8:	ec 0e       	add	r14, r28
     eda:	fd 1e       	adc	r15, r29
     edc:	c7 01       	movw	r24, r14
     ede:	64 e8       	ldi	r22, 0x84	; 132
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZL15flashStringLoadPKc>
public:
	StringSumHelper(const String &s) : String(s) {}
     ee6:	8e 01       	movw	r16, r28
     ee8:	0a 5e       	subi	r16, 0xEA	; 234
     eea:	1f 4f       	sbci	r17, 0xFF	; 255
     eec:	c8 01       	movw	r24, r16
     eee:	b7 01       	movw	r22, r14
     ef0:	0e 94 ef 38 	call	0x71de	; 0x71de <_ZN6StringC2ERKS_>
     ef4:	c8 01       	movw	r24, r16
     ef6:	6d 2d       	mov	r22, r13
     ef8:	7c 2d       	mov	r23, r12
     efa:	0e 94 d0 37 	call	0x6fa0	; 0x6fa0 <_ZplRK15StringSumHelperRK6String>
     efe:	bc 01       	movw	r22, r24
     f00:	8d 2d       	mov	r24, r13
     f02:	9c 2d       	mov	r25, r12
     f04:	0e 94 d8 38 	call	0x71b0	; 0x71b0 <_ZN6StringaSERKS_>
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
{
     f08:	c8 01       	movw	r24, r16
     f0a:	0e 94 00 39 	call	0x7200	; 0x7200 <_ZN6StringD2Ev>
     f0e:	c7 01       	movw	r24, r14
     f10:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
    }
    return out;
  }
     f14:	8d 2d       	mov	r24, r13
     f16:	9c 2d       	mov	r25, r12
     f18:	6c 96       	adiw	r28, 0x1c	; 28
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	cd bf       	out	0x3d, r28	; 61
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	1f 91       	pop	r17
     f2a:	0f 91       	pop	r16
     f2c:	ff 90       	pop	r15
     f2e:	ef 90       	pop	r14
     f30:	df 90       	pop	r13
     f32:	cf 90       	pop	r12
     f34:	bf 90       	pop	r11
     f36:	08 95       	ret

00000f38 <_ZN13GB_PrintDirty8printHEXEhh>:
  // utility function for digital clock display: prints preceding colon and leading 0
  static void print2digits(byte number){
    Serial.print(getFixedDigitsString(number, 2));
  }

  static void printHEX(byte number, boolean addPrefix = false){
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	27 97       	sbiw	r28, 0x07	; 7
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	68 2f       	mov	r22, r24
    Serial.print(getHEX(number));
     f52:	8e 01       	movw	r16, r28
     f54:	0f 5f       	subi	r16, 0xFF	; 255
     f56:	1f 4f       	sbci	r17, 0xFF	; 255
     f58:	c8 01       	movw	r24, r16
     f5a:	40 e0       	ldi	r20, 0x00	; 0
     f5c:	0e 94 2a 07 	call	0xe54	; 0xe54 <_ZN13GB_PrintDirty6getHEXEhh>
     f60:	8d eb       	ldi	r24, 0xBD	; 189
     f62:	93 e0       	ldi	r25, 0x03	; 3
     f64:	b8 01       	movw	r22, r16
     f66:	0e 94 f8 35 	call	0x6bf0	; 0x6bf0 <_ZN5Print5printERK6String>
     f6a:	c8 01       	movw	r24, r16
     f6c:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
  }
     f70:	27 96       	adiw	r28, 0x07	; 7
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	cd bf       	out	0x3d, r28	; 61
     f7c:	cf 91       	pop	r28
     f7e:	df 91       	pop	r29
     f80:	1f 91       	pop	r17
     f82:	0f 91       	pop	r16
     f84:	08 95       	ret

00000f86 <_ZL21flashStringStartsWithRK6StringPKc>:
    return false;
  }
  return strncmp_P(cstr, pstr, cstr_length); // check this method
}

static boolean flashStringStartsWith(const String &str, const char PROGMEM* pstr){ 
     f86:	af 92       	push	r10
     f88:	bf 92       	push	r11
     f8a:	cf 92       	push	r12
     f8c:	df 92       	push	r13
     f8e:	ef 92       	push	r14
     f90:	ff 92       	push	r15
     f92:	1f 93       	push	r17
     f94:	cf 93       	push	r28
     f96:	df 93       	push	r29
     f98:	5c 01       	movw	r10, r24
     f9a:	6b 01       	movw	r12, r22
enum HTTP_TAG {
  HTTP_TAG_OPEN, HTTP_TAG_CLOSED, HTTP_TAG_SINGLE
};

static int flashStringLength(const char PROGMEM* pstr){ 
  return strlen_P(pstr);
     f9c:	cb 01       	movw	r24, r22
     f9e:	0e 94 47 05 	call	0xa8e	; 0xa8e <strlen_P>
     fa2:	7c 01       	movw	r14, r24
  return strncmp_P(cstr, pstr, cstr_length); // check this method
}

static boolean flashStringStartsWith(const String &str, const char PROGMEM* pstr){ 
  int length = flashStringLength(pstr);
  if (length > str.length()) {
     fa4:	f5 01       	movw	r30, r10
     fa6:	84 81       	ldd	r24, Z+4	; 0x04
     fa8:	95 81       	ldd	r25, Z+5	; 0x05
     faa:	8e 15       	cp	r24, r14
     fac:	9f 05       	cpc	r25, r15
     fae:	a8 f0       	brcs	.+42     	; 0xfda <_ZL21flashStringStartsWithRK6StringPKc+0x54>
     fb0:	c0 e0       	ldi	r28, 0x00	; 0
     fb2:	d0 e0       	ldi	r29, 0x00	; 0
     fb4:	0d c0       	rjmp	.+26     	; 0xfd0 <_ZL21flashStringStartsWithRK6StringPKc+0x4a>
    return false; 
  }
  for (int i = 0; i < length; i++){
    if (flashStringCharAt(pstr, i, false) != str[i]){
     fb6:	c6 01       	movw	r24, r12
     fb8:	be 01       	movw	r22, r28
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	0e 94 fe 05 	call	0xbfc	; 0xbfc <_ZL17flashStringCharAtPKcih>
     fc0:	18 2f       	mov	r17, r24
     fc2:	c5 01       	movw	r24, r10
     fc4:	be 01       	movw	r22, r28
     fc6:	0e 94 90 36 	call	0x6d20	; 0x6d20 <_ZNK6StringixEj>
     fca:	18 17       	cp	r17, r24
     fcc:	31 f4       	brne	.+12     	; 0xfda <_ZL21flashStringStartsWithRK6StringPKc+0x54>
static boolean flashStringStartsWith(const String &str, const char PROGMEM* pstr){ 
  int length = flashStringLength(pstr);
  if (length > str.length()) {
    return false; 
  }
  for (int i = 0; i < length; i++){
     fce:	21 96       	adiw	r28, 0x01	; 1
     fd0:	ce 15       	cp	r28, r14
     fd2:	df 05       	cpc	r29, r15
     fd4:	84 f3       	brlt	.-32     	; 0xfb6 <_ZL21flashStringStartsWithRK6StringPKc+0x30>
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	01 c0       	rjmp	.+2      	; 0xfdc <_ZL21flashStringStartsWithRK6StringPKc+0x56>
     fda:	80 e0       	ldi	r24, 0x00	; 0
    if (flashStringCharAt(pstr, i, false) != str[i]){
      return false;
    }
  }
  return true; 
}
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	1f 91       	pop	r17
     fe2:	ff 90       	pop	r15
     fe4:	ef 90       	pop	r14
     fe6:	df 90       	pop	r13
     fe8:	cf 90       	pop	r12
     fea:	bf 90       	pop	r11
     fec:	af 90       	pop	r10
     fee:	08 95       	ret

00000ff0 <_ZL19flashStringEndsWithRK6StringPKc>:
    }
  }
  return true; 
}

static boolean flashStringEndsWith(const String &str, const char PROGMEM* pstr){ 
     ff0:	8f 92       	push	r8
     ff2:	9f 92       	push	r9
     ff4:	af 92       	push	r10
     ff6:	bf 92       	push	r11
     ff8:	cf 92       	push	r12
     ffa:	df 92       	push	r13
     ffc:	ef 92       	push	r14
     ffe:	ff 92       	push	r15
    1000:	1f 93       	push	r17
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	5c 01       	movw	r10, r24
    1008:	6b 01       	movw	r12, r22
enum HTTP_TAG {
  HTTP_TAG_OPEN, HTTP_TAG_CLOSED, HTTP_TAG_SINGLE
};

static int flashStringLength(const char PROGMEM* pstr){ 
  return strlen_P(pstr);
    100a:	cb 01       	movw	r24, r22
    100c:	0e 94 47 05 	call	0xa8e	; 0xa8e <strlen_P>
    1010:	7c 01       	movw	r14, r24
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
    1012:	f5 01       	movw	r30, r10
    1014:	84 81       	ldd	r24, Z+4	; 0x04
    1016:	95 81       	ldd	r25, Z+5	; 0x05
  return true; 
}

static boolean flashStringEndsWith(const String &str, const char PROGMEM* pstr){ 
  int length = flashStringLength(pstr);
  if (length > str.length()) {
    1018:	8e 15       	cp	r24, r14
    101a:	9f 05       	cpc	r25, r15
    101c:	d0 f0       	brcs	.+52     	; 0x1052 <_ZL19flashStringEndsWithRK6StringPKc+0x62>
    return false; 
  }
  int strOffset = str.length() - length;
    101e:	4c 01       	movw	r8, r24
    1020:	8e 18       	sub	r8, r14
    1022:	9f 08       	sbc	r9, r15
    1024:	c0 e0       	ldi	r28, 0x00	; 0
    1026:	d0 e0       	ldi	r29, 0x00	; 0
    1028:	0f c0       	rjmp	.+30     	; 0x1048 <_ZL19flashStringEndsWithRK6StringPKc+0x58>
  for (int i = 0; i < length; i++){
    if (flashStringCharAt(pstr, i, false) != str[strOffset+i]){
    102a:	c6 01       	movw	r24, r12
    102c:	be 01       	movw	r22, r28
    102e:	40 e0       	ldi	r20, 0x00	; 0
    1030:	0e 94 fe 05 	call	0xbfc	; 0xbfc <_ZL17flashStringCharAtPKcih>
    1034:	18 2f       	mov	r17, r24
    1036:	be 01       	movw	r22, r28
    1038:	68 0d       	add	r22, r8
    103a:	79 1d       	adc	r23, r9
    103c:	c5 01       	movw	r24, r10
    103e:	0e 94 90 36 	call	0x6d20	; 0x6d20 <_ZNK6StringixEj>
    1042:	18 17       	cp	r17, r24
    1044:	31 f4       	brne	.+12     	; 0x1052 <_ZL19flashStringEndsWithRK6StringPKc+0x62>
  int length = flashStringLength(pstr);
  if (length > str.length()) {
    return false; 
  }
  int strOffset = str.length() - length;
  for (int i = 0; i < length; i++){
    1046:	21 96       	adiw	r28, 0x01	; 1
    1048:	ce 15       	cp	r28, r14
    104a:	df 05       	cpc	r29, r15
    104c:	74 f3       	brlt	.-36     	; 0x102a <_ZL19flashStringEndsWithRK6StringPKc+0x3a>
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	01 c0       	rjmp	.+2      	; 0x1054 <_ZL19flashStringEndsWithRK6StringPKc+0x64>
    1052:	80 e0       	ldi	r24, 0x00	; 0
    if (flashStringCharAt(pstr, i, false) != str[strOffset+i]){
      return false;
    }
  }
  return true; 
}
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	1f 91       	pop	r17
    105a:	ff 90       	pop	r15
    105c:	ef 90       	pop	r14
    105e:	df 90       	pop	r13
    1060:	cf 90       	pop	r12
    1062:	bf 90       	pop	r11
    1064:	af 90       	pop	r10
    1066:	9f 90       	pop	r9
    1068:	8f 90       	pop	r8
    106a:	08 95       	ret

0000106c <_ZL17flashStringEqualsRK6StringPKc>:
    }
  }
  return pgm_read_byte(pstr+index);
}

static boolean flashStringEquals(const String &str, const char PROGMEM* pstr){ 
    106c:	af 92       	push	r10
    106e:	bf 92       	push	r11
    1070:	cf 92       	push	r12
    1072:	df 92       	push	r13
    1074:	ef 92       	push	r14
    1076:	ff 92       	push	r15
    1078:	1f 93       	push	r17
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	5c 01       	movw	r10, r24
    1080:	6b 01       	movw	r12, r22
enum HTTP_TAG {
  HTTP_TAG_OPEN, HTTP_TAG_CLOSED, HTTP_TAG_SINGLE
};

static int flashStringLength(const char PROGMEM* pstr){ 
  return strlen_P(pstr);
    1082:	cb 01       	movw	r24, r22
    1084:	0e 94 47 05 	call	0xa8e	; 0xa8e <strlen_P>
    1088:	7c 01       	movw	r14, r24
  return pgm_read_byte(pstr+index);
}

static boolean flashStringEquals(const String &str, const char PROGMEM* pstr){ 
  int length = flashStringLength(pstr);
  if (length != str.length()) {
    108a:	f5 01       	movw	r30, r10
    108c:	84 81       	ldd	r24, Z+4	; 0x04
    108e:	95 81       	ldd	r25, Z+5	; 0x05
    1090:	e8 16       	cp	r14, r24
    1092:	f9 06       	cpc	r15, r25
    1094:	a9 f4       	brne	.+42     	; 0x10c0 <_ZL17flashStringEqualsRK6StringPKc+0x54>
    1096:	c0 e0       	ldi	r28, 0x00	; 0
    1098:	d0 e0       	ldi	r29, 0x00	; 0
    109a:	0d c0       	rjmp	.+26     	; 0x10b6 <_ZL17flashStringEqualsRK6StringPKc+0x4a>
    return false; 
  }
  for (int i = 0; i < length; i++){
    if (flashStringCharAt(pstr, i, false) != str[i]){
    109c:	c6 01       	movw	r24, r12
    109e:	be 01       	movw	r22, r28
    10a0:	40 e0       	ldi	r20, 0x00	; 0
    10a2:	0e 94 fe 05 	call	0xbfc	; 0xbfc <_ZL17flashStringCharAtPKcih>
    10a6:	18 2f       	mov	r17, r24
    10a8:	c5 01       	movw	r24, r10
    10aa:	be 01       	movw	r22, r28
    10ac:	0e 94 90 36 	call	0x6d20	; 0x6d20 <_ZNK6StringixEj>
    10b0:	18 17       	cp	r17, r24
    10b2:	31 f4       	brne	.+12     	; 0x10c0 <_ZL17flashStringEqualsRK6StringPKc+0x54>
static boolean flashStringEquals(const String &str, const char PROGMEM* pstr){ 
  int length = flashStringLength(pstr);
  if (length != str.length()) {
    return false; 
  }
  for (int i = 0; i < length; i++){
    10b4:	21 96       	adiw	r28, 0x01	; 1
    10b6:	ce 15       	cp	r28, r14
    10b8:	df 05       	cpc	r29, r15
    10ba:	84 f3       	brlt	.-32     	; 0x109c <_ZL17flashStringEqualsRK6StringPKc+0x30>
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	01 c0       	rjmp	.+2      	; 0x10c2 <_ZL17flashStringEqualsRK6StringPKc+0x56>
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    if (flashStringCharAt(pstr, i, false) != str[i]){
      return false;
    }
  }
  return true;
}
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	1f 91       	pop	r17
    10c8:	ff 90       	pop	r15
    10ca:	ef 90       	pop	r14
    10cc:	df 90       	pop	r13
    10ce:	cf 90       	pop	r12
    10d0:	bf 90       	pop	r11
    10d2:	af 90       	pop	r10
    10d4:	08 95       	ret

000010d6 <_ZN13GB_PrintDirty8printHEXERK6String>:


  static void printHEX(const String &input){   
    10d6:	0f 93       	push	r16
    10d8:	1f 93       	push	r17
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	8c 01       	movw	r16, r24
    10e0:	c0 e0       	ldi	r28, 0x00	; 0
    10e2:	d0 e0       	ldi	r29, 0x00	; 0
    10e4:	13 c0       	rjmp	.+38     	; 0x110c <_ZN13GB_PrintDirty8printHEXERK6String+0x36>
    for(int i = 0; i<input.length(); i++){
      byte c = input[i];
    10e6:	c8 01       	movw	r24, r16
    10e8:	be 01       	movw	r22, r28
    10ea:	0e 94 90 36 	call	0x6d20	; 0x6d20 <_ZNK6StringixEj>
      printHEX(c);
    10ee:	60 e0       	ldi	r22, 0x00	; 0
    10f0:	0e 94 9c 07 	call	0xf38	; 0xf38 <_ZN13GB_PrintDirty8printHEXEhh>
      if ((i+1)<input.length()) {
    10f4:	21 96       	adiw	r28, 0x01	; 1
    10f6:	f8 01       	movw	r30, r16
    10f8:	84 81       	ldd	r24, Z+4	; 0x04
    10fa:	95 81       	ldd	r25, Z+5	; 0x05
    10fc:	c8 17       	cp	r28, r24
    10fe:	d9 07       	cpc	r29, r25
    1100:	28 f4       	brcc	.+10     	; 0x110c <_ZN13GB_PrintDirty8printHEXERK6String+0x36>
        Serial.print(' '); 
    1102:	8d eb       	ldi	r24, 0xBD	; 189
    1104:	93 e0       	ldi	r25, 0x03	; 3
    1106:	60 e2       	ldi	r22, 0x20	; 32
    1108:	0e 94 98 34 	call	0x6930	; 0x6930 <_ZN5Print5printEc>
    Serial.print(getHEX(number));
  }


  static void printHEX(const String &input){   
    for(int i = 0; i<input.length(); i++){
    110c:	f8 01       	movw	r30, r16
    110e:	84 81       	ldd	r24, Z+4	; 0x04
    1110:	95 81       	ldd	r25, Z+5	; 0x05
    1112:	c8 17       	cp	r28, r24
    1114:	d9 07       	cpc	r29, r25
    1116:	38 f3       	brcs	.-50     	; 0x10e6 <_ZN13GB_PrintDirty8printHEXERK6String+0x10>
      printHEX(c);
      if ((i+1)<input.length()) {
        Serial.print(' '); 
      }
    }
  }  
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	1f 91       	pop	r17
    111e:	0f 91       	pop	r16
    1120:	08 95       	ret

00001122 <_ZN13GB_PrintDirty8printRAMEPvh>:
        Serial.print(input[i]);
      }
    }
  }

  static void printRAM(void *ptr, byte sizeOf){
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	06 2f       	mov	r16, r22
    112c:	ec 01       	movw	r28, r24
    112e:	10 e0       	ldi	r17, 0x00	; 0
    1130:	0a c0       	rjmp	.+20     	; 0x1146 <_ZN13GB_PrintDirty8printRAMEPvh+0x24>
    byte* buffer =(byte*)ptr;
    for(byte i=0; i<sizeOf; i++){
      printHEX(buffer[i]);
    1132:	89 91       	ld	r24, Y+
    1134:	60 e0       	ldi	r22, 0x00	; 0
    1136:	0e 94 9c 07 	call	0xf38	; 0xf38 <_ZN13GB_PrintDirty8printHEXEhh>
      Serial.print(' ');
    113a:	8d eb       	ldi	r24, 0xBD	; 189
    113c:	93 e0       	ldi	r25, 0x03	; 3
    113e:	60 e2       	ldi	r22, 0x20	; 32
    1140:	0e 94 98 34 	call	0x6930	; 0x6930 <_ZN5Print5printEc>
    }
  }

  static void printRAM(void *ptr, byte sizeOf){
    byte* buffer =(byte*)ptr;
    for(byte i=0; i<sizeOf; i++){
    1144:	1f 5f       	subi	r17, 0xFF	; 255
    1146:	10 17       	cp	r17, r16
    1148:	a0 f3       	brcs	.-24     	; 0x1132 <_ZN13GB_PrintDirty8printRAMEPvh+0x10>
      printHEX(buffer[i]);
      Serial.print(' ');
    }
  }
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	1f 91       	pop	r17
    1150:	0f 91       	pop	r16
    1152:	08 95       	ret

00001154 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String>:
        Serial.print(' '); 
      }
    }
  }  

  static void printWithoutCRLF(const String &input){   
    1154:	0f 93       	push	r16
    1156:	1f 93       	push	r17
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	8c 01       	movw	r16, r24
    115e:	c0 e0       	ldi	r28, 0x00	; 0
    1160:	d0 e0       	ldi	r29, 0x00	; 0
    1162:	22 c0       	rjmp	.+68     	; 0x11a8 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x54>
    for (int i = 0; i<input.length(); i++){
      if (input[i] == '\r'){
    1164:	c8 01       	movw	r24, r16
    1166:	be 01       	movw	r22, r28
    1168:	0e 94 90 36 	call	0x6d20	; 0x6d20 <_ZNK6StringixEj>
    116c:	8d 30       	cpi	r24, 0x0D	; 13
    116e:	29 f4       	brne	.+10     	; 0x117a <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x26>
        Serial.print(F("\\r"));
    1170:	8d eb       	ldi	r24, 0xBD	; 189
    1172:	93 e0       	ldi	r25, 0x03	; 3
    1174:	6d e0       	ldi	r22, 0x0D	; 13
    1176:	71 e0       	ldi	r23, 0x01	; 1
    1178:	0a c0       	rjmp	.+20     	; 0x118e <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x3a>
      } 
      else if (input[i] == '\n'){
    117a:	c8 01       	movw	r24, r16
    117c:	be 01       	movw	r22, r28
    117e:	0e 94 90 36 	call	0x6d20	; 0x6d20 <_ZNK6StringixEj>
    1182:	8a 30       	cpi	r24, 0x0A	; 10
    1184:	39 f4       	brne	.+14     	; 0x1194 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x40>
        Serial.print(F("\\n"));
    1186:	8d eb       	ldi	r24, 0xBD	; 189
    1188:	93 e0       	ldi	r25, 0x03	; 3
    118a:	6a e0       	ldi	r22, 0x0A	; 10
    118c:	71 e0       	ldi	r23, 0x01	; 1
    118e:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
    1192:	09 c0       	rjmp	.+18     	; 0x11a6 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x52>
      } 
      else {
        Serial.print(input[i]);
    1194:	c8 01       	movw	r24, r16
    1196:	be 01       	movw	r22, r28
    1198:	0e 94 90 36 	call	0x6d20	; 0x6d20 <_ZNK6StringixEj>
    119c:	68 2f       	mov	r22, r24
    119e:	8d eb       	ldi	r24, 0xBD	; 189
    11a0:	93 e0       	ldi	r25, 0x03	; 3
    11a2:	0e 94 98 34 	call	0x6930	; 0x6930 <_ZN5Print5printEc>
      }
    }
  }  

  static void printWithoutCRLF(const String &input){   
    for (int i = 0; i<input.length(); i++){
    11a6:	21 96       	adiw	r28, 0x01	; 1
    11a8:	f8 01       	movw	r30, r16
    11aa:	84 81       	ldd	r24, Z+4	; 0x04
    11ac:	95 81       	ldd	r25, Z+5	; 0x05
    11ae:	c8 17       	cp	r28, r24
    11b0:	d9 07       	cpc	r29, r25
    11b2:	c0 f2       	brcs	.-80     	; 0x1164 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x10>
      } 
      else {
        Serial.print(input[i]);
      }
    }
  }
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	1f 91       	pop	r17
    11ba:	0f 91       	pop	r16
    11bc:	08 95       	ret

000011be <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>:
    sendWifiFrameStart(portDescriptor, length);
    Serial.print(data);
    sendWifiFrameStop();
  }

  static void sendWifiFrameStart(const byte portDescriptor, word length){ // 1024 bytes max (Wi-Fi module restriction)   
    11be:	df 92       	push	r13
    11c0:	ef 92       	push	r14
    11c2:	ff 92       	push	r15
    11c4:	0f 93       	push	r16
    11c6:	1f 93       	push	r17
    11c8:	d8 2e       	mov	r13, r24
    11ca:	7b 01       	movw	r14, r22
    Serial.print(F("at+send_data="));
    11cc:	0d eb       	ldi	r16, 0xBD	; 189
    11ce:	13 e0       	ldi	r17, 0x03	; 3
    11d0:	c8 01       	movw	r24, r16
    11d2:	67 ec       	ldi	r22, 0xC7	; 199
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(portDescriptor);
    11da:	c8 01       	movw	r24, r16
    11dc:	6d 2d       	mov	r22, r13
    11de:	4a e0       	ldi	r20, 0x0A	; 10
    11e0:	50 e0       	ldi	r21, 0x00	; 0
    11e2:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <_ZN5Print5printEhi>
    Serial.print(',');
    11e6:	c8 01       	movw	r24, r16
    11e8:	6c e2       	ldi	r22, 0x2C	; 44
    11ea:	0e 94 98 34 	call	0x6930	; 0x6930 <_ZN5Print5printEc>
    Serial.print(length);
    11ee:	c8 01       	movw	r24, r16
    11f0:	b7 01       	movw	r22, r14
    11f2:	4a e0       	ldi	r20, 0x0A	; 10
    11f4:	50 e0       	ldi	r21, 0x00	; 0
    11f6:	0e 94 63 35 	call	0x6ac6	; 0x6ac6 <_ZN5Print5printEji>
    Serial.print(',');
    11fa:	c8 01       	movw	r24, r16
    11fc:	6c e2       	ldi	r22, 0x2C	; 44
    11fe:	0e 94 98 34 	call	0x6930	; 0x6930 <_ZN5Print5printEc>

  }
    1202:	1f 91       	pop	r17
    1204:	0f 91       	pop	r16
    1206:	ff 90       	pop	r15
    1208:	ef 90       	pop	r14
    120a:	df 90       	pop	r13
    120c:	08 95       	ret

0000120e <_ZL21printFatalErrorOnBootPK19__FlashStringHelper>:
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	ec 01       	movw	r28, r24
    1214:	80 91 af 01 	lds	r24, 0x01AF
    1218:	88 23       	and	r24, r24
    121a:	59 f0       	breq	.+22     	; 0x1232 <_ZL21printFatalErrorOnBootPK19__FlashStringHelper+0x24>
    121c:	8d eb       	ldi	r24, 0xBD	; 189
    121e:	93 e0       	ldi	r25, 0x03	; 3
    1220:	66 e0       	ldi	r22, 0x06	; 6
    1222:	77 e0       	ldi	r23, 0x07	; 7
    1224:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
    1228:	8d eb       	ldi	r24, 0xBD	; 189
    122a:	93 e0       	ldi	r25, 0x03	; 3
    122c:	be 01       	movw	r22, r28
    122e:	0e 94 c0 34 	call	0x6980	; 0x6980 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	08 95       	ret

00001238 <_ZL17printStatusOnBootPK19__FlashStringHelper>:
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	ec 01       	movw	r28, r24
    123e:	80 91 af 01 	lds	r24, 0x01AF
    1242:	88 23       	and	r24, r24
    1244:	89 f0       	breq	.+34     	; 0x1268 <_ZL17printStatusOnBootPK19__FlashStringHelper+0x30>
    1246:	8d eb       	ldi	r24, 0xBD	; 189
    1248:	93 e0       	ldi	r25, 0x03	; 3
    124a:	68 e1       	ldi	r22, 0x18	; 24
    124c:	77 e0       	ldi	r23, 0x07	; 7
    124e:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
    1252:	8d eb       	ldi	r24, 0xBD	; 189
    1254:	93 e0       	ldi	r25, 0x03	; 3
    1256:	be 01       	movw	r22, r28
    1258:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
    125c:	8d eb       	ldi	r24, 0xBD	; 189
    125e:	93 e0       	ldi	r25, 0x03	; 3
    1260:	64 e1       	ldi	r22, 0x14	; 20
    1262:	77 e0       	ldi	r23, 0x07	; 7
    1264:	0e 94 c0 34 	call	0x6980	; 0x6980 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1268:	df 91       	pop	r29
    126a:	cf 91       	pop	r28
    126c:	08 95       	ret

0000126e <_ZN15GB_SerialHelper17cleanSerialBufferEv>:
    }
    isError = ((index) == length); 
  }

  static void cleanSerialBuffer(){
    delay(10);
    126e:	6a e0       	ldi	r22, 0x0A	; 10
    1270:	70 e0       	ldi	r23, 0x00	; 0
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	0e 94 40 30 	call	0x6080	; 0x6080 <delay>
    127a:	04 c0       	rjmp	.+8      	; 0x1284 <_ZN15GB_SerialHelper17cleanSerialBufferEv+0x16>
    while (Serial.available()){
      Serial.read();
    127c:	8d eb       	ldi	r24, 0xBD	; 189
    127e:	93 e0       	ldi	r25, 0x03	; 3
    1280:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <_ZN14HardwareSerial4readEv>
    isError = ((index) == length); 
  }

  static void cleanSerialBuffer(){
    delay(10);
    while (Serial.available()){
    1284:	8d eb       	ldi	r24, 0xBD	; 189
    1286:	93 e0       	ldi	r25, 0x03	; 3
    1288:	0e 94 3a 33 	call	0x6674	; 0x6674 <_ZN14HardwareSerial9availableEv>
    128c:	89 2b       	or	r24, r25
    128e:	b1 f7       	brne	.-20     	; 0x127c <_ZN15GB_SerialHelper17cleanSerialBufferEv+0xe>
      Serial.read();
    }
  }
    1290:	08 95       	ret

00001292 <_ZN15GB_SerialHelper13printDirtyEndEv>:
  static /*volatile*/ boolean useSerialMonitor;
  static /*volatile*/ boolean useSerialWifi;


  static void printDirtyEnd(){
    if (useSerialWifi) {
    1292:	80 91 b0 01 	lds	r24, 0x01B0
    1296:	88 23       	and	r24, r24
    1298:	11 f0       	breq	.+4      	; 0x129e <_ZN15GB_SerialHelper13printDirtyEndEv+0xc>
      cleanSerialBuffer();
    129a:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN15GB_SerialHelper17cleanSerialBufferEv>
    129e:	08 95       	ret

000012a0 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>:
  }


private:

  static void showWifiStatus(const __FlashStringHelper* str, boolean newLine = true){ //TODO 
    12a0:	1f 93       	push	r17
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	ec 01       	movw	r28, r24
    12a8:	16 2f       	mov	r17, r22
    if (useSerialMonitor){
    12aa:	80 91 af 01 	lds	r24, 0x01AF
    12ae:	88 23       	and	r24, r24
    12b0:	99 f0       	breq	.+38     	; 0x12d8 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh+0x38>
      Serial.print(FS(S_WIFI));
    12b2:	8d eb       	ldi	r24, 0xBD	; 189
    12b4:	93 e0       	ldi	r25, 0x03	; 3
    12b6:	63 e0       	ldi	r22, 0x03	; 3
    12b8:	71 e0       	ldi	r23, 0x01	; 1
    12ba:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(str);
    12be:	8d eb       	ldi	r24, 0xBD	; 189
    12c0:	93 e0       	ldi	r25, 0x03	; 3
    12c2:	be 01       	movw	r22, r28
    12c4:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
      if (newLine){  
    12c8:	11 23       	and	r17, r17
    12ca:	21 f0       	breq	.+8      	; 0x12d4 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh+0x34>
        Serial.println();        
    12cc:	8d eb       	ldi	r24, 0xBD	; 189
    12ce:	93 e0       	ldi	r25, 0x03	; 3
    12d0:	0e 94 a0 34 	call	0x6940	; 0x6940 <_ZN5Print7printlnEv>
      }
      printDirtyEnd();
    12d4:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN15GB_SerialHelper13printDirtyEndEv>
    }
  }
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	1f 91       	pop	r17
    12de:	08 95       	ret

000012e0 <_ZN15GB_SerialHelper17Serial_readStringER6Stringj>:
    }
    return count;
  }


  static size_t Serial_readString(String& str, size_t length){
    12e0:	2f 92       	push	r2
    12e2:	3f 92       	push	r3
    12e4:	4f 92       	push	r4
    12e6:	5f 92       	push	r5
    12e8:	6f 92       	push	r6
    12ea:	7f 92       	push	r7
    12ec:	8f 92       	push	r8
    12ee:	9f 92       	push	r9
    12f0:	af 92       	push	r10
    12f2:	bf 92       	push	r11
    12f4:	cf 92       	push	r12
    12f6:	df 92       	push	r13
    12f8:	ef 92       	push	r14
    12fa:	ff 92       	push	r15
    12fc:	0f 93       	push	r16
    12fe:	1f 93       	push	r17
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    1308:	4c 01       	movw	r8, r24
    130a:	3b 01       	movw	r6, r22
    str.reserve(str.length() + count);
    for (size_t i = 0; i < count; i++) {
      str += buffer[i];  
    }
    return count;
  }
    130c:	2d b6       	in	r2, 0x3d	; 61
    130e:	3e b6       	in	r3, 0x3e	; 62
    return count;
  }


  static size_t Serial_readString(String& str, size_t length){
    char buffer[length];
    1310:	8d b7       	in	r24, 0x3d	; 61
    1312:	9e b7       	in	r25, 0x3e	; 62
    1314:	86 1b       	sub	r24, r22
    1316:	97 0b       	sbc	r25, r23
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	9e bf       	out	0x3e, r25	; 62
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	8d bf       	out	0x3d, r24	; 61
    1322:	4d b6       	in	r4, 0x3d	; 61
    1324:	5e b6       	in	r5, 0x3e	; 62
    1326:	08 94       	sec
    1328:	41 1c       	adc	r4, r1
    132a:	51 1c       	adc	r5, r1
    size_t count = Serial_readBytes(buffer, length);
    132c:	82 01       	movw	r16, r4
    132e:	ee 24       	eor	r14, r14
    1330:	ff 24       	eor	r15, r15
    1332:	24 c0       	rjmp	.+72     	; 0x137c <_ZN15GB_SerialHelper17Serial_readStringER6Stringj+0x9c>
  /////////////////////////////////////////////////////////////////////

  // WARNING! This is adapted copy of Stream.h, Serial.h, and HardwareSerial.h
  // functionality
  static boolean Serial_timedRead(char* c){
    int _startMillis = millis();
    1334:	0e 94 32 30 	call	0x6064	; 0x6064 <millis>
    do {
    1338:	5b 01       	movw	r10, r22
    133a:	cc 24       	eor	r12, r12
    133c:	b7 fc       	sbrc	r11, 7
    133e:	c0 94       	com	r12
    1340:	dc 2c       	mov	r13, r12
      if (Serial.available()){
    1342:	8d eb       	ldi	r24, 0xBD	; 189
    1344:	93 e0       	ldi	r25, 0x03	; 3
    1346:	0e 94 3a 33 	call	0x6674	; 0x6674 <_ZN14HardwareSerial9availableEv>
    134a:	89 2b       	or	r24, r25
    134c:	59 f0       	breq	.+22     	; 0x1364 <_ZN15GB_SerialHelper17Serial_readStringER6Stringj+0x84>
        *c = (char) Serial.read();
    134e:	8d eb       	ldi	r24, 0xBD	; 189
    1350:	93 e0       	ldi	r25, 0x03	; 3
    1352:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <_ZN14HardwareSerial4readEv>
    1356:	f8 01       	movw	r30, r16
    1358:	81 93       	st	Z+, r24
    135a:	8f 01       	movw	r16, r30
    while (count < length) {
      if (!Serial_timedRead(buffer)){
        break;
      }
      buffer++;
      count++;
    135c:	08 94       	sec
    135e:	e1 1c       	adc	r14, r1
    1360:	f1 1c       	adc	r15, r1
    1362:	0c c0       	rjmp	.+24     	; 0x137c <_ZN15GB_SerialHelper17Serial_readStringER6Stringj+0x9c>

  // WARNING! This is adapted copy of Stream.h, Serial.h, and HardwareSerial.h
  // functionality
  static boolean Serial_timedRead(char* c){
    int _startMillis = millis();
    do {
    1364:	0e 94 32 30 	call	0x6064	; 0x6064 <millis>
    1368:	6a 19       	sub	r22, r10
    136a:	7b 09       	sbc	r23, r11
    136c:	8c 09       	sbc	r24, r12
    136e:	9d 09       	sbc	r25, r13
    1370:	64 5f       	subi	r22, 0xF4	; 244
    1372:	71 40       	sbci	r23, 0x01	; 1
    1374:	80 40       	sbci	r24, 0x00	; 0
    1376:	90 40       	sbci	r25, 0x00	; 0
    1378:	20 f3       	brcs	.-56     	; 0x1342 <_ZN15GB_SerialHelper17Serial_readStringER6Stringj+0x62>
    137a:	03 c0       	rjmp	.+6      	; 0x1382 <_ZN15GB_SerialHelper17Serial_readStringER6Stringj+0xa2>
  }

  static size_t Serial_readBytes(char *buffer, size_t length) {
    char c;
    size_t count = 0;
    while (count < length) {
    137c:	e6 14       	cp	r14, r6
    137e:	f7 04       	cpc	r15, r7
    1380:	c8 f2       	brcs	.-78     	; 0x1334 <_ZN15GB_SerialHelper17Serial_readStringER6Stringj+0x54>


  static size_t Serial_readString(String& str, size_t length){
    char buffer[length];
    size_t count = Serial_readBytes(buffer, length);
    str.reserve(str.length() + count);
    1382:	f4 01       	movw	r30, r8
    1384:	64 81       	ldd	r22, Z+4	; 0x04
    1386:	75 81       	ldd	r23, Z+5	; 0x05
    1388:	6e 0d       	add	r22, r14
    138a:	7f 1d       	adc	r23, r15
    138c:	c4 01       	movw	r24, r8
    138e:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <_ZN6String7reserveEj>
    1392:	00 e0       	ldi	r16, 0x00	; 0
    1394:	10 e0       	ldi	r17, 0x00	; 0
    1396:	09 c0       	rjmp	.+18     	; 0x13aa <_ZN15GB_SerialHelper17Serial_readStringER6Stringj+0xca>
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1398:	f2 01       	movw	r30, r4
    139a:	e0 0f       	add	r30, r16
    139c:	f1 1f       	adc	r31, r17
    139e:	c4 01       	movw	r24, r8
    13a0:	60 81       	ld	r22, Z
    13a2:	0e 94 a3 37 	call	0x6f46	; 0x6f46 <_ZN6String6concatEc>
    for (size_t i = 0; i < count; i++) {
    13a6:	0f 5f       	subi	r16, 0xFF	; 255
    13a8:	1f 4f       	sbci	r17, 0xFF	; 255
    13aa:	0e 15       	cp	r16, r14
    13ac:	1f 05       	cpc	r17, r15
    13ae:	a0 f3       	brcs	.-24     	; 0x1398 <_ZN15GB_SerialHelper17Serial_readStringER6Stringj+0xb8>
      str += buffer[i];  
    }
    return count;
  }
    13b0:	c7 01       	movw	r24, r14
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	f8 94       	cli
    13b6:	3e be       	out	0x3e, r3	; 62
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	2d be       	out	0x3d, r2	; 61
    13bc:	cf 91       	pop	r28
    13be:	df 91       	pop	r29
    13c0:	1f 91       	pop	r17
    13c2:	0f 91       	pop	r16
    13c4:	ff 90       	pop	r15
    13c6:	ef 90       	pop	r14
    13c8:	df 90       	pop	r13
    13ca:	cf 90       	pop	r12
    13cc:	bf 90       	pop	r11
    13ce:	af 90       	pop	r10
    13d0:	9f 90       	pop	r9
    13d2:	8f 90       	pop	r8
    13d4:	7f 90       	pop	r7
    13d6:	6f 90       	pop	r6
    13d8:	5f 90       	pop	r5
    13da:	4f 90       	pop	r4
    13dc:	3f 90       	pop	r3
    13de:	2f 90       	pop	r2
    13e0:	08 95       	ret

000013e2 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperi>:
    }

    return false;
  }

  static String wifiExecuteRawCommand(const __FlashStringHelper* command, int maxResponseDeleay){
    13e2:	6f 92       	push	r6
    13e4:	7f 92       	push	r7
    13e6:	8f 92       	push	r8
    13e8:	9f 92       	push	r9
    13ea:	af 92       	push	r10
    13ec:	bf 92       	push	r11
    13ee:	cf 92       	push	r12
    13f0:	df 92       	push	r13
    13f2:	ef 92       	push	r14
    13f4:	ff 92       	push	r15
    13f6:	0f 93       	push	r16
    13f8:	1f 93       	push	r17
    13fa:	cf 93       	push	r28
    13fc:	df 93       	push	r29
    13fe:	78 2e       	mov	r7, r24
    1400:	69 2e       	mov	r6, r25
    1402:	eb 01       	movw	r28, r22
    1404:	4a 01       	movw	r8, r20

    cleanSerialBuffer();
    1406:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN15GB_SerialHelper17cleanSerialBufferEv>

    if (command == 0){
    140a:	20 97       	sbiw	r28, 0x00	; 0
    140c:	29 f4       	brne	.+10     	; 0x1418 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperi+0x36>
      Serial.println();
    140e:	8d eb       	ldi	r24, 0xBD	; 189
    1410:	93 e0       	ldi	r25, 0x03	; 3
    1412:	0e 94 a0 34 	call	0x6940	; 0x6940 <_ZN5Print7printlnEv>
    1416:	05 c0       	rjmp	.+10     	; 0x1422 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperi+0x40>
    } 
    else {
      Serial.println(command);
    1418:	8d eb       	ldi	r24, 0xBD	; 189
    141a:	93 e0       	ldi	r25, 0x03	; 3
    141c:	be 01       	movw	r22, r28
    141e:	0e 94 c0 34 	call	0x6980	; 0x6980 <_ZN5Print7printlnEPK19__FlashStringHelper>
    }

    String input;
    1422:	c7 2d       	mov	r28, r7
    1424:	d6 2d       	mov	r29, r6
    1426:	ce 01       	movw	r24, r28
    1428:	60 e0       	ldi	r22, 0x00	; 0
    142a:	71 e0       	ldi	r23, 0x01	; 1
    142c:	0e 94 07 38 	call	0x700e	; 0x700e <_ZN6StringC1EPKc>
    input.reserve(10);
    1430:	ce 01       	movw	r24, r28
    1432:	6a e0       	ldi	r22, 0x0A	; 10
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <_ZN6String7reserveEj>
    unsigned long start = millis();
    143a:	0e 94 32 30 	call	0x6064	; 0x6064 <millis>
    143e:	5b 01       	movw	r10, r22
    1440:	6c 01       	movw	r12, r24
    while(millis() - start <= maxResponseDeleay){
    1442:	74 01       	movw	r14, r8
    1444:	00 27       	eor	r16, r16
    1446:	f7 fc       	sbrc	r15, 7
    1448:	00 95       	com	r16
    144a:	10 2f       	mov	r17, r16
    144c:	0e c0       	rjmp	.+28     	; 0x146a <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperi+0x88>
      if (Serial.available()){
    144e:	8d eb       	ldi	r24, 0xBD	; 189
    1450:	93 e0       	ldi	r25, 0x03	; 3
    1452:	0e 94 3a 33 	call	0x6674	; 0x6674 <_ZN14HardwareSerial9availableEv>
    1456:	89 2b       	or	r24, r25
    1458:	41 f0       	breq	.+16     	; 0x146a <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperi+0x88>
    size_t countInFrame = Serial_readString(str, maxFrameLenght);

    size_t count = countInFrame; 

    while (countInFrame == maxFrameLenght){
      countInFrame = Serial_readString(str, maxFrameLenght); 
    145a:	ce 01       	movw	r24, r28
    145c:	64 e6       	ldi	r22, 0x64	; 100
    145e:	70 e0       	ldi	r23, 0x00	; 0
    1460:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_ZN15GB_SerialHelper17Serial_readStringER6Stringj>
    size_t maxFrameLenght = 100; 
    size_t countInFrame = Serial_readString(str, maxFrameLenght);

    size_t count = countInFrame; 

    while (countInFrame == maxFrameLenght){
    1464:	84 36       	cpi	r24, 0x64	; 100
    1466:	91 05       	cpc	r25, r1
    1468:	c1 f3       	breq	.-16     	; 0x145a <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperi+0x78>
    }

    String input;
    input.reserve(10);
    unsigned long start = millis();
    while(millis() - start <= maxResponseDeleay){
    146a:	0e 94 32 30 	call	0x6064	; 0x6064 <millis>
    146e:	6a 19       	sub	r22, r10
    1470:	7b 09       	sbc	r23, r11
    1472:	8c 09       	sbc	r24, r12
    1474:	9d 09       	sbc	r25, r13
    1476:	e6 16       	cp	r14, r22
    1478:	f7 06       	cpc	r15, r23
    147a:	08 07       	cpc	r16, r24
    147c:	19 07       	cpc	r17, r25
    147e:	38 f7       	brcc	.-50     	; 0x144e <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperi+0x6c>
     GB_PrintDirty::printHEX(input); 
     Serial.println();
     printDirtyEnd();
     }
     */
    if (input.length() == 0){
    1480:	8c 81       	ldd	r24, Y+4	; 0x04
    1482:	9d 81       	ldd	r25, Y+5	; 0x05
    1484:	89 2b       	or	r24, r25
    1486:	01 f5       	brne	.+64     	; 0x14c8 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperi+0xe6>

      if (s_restartWifiIfNoResponseAutomatically){
    1488:	80 91 05 01 	lds	r24, 0x0105
    148c:	88 23       	and	r24, r24
    148e:	19 f0       	breq	.+6      	; 0x1496 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperi+0xb4>
        s_restartWifi = true;
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	80 93 b1 01 	sts	0x01B1, r24
      }

      if (useSerialMonitor){   
    1496:	80 91 af 01 	lds	r24, 0x01AF
    149a:	88 23       	and	r24, r24
    149c:	a9 f0       	breq	.+42     	; 0x14c8 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperi+0xe6>
        showWifiStatus(F("No response"), false);
    149e:	87 ef       	ldi	r24, 0xF7	; 247
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	60 e0       	ldi	r22, 0x00	; 0
    14a4:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
        if (s_restartWifiIfNoResponseAutomatically){
    14a8:	80 91 05 01 	lds	r24, 0x0105
    14ac:	88 23       	and	r24, r24
    14ae:	31 f0       	breq	.+12     	; 0x14bc <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperi+0xda>
          Serial.print(F(" (reboot)"));
    14b0:	8d eb       	ldi	r24, 0xBD	; 189
    14b2:	93 e0       	ldi	r25, 0x03	; 3
    14b4:	6d ee       	ldi	r22, 0xED	; 237
    14b6:	70 e0       	ldi	r23, 0x00	; 0
    14b8:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
        } 
        Serial.println();
    14bc:	8d eb       	ldi	r24, 0xBD	; 189
    14be:	93 e0       	ldi	r25, 0x03	; 3
    14c0:	0e 94 a0 34 	call	0x6940	; 0x6940 <_ZN5Print7printlnEv>
        printDirtyEnd();
    14c4:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN15GB_SerialHelper13printDirtyEndEv>
      }

    }

    return input;
  }
    14c8:	87 2d       	mov	r24, r7
    14ca:	96 2d       	mov	r25, r6
    14cc:	df 91       	pop	r29
    14ce:	cf 91       	pop	r28
    14d0:	1f 91       	pop	r17
    14d2:	0f 91       	pop	r16
    14d4:	ff 90       	pop	r15
    14d6:	ef 90       	pop	r14
    14d8:	df 90       	pop	r13
    14da:	cf 90       	pop	r12
    14dc:	bf 90       	pop	r11
    14de:	af 90       	pop	r10
    14e0:	9f 90       	pop	r9
    14e2:	8f 90       	pop	r8
    14e4:	7f 90       	pop	r7
    14e6:	6f 90       	pop	r6
    14e8:	08 95       	ret

000014ea <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>:
    }

    return true;
  }

  static boolean wifiExecuteCommand(const __FlashStringHelper* command = 0, int maxResponseDeleay = WIFI_RESPONSE_DEFAULT_DELAY){   
    14ea:	0f 93       	push	r16
    14ec:	1f 93       	push	r17
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
    14f6:	27 97       	sbiw	r28, 0x07	; 7
    14f8:	0f b6       	in	r0, 0x3f	; 63
    14fa:	f8 94       	cli
    14fc:	de bf       	out	0x3e, r29	; 62
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	cd bf       	out	0x3d, r28	; 61
    1502:	9c 01       	movw	r18, r24
    1504:	ab 01       	movw	r20, r22
    String input = wifiExecuteRawCommand(command, maxResponseDeleay);
    1506:	8e 01       	movw	r16, r28
    1508:	0f 5f       	subi	r16, 0xFF	; 255
    150a:	1f 4f       	sbci	r17, 0xFF	; 255
    150c:	c8 01       	movw	r24, r16
    150e:	b9 01       	movw	r22, r18
    1510:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperi>
    if (input.length() == 0){
    1514:	8d 81       	ldd	r24, Y+5	; 0x05
    1516:	9e 81       	ldd	r25, Y+6	; 0x06
    1518:	89 2b       	or	r24, r25
    151a:	09 f4       	brne	.+2      	; 0x151e <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x34>
    151c:	4f c0       	rjmp	.+158    	; 0x15bc <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0xd2>
      // Nothing to do
    } 
    else if (flashStringStartsWith(input, S_WIFI_RESPONSE_OK) && flashStringEndsWith(input, S_CRLF)){
    151e:	c8 01       	movw	r24, r16
    1520:	65 ed       	ldi	r22, 0xD5	; 213
    1522:	70 e0       	ldi	r23, 0x00	; 0
    1524:	0e 94 c3 07 	call	0xf86	; 0xf86 <_ZL21flashStringStartsWithRK6StringPKc>
    1528:	88 23       	and	r24, r24
    152a:	09 f4       	brne	.+2      	; 0x152e <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x44>
    152c:	58 c0       	rjmp	.+176    	; 0x15de <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0xf4>
    152e:	c8 01       	movw	r24, r16
    1530:	68 ed       	ldi	r22, 0xD8	; 216
    1532:	70 e0       	ldi	r23, 0x00	; 0
    1534:	0e 94 f8 07 	call	0xff0	; 0xff0 <_ZL19flashStringEndsWithRK6StringPKc>
    1538:	88 23       	and	r24, r24
    153a:	09 f4       	brne	.+2      	; 0x153e <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x54>
    153c:	50 c0       	rjmp	.+160    	; 0x15de <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0xf4>
    153e:	11 e0       	ldi	r17, 0x01	; 1
    1540:	3e c0       	rjmp	.+124    	; 0x15be <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0xd4>
      return true;
    } 
    else if (flashStringStartsWith(input, S_WIFI_RESPONSE_ERROR) && flashStringEndsWith(input, S_CRLF)){
    1542:	c8 01       	movw	r24, r16
    1544:	68 ed       	ldi	r22, 0xD8	; 216
    1546:	70 e0       	ldi	r23, 0x00	; 0
    1548:	0e 94 f8 07 	call	0xff0	; 0xff0 <_ZL19flashStringEndsWithRK6StringPKc>
    154c:	88 23       	and	r24, r24
    154e:	09 f4       	brne	.+2      	; 0x1552 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x68>
    1550:	51 c0       	rjmp	.+162    	; 0x15f4 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x10a>
      if (useSerialMonitor){
    1552:	80 91 af 01 	lds	r24, 0x01AF
    1556:	88 23       	and	r24, r24
    1558:	89 f1       	breq	.+98     	; 0x15bc <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0xd2>
        byte errorCode = input[5];
    155a:	c8 01       	movw	r24, r16
    155c:	65 e0       	ldi	r22, 0x05	; 5
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <_ZN6StringixEj>
    1564:	fc 01       	movw	r30, r24
    1566:	10 81       	ld	r17, Z
        showWifiStatus(F("Error "), false);
    1568:	86 ee       	ldi	r24, 0xE6	; 230
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	60 e0       	ldi	r22, 0x00	; 0
    156e:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
        Serial.print(FS(S_0x));
    1572:	8d eb       	ldi	r24, 0xBD	; 189
    1574:	93 e0       	ldi	r25, 0x03	; 3
    1576:	64 e8       	ldi	r22, 0x84	; 132
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
        GB_PrintDirty::printHEX(errorCode, true);
    157e:	81 2f       	mov	r24, r17
    1580:	61 e0       	ldi	r22, 0x01	; 1
    1582:	0e 94 9c 07 	call	0xf38	; 0xf38 <_ZN13GB_PrintDirty8printHEXEhh>
    1586:	14 c0       	rjmp	.+40     	; 0x15b0 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0xc6>
        printDirtyEnd();
      }      
    } 
    else {
      if (useSerialMonitor){
        showWifiStatus(FS(S_empty), false);
    1588:	81 ee       	ldi	r24, 0xE1	; 225
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	60 e0       	ldi	r22, 0x00	; 0
    158e:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
        GB_PrintDirty::printWithoutCRLF(input);
    1592:	8e 01       	movw	r16, r28
    1594:	0f 5f       	subi	r16, 0xFF	; 255
    1596:	1f 4f       	sbci	r17, 0xFF	; 255
    1598:	c8 01       	movw	r24, r16
    159a:	0e 94 aa 08 	call	0x1154	; 0x1154 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String>
        Serial.print(FS(S_Next));
    159e:	8d eb       	ldi	r24, 0xBD	; 189
    15a0:	93 e0       	ldi	r25, 0x03	; 3
    15a2:	62 ee       	ldi	r22, 0xE2	; 226
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
        GB_PrintDirty::printHEX(input); 
    15aa:	c8 01       	movw	r24, r16
    15ac:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN13GB_PrintDirty8printHEXERK6String>
        Serial.println();
    15b0:	8d eb       	ldi	r24, 0xBD	; 189
    15b2:	93 e0       	ldi	r25, 0x03	; 3
    15b4:	0e 94 a0 34 	call	0x6940	; 0x6940 <_ZN5Print7printlnEv>
        printDirtyEnd();
    15b8:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN15GB_SerialHelper13printDirtyEndEv>
    15bc:	10 e0       	ldi	r17, 0x00	; 0
      }
    }

    return false;
    15be:	ce 01       	movw	r24, r28
    15c0:	01 96       	adiw	r24, 0x01	; 1
    15c2:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
  }
    15c6:	81 2f       	mov	r24, r17
    15c8:	27 96       	adiw	r28, 0x07	; 7
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	f8 94       	cli
    15ce:	de bf       	out	0x3e, r29	; 62
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	cd bf       	out	0x3d, r28	; 61
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	1f 91       	pop	r17
    15da:	0f 91       	pop	r16
    15dc:	08 95       	ret
      // Nothing to do
    } 
    else if (flashStringStartsWith(input, S_WIFI_RESPONSE_OK) && flashStringEndsWith(input, S_CRLF)){
      return true;
    } 
    else if (flashStringStartsWith(input, S_WIFI_RESPONSE_ERROR) && flashStringEndsWith(input, S_CRLF)){
    15de:	8e 01       	movw	r16, r28
    15e0:	0f 5f       	subi	r16, 0xFF	; 255
    15e2:	1f 4f       	sbci	r17, 0xFF	; 255
    15e4:	c8 01       	movw	r24, r16
    15e6:	6b ed       	ldi	r22, 0xDB	; 219
    15e8:	70 e0       	ldi	r23, 0x00	; 0
    15ea:	0e 94 c3 07 	call	0xf86	; 0xf86 <_ZL21flashStringStartsWithRK6StringPKc>
    15ee:	88 23       	and	r24, r24
    15f0:	09 f0       	breq	.+2      	; 0x15f4 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x10a>
    15f2:	a7 cf       	rjmp	.-178    	; 0x1542 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x58>
        Serial.println();
        printDirtyEnd();
      }      
    } 
    else {
      if (useSerialMonitor){
    15f4:	80 91 af 01 	lds	r24, 0x01AF
    15f8:	88 23       	and	r24, r24
    15fa:	01 f3       	breq	.-64     	; 0x15bc <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0xd2>
    15fc:	c5 cf       	rjmp	.-118    	; 0x1588 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x9e>

000015fe <_ZN15GB_SerialHelper12sendWifiDataEhPK19__FlashStringHelper>:

  /////////////////////////////////////////////////////////////////////
  //                           WIFI PROTOCOL                         //
  /////////////////////////////////////////////////////////////////////

  static void sendWifiData(const byte portDescriptor, const __FlashStringHelper* data){ // INT_MAX (own test) or 1400 bytes max (Wi-Fi spec restriction)
    15fe:	1f 93       	push	r17
    1600:	cf 93       	push	r28
    1602:	df 93       	push	r29
    1604:	18 2f       	mov	r17, r24
    1606:	eb 01       	movw	r28, r22
enum HTTP_TAG {
  HTTP_TAG_OPEN, HTTP_TAG_CLOSED, HTTP_TAG_SINGLE
};

static int flashStringLength(const char PROGMEM* pstr){ 
  return strlen_P(pstr);
    1608:	cb 01       	movw	r24, r22
    160a:	0e 94 47 05 	call	0xa8e	; 0xa8e <strlen_P>
    160e:	bc 01       	movw	r22, r24
    int length = flashStringLength(data);
    if (length == 0){
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	99 f0       	breq	.+38     	; 0x163a <_ZN15GB_SerialHelper12sendWifiDataEhPK19__FlashStringHelper+0x3c>
      return;
    }
    sendWifiFrameStart(portDescriptor, length);
    1614:	81 2f       	mov	r24, r17
    1616:	0e 94 df 08 	call	0x11be	; 0x11be <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>
    Serial.print(data);
    161a:	8d eb       	ldi	r24, 0xBD	; 189
    161c:	93 e0       	ldi	r25, 0x03	; 3
    161e:	be 01       	movw	r22, r28
    1620:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(',');

  }

  static boolean sendWifiFrameStop(){
    s_restartWifiIfNoResponseAutomatically = false;
    1624:	10 92 05 01 	sts	0x0105, r1
    boolean rez = wifiExecuteCommand();
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	68 ee       	ldi	r22, 0xE8	; 232
    162e:	73 e0       	ldi	r23, 0x03	; 3
    1630:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    s_restartWifiIfNoResponseAutomatically = true;
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	80 93 05 01 	sts	0x0105, r24
      return;
    }
    sendWifiFrameStart(portDescriptor, length);
    Serial.print(data);
    sendWifiFrameStop();
  }
    163a:	df 91       	pop	r29
    163c:	cf 91       	pop	r28
    163e:	1f 91       	pop	r17
    1640:	08 95       	ret

00001642 <_ZN15GB_SerialHelper16sendHttpOKHeaderEh>:
  /////////////////////////////////////////////////////////////////////
  //                           HTTP PROTOCOL                         //
  /////////////////////////////////////////////////////////////////////

  static void sendHttpOKHeader(const byte portDescriptor){ 
    sendWifiData(portDescriptor, F("HTTP/1.1 200 OK\r\nConnection: close\r\nContent-Type: text/html\r\n\r\n"));
    1642:	67 e8       	ldi	r22, 0x87	; 135
    1644:	70 e0       	ldi	r23, 0x00	; 0
    1646:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <_ZN15GB_SerialHelper12sendWifiDataEhPK19__FlashStringHelper>
  }
    164a:	08 95       	ret

0000164c <_ZN15GB_SerialHelper22sendHttpNotFoundHeaderEh>:

  static void sendHttpNotFoundHeader(const byte portDescriptor){ 
    sendWifiData(portDescriptor, F("HTTP/1.1 404 Not Found\r\nConnection: close\r\n\r\n"));
    164c:	6b e3       	ldi	r22, 0x3B	; 59
    164e:	76 e0       	ldi	r23, 0x06	; 6
    1650:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <_ZN15GB_SerialHelper12sendWifiDataEhPK19__FlashStringHelper>
  }
    1654:	08 95       	ret

00001656 <_ZN15GB_SerialHelper15startWifiSilentEv>:
  //                             Wi-FI DEVICE                        //
  /////////////////////////////////////////////////////////////////////

  static boolean startWifiSilent(){

    cleanSerialBuffer();
    1656:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN15GB_SerialHelper17cleanSerialBufferEv>

    if (!wifiExecuteCommand(F("at+scan=0"), 5000)){
    165a:	81 e8       	ldi	r24, 0x81	; 129
    165c:	92 e0       	ldi	r25, 0x02	; 2
    165e:	68 e8       	ldi	r22, 0x88	; 136
    1660:	73 e1       	ldi	r23, 0x13	; 19
    1662:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    1666:	88 23       	and	r24, r24
    1668:	09 f4       	brne	.+2      	; 0x166c <_ZN15GB_SerialHelper15startWifiSilentEv+0x16>
    166a:	62 c0       	rjmp	.+196    	; 0x1730 <_ZN15GB_SerialHelper15startWifiSilentEv+0xda>
      return false;
    } 

    boolean isStationMode = (s_wifiSID.length()>0);    
    if (isStationMode){
    166c:	80 91 b6 01 	lds	r24, 0x01B6
    1670:	90 91 b7 01 	lds	r25, 0x01B7
    1674:	89 2b       	or	r24, r25
    1676:	91 f1       	breq	.+100    	; 0x16dc <_ZN15GB_SerialHelper15startWifiSilentEv+0x86>
      if (s_wifiPass.length() > 0){
    1678:	80 91 bd 01 	lds	r24, 0x01BD
    167c:	90 91 be 01 	lds	r25, 0x01BE
    1680:	89 2b       	or	r24, r25
    1682:	a9 f0       	breq	.+42     	; 0x16ae <_ZN15GB_SerialHelper15startWifiSilentEv+0x58>
        Serial.print(F("at+psk="));
    1684:	8d eb       	ldi	r24, 0xBD	; 189
    1686:	93 e0       	ldi	r25, 0x03	; 3
    1688:	69 e7       	ldi	r22, 0x79	; 121
    168a:	72 e0       	ldi	r23, 0x02	; 2
    168c:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.print(s_wifiPass);
    1690:	8d eb       	ldi	r24, 0xBD	; 189
    1692:	93 e0       	ldi	r25, 0x03	; 3
    1694:	69 eb       	ldi	r22, 0xB9	; 185
    1696:	71 e0       	ldi	r23, 0x01	; 1
    1698:	0e 94 f8 35 	call	0x6bf0	; 0x6bf0 <_ZN5Print5printERK6String>
        if (!wifiExecuteCommand()){
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	68 ee       	ldi	r22, 0xE8	; 232
    16a2:	73 e0       	ldi	r23, 0x03	; 3
    16a4:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    16a8:	88 23       	and	r24, r24
    16aa:	09 f4       	brne	.+2      	; 0x16ae <_ZN15GB_SerialHelper15startWifiSilentEv+0x58>
    16ac:	41 c0       	rjmp	.+130    	; 0x1730 <_ZN15GB_SerialHelper15startWifiSilentEv+0xda>
          return false;
        }
      } 

      Serial.print(F("at+connect="));
    16ae:	8d eb       	ldi	r24, 0xBD	; 189
    16b0:	93 e0       	ldi	r25, 0x03	; 3
    16b2:	6d e6       	ldi	r22, 0x6D	; 109
    16b4:	72 e0       	ldi	r23, 0x02	; 2
    16b6:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(s_wifiSID);
    16ba:	8d eb       	ldi	r24, 0xBD	; 189
    16bc:	93 e0       	ldi	r25, 0x03	; 3
    16be:	62 eb       	ldi	r22, 0xB2	; 178
    16c0:	71 e0       	ldi	r23, 0x01	; 1
    16c2:	0e 94 f8 35 	call	0x6bf0	; 0x6bf0 <_ZN5Print5printERK6String>
      if (!wifiExecuteCommand(0, 5000)){
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	68 e8       	ldi	r22, 0x88	; 136
    16cc:	73 e1       	ldi	r23, 0x13	; 19
    16ce:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    16d2:	88 23       	and	r24, r24
    16d4:	69 f1       	breq	.+90     	; 0x1730 <_ZN15GB_SerialHelper15startWifiSilentEv+0xda>

      /*if (!wifiExecuteCommand(F("at+listen=20"))){
       return false;
       }*/

      if (!wifiExecuteCommand(F("at+ipdhcp=0"), 5000)){
    16d6:	81 e6       	ldi	r24, 0x61	; 97
    16d8:	92 e0       	ldi	r25, 0x02	; 2
    16da:	1a c0       	rjmp	.+52     	; 0x1710 <_ZN15GB_SerialHelper15startWifiSilentEv+0xba>
        return false;
      }
    }
    else {
      if (!wifiExecuteCommand(F("at+psk=ingodwetrust"))){
    16dc:	8d e4       	ldi	r24, 0x4D	; 77
    16de:	92 e0       	ldi	r25, 0x02	; 2
    16e0:	68 ee       	ldi	r22, 0xE8	; 232
    16e2:	73 e0       	ldi	r23, 0x03	; 3
    16e4:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    16e8:	88 23       	and	r24, r24
    16ea:	11 f1       	breq	.+68     	; 0x1730 <_ZN15GB_SerialHelper15startWifiSilentEv+0xda>
        return false;
      }  

      // at+ipstatic=<ip>,<mask>,<gateway>,<dns server1>(0 is valid),<dns server2>(0 is valid)\r\n
      if (!wifiExecuteCommand(F("at+ipstatic=192.168.0.1,255.255.0.0,0.0.0.0,0,0"))){
    16ec:	8d e1       	ldi	r24, 0x1D	; 29
    16ee:	92 e0       	ldi	r25, 0x02	; 2
    16f0:	68 ee       	ldi	r22, 0xE8	; 232
    16f2:	73 e0       	ldi	r23, 0x03	; 3
    16f4:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    16f8:	88 23       	and	r24, r24
    16fa:	d1 f0       	breq	.+52     	; 0x1730 <_ZN15GB_SerialHelper15startWifiSilentEv+0xda>
        return false;
      }

      if (!wifiExecuteCommand(F("at+ipdhcp=1"), 5000)){
    16fc:	81 e1       	ldi	r24, 0x11	; 17
    16fe:	92 e0       	ldi	r25, 0x02	; 2
    1700:	68 e8       	ldi	r22, 0x88	; 136
    1702:	73 e1       	ldi	r23, 0x13	; 19
    1704:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    1708:	88 23       	and	r24, r24
    170a:	91 f0       	breq	.+36     	; 0x1730 <_ZN15GB_SerialHelper15startWifiSilentEv+0xda>
        return false;
      }

      if (!wifiExecuteCommand(F("at+ap=Growbox,1"), 5000)){ // Hidden
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	92 e0       	ldi	r25, 0x02	; 2
    1710:	68 e8       	ldi	r22, 0x88	; 136
    1712:	73 e1       	ldi	r23, 0x13	; 19
    1714:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    1718:	88 23       	and	r24, r24
    171a:	51 f0       	breq	.+20     	; 0x1730 <_ZN15GB_SerialHelper15startWifiSilentEv+0xda>
    }

    /*if (!wifiExecuteCommand(F("at+httpd_open"))){
     return false;
     }*/
    if (!wifiExecuteCommand(F("at+ltcp=80"))){
    171c:	86 ef       	ldi	r24, 0xF6	; 246
    171e:	91 e0       	ldi	r25, 0x01	; 1
    1720:	68 ee       	ldi	r22, 0xE8	; 232
    1722:	73 e0       	ldi	r23, 0x03	; 3
    1724:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    1728:	88 23       	and	r24, r24
    172a:	19 f0       	breq	.+6      	; 0x1732 <_ZN15GB_SerialHelper15startWifiSilentEv+0xdc>
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	08 95       	ret
    1730:	80 e0       	ldi	r24, 0x00	; 0
      return false;
    }

    return true;
  }
    1732:	08 95       	ret

00001734 <_ZN15GB_SerialHelper9startWifiEv>:
      startWifi();
    }
  }

  static boolean startWifi(){
    showWifiStatus(F("Starting..."));
    1734:	8a ee       	ldi	r24, 0xEA	; 234
    1736:	91 e0       	ldi	r25, 0x01	; 1
    1738:	61 e0       	ldi	r22, 0x01	; 1
    173a:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
    boolean isLoaded = startWifiSilent();
    173e:	0e 94 2b 0b 	call	0x1656	; 0x1656 <_ZN15GB_SerialHelper15startWifiSilentEv>
    if (isLoaded){
    1742:	88 23       	and	r24, r24
    1744:	31 f0       	breq	.+12     	; 0x1752 <_ZN15GB_SerialHelper9startWifiEv+0x1e>
      showWifiStatus(F("Started"));
    1746:	82 ee       	ldi	r24, 0xE2	; 226
    1748:	91 e0       	ldi	r25, 0x01	; 1
    174a:	61 e0       	ldi	r22, 0x01	; 1
    174c:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
    1750:	08 95       	ret
    } 
    else {
      showWifiStatus(F("Start failed"));
    1752:	85 ed       	ldi	r24, 0xD5	; 213
    1754:	91 e0       	ldi	r25, 0x01	; 1
    1756:	61 e0       	ldi	r22, 0x01	; 1
    1758:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
      s_restartWifi = true;
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	80 93 b1 01 	sts	0x01B1, r24
    }
  }
    1762:	08 95       	ret

00001764 <_ZN15GB_SerialHelper15closeConnectionEh>:
    boolean rez = wifiExecuteCommand();
    s_restartWifiIfNoResponseAutomatically = true;
    return rez;
  }

  static boolean closeConnection(const byte portDescriptor){
    1764:	ff 92       	push	r15
    1766:	0f 93       	push	r16
    1768:	1f 93       	push	r17
    176a:	f8 2e       	mov	r15, r24
    Serial.print(F("at+cls="));
    176c:	0d eb       	ldi	r16, 0xBD	; 189
    176e:	13 e0       	ldi	r17, 0x03	; 3
    1770:	c8 01       	movw	r24, r16
    1772:	69 e6       	ldi	r22, 0x69	; 105
    1774:	76 e0       	ldi	r23, 0x06	; 6
    1776:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(portDescriptor);
    177a:	c8 01       	movw	r24, r16
    177c:	6f 2d       	mov	r22, r15
    177e:	4a e0       	ldi	r20, 0x0A	; 10
    1780:	50 e0       	ldi	r21, 0x00	; 0
    1782:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <_ZN5Print5printEhi>
    return wifiExecuteCommand(); 
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	68 ee       	ldi	r22, 0xE8	; 232
    178c:	73 e0       	ldi	r23, 0x03	; 3
    178e:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
  }
    1792:	1f 91       	pop	r17
    1794:	0f 91       	pop	r16
    1796:	ff 90       	pop	r15
    1798:	08 95       	ret

0000179a <_Z18updateBreezeStatusv>:
    179a:	8d e0       	ldi	r24, 0x0D	; 13
    179c:	0e 94 71 31 	call	0x62e2	; 0x62e2 <digitalRead>
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	89 2b       	or	r24, r25
    17a4:	09 f4       	brne	.+2      	; 0x17a8 <_Z18updateBreezeStatusv+0xe>
    17a6:	61 e0       	ldi	r22, 0x01	; 1
    17a8:	8d e0       	ldi	r24, 0x0D	; 13
    17aa:	0e 94 1d 31 	call	0x623a	; 0x623a <digitalWrite>
    17ae:	08 95       	ret

000017b0 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>:
#define GB_PrintDirty_h

class GB_PrintDirty {
public:

  static String getFixedDigitsString(const int number, const byte numberOfDigits){
    17b0:	8f 92       	push	r8
    17b2:	9f 92       	push	r9
    17b4:	af 92       	push	r10
    17b6:	bf 92       	push	r11
    17b8:	cf 92       	push	r12
    17ba:	df 92       	push	r13
    17bc:	ef 92       	push	r14
    17be:	ff 92       	push	r15
    17c0:	0f 93       	push	r16
    17c2:	1f 93       	push	r17
    17c4:	df 93       	push	r29
    17c6:	cf 93       	push	r28
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	27 97       	sbiw	r28, 0x07	; 7
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	f8 94       	cli
    17d2:	de bf       	out	0x3e, r29	; 62
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	cd bf       	out	0x3d, r28	; 61
    17d8:	4c 01       	movw	r8, r24
    17da:	5b 01       	movw	r10, r22
    17dc:	f4 2e       	mov	r15, r20
    String out;
    17de:	8e 01       	movw	r16, r28
    17e0:	0f 5f       	subi	r16, 0xFF	; 255
    17e2:	1f 4f       	sbci	r17, 0xFF	; 255
    17e4:	c8 01       	movw	r24, r16
    17e6:	60 e0       	ldi	r22, 0x00	; 0
    17e8:	71 e0       	ldi	r23, 0x01	; 1
    17ea:	0e 94 07 38 	call	0x700e	; 0x700e <_ZN6StringC1EPKc>
    17ee:	cc 24       	eor	r12, r12
    17f0:	dd 24       	eor	r13, r13
    for (int i = 0; i< numberOfDigits; i++){
    17f2:	ef 2c       	mov	r14, r15
    17f4:	ff 24       	eor	r15, r15
    17f6:	07 c0       	rjmp	.+14     	; 0x1806 <_ZN13GB_PrintDirty20getFixedDigitsStringEih+0x56>
    17f8:	c8 01       	movw	r24, r16
    17fa:	60 e3       	ldi	r22, 0x30	; 48
    17fc:	0e 94 a3 37 	call	0x6f46	; 0x6f46 <_ZN6String6concatEc>
    1800:	08 94       	sec
    1802:	c1 1c       	adc	r12, r1
    1804:	d1 1c       	adc	r13, r1
    1806:	ce 14       	cp	r12, r14
    1808:	df 04       	cpc	r13, r15
    180a:	b4 f3       	brlt	.-20     	; 0x17f8 <_ZN13GB_PrintDirty20getFixedDigitsStringEih+0x48>
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
    180c:	c8 01       	movw	r24, r16
    180e:	b5 01       	movw	r22, r10
    1810:	0e 94 46 37 	call	0x6e8c	; 0x6e8c <_ZN6String6concatEi>
      out +='0';
    }
    out += number;
    return out.substring(out.length()-numberOfDigits);
    1814:	4d 81       	ldd	r20, Y+5	; 0x05
    1816:	5e 81       	ldd	r21, Y+6	; 0x06
    1818:	4e 19       	sub	r20, r14
    181a:	5f 09       	sbc	r21, r15
    181c:	c4 01       	movw	r24, r8
    181e:	b8 01       	movw	r22, r16
    1820:	0e 94 cc 38 	call	0x7198	; 0x7198 <_ZNK6String9substringEj>
    1824:	c8 01       	movw	r24, r16
    1826:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
  }
    182a:	c4 01       	movw	r24, r8
    182c:	27 96       	adiw	r28, 0x07	; 7
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	cf 91       	pop	r28
    183a:	df 91       	pop	r29
    183c:	1f 91       	pop	r17
    183e:	0f 91       	pop	r16
    1840:	ff 90       	pop	r15
    1842:	ef 90       	pop	r14
    1844:	df 90       	pop	r13
    1846:	cf 90       	pop	r12
    1848:	bf 90       	pop	r11
    184a:	af 90       	pop	r10
    184c:	9f 90       	pop	r9
    184e:	8f 90       	pop	r8
    1850:	08 95       	ret

00001852 <_ZN13GB_PrintDirty13getTimeStringEm>:
    out += getFixedDigitsString(temp,2);
    return out;
  }


  static String getTimeString(time_t time){
    1852:	cf 92       	push	r12
    1854:	df 92       	push	r13
    1856:	ef 92       	push	r14
    1858:	ff 92       	push	r15
    185a:	0f 93       	push	r16
    185c:	1f 93       	push	r17
    185e:	df 93       	push	r29
    1860:	cf 93       	push	r28
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
    1866:	e1 97       	sbiw	r28, 0x31	; 49
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	f8 94       	cli
    186c:	de bf       	out	0x3e, r29	; 62
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	cd bf       	out	0x3d, r28	; 61
    1872:	d8 2e       	mov	r13, r24
    1874:	c9 2e       	mov	r12, r25
    1876:	7a 01       	movw	r14, r20
    1878:	8b 01       	movw	r16, r22
    String out;
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	71 e0       	ldi	r23, 0x01	; 1
    187e:	0e 94 07 38 	call	0x700e	; 0x700e <_ZN6StringC1EPKc>

    tmElements_t tm;
    breakTime(time, tm);
    1882:	c8 01       	movw	r24, r16
    1884:	b7 01       	movw	r22, r14
    1886:	ae 01       	movw	r20, r28
    1888:	4f 5f       	subi	r20, 0xFF	; 255
    188a:	5f 4f       	sbci	r21, 0xFF	; 255
    188c:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_Z9breakTimemR12tmElements_t>
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1890:	8d 2d       	mov	r24, r13
    1892:	9c 2d       	mov	r25, r12
    1894:	6b e5       	ldi	r22, 0x5B	; 91
    1896:	0e 94 a3 37 	call	0x6f46	; 0x6f46 <_ZN6String6concatEc>

    out += '[';
    out += getFixedDigitsString(tm.Hour, 2);
    189a:	8e 01       	movw	r16, r28
    189c:	08 5f       	subi	r16, 0xF8	; 248
    189e:	1f 4f       	sbci	r17, 0xFF	; 255
    18a0:	6b 81       	ldd	r22, Y+3	; 0x03
    18a2:	c8 01       	movw	r24, r16
    18a4:	70 e0       	ldi	r23, 0x00	; 0
    18a6:	42 e0       	ldi	r20, 0x02	; 2
    18a8:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    18ac:	8d 2d       	mov	r24, r13
    18ae:	9c 2d       	mov	r25, r12
    18b0:	b8 01       	movw	r22, r16
    18b2:	0e 94 b6 37 	call	0x6f6c	; 0x6f6c <_ZN6String6concatERKS_>
    18b6:	c8 01       	movw	r24, r16
    18b8:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    18bc:	8d 2d       	mov	r24, r13
    18be:	9c 2d       	mov	r25, r12
    18c0:	6a e3       	ldi	r22, 0x3A	; 58
    18c2:	0e 94 a3 37 	call	0x6f46	; 0x6f46 <_ZN6String6concatEc>
    out += ':';
    out += getFixedDigitsString(tm.Minute, 2);
    18c6:	8e 01       	movw	r16, r28
    18c8:	01 5f       	subi	r16, 0xF1	; 241
    18ca:	1f 4f       	sbci	r17, 0xFF	; 255
    18cc:	6a 81       	ldd	r22, Y+2	; 0x02
    18ce:	c8 01       	movw	r24, r16
    18d0:	70 e0       	ldi	r23, 0x00	; 0
    18d2:	42 e0       	ldi	r20, 0x02	; 2
    18d4:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    18d8:	8d 2d       	mov	r24, r13
    18da:	9c 2d       	mov	r25, r12
    18dc:	b8 01       	movw	r22, r16
    18de:	0e 94 b6 37 	call	0x6f6c	; 0x6f6c <_ZN6String6concatERKS_>
    18e2:	c8 01       	movw	r24, r16
    18e4:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    18e8:	8d 2d       	mov	r24, r13
    18ea:	9c 2d       	mov	r25, r12
    18ec:	6a e3       	ldi	r22, 0x3A	; 58
    18ee:	0e 94 a3 37 	call	0x6f46	; 0x6f46 <_ZN6String6concatEc>
    out += ':';
    out += getFixedDigitsString(tm.Second, 2);
    18f2:	8e 01       	movw	r16, r28
    18f4:	0a 5e       	subi	r16, 0xEA	; 234
    18f6:	1f 4f       	sbci	r17, 0xFF	; 255
    18f8:	69 81       	ldd	r22, Y+1	; 0x01
    18fa:	c8 01       	movw	r24, r16
    18fc:	70 e0       	ldi	r23, 0x00	; 0
    18fe:	42 e0       	ldi	r20, 0x02	; 2
    1900:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1904:	8d 2d       	mov	r24, r13
    1906:	9c 2d       	mov	r25, r12
    1908:	b8 01       	movw	r22, r16
    190a:	0e 94 b6 37 	call	0x6f6c	; 0x6f6c <_ZN6String6concatERKS_>
    190e:	c8 01       	movw	r24, r16
    1910:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1914:	8d 2d       	mov	r24, r13
    1916:	9c 2d       	mov	r25, r12
    1918:	60 e2       	ldi	r22, 0x20	; 32
    191a:	0e 94 a3 37 	call	0x6f46	; 0x6f46 <_ZN6String6concatEc>
    out += ' ';
    out += getFixedDigitsString(tm.Day, 2);
    191e:	8e 01       	movw	r16, r28
    1920:	03 5e       	subi	r16, 0xE3	; 227
    1922:	1f 4f       	sbci	r17, 0xFF	; 255
    1924:	6d 81       	ldd	r22, Y+5	; 0x05
    1926:	c8 01       	movw	r24, r16
    1928:	70 e0       	ldi	r23, 0x00	; 0
    192a:	42 e0       	ldi	r20, 0x02	; 2
    192c:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1930:	8d 2d       	mov	r24, r13
    1932:	9c 2d       	mov	r25, r12
    1934:	b8 01       	movw	r22, r16
    1936:	0e 94 b6 37 	call	0x6f6c	; 0x6f6c <_ZN6String6concatERKS_>
    193a:	c8 01       	movw	r24, r16
    193c:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1940:	8d 2d       	mov	r24, r13
    1942:	9c 2d       	mov	r25, r12
    1944:	6e e2       	ldi	r22, 0x2E	; 46
    1946:	0e 94 a3 37 	call	0x6f46	; 0x6f46 <_ZN6String6concatEc>
    out +='.';
    out += getFixedDigitsString(tm.Month, 2);
    194a:	8e 01       	movw	r16, r28
    194c:	0c 5d       	subi	r16, 0xDC	; 220
    194e:	1f 4f       	sbci	r17, 0xFF	; 255
    1950:	6e 81       	ldd	r22, Y+6	; 0x06
    1952:	c8 01       	movw	r24, r16
    1954:	70 e0       	ldi	r23, 0x00	; 0
    1956:	42 e0       	ldi	r20, 0x02	; 2
    1958:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    195c:	8d 2d       	mov	r24, r13
    195e:	9c 2d       	mov	r25, r12
    1960:	b8 01       	movw	r22, r16
    1962:	0e 94 b6 37 	call	0x6f6c	; 0x6f6c <_ZN6String6concatERKS_>
    1966:	c8 01       	movw	r24, r16
    1968:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    196c:	8d 2d       	mov	r24, r13
    196e:	9c 2d       	mov	r25, r12
    1970:	6e e2       	ldi	r22, 0x2E	; 46
    1972:	0e 94 a3 37 	call	0x6f46	; 0x6f46 <_ZN6String6concatEc>
    out += '.';
    out += getFixedDigitsString(tmYearToCalendar(tm.Year), 4); 
    1976:	8e 01       	movw	r16, r28
    1978:	05 5d       	subi	r16, 0xD5	; 213
    197a:	1f 4f       	sbci	r17, 0xFF	; 255
    197c:	6f 81       	ldd	r22, Y+7	; 0x07
    197e:	70 e0       	ldi	r23, 0x00	; 0
    1980:	6e 54       	subi	r22, 0x4E	; 78
    1982:	78 4f       	sbci	r23, 0xF8	; 248
    1984:	c8 01       	movw	r24, r16
    1986:	44 e0       	ldi	r20, 0x04	; 4
    1988:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    198c:	8d 2d       	mov	r24, r13
    198e:	9c 2d       	mov	r25, r12
    1990:	b8 01       	movw	r22, r16
    1992:	0e 94 b6 37 	call	0x6f6c	; 0x6f6c <_ZN6String6concatERKS_>
    1996:	c8 01       	movw	r24, r16
    1998:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    199c:	8d 2d       	mov	r24, r13
    199e:	9c 2d       	mov	r25, r12
    19a0:	6d e5       	ldi	r22, 0x5D	; 93
    19a2:	0e 94 a3 37 	call	0x6f46	; 0x6f46 <_ZN6String6concatEc>
    out += ']';
    return out;
  } 
    19a6:	8d 2d       	mov	r24, r13
    19a8:	9c 2d       	mov	r25, r12
    19aa:	e1 96       	adiw	r28, 0x31	; 49
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	cd bf       	out	0x3d, r28	; 61
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	1f 91       	pop	r17
    19bc:	0f 91       	pop	r16
    19be:	ff 90       	pop	r15
    19c0:	ef 90       	pop	r14
    19c2:	df 90       	pop	r13
    19c4:	cf 90       	pop	r12
    19c6:	08 95       	ret

000019c8 <_ZN9GB_Logger18getLogRecordSuffixERK9LogRecord>:
    else {
      return F("Unknown");
    }
  }
  
  static String getLogRecordSuffix(const LogRecord &logRecord){        
    19c8:	df 92       	push	r13
    19ca:	ef 92       	push	r14
    19cc:	ff 92       	push	r15
    19ce:	0f 93       	push	r16
    19d0:	1f 93       	push	r17
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
    19da:	2e 97       	sbiw	r28, 0x0e	; 14
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	f8 94       	cli
    19e0:	de bf       	out	0x3e, r29	; 62
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	cd bf       	out	0x3d, r28	; 61
    19e6:	e8 2e       	mov	r14, r24
    19e8:	d9 2e       	mov	r13, r25
    19ea:	8b 01       	movw	r16, r22
    String out;
    19ec:	60 e0       	ldi	r22, 0x00	; 0
    19ee:	71 e0       	ldi	r23, 0x01	; 1
    19f0:	0e 94 07 38 	call	0x700e	; 0x700e <_ZN6StringC1EPKc>
  }
  static boolean isError(const LogRecord &logRecord){
    return (logRecord.data & B11000000) == B01000000;
  }
  static boolean isTemperature(const LogRecord &logRecord){
    return (logRecord.data & B11000000) == B11000000;
    19f4:	f8 01       	movw	r30, r16
    19f6:	f4 80       	ldd	r15, Z+4	; 0x04
    }
  }
  
  static String getLogRecordSuffix(const LogRecord &logRecord){        
    String out;
    if (isTemperature(logRecord)) {
    19f8:	8f 2d       	mov	r24, r15
    19fa:	80 7c       	andi	r24, 0xC0	; 192
    19fc:	80 3c       	cpi	r24, 0xC0	; 192
    19fe:	39 f5       	brne	.+78     	; 0x1a4e <_ZN9GB_Logger18getLogRecordSuffixERK9LogRecord+0x86>
      byte temperature = (logRecord.data & B00111111);
      out += flashStringLoad(F(" ["));
    1a00:	8e 01       	movw	r16, r28
    1a02:	0f 5f       	subi	r16, 0xFF	; 255
    1a04:	1f 4f       	sbci	r17, 0xFF	; 255
    1a06:	c8 01       	movw	r24, r16
    1a08:	6b e3       	ldi	r22, 0x3B	; 59
    1a0a:	71 e0       	ldi	r23, 0x01	; 1
    1a0c:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZL15flashStringLoadPKc>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1a10:	8e 2d       	mov	r24, r14
    1a12:	9d 2d       	mov	r25, r13
    1a14:	b8 01       	movw	r22, r16
    1a16:	0e 94 b6 37 	call	0x6f6c	; 0x6f6c <_ZN6String6concatERKS_>
    1a1a:	c8 01       	movw	r24, r16
    1a1c:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
    1a20:	ff e3       	ldi	r31, 0x3F	; 63
    1a22:	ff 22       	and	r15, r31
    1a24:	8e 2d       	mov	r24, r14
    1a26:	9d 2d       	mov	r25, r13
    1a28:	6f 2d       	mov	r22, r15
    1a2a:	0e 94 77 37 	call	0x6eee	; 0x6eee <_ZN6String6concatEh>
  }
  return str; 
}

static String flashStringLoad(const __FlashStringHelper* fstr){ 
  return flashStringLoad((const char PROGMEM*) fstr);
    1a2e:	8e 01       	movw	r16, r28
    1a30:	08 5f       	subi	r16, 0xF8	; 248
    1a32:	1f 4f       	sbci	r17, 0xFF	; 255
      out += temperature;
      out += flashStringLoad(F("] C"));
    1a34:	c8 01       	movw	r24, r16
    1a36:	67 e3       	ldi	r22, 0x37	; 55
    1a38:	71 e0       	ldi	r23, 0x01	; 1
    1a3a:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZL15flashStringLoadPKc>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1a3e:	8e 2d       	mov	r24, r14
    1a40:	9d 2d       	mov	r25, r13
    1a42:	b8 01       	movw	r22, r16
    1a44:	0e 94 b6 37 	call	0x6f6c	; 0x6f6c <_ZN6String6concatERKS_>
    1a48:	c8 01       	movw	r24, r16
    1a4a:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
    }
    //Serial.print(F(" HEX: "));
    //GB_PrintDirty::printRAM(&((LogRecord)logRecord), sizeof(LogRecord));  

    return out;
  }
    1a4e:	8e 2d       	mov	r24, r14
    1a50:	9d 2d       	mov	r25, r13
    1a52:	2e 96       	adiw	r28, 0x0e	; 14
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	f8 94       	cli
    1a58:	de bf       	out	0x3e, r29	; 62
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	cd bf       	out	0x3d, r28	; 61
    1a5e:	cf 91       	pop	r28
    1a60:	df 91       	pop	r29
    1a62:	1f 91       	pop	r17
    1a64:	0f 91       	pop	r16
    1a66:	ff 90       	pop	r15
    1a68:	ef 90       	pop	r14
    1a6a:	df 90       	pop	r13
    1a6c:	08 95       	ret

00001a6e <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh>:
  }


private:

  static void printDirtyLogRecord(const LogRecord &logRecord, const __FlashStringHelper* description, const boolean isStored, const byte temperature = 0xFF){
    1a6e:	af 92       	push	r10
    1a70:	bf 92       	push	r11
    1a72:	cf 92       	push	r12
    1a74:	df 92       	push	r13
    1a76:	ef 92       	push	r14
    1a78:	ff 92       	push	r15
    1a7a:	0f 93       	push	r16
    1a7c:	1f 93       	push	r17
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
    1a86:	6c 97       	sbiw	r28, 0x1c	; 28
    1a88:	0f b6       	in	r0, 0x3f	; 63
    1a8a:	f8 94       	cli
    1a8c:	de bf       	out	0x3e, r29	; 62
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	cd bf       	out	0x3d, r28	; 61
    1a92:	6c 01       	movw	r12, r24
    1a94:	5b 01       	movw	r10, r22
    1a96:	04 2f       	mov	r16, r20
    if (!GB_SerialHelper::useSerialMonitor) {
    1a98:	80 91 af 01 	lds	r24, 0x01AF
    1a9c:	88 23       	and	r24, r24
    1a9e:	09 f4       	brne	.+2      	; 0x1aa2 <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh+0x34>
    1aa0:	61 c0       	rjmp	.+194    	; 0x1b64 <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh+0xf6>
      return;
    }
    Serial.print(F("LOG> ")); 
    1aa2:	8d eb       	ldi	r24, 0xBD	; 189
    1aa4:	93 e0       	ldi	r25, 0x03	; 3
    1aa6:	61 e3       	ldi	r22, 0x31	; 49
    1aa8:	71 e0       	ldi	r23, 0x01	; 1
    1aaa:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
    if (!isStored) {
    1aae:	00 23       	and	r16, r16
    1ab0:	31 f4       	brne	.+12     	; 0x1abe <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh+0x50>
      Serial.print(F("NOT STORED "));
    1ab2:	8d eb       	ldi	r24, 0xBD	; 189
    1ab4:	93 e0       	ldi	r25, 0x03	; 3
    1ab6:	65 e2       	ldi	r22, 0x25	; 37
    1ab8:	71 e0       	ldi	r23, 0x01	; 1
    1aba:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
    GB_StorageHelper::getLogRecordByIndex(index, logRecord);
    return logRecord;
  }

  static String getLogRecordPrefix(const LogRecord &logRecord){        
    String out;
    1abe:	7e 01       	movw	r14, r28
    1ac0:	08 94       	sec
    1ac2:	e1 1c       	adc	r14, r1
    1ac4:	f1 1c       	adc	r15, r1
    1ac6:	c7 01       	movw	r24, r14
    1ac8:	60 e0       	ldi	r22, 0x00	; 0
    1aca:	71 e0       	ldi	r23, 0x01	; 1
    1acc:	0e 94 07 38 	call	0x700e	; 0x700e <_ZN6StringC1EPKc>
    out += GB_PrintDirty::getTimeString(logRecord.timeStamp);
    1ad0:	8e 01       	movw	r16, r28
    1ad2:	01 5f       	subi	r16, 0xF1	; 241
    1ad4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad6:	f6 01       	movw	r30, r12
    1ad8:	40 81       	ld	r20, Z
    1ada:	51 81       	ldd	r21, Z+1	; 0x01
    1adc:	62 81       	ldd	r22, Z+2	; 0x02
    1ade:	73 81       	ldd	r23, Z+3	; 0x03
    1ae0:	c8 01       	movw	r24, r16
    1ae2:	0e 94 29 0c 	call	0x1852	; 0x1852 <_ZN13GB_PrintDirty13getTimeStringEm>
    1ae6:	c7 01       	movw	r24, r14
    1ae8:	b8 01       	movw	r22, r16
    1aea:	0e 94 b6 37 	call	0x6f6c	; 0x6f6c <_ZN6String6concatERKS_>
    1aee:	c8 01       	movw	r24, r16
    1af0:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1af4:	c7 01       	movw	r24, r14
    1af6:	60 e2       	ldi	r22, 0x20	; 32
    1af8:	0e 94 a3 37 	call	0x6f46	; 0x6f46 <_ZN6String6concatEc>
    out += ' '; 
    out += GB_PrintDirty::getHEX(logRecord.data, true);
    1afc:	8e 01       	movw	r16, r28
    1afe:	0a 5e       	subi	r16, 0xEA	; 234
    1b00:	1f 4f       	sbci	r17, 0xFF	; 255
    1b02:	c8 01       	movw	r24, r16
    1b04:	f6 01       	movw	r30, r12
    1b06:	64 81       	ldd	r22, Z+4	; 0x04
    1b08:	41 e0       	ldi	r20, 0x01	; 1
    1b0a:	0e 94 2a 07 	call	0xe54	; 0xe54 <_ZN13GB_PrintDirty6getHEXEhh>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1b0e:	c7 01       	movw	r24, r14
    1b10:	b8 01       	movw	r22, r16
    1b12:	0e 94 b6 37 	call	0x6f6c	; 0x6f6c <_ZN6String6concatERKS_>
    1b16:	c8 01       	movw	r24, r16
    1b18:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1b1c:	c7 01       	movw	r24, r14
    1b1e:	60 e2       	ldi	r22, 0x20	; 32
    1b20:	0e 94 a3 37 	call	0x6f46	; 0x6f46 <_ZN6String6concatEc>
    }
    Serial.print(F("LOG> ")); 
    if (!isStored) {
      Serial.print(F("NOT STORED "));
    }
    Serial.print(getLogRecordPrefix(logRecord));    
    1b24:	8d eb       	ldi	r24, 0xBD	; 189
    1b26:	93 e0       	ldi	r25, 0x03	; 3
    1b28:	b7 01       	movw	r22, r14
    1b2a:	0e 94 f8 35 	call	0x6bf0	; 0x6bf0 <_ZN5Print5printERK6String>
    1b2e:	c7 01       	movw	r24, r14
    1b30:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
    Serial.print(description);
    1b34:	8d eb       	ldi	r24, 0xBD	; 189
    1b36:	93 e0       	ldi	r25, 0x03	; 3
    1b38:	b5 01       	movw	r22, r10
    1b3a:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(getLogRecordSuffix(logRecord));  
    1b3e:	8e 01       	movw	r16, r28
    1b40:	08 5f       	subi	r16, 0xF8	; 248
    1b42:	1f 4f       	sbci	r17, 0xFF	; 255
    1b44:	c8 01       	movw	r24, r16
    1b46:	b6 01       	movw	r22, r12
    1b48:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <_ZN9GB_Logger18getLogRecordSuffixERK9LogRecord>
    1b4c:	8d eb       	ldi	r24, 0xBD	; 189
    1b4e:	93 e0       	ldi	r25, 0x03	; 3
    1b50:	b8 01       	movw	r22, r16
    1b52:	0e 94 f8 35 	call	0x6bf0	; 0x6bf0 <_ZN5Print5printERK6String>
    1b56:	c8 01       	movw	r24, r16
    1b58:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>

    Serial.println();      
    1b5c:	8d eb       	ldi	r24, 0xBD	; 189
    1b5e:	93 e0       	ldi	r25, 0x03	; 3
    1b60:	0e 94 a0 34 	call	0x6940	; 0x6940 <_ZN5Print7printlnEv>
  }
    1b64:	6c 96       	adiw	r28, 0x1c	; 28
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	f8 94       	cli
    1b6a:	de bf       	out	0x3e, r29	; 62
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	cd bf       	out	0x3d, r28	; 61
    1b70:	cf 91       	pop	r28
    1b72:	df 91       	pop	r29
    1b74:	1f 91       	pop	r17
    1b76:	0f 91       	pop	r16
    1b78:	ff 90       	pop	r15
    1b7a:	ef 90       	pop	r14
    1b7c:	df 90       	pop	r13
    1b7e:	cf 90       	pop	r12
    1b80:	bf 90       	pop	r11
    1b82:	af 90       	pop	r10
    1b84:	08 95       	ret

00001b86 <_ZN9GB_Logger8logEventER5Event>:
public:

  // Normal event uses uses format [00DDDDDD]
  //   00 - prefix for normal events 
  //   DDDDDD - event identificator
  static void logEvent(Event &event){
    1b86:	ef 92       	push	r14
    1b88:	ff 92       	push	r15
    1b8a:	0f 93       	push	r16
    1b8c:	1f 93       	push	r17
    1b8e:	df 93       	push	r29
    1b90:	cf 93       	push	r28
    1b92:	00 d0       	rcall	.+0      	; 0x1b94 <_ZN9GB_Logger8logEventER5Event+0xe>
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <_ZN9GB_Logger8logEventER5Event+0x10>
    1b96:	0f 92       	push	r0
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	7c 01       	movw	r14, r24
    LogRecord logRecord(event.index);
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	12 81       	ldd	r17, Z+2	; 0x02
struct LogRecord {
  time_t timeStamp;
  byte data;  

  LogRecord (byte data): 
  timeStamp(now()), data(data) {
    1ba2:	0e 94 08 21 	call	0x4210	; 0x4210 <_Z3nowv>
    1ba6:	69 83       	std	Y+1, r22	; 0x01
    1ba8:	7a 83       	std	Y+2, r23	; 0x02
    1baa:	8b 83       	std	Y+3, r24	; 0x03
    1bac:	9c 83       	std	Y+4, r25	; 0x04
    1bae:	1d 83       	std	Y+5, r17	; 0x05
    boolean isStored = GB_StorageHelper::storeLogRecord(logRecord);
    1bb0:	8e 01       	movw	r16, r28
    1bb2:	0f 5f       	subi	r16, 0xFF	; 255
    1bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb6:	c8 01       	movw	r24, r16
    1bb8:	0e 94 5d 06 	call	0xcba	; 0xcba <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord>
    1bbc:	48 2f       	mov	r20, r24
    printDirtyLogRecord(logRecord, event.description, isStored);
    1bbe:	f7 01       	movw	r30, r14
    1bc0:	63 81       	ldd	r22, Z+3	; 0x03
    1bc2:	74 81       	ldd	r23, Z+4	; 0x04
    1bc4:	c8 01       	movw	r24, r16
    1bc6:	2f ef       	ldi	r18, 0xFF	; 255
    1bc8:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh>
    GB_SerialHelper::printDirtyEnd();
    1bcc:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN15GB_SerialHelper13printDirtyEndEv>
  }
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	1f 91       	pop	r17
    1be0:	0f 91       	pop	r16
    1be2:	ff 90       	pop	r15
    1be4:	ef 90       	pop	r14
    1be6:	08 95       	ret

00001be8 <_Z10turnOffFanv>:
    1be8:	84 e0       	ldi	r24, 0x04	; 4
    1bea:	0e 94 71 31 	call	0x62e2	; 0x62e2 <digitalRead>
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	61 f0       	breq	.+24     	; 0x1c0a <_Z10turnOffFanv+0x22>
    1bf2:	84 e0       	ldi	r24, 0x04	; 4
    1bf4:	61 e0       	ldi	r22, 0x01	; 1
    1bf6:	0e 94 1d 31 	call	0x623a	; 0x623a <digitalWrite>
    1bfa:	85 e0       	ldi	r24, 0x05	; 5
    1bfc:	61 e0       	ldi	r22, 0x01	; 1
    1bfe:	0e 94 1d 31 	call	0x623a	; 0x623a <digitalWrite>
    1c02:	8b e9       	ldi	r24, 0x9B	; 155
    1c04:	91 e0       	ldi	r25, 0x01	; 1
    1c06:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_ZN9GB_Logger8logEventER5Event>
    1c0a:	08 95       	ret

00001c0c <_Z9turnOnFani>:
    1c0c:	cf 93       	push	r28
    1c0e:	df 93       	push	r29
    1c10:	ec 01       	movw	r28, r24
    1c12:	84 e0       	ldi	r24, 0x04	; 4
    1c14:	0e 94 71 31 	call	0x62e2	; 0x62e2 <digitalRead>
    1c18:	89 2b       	or	r24, r25
    1c1a:	79 f4       	brne	.+30     	; 0x1c3a <_Z9turnOnFani+0x2e>
    1c1c:	85 e0       	ldi	r24, 0x05	; 5
    1c1e:	0e 94 71 31 	call	0x62e2	; 0x62e2 <digitalRead>
    1c22:	8c 17       	cp	r24, r28
    1c24:	9d 07       	cpc	r25, r29
    1c26:	49 f4       	brne	.+18     	; 0x1c3a <_Z9turnOnFani+0x2e>
    1c28:	13 c0       	rjmp	.+38     	; 0x1c50 <_Z9turnOnFani+0x44>
    1c2a:	80 ea       	ldi	r24, 0xA0	; 160
    1c2c:	91 e0       	ldi	r25, 0x01	; 1
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <_Z9turnOnFani+0x28>
    1c30:	85 ea       	ldi	r24, 0xA5	; 165
    1c32:	91 e0       	ldi	r25, 0x01	; 1
    1c34:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_ZN9GB_Logger8logEventER5Event>
    1c38:	0b c0       	rjmp	.+22     	; 0x1c50 <_Z9turnOnFani+0x44>
    1c3a:	85 e0       	ldi	r24, 0x05	; 5
    1c3c:	6c 2f       	mov	r22, r28
    1c3e:	0e 94 1d 31 	call	0x623a	; 0x623a <digitalWrite>
    1c42:	84 e0       	ldi	r24, 0x04	; 4
    1c44:	60 e0       	ldi	r22, 0x00	; 0
    1c46:	0e 94 1d 31 	call	0x623a	; 0x623a <digitalWrite>
    1c4a:	21 97       	sbiw	r28, 0x01	; 1
    1c4c:	89 f7       	brne	.-30     	; 0x1c30 <_Z9turnOnFani+0x24>
    1c4e:	ed cf       	rjmp	.-38     	; 0x1c2a <_Z9turnOnFani+0x1e>
    1c50:	df 91       	pop	r29
    1c52:	cf 91       	pop	r28
    1c54:	08 95       	ret

00001c56 <_Z12turnOffLightv>:
    1c56:	83 e0       	ldi	r24, 0x03	; 3
    1c58:	0e 94 71 31 	call	0x62e2	; 0x62e2 <digitalRead>
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	41 f0       	breq	.+16     	; 0x1c70 <_Z12turnOffLightv+0x1a>
    1c60:	83 e0       	ldi	r24, 0x03	; 3
    1c62:	61 e0       	ldi	r22, 0x01	; 1
    1c64:	0e 94 1d 31 	call	0x623a	; 0x623a <digitalWrite>
    1c68:	81 e9       	ldi	r24, 0x91	; 145
    1c6a:	91 e0       	ldi	r25, 0x01	; 1
    1c6c:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_ZN9GB_Logger8logEventER5Event>
    1c70:	08 95       	ret

00001c72 <_Z11turnOnLightv>:
    1c72:	83 e0       	ldi	r24, 0x03	; 3
    1c74:	0e 94 71 31 	call	0x62e2	; 0x62e2 <digitalRead>
    1c78:	89 2b       	or	r24, r25
    1c7a:	41 f0       	breq	.+16     	; 0x1c8c <_Z11turnOnLightv+0x1a>
    1c7c:	83 e0       	ldi	r24, 0x03	; 3
    1c7e:	60 e0       	ldi	r22, 0x00	; 0
    1c80:	0e 94 1d 31 	call	0x623a	; 0x623a <digitalWrite>
    1c84:	86 e9       	ldi	r24, 0x96	; 150
    1c86:	91 e0       	ldi	r25, 0x01	; 1
    1c88:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_ZN9GB_Logger8logEventER5Event>
    1c8c:	08 95       	ret

00001c8e <_ZN9GB_Logger8logErrorER5Error>:

  // Error events uses format [01SSDDDD] 
  //   01 - prefix for error events 
  //   SS - length of errir seqence 
  //   DDDD - sequence data
  static void logError(Error &error){
    1c8e:	8f 92       	push	r8
    1c90:	9f 92       	push	r9
    1c92:	af 92       	push	r10
    1c94:	bf 92       	push	r11
    1c96:	cf 92       	push	r12
    1c98:	df 92       	push	r13
    1c9a:	ef 92       	push	r14
    1c9c:	ff 92       	push	r15
    1c9e:	0f 93       	push	r16
    1ca0:	1f 93       	push	r17
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	00 d0       	rcall	.+0      	; 0x1ca8 <_ZN9GB_Logger8logErrorER5Error+0x1a>
    1ca8:	00 d0       	rcall	.+0      	; 0x1caa <_ZN9GB_Logger8logErrorER5Error+0x1c>
    1caa:	0f 92       	push	r0
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	7c 01       	movw	r14, r24
    LogRecord logRecord(B01000000|(B00000011 | error.sequenceSize-1)<<4 | (B00001111 & error.sequence));
    1cb2:	fc 01       	movw	r30, r24
    1cb4:	12 81       	ldd	r17, Z+2	; 0x02
    1cb6:	1f 70       	andi	r17, 0x0F	; 15
    1cb8:	10 64       	ori	r17, 0x40	; 64
    1cba:	83 81       	ldd	r24, Z+3	; 0x03
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	83 60       	ori	r24, 0x03	; 3
    1cc2:	24 e0       	ldi	r18, 0x04	; 4
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	2a 95       	dec	r18
    1cca:	e1 f7       	brne	.-8      	; 0x1cc4 <_ZN9GB_Logger8logErrorER5Error+0x36>
    1ccc:	18 2b       	or	r17, r24
    1cce:	0e 94 08 21 	call	0x4210	; 0x4210 <_Z3nowv>
    1cd2:	69 83       	std	Y+1, r22	; 0x01
    1cd4:	7a 83       	std	Y+2, r23	; 0x02
    1cd6:	8b 83       	std	Y+3, r24	; 0x03
    1cd8:	9c 83       	std	Y+4, r25	; 0x04
    1cda:	1d 83       	std	Y+5, r17	; 0x05
    boolean isStoredNow = false;
    if(!error.isStored){
    1cdc:	f7 01       	movw	r30, r14
    1cde:	86 81       	ldd	r24, Z+6	; 0x06
    1ce0:	88 23       	and	r24, r24
    1ce2:	11 f0       	breq	.+4      	; 0x1ce8 <_ZN9GB_Logger8logErrorER5Error+0x5a>
    1ce4:	40 e0       	ldi	r20, 0x00	; 0
    1ce6:	07 c0       	rjmp	.+14     	; 0x1cf6 <_ZN9GB_Logger8logErrorER5Error+0x68>
      error.isStored = GB_StorageHelper::storeLogRecord(logRecord);
    1ce8:	ce 01       	movw	r24, r28
    1cea:	01 96       	adiw	r24, 0x01	; 1
    1cec:	0e 94 5d 06 	call	0xcba	; 0xcba <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord>
    1cf0:	f7 01       	movw	r30, r14
    1cf2:	86 83       	std	Z+6, r24	; 0x06
    1cf4:	41 e0       	ldi	r20, 0x01	; 1
      isStoredNow = true;
    } 
    printDirtyLogRecord(logRecord, error.description, isStoredNow);
    1cf6:	f7 01       	movw	r30, r14
    1cf8:	64 81       	ldd	r22, Z+4	; 0x04
    1cfa:	75 81       	ldd	r23, Z+5	; 0x05
    1cfc:	ce 01       	movw	r24, r28
    1cfe:	01 96       	adiw	r24, 0x01	; 1
    1d00:	2f ef       	ldi	r18, 0xFF	; 255
    1d02:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh>
    GB_SerialHelper::printDirtyEnd();
    1d06:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN15GB_SerialHelper13printDirtyEndEv>
    error.isStored = true;   
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	f7 01       	movw	r30, r14
    1d0e:	86 83       	std	Z+6, r24	; 0x06
    return (findByIndex(0xFF, 0xFF) == 0);
  }
  
  
void notify() {
  digitalWrite(ERROR_PIN, LOW);
    1d10:	8c e0       	ldi	r24, 0x0C	; 12
    1d12:	60 e0       	ldi	r22, 0x00	; 0
    1d14:	0e 94 1d 31 	call	0x623a	; 0x623a <digitalWrite>
  delay(1000);
    1d18:	68 ee       	ldi	r22, 0xE8	; 232
    1d1a:	73 e0       	ldi	r23, 0x03	; 3
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	0e 94 40 30 	call	0x6080	; 0x6080 <delay>
  for (int i = sequenceSize-1; i >= 0; i--){
    1d24:	f7 01       	movw	r30, r14
    1d26:	83 81       	ldd	r24, Z+3	; 0x03
    1d28:	00 e0       	ldi	r16, 0x00	; 0
    1d2a:	10 e0       	ldi	r17, 0x00	; 0

  // Error events uses format [01SSDDDD] 
  //   01 - prefix for error events 
  //   SS - length of errir seqence 
  //   DDDD - sequence data
  static void logError(Error &error){
    1d2c:	a8 2e       	mov	r10, r24
    1d2e:	bb 24       	eor	r11, r11
    1d30:	45 01       	movw	r8, r10
    1d32:	08 94       	sec
    1d34:	81 08       	sbc	r8, r1
    1d36:	91 08       	sbc	r9, r1
    1d38:	25 c0       	rjmp	.+74     	; 0x1d84 <_ZN9GB_Logger8logErrorER5Error+0xf6>
    digitalWrite(ERROR_PIN, HIGH);
    1d3a:	8c e0       	ldi	r24, 0x0C	; 12
    1d3c:	61 e0       	ldi	r22, 0x01	; 1
    1d3e:	0e 94 1d 31 	call	0x623a	; 0x623a <digitalWrite>
    if (bitRead(sequence, i)){
    1d42:	f7 01       	movw	r30, r14
    1d44:	82 81       	ldd	r24, Z+2	; 0x02
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <_ZN9GB_Logger8logErrorER5Error+0xc0>
    1d4a:	95 95       	asr	r25
    1d4c:	87 95       	ror	r24
    1d4e:	ca 94       	dec	r12
    1d50:	e2 f7       	brpl	.-8      	; 0x1d4a <_ZN9GB_Logger8logErrorER5Error+0xbc>
    1d52:	80 ff       	sbrs	r24, 0
    1d54:	05 c0       	rjmp	.+10     	; 0x1d60 <_ZN9GB_Logger8logErrorER5Error+0xd2>
      delay(ERROR_LONG_SIGNAL_MS);
    1d56:	60 e9       	ldi	r22, 0x90	; 144
    1d58:	71 e0       	ldi	r23, 0x01	; 1
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	04 c0       	rjmp	.+8      	; 0x1d68 <_ZN9GB_Logger8logErrorER5Error+0xda>
    } 
    else {
      delay(ERROR_SHORT_SIGNAL_MS);
    1d60:	64 e6       	ldi	r22, 0x64	; 100
    1d62:	70 e0       	ldi	r23, 0x00	; 0
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	0e 94 40 30 	call	0x6080	; 0x6080 <delay>
    } 
    digitalWrite(ERROR_PIN, LOW);
    1d6c:	8c e0       	ldi	r24, 0x0C	; 12
    1d6e:	60 e0       	ldi	r22, 0x00	; 0
    1d70:	0e 94 1d 31 	call	0x623a	; 0x623a <digitalWrite>
    delay(ERROR_DELAY_BETWEEN_SIGNALS_MS);
    1d74:	66 e9       	ldi	r22, 0x96	; 150
    1d76:	70 e0       	ldi	r23, 0x00	; 0
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	0e 94 40 30 	call	0x6080	; 0x6080 <delay>
    1d80:	0f 5f       	subi	r16, 0xFF	; 255
    1d82:	1f 4f       	sbci	r17, 0xFF	; 255
    1d84:	64 01       	movw	r12, r8
    1d86:	c0 1a       	sub	r12, r16
    1d88:	d1 0a       	sbc	r13, r17
  
  
void notify() {
  digitalWrite(ERROR_PIN, LOW);
  delay(1000);
  for (int i = sequenceSize-1; i >= 0; i--){
    1d8a:	0a 15       	cp	r16, r10
    1d8c:	1b 05       	cpc	r17, r11
    1d8e:	a9 f6       	brne	.-86     	; 0x1d3a <_ZN9GB_Logger8logErrorER5Error+0xac>
      delay(ERROR_SHORT_SIGNAL_MS);
    } 
    digitalWrite(ERROR_PIN, LOW);
    delay(ERROR_DELAY_BETWEEN_SIGNALS_MS);
  }
  digitalWrite(ERROR_PIN, LOW);
    1d90:	8c e0       	ldi	r24, 0x0C	; 12
    1d92:	60 e0       	ldi	r22, 0x00	; 0
    1d94:	0e 94 1d 31 	call	0x623a	; 0x623a <digitalWrite>
  delay(1000);
    1d98:	68 ee       	ldi	r22, 0xE8	; 232
    1d9a:	73 e0       	ldi	r23, 0x03	; 3
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	0e 94 40 30 	call	0x6080	; 0x6080 <delay>
    } 
    printDirtyLogRecord(logRecord, error.description, isStoredNow);
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	cf 91       	pop	r28
    1db0:	df 91       	pop	r29
    1db2:	1f 91       	pop	r17
    1db4:	0f 91       	pop	r16
    1db6:	ff 90       	pop	r15
    1db8:	ef 90       	pop	r14
    1dba:	df 90       	pop	r13
    1dbc:	cf 90       	pop	r12
    1dbe:	bf 90       	pop	r11
    1dc0:	af 90       	pop	r10
    1dc2:	9f 90       	pop	r9
    1dc4:	8f 90       	pop	r8
    1dc6:	08 95       	ret

00001dc8 <_ZN13GB_Controller15checkFreeMemoryEv>:
    resetFunc(); //call
  }

  // discover-memory-overflow-errors-in-the-arduino-c-code
  static void checkFreeMemory(){
    if(freeMemory() < 200){ 
    1dc8:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <freeMemory>
    1dcc:	88 3c       	cpi	r24, 0xC8	; 200
    1dce:	91 05       	cpc	r25, r1
    1dd0:	2c f4       	brge	.+10     	; 0x1ddc <_ZN13GB_Controller15checkFreeMemoryEv+0x14>
      GB_Logger::logError(ERROR_MEMORY_LOW);   
    1dd2:	86 e7       	ldi	r24, 0x76	; 118
    1dd4:	91 e0       	ldi	r25, 0x01	; 1
    1dd6:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <_ZN9GB_Logger8logErrorER5Error>
    1dda:	08 95       	ret
  static boolean stopLogError(Error &error){
    if (error.isStored){
    1ddc:	80 91 7c 01 	lds	r24, 0x017C
    1de0:	88 23       	and	r24, r24
    1de2:	11 f0       	breq	.+4      	; 0x1de8 <_ZN13GB_Controller15checkFreeMemoryEv+0x20>
      error.isStored = false;
    1de4:	10 92 7c 01 	sts	0x017C, r1
    1de8:	08 95       	ret

00001dea <_ZN14GB_Thermometer14getTemperatureEh>:
    }

    return true;
  }

  static float getTemperature(boolean forceLog = false){
    1dea:	8f 92       	push	r8
    1dec:	9f 92       	push	r9
    1dee:	af 92       	push	r10
    1df0:	bf 92       	push	r11
    1df2:	cf 92       	push	r12
    1df4:	df 92       	push	r13
    1df6:	ef 92       	push	r14
    1df8:	ff 92       	push	r15
    1dfa:	0f 93       	push	r16
    1dfc:	1f 93       	push	r17
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	00 d0       	rcall	.+0      	; 0x1e04 <_ZN14GB_Thermometer14getTemperatureEh+0x1a>
    1e04:	00 d0       	rcall	.+0      	; 0x1e06 <_ZN14GB_Thermometer14getTemperatureEh+0x1c>
    1e06:	0f 92       	push	r0
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	c8 2e       	mov	r12, r24

    if (statisticsTemperatureCount == 0){
    1e0e:	20 91 08 02 	lds	r18, 0x0208
    1e12:	30 91 09 02 	lds	r19, 0x0209
    1e16:	21 15       	cp	r18, r1
    1e18:	31 05       	cpc	r19, r1
    1e1a:	49 f4       	brne	.+18     	; 0x1e2e <_ZN14GB_Thermometer14getTemperatureEh+0x44>
      return workingTemperature; 
    1e1c:	80 90 00 02 	lds	r8, 0x0200
    1e20:	90 90 01 02 	lds	r9, 0x0201
    1e24:	a0 90 02 02 	lds	r10, 0x0202
    1e28:	b0 90 03 02 	lds	r11, 0x0203
    1e2c:	5e c0       	rjmp	.+188    	; 0x1eea <_ZN14GB_Thermometer14getTemperatureEh+0x100>
    }

    float freshTemperature = statisticsTemperatureSumm/statisticsTemperatureCount;
    1e2e:	b9 01       	movw	r22, r18
    1e30:	88 27       	eor	r24, r24
    1e32:	77 fd       	sbrc	r23, 7
    1e34:	80 95       	com	r24
    1e36:	98 2f       	mov	r25, r24
    1e38:	0e 94 eb 3a 	call	0x75d6	; 0x75d6 <__floatsisf>
    1e3c:	9b 01       	movw	r18, r22
    1e3e:	ac 01       	movw	r20, r24
    1e40:	60 91 04 02 	lds	r22, 0x0204
    1e44:	70 91 05 02 	lds	r23, 0x0205
    1e48:	80 91 06 02 	lds	r24, 0x0206
    1e4c:	90 91 07 02 	lds	r25, 0x0207
    1e50:	0e 94 50 3a 	call	0x74a0	; 0x74a0 <__divsf3>
    1e54:	4b 01       	movw	r8, r22
    1e56:	5c 01       	movw	r10, r24

    if (((int)freshTemperature != (int)workingTemperature) || forceLog) {          
    1e58:	0e 94 b8 3a 	call	0x7570	; 0x7570 <__fixsfsi>
    1e5c:	7b 01       	movw	r14, r22
    1e5e:	8c 01       	movw	r16, r24
    1e60:	60 91 00 02 	lds	r22, 0x0200
    1e64:	70 91 01 02 	lds	r23, 0x0201
    1e68:	80 91 02 02 	lds	r24, 0x0202
    1e6c:	90 91 03 02 	lds	r25, 0x0203
    1e70:	0e 94 b8 3a 	call	0x7570	; 0x7570 <__fixsfsi>
    1e74:	e6 16       	cp	r14, r22
    1e76:	f7 06       	cpc	r15, r23
    1e78:	11 f4       	brne	.+4      	; 0x1e7e <_ZN14GB_Thermometer14getTemperatureEh+0x94>
    1e7a:	cc 20       	and	r12, r12
    1e7c:	f1 f0       	breq	.+60     	; 0x1eba <_ZN14GB_Thermometer14getTemperatureEh+0xd0>
      GB_Logger::logTemperature((byte)freshTemperature);
    1e7e:	c5 01       	movw	r24, r10
    1e80:	b4 01       	movw	r22, r8
    1e82:	0e 94 bd 3a 	call	0x757a	; 0x757a <__fixunssfsi>
    1e86:	6b 01       	movw	r12, r22
    1e88:	7c 01       	movw	r14, r24
    1e8a:	16 2f       	mov	r17, r22
    1e8c:	0e 94 08 21 	call	0x4210	; 0x4210 <_Z3nowv>
    1e90:	69 83       	std	Y+1, r22	; 0x01
    1e92:	7a 83       	std	Y+2, r23	; 0x02
    1e94:	8b 83       	std	Y+3, r24	; 0x03
    1e96:	9c 83       	std	Y+4, r25	; 0x04
    1e98:	10 6c       	ori	r17, 0xC0	; 192
    1e9a:	1d 83       	std	Y+5, r17	; 0x05
  // Termometer events uses format [11TTTTTT].
  //   11 - prefix for termometer events
  //   TTTTTT - temperature [0..2^6] = [0..64]
  static void logTemperature(byte temperature){
    LogRecord logRecord(B11000000|temperature);
    boolean isStored = GB_StorageHelper::storeLogRecord(logRecord);
    1e9c:	8e 01       	movw	r16, r28
    1e9e:	0f 5f       	subi	r16, 0xFF	; 255
    1ea0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea2:	c8 01       	movw	r24, r16
    1ea4:	0e 94 5d 06 	call	0xcba	; 0xcba <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord>
    1ea8:	48 2f       	mov	r20, r24
    printDirtyLogRecord(logRecord, FS(S_Temperature), isStored, temperature);
    1eaa:	c8 01       	movw	r24, r16
    1eac:	6b e8       	ldi	r22, 0x8B	; 139
    1eae:	72 e0       	ldi	r23, 0x02	; 2
    1eb0:	2c 2d       	mov	r18, r12
    1eb2:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh>
    GB_SerialHelper::printDirtyEnd();
    1eb6:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN15GB_SerialHelper13printDirtyEndEv>
    }

    workingTemperature = freshTemperature;
    1eba:	80 92 00 02 	sts	0x0200, r8
    1ebe:	90 92 01 02 	sts	0x0201, r9
    1ec2:	a0 92 02 02 	sts	0x0202, r10
    1ec6:	b0 92 03 02 	sts	0x0203, r11

    statisticsTemperatureSumm = 0.0;
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	a0 e0       	ldi	r26, 0x00	; 0
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	80 93 04 02 	sts	0x0204, r24
    1ed6:	90 93 05 02 	sts	0x0205, r25
    1eda:	a0 93 06 02 	sts	0x0206, r26
    1ede:	b0 93 07 02 	sts	0x0207, r27
    statisticsTemperatureCount = 0;
    1ee2:	10 92 09 02 	sts	0x0209, r1
    1ee6:	10 92 08 02 	sts	0x0208, r1

    return workingTemperature;
  }
    1eea:	b4 01       	movw	r22, r8
    1eec:	c5 01       	movw	r24, r10
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	cf 91       	pop	r28
    1efa:	df 91       	pop	r29
    1efc:	1f 91       	pop	r17
    1efe:	0f 91       	pop	r16
    1f00:	ff 90       	pop	r15
    1f02:	ef 90       	pop	r14
    1f04:	df 90       	pop	r13
    1f06:	cf 90       	pop	r12
    1f08:	bf 90       	pop	r11
    1f0a:	af 90       	pop	r10
    1f0c:	9f 90       	pop	r9
    1f0e:	8f 90       	pop	r8
    1f10:	08 95       	ret

00001f12 <_Z18updateGrowboxStatev>:
    1f12:	ef 92       	push	r14
    1f14:	ff 92       	push	r15
    1f16:	0f 93       	push	r16
    1f18:	1f 93       	push	r17
    1f1a:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZN13GB_Controller15checkFreeMemoryEv>
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN14GB_Thermometer14getTemperatureEh>
    1f24:	7b 01       	movw	r14, r22
    1f26:	8c 01       	movw	r16, r24
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	4c e0       	ldi	r20, 0x0C	; 12
    1f2e:	52 e4       	ldi	r21, 0x42	; 66
    1f30:	0e 94 9b 3b 	call	0x7736	; 0x7736 <__gesf2>
    1f34:	88 23       	and	r24, r24
    1f36:	5c f0       	brlt	.+22     	; 0x1f4e <_Z18updateGrowboxStatev+0x3c>
    1f38:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <_Z12turnOffLightv>
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <_Z9turnOnFani>
    1f44:	8f e6       	ldi	r24, 0x6F	; 111
    1f46:	91 e0       	ldi	r25, 0x01	; 1
    1f48:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <_ZN9GB_Logger8logErrorER5Error>
    1f4c:	45 c0       	rjmp	.+138    	; 0x1fd8 <_Z18updateGrowboxStatev+0xc6>
    1f4e:	80 91 03 01 	lds	r24, 0x0103
    1f52:	88 23       	and	r24, r24
    1f54:	b9 f0       	breq	.+46     	; 0x1f84 <_Z18updateGrowboxStatev+0x72>
    1f56:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <_Z11turnOnLightv>
    1f5a:	c8 01       	movw	r24, r16
    1f5c:	b7 01       	movw	r22, r14
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	48 eb       	ldi	r20, 0xB8	; 184
    1f64:	51 e4       	ldi	r21, 0x41	; 65
    1f66:	0e 94 4c 3a 	call	0x7498	; 0x7498 <__cmpsf2>
    1f6a:	88 23       	and	r24, r24
    1f6c:	74 f1       	brlt	.+92     	; 0x1fca <_Z18updateGrowboxStatev+0xb8>
    1f6e:	c8 01       	movw	r24, r16
    1f70:	b7 01       	movw	r22, r14
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	48 ee       	ldi	r20, 0xE8	; 232
    1f78:	51 e4       	ldi	r21, 0x41	; 65
    1f7a:	0e 94 9b 3b 	call	0x7736	; 0x7736 <__gesf2>
    1f7e:	18 16       	cp	r1, r24
    1f80:	24 f5       	brge	.+72     	; 0x1fca <_Z18updateGrowboxStatev+0xb8>
    1f82:	16 c0       	rjmp	.+44     	; 0x1fb0 <_Z18updateGrowboxStatev+0x9e>
    1f84:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <_Z12turnOffLightv>
    1f88:	c8 01       	movw	r24, r16
    1f8a:	b7 01       	movw	r22, r14
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	48 e9       	ldi	r20, 0x98	; 152
    1f92:	51 e4       	ldi	r21, 0x41	; 65
    1f94:	0e 94 4c 3a 	call	0x7498	; 0x7498 <__cmpsf2>
    1f98:	88 23       	and	r24, r24
    1f9a:	e4 f0       	brlt	.+56     	; 0x1fd4 <_Z18updateGrowboxStatev+0xc2>
    1f9c:	c8 01       	movw	r24, r16
    1f9e:	b7 01       	movw	r22, r14
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 ee       	ldi	r20, 0xE0	; 224
    1fa6:	51 e4       	ldi	r21, 0x41	; 65
    1fa8:	0e 94 9b 3b 	call	0x7736	; 0x7736 <__gesf2>
    1fac:	18 16       	cp	r1, r24
    1fae:	1c f4       	brge	.+6      	; 0x1fb6 <_Z18updateGrowboxStatev+0xa4>
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	0c c0       	rjmp	.+24     	; 0x1fce <_Z18updateGrowboxStatev+0xbc>
    1fb6:	c8 01       	movw	r24, r16
    1fb8:	b7 01       	movw	r22, r14
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	48 ec       	ldi	r20, 0xC8	; 200
    1fc0:	51 e4       	ldi	r21, 0x41	; 65
    1fc2:	0e 94 9b 3b 	call	0x7736	; 0x7736 <__gesf2>
    1fc6:	18 16       	cp	r1, r24
    1fc8:	2c f4       	brge	.+10     	; 0x1fd4 <_Z18updateGrowboxStatev+0xc2>
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <_Z9turnOnFani>
    1fd2:	02 c0       	rjmp	.+4      	; 0x1fd8 <_Z18updateGrowboxStatev+0xc6>
    1fd4:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <_Z10turnOffFanv>
    1fd8:	1f 91       	pop	r17
    1fda:	0f 91       	pop	r16
    1fdc:	ff 90       	pop	r15
    1fde:	ef 90       	pop	r14
    1fe0:	08 95       	ret

00001fe2 <_Z17switchToNightModev>:
    1fe2:	80 91 03 01 	lds	r24, 0x0103
    1fe6:	88 23       	and	r24, r24
    1fe8:	41 f0       	breq	.+16     	; 0x1ffa <_Z17switchToNightModev+0x18>
    1fea:	10 92 03 01 	sts	0x0103, r1
    1fee:	8c e8       	ldi	r24, 0x8C	; 140
    1ff0:	91 e0       	ldi	r25, 0x01	; 1
    1ff2:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_ZN9GB_Logger8logEventER5Event>
    1ff6:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <_Z18updateGrowboxStatev>
    1ffa:	08 95       	ret

00001ffc <_Z15switchToDayModev>:
    1ffc:	80 91 03 01 	lds	r24, 0x0103
    2000:	81 30       	cpi	r24, 0x01	; 1
    2002:	49 f0       	breq	.+18     	; 0x2016 <_Z15switchToDayModev+0x1a>
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	80 93 03 01 	sts	0x0103, r24
    200a:	87 e8       	ldi	r24, 0x87	; 135
    200c:	91 e0       	ldi	r25, 0x01	; 1
    200e:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_ZN9GB_Logger8logEventER5Event>
    2012:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <_Z18updateGrowboxStatev>
    2016:	08 95       	ret

00002018 <_ZN15GB_SerialHelper11checkSerialEhh>:

  static void updateSerialMonitorStatus(){
    checkSerial(true, false); // not interruption cause Serial print problems
  }

  static void checkSerial(boolean checkSerialMonitor, boolean checkWifi){
    2018:	cf 92       	push	r12
    201a:	df 92       	push	r13
    201c:	ef 92       	push	r14
    201e:	ff 92       	push	r15
    2020:	0f 93       	push	r16
    2022:	1f 93       	push	r17
    2024:	df 93       	push	r29
    2026:	cf 93       	push	r28
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
    202c:	27 97       	sbiw	r28, 0x07	; 7
    202e:	0f b6       	in	r0, 0x3f	; 63
    2030:	f8 94       	cli
    2032:	de bf       	out	0x3e, r29	; 62
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	cd bf       	out	0x3d, r28	; 61
    2038:	06 2f       	mov	r16, r22

    boolean oldUseSerialMonitor  = useSerialMonitor;
    203a:	c0 90 af 01 	lds	r12, 0x01AF
    boolean oldUseSerialWifi     = useSerialWifi;
    203e:	d0 90 b0 01 	lds	r13, 0x01B0
    boolean serialInUse          = (useSerialMonitor || useSerialWifi);
    2042:	cc 20       	and	r12, r12
    2044:	11 f0       	breq	.+4      	; 0x204a <_ZN15GB_SerialHelper11checkSerialEhh+0x32>
    2046:	11 e0       	ldi	r17, 0x01	; 1
    2048:	04 c0       	rjmp	.+8      	; 0x2052 <_ZN15GB_SerialHelper11checkSerialEhh+0x3a>
    204a:	9d 2d       	mov	r25, r13
    204c:	d1 10       	cpse	r13, r1
    204e:	91 e0       	ldi	r25, 0x01	; 1
    2050:	19 2f       	mov	r17, r25

    if (checkSerialMonitor){
    2052:	88 23       	and	r24, r24
    2054:	51 f0       	breq	.+20     	; 0x206a <_ZN15GB_SerialHelper11checkSerialEhh+0x52>
      useSerialMonitor = (digitalRead(USE_SERIAL_MONOTOR_PIN) == SERIAL_ON);
    2056:	8b e0       	ldi	r24, 0x0B	; 11
    2058:	0e 94 71 31 	call	0x62e2	; 0x62e2 <digitalRead>
    205c:	10 92 af 01 	sts	0x01AF, r1
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	19 f4       	brne	.+6      	; 0x206a <_ZN15GB_SerialHelper11checkSerialEhh+0x52>
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	80 93 af 01 	sts	0x01AF, r24
    }

    // Start serial, if we need
    if (!serialInUse && (useSerialMonitor || checkWifi)){
    206a:	11 23       	and	r17, r17
    206c:	a9 f4       	brne	.+42     	; 0x2098 <_ZN15GB_SerialHelper11checkSerialEhh+0x80>
    206e:	80 91 af 01 	lds	r24, 0x01AF
    2072:	88 23       	and	r24, r24
    2074:	19 f4       	brne	.+6      	; 0x207c <_ZN15GB_SerialHelper11checkSerialEhh+0x64>
    2076:	00 23       	and	r16, r16
    2078:	09 f4       	brne	.+2      	; 0x207c <_ZN15GB_SerialHelper11checkSerialEhh+0x64>
    207a:	b7 c0       	rjmp	.+366    	; 0x21ea <_ZN15GB_SerialHelper11checkSerialEhh+0x1d2>
      Serial.begin(115200);
    207c:	8d eb       	ldi	r24, 0xBD	; 189
    207e:	93 e0       	ldi	r25, 0x03	; 3
    2080:	40 e0       	ldi	r20, 0x00	; 0
    2082:	52 ec       	ldi	r21, 0xC2	; 194
    2084:	61 e0       	ldi	r22, 0x01	; 1
    2086:	70 e0       	ldi	r23, 0x00	; 0
    2088:	0e 94 4d 32 	call	0x649a	; 0x649a <_ZN14HardwareSerial5beginEm>
      while (!Serial) {
    208c:	8d eb       	ldi	r24, 0xBD	; 189
    208e:	93 e0       	ldi	r25, 0x03	; 3
    2090:	0e 94 e4 33 	call	0x67c8	; 0x67c8 <_ZN14HardwareSerialcvbEv>
    2094:	88 23       	and	r24, r24
    2096:	d1 f3       	breq	.-12     	; 0x208c <_ZN15GB_SerialHelper11checkSerialEhh+0x74>
    if (!serialInUse){
      return; 
    }

    boolean loadWifiConfiguration = false;
    if (checkWifi || s_restartWifi){
    2098:	00 23       	and	r16, r16
    209a:	29 f4       	brne	.+10     	; 0x20a6 <_ZN15GB_SerialHelper11checkSerialEhh+0x8e>
    209c:	80 91 b1 01 	lds	r24, 0x01B1
    20a0:	88 23       	and	r24, r24
    20a2:	09 f4       	brne	.+2      	; 0x20a6 <_ZN15GB_SerialHelper11checkSerialEhh+0x8e>
    20a4:	56 c0       	rjmp	.+172    	; 0x2152 <_ZN15GB_SerialHelper11checkSerialEhh+0x13a>
    20a6:	00 e0       	ldi	r16, 0x00	; 0
    20a8:	10 e0       	ldi	r17, 0x00	; 0
      for (int i = 0; i<2; i++){ // Sometimes first command returns ERROR, two attempts
        showWifiStatus(F("Restarting..."));
        cleanSerialBuffer();
        s_restartWifiIfNoResponseAutomatically = false;
        String input = wifiExecuteRawCommand(F("at+reset=0"), 500); // spec boot time 210
    20aa:	7e 01       	movw	r14, r28
    20ac:	08 94       	sec
    20ae:	e1 1c       	adc	r14, r1
    20b0:	f1 1c       	adc	r15, r1
    }

    boolean loadWifiConfiguration = false;
    if (checkWifi || s_restartWifi){
      for (int i = 0; i<2; i++){ // Sometimes first command returns ERROR, two attempts
        showWifiStatus(F("Restarting..."));
    20b2:	87 ec       	ldi	r24, 0xC7	; 199
    20b4:	91 e0       	ldi	r25, 0x01	; 1
    20b6:	61 e0       	ldi	r22, 0x01	; 1
    20b8:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
        cleanSerialBuffer();
    20bc:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN15GB_SerialHelper17cleanSerialBufferEv>
        s_restartWifiIfNoResponseAutomatically = false;
    20c0:	10 92 05 01 	sts	0x0105, r1
        String input = wifiExecuteRawCommand(F("at+reset=0"), 500); // spec boot time 210
    20c4:	c7 01       	movw	r24, r14
    20c6:	6c eb       	ldi	r22, 0xBC	; 188
    20c8:	71 e0       	ldi	r23, 0x01	; 1
    20ca:	44 ef       	ldi	r20, 0xF4	; 244
    20cc:	51 e0       	ldi	r21, 0x01	; 1
    20ce:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperi>
        s_restartWifiIfNoResponseAutomatically = true;
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	80 93 05 01 	sts	0x0105, r24

        useSerialWifi = flashStringStartsWith(input, S_WIFI_RESPONSE_WELLCOME);
    20d8:	c7 01       	movw	r24, r14
    20da:	6e e3       	ldi	r22, 0x3E	; 62
    20dc:	71 e0       	ldi	r23, 0x01	; 1
    20de:	0e 94 c3 07 	call	0xf86	; 0xf86 <_ZL21flashStringStartsWithRK6StringPKc>
    20e2:	80 93 b0 01 	sts	0x01B0, r24
        if (useSerialWifi) {
    20e6:	88 23       	and	r24, r24
    20e8:	61 f0       	breq	.+24     	; 0x2102 <_ZN15GB_SerialHelper11checkSerialEhh+0xea>
          s_restartWifi = false;
    20ea:	10 92 b1 01 	sts	0x01B1, r1
    20ee:	80 91 4a 01 	lds	r24, 0x014A
    20f2:	81 11       	cpse	r24, r1
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	18 2f       	mov	r17, r24
      return; 
    }

    boolean loadWifiConfiguration = false;
    if (checkWifi || s_restartWifi){
      for (int i = 0; i<2; i++){ // Sometimes first command returns ERROR, two attempts
    20f8:	ce 01       	movw	r24, r28
    20fa:	01 96       	adiw	r24, 0x01	; 1
    20fc:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
    2100:	29 c0       	rjmp	.+82     	; 0x2154 <_ZN15GB_SerialHelper11checkSerialEhh+0x13c>
          if(g_isGrowboxStarted){
            loadWifiConfiguration = true;
          }
          break;
        }
        if (useSerialMonitor && input.length() > 0){
    2102:	80 91 af 01 	lds	r24, 0x01AF
    2106:	88 23       	and	r24, r24
    2108:	d9 f0       	breq	.+54     	; 0x2140 <_ZN15GB_SerialHelper11checkSerialEhh+0x128>
    210a:	8d 81       	ldd	r24, Y+5	; 0x05
    210c:	9e 81       	ldd	r25, Y+6	; 0x06
    210e:	89 2b       	or	r24, r25
    2110:	b9 f0       	breq	.+46     	; 0x2140 <_ZN15GB_SerialHelper11checkSerialEhh+0x128>
          showWifiStatus(F("Not correct wellcome message: "), false);
    2112:	8d e9       	ldi	r24, 0x9D	; 157
    2114:	91 e0       	ldi	r25, 0x01	; 1
    2116:	60 e0       	ldi	r22, 0x00	; 0
    2118:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_ZN15GB_SerialHelper14showWifiStatusEPK19__FlashStringHelperh>
          GB_PrintDirty::printWithoutCRLF(input);
    211c:	c7 01       	movw	r24, r14
    211e:	0e 94 aa 08 	call	0x1154	; 0x1154 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String>
          Serial.print(FS(S_Next));
    2122:	8d eb       	ldi	r24, 0xBD	; 189
    2124:	93 e0       	ldi	r25, 0x03	; 3
    2126:	62 ee       	ldi	r22, 0xE2	; 226
    2128:	70 e0       	ldi	r23, 0x00	; 0
    212a:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
          GB_PrintDirty::printHEX(input); 
    212e:	c7 01       	movw	r24, r14
    2130:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN13GB_PrintDirty8printHEXERK6String>
          Serial.println();
    2134:	8d eb       	ldi	r24, 0xBD	; 189
    2136:	93 e0       	ldi	r25, 0x03	; 3
    2138:	0e 94 a0 34 	call	0x6940	; 0x6940 <_ZN5Print7printlnEv>
          printDirtyEnd();
    213c:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN15GB_SerialHelper13printDirtyEndEv>
      return; 
    }

    boolean loadWifiConfiguration = false;
    if (checkWifi || s_restartWifi){
      for (int i = 0; i<2; i++){ // Sometimes first command returns ERROR, two attempts
    2140:	c7 01       	movw	r24, r14
    2142:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
    2146:	0f 5f       	subi	r16, 0xFF	; 255
    2148:	1f 4f       	sbci	r17, 0xFF	; 255
    214a:	02 30       	cpi	r16, 0x02	; 2
    214c:	11 05       	cpc	r17, r1
    214e:	09 f0       	breq	.+2      	; 0x2152 <_ZN15GB_SerialHelper11checkSerialEhh+0x13a>
    2150:	b0 cf       	rjmp	.-160    	; 0x20b2 <_ZN15GB_SerialHelper11checkSerialEhh+0x9a>
    2152:	10 e0       	ldi	r17, 0x00	; 0
          printDirtyEnd();
        }
      }
    }

    if (useSerialMonitor != oldUseSerialMonitor){
    2154:	80 91 af 01 	lds	r24, 0x01AF
    2158:	8c 15       	cp	r24, r12
    215a:	b9 f0       	breq	.+46     	; 0x218a <_ZN15GB_SerialHelper11checkSerialEhh+0x172>
      Serial.print(F("Serial monitor: "));
    215c:	8d eb       	ldi	r24, 0xBD	; 189
    215e:	93 e0       	ldi	r25, 0x03	; 3
    2160:	6c e8       	ldi	r22, 0x8C	; 140
    2162:	71 e0       	ldi	r23, 0x01	; 1
    2164:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
      if (useSerialMonitor){
    2168:	80 91 af 01 	lds	r24, 0x01AF
    216c:	88 23       	and	r24, r24
    216e:	29 f0       	breq	.+10     	; 0x217a <_ZN15GB_SerialHelper11checkSerialEhh+0x162>
        Serial.println(FS(S_enabled));
    2170:	8d eb       	ldi	r24, 0xBD	; 189
    2172:	93 e0       	ldi	r25, 0x03	; 3
    2174:	62 e5       	ldi	r22, 0x52	; 82
    2176:	71 e0       	ldi	r23, 0x01	; 1
    2178:	04 c0       	rjmp	.+8      	; 0x2182 <_ZN15GB_SerialHelper11checkSerialEhh+0x16a>
      } 
      else {
        Serial.println(FS(S_disabled));
    217a:	8d eb       	ldi	r24, 0xBD	; 189
    217c:	93 e0       	ldi	r25, 0x03	; 3
    217e:	6b e5       	ldi	r22, 0x5B	; 91
    2180:	71 e0       	ldi	r23, 0x01	; 1
    2182:	0e 94 c0 34 	call	0x6980	; 0x6980 <_ZN5Print7printlnEPK19__FlashStringHelper>
      }
      printDirtyEnd();
    2186:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN15GB_SerialHelper13printDirtyEndEv>
    }
    if (useSerialWifi != oldUseSerialWifi && (useSerialMonitor || (useSerialMonitor != oldUseSerialMonitor ))){
    218a:	90 91 b0 01 	lds	r25, 0x01B0
    218e:	9d 15       	cp	r25, r13
    2190:	d9 f0       	breq	.+54     	; 0x21c8 <_ZN15GB_SerialHelper11checkSerialEhh+0x1b0>
    2192:	80 91 af 01 	lds	r24, 0x01AF
    2196:	88 23       	and	r24, r24
    2198:	11 f4       	brne	.+4      	; 0x219e <_ZN15GB_SerialHelper11checkSerialEhh+0x186>
    219a:	cc 20       	and	r12, r12
    219c:	a9 f0       	breq	.+42     	; 0x21c8 <_ZN15GB_SerialHelper11checkSerialEhh+0x1b0>
      if(useSerialWifi){ 
    219e:	99 23       	and	r25, r25
    21a0:	59 f0       	breq	.+22     	; 0x21b8 <_ZN15GB_SerialHelper11checkSerialEhh+0x1a0>
        Serial.print(F("Serial Wi-Fi:"));
    21a2:	8d eb       	ldi	r24, 0xBD	; 189
    21a4:	93 e0       	ldi	r25, 0x03	; 3
    21a6:	6e e7       	ldi	r22, 0x7E	; 126
    21a8:	71 e0       	ldi	r23, 0x01	; 1
    21aa:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.println(FS(S_connected)); // shows when useSerialMonitor=false
    21ae:	8d eb       	ldi	r24, 0xBD	; 189
    21b0:	93 e0       	ldi	r25, 0x03	; 3
    21b2:	65 e6       	ldi	r22, 0x65	; 101
    21b4:	71 e0       	ldi	r23, 0x01	; 1
    21b6:	04 c0       	rjmp	.+8      	; 0x21c0 <_ZN15GB_SerialHelper11checkSerialEhh+0x1a8>
      } 
      else {
        Serial.println(FS(S_disconnected));
    21b8:	8d eb       	ldi	r24, 0xBD	; 189
    21ba:	93 e0       	ldi	r25, 0x03	; 3
    21bc:	60 e7       	ldi	r22, 0x70	; 112
    21be:	71 e0       	ldi	r23, 0x01	; 1
    21c0:	0e 94 c0 34 	call	0x6980	; 0x6980 <_ZN5Print7printlnEPK19__FlashStringHelper>
      }
      printDirtyEnd();
    21c4:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN15GB_SerialHelper13printDirtyEndEv>
    }

    // Close Serial connection if nessesary
    boolean newSerialInUse = (useSerialMonitor || useSerialWifi);
    21c8:	80 91 af 01 	lds	r24, 0x01AF
    21cc:	88 23       	and	r24, r24
    21ce:	21 f4       	brne	.+8      	; 0x21d8 <_ZN15GB_SerialHelper11checkSerialEhh+0x1c0>
    21d0:	80 91 b0 01 	lds	r24, 0x01B0
    21d4:	88 23       	and	r24, r24
    21d6:	29 f0       	breq	.+10     	; 0x21e2 <_ZN15GB_SerialHelper11checkSerialEhh+0x1ca>
    if (!newSerialInUse){
      Serial.end();
      return;
    } 
    else if (loadWifiConfiguration){
    21d8:	11 23       	and	r17, r17
    21da:	39 f0       	breq	.+14     	; 0x21ea <_ZN15GB_SerialHelper11checkSerialEhh+0x1d2>
      startWifi();
    21dc:	0e 94 9a 0b 	call	0x1734	; 0x1734 <_ZN15GB_SerialHelper9startWifiEv>
    21e0:	04 c0       	rjmp	.+8      	; 0x21ea <_ZN15GB_SerialHelper11checkSerialEhh+0x1d2>
    }

    // Close Serial connection if nessesary
    boolean newSerialInUse = (useSerialMonitor || useSerialWifi);
    if (!newSerialInUse){
      Serial.end();
    21e2:	8d eb       	ldi	r24, 0xBD	; 189
    21e4:	93 e0       	ldi	r25, 0x03	; 3
    21e6:	0e 94 d4 32 	call	0x65a8	; 0x65a8 <_ZN14HardwareSerial3endEv>
      return;
    } 
    else if (loadWifiConfiguration){
      startWifi();
    }
  }
    21ea:	27 96       	adiw	r28, 0x07	; 7
    21ec:	0f b6       	in	r0, 0x3f	; 63
    21ee:	f8 94       	cli
    21f0:	de bf       	out	0x3e, r29	; 62
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	cd bf       	out	0x3d, r28	; 61
    21f6:	cf 91       	pop	r28
    21f8:	df 91       	pop	r29
    21fa:	1f 91       	pop	r17
    21fc:	0f 91       	pop	r16
    21fe:	ff 90       	pop	r15
    2200:	ef 90       	pop	r14
    2202:	df 90       	pop	r13
    2204:	cf 90       	pop	r12
    2206:	08 95       	ret

00002208 <_Z25updateSerialMonitorStatusv>:
    }
    //wifiExecuteCommand(F("at+con_status"));
  }

  static void updateSerialMonitorStatus(){
    checkSerial(true, false); // not interruption cause Serial print problems
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	60 e0       	ldi	r22, 0x00	; 0
    220c:	0e 94 0c 10 	call	0x2018	; 0x2018 <_ZN15GB_SerialHelper11checkSerialEhh>
    2210:	08 95       	ret

00002212 <_Z16updateWiFiStatusv>:
    s_wifiSID = _s_wifiSID;
    s_wifiPass = _s_wifiPass;
  }

  static void updateWiFiStatus(){
    if (s_restartWifi){
    2212:	80 91 b1 01 	lds	r24, 0x01B1
    2216:	88 23       	and	r24, r24
    2218:	21 f0       	breq	.+8      	; 0x2222 <_Z16updateWiFiStatusv+0x10>
      checkSerial(false, true);
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	61 e0       	ldi	r22, 0x01	; 1
    221e:	0e 94 0c 10 	call	0x2018	; 0x2018 <_ZN15GB_SerialHelper11checkSerialEhh>
    2222:	08 95       	ret

00002224 <_ZN14GB_Thermometer16updateStatisticsEv>:

    dallasTemperature.getAddress(oneWireAddress, 0); // search for devices on the bus and assign based on an index.
  }

  // TODO rename
  static boolean updateStatistics(){
    2224:	ef 92       	push	r14
    2226:	ff 92       	push	r15
    2228:	0f 93       	push	r16
    222a:	1f 93       	push	r17

    if(!dallasTemperature.requestTemperaturesByAddress(oneWireAddress)){
    222c:	85 ee       	ldi	r24, 0xE5	; 229
    222e:	91 e0       	ldi	r25, 0x01	; 1
    2230:	68 ef       	ldi	r22, 0xF8	; 248
    2232:	71 e0       	ldi	r23, 0x01	; 1
    2234:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <_ZN17DallasTemperature28requestTemperaturesByAddressEPh>
    2238:	88 23       	and	r24, r24
    223a:	19 f4       	brne	.+6      	; 0x2242 <_ZN14GB_Thermometer16updateStatisticsEv+0x1e>
      GB_Logger::logError(ERROR_TERMOMETER_DISCONNECTED);
    223c:	81 e6       	ldi	r24, 0x61	; 97
    223e:	91 e0       	ldi	r25, 0x01	; 1
    2240:	0e c0       	rjmp	.+28     	; 0x225e <_ZN14GB_Thermometer16updateStatisticsEv+0x3a>
      return false;
    };

    float freshTemperature = dallasTemperature.getTempC(oneWireAddress);
    2242:	85 ee       	ldi	r24, 0xE5	; 229
    2244:	91 e0       	ldi	r25, 0x01	; 1
    2246:	68 ef       	ldi	r22, 0xF8	; 248
    2248:	71 e0       	ldi	r23, 0x01	; 1
    224a:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <_ZN17DallasTemperature8getTempCEPh>
    224e:	7b 01       	movw	r14, r22
    2250:	8c 01       	movw	r16, r24

    if ((int)freshTemperature == 0){
    2252:	0e 94 b8 3a 	call	0x7570	; 0x7570 <__fixsfsi>
    2256:	67 2b       	or	r22, r23
    2258:	31 f4       	brne	.+12     	; 0x2266 <_ZN14GB_Thermometer16updateStatisticsEv+0x42>
      GB_Logger::logError(ERROR_TERMOMETER_ZERO_VALUE);  
    225a:	88 e6       	ldi	r24, 0x68	; 104
    225c:	91 e0       	ldi	r25, 0x01	; 1
    225e:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <_ZN9GB_Logger8logErrorER5Error>
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	39 c0       	rjmp	.+114    	; 0x22d8 <_ZN14GB_Thermometer16updateStatisticsEv+0xb4>
      return false;
    }

    statisticsTemperatureSumm += freshTemperature;
    2266:	60 91 04 02 	lds	r22, 0x0204
    226a:	70 91 05 02 	lds	r23, 0x0205
    226e:	80 91 06 02 	lds	r24, 0x0206
    2272:	90 91 07 02 	lds	r25, 0x0207
    2276:	a8 01       	movw	r20, r16
    2278:	97 01       	movw	r18, r14
    227a:	0e 94 e8 39 	call	0x73d0	; 0x73d0 <__addsf3>
    227e:	60 93 04 02 	sts	0x0204, r22
    2282:	70 93 05 02 	sts	0x0205, r23
    2286:	80 93 06 02 	sts	0x0206, r24
    228a:	90 93 07 02 	sts	0x0207, r25
    statisticsTemperatureCount++;
    228e:	20 91 08 02 	lds	r18, 0x0208
    2292:	30 91 09 02 	lds	r19, 0x0209
    2296:	2f 5f       	subi	r18, 0xFF	; 255
    2298:	3f 4f       	sbci	r19, 0xFF	; 255
    229a:	30 93 09 02 	sts	0x0209, r19
    229e:	20 93 08 02 	sts	0x0208, r18
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
  static boolean stopLogError(Error &error){
    if (error.isStored){
    22a2:	80 91 6e 01 	lds	r24, 0x016E
    22a6:	88 23       	and	r24, r24
    22a8:	11 f4       	brne	.+4      	; 0x22ae <_ZN14GB_Thermometer16updateStatisticsEv+0x8a>
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	03 c0       	rjmp	.+6      	; 0x22b4 <_ZN14GB_Thermometer16updateStatisticsEv+0x90>
      error.isStored = false;
    22ae:	10 92 6e 01 	sts	0x016E, r1
    22b2:	91 e0       	ldi	r25, 0x01	; 1
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
  static boolean stopLogError(Error &error){
    if (error.isStored){
    22b4:	80 91 67 01 	lds	r24, 0x0167
    22b8:	88 23       	and	r24, r24
    22ba:	19 f0       	breq	.+6      	; 0x22c2 <_ZN14GB_Thermometer16updateStatisticsEv+0x9e>
      error.isStored = false;
    22bc:	10 92 67 01 	sts	0x0167, r1
    22c0:	81 e0       	ldi	r24, 0x01	; 1

    boolean forceLog = 
      GB_Logger::stopLogError(ERROR_TERMOMETER_ZERO_VALUE) |
      GB_Logger::stopLogError(ERROR_TERMOMETER_DISCONNECTED); 
    if (forceLog) {
    22c2:	89 2b       	or	r24, r25
    22c4:	11 f0       	breq	.+4      	; 0x22ca <_ZN14GB_Thermometer16updateStatisticsEv+0xa6>
      getTemperature(true);
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	04 c0       	rjmp	.+8      	; 0x22d2 <_ZN14GB_Thermometer16updateStatisticsEv+0xae>
    }
    else if (statisticsTemperatureCount > 100){
    22ca:	25 36       	cpi	r18, 0x65	; 101
    22cc:	31 05       	cpc	r19, r1
    22ce:	1c f0       	brlt	.+6      	; 0x22d6 <_ZN14GB_Thermometer16updateStatisticsEv+0xb2>
      getTemperature(); // prevents overflow 
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN14GB_Thermometer14getTemperatureEh>
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    }

    return true;
  }
    22d8:	1f 91       	pop	r17
    22da:	0f 91       	pop	r16
    22dc:	ff 90       	pop	r15
    22de:	ef 90       	pop	r14
    22e0:	08 95       	ret

000022e2 <_Z27updateThermometerStatisticsv>:
    22e2:	0e 94 12 11 	call	0x2224	; 0x2224 <_ZN14GB_Thermometer16updateStatisticsEv>
    22e6:	08 95       	ret

000022e8 <_Z15printFreeMemoryv>:
    22e8:	0f 93       	push	r16
    22ea:	1f 93       	push	r17
    22ec:	0d eb       	ldi	r16, 0xBD	; 189
    22ee:	13 e0       	ldi	r17, 0x03	; 3
    22f0:	c8 01       	movw	r24, r16
    22f2:	60 e1       	ldi	r22, 0x10	; 16
    22f4:	71 e0       	ldi	r23, 0x01	; 1
    22f6:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
    22fa:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <freeMemory>
    22fe:	bc 01       	movw	r22, r24
    2300:	c8 01       	movw	r24, r16
    2302:	4a e0       	ldi	r20, 0x0A	; 10
    2304:	50 e0       	ldi	r21, 0x00	; 0
    2306:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <_ZN5Print5printEii>
    230a:	c8 01       	movw	r24, r16
    230c:	6e e1       	ldi	r22, 0x1E	; 30
    230e:	71 e0       	ldi	r23, 0x01	; 1
    2310:	0e 94 c0 34 	call	0x6980	; 0x6980 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2314:	1f 91       	pop	r17
    2316:	0f 91       	pop	r16
    2318:	08 95       	ret

0000231a <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_S1_>:
    if (*maxFreeMemory < currentFreeMemory){
      *maxFreeMemory = currentFreeMemory;
    }  
  }

  static boolean handleSerialEvent(String &input, boolean &isWifiRequest, byte &wifiPortDescriptor, String &postParams){
    231a:	6f 92       	push	r6
    231c:	7f 92       	push	r7
    231e:	8f 92       	push	r8
    2320:	9f 92       	push	r9
    2322:	af 92       	push	r10
    2324:	bf 92       	push	r11
    2326:	cf 92       	push	r12
    2328:	df 92       	push	r13
    232a:	ef 92       	push	r14
    232c:	ff 92       	push	r15
    232e:	0f 93       	push	r16
    2330:	1f 93       	push	r17
    2332:	df 93       	push	r29
    2334:	cf 93       	push	r28
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
    233a:	c2 50       	subi	r28, 0x02	; 2
    233c:	d2 40       	sbci	r29, 0x02	; 2
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	f8 94       	cli
    2342:	de bf       	out	0x3e, r29	; 62
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	cd bf       	out	0x3d, r28	; 61
    2348:	7c 01       	movw	r14, r24
    234a:	6b 01       	movw	r12, r22
    234c:	5a 01       	movw	r10, r20
    234e:	49 01       	movw	r8, r18

    int startupFreeMemory = freeMemory();
    2350:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <freeMemory>
    2354:	3c 01       	movw	r6, r24
//  Serial.println(FS(S_bytes));

    // Only easy initiated variables should be here
    boolean isReadError = false;

    input = String();
    2356:	8e 01       	movw	r16, r28
    2358:	0f 5f       	subi	r16, 0xFF	; 255
    235a:	1f 4f       	sbci	r17, 0xFF	; 255
    235c:	c8 01       	movw	r24, r16
    235e:	60 e0       	ldi	r22, 0x00	; 0
    2360:	71 e0       	ldi	r23, 0x01	; 1
    2362:	0e 94 07 38 	call	0x700e	; 0x700e <_ZN6StringC1EPKc>
    2366:	c7 01       	movw	r24, r14
    2368:	b8 01       	movw	r22, r16
    236a:	0e 94 d8 38 	call	0x71b0	; 0x71b0 <_ZN6StringaSERKS_>
    236e:	c8 01       	movw	r24, r16
    2370:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
    boolean isReserved = input.reserve(400);
    2374:	c7 01       	movw	r24, r14
    2376:	60 e9       	ldi	r22, 0x90	; 144
    2378:	71 e0       	ldi	r23, 0x01	; 1
    237a:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <_ZN6String7reserveEj>

    isWifiRequest = false; 
    237e:	f6 01       	movw	r30, r12
    2380:	10 82       	st	Z, r1
    wifiPortDescriptor = 0xFF;
    2382:	8f ef       	ldi	r24, 0xFF	; 255
    2384:	f5 01       	movw	r30, r10
    2386:	80 83       	st	Z, r24
    postParams = String();
    2388:	8e 01       	movw	r16, r28
    238a:	08 5f       	subi	r16, 0xF8	; 248
    238c:	1f 4f       	sbci	r17, 0xFF	; 255
    238e:	c8 01       	movw	r24, r16
    2390:	60 e0       	ldi	r22, 0x00	; 0
    2392:	71 e0       	ldi	r23, 0x01	; 1
    2394:	0e 94 07 38 	call	0x700e	; 0x700e <_ZN6StringC1EPKc>
    2398:	c4 01       	movw	r24, r8
    239a:	b8 01       	movw	r22, r16
    239c:	0e 94 d8 38 	call	0x71b0	; 0x71b0 <_ZN6StringaSERKS_>
    23a0:	c8 01       	movw	r24, r16
    23a2:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
      s_restartWifi = true;
    }
  }

  static void checkMaxFreeMemory(int* maxFreeMemory){
   int currentFreeMemory = freeMemory();
    23a6:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <freeMemory>
    23aa:	b8 2e       	mov	r11, r24
    23ac:	99 2e       	mov	r9, r25
    boolean isWifiRequestClientDisconnected = false;

    checkMaxFreeMemory(&maxFreeMemory);
    
    char c[500]; 
    size_t csize = Serial.readBytes(c, 500);
    23ae:	8e 01       	movw	r16, r28
    23b0:	01 5f       	subi	r16, 0xF1	; 241
    23b2:	1f 4f       	sbci	r17, 0xFF	; 255
    23b4:	8d eb       	ldi	r24, 0xBD	; 189
    23b6:	93 e0       	ldi	r25, 0x03	; 3
    23b8:	b8 01       	movw	r22, r16
    23ba:	44 ef       	ldi	r20, 0xF4	; 244
    23bc:	51 e0       	ldi	r21, 0x01	; 1
    23be:	0e 94 57 36 	call	0x6cae	; 0x6cae <_ZN6Stream9readBytesEPcj>
    23c2:	6c 01       	movw	r12, r24
    //c[csize] = 0;
    //input += c;

    Serial.print(F("SERIAL> "));
    23c4:	8d eb       	ldi	r24, 0xBD	; 189
    23c6:	93 e0       	ldi	r25, 0x03	; 3
    23c8:	6f ef       	ldi	r22, 0xFF	; 255
    23ca:	72 e0       	ldi	r23, 0x02	; 2
    23cc:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
    //GB_PrintDirty::printWithoutCRLF(c);
    for (int i = 0; i < csize; i++){
    23d0:	c8 01       	movw	r24, r16
    23d2:	a0 2e       	mov	r10, r16
    23d4:	89 2e       	mov	r8, r25
    23d6:	78 01       	movw	r14, r16
    23d8:	ec 0c       	add	r14, r12
    23da:	fd 1c       	adc	r15, r13
    23dc:	07 c0       	rjmp	.+14     	; 0x23ec <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_S1_+0xd2>
      Serial.print(c[i]);
    23de:	8d eb       	ldi	r24, 0xBD	; 189
    23e0:	93 e0       	ldi	r25, 0x03	; 3
    23e2:	f8 01       	movw	r30, r16
    23e4:	61 91       	ld	r22, Z+
    23e6:	8f 01       	movw	r16, r30
    23e8:	0e 94 98 34 	call	0x6930	; 0x6930 <_ZN5Print5printEc>
    //c[csize] = 0;
    //input += c;

    Serial.print(F("SERIAL> "));
    //GB_PrintDirty::printWithoutCRLF(c);
    for (int i = 0; i < csize; i++){
    23ec:	0e 15       	cp	r16, r14
    23ee:	1f 05       	cpc	r17, r15
    23f0:	b1 f7       	brne	.-20     	; 0x23de <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_S1_+0xc4>
      Serial.print(c[i]);
    }
    Serial.print(FS(S_Next));
    23f2:	8d eb       	ldi	r24, 0xBD	; 189
    23f4:	93 e0       	ldi	r25, 0x03	; 3
    23f6:	62 ee       	ldi	r22, 0xE2	; 226
    23f8:	70 e0       	ldi	r23, 0x00	; 0
    23fa:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
    GB_PrintDirty::printRAM(c, csize);
    23fe:	8a 2d       	mov	r24, r10
    2400:	98 2d       	mov	r25, r8
    2402:	6c 2d       	mov	r22, r12
    2404:	0e 94 91 08 	call	0x1122	; 0x1122 <_ZN13GB_PrintDirty8printRAMEPvh>
    Serial.println();
    2408:	8d eb       	ldi	r24, 0xBD	; 189
    240a:	93 e0       	ldi	r25, 0x03	; 3
    240c:	0e 94 a0 34 	call	0x6940	; 0x6940 <_ZN5Print7printlnEv>
      s_restartWifi = true;
    }
  }

  static void checkMaxFreeMemory(int* maxFreeMemory){
   int currentFreeMemory = freeMemory();
    2410:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <freeMemory>
    2414:	7c 01       	movw	r14, r24
    2416:	8b 2d       	mov	r24, r11
    2418:	99 2d       	mov	r25, r9
    241a:	9c 01       	movw	r18, r24
    241c:	89 01       	movw	r16, r18
    241e:	26 15       	cp	r18, r6
    2420:	37 05       	cpc	r19, r7
    2422:	0c f4       	brge	.+2      	; 0x2426 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_S1_+0x10c>
    2424:	83 01       	movw	r16, r6
    GB_PrintDirty::printRAM(c, csize);
    Serial.println();
    
    checkMaxFreeMemory(&maxFreeMemory);
    
    Serial.print(F("SERIAL> free memory on start: "));
    2426:	8d eb       	ldi	r24, 0xBD	; 189
    2428:	93 e0       	ldi	r25, 0x03	; 3
    242a:	60 ee       	ldi	r22, 0xE0	; 224
    242c:	72 e0       	ldi	r23, 0x02	; 2
    242e:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(startupFreeMemory);
    2432:	8d eb       	ldi	r24, 0xBD	; 189
    2434:	93 e0       	ldi	r25, 0x03	; 3
    2436:	b3 01       	movw	r22, r6
    2438:	4a e0       	ldi	r20, 0x0A	; 10
    243a:	50 e0       	ldi	r21, 0x00	; 0
    243c:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <_ZN5Print5printEii>
    Serial.print(F(", max: "));
    2440:	8d eb       	ldi	r24, 0xBD	; 189
    2442:	93 e0       	ldi	r25, 0x03	; 3
    2444:	68 ed       	ldi	r22, 0xD8	; 216
    2446:	72 e0       	ldi	r23, 0x02	; 2
    2448:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println(maxFreeMemory);
    244c:	98 01       	movw	r18, r16
    244e:	0e 15       	cp	r16, r14
    2450:	1f 05       	cpc	r17, r15
    2452:	0c f4       	brge	.+2      	; 0x2456 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_S1_+0x13c>
    2454:	97 01       	movw	r18, r14
    2456:	8d eb       	ldi	r24, 0xBD	; 189
    2458:	93 e0       	ldi	r25, 0x03	; 3
    245a:	b9 01       	movw	r22, r18
    245c:	4a e0       	ldi	r20, 0x0A	; 10
    245e:	50 e0       	ldi	r21, 0x00	; 0
    2460:	0e 94 d9 35 	call	0x6bb2	; 0x6bb2 <_ZN5Print7printlnEii>

    cleanSerialBuffer();
    2464:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN15GB_SerialHelper17cleanSerialBufferEv>
    } 
    else if (useSerialMonitor){
      return true;
    } 
    return false;
  } 
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	ce 5f       	subi	r28, 0xFE	; 254
    246c:	dd 4f       	sbci	r29, 0xFD	; 253
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	f8 94       	cli
    2472:	de bf       	out	0x3e, r29	; 62
    2474:	0f be       	out	0x3f, r0	; 63
    2476:	cd bf       	out	0x3d, r28	; 61
    2478:	cf 91       	pop	r28
    247a:	df 91       	pop	r29
    247c:	1f 91       	pop	r17
    247e:	0f 91       	pop	r16
    2480:	ff 90       	pop	r15
    2482:	ef 90       	pop	r14
    2484:	df 90       	pop	r13
    2486:	cf 90       	pop	r12
    2488:	bf 90       	pop	r11
    248a:	af 90       	pop	r10
    248c:	9f 90       	pop	r9
    248e:	8f 90       	pop	r8
    2490:	7f 90       	pop	r7
    2492:	6f 90       	pop	r6
    2494:	08 95       	ret

00002496 <loop>:
    2496:	87 e2       	ldi	r24, 0x27	; 39
    2498:	92 e0       	ldi	r25, 0x02	; 2
    249a:	40 e0       	ldi	r20, 0x00	; 0
    249c:	50 e0       	ldi	r21, 0x00	; 0
    249e:	60 e0       	ldi	r22, 0x00	; 0
    24a0:	70 e0       	ldi	r23, 0x00	; 0
    24a2:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <_ZN15TimeAlarmsClass5delayEm>
    24a6:	08 95       	ret

000024a8 <_Z14isDayInGrowboxv>:
    24a8:	0e 94 ae 21 	call	0x435c	; 0x435c <_Z10timeStatusv>
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	29 f4       	brne	.+10     	; 0x24ba <_Z14isDayInGrowboxv+0x12>
    24b0:	8a e5       	ldi	r24, 0x5A	; 90
    24b2:	91 e0       	ldi	r25, 0x01	; 1
    24b4:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <_ZN9GB_Logger8logErrorER5Error>
    24b8:	06 c0       	rjmp	.+12     	; 0x24c6 <_Z14isDayInGrowboxv+0x1e>
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
  static boolean stopLogError(Error &error){
    if (error.isStored){
    24ba:	80 91 60 01 	lds	r24, 0x0160
    24be:	88 23       	and	r24, r24
    24c0:	11 f0       	breq	.+4      	; 0x24c6 <_Z14isDayInGrowboxv+0x1e>
      error.isStored = false;
    24c2:	10 92 60 01 	sts	0x0160, r1
    24c6:	0e 94 ba 21 	call	0x4374	; 0x4374 <_Z4hourv>
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	02 97       	sbiw	r24, 0x02	; 2
    24ce:	07 97       	sbiw	r24, 0x07	; 7
    24d0:	08 f4       	brcc	.+2      	; 0x24d4 <_Z14isDayInGrowboxv+0x2c>
    24d2:	21 e0       	ldi	r18, 0x01	; 1
    24d4:	82 2f       	mov	r24, r18
    24d6:	08 95       	ret

000024d8 <setup>:
    24d8:	ef 92       	push	r14
    24da:	ff 92       	push	r15
    24dc:	0f 93       	push	r16
    24de:	1f 93       	push	r17
    24e0:	df 93       	push	r29
    24e2:	cf 93       	push	r28
    24e4:	cd b7       	in	r28, 0x3d	; 61
    24e6:	de b7       	in	r29, 0x3e	; 62
    24e8:	2e 97       	sbiw	r28, 0x0e	; 14
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	de bf       	out	0x3e, r29	; 62
    24f0:	0f be       	out	0x3f, r0	; 63
    24f2:	cd bf       	out	0x3d, r28	; 61
    24f4:	8d e0       	ldi	r24, 0x0D	; 13
    24f6:	61 e0       	ldi	r22, 0x01	; 1
    24f8:	0e 94 de 30 	call	0x61bc	; 0x61bc <pinMode>
    24fc:	8d e0       	ldi	r24, 0x0D	; 13
    24fe:	61 e0       	ldi	r22, 0x01	; 1
    2500:	0e 94 de 30 	call	0x61bc	; 0x61bc <pinMode>
    2504:	8c e0       	ldi	r24, 0x0C	; 12
    2506:	61 e0       	ldi	r22, 0x01	; 1
    2508:	0e 94 de 30 	call	0x61bc	; 0x61bc <pinMode>
    250c:	8b e0       	ldi	r24, 0x0B	; 11
    250e:	62 e0       	ldi	r22, 0x02	; 2
    2510:	0e 94 de 30 	call	0x61bc	; 0x61bc <pinMode>
    2514:	83 e0       	ldi	r24, 0x03	; 3
    2516:	61 e0       	ldi	r22, 0x01	; 1
    2518:	0e 94 de 30 	call	0x61bc	; 0x61bc <pinMode>
    251c:	84 e0       	ldi	r24, 0x04	; 4
    251e:	61 e0       	ldi	r22, 0x01	; 1
    2520:	0e 94 de 30 	call	0x61bc	; 0x61bc <pinMode>
    2524:	85 e0       	ldi	r24, 0x05	; 5
    2526:	61 e0       	ldi	r22, 0x01	; 1
    2528:	0e 94 de 30 	call	0x61bc	; 0x61bc <pinMode>
    252c:	83 e0       	ldi	r24, 0x03	; 3
    252e:	61 e0       	ldi	r22, 0x01	; 1
    2530:	0e 94 1d 31 	call	0x623a	; 0x623a <digitalWrite>
    2534:	84 e0       	ldi	r24, 0x04	; 4
    2536:	61 e0       	ldi	r22, 0x01	; 1
    2538:	0e 94 1d 31 	call	0x623a	; 0x623a <digitalWrite>
    253c:	85 e0       	ldi	r24, 0x05	; 5
    253e:	61 e0       	ldi	r22, 0x01	; 1
    2540:	0e 94 1d 31 	call	0x623a	; 0x623a <digitalWrite>
    2544:	10 92 4a 01 	sts	0x014A, r1
    2548:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <freeMemory>
    254c:	7c 01       	movw	r14, r24
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	61 e0       	ldi	r22, 0x01	; 1
    2552:	0e 94 0c 10 	call	0x2018	; 0x2018 <_ZN15GB_SerialHelper11checkSerialEhh>
    2556:	80 91 af 01 	lds	r24, 0x01AF
    255a:	88 23       	and	r24, r24
    255c:	31 f0       	breq	.+12     	; 0x256a <setup+0x92>
    255e:	0e 94 74 11 	call	0x22e8	; 0x22e8 <_Z15printFreeMemoryv>
    2562:	8f ee       	ldi	r24, 0xEF	; 239
    2564:	96 e0       	ldi	r25, 0x06	; 6
    2566:	0e 94 1c 09 	call	0x1238	; 0x1238 <_ZL17printStatusOnBootPK19__FlashStringHelper>
    256a:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <_Z15initLoggerModelv>
    this->sequenceSize = sequenceSize;
    this->description = description;
  }
  
  static Error* findByIndex(byte sequence, byte sequenceSize){
    Error* currentItemPtr = lastAddedItem;
    256e:	e0 91 4f 01 	lds	r30, 0x014F
    2572:	f0 91 50 01 	lds	r31, 0x0150
    2576:	0a c0       	rjmp	.+20     	; 0x258c <setup+0xb4>
    while (currentItemPtr != 0){
      if (currentItemPtr->sequence == sequence && currentItemPtr->sequenceSize == sequenceSize) {
    2578:	82 81       	ldd	r24, Z+2	; 0x02
    257a:	8f 3f       	cpi	r24, 0xFF	; 255
    257c:	19 f4       	brne	.+6      	; 0x2584 <setup+0xac>
    257e:	83 81       	ldd	r24, Z+3	; 0x03
    2580:	8f 3f       	cpi	r24, 0xFF	; 255
    2582:	39 f0       	breq	.+14     	; 0x2592 <setup+0xba>
        return currentItemPtr;
      }
      currentItemPtr = (Error*)currentItemPtr->nextError;
    2584:	80 81       	ld	r24, Z
    2586:	91 81       	ldd	r25, Z+1	; 0x01
    2588:	9c 01       	movw	r18, r24
    258a:	f9 01       	movw	r30, r18
    this->description = description;
  }
  
  static Error* findByIndex(byte sequence, byte sequenceSize){
    Error* currentItemPtr = lastAddedItem;
    while (currentItemPtr != 0){
    258c:	30 97       	sbiw	r30, 0x00	; 0
    258e:	a1 f7       	brne	.-24     	; 0x2578 <setup+0xa0>
    2590:	92 c1       	rjmp	.+804    	; 0x28b6 <setup+0x3de>
    2592:	80 91 af 01 	lds	r24, 0x01AF
    2596:	88 23       	and	r24, r24
    2598:	21 f0       	breq	.+8      	; 0x25a2 <setup+0xca>
    259a:	84 ed       	ldi	r24, 0xD4	; 212
    259c:	96 e0       	ldi	r25, 0x06	; 6
    259e:	0e 94 07 09 	call	0x120e	; 0x120e <_ZL21printFatalErrorOnBootPK19__FlashStringHelper>
    25a2:	68 e8       	ldi	r22, 0x88	; 136
    25a4:	73 e1       	ldi	r23, 0x13	; 19
    25a6:	80 e0       	ldi	r24, 0x00	; 0
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	0e 94 40 30 	call	0x6080	; 0x6080 <delay>
    25ae:	f9 cf       	rjmp	.-14     	; 0x25a2 <setup+0xca>
    // Serial.print("lastAddedEvent ev: ");
    //Serial.println(lastAddedEvent->description);
    Event* currentItemPtr = lastAddedEvent;
    while (currentItemPtr != 0){
      //Serial.println(currentItemPtr->description);
      if (currentItemPtr->index == index) {
    25b0:	82 81       	ldd	r24, Z+2	; 0x02
    25b2:	8f 3f       	cpi	r24, 0xFF	; 255
    25b4:	39 f0       	breq	.+14     	; 0x25c4 <setup+0xec>
        return currentItemPtr;
      }
      currentItemPtr = (Event*)currentItemPtr->nextEvent;
    25b6:	80 81       	ld	r24, Z
    25b8:	91 81       	ldd	r25, Z+1	; 0x01
    25ba:	9c 01       	movw	r18, r24
    25bc:	f9 01       	movw	r30, r18
    //Serial.print("search ev: ");    
    //Serial.println(index);
    // Serial.print("lastAddedEvent ev: ");
    //Serial.println(lastAddedEvent->description);
    Event* currentItemPtr = lastAddedEvent;
    while (currentItemPtr != 0){
    25be:	30 97       	sbiw	r30, 0x00	; 0
    25c0:	b9 f7       	brne	.-18     	; 0x25b0 <setup+0xd8>
    25c2:	7e c1       	rjmp	.+764    	; 0x28c0 <setup+0x3e8>
    25c4:	80 91 af 01 	lds	r24, 0x01AF
    25c8:	88 23       	and	r24, r24
    25ca:	21 f0       	breq	.+8      	; 0x25d4 <setup+0xfc>
    25cc:	89 eb       	ldi	r24, 0xB9	; 185
    25ce:	96 e0       	ldi	r25, 0x06	; 6
    25d0:	0e 94 07 09 	call	0x120e	; 0x120e <_ZL21printFatalErrorOnBootPK19__FlashStringHelper>
    25d4:	68 e8       	ldi	r22, 0x88	; 136
    25d6:	73 e1       	ldi	r23, 0x13	; 19
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	0e 94 40 30 	call	0x6080	; 0x6080 <delay>
    25e0:	f9 cf       	rjmp	.-14     	; 0x25d4 <setup+0xfc>
    25e2:	83 eb       	ldi	r24, 0xB3	; 179
    25e4:	96 e0       	ldi	r25, 0x06	; 6
    25e6:	0e 94 1c 09 	call	0x1238	; 0x1238 <_ZL17printStatusOnBootPK19__FlashStringHelper>
    25ea:	84 e3       	ldi	r24, 0x34	; 52
    25ec:	99 e2       	ldi	r25, 0x29	; 41
    25ee:	0e 94 97 21 	call	0x432e	; 0x432e <_Z15setSyncProviderPFmvE>
    25f2:	0e 94 ae 21 	call	0x435c	; 0x435c <_Z10timeStatusv>
    25f6:	89 2b       	or	r24, r25
    25f8:	59 f0       	breq	.+22     	; 0x2610 <setup+0x138>
    25fa:	0e 94 b5 21 	call	0x436a	; 0x436a <_Z4yearv>
    25fe:	8f 5d       	subi	r24, 0xDF	; 223
    2600:	97 40       	sbci	r25, 0x07	; 7
    2602:	34 f4       	brge	.+12     	; 0x2610 <setup+0x138>
    2604:	0e 94 b5 21 	call	0x436a	; 0x436a <_Z4yearv>
    2608:	85 5e       	subi	r24, 0xE5	; 229
    260a:	97 40       	sbci	r25, 0x07	; 7
    260c:	0c f4       	brge	.+2      	; 0x2610 <setup+0x138>
    260e:	26 c1       	rjmp	.+588    	; 0x285c <setup+0x384>
    2610:	83 e5       	ldi	r24, 0x53	; 83
    2612:	91 e0       	ldi	r25, 0x01	; 1
    2614:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <_ZN9GB_Logger8logErrorER5Error>
    2618:	e8 cf       	rjmp	.-48     	; 0x25ea <setup+0x112>
    261a:	10 92 59 01 	sts	0x0159, r1
    261e:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZN13GB_Controller15checkFreeMemoryEv>
    2622:	80 91 af 01 	lds	r24, 0x01AF
    2626:	88 23       	and	r24, r24
    2628:	49 f0       	breq	.+18     	; 0x263c <setup+0x164>
    262a:	88 ea       	ldi	r24, 0xA8	; 168
    262c:	96 e0       	ldi	r25, 0x06	; 6
    262e:	0e 94 1c 09 	call	0x1238	; 0x1238 <_ZL17printStatusOnBootPK19__FlashStringHelper>
    2632:	04 c0       	rjmp	.+8      	; 0x263c <setup+0x164>
public:

  static void start(){
    dallasTemperature.begin();
    while(dallasTemperature.getDeviceCount() == 0){
      GB_Logger::logError(ERROR_TERMOMETER_DISCONNECTED);
    2634:	81 e6       	ldi	r24, 0x61	; 97
    2636:	91 e0       	ldi	r25, 0x01	; 1
    2638:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <_ZN9GB_Logger8logErrorER5Error>
      dallasTemperature.begin();
    263c:	85 ee       	ldi	r24, 0xE5	; 229
    263e:	91 e0       	ldi	r25, 0x01	; 1
    2640:	0e 94 4c 2e 	call	0x5c98	; 0x5c98 <_ZN17DallasTemperature5beginEv>

public:

  static void start(){
    dallasTemperature.begin();
    while(dallasTemperature.getDeviceCount() == 0){
    2644:	85 ee       	ldi	r24, 0xE5	; 229
    2646:	91 e0       	ldi	r25, 0x01	; 1
    2648:	0e 94 8e 2b 	call	0x571c	; 0x571c <_ZN17DallasTemperature14getDeviceCountEv>
    264c:	88 23       	and	r24, r24
    264e:	91 f3       	breq	.-28     	; 0x2634 <setup+0x15c>
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
  static boolean stopLogError(Error &error){
    if (error.isStored){
    2650:	80 91 67 01 	lds	r24, 0x0167
    2654:	88 23       	and	r24, r24
    2656:	11 f0       	breq	.+4      	; 0x265c <setup+0x184>
      error.isStored = false;
    2658:	10 92 67 01 	sts	0x0167, r1
      GB_Logger::logError(ERROR_TERMOMETER_DISCONNECTED);
      dallasTemperature.begin();
    }  
    GB_Logger::stopLogError(ERROR_TERMOMETER_DISCONNECTED);

    dallasTemperature.getAddress(oneWireAddress, 0); // search for devices on the bus and assign based on an index.
    265c:	85 ee       	ldi	r24, 0xE5	; 229
    265e:	91 e0       	ldi	r25, 0x01	; 1
    2660:	68 ef       	ldi	r22, 0xF8	; 248
    2662:	71 e0       	ldi	r23, 0x01	; 1
    2664:	40 e0       	ldi	r20, 0x00	; 0
    2666:	0e 94 1e 2e 	call	0x5c3c	; 0x5c3c <_ZN17DallasTemperature10getAddressEPhh>
    266a:	06 c0       	rjmp	.+12     	; 0x2678 <setup+0x1a0>
    266c:	68 ee       	ldi	r22, 0xE8	; 232
    266e:	73 e0       	ldi	r23, 0x03	; 3
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	0e 94 40 30 	call	0x6080	; 0x6080 <delay>
    2678:	0e 94 12 11 	call	0x2224	; 0x2224 <_ZN14GB_Thermometer16updateStatisticsEv>
    267c:	88 23       	and	r24, r24
    267e:	b1 f3       	breq	.-20     	; 0x266c <setup+0x194>
    2680:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZN13GB_Controller15checkFreeMemoryEv>
    2684:	80 91 af 01 	lds	r24, 0x01AF
    2688:	88 23       	and	r24, r24
    268a:	21 f0       	breq	.+8      	; 0x2694 <setup+0x1bc>
    268c:	80 ea       	ldi	r24, 0xA0	; 160
    268e:	96 e0       	ldi	r25, 0x06	; 6
    2690:	0e 94 1c 09 	call	0x1238	; 0x1238 <_ZL17printStatusOnBootPK19__FlashStringHelper>
    2694:	00 e0       	ldi	r16, 0x00	; 0
    2696:	10 e0       	ldi	r17, 0x00	; 0
    }
  }

  static void read(word address, void *data, const byte sizeofData) {
    for (word c = 0; c < sizeofData; c++){
      byte value =  read(address + c);
    2698:	c8 01       	movw	r24, r16
    269a:	0e 94 bb 06 	call	0xd76	; 0xd76 <_ZN10GB_Storage4readEj>
      ((byte*)data)[c] = value;
    269e:	f8 01       	movw	r30, r16
    26a0:	eb 53       	subi	r30, 0x3B	; 59
    26a2:	fe 4f       	sbci	r31, 0xFE	; 254
    26a4:	80 83       	st	Z, r24
      write(address + c, value);
    }
  }

  static void read(word address, void *data, const byte sizeofData) {
    for (word c = 0; c < sizeofData; c++){
    26a6:	0f 5f       	subi	r16, 0xFF	; 255
    26a8:	1f 4f       	sbci	r17, 0xFF	; 255
    26aa:	00 32       	cpi	r16, 0x20	; 32
    26ac:	11 05       	cpc	r17, r1
    26ae:	a1 f7       	brne	.-24     	; 0x2698 <setup+0x1c0>
  }

private :

  static boolean isBootRecordCorrect(){ // TODO rename it
    return (bootRecord.first_magic == MAGIC_NUMBER) && (bootRecord.last_magic == MAGIC_NUMBER);
    26b0:	80 91 c5 01 	lds	r24, 0x01C5
    26b4:	90 91 c6 01 	lds	r25, 0x01C6
    26b8:	85 55       	subi	r24, 0x55	; 85
    26ba:	9a 4a       	sbci	r25, 0xAA	; 170
    26bc:	09 f0       	breq	.+2      	; 0x26c0 <setup+0x1e8>
    26be:	d4 c0       	rjmp	.+424    	; 0x2868 <setup+0x390>
    26c0:	80 91 e3 01 	lds	r24, 0x01E3
    26c4:	90 91 e4 01 	lds	r25, 0x01E4
    26c8:	85 55       	subi	r24, 0x55	; 85
    26ca:	9a 4a       	sbci	r25, 0xAA	; 170
    26cc:	09 f0       	breq	.+2      	; 0x26d0 <setup+0x1f8>
    26ce:	cc c0       	rjmp	.+408    	; 0x2868 <setup+0x390>

  static boolean start(){

    GB_Storage::read(0, &bootRecord, sizeof(BootRecord));
    if (isBootRecordCorrect()){
      bootRecord.lastStartupTimeStamp = now();      
    26d0:	0e 94 08 21 	call	0x4210	; 0x4210 <_Z3nowv>
    26d4:	60 93 cb 01 	sts	0x01CB, r22
    26d8:	70 93 cc 01 	sts	0x01CC, r23
    26dc:	80 93 cd 01 	sts	0x01CD, r24
    26e0:	90 93 ce 01 	sts	0x01CE, r25
      GB_Storage::write(OFFSETOF(BootRecord, lastStartupTimeStamp), &(bootRecord.lastStartupTimeStamp), sizeof(bootRecord.lastStartupTimeStamp));      
    26e4:	86 e0       	ldi	r24, 0x06	; 6
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	6b ec       	ldi	r22, 0xCB	; 203
    26ea:	71 e0       	ldi	r23, 0x01	; 1
    26ec:	44 e0       	ldi	r20, 0x04	; 4
    26ee:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN10GB_Storage5writeEjPKvh>
    26f2:	91 e0       	ldi	r25, 0x01	; 1
    26f4:	11 c0       	rjmp	.+34     	; 0x2718 <setup+0x240>
      bootRecord.lastStartupTimeStamp = bootRecord.firstStartupTimeStamp;
      bootRecord.nextLogRecordAddress = sizeof(BootRecord);
      bootRecord.boolPreferencies.isLogOverflow = false;
      bootRecord.boolPreferencies.isLoggerEnabled = true;
      for(byte i=0; i<sizeof(bootRecord.reserved); i++){
        bootRecord.reserved[i] = 0;
    26f6:	11 92       	st	Z+, r1
      bootRecord.firstStartupTimeStamp = now();
      bootRecord.lastStartupTimeStamp = bootRecord.firstStartupTimeStamp;
      bootRecord.nextLogRecordAddress = sizeof(BootRecord);
      bootRecord.boolPreferencies.isLogOverflow = false;
      bootRecord.boolPreferencies.isLoggerEnabled = true;
      for(byte i=0; i<sizeof(bootRecord.reserved); i++){
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	e3 3e       	cpi	r30, 0xE3	; 227
    26fc:	f8 07       	cpc	r31, r24
    26fe:	d9 f7       	brne	.-10     	; 0x26f6 <setup+0x21e>
        bootRecord.reserved[i] = 0;
      }
      bootRecord.last_magic = MAGIC_NUMBER;
    2700:	85 e5       	ldi	r24, 0x55	; 85
    2702:	9a ea       	ldi	r25, 0xAA	; 170
    2704:	91 83       	std	Z+1, r25	; 0x01
    2706:	80 83       	st	Z, r24

      GB_Storage::write(0, &bootRecord, sizeof(BootRecord));
    2708:	7e 97       	sbiw	r30, 0x1e	; 30
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	bf 01       	movw	r22, r30
    2710:	40 e2       	ldi	r20, 0x20	; 32
    2712:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN10GB_Storage5writeEjPKvh>
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	80 93 4a 01 	sts	0x014A, r24
    271e:	99 23       	and	r25, r25
    2720:	19 f0       	breq	.+6      	; 0x2728 <setup+0x250>
    2722:	82 e8       	ldi	r24, 0x82	; 130
    2724:	91 e0       	ldi	r25, 0x01	; 1
    2726:	02 c0       	rjmp	.+4      	; 0x272c <setup+0x254>
    2728:	8d e7       	ldi	r24, 0x7D	; 125
    272a:	91 e0       	ldi	r25, 0x01	; 1
    272c:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_ZN9GB_Logger8logEventER5Event>
    2730:	80 e0       	ldi	r24, 0x00	; 0
    2732:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN14GB_Thermometer14getTemperatureEh>
    2736:	0e 94 54 12 	call	0x24a8	; 0x24a8 <_Z14isDayInGrowboxv>
    273a:	88 23       	and	r24, r24
    273c:	19 f0       	breq	.+6      	; 0x2744 <setup+0x26c>
    273e:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <_Z15switchToDayModev>
    2742:	02 c0       	rjmp	.+4      	; 0x2748 <setup+0x270>
    2744:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <_Z17switchToNightModev>
    2748:	87 e2       	ldi	r24, 0x27	; 39
    274a:	92 e0       	ldi	r25, 0x02	; 2
    274c:	44 e1       	ldi	r20, 0x14	; 20
    274e:	50 e0       	ldi	r21, 0x00	; 0
    2750:	60 e0       	ldi	r22, 0x00	; 0
    2752:	70 e0       	ldi	r23, 0x00	; 0
    2754:	21 e7       	ldi	r18, 0x71	; 113
    2756:	31 e1       	ldi	r19, 0x11	; 17
    2758:	0e 94 bf 24 	call	0x497e	; 0x497e <_ZN15TimeAlarmsClass11timerRepeatEmPFvvE>
    275c:	87 e2       	ldi	r24, 0x27	; 39
    275e:	92 e0       	ldi	r25, 0x02	; 2
    2760:	41 e0       	ldi	r20, 0x01	; 1
    2762:	50 e0       	ldi	r21, 0x00	; 0
    2764:	60 e0       	ldi	r22, 0x00	; 0
    2766:	70 e0       	ldi	r23, 0x00	; 0
    2768:	24 e0       	ldi	r18, 0x04	; 4
    276a:	31 e1       	ldi	r19, 0x11	; 17
    276c:	0e 94 bf 24 	call	0x497e	; 0x497e <_ZN15TimeAlarmsClass11timerRepeatEmPFvvE>
    2770:	87 e2       	ldi	r24, 0x27	; 39
    2772:	92 e0       	ldi	r25, 0x02	; 2
    2774:	44 e1       	ldi	r20, 0x14	; 20
    2776:	50 e0       	ldi	r21, 0x00	; 0
    2778:	60 e0       	ldi	r22, 0x00	; 0
    277a:	70 e0       	ldi	r23, 0x00	; 0
    277c:	29 e0       	ldi	r18, 0x09	; 9
    277e:	31 e1       	ldi	r19, 0x11	; 17
    2780:	0e 94 bf 24 	call	0x497e	; 0x497e <_ZN15TimeAlarmsClass11timerRepeatEmPFvvE>
    2784:	87 e2       	ldi	r24, 0x27	; 39
    2786:	92 e0       	ldi	r25, 0x02	; 2
    2788:	41 e0       	ldi	r20, 0x01	; 1
    278a:	50 e0       	ldi	r21, 0x00	; 0
    278c:	60 e0       	ldi	r22, 0x00	; 0
    278e:	70 e0       	ldi	r23, 0x00	; 0
    2790:	2d ec       	ldi	r18, 0xCD	; 205
    2792:	3b e0       	ldi	r19, 0x0B	; 11
    2794:	0e 94 bf 24 	call	0x497e	; 0x497e <_ZN15TimeAlarmsClass11timerRepeatEmPFvvE>
    2798:	87 e2       	ldi	r24, 0x27	; 39
    279a:	92 e0       	ldi	r25, 0x02	; 2
    279c:	4c e2       	ldi	r20, 0x2C	; 44
    279e:	51 e0       	ldi	r21, 0x01	; 1
    27a0:	60 e0       	ldi	r22, 0x00	; 0
    27a2:	70 e0       	ldi	r23, 0x00	; 0
    27a4:	29 e8       	ldi	r18, 0x89	; 137
    27a6:	3f e0       	ldi	r19, 0x0F	; 15
    27a8:	0e 94 bf 24 	call	0x497e	; 0x497e <_ZN15TimeAlarmsClass11timerRepeatEmPFvvE>
    27ac:	87 e2       	ldi	r24, 0x27	; 39
    27ae:	92 e0       	ldi	r25, 0x02	; 2
    27b0:	61 e0       	ldi	r22, 0x01	; 1
    27b2:	70 e0       	ldi	r23, 0x00	; 0
    27b4:	40 e0       	ldi	r20, 0x00	; 0
    27b6:	50 e0       	ldi	r21, 0x00	; 0
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	0e ef       	ldi	r16, 0xFE	; 254
    27be:	1f e0       	ldi	r17, 0x0F	; 15
    27c0:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <_ZN15TimeAlarmsClass11alarmRepeatEiiiPFvvE>
    27c4:	87 e2       	ldi	r24, 0x27	; 39
    27c6:	92 e0       	ldi	r25, 0x02	; 2
    27c8:	69 e0       	ldi	r22, 0x09	; 9
    27ca:	70 e0       	ldi	r23, 0x00	; 0
    27cc:	40 e0       	ldi	r20, 0x00	; 0
    27ce:	50 e0       	ldi	r21, 0x00	; 0
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	01 ef       	ldi	r16, 0xF1	; 241
    27d6:	1f e0       	ldi	r17, 0x0F	; 15
    27d8:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <_ZN15TimeAlarmsClass11alarmRepeatEiiiPFvvE>
    27dc:	80 91 af 01 	lds	r24, 0x01AF
    27e0:	88 23       	and	r24, r24
    27e2:	69 f0       	breq	.+26     	; 0x27fe <setup+0x326>
    27e4:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <freeMemory>
    27e8:	e8 16       	cp	r14, r24
    27ea:	f9 06       	cpc	r15, r25
    27ec:	11 f0       	breq	.+4      	; 0x27f2 <setup+0x31a>
    27ee:	0e 94 74 11 	call	0x22e8	; 0x22e8 <_Z15printFreeMemoryv>
    27f2:	8d eb       	ldi	r24, 0xBD	; 189
    27f4:	93 e0       	ldi	r25, 0x03	; 3
    27f6:	63 e8       	ldi	r22, 0x83	; 131
    27f8:	76 e0       	ldi	r23, 0x06	; 6
    27fa:	0e 94 c0 34 	call	0x6980	; 0x6980 <_ZN5Print7printlnEPK19__FlashStringHelper>
    27fe:	80 91 af 01 	lds	r24, 0x01AF
    2802:	88 23       	and	r24, r24
    2804:	11 f0       	breq	.+4      	; 0x280a <setup+0x332>
    2806:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN15GB_SerialHelper13printDirtyEndEv>
    280a:	80 91 b0 01 	lds	r24, 0x01B0
    280e:	88 23       	and	r24, r24
    2810:	09 f4       	brne	.+2      	; 0x2814 <setup+0x33c>
    2812:	5e c0       	rjmp	.+188    	; 0x28d0 <setup+0x3f8>
    2814:	7e 01       	movw	r14, r28
    2816:	08 94       	sec
    2818:	e1 1c       	adc	r14, r1
    281a:	f1 1c       	adc	r15, r1
    281c:	c7 01       	movw	r24, r14
    281e:	6e e7       	ldi	r22, 0x7E	; 126
    2820:	76 e0       	ldi	r23, 0x06	; 6
    2822:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZL15flashStringLoadPKc>
    2826:	8e 01       	movw	r16, r28
    2828:	08 5f       	subi	r16, 0xF8	; 248
    282a:	1f 4f       	sbci	r17, 0xFF	; 255
    282c:	c8 01       	movw	r24, r16
    282e:	61 e7       	ldi	r22, 0x71	; 113
    2830:	76 e0       	ldi	r23, 0x06	; 6
    2832:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZL15flashStringLoadPKc>
      cleanSerialBuffer();
    }
  }

  static void setWifiConfiguration(const String& _s_wifiSID, const String& _s_wifiPass){
    s_wifiSID = _s_wifiSID;
    2836:	82 eb       	ldi	r24, 0xB2	; 178
    2838:	91 e0       	ldi	r25, 0x01	; 1
    283a:	b7 01       	movw	r22, r14
    283c:	0e 94 d8 38 	call	0x71b0	; 0x71b0 <_ZN6StringaSERKS_>
    s_wifiPass = _s_wifiPass;
    2840:	89 eb       	ldi	r24, 0xB9	; 185
    2842:	91 e0       	ldi	r25, 0x01	; 1
    2844:	b8 01       	movw	r22, r16
    2846:	0e 94 d8 38 	call	0x71b0	; 0x71b0 <_ZN6StringaSERKS_>
    284a:	c8 01       	movw	r24, r16
    284c:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
    2850:	c7 01       	movw	r24, r14
    2852:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
    2856:	0e 94 9a 0b 	call	0x1734	; 0x1734 <_ZN15GB_SerialHelper9startWifiEv>
    285a:	3a c0       	rjmp	.+116    	; 0x28d0 <setup+0x3f8>
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
  static boolean stopLogError(Error &error){
    if (error.isStored){
    285c:	80 91 59 01 	lds	r24, 0x0159
    2860:	88 23       	and	r24, r24
    2862:	09 f0       	breq	.+2      	; 0x2866 <setup+0x38e>
    2864:	da ce       	rjmp	.-588    	; 0x261a <setup+0x142>
    2866:	db ce       	rjmp	.-586    	; 0x261e <setup+0x146>
      bootRecord.lastStartupTimeStamp = now();      
      GB_Storage::write(OFFSETOF(BootRecord, lastStartupTimeStamp), &(bootRecord.lastStartupTimeStamp), sizeof(bootRecord.lastStartupTimeStamp));      
      return true;   
    } 
    else {
      bootRecord.first_magic = MAGIC_NUMBER;
    2868:	85 e5       	ldi	r24, 0x55	; 85
    286a:	9a ea       	ldi	r25, 0xAA	; 170
    286c:	90 93 c6 01 	sts	0x01C6, r25
    2870:	80 93 c5 01 	sts	0x01C5, r24
      bootRecord.firstStartupTimeStamp = now();
    2874:	0e 94 08 21 	call	0x4210	; 0x4210 <_Z3nowv>
    2878:	60 93 c7 01 	sts	0x01C7, r22
    287c:	70 93 c8 01 	sts	0x01C8, r23
    2880:	80 93 c9 01 	sts	0x01C9, r24
    2884:	90 93 ca 01 	sts	0x01CA, r25
      bootRecord.lastStartupTimeStamp = bootRecord.firstStartupTimeStamp;
    2888:	60 93 cb 01 	sts	0x01CB, r22
    288c:	70 93 cc 01 	sts	0x01CC, r23
    2890:	80 93 cd 01 	sts	0x01CD, r24
    2894:	90 93 ce 01 	sts	0x01CE, r25
      bootRecord.nextLogRecordAddress = sizeof(BootRecord);
    2898:	80 e2       	ldi	r24, 0x20	; 32
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	90 93 d0 01 	sts	0x01D0, r25
    28a0:	80 93 cf 01 	sts	0x01CF, r24
      bootRecord.boolPreferencies.isLogOverflow = false;
    28a4:	80 91 d1 01 	lds	r24, 0x01D1
      bootRecord.boolPreferencies.isLoggerEnabled = true;
    28a8:	88 7f       	andi	r24, 0xF8	; 248
    28aa:	82 60       	ori	r24, 0x02	; 2
    28ac:	80 93 d1 01 	sts	0x01D1, r24
    28b0:	e2 ed       	ldi	r30, 0xD2	; 210
    28b2:	f1 e0       	ldi	r31, 0x01	; 1
    28b4:	20 cf       	rjmp	.-448    	; 0x26f6 <setup+0x21e>
  static Event* findByIndex(byte index){
    //Serial.print("search ev: ");    
    //Serial.println(index);
    // Serial.print("lastAddedEvent ev: ");
    //Serial.println(lastAddedEvent->description);
    Event* currentItemPtr = lastAddedEvent;
    28b6:	e0 91 51 01 	lds	r30, 0x0151
    28ba:	f0 91 52 01 	lds	r31, 0x0152
    28be:	7f ce       	rjmp	.-770    	; 0x25be <setup+0xe6>
    28c0:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZN13GB_Controller15checkFreeMemoryEv>
    28c4:	80 91 af 01 	lds	r24, 0x01AF
    28c8:	88 23       	and	r24, r24
    28ca:	09 f4       	brne	.+2      	; 0x28ce <setup+0x3f6>
    28cc:	8e ce       	rjmp	.-740    	; 0x25ea <setup+0x112>
    28ce:	89 ce       	rjmp	.-750    	; 0x25e2 <setup+0x10a>
    28d0:	2e 96       	adiw	r28, 0x0e	; 14
    28d2:	0f b6       	in	r0, 0x3f	; 63
    28d4:	f8 94       	cli
    28d6:	de bf       	out	0x3e, r29	; 62
    28d8:	0f be       	out	0x3f, r0	; 63
    28da:	cd bf       	out	0x3d, r28	; 61
    28dc:	cf 91       	pop	r28
    28de:	df 91       	pop	r29
    28e0:	1f 91       	pop	r17
    28e2:	0f 91       	pop	r16
    28e4:	ff 90       	pop	r15
    28e6:	ef 90       	pop	r14
    28e8:	08 95       	ret

000028ea <_ZN15GB_SerialHelper13stopHttpFrameEv>:
  static void startHttpFrame(const byte &wifiPortDescriptor){
    sendWifiFrameStart(wifiPortDescriptor, WIFI_RESPONSE_FRAME_SIZE);
    s_wifiResponseAutoFlushConut = 0;
  }

  static boolean stopHttpFrame(){
    28ea:	cf 93       	push	r28
    28ec:	df 93       	push	r29
    if (s_wifiResponseAutoFlushConut > 0){
    28ee:	80 91 c1 01 	lds	r24, 0x01C1
    28f2:	90 91 c2 01 	lds	r25, 0x01C2
    28f6:	18 16       	cp	r1, r24
    28f8:	19 06       	cpc	r1, r25
    28fa:	64 f0       	brlt	.+24     	; 0x2914 <_ZN15GB_SerialHelper13stopHttpFrameEv+0x2a>
    28fc:	13 c0       	rjmp	.+38     	; 0x2924 <_ZN15GB_SerialHelper13stopHttpFrameEv+0x3a>
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    28fe:	8d eb       	ldi	r24, 0xBD	; 189
    2900:	93 e0       	ldi	r25, 0x03	; 3
    2902:	60 e0       	ldi	r22, 0x00	; 0
    2904:	0e 94 a4 33 	call	0x6748	; 0x6748 <_ZN14HardwareSerial5writeEh>
      while (s_wifiResponseAutoFlushConut < WIFI_RESPONSE_FRAME_SIZE){
        s_wifiResponseAutoFlushConut += Serial.write(0x00);
    2908:	c8 0f       	add	r28, r24
    290a:	d9 1f       	adc	r29, r25
    290c:	d0 93 c2 01 	sts	0x01C2, r29
    2910:	c0 93 c1 01 	sts	0x01C1, r28
    s_wifiResponseAutoFlushConut = 0;
  }

  static boolean stopHttpFrame(){
    if (s_wifiResponseAutoFlushConut > 0){
      while (s_wifiResponseAutoFlushConut < WIFI_RESPONSE_FRAME_SIZE){
    2914:	c0 91 c1 01 	lds	r28, 0x01C1
    2918:	d0 91 c2 01 	lds	r29, 0x01C2
    291c:	85 e0       	ldi	r24, 0x05	; 5
    291e:	c8 37       	cpi	r28, 0x78	; 120
    2920:	d8 07       	cpc	r29, r24
    2922:	6c f3       	brlt	.-38     	; 0x28fe <_ZN15GB_SerialHelper13stopHttpFrameEv+0x14>
    Serial.print(',');

  }

  static boolean sendWifiFrameStop(){
    s_restartWifiIfNoResponseAutomatically = false;
    2924:	10 92 05 01 	sts	0x0105, r1
    boolean rez = wifiExecuteCommand();
    2928:	80 e0       	ldi	r24, 0x00	; 0
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	68 ee       	ldi	r22, 0xE8	; 232
    292e:	73 e0       	ldi	r23, 0x03	; 3
    2930:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    s_restartWifiIfNoResponseAutomatically = true;
    2934:	91 e0       	ldi	r25, 0x01	; 1
    2936:	90 93 05 01 	sts	0x0105, r25
      while (s_wifiResponseAutoFlushConut < WIFI_RESPONSE_FRAME_SIZE){
        s_wifiResponseAutoFlushConut += Serial.write(0x00);
      }
    }
    return sendWifiFrameStop();
  } 
    293a:	df 91       	pop	r29
    293c:	cf 91       	pop	r28
    293e:	08 95       	ret

00002940 <_ZL8sendDataRK6String>:
    2940:	df 92       	push	r13
    2942:	ef 92       	push	r14
    2944:	ff 92       	push	r15
    2946:	0f 93       	push	r16
    2948:	1f 93       	push	r17
    294a:	cf 93       	push	r28
    294c:	df 93       	push	r29
    294e:	7c 01       	movw	r14, r24
    2950:	80 91 4b 01 	lds	r24, 0x014B
    2954:	88 23       	and	r24, r24
    2956:	09 f4       	brne	.+2      	; 0x295a <_ZL8sendDataRK6String+0x1a>
    2958:	7f c0       	rjmp	.+254    	; 0x2a58 <_ZL8sendDataRK6String+0x118>
    return isSendOK;
  }  

  static boolean sendHttpResponseData(const byte &wifiPortDescriptor, const String &data){
    boolean isSendOK = true;
    if (data.length() == 0){
    295a:	f7 01       	movw	r30, r14
    295c:	84 81       	ldd	r24, Z+4	; 0x04
    295e:	95 81       	ldd	r25, Z+5	; 0x05
    2960:	89 2b       	or	r24, r25
    2962:	09 f4       	brne	.+2      	; 0x2966 <_ZL8sendDataRK6String+0x26>
    2964:	7e c0       	rjmp	.+252    	; 0x2a62 <_ZL8sendDataRK6String+0x122>
      return isSendOK;
    }
    if (!s_wifiIsHeaderSended){
    2966:	80 91 c0 01 	lds	r24, 0x01C0
    296a:	88 23       	and	r24, r24
    296c:	89 f4       	brne	.+34     	; 0x2990 <_ZL8sendDataRK6String+0x50>
      sendHttpOKHeader(wifiPortDescriptor); 
    296e:	80 91 04 01 	lds	r24, 0x0104
    2972:	0e 94 21 0b 	call	0x1642	; 0x1642 <_ZN15GB_SerialHelper16sendHttpOKHeaderEh>
      s_wifiIsHeaderSended = true;
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	80 93 c0 01 	sts	0x01C0, r24
  static void sendHttpNotFoundHeader(const byte portDescriptor){ 
    sendWifiData(portDescriptor, F("HTTP/1.1 404 Not Found\r\nConnection: close\r\n\r\n"));
  }

  static void startHttpFrame(const byte &wifiPortDescriptor){
    sendWifiFrameStart(wifiPortDescriptor, WIFI_RESPONSE_FRAME_SIZE);
    297c:	80 91 04 01 	lds	r24, 0x0104
    2980:	68 e7       	ldi	r22, 0x78	; 120
    2982:	75 e0       	ldi	r23, 0x05	; 5
    2984:	0e 94 df 08 	call	0x11be	; 0x11be <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>
    s_wifiResponseAutoFlushConut = 0;
    2988:	10 92 c2 01 	sts	0x01C2, r1
    298c:	10 92 c1 01 	sts	0x01C1, r1
    if (!s_wifiIsHeaderSended){
      sendHttpOKHeader(wifiPortDescriptor); 
      s_wifiIsHeaderSended = true;
      startHttpFrame(wifiPortDescriptor);
    } 
    if (s_wifiResponseAutoFlushConut + data.length() < WIFI_RESPONSE_FRAME_SIZE){
    2990:	c0 91 c1 01 	lds	r28, 0x01C1
    2994:	d0 91 c2 01 	lds	r29, 0x01C2
    2998:	f7 01       	movw	r30, r14
    299a:	84 81       	ldd	r24, Z+4	; 0x04
    299c:	95 81       	ldd	r25, Z+5	; 0x05
    299e:	8c 0f       	add	r24, r28
    29a0:	9d 1f       	adc	r25, r29
    29a2:	88 57       	subi	r24, 0x78	; 120
    29a4:	95 40       	sbci	r25, 0x05	; 5
    29a6:	18 f0       	brcs	.+6      	; 0x29ae <_ZL8sendDataRK6String+0x6e>
    29a8:	c0 e0       	ldi	r28, 0x00	; 0
    29aa:	d0 e0       	ldi	r29, 0x00	; 0
    29ac:	20 c0       	rjmp	.+64     	; 0x29ee <_ZL8sendDataRK6String+0xae>
      s_wifiResponseAutoFlushConut += Serial.print(data);
    29ae:	8d eb       	ldi	r24, 0xBD	; 189
    29b0:	93 e0       	ldi	r25, 0x03	; 3
    29b2:	b7 01       	movw	r22, r14
    29b4:	0e 94 f8 35 	call	0x6bf0	; 0x6bf0 <_ZN5Print5printERK6String>
    29b8:	c8 0f       	add	r28, r24
    29ba:	d9 1f       	adc	r29, r25
    29bc:	d0 93 c2 01 	sts	0x01C2, r29
    29c0:	c0 93 c1 01 	sts	0x01C1, r28
    29c4:	4e c0       	rjmp	.+156    	; 0x2a62 <_ZL8sendDataRK6String+0x122>
    29c6:	be 01       	movw	r22, r28
    } 
    else {
      int index = 0;
      while (s_wifiResponseAutoFlushConut < WIFI_RESPONSE_FRAME_SIZE){
        char c = data[index++];
    29c8:	21 96       	adiw	r28, 0x01	; 1
    29ca:	c7 01       	movw	r24, r14
    29cc:	0e 94 90 36 	call	0x6d20	; 0x6d20 <_ZNK6StringixEj>
    29d0:	68 2f       	mov	r22, r24
        s_wifiResponseAutoFlushConut += Serial.print(c);
    29d2:	00 91 c1 01 	lds	r16, 0x01C1
    29d6:	10 91 c2 01 	lds	r17, 0x01C2
    29da:	8d eb       	ldi	r24, 0xBD	; 189
    29dc:	93 e0       	ldi	r25, 0x03	; 3
    29de:	0e 94 98 34 	call	0x6930	; 0x6930 <_ZN5Print5printEc>
    29e2:	08 0f       	add	r16, r24
    29e4:	19 1f       	adc	r17, r25
    29e6:	10 93 c2 01 	sts	0x01C2, r17
    29ea:	00 93 c1 01 	sts	0x01C1, r16
    if (s_wifiResponseAutoFlushConut + data.length() < WIFI_RESPONSE_FRAME_SIZE){
      s_wifiResponseAutoFlushConut += Serial.print(data);
    } 
    else {
      int index = 0;
      while (s_wifiResponseAutoFlushConut < WIFI_RESPONSE_FRAME_SIZE){
    29ee:	80 91 c1 01 	lds	r24, 0x01C1
    29f2:	90 91 c2 01 	lds	r25, 0x01C2
    29f6:	88 57       	subi	r24, 0x78	; 120
    29f8:	95 40       	sbci	r25, 0x05	; 5
    29fa:	2c f3       	brlt	.-54     	; 0x29c6 <_ZL8sendDataRK6String+0x86>
        char c = data[index++];
        s_wifiResponseAutoFlushConut += Serial.print(c);
      }
      isSendOK = stopHttpFrame();
    29fc:	0e 94 75 14 	call	0x28ea	; 0x28ea <_ZN15GB_SerialHelper13stopHttpFrameEv>
    2a00:	d8 2e       	mov	r13, r24
  static void sendHttpNotFoundHeader(const byte portDescriptor){ 
    sendWifiData(portDescriptor, F("HTTP/1.1 404 Not Found\r\nConnection: close\r\n\r\n"));
  }

  static void startHttpFrame(const byte &wifiPortDescriptor){
    sendWifiFrameStart(wifiPortDescriptor, WIFI_RESPONSE_FRAME_SIZE);
    2a02:	80 91 04 01 	lds	r24, 0x0104
    2a06:	68 e7       	ldi	r22, 0x78	; 120
    2a08:	75 e0       	ldi	r23, 0x05	; 5
    2a0a:	0e 94 df 08 	call	0x11be	; 0x11be <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>
    s_wifiResponseAutoFlushConut = 0;
    2a0e:	10 92 c2 01 	sts	0x01C2, r1
    2a12:	10 92 c1 01 	sts	0x01C1, r1
    2a16:	13 c0       	rjmp	.+38     	; 0x2a3e <_ZL8sendDataRK6String+0xfe>
      }
      isSendOK = stopHttpFrame();
      startHttpFrame(wifiPortDescriptor); 

      while (index < data.length()){
        char c = data[index++];
    2a18:	21 96       	adiw	r28, 0x01	; 1
    2a1a:	c7 01       	movw	r24, r14
    2a1c:	0e 94 90 36 	call	0x6d20	; 0x6d20 <_ZNK6StringixEj>
    2a20:	68 2f       	mov	r22, r24
        s_wifiResponseAutoFlushConut += Serial.print(c);
    2a22:	00 91 c1 01 	lds	r16, 0x01C1
    2a26:	10 91 c2 01 	lds	r17, 0x01C2
    2a2a:	8d eb       	ldi	r24, 0xBD	; 189
    2a2c:	93 e0       	ldi	r25, 0x03	; 3
    2a2e:	0e 94 98 34 	call	0x6930	; 0x6930 <_ZN5Print5printEc>
    2a32:	08 0f       	add	r16, r24
    2a34:	19 1f       	adc	r17, r25
    2a36:	10 93 c2 01 	sts	0x01C2, r17
    2a3a:	00 93 c1 01 	sts	0x01C1, r16
    2a3e:	be 01       	movw	r22, r28
        s_wifiResponseAutoFlushConut += Serial.print(c);
      }
      isSendOK = stopHttpFrame();
      startHttpFrame(wifiPortDescriptor); 

      while (index < data.length()){
    2a40:	f7 01       	movw	r30, r14
    2a42:	84 81       	ldd	r24, Z+4	; 0x04
    2a44:	95 81       	ldd	r25, Z+5	; 0x05
    2a46:	c8 17       	cp	r28, r24
    2a48:	d9 07       	cpc	r29, r25
    2a4a:	30 f3       	brcs	.-52     	; 0x2a18 <_ZL8sendDataRK6String+0xd8>
    2a4c:	dd 20       	and	r13, r13
    2a4e:	49 f4       	brne	.+18     	; 0x2a62 <_ZL8sendDataRK6String+0x122>
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	80 93 4c 01 	sts	0x014C, r24
    2a56:	05 c0       	rjmp	.+10     	; 0x2a62 <_ZL8sendDataRK6String+0x122>
    2a58:	8d eb       	ldi	r24, 0xBD	; 189
    2a5a:	93 e0       	ldi	r25, 0x03	; 3
    2a5c:	b7 01       	movw	r22, r14
    2a5e:	0e 94 f8 35 	call	0x6bf0	; 0x6bf0 <_ZN5Print5printERK6String>
    2a62:	df 91       	pop	r29
    2a64:	cf 91       	pop	r28
    2a66:	1f 91       	pop	r17
    2a68:	0f 91       	pop	r16
    2a6a:	ff 90       	pop	r15
    2a6c:	ef 90       	pop	r14
    2a6e:	df 90       	pop	r13
    2a70:	08 95       	ret

00002a72 <_ZL8sendDatac>:
    2a72:	ff 92       	push	r15
    2a74:	0f 93       	push	r16
    2a76:	1f 93       	push	r17
    2a78:	df 93       	push	r29
    2a7a:	cf 93       	push	r28
    2a7c:	cd b7       	in	r28, 0x3d	; 61
    2a7e:	de b7       	in	r29, 0x3e	; 62
    2a80:	27 97       	sbiw	r28, 0x07	; 7
    2a82:	0f b6       	in	r0, 0x3f	; 63
    2a84:	f8 94       	cli
    2a86:	de bf       	out	0x3e, r29	; 62
    2a88:	0f be       	out	0x3f, r0	; 63
    2a8a:	cd bf       	out	0x3d, r28	; 61
    2a8c:	f8 2e       	mov	r15, r24
    2a8e:	8e 01       	movw	r16, r28
    2a90:	0f 5f       	subi	r16, 0xFF	; 255
    2a92:	1f 4f       	sbci	r17, 0xFF	; 255
    2a94:	c8 01       	movw	r24, r16
    2a96:	60 e0       	ldi	r22, 0x00	; 0
    2a98:	71 e0       	ldi	r23, 0x01	; 1
    2a9a:	0e 94 07 38 	call	0x700e	; 0x700e <_ZN6StringC1EPKc>
    2a9e:	c8 01       	movw	r24, r16
    2aa0:	6f 2d       	mov	r22, r15
    2aa2:	0e 94 a3 37 	call	0x6f46	; 0x6f46 <_ZN6String6concatEc>
    2aa6:	c8 01       	movw	r24, r16
    2aa8:	0e 94 a0 14 	call	0x2940	; 0x2940 <_ZL8sendDataRK6String>
    2aac:	c8 01       	movw	r24, r16
    2aae:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
    2ab2:	27 96       	adiw	r28, 0x07	; 7
    2ab4:	0f b6       	in	r0, 0x3f	; 63
    2ab6:	f8 94       	cli
    2ab8:	de bf       	out	0x3e, r29	; 62
    2aba:	0f be       	out	0x3f, r0	; 63
    2abc:	cd bf       	out	0x3d, r28	; 61
    2abe:	cf 91       	pop	r28
    2ac0:	df 91       	pop	r29
    2ac2:	1f 91       	pop	r17
    2ac4:	0f 91       	pop	r16
    2ac6:	ff 90       	pop	r15
    2ac8:	08 95       	ret

00002aca <_ZL8sendDatai>:
    2aca:	ef 92       	push	r14
    2acc:	ff 92       	push	r15
    2ace:	0f 93       	push	r16
    2ad0:	1f 93       	push	r17
    2ad2:	df 93       	push	r29
    2ad4:	cf 93       	push	r28
    2ad6:	cd b7       	in	r28, 0x3d	; 61
    2ad8:	de b7       	in	r29, 0x3e	; 62
    2ada:	27 97       	sbiw	r28, 0x07	; 7
    2adc:	0f b6       	in	r0, 0x3f	; 63
    2ade:	f8 94       	cli
    2ae0:	de bf       	out	0x3e, r29	; 62
    2ae2:	0f be       	out	0x3f, r0	; 63
    2ae4:	cd bf       	out	0x3d, r28	; 61
    2ae6:	7c 01       	movw	r14, r24
    2ae8:	8e 01       	movw	r16, r28
    2aea:	0f 5f       	subi	r16, 0xFF	; 255
    2aec:	1f 4f       	sbci	r17, 0xFF	; 255
    2aee:	c8 01       	movw	r24, r16
    2af0:	60 e0       	ldi	r22, 0x00	; 0
    2af2:	71 e0       	ldi	r23, 0x01	; 1
    2af4:	0e 94 07 38 	call	0x700e	; 0x700e <_ZN6StringC1EPKc>
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
    2af8:	c8 01       	movw	r24, r16
    2afa:	b7 01       	movw	r22, r14
    2afc:	0e 94 46 37 	call	0x6e8c	; 0x6e8c <_ZN6String6concatEi>
    2b00:	c8 01       	movw	r24, r16
    2b02:	0e 94 a0 14 	call	0x2940	; 0x2940 <_ZL8sendDataRK6String>
    2b06:	c8 01       	movw	r24, r16
    2b08:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
    2b0c:	27 96       	adiw	r28, 0x07	; 7
    2b0e:	0f b6       	in	r0, 0x3f	; 63
    2b10:	f8 94       	cli
    2b12:	de bf       	out	0x3e, r29	; 62
    2b14:	0f be       	out	0x3f, r0	; 63
    2b16:	cd bf       	out	0x3d, r28	; 61
    2b18:	cf 91       	pop	r28
    2b1a:	df 91       	pop	r29
    2b1c:	1f 91       	pop	r17
    2b1e:	0f 91       	pop	r16
    2b20:	ff 90       	pop	r15
    2b22:	ef 90       	pop	r14
    2b24:	08 95       	ret

00002b26 <_ZL8sendDatam>:
    2b26:	0f 93       	push	r16
    2b28:	1f 93       	push	r17
    2b2a:	df 93       	push	r29
    2b2c:	cf 93       	push	r28
    2b2e:	cd b7       	in	r28, 0x3d	; 61
    2b30:	de b7       	in	r29, 0x3e	; 62
    2b32:	27 97       	sbiw	r28, 0x07	; 7
    2b34:	0f b6       	in	r0, 0x3f	; 63
    2b36:	f8 94       	cli
    2b38:	de bf       	out	0x3e, r29	; 62
    2b3a:	0f be       	out	0x3f, r0	; 63
    2b3c:	cd bf       	out	0x3d, r28	; 61
    2b3e:	ab 01       	movw	r20, r22
    2b40:	bc 01       	movw	r22, r24
    2b42:	8e 01       	movw	r16, r28
    2b44:	0f 5f       	subi	r16, 0xFF	; 255
    2b46:	1f 4f       	sbci	r17, 0xFF	; 255
    2b48:	c8 01       	movw	r24, r16
    2b4a:	0e 94 29 0c 	call	0x1852	; 0x1852 <_ZN13GB_PrintDirty13getTimeStringEm>
    2b4e:	c8 01       	movw	r24, r16
    2b50:	0e 94 a0 14 	call	0x2940	; 0x2940 <_ZL8sendDataRK6String>
    2b54:	c8 01       	movw	r24, r16
    2b56:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
    2b5a:	27 96       	adiw	r28, 0x07	; 7
    2b5c:	0f b6       	in	r0, 0x3f	; 63
    2b5e:	f8 94       	cli
    2b60:	de bf       	out	0x3e, r29	; 62
    2b62:	0f be       	out	0x3f, r0	; 63
    2b64:	cd bf       	out	0x3d, r28	; 61
    2b66:	cf 91       	pop	r28
    2b68:	df 91       	pop	r29
    2b6a:	1f 91       	pop	r17
    2b6c:	0f 91       	pop	r16
    2b6e:	08 95       	ret

00002b70 <_ZL8sendDataf>:
    2b70:	af 92       	push	r10
    2b72:	bf 92       	push	r11
    2b74:	cf 92       	push	r12
    2b76:	df 92       	push	r13
    2b78:	ef 92       	push	r14
    2b7a:	ff 92       	push	r15
    2b7c:	0f 93       	push	r16
    2b7e:	1f 93       	push	r17
    2b80:	df 93       	push	r29
    2b82:	cf 93       	push	r28
    2b84:	cd b7       	in	r28, 0x3d	; 61
    2b86:	de b7       	in	r29, 0x3e	; 62
    2b88:	2e 97       	sbiw	r28, 0x0e	; 14
    2b8a:	0f b6       	in	r0, 0x3f	; 63
    2b8c:	f8 94       	cli
    2b8e:	de bf       	out	0x3e, r29	; 62
    2b90:	0f be       	out	0x3f, r0	; 63
    2b92:	cd bf       	out	0x3d, r28	; 61
    2b94:	7b 01       	movw	r14, r22
    2b96:	8c 01       	movw	r16, r24
      out = flashStringLoad(S_0x) + out;
    }
    return out;
  }
  static String floatToString(float number){
    String out;
    2b98:	5e 01       	movw	r10, r28
    2b9a:	08 94       	sec
    2b9c:	a1 1c       	adc	r10, r1
    2b9e:	b1 1c       	adc	r11, r1
    2ba0:	c5 01       	movw	r24, r10
    2ba2:	60 e0       	ldi	r22, 0x00	; 0
    2ba4:	71 e0       	ldi	r23, 0x01	; 1
    2ba6:	0e 94 07 38 	call	0x700e	; 0x700e <_ZN6StringC1EPKc>

    int temp = number*100;
    2baa:	c8 01       	movw	r24, r16
    2bac:	b7 01       	movw	r22, r14
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	48 ec       	ldi	r20, 0xC8	; 200
    2bb4:	52 e4       	ldi	r21, 0x42	; 66
    2bb6:	0e 94 9f 3b 	call	0x773e	; 0x773e <__mulsf3>
    2bba:	0e 94 b8 3a 	call	0x7570	; 0x7570 <__fixsfsi>
    2bbe:	6b 01       	movw	r12, r22
    2bc0:	7c 01       	movw	r14, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	64 e6       	ldi	r22, 0x64	; 100
    2bc6:	70 e0       	ldi	r23, 0x00	; 0
    2bc8:	0e 94 35 3c 	call	0x786a	; 0x786a <__divmodhi4>
    2bcc:	c5 01       	movw	r24, r10
    2bce:	0e 94 46 37 	call	0x6e8c	; 0x6e8c <_ZN6String6concatEi>
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    2bd2:	c5 01       	movw	r24, r10
    2bd4:	6e e2       	ldi	r22, 0x2E	; 46
    2bd6:	0e 94 a3 37 	call	0x6f46	; 0x6f46 <_ZN6String6concatEc>
    int whole = temp/100;
    int fract = temp%100;

    out += whole;
    out += '.';
    out += getFixedDigitsString(temp,2);
    2bda:	8e 01       	movw	r16, r28
    2bdc:	08 5f       	subi	r16, 0xF8	; 248
    2bde:	1f 4f       	sbci	r17, 0xFF	; 255
    2be0:	c8 01       	movw	r24, r16
    2be2:	b6 01       	movw	r22, r12
    2be4:	42 e0       	ldi	r20, 0x02	; 2
    2be6:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    2bea:	c5 01       	movw	r24, r10
    2bec:	b8 01       	movw	r22, r16
    2bee:	0e 94 b6 37 	call	0x6f6c	; 0x6f6c <_ZN6String6concatERKS_>
    2bf2:	c8 01       	movw	r24, r16
    2bf4:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
    2bf8:	c5 01       	movw	r24, r10
    2bfa:	0e 94 a0 14 	call	0x2940	; 0x2940 <_ZL8sendDataRK6String>
    2bfe:	c5 01       	movw	r24, r10
    2c00:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
    2c04:	2e 96       	adiw	r28, 0x0e	; 14
    2c06:	0f b6       	in	r0, 0x3f	; 63
    2c08:	f8 94       	cli
    2c0a:	de bf       	out	0x3e, r29	; 62
    2c0c:	0f be       	out	0x3f, r0	; 63
    2c0e:	cd bf       	out	0x3d, r28	; 61
    2c10:	cf 91       	pop	r28
    2c12:	df 91       	pop	r29
    2c14:	1f 91       	pop	r17
    2c16:	0f 91       	pop	r16
    2c18:	ff 90       	pop	r15
    2c1a:	ef 90       	pop	r14
    2c1c:	df 90       	pop	r13
    2c1e:	cf 90       	pop	r12
    2c20:	bf 90       	pop	r11
    2c22:	af 90       	pop	r10
    2c24:	08 95       	ret

00002c26 <_ZL8sendDataj>:
    2c26:	ef 92       	push	r14
    2c28:	ff 92       	push	r15
    2c2a:	0f 93       	push	r16
    2c2c:	1f 93       	push	r17
    2c2e:	df 93       	push	r29
    2c30:	cf 93       	push	r28
    2c32:	cd b7       	in	r28, 0x3d	; 61
    2c34:	de b7       	in	r29, 0x3e	; 62
    2c36:	27 97       	sbiw	r28, 0x07	; 7
    2c38:	0f b6       	in	r0, 0x3f	; 63
    2c3a:	f8 94       	cli
    2c3c:	de bf       	out	0x3e, r29	; 62
    2c3e:	0f be       	out	0x3f, r0	; 63
    2c40:	cd bf       	out	0x3d, r28	; 61
    2c42:	7c 01       	movw	r14, r24
    2c44:	8e 01       	movw	r16, r28
    2c46:	0f 5f       	subi	r16, 0xFF	; 255
    2c48:	1f 4f       	sbci	r17, 0xFF	; 255
    2c4a:	c8 01       	movw	r24, r16
    2c4c:	60 e0       	ldi	r22, 0x00	; 0
    2c4e:	71 e0       	ldi	r23, 0x01	; 1
    2c50:	0e 94 07 38 	call	0x700e	; 0x700e <_ZN6StringC1EPKc>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
	String & operator += (unsigned int num)		{concat(num); return (*this);}
    2c54:	c8 01       	movw	r24, r16
    2c56:	b7 01       	movw	r22, r14
    2c58:	0e 94 18 37 	call	0x6e30	; 0x6e30 <_ZN6String6concatEj>
    2c5c:	c8 01       	movw	r24, r16
    2c5e:	0e 94 a0 14 	call	0x2940	; 0x2940 <_ZL8sendDataRK6String>
    2c62:	c8 01       	movw	r24, r16
    2c64:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
    2c68:	27 96       	adiw	r28, 0x07	; 7
    2c6a:	0f b6       	in	r0, 0x3f	; 63
    2c6c:	f8 94       	cli
    2c6e:	de bf       	out	0x3e, r29	; 62
    2c70:	0f be       	out	0x3f, r0	; 63
    2c72:	cd bf       	out	0x3d, r28	; 61
    2c74:	cf 91       	pop	r28
    2c76:	df 91       	pop	r29
    2c78:	1f 91       	pop	r17
    2c7a:	0f 91       	pop	r16
    2c7c:	ff 90       	pop	r15
    2c7e:	ef 90       	pop	r14
    2c80:	08 95       	ret

00002c82 <_ZL8sendDataPK19__FlashStringHelper>:
    2c82:	9f 92       	push	r9
    2c84:	af 92       	push	r10
    2c86:	bf 92       	push	r11
    2c88:	cf 92       	push	r12
    2c8a:	df 92       	push	r13
    2c8c:	ef 92       	push	r14
    2c8e:	ff 92       	push	r15
    2c90:	0f 93       	push	r16
    2c92:	1f 93       	push	r17
    2c94:	cf 93       	push	r28
    2c96:	df 93       	push	r29
    2c98:	b8 2e       	mov	r11, r24
    2c9a:	a9 2e       	mov	r10, r25
    2c9c:	80 91 4b 01 	lds	r24, 0x014B
    2ca0:	88 23       	and	r24, r24
    2ca2:	09 f4       	brne	.+2      	; 0x2ca6 <_ZL8sendDataPK19__FlashStringHelper+0x24>
    2ca4:	85 c0       	rjmp	.+266    	; 0x2db0 <_ZL8sendDataPK19__FlashStringHelper+0x12e>
  }


  static boolean sendHttpResponseData(const byte &wifiPortDescriptor, const __FlashStringHelper* data){
    boolean isSendOK = true;
    if (!s_wifiIsHeaderSended){
    2ca6:	80 91 c0 01 	lds	r24, 0x01C0
    2caa:	88 23       	and	r24, r24
    2cac:	89 f4       	brne	.+34     	; 0x2cd0 <_ZL8sendDataPK19__FlashStringHelper+0x4e>
      sendHttpOKHeader(wifiPortDescriptor); 
    2cae:	80 91 04 01 	lds	r24, 0x0104
    2cb2:	0e 94 21 0b 	call	0x1642	; 0x1642 <_ZN15GB_SerialHelper16sendHttpOKHeaderEh>
      s_wifiIsHeaderSended = true;
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	80 93 c0 01 	sts	0x01C0, r24
  static void sendHttpNotFoundHeader(const byte portDescriptor){ 
    sendWifiData(portDescriptor, F("HTTP/1.1 404 Not Found\r\nConnection: close\r\n\r\n"));
  }

  static void startHttpFrame(const byte &wifiPortDescriptor){
    sendWifiFrameStart(wifiPortDescriptor, WIFI_RESPONSE_FRAME_SIZE);
    2cbc:	80 91 04 01 	lds	r24, 0x0104
    2cc0:	68 e7       	ldi	r22, 0x78	; 120
    2cc2:	75 e0       	ldi	r23, 0x05	; 5
    2cc4:	0e 94 df 08 	call	0x11be	; 0x11be <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>
    s_wifiResponseAutoFlushConut = 0;
    2cc8:	10 92 c2 01 	sts	0x01C2, r1
    2ccc:	10 92 c1 01 	sts	0x01C1, r1
    if (!s_wifiIsHeaderSended){
      sendHttpOKHeader(wifiPortDescriptor); 
      s_wifiIsHeaderSended = true;
      startHttpFrame(wifiPortDescriptor);
    } 
    if (s_wifiResponseAutoFlushConut + flashStringLength(data) < WIFI_RESPONSE_FRAME_SIZE){
    2cd0:	c0 91 c1 01 	lds	r28, 0x01C1
    2cd4:	d0 91 c2 01 	lds	r29, 0x01C2
enum HTTP_TAG {
  HTTP_TAG_OPEN, HTTP_TAG_CLOSED, HTTP_TAG_SINGLE
};

static int flashStringLength(const char PROGMEM* pstr){ 
  return strlen_P(pstr);
    2cd8:	8b 2d       	mov	r24, r11
    2cda:	9a 2d       	mov	r25, r10
    2cdc:	0e 94 47 05 	call	0xa8e	; 0xa8e <strlen_P>
    2ce0:	6c 01       	movw	r12, r24
    2ce2:	8c 0f       	add	r24, r28
    2ce4:	9d 1f       	adc	r25, r29
    2ce6:	88 57       	subi	r24, 0x78	; 120
    2ce8:	95 40       	sbci	r25, 0x05	; 5
    2cea:	1c f0       	brlt	.+6      	; 0x2cf2 <_ZL8sendDataPK19__FlashStringHelper+0x70>
    2cec:	c0 e0       	ldi	r28, 0x00	; 0
    2cee:	d0 e0       	ldi	r29, 0x00	; 0
    2cf0:	27 c0       	rjmp	.+78     	; 0x2d40 <_ZL8sendDataPK19__FlashStringHelper+0xbe>
      s_wifiResponseAutoFlushConut += Serial.print(data);
    2cf2:	8d eb       	ldi	r24, 0xBD	; 189
    2cf4:	93 e0       	ldi	r25, 0x03	; 3
    2cf6:	6b 2d       	mov	r22, r11
    2cf8:	7a 2d       	mov	r23, r10
    2cfa:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
    2cfe:	c8 0f       	add	r28, r24
    2d00:	d9 1f       	adc	r29, r25
    2d02:	d0 93 c2 01 	sts	0x01C2, r29
    2d06:	c0 93 c1 01 	sts	0x01C1, r28
    2d0a:	58 c0       	rjmp	.+176    	; 0x2dbc <_ZL8sendDataPK19__FlashStringHelper+0x13a>
    } 
    else {
      int index = 0;
      while (s_wifiResponseAutoFlushConut < WIFI_RESPONSE_FRAME_SIZE){
        char c = flashStringCharAt(data, index++);
    2d0c:	7e 01       	movw	r14, r28
    2d0e:	08 94       	sec
    2d10:	e1 1c       	adc	r14, r1
    2d12:	f1 1c       	adc	r15, r1
}
static int flashStringLength(const __FlashStringHelper* fstr){ 
  return flashStringLength((const char PROGMEM *) fstr);
}
static char flashStringCharAt(const __FlashStringHelper* fstr, int index){ 
  return flashStringCharAt((const char PROGMEM*) fstr, index);
    2d14:	8b 2d       	mov	r24, r11
    2d16:	9a 2d       	mov	r25, r10
    2d18:	be 01       	movw	r22, r28
    2d1a:	41 e0       	ldi	r20, 0x01	; 1
    2d1c:	0e 94 fe 05 	call	0xbfc	; 0xbfc <_ZL17flashStringCharAtPKcih>
    2d20:	68 2f       	mov	r22, r24
        s_wifiResponseAutoFlushConut += Serial.print(c);
    2d22:	00 91 c1 01 	lds	r16, 0x01C1
    2d26:	10 91 c2 01 	lds	r17, 0x01C2
    2d2a:	8d eb       	ldi	r24, 0xBD	; 189
    2d2c:	93 e0       	ldi	r25, 0x03	; 3
    2d2e:	0e 94 98 34 	call	0x6930	; 0x6930 <_ZN5Print5printEc>
    2d32:	08 0f       	add	r16, r24
    2d34:	19 1f       	adc	r17, r25
    2d36:	10 93 c2 01 	sts	0x01C2, r17
    2d3a:	00 93 c1 01 	sts	0x01C1, r16
    2d3e:	e7 01       	movw	r28, r14
    if (s_wifiResponseAutoFlushConut + flashStringLength(data) < WIFI_RESPONSE_FRAME_SIZE){
      s_wifiResponseAutoFlushConut += Serial.print(data);
    } 
    else {
      int index = 0;
      while (s_wifiResponseAutoFlushConut < WIFI_RESPONSE_FRAME_SIZE){
    2d40:	80 91 c1 01 	lds	r24, 0x01C1
    2d44:	90 91 c2 01 	lds	r25, 0x01C2
    2d48:	88 57       	subi	r24, 0x78	; 120
    2d4a:	95 40       	sbci	r25, 0x05	; 5
    2d4c:	fc f2       	brlt	.-66     	; 0x2d0c <_ZL8sendDataPK19__FlashStringHelper+0x8a>
        char c = flashStringCharAt(data, index++);
        s_wifiResponseAutoFlushConut += Serial.print(c);
      }
      isSendOK = stopHttpFrame();
    2d4e:	0e 94 75 14 	call	0x28ea	; 0x28ea <_ZN15GB_SerialHelper13stopHttpFrameEv>
    2d52:	98 2e       	mov	r9, r24
  static void sendHttpNotFoundHeader(const byte portDescriptor){ 
    sendWifiData(portDescriptor, F("HTTP/1.1 404 Not Found\r\nConnection: close\r\n\r\n"));
  }

  static void startHttpFrame(const byte &wifiPortDescriptor){
    sendWifiFrameStart(wifiPortDescriptor, WIFI_RESPONSE_FRAME_SIZE);
    2d54:	80 91 04 01 	lds	r24, 0x0104
    2d58:	68 e7       	ldi	r22, 0x78	; 120
    2d5a:	75 e0       	ldi	r23, 0x05	; 5
    2d5c:	0e 94 df 08 	call	0x11be	; 0x11be <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>
    s_wifiResponseAutoFlushConut = 0;
    2d60:	10 92 c2 01 	sts	0x01C2, r1
    2d64:	10 92 c1 01 	sts	0x01C1, r1
    2d68:	1a c0       	rjmp	.+52     	; 0x2d9e <_ZL8sendDataPK19__FlashStringHelper+0x11c>
        s_wifiResponseAutoFlushConut += Serial.print(c);
      }
      isSendOK = stopHttpFrame();
      startHttpFrame(wifiPortDescriptor);   
      while (index < flashStringLength(data)){
        char c = flashStringCharAt(data, index++);
    2d6a:	7e 01       	movw	r14, r28
    2d6c:	08 94       	sec
    2d6e:	e1 1c       	adc	r14, r1
    2d70:	f1 1c       	adc	r15, r1
    2d72:	8b 2d       	mov	r24, r11
    2d74:	9a 2d       	mov	r25, r10
    2d76:	be 01       	movw	r22, r28
    2d78:	41 e0       	ldi	r20, 0x01	; 1
    2d7a:	0e 94 fe 05 	call	0xbfc	; 0xbfc <_ZL17flashStringCharAtPKcih>
    2d7e:	68 2f       	mov	r22, r24
        s_wifiResponseAutoFlushConut += Serial.print(c);
    2d80:	00 91 c1 01 	lds	r16, 0x01C1
    2d84:	10 91 c2 01 	lds	r17, 0x01C2
    2d88:	8d eb       	ldi	r24, 0xBD	; 189
    2d8a:	93 e0       	ldi	r25, 0x03	; 3
    2d8c:	0e 94 98 34 	call	0x6930	; 0x6930 <_ZN5Print5printEc>
    2d90:	08 0f       	add	r16, r24
    2d92:	19 1f       	adc	r17, r25
    2d94:	10 93 c2 01 	sts	0x01C2, r17
    2d98:	00 93 c1 01 	sts	0x01C1, r16
    2d9c:	e7 01       	movw	r28, r14
        char c = flashStringCharAt(data, index++);
        s_wifiResponseAutoFlushConut += Serial.print(c);
      }
      isSendOK = stopHttpFrame();
      startHttpFrame(wifiPortDescriptor);   
      while (index < flashStringLength(data)){
    2d9e:	cc 15       	cp	r28, r12
    2da0:	dd 05       	cpc	r29, r13
    2da2:	1c f3       	brlt	.-58     	; 0x2d6a <_ZL8sendDataPK19__FlashStringHelper+0xe8>
    2da4:	99 20       	and	r9, r9
    2da6:	51 f4       	brne	.+20     	; 0x2dbc <_ZL8sendDataPK19__FlashStringHelper+0x13a>
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	80 93 4c 01 	sts	0x014C, r24
    2dae:	06 c0       	rjmp	.+12     	; 0x2dbc <_ZL8sendDataPK19__FlashStringHelper+0x13a>
    2db0:	8d eb       	ldi	r24, 0xBD	; 189
    2db2:	93 e0       	ldi	r25, 0x03	; 3
    2db4:	6b 2d       	mov	r22, r11
    2db6:	7a 2d       	mov	r23, r10
    2db8:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
    2dbc:	df 91       	pop	r29
    2dbe:	cf 91       	pop	r28
    2dc0:	1f 91       	pop	r17
    2dc2:	0f 91       	pop	r16
    2dc4:	ff 90       	pop	r15
    2dc6:	ef 90       	pop	r14
    2dc8:	df 90       	pop	r13
    2dca:	cf 90       	pop	r12
    2dcc:	bf 90       	pop	r11
    2dce:	af 90       	pop	r10
    2dd0:	9f 90       	pop	r9
    2dd2:	08 95       	ret

00002dd4 <_ZL7sendTagPKc8HTTP_TAG>:
    2dd4:	0f 93       	push	r16
    2dd6:	1f 93       	push	r17
    2dd8:	cf 93       	push	r28
    2dda:	df 93       	push	r29
    2ddc:	8c 01       	movw	r16, r24
    2dde:	eb 01       	movw	r28, r22
    2de0:	8c e3       	ldi	r24, 0x3C	; 60
    2de2:	0e 94 39 15 	call	0x2a72	; 0x2a72 <_ZL8sendDatac>
    2de6:	c1 30       	cpi	r28, 0x01	; 1
    2de8:	d1 05       	cpc	r29, r1
    2dea:	19 f4       	brne	.+6      	; 0x2df2 <_ZL7sendTagPKc8HTTP_TAG+0x1e>
    2dec:	8f e2       	ldi	r24, 0x2F	; 47
    2dee:	0e 94 39 15 	call	0x2a72	; 0x2a72 <_ZL8sendDatac>
    2df2:	c8 01       	movw	r24, r16
    2df4:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    2df8:	22 97       	sbiw	r28, 0x02	; 2
    2dfa:	19 f4       	brne	.+6      	; 0x2e02 <_ZL7sendTagPKc8HTTP_TAG+0x2e>
    2dfc:	8f e2       	ldi	r24, 0x2F	; 47
    2dfe:	0e 94 39 15 	call	0x2a72	; 0x2a72 <_ZL8sendDatac>
    2e02:	8e e3       	ldi	r24, 0x3E	; 62
    2e04:	0e 94 39 15 	call	0x2a72	; 0x2a72 <_ZL8sendDatac>
    2e08:	df 91       	pop	r29
    2e0a:	cf 91       	pop	r28
    2e0c:	1f 91       	pop	r17
    2e0e:	0f 91       	pop	r16
    2e10:	08 95       	ret

00002e12 <_Z20printSendStorageDumpv>:
    2e12:	bf 92       	push	r11
    2e14:	cf 92       	push	r12
    2e16:	df 92       	push	r13
    2e18:	ef 92       	push	r14
    2e1a:	ff 92       	push	r15
    2e1c:	0f 93       	push	r16
    2e1e:	1f 93       	push	r17
    2e20:	df 93       	push	r29
    2e22:	cf 93       	push	r28
    2e24:	cd b7       	in	r28, 0x3d	; 61
    2e26:	de b7       	in	r29, 0x3e	; 62
    2e28:	65 97       	sbiw	r28, 0x15	; 21
    2e2a:	0f b6       	in	r0, 0x3f	; 63
    2e2c:	f8 94       	cli
    2e2e:	de bf       	out	0x3e, r29	; 62
    2e30:	0f be       	out	0x3f, r0	; 63
    2e32:	cd bf       	out	0x3d, r28	; 61
    2e34:	86 e7       	ldi	r24, 0x76	; 118
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	60 e0       	ldi	r22, 0x00	; 0
    2e3a:	70 e0       	ldi	r23, 0x00	; 0
    2e3c:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    2e40:	8c e7       	ldi	r24, 0x7C	; 124
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	60 e0       	ldi	r22, 0x00	; 0
    2e46:	70 e0       	ldi	r23, 0x00	; 0
    2e48:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    2e4c:	8f e7       	ldi	r24, 0x7F	; 127
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	60 e0       	ldi	r22, 0x00	; 0
    2e52:	70 e0       	ldi	r23, 0x00	; 0
    2e54:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    2e58:	8f e7       	ldi	r24, 0x7F	; 127
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	61 e0       	ldi	r22, 0x01	; 1
    2e5e:	70 e0       	ldi	r23, 0x00	; 0
    2e60:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    2e64:	10 e0       	ldi	r17, 0x00	; 0
    2e66:	7e 01       	movw	r14, r28
    2e68:	08 94       	sec
    2e6a:	e1 1c       	adc	r14, r1
    2e6c:	f1 1c       	adc	r15, r1
    2e6e:	8f e7       	ldi	r24, 0x7F	; 127
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	60 e0       	ldi	r22, 0x00	; 0
    2e74:	70 e0       	ldi	r23, 0x00	; 0
    2e76:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    2e7a:	82 e8       	ldi	r24, 0x82	; 130
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	60 e0       	ldi	r22, 0x00	; 0
    2e80:	70 e0       	ldi	r23, 0x00	; 0
    2e82:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    2e86:	c7 01       	movw	r24, r14
    2e88:	61 2f       	mov	r22, r17
    2e8a:	40 e0       	ldi	r20, 0x00	; 0
    2e8c:	0e 94 2a 07 	call	0xe54	; 0xe54 <_ZN13GB_PrintDirty6getHEXEhh>
    2e90:	c7 01       	movw	r24, r14
    2e92:	0e 94 a0 14 	call	0x2940	; 0x2940 <_ZL8sendDataRK6String>
    2e96:	c7 01       	movw	r24, r14
    2e98:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
    2e9c:	82 e8       	ldi	r24, 0x82	; 130
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	61 e0       	ldi	r22, 0x01	; 1
    2ea2:	70 e0       	ldi	r23, 0x00	; 0
    2ea4:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    2ea8:	8f e7       	ldi	r24, 0x7F	; 127
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	61 e0       	ldi	r22, 0x01	; 1
    2eae:	70 e0       	ldi	r23, 0x00	; 0
    2eb0:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    2eb4:	1f 5f       	subi	r17, 0xFF	; 255
    2eb6:	10 31       	cpi	r17, 0x10	; 16
    2eb8:	d1 f6       	brne	.-76     	; 0x2e6e <_Z20printSendStorageDumpv+0x5c>
    2eba:	8c e7       	ldi	r24, 0x7C	; 124
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	61 e0       	ldi	r22, 0x01	; 1
    2ec0:	70 e0       	ldi	r23, 0x00	; 0
    2ec2:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    2ec6:	00 e0       	ldi	r16, 0x00	; 0
    2ec8:	10 e0       	ldi	r17, 0x00	; 0
    2eca:	58 e0       	ldi	r21, 0x08	; 8
    2ecc:	c5 2e       	mov	r12, r21
    2ece:	d1 2c       	mov	r13, r1
    2ed0:	cc 0e       	add	r12, r28
    2ed2:	dd 1e       	adc	r13, r29
    2ed4:	4f e0       	ldi	r20, 0x0F	; 15
    2ed6:	e4 2e       	mov	r14, r20
    2ed8:	f1 2c       	mov	r15, r1
    2eda:	ec 0e       	add	r14, r28
    2edc:	fd 1e       	adc	r15, r29
    2ede:	c8 01       	movw	r24, r16
    2ee0:	0e 94 bb 06 	call	0xd76	; 0xd76 <_ZN10GB_Storage4readEj>
    2ee4:	b8 2e       	mov	r11, r24
    2ee6:	c8 01       	movw	r24, r16
    2ee8:	8f 70       	andi	r24, 0x0F	; 15
    2eea:	90 70       	andi	r25, 0x00	; 0
    2eec:	89 2b       	or	r24, r25
    2eee:	b9 f5       	brne	.+110    	; 0x2f5e <_Z20printSendStorageDumpv+0x14c>
    2ef0:	01 15       	cp	r16, r1
    2ef2:	11 05       	cpc	r17, r1
    2ef4:	31 f0       	breq	.+12     	; 0x2f02 <_Z20printSendStorageDumpv+0xf0>
    2ef6:	8c e7       	ldi	r24, 0x7C	; 124
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	61 e0       	ldi	r22, 0x01	; 1
    2efc:	70 e0       	ldi	r23, 0x00	; 0
    2efe:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    2f02:	8c e7       	ldi	r24, 0x7C	; 124
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	60 e0       	ldi	r22, 0x00	; 0
    2f08:	70 e0       	ldi	r23, 0x00	; 0
    2f0a:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    2f0e:	8f e7       	ldi	r24, 0x7F	; 127
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	60 e0       	ldi	r22, 0x00	; 0
    2f14:	70 e0       	ldi	r23, 0x00	; 0
    2f16:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    2f1a:	82 e8       	ldi	r24, 0x82	; 130
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	60 e0       	ldi	r22, 0x00	; 0
    2f20:	70 e0       	ldi	r23, 0x00	; 0
    2f22:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    2f26:	b8 01       	movw	r22, r16
    2f28:	34 e0       	ldi	r19, 0x04	; 4
    2f2a:	76 95       	lsr	r23
    2f2c:	67 95       	ror	r22
    2f2e:	3a 95       	dec	r19
    2f30:	e1 f7       	brne	.-8      	; 0x2f2a <_Z20printSendStorageDumpv+0x118>
    2f32:	c6 01       	movw	r24, r12
    2f34:	40 e0       	ldi	r20, 0x00	; 0
    2f36:	0e 94 2a 07 	call	0xe54	; 0xe54 <_ZN13GB_PrintDirty6getHEXEhh>
    2f3a:	c6 01       	movw	r24, r12
    2f3c:	0e 94 a0 14 	call	0x2940	; 0x2940 <_ZL8sendDataRK6String>
    2f40:	c6 01       	movw	r24, r12
    2f42:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
    2f46:	82 e8       	ldi	r24, 0x82	; 130
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	61 e0       	ldi	r22, 0x01	; 1
    2f4c:	70 e0       	ldi	r23, 0x00	; 0
    2f4e:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    2f52:	8f e7       	ldi	r24, 0x7F	; 127
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	61 e0       	ldi	r22, 0x01	; 1
    2f58:	70 e0       	ldi	r23, 0x00	; 0
    2f5a:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    2f5e:	8f e7       	ldi	r24, 0x7F	; 127
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	60 e0       	ldi	r22, 0x00	; 0
    2f64:	70 e0       	ldi	r23, 0x00	; 0
    2f66:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    2f6a:	c7 01       	movw	r24, r14
    2f6c:	6b 2d       	mov	r22, r11
    2f6e:	40 e0       	ldi	r20, 0x00	; 0
    2f70:	0e 94 2a 07 	call	0xe54	; 0xe54 <_ZN13GB_PrintDirty6getHEXEhh>
    2f74:	c7 01       	movw	r24, r14
    2f76:	0e 94 a0 14 	call	0x2940	; 0x2940 <_ZL8sendDataRK6String>
    2f7a:	c7 01       	movw	r24, r14
    2f7c:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
    2f80:	8f e7       	ldi	r24, 0x7F	; 127
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	61 e0       	ldi	r22, 0x01	; 1
    2f86:	70 e0       	ldi	r23, 0x00	; 0
    2f88:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    2f8c:	80 91 4c 01 	lds	r24, 0x014C
    2f90:	88 23       	and	r24, r24
    2f92:	99 f4       	brne	.+38     	; 0x2fba <_Z20printSendStorageDumpv+0x1a8>
    2f94:	0f 5f       	subi	r16, 0xFF	; 255
    2f96:	1f 4f       	sbci	r17, 0xFF	; 255
    2f98:	80 e1       	ldi	r24, 0x10	; 16
    2f9a:	00 30       	cpi	r16, 0x00	; 0
    2f9c:	18 07       	cpc	r17, r24
    2f9e:	09 f0       	breq	.+2      	; 0x2fa2 <_Z20printSendStorageDumpv+0x190>
    2fa0:	9e cf       	rjmp	.-196    	; 0x2ede <_Z20printSendStorageDumpv+0xcc>
    2fa2:	8c e7       	ldi	r24, 0x7C	; 124
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	61 e0       	ldi	r22, 0x01	; 1
    2fa8:	70 e0       	ldi	r23, 0x00	; 0
    2faa:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    2fae:	86 e7       	ldi	r24, 0x76	; 118
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	61 e0       	ldi	r22, 0x01	; 1
    2fb4:	70 e0       	ldi	r23, 0x00	; 0
    2fb6:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    2fba:	65 96       	adiw	r28, 0x15	; 21
    2fbc:	0f b6       	in	r0, 0x3f	; 63
    2fbe:	f8 94       	cli
    2fc0:	de bf       	out	0x3e, r29	; 62
    2fc2:	0f be       	out	0x3f, r0	; 63
    2fc4:	cd bf       	out	0x3d, r28	; 61
    2fc6:	cf 91       	pop	r28
    2fc8:	df 91       	pop	r29
    2fca:	1f 91       	pop	r17
    2fcc:	0f 91       	pop	r16
    2fce:	ff 90       	pop	r15
    2fd0:	ef 90       	pop	r14
    2fd2:	df 90       	pop	r13
    2fd4:	cf 90       	pop	r12
    2fd6:	bf 90       	pop	r11
    2fd8:	08 95       	ret

00002fda <_ZL13sendTagButtonPKcPK19__FlashStringHelper>:
    2fda:	ef 92       	push	r14
    2fdc:	ff 92       	push	r15
    2fde:	0f 93       	push	r16
    2fe0:	1f 93       	push	r17
    2fe2:	8c 01       	movw	r16, r24
    2fe4:	7b 01       	movw	r14, r22
    2fe6:	86 e7       	ldi	r24, 0x76	; 118
    2fe8:	93 e0       	ldi	r25, 0x03	; 3
    2fea:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    2fee:	c8 01       	movw	r24, r16
    2ff0:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    2ff4:	8b e6       	ldi	r24, 0x6B	; 107
    2ff6:	93 e0       	ldi	r25, 0x03	; 3
    2ff8:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    2ffc:	c7 01       	movw	r24, r14
    2ffe:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    3002:	87 e6       	ldi	r24, 0x67	; 103
    3004:	93 e0       	ldi	r25, 0x03	; 3
    3006:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    300a:	1f 91       	pop	r17
    300c:	0f 91       	pop	r16
    300e:	ff 90       	pop	r15
    3010:	ef 90       	pop	r14
    3012:	08 95       	ret

00003014 <_ZL30printSendConfigurationControlsv>:
    3014:	8d ee       	ldi	r24, 0xED	; 237
    3016:	95 e0       	ldi	r25, 0x05	; 5
    3018:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    301c:	88 ec       	ldi	r24, 0xC8	; 200
    301e:	95 e0       	ldi	r25, 0x05	; 5
    3020:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    3024:	80 ec       	ldi	r24, 0xC0	; 192
    3026:	95 e0       	ldi	r25, 0x05	; 5
    3028:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    302c:	08 95       	ret

0000302e <_Z14sendFreeMemoryv>:
    302e:	80 e1       	ldi	r24, 0x10	; 16
    3030:	91 e0       	ldi	r25, 0x01	; 1
    3032:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    3036:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <freeMemory>
    303a:	0e 94 65 15 	call	0x2aca	; 0x2aca <_ZL8sendDatai>
    303e:	8e e1       	ldi	r24, 0x1E	; 30
    3040:	91 e0       	ldi	r25, 0x01	; 1
    3042:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    3046:	88 ed       	ldi	r24, 0xD8	; 216
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    304e:	08 95       	ret

00003050 <_ZL19printSendPinsStatusv>:
    3050:	af 92       	push	r10
    3052:	bf 92       	push	r11
    3054:	cf 92       	push	r12
    3056:	df 92       	push	r13
    3058:	ef 92       	push	r14
    305a:	ff 92       	push	r15
    305c:	0f 93       	push	r16
    305e:	1f 93       	push	r17
    3060:	df 93       	push	r29
    3062:	cf 93       	push	r28
    3064:	cd b7       	in	r28, 0x3d	; 61
    3066:	de b7       	in	r29, 0x3e	; 62
    3068:	27 97       	sbiw	r28, 0x07	; 7
    306a:	0f b6       	in	r0, 0x3f	; 63
    306c:	f8 94       	cli
    306e:	de bf       	out	0x3e, r29	; 62
    3070:	0f be       	out	0x3f, r0	; 63
    3072:	cd bf       	out	0x3d, r28	; 61
    3074:	8f ea       	ldi	r24, 0xAF	; 175
    3076:	95 e0       	ldi	r25, 0x05	; 5
    3078:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    307c:	88 ed       	ldi	r24, 0xD8	; 216
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    3084:	00 e0       	ldi	r16, 0x00	; 0
    3086:	10 e0       	ldi	r17, 0x00	; 0
    3088:	62 ef       	ldi	r22, 0xF2	; 242
    308a:	c6 2e       	mov	r12, r22
    308c:	6f ef       	ldi	r22, 0xFF	; 255
    308e:	d6 2e       	mov	r13, r22
    3090:	5e 01       	movw	r10, r28
    3092:	08 94       	sec
    3094:	a1 1c       	adc	r10, r1
    3096:	b1 1c       	adc	r11, r1
    3098:	80 e2       	ldi	r24, 0x20	; 32
    309a:	0e 94 39 15 	call	0x2a72	; 0x2a72 <_ZL8sendDatac>
    309e:	0e 30       	cpi	r16, 0x0E	; 14
    30a0:	11 05       	cpc	r17, r1
    30a2:	3c f0       	brlt	.+14     	; 0x30b2 <_ZL19printSendPinsStatusv+0x62>
    30a4:	81 e4       	ldi	r24, 0x41	; 65
    30a6:	0e 94 39 15 	call	0x2a72	; 0x2a72 <_ZL8sendDatac>
    30aa:	c6 01       	movw	r24, r12
    30ac:	0e 94 65 15 	call	0x2aca	; 0x2aca <_ZL8sendDatai>
    30b0:	0b c0       	rjmp	.+22     	; 0x30c8 <_ZL19printSendPinsStatusv+0x78>
    30b2:	c5 01       	movw	r24, r10
    30b4:	b8 01       	movw	r22, r16
    30b6:	42 e0       	ldi	r20, 0x02	; 2
    30b8:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
    30bc:	c5 01       	movw	r24, r10
    30be:	0e 94 a0 14 	call	0x2940	; 0x2940 <_ZL8sendDataRK6String>
    30c2:	c5 01       	movw	r24, r10
    30c4:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
    30c8:	8c ea       	ldi	r24, 0xAC	; 172
    30ca:	95 e0       	ldi	r25, 0x05	; 5
    30cc:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    30d0:	08 30       	cpi	r16, 0x08	; 8
    30d2:	11 05       	cpc	r17, r1
    30d4:	f4 f4       	brge	.+60     	; 0x3112 <_ZL19printSendPinsStatusv+0xc2>
    30d6:	8a b1       	in	r24, 0x0a	; 10
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	00 2e       	mov	r0, r16
    30dc:	02 c0       	rjmp	.+4      	; 0x30e2 <_ZL19printSendPinsStatusv+0x92>
    30de:	95 95       	asr	r25
    30e0:	87 95       	ror	r24
    30e2:	0a 94       	dec	r0
    30e4:	e2 f7       	brpl	.-8      	; 0x30de <_ZL19printSendPinsStatusv+0x8e>
    30e6:	38 2f       	mov	r19, r24
    30e8:	31 70       	andi	r19, 0x01	; 1
    30ea:	8b b1       	in	r24, 0x0b	; 11
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	00 2e       	mov	r0, r16
    30f0:	02 c0       	rjmp	.+4      	; 0x30f6 <_ZL19printSendPinsStatusv+0xa6>
    30f2:	95 95       	asr	r25
    30f4:	87 95       	ror	r24
    30f6:	0a 94       	dec	r0
    30f8:	e2 f7       	brpl	.-8      	; 0x30f2 <_ZL19printSendPinsStatusv+0xa2>
    30fa:	ee 24       	eor	r14, r14
    30fc:	e3 94       	inc	r14
    30fe:	e8 22       	and	r14, r24
    3100:	89 b1       	in	r24, 0x09	; 9
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	00 2e       	mov	r0, r16
    3106:	02 c0       	rjmp	.+4      	; 0x310c <_ZL19printSendPinsStatusv+0xbc>
    3108:	95 95       	asr	r25
    310a:	87 95       	ror	r24
    310c:	0a 94       	dec	r0
    310e:	e2 f7       	brpl	.-8      	; 0x3108 <_ZL19printSendPinsStatusv+0xb8>
    3110:	3a c0       	rjmp	.+116    	; 0x3186 <_ZL19printSendPinsStatusv+0x136>
    3112:	0e 30       	cpi	r16, 0x0E	; 14
    3114:	11 05       	cpc	r17, r1
    3116:	d4 f4       	brge	.+52     	; 0x314c <_ZL19printSendPinsStatusv+0xfc>
    3118:	84 b1       	in	r24, 0x04	; 4
    311a:	98 01       	movw	r18, r16
    311c:	28 50       	subi	r18, 0x08	; 8
    311e:	30 40       	sbci	r19, 0x00	; 0
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	02 2e       	mov	r0, r18
    3124:	02 c0       	rjmp	.+4      	; 0x312a <_ZL19printSendPinsStatusv+0xda>
    3126:	95 95       	asr	r25
    3128:	87 95       	ror	r24
    312a:	0a 94       	dec	r0
    312c:	e2 f7       	brpl	.-8      	; 0x3126 <_ZL19printSendPinsStatusv+0xd6>
    312e:	38 2f       	mov	r19, r24
    3130:	31 70       	andi	r19, 0x01	; 1
    3132:	85 b1       	in	r24, 0x05	; 5
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	02 2e       	mov	r0, r18
    3138:	02 c0       	rjmp	.+4      	; 0x313e <_ZL19printSendPinsStatusv+0xee>
    313a:	95 95       	asr	r25
    313c:	87 95       	ror	r24
    313e:	0a 94       	dec	r0
    3140:	e2 f7       	brpl	.-8      	; 0x313a <_ZL19printSendPinsStatusv+0xea>
    3142:	ee 24       	eor	r14, r14
    3144:	e3 94       	inc	r14
    3146:	e8 22       	and	r14, r24
    3148:	83 b1       	in	r24, 0x03	; 3
    314a:	17 c0       	rjmp	.+46     	; 0x317a <_ZL19printSendPinsStatusv+0x12a>
    314c:	87 b1       	in	r24, 0x07	; 7
    314e:	2c 2d       	mov	r18, r12
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	0c 2c       	mov	r0, r12
    3154:	02 c0       	rjmp	.+4      	; 0x315a <_ZL19printSendPinsStatusv+0x10a>
    3156:	95 95       	asr	r25
    3158:	87 95       	ror	r24
    315a:	0a 94       	dec	r0
    315c:	e2 f7       	brpl	.-8      	; 0x3156 <_ZL19printSendPinsStatusv+0x106>
    315e:	38 2f       	mov	r19, r24
    3160:	31 70       	andi	r19, 0x01	; 1
    3162:	88 b1       	in	r24, 0x08	; 8
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	0c 2c       	mov	r0, r12
    3168:	02 c0       	rjmp	.+4      	; 0x316e <_ZL19printSendPinsStatusv+0x11e>
    316a:	95 95       	asr	r25
    316c:	87 95       	ror	r24
    316e:	0a 94       	dec	r0
    3170:	e2 f7       	brpl	.-8      	; 0x316a <_ZL19printSendPinsStatusv+0x11a>
    3172:	ee 24       	eor	r14, r14
    3174:	e3 94       	inc	r14
    3176:	e8 22       	and	r14, r24
    3178:	86 b1       	in	r24, 0x06	; 6
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	02 c0       	rjmp	.+4      	; 0x3182 <_ZL19printSendPinsStatusv+0x132>
    317e:	95 95       	asr	r25
    3180:	87 95       	ror	r24
    3182:	2a 95       	dec	r18
    3184:	e2 f7       	brpl	.-8      	; 0x317e <_ZL19printSendPinsStatusv+0x12e>
    3186:	ff 24       	eor	r15, r15
    3188:	f3 94       	inc	r15
    318a:	f8 22       	and	r15, r24
    318c:	31 30       	cpi	r19, 0x01	; 1
    318e:	59 f4       	brne	.+22     	; 0x31a6 <_ZL19printSendPinsStatusv+0x156>
    3190:	89 ea       	ldi	r24, 0xA9	; 169
    3192:	95 e0       	ldi	r25, 0x05	; 5
    3194:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    3198:	8e 2d       	mov	r24, r14
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	0e 94 65 15 	call	0x2aca	; 0x2aca <_ZL8sendDatai>
    31a0:	8f e9       	ldi	r24, 0x9F	; 159
    31a2:	95 e0       	ldi	r25, 0x05	; 5
    31a4:	0a c0       	rjmp	.+20     	; 0x31ba <_ZL19printSendPinsStatusv+0x16a>
    31a6:	86 e9       	ldi	r24, 0x96	; 150
    31a8:	95 e0       	ldi	r25, 0x05	; 5
    31aa:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    31ae:	8f 2d       	mov	r24, r15
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	0e 94 65 15 	call	0x2aca	; 0x2aca <_ZL8sendDatai>
    31b6:	82 e9       	ldi	r24, 0x92	; 146
    31b8:	95 e0       	ldi	r25, 0x05	; 5
    31ba:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    31be:	08 30       	cpi	r16, 0x08	; 8
    31c0:	11 05       	cpc	r17, r1
    31c2:	91 f1       	breq	.+100    	; 0x3228 <_ZL19printSendPinsStatusv+0x1d8>
    31c4:	09 30       	cpi	r16, 0x09	; 9
    31c6:	11 05       	cpc	r17, r1
    31c8:	8c f4       	brge	.+34     	; 0x31ec <_ZL19printSendPinsStatusv+0x19c>
    31ca:	03 30       	cpi	r16, 0x03	; 3
    31cc:	11 05       	cpc	r17, r1
    31ce:	19 f1       	breq	.+70     	; 0x3216 <_ZL19printSendPinsStatusv+0x1c6>
    31d0:	04 30       	cpi	r16, 0x04	; 4
    31d2:	11 05       	cpc	r17, r1
    31d4:	24 f4       	brge	.+8      	; 0x31de <_ZL19printSendPinsStatusv+0x18e>
    31d6:	02 30       	cpi	r16, 0x02	; 2
    31d8:	11 05       	cpc	r17, r1
    31da:	b0 f5       	brcc	.+108    	; 0x3248 <_ZL19printSendPinsStatusv+0x1f8>
    31dc:	19 c0       	rjmp	.+50     	; 0x3210 <_ZL19printSendPinsStatusv+0x1c0>
    31de:	04 30       	cpi	r16, 0x04	; 4
    31e0:	11 05       	cpc	r17, r1
    31e2:	e1 f0       	breq	.+56     	; 0x321c <_ZL19printSendPinsStatusv+0x1cc>
    31e4:	05 30       	cpi	r16, 0x05	; 5
    31e6:	11 05       	cpc	r17, r1
    31e8:	79 f5       	brne	.+94     	; 0x3248 <_ZL19printSendPinsStatusv+0x1f8>
    31ea:	1b c0       	rjmp	.+54     	; 0x3222 <_ZL19printSendPinsStatusv+0x1d2>
    31ec:	0d 30       	cpi	r16, 0x0D	; 13
    31ee:	11 05       	cpc	r17, r1
    31f0:	21 f1       	breq	.+72     	; 0x323a <_ZL19printSendPinsStatusv+0x1ea>
    31f2:	0e 30       	cpi	r16, 0x0E	; 14
    31f4:	11 05       	cpc	r17, r1
    31f6:	3c f4       	brge	.+14     	; 0x3206 <_ZL19printSendPinsStatusv+0x1b6>
    31f8:	0b 30       	cpi	r16, 0x0B	; 11
    31fa:	11 05       	cpc	r17, r1
    31fc:	c1 f0       	breq	.+48     	; 0x322e <_ZL19printSendPinsStatusv+0x1de>
    31fe:	0c 30       	cpi	r16, 0x0C	; 12
    3200:	11 05       	cpc	r17, r1
    3202:	11 f5       	brne	.+68     	; 0x3248 <_ZL19printSendPinsStatusv+0x1f8>
    3204:	17 c0       	rjmp	.+46     	; 0x3234 <_ZL19printSendPinsStatusv+0x1e4>
    3206:	c8 01       	movw	r24, r16
    3208:	42 97       	sbiw	r24, 0x12	; 18
    320a:	02 97       	sbiw	r24, 0x02	; 2
    320c:	e8 f4       	brcc	.+58     	; 0x3248 <_ZL19printSendPinsStatusv+0x1f8>
    320e:	18 c0       	rjmp	.+48     	; 0x3240 <_ZL19printSendPinsStatusv+0x1f0>
    3210:	8c e4       	ldi	r24, 0x4C	; 76
    3212:	95 e0       	ldi	r25, 0x05	; 5
    3214:	17 c0       	rjmp	.+46     	; 0x3244 <_ZL19printSendPinsStatusv+0x1f4>
    3216:	82 e3       	ldi	r24, 0x32	; 50
    3218:	95 e0       	ldi	r25, 0x05	; 5
    321a:	14 c0       	rjmp	.+40     	; 0x3244 <_ZL19printSendPinsStatusv+0x1f4>
    321c:	8a e1       	ldi	r24, 0x1A	; 26
    321e:	95 e0       	ldi	r25, 0x05	; 5
    3220:	11 c0       	rjmp	.+34     	; 0x3244 <_ZL19printSendPinsStatusv+0x1f4>
    3222:	84 ef       	ldi	r24, 0xF4	; 244
    3224:	94 e0       	ldi	r25, 0x04	; 4
    3226:	0e c0       	rjmp	.+28     	; 0x3244 <_ZL19printSendPinsStatusv+0x1f4>
    3228:	81 ee       	ldi	r24, 0xE1	; 225
    322a:	94 e0       	ldi	r25, 0x04	; 4
    322c:	0b c0       	rjmp	.+22     	; 0x3244 <_ZL19printSendPinsStatusv+0x1f4>
    322e:	81 ec       	ldi	r24, 0xC1	; 193
    3230:	94 e0       	ldi	r25, 0x04	; 4
    3232:	08 c0       	rjmp	.+16     	; 0x3244 <_ZL19printSendPinsStatusv+0x1f4>
    3234:	84 eb       	ldi	r24, 0xB4	; 180
    3236:	94 e0       	ldi	r25, 0x04	; 4
    3238:	05 c0       	rjmp	.+10     	; 0x3244 <_ZL19printSendPinsStatusv+0x1f4>
    323a:	8d ea       	ldi	r24, 0xAD	; 173
    323c:	94 e0       	ldi	r25, 0x04	; 4
    323e:	02 c0       	rjmp	.+4      	; 0x3244 <_ZL19printSendPinsStatusv+0x1f4>
    3240:	81 e7       	ldi	r24, 0x71	; 113
    3242:	94 e0       	ldi	r25, 0x04	; 4
    3244:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    3248:	88 ed       	ldi	r24, 0xD8	; 216
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    3250:	0f 5f       	subi	r16, 0xFF	; 255
    3252:	1f 4f       	sbci	r17, 0xFF	; 255
    3254:	08 94       	sec
    3256:	c1 1c       	adc	r12, r1
    3258:	d1 1c       	adc	r13, r1
    325a:	04 31       	cpi	r16, 0x14	; 20
    325c:	11 05       	cpc	r17, r1
    325e:	09 f0       	breq	.+2      	; 0x3262 <_ZL19printSendPinsStatusv+0x212>
    3260:	1b cf       	rjmp	.-458    	; 0x3098 <_ZL19printSendPinsStatusv+0x48>
    3262:	27 96       	adiw	r28, 0x07	; 7
    3264:	0f b6       	in	r0, 0x3f	; 63
    3266:	f8 94       	cli
    3268:	de bf       	out	0x3e, r29	; 62
    326a:	0f be       	out	0x3f, r0	; 63
    326c:	cd bf       	out	0x3d, r28	; 61
    326e:	cf 91       	pop	r28
    3270:	df 91       	pop	r29
    3272:	1f 91       	pop	r17
    3274:	0f 91       	pop	r16
    3276:	ff 90       	pop	r15
    3278:	ef 90       	pop	r14
    327a:	df 90       	pop	r13
    327c:	cf 90       	pop	r12
    327e:	bf 90       	pop	r11
    3280:	af 90       	pop	r10
    3282:	08 95       	ret

00003284 <_ZL14sendTimeStatusv>:
    3284:	8c e2       	ldi	r24, 0x2C	; 44
    3286:	94 e0       	ldi	r25, 0x04	; 4
    3288:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    328c:	82 e8       	ldi	r24, 0x82	; 130
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	60 e0       	ldi	r22, 0x00	; 0
    3292:	70 e0       	ldi	r23, 0x00	; 0
    3294:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    3298:	80 91 03 01 	lds	r24, 0x0103
    329c:	88 23       	and	r24, r24
    329e:	19 f0       	breq	.+6      	; 0x32a6 <_ZL14sendTimeStatusv+0x22>
    32a0:	88 e2       	ldi	r24, 0x28	; 40
    32a2:	94 e0       	ldi	r25, 0x04	; 4
    32a4:	02 c0       	rjmp	.+4      	; 0x32aa <_ZL14sendTimeStatusv+0x26>
    32a6:	82 e2       	ldi	r24, 0x22	; 34
    32a8:	94 e0       	ldi	r25, 0x04	; 4
    32aa:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    32ae:	82 e8       	ldi	r24, 0x82	; 130
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	61 e0       	ldi	r22, 0x01	; 1
    32b4:	70 e0       	ldi	r23, 0x00	; 0
    32b6:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    32ba:	85 e1       	ldi	r24, 0x15	; 21
    32bc:	94 e0       	ldi	r25, 0x04	; 4
    32be:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    32c2:	0e 94 08 21 	call	0x4210	; 0x4210 <_Z3nowv>
    32c6:	0e 94 93 15 	call	0x2b26	; 0x2b26 <_ZL8sendDatam>
    32ca:	89 e0       	ldi	r24, 0x09	; 9
    32cc:	94 e0       	ldi	r25, 0x04	; 4
    32ce:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    32d2:	81 e0       	ldi	r24, 0x01	; 1
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	0e 94 65 15 	call	0x2aca	; 0x2aca <_ZL8sendDatai>
    32da:	87 ef       	ldi	r24, 0xF7	; 247
    32dc:	93 e0       	ldi	r25, 0x03	; 3
    32de:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    32e2:	89 e0       	ldi	r24, 0x09	; 9
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	0e 94 65 15 	call	0x2aca	; 0x2aca <_ZL8sendDatai>
    32ea:	80 ef       	ldi	r24, 0xF0	; 240
    32ec:	93 e0       	ldi	r25, 0x03	; 3
    32ee:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    32f2:	08 95       	ret

000032f4 <_ZL21sendTemperatureStatusv>:
    32f4:	af 92       	push	r10
    32f6:	bf 92       	push	r11
    32f8:	cf 92       	push	r12
    32fa:	df 92       	push	r13
    32fc:	ef 92       	push	r14
    32fe:	ff 92       	push	r15
    3300:	0f 93       	push	r16
    3302:	1f 93       	push	r17
    3304:	cf 93       	push	r28
    3306:	df 93       	push	r29
  /////////////////////////////////////////////////////////////////////
  //                        GROWBOX COMMANDS                         //
  /////////////////////////////////////////////////////////////////////

  static void getStatistics(float &_workingTemperature, float &_statisticsTemperature, int &_statisticsTemperatureCount){
    _workingTemperature = workingTemperature;
    3308:	00 91 00 02 	lds	r16, 0x0200
    330c:	f0 90 01 02 	lds	r15, 0x0201
    3310:	e0 90 02 02 	lds	r14, 0x0202
    3314:	d0 90 03 02 	lds	r13, 0x0203

    if (statisticsTemperatureCount != 0){
    3318:	c0 91 08 02 	lds	r28, 0x0208
    331c:	d0 91 09 02 	lds	r29, 0x0209
    3320:	20 97       	sbiw	r28, 0x00	; 0
    3322:	29 f4       	brne	.+10     	; 0x332e <_ZL21sendTemperatureStatusv+0x3a>
    3324:	a0 2e       	mov	r10, r16
    3326:	bf 2c       	mov	r11, r15
    3328:	ce 2c       	mov	r12, r14
    332a:	1d 2d       	mov	r17, r13
    332c:	16 c0       	rjmp	.+44     	; 0x335a <_ZL21sendTemperatureStatusv+0x66>
      _statisticsTemperature = statisticsTemperatureSumm/statisticsTemperatureCount;
    332e:	be 01       	movw	r22, r28
    3330:	88 27       	eor	r24, r24
    3332:	77 fd       	sbrc	r23, 7
    3334:	80 95       	com	r24
    3336:	98 2f       	mov	r25, r24
    3338:	0e 94 eb 3a 	call	0x75d6	; 0x75d6 <__floatsisf>
    333c:	9b 01       	movw	r18, r22
    333e:	ac 01       	movw	r20, r24
    3340:	60 91 04 02 	lds	r22, 0x0204
    3344:	70 91 05 02 	lds	r23, 0x0205
    3348:	80 91 06 02 	lds	r24, 0x0206
    334c:	90 91 07 02 	lds	r25, 0x0207
    3350:	0e 94 50 3a 	call	0x74a0	; 0x74a0 <__divsf3>
    3354:	5b 01       	movw	r10, r22
    3356:	c8 2e       	mov	r12, r24
    3358:	19 2f       	mov	r17, r25
    335a:	8b e8       	ldi	r24, 0x8B	; 139
    335c:	92 e0       	ldi	r25, 0x02	; 2
    335e:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    3362:	86 e6       	ldi	r24, 0x66	; 102
    3364:	94 e0       	ldi	r25, 0x04	; 4
    3366:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    336a:	20 2f       	mov	r18, r16
    336c:	3f 2d       	mov	r19, r15
    336e:	4e 2d       	mov	r20, r14
    3370:	5d 2d       	mov	r21, r13
    3372:	b9 01       	movw	r22, r18
    3374:	ca 01       	movw	r24, r20
    3376:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <_ZL8sendDataf>
    337a:	8e e5       	ldi	r24, 0x5E	; 94
    337c:	94 e0       	ldi	r25, 0x04	; 4
    337e:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    3382:	4c 2d       	mov	r20, r12
    3384:	51 2f       	mov	r21, r17
    3386:	b5 01       	movw	r22, r10
    3388:	ca 01       	movw	r24, r20
    338a:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <_ZL8sendDataf>
    338e:	85 e5       	ldi	r24, 0x55	; 85
    3390:	94 e0       	ldi	r25, 0x04	; 4
    3392:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    3396:	ce 01       	movw	r24, r28
    3398:	0e 94 65 15 	call	0x2aca	; 0x2aca <_ZL8sendDatai>
    339c:	8d e4       	ldi	r24, 0x4D	; 77
    339e:	94 e0       	ldi	r25, 0x04	; 4
    33a0:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    33a4:	60 e0       	ldi	r22, 0x00	; 0
    33a6:	70 e0       	ldi	r23, 0x00	; 0
    33a8:	80 ed       	ldi	r24, 0xD0	; 208
    33aa:	91 e4       	ldi	r25, 0x41	; 65
    33ac:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <_ZL8sendDataf>
    33b0:	84 e3       	ldi	r24, 0x34	; 52
    33b2:	94 e0       	ldi	r25, 0x04	; 4
    33b4:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    33b8:	60 e0       	ldi	r22, 0x00	; 0
    33ba:	70 e0       	ldi	r23, 0x00	; 0
    33bc:	80 e4       	ldi	r24, 0x40	; 64
    33be:	90 e4       	ldi	r25, 0x40	; 64
    33c0:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <_ZL8sendDataf>
    33c4:	84 e4       	ldi	r24, 0x44	; 68
    33c6:	94 e0       	ldi	r25, 0x04	; 4
    33c8:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    33cc:	60 e0       	ldi	r22, 0x00	; 0
    33ce:	70 e0       	ldi	r23, 0x00	; 0
    33d0:	80 eb       	ldi	r24, 0xB0	; 176
    33d2:	91 e4       	ldi	r25, 0x41	; 65
    33d4:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <_ZL8sendDataf>
    33d8:	84 e3       	ldi	r24, 0x34	; 52
    33da:	94 e0       	ldi	r25, 0x04	; 4
    33dc:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    33e0:	60 e0       	ldi	r22, 0x00	; 0
    33e2:	70 e0       	ldi	r23, 0x00	; 0
    33e4:	80 ec       	ldi	r24, 0xC0	; 192
    33e6:	90 e4       	ldi	r25, 0x40	; 64
    33e8:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <_ZL8sendDataf>
    33ec:	88 e3       	ldi	r24, 0x38	; 56
    33ee:	94 e0       	ldi	r25, 0x04	; 4
    33f0:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    33f4:	60 e0       	ldi	r22, 0x00	; 0
    33f6:	70 e0       	ldi	r23, 0x00	; 0
    33f8:	8c e0       	ldi	r24, 0x0C	; 12
    33fa:	92 e4       	ldi	r25, 0x42	; 66
    33fc:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <_ZL8sendDataf>
    3400:	88 ed       	ldi	r24, 0xD8	; 216
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    3408:	df 91       	pop	r29
    340a:	cf 91       	pop	r28
    340c:	1f 91       	pop	r17
    340e:	0f 91       	pop	r16
    3410:	ff 90       	pop	r15
    3412:	ef 90       	pop	r14
    3414:	df 90       	pop	r13
    3416:	cf 90       	pop	r12
    3418:	bf 90       	pop	r11
    341a:	af 90       	pop	r10
    341c:	08 95       	ret

0000341e <_ZL16printSendFullLoghhh>:
    341e:	2f 92       	push	r2
    3420:	3f 92       	push	r3
    3422:	4f 92       	push	r4
    3424:	5f 92       	push	r5
    3426:	6f 92       	push	r6
    3428:	7f 92       	push	r7
    342a:	8f 92       	push	r8
    342c:	9f 92       	push	r9
    342e:	af 92       	push	r10
    3430:	bf 92       	push	r11
    3432:	cf 92       	push	r12
    3434:	df 92       	push	r13
    3436:	ef 92       	push	r14
    3438:	ff 92       	push	r15
    343a:	0f 93       	push	r16
    343c:	1f 93       	push	r17
    343e:	df 93       	push	r29
    3440:	cf 93       	push	r28
    3442:	cd b7       	in	r28, 0x3d	; 61
    3444:	de b7       	in	r29, 0x3e	; 62
    3446:	af 97       	sbiw	r28, 0x2f	; 47
    3448:	0f b6       	in	r0, 0x3f	; 63
    344a:	f8 94       	cli
    344c:	de bf       	out	0x3e, r29	; 62
    344e:	0f be       	out	0x3f, r0	; 63
    3450:	cd bf       	out	0x3d, r28	; 61
    3452:	8b a7       	std	Y+43, r24	; 0x2b
    3454:	6c a7       	std	Y+44, r22	; 0x2c
    3456:	4d a7       	std	Y+45, r20	; 0x2d
    3458:	86 e7       	ldi	r24, 0x76	; 118
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	60 e0       	ldi	r22, 0x00	; 0
    345e:	70 e0       	ldi	r23, 0x00	; 0
    3460:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    3464:	21 e0       	ldi	r18, 0x01	; 1
    3466:	2a a7       	std	Y+42, r18	; 0x2a
    3468:	cc 24       	eor	r12, r12
    346a:	dd 24       	eor	r13, r13
    346c:	aa 24       	eor	r10, r10
    346e:	bb 24       	eor	r11, r11
    3470:	ce 01       	movw	r24, r28
    3472:	0b 96       	adiw	r24, 0x0b	; 11
    3474:	9f a7       	std	Y+47, r25	; 0x2f
    3476:	8e a7       	std	Y+46, r24	; 0x2e
    3478:	1e 01       	movw	r2, r28
    347a:	08 94       	sec
    347c:	21 1c       	adc	r2, r1
    347e:	31 1c       	adc	r3, r1
    3480:	a5 e1       	ldi	r26, 0x15	; 21
    3482:	4a 2e       	mov	r4, r26
    3484:	51 2c       	mov	r5, r1
    3486:	4c 0e       	add	r4, r28
    3488:	5d 1e       	adc	r5, r29
    348a:	fc e1       	ldi	r31, 0x1C	; 28
    348c:	6f 2e       	mov	r6, r31
    348e:	71 2c       	mov	r7, r1
    3490:	6c 0e       	add	r6, r28
    3492:	7d 1e       	adc	r7, r29
    3494:	e3 e2       	ldi	r30, 0x23	; 35
    3496:	8e 2e       	mov	r8, r30
    3498:	91 2c       	mov	r9, r1
    349a:	8c 0e       	add	r8, r28
    349c:	9d 1e       	adc	r9, r29
    349e:	6b c0       	rjmp	.+214    	; 0x3576 <_ZL16printSendFullLoghhh+0x158>
  static boolean isLogOverflow(){
    return bootRecord.boolPreferencies.isLogOverflow;
  }

  static word getLogRecordsCount(){
    if (bootRecord.boolPreferencies.isLogOverflow){
    34a0:	44 23       	and	r20, r20
    34a2:	19 f0       	breq	.+6      	; 0x34aa <_ZL16printSendFullLoghhh+0x8c>
    34a4:	8c e2       	ldi	r24, 0x2C	; 44
    34a6:	93 e0       	ldi	r25, 0x03	; 3
    34a8:	0a c0       	rjmp	.+20     	; 0x34be <_ZL16printSendFullLoghhh+0xa0>
      return LOG_CAPACITY; 
    } 
    else {
      return (bootRecord.nextLogRecordAddress - sizeof(BootRecord))/sizeof(LogRecord);
    34aa:	80 91 cf 01 	lds	r24, 0x01CF
    34ae:	90 91 d0 01 	lds	r25, 0x01D0
    34b2:	80 97       	sbiw	r24, 0x20	; 32
    34b4:	65 e0       	ldi	r22, 0x05	; 5
    34b6:	70 e0       	ldi	r23, 0x00	; 0
    34b8:	0e 94 21 3c 	call	0x7842	; 0x7842 <__udivmodhi4>
    34bc:	cb 01       	movw	r24, r22
    }
  }
  static boolean getLogRecordByIndex(word index, LogRecord &logRecord){
    if (index >= getLogRecordsCount()){
    34be:	c8 16       	cp	r12, r24
    34c0:	d9 06       	cpc	r13, r25
    34c2:	40 f5       	brcc	.+80     	; 0x3514 <_ZL16printSendFullLoghhh+0xf6>
      return false;
    }

    word logRecordOffset = 0;
    if (bootRecord.boolPreferencies.isLogOverflow){
    34c4:	44 23       	and	r20, r20
    34c6:	19 f4       	brne	.+6      	; 0x34ce <_ZL16printSendFullLoghhh+0xb0>
    34c8:	80 e0       	ldi	r24, 0x00	; 0
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	05 c0       	rjmp	.+10     	; 0x34d8 <_ZL16printSendFullLoghhh+0xba>
      logRecordOffset = bootRecord.nextLogRecordAddress - sizeof(BootRecord);
    34ce:	80 91 cf 01 	lds	r24, 0x01CF
    34d2:	90 91 d0 01 	lds	r25, 0x01D0
    34d6:	80 97       	sbiw	r24, 0x20	; 32
    }
    //Serial.print("logRecordOffset"); Serial.println(logRecordOffset);
    logRecordOffset += index * sizeof(LogRecord);
    34d8:	8a 0d       	add	r24, r10
    34da:	9b 1d       	adc	r25, r11

    //Serial.print("logRecordOffset"); Serial.println(logRecordOffset);
    if (logRecordOffset >= LOG_RECORD_OVERFLOW_OFFSET){
    34dc:	ef e0       	ldi	r30, 0x0F	; 15
    34de:	8c 3d       	cpi	r24, 0xDC	; 220
    34e0:	9e 07       	cpc	r25, r30
    34e2:	10 f0       	brcs	.+4      	; 0x34e8 <_ZL16printSendFullLoghhh+0xca>
      logRecordOffset -= LOG_RECORD_OVERFLOW_OFFSET;
    34e4:	8c 5d       	subi	r24, 0xDC	; 220
    34e6:	9f 40       	sbci	r25, 0x0F	; 15
    }
    //Serial.print("logRecordOffset"); Serial.println(logRecordOffset);
    word address = sizeof(BootRecord) + logRecordOffset; 
    34e8:	70 e2       	ldi	r23, 0x20	; 32
    34ea:	e7 2e       	mov	r14, r23
    34ec:	f1 2c       	mov	r15, r1
    34ee:	e8 0e       	add	r14, r24
    34f0:	f9 1e       	adc	r15, r25
    34f2:	8e 01       	movw	r16, r28
    34f4:	0a 5f       	subi	r16, 0xFA	; 250
    34f6:	1f 4f       	sbci	r17, 0xFF	; 255
      byte value =  read(address + c);
    34f8:	c7 01       	movw	r24, r14
    34fa:	0e 94 bb 06 	call	0xd76	; 0xd76 <_ZN10GB_Storage4readEj>
      ((byte*)data)[c] = value;
    34fe:	f8 01       	movw	r30, r16
    3500:	81 93       	st	Z+, r24
    3502:	8f 01       	movw	r16, r30
    3504:	08 94       	sec
    3506:	e1 1c       	adc	r14, r1
    3508:	f1 1c       	adc	r15, r1
      write(address + c, value);
    }
  }

  static void read(word address, void *data, const byte sizeofData) {
    for (word c = 0; c < sizeofData; c++){
    350a:	8e a5       	ldd	r24, Y+46	; 0x2e
    350c:	9f a5       	ldd	r25, Y+47	; 0x2f
    350e:	e8 17       	cp	r30, r24
    3510:	f9 07       	cpc	r31, r25
    3512:	91 f7       	brne	.-28     	; 0x34f8 <_ZL16printSendFullLoghhh+0xda>
  }  

  static LogRecord getLogRecordByIndex(int index){
    LogRecord logRecord;
    GB_StorageHelper::getLogRecordByIndex(index, logRecord);
    return logRecord;
    3514:	de 01       	movw	r26, r28
    3516:	50 96       	adiw	r26, 0x10	; 16
    3518:	fe 01       	movw	r30, r28
    351a:	36 96       	adiw	r30, 0x06	; 6
    351c:	85 e0       	ldi	r24, 0x05	; 5
    351e:	01 90       	ld	r0, Z+
    3520:	0d 92       	st	X+, r0
    3522:	81 50       	subi	r24, 0x01	; 1
    3524:	e1 f7       	brne	.-8      	; 0x351e <_ZL16printSendFullLoghhh+0x100>
    3526:	de 01       	movw	r26, r28
    3528:	1b 96       	adiw	r26, 0x0b	; 11
    352a:	fe 01       	movw	r30, r28
    352c:	70 96       	adiw	r30, 0x10	; 16
    352e:	85 e0       	ldi	r24, 0x05	; 5
    3530:	01 90       	ld	r0, Z+
    3532:	0d 92       	st	X+, r0
    3534:	81 50       	subi	r24, 0x01	; 1
    3536:	e1 f7       	brne	.-8      	; 0x3530 <_ZL16printSendFullLoghhh+0x112>
    3538:	d1 01       	movw	r26, r2
    353a:	fe 01       	movw	r30, r28
    353c:	3b 96       	adiw	r30, 0x0b	; 11
    353e:	85 e0       	ldi	r24, 0x05	; 5
    3540:	01 90       	ld	r0, Z+
    3542:	0d 92       	st	X+, r0
    3544:	81 50       	subi	r24, 0x01	; 1
    3546:	e1 f7       	brne	.-8      	; 0x3540 <_ZL16printSendFullLoghhh+0x122>
    3548:	9b a5       	ldd	r25, Y+43	; 0x2b
    354a:	99 23       	and	r25, r25
    354c:	d1 f5       	brne	.+116    	; 0x35c2 <_ZL16printSendFullLoghhh+0x1a4>
    354e:	8d 81       	ldd	r24, Y+5	; 0x05
    3550:	80 7c       	andi	r24, 0xC0	; 192
    3552:	b9 f5       	brne	.+110    	; 0x35c2 <_ZL16printSendFullLoghhh+0x1a4>
    3554:	09 c0       	rjmp	.+18     	; 0x3568 <_ZL16printSendFullLoghhh+0x14a>
    3556:	8d 81       	ldd	r24, Y+5	; 0x05
    3558:	80 7c       	andi	r24, 0xC0	; 192
    355a:	80 34       	cpi	r24, 0x40	; 64
    355c:	a9 f5       	brne	.+106    	; 0x35c8 <_ZL16printSendFullLoghhh+0x1aa>
    355e:	04 c0       	rjmp	.+8      	; 0x3568 <_ZL16printSendFullLoghhh+0x14a>
    3560:	8d 81       	ldd	r24, Y+5	; 0x05
    3562:	80 7c       	andi	r24, 0xC0	; 192
    3564:	80 3c       	cpi	r24, 0xC0	; 192
    3566:	99 f5       	brne	.+102    	; 0x35ce <_ZL16printSendFullLoghhh+0x1b0>
    3568:	08 94       	sec
    356a:	c1 1c       	adc	r12, r1
    356c:	d1 1c       	adc	r13, r1
    356e:	e5 e0       	ldi	r30, 0x05	; 5
    3570:	f0 e0       	ldi	r31, 0x00	; 0
    3572:	ae 0e       	add	r10, r30
    3574:	bf 1e       	adc	r11, r31
  static boolean isLogOverflow(){
    return bootRecord.boolPreferencies.isLogOverflow;
  }

  static word getLogRecordsCount(){
    if (bootRecord.boolPreferencies.isLogOverflow){
    3576:	80 91 d1 01 	lds	r24, 0x01D1
    357a:	48 2f       	mov	r20, r24
    357c:	41 70       	andi	r20, 0x01	; 1
    357e:	80 ff       	sbrs	r24, 0
    3580:	03 c0       	rjmp	.+6      	; 0x3588 <_ZL16printSendFullLoghhh+0x16a>
    3582:	8c e2       	ldi	r24, 0x2C	; 44
    3584:	93 e0       	ldi	r25, 0x03	; 3
    3586:	0a c0       	rjmp	.+20     	; 0x359c <_ZL16printSendFullLoghhh+0x17e>
      return LOG_CAPACITY; 
    } 
    else {
      return (bootRecord.nextLogRecordAddress - sizeof(BootRecord))/sizeof(LogRecord);
    3588:	80 91 cf 01 	lds	r24, 0x01CF
    358c:	90 91 d0 01 	lds	r25, 0x01D0
    3590:	80 97       	sbiw	r24, 0x20	; 32
    3592:	65 e0       	ldi	r22, 0x05	; 5
    3594:	70 e0       	ldi	r23, 0x00	; 0
    3596:	0e 94 21 3c 	call	0x7842	; 0x7842 <__udivmodhi4>
    359a:	cb 01       	movw	r24, r22
    359c:	c8 16       	cp	r12, r24
    359e:	d9 06       	cpc	r13, r25
    35a0:	0c f4       	brge	.+2      	; 0x35a4 <_ZL16printSendFullLoghhh+0x186>
    35a2:	7e cf       	rjmp	.-260    	; 0x34a0 <_ZL16printSendFullLoghhh+0x82>
    35a4:	86 e7       	ldi	r24, 0x76	; 118
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	61 e0       	ldi	r22, 0x01	; 1
    35aa:	70 e0       	ldi	r23, 0x00	; 0
    35ac:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    35b0:	fa a5       	ldd	r31, Y+42	; 0x2a
    35b2:	ff 23       	and	r31, r31
    35b4:	09 f4       	brne	.+2      	; 0x35b8 <_ZL16printSendFullLoghhh+0x19a>
    35b6:	78 c0       	rjmp	.+240    	; 0x36a8 <_ZL16printSendFullLoghhh+0x28a>
    35b8:	8d e0       	ldi	r24, 0x0D	; 13
    35ba:	96 e0       	ldi	r25, 0x06	; 6
    35bc:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    35c0:	73 c0       	rjmp	.+230    	; 0x36a8 <_ZL16printSendFullLoghhh+0x28a>
    35c2:	2c a5       	ldd	r18, Y+44	; 0x2c
    35c4:	22 23       	and	r18, r18
    35c6:	39 f2       	breq	.-114    	; 0x3556 <_ZL16printSendFullLoghhh+0x138>
    35c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    35ca:	88 23       	and	r24, r24
    35cc:	49 f2       	breq	.-110    	; 0x3560 <_ZL16printSendFullLoghhh+0x142>
    35ce:	8c e7       	ldi	r24, 0x7C	; 124
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	60 e0       	ldi	r22, 0x00	; 0
    35d4:	70 e0       	ldi	r23, 0x00	; 0
    35d6:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    35da:	8f e7       	ldi	r24, 0x7F	; 127
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	60 e0       	ldi	r22, 0x00	; 0
    35e0:	70 e0       	ldi	r23, 0x00	; 0
    35e2:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    35e6:	c6 01       	movw	r24, r12
    35e8:	01 96       	adiw	r24, 0x01	; 1
    35ea:	0e 94 65 15 	call	0x2aca	; 0x2aca <_ZL8sendDatai>
    35ee:	8f e7       	ldi	r24, 0x7F	; 127
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	61 e0       	ldi	r22, 0x01	; 1
    35f4:	70 e0       	ldi	r23, 0x00	; 0
    35f6:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    35fa:	8f e7       	ldi	r24, 0x7F	; 127
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	60 e0       	ldi	r22, 0x00	; 0
    3600:	70 e0       	ldi	r23, 0x00	; 0
    3602:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    3606:	49 81       	ldd	r20, Y+1	; 0x01
    3608:	5a 81       	ldd	r21, Y+2	; 0x02
    360a:	6b 81       	ldd	r22, Y+3	; 0x03
    360c:	7c 81       	ldd	r23, Y+4	; 0x04
    360e:	c2 01       	movw	r24, r4
    3610:	0e 94 29 0c 	call	0x1852	; 0x1852 <_ZN13GB_PrintDirty13getTimeStringEm>
    3614:	c2 01       	movw	r24, r4
    3616:	0e 94 a0 14 	call	0x2940	; 0x2940 <_ZL8sendDataRK6String>
    361a:	c2 01       	movw	r24, r4
    361c:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
    3620:	8f e7       	ldi	r24, 0x7F	; 127
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	61 e0       	ldi	r22, 0x01	; 1
    3626:	70 e0       	ldi	r23, 0x00	; 0
    3628:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    362c:	8f e7       	ldi	r24, 0x7F	; 127
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	60 e0       	ldi	r22, 0x00	; 0
    3632:	70 e0       	ldi	r23, 0x00	; 0
    3634:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    3638:	c3 01       	movw	r24, r6
    363a:	6d 81       	ldd	r22, Y+5	; 0x05
    363c:	41 e0       	ldi	r20, 0x01	; 1
    363e:	0e 94 2a 07 	call	0xe54	; 0xe54 <_ZN13GB_PrintDirty6getHEXEhh>
    3642:	c3 01       	movw	r24, r6
    3644:	0e 94 a0 14 	call	0x2940	; 0x2940 <_ZL8sendDataRK6String>
    3648:	c3 01       	movw	r24, r6
    364a:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
    364e:	8f e7       	ldi	r24, 0x7F	; 127
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	61 e0       	ldi	r22, 0x01	; 1
    3654:	70 e0       	ldi	r23, 0x00	; 0
    3656:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    365a:	8f e7       	ldi	r24, 0x7F	; 127
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	60 e0       	ldi	r22, 0x00	; 0
    3660:	70 e0       	ldi	r23, 0x00	; 0
    3662:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    3666:	c1 01       	movw	r24, r2
    3668:	0e 94 ad 05 	call	0xb5a	; 0xb5a <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord>
    366c:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    3670:	c4 01       	movw	r24, r8
    3672:	b1 01       	movw	r22, r2
    3674:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <_ZN9GB_Logger18getLogRecordSuffixERK9LogRecord>
    3678:	c4 01       	movw	r24, r8
    367a:	0e 94 a0 14 	call	0x2940	; 0x2940 <_ZL8sendDataRK6String>
    367e:	c4 01       	movw	r24, r8
    3680:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
    3684:	8f e7       	ldi	r24, 0x7F	; 127
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	61 e0       	ldi	r22, 0x01	; 1
    368a:	70 e0       	ldi	r23, 0x00	; 0
    368c:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    3690:	8c e7       	ldi	r24, 0x7C	; 124
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	61 e0       	ldi	r22, 0x01	; 1
    3696:	70 e0       	ldi	r23, 0x00	; 0
    3698:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    369c:	80 91 4c 01 	lds	r24, 0x014C
    36a0:	88 23       	and	r24, r24
    36a2:	11 f4       	brne	.+4      	; 0x36a8 <_ZL16printSendFullLoghhh+0x28a>
    36a4:	1a a6       	std	Y+42, r1	; 0x2a
    36a6:	60 cf       	rjmp	.-320    	; 0x3568 <_ZL16printSendFullLoghhh+0x14a>
    36a8:	af 96       	adiw	r28, 0x2f	; 47
    36aa:	0f b6       	in	r0, 0x3f	; 63
    36ac:	f8 94       	cli
    36ae:	de bf       	out	0x3e, r29	; 62
    36b0:	0f be       	out	0x3f, r0	; 63
    36b2:	cd bf       	out	0x3d, r28	; 61
    36b4:	cf 91       	pop	r28
    36b6:	df 91       	pop	r29
    36b8:	1f 91       	pop	r17
    36ba:	0f 91       	pop	r16
    36bc:	ff 90       	pop	r15
    36be:	ef 90       	pop	r14
    36c0:	df 90       	pop	r13
    36c2:	cf 90       	pop	r12
    36c4:	bf 90       	pop	r11
    36c6:	af 90       	pop	r10
    36c8:	9f 90       	pop	r9
    36ca:	8f 90       	pop	r8
    36cc:	7f 90       	pop	r7
    36ce:	6f 90       	pop	r6
    36d0:	5f 90       	pop	r5
    36d2:	4f 90       	pop	r4
    36d4:	3f 90       	pop	r3
    36d6:	2f 90       	pop	r2
    36d8:	08 95       	ret

000036da <_ZL14sendBootStatusv>:
    36da:	8a ed       	ldi	r24, 0xDA	; 218
    36dc:	93 e0       	ldi	r25, 0x03	; 3
    36de:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    36e2:	60 91 cb 01 	lds	r22, 0x01CB
    36e6:	70 91 cc 01 	lds	r23, 0x01CC
    36ea:	80 91 cd 01 	lds	r24, 0x01CD
    36ee:	90 91 ce 01 	lds	r25, 0x01CE
    36f2:	0e 94 93 15 	call	0x2b26	; 0x2b26 <_ZL8sendDatam>
    36f6:	88 ec       	ldi	r24, 0xC8	; 200
    36f8:	93 e0       	ldi	r25, 0x03	; 3
    36fa:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    36fe:	60 91 c7 01 	lds	r22, 0x01C7
    3702:	70 91 c8 01 	lds	r23, 0x01C8
    3706:	80 91 c9 01 	lds	r24, 0x01C9
    370a:	90 91 ca 01 	lds	r25, 0x01CA
    370e:	0e 94 93 15 	call	0x2b26	; 0x2b26 <_ZL8sendDatam>
    3712:	8e eb       	ldi	r24, 0xBE	; 190
    3714:	93 e0       	ldi	r25, 0x03	; 3
    3716:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    371a:	80 91 d1 01 	lds	r24, 0x01D1
    371e:	86 95       	lsr	r24
    3720:	83 70       	andi	r24, 0x03	; 3
    3722:	19 f0       	breq	.+6      	; 0x372a <_ZL14sendBootStatusv+0x50>
    3724:	82 e5       	ldi	r24, 0x52	; 82
    3726:	91 e0       	ldi	r25, 0x01	; 1
    3728:	02 c0       	rjmp	.+4      	; 0x372e <_ZL14sendBootStatusv+0x54>
    372a:	8b e5       	ldi	r24, 0x5B	; 91
    372c:	91 e0       	ldi	r25, 0x01	; 1
    372e:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    3732:	83 eb       	ldi	r24, 0xB3	; 179
    3734:	93 e0       	ldi	r25, 0x03	; 3
    3736:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
  static boolean isLogOverflow(){
    return bootRecord.boolPreferencies.isLogOverflow;
  }

  static word getLogRecordsCount(){
    if (bootRecord.boolPreferencies.isLogOverflow){
    373a:	80 91 d1 01 	lds	r24, 0x01D1
    373e:	80 ff       	sbrs	r24, 0
    3740:	03 c0       	rjmp	.+6      	; 0x3748 <_ZL14sendBootStatusv+0x6e>
    3742:	8c e2       	ldi	r24, 0x2C	; 44
    3744:	93 e0       	ldi	r25, 0x03	; 3
    3746:	0a c0       	rjmp	.+20     	; 0x375c <_ZL14sendBootStatusv+0x82>
      return LOG_CAPACITY; 
    } 
    else {
      return (bootRecord.nextLogRecordAddress - sizeof(BootRecord))/sizeof(LogRecord);
    3748:	80 91 cf 01 	lds	r24, 0x01CF
    374c:	90 91 d0 01 	lds	r25, 0x01D0
    3750:	80 97       	sbiw	r24, 0x20	; 32
    3752:	65 e0       	ldi	r22, 0x05	; 5
    3754:	70 e0       	ldi	r23, 0x00	; 0
    3756:	0e 94 21 3c 	call	0x7842	; 0x7842 <__udivmodhi4>
    375a:	cb 01       	movw	r24, r22
    375c:	0e 94 13 16 	call	0x2c26	; 0x2c26 <_ZL8sendDataj>
    3760:	8f e2       	ldi	r24, 0x2F	; 47
    3762:	0e 94 39 15 	call	0x2a72	; 0x2a72 <_ZL8sendDatac>
    3766:	8c e2       	ldi	r24, 0x2C	; 44
    3768:	93 e0       	ldi	r25, 0x03	; 3
    376a:	0e 94 13 16 	call	0x2c26	; 0x2c26 <_ZL8sendDataj>
    376e:	80 91 d1 01 	lds	r24, 0x01D1
    3772:	80 ff       	sbrs	r24, 0
    3774:	04 c0       	rjmp	.+8      	; 0x377e <_ZL14sendBootStatusv+0xa4>
    3776:	88 ea       	ldi	r24, 0xA8	; 168
    3778:	93 e0       	ldi	r25, 0x03	; 3
    377a:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    377e:	88 ed       	ldi	r24, 0xD8	; 216
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    3786:	08 95       	ret

00003788 <_ZL14executeCommandRK6StringS1_>:
    3788:	cf 93       	push	r28
    378a:	df 93       	push	r29
    378c:	ec 01       	movw	r28, r24
    378e:	68 e0       	ldi	r22, 0x08	; 8
    3790:	73 e0       	ldi	r23, 0x03	; 3
    3792:	0e 94 36 08 	call	0x106c	; 0x106c <_ZL17flashStringEqualsRK6StringPKc>
    3796:	88 23       	and	r24, r24
    3798:	09 f0       	breq	.+2      	; 0x379c <_ZL14executeCommandRK6StringS1_+0x14>
    379a:	9c c0       	rjmp	.+312    	; 0x38d4 <_ZL14executeCommandRK6StringS1_+0x14c>
    379c:	ce 01       	movw	r24, r28
    379e:	6a e0       	ldi	r22, 0x0A	; 10
    37a0:	73 e0       	ldi	r23, 0x03	; 3
    37a2:	0e 94 36 08 	call	0x106c	; 0x106c <_ZL17flashStringEqualsRK6StringPKc>
    37a6:	88 23       	and	r24, r24
    37a8:	09 f0       	breq	.+2      	; 0x37ac <_ZL14executeCommandRK6StringS1_+0x24>
    37aa:	94 c0       	rjmp	.+296    	; 0x38d4 <_ZL14executeCommandRK6StringS1_+0x14c>
    37ac:	ce 01       	movw	r24, r28
    37ae:	6f e0       	ldi	r22, 0x0F	; 15
    37b0:	73 e0       	ldi	r23, 0x03	; 3
    37b2:	0e 94 36 08 	call	0x106c	; 0x106c <_ZL17flashStringEqualsRK6StringPKc>
    37b6:	88 23       	and	r24, r24
    37b8:	09 f0       	breq	.+2      	; 0x37bc <_ZL14executeCommandRK6StringS1_+0x34>
    37ba:	8c c0       	rjmp	.+280    	; 0x38d4 <_ZL14executeCommandRK6StringS1_+0x14c>
    37bc:	ce 01       	movw	r24, r28
    37be:	65 e1       	ldi	r22, 0x15	; 21
    37c0:	73 e0       	ldi	r23, 0x03	; 3
    37c2:	0e 94 36 08 	call	0x106c	; 0x106c <_ZL17flashStringEqualsRK6StringPKc>
    37c6:	88 23       	and	r24, r24
    37c8:	09 f0       	breq	.+2      	; 0x37cc <_ZL14executeCommandRK6StringS1_+0x44>
    37ca:	84 c0       	rjmp	.+264    	; 0x38d4 <_ZL14executeCommandRK6StringS1_+0x14c>
    37cc:	89 c0       	rjmp	.+274    	; 0x38e0 <_ZL14executeCommandRK6StringS1_+0x158>
    37ce:	8e e1       	ldi	r24, 0x1E	; 30
    37d0:	93 e0       	ldi	r25, 0x03	; 3
    37d2:	60 e0       	ldi	r22, 0x00	; 0
    37d4:	70 e0       	ldi	r23, 0x00	; 0
    37d6:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    37da:	86 e5       	ldi	r24, 0x56	; 86
    37dc:	93 e0       	ldi	r25, 0x03	; 3
    37de:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZL8sendDataPK19__FlashStringHelper>
    37e2:	88 e0       	ldi	r24, 0x08	; 8
    37e4:	93 e0       	ldi	r25, 0x03	; 3
    37e6:	6f e4       	ldi	r22, 0x4F	; 79
    37e8:	73 e0       	ldi	r23, 0x03	; 3
    37ea:	0e 94 ed 17 	call	0x2fda	; 0x2fda <_ZL13sendTagButtonPKcPK19__FlashStringHelper>
    37ee:	8a e0       	ldi	r24, 0x0A	; 10
    37f0:	93 e0       	ldi	r25, 0x03	; 3
    37f2:	65 e4       	ldi	r22, 0x45	; 69
    37f4:	73 e0       	ldi	r23, 0x03	; 3
    37f6:	0e 94 ed 17 	call	0x2fda	; 0x2fda <_ZL13sendTagButtonPKcPK19__FlashStringHelper>
    37fa:	8f e0       	ldi	r24, 0x0F	; 15
    37fc:	93 e0       	ldi	r25, 0x03	; 3
    37fe:	67 e3       	ldi	r22, 0x37	; 55
    3800:	73 e0       	ldi	r23, 0x03	; 3
    3802:	0e 94 ed 17 	call	0x2fda	; 0x2fda <_ZL13sendTagButtonPKcPK19__FlashStringHelper>
    3806:	85 e1       	ldi	r24, 0x15	; 21
    3808:	93 e0       	ldi	r25, 0x03	; 3
    380a:	6a e2       	ldi	r22, 0x2A	; 42
    380c:	73 e0       	ldi	r23, 0x03	; 3
    380e:	0e 94 ed 17 	call	0x2fda	; 0x2fda <_ZL13sendTagButtonPKcPK19__FlashStringHelper>
    3812:	83 e2       	ldi	r24, 0x23	; 35
    3814:	93 e0       	ldi	r25, 0x03	; 3
    3816:	62 e0       	ldi	r22, 0x02	; 2
    3818:	70 e0       	ldi	r23, 0x00	; 0
    381a:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    381e:	86 e2       	ldi	r24, 0x26	; 38
    3820:	93 e0       	ldi	r25, 0x03	; 3
    3822:	60 e0       	ldi	r22, 0x00	; 0
    3824:	70 e0       	ldi	r23, 0x00	; 0
    3826:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    382a:	0e 94 17 18 	call	0x302e	; 0x302e <_Z14sendFreeMemoryv>
    382e:	0e 94 6d 1b 	call	0x36da	; 0x36da <_ZL14sendBootStatusv>
    3832:	0e 94 42 19 	call	0x3284	; 0x3284 <_ZL14sendTimeStatusv>
    3836:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <_ZL21sendTemperatureStatusv>
    383a:	83 e2       	ldi	r24, 0x23	; 35
    383c:	93 e0       	ldi	r25, 0x03	; 3
    383e:	62 e0       	ldi	r22, 0x02	; 2
    3840:	70 e0       	ldi	r23, 0x00	; 0
    3842:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    3846:	86 e2       	ldi	r24, 0x26	; 38
    3848:	93 e0       	ldi	r25, 0x03	; 3
    384a:	61 e0       	ldi	r22, 0x01	; 1
    384c:	70 e0       	ldi	r23, 0x00	; 0
    384e:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    3852:	86 e2       	ldi	r24, 0x26	; 38
    3854:	93 e0       	ldi	r25, 0x03	; 3
    3856:	60 e0       	ldi	r22, 0x00	; 0
    3858:	70 e0       	ldi	r23, 0x00	; 0
    385a:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    385e:	ce 01       	movw	r24, r28
    3860:	68 e0       	ldi	r22, 0x08	; 8
    3862:	73 e0       	ldi	r23, 0x03	; 3
    3864:	0e 94 36 08 	call	0x106c	; 0x106c <_ZL17flashStringEqualsRK6StringPKc>
    3868:	88 23       	and	r24, r24
    386a:	19 f0       	breq	.+6      	; 0x3872 <_ZL14executeCommandRK6StringS1_+0xea>
    386c:	0e 94 28 18 	call	0x3050	; 0x3050 <_ZL19printSendPinsStatusv>
    3870:	20 c0       	rjmp	.+64     	; 0x38b2 <_ZL14executeCommandRK6StringS1_+0x12a>
    3872:	ce 01       	movw	r24, r28
    3874:	6f e0       	ldi	r22, 0x0F	; 15
    3876:	73 e0       	ldi	r23, 0x03	; 3
    3878:	0e 94 36 08 	call	0x106c	; 0x106c <_ZL17flashStringEqualsRK6StringPKc>
    387c:	88 23       	and	r24, r24
    387e:	19 f0       	breq	.+6      	; 0x3886 <_ZL14executeCommandRK6StringS1_+0xfe>
    3880:	0e 94 0a 18 	call	0x3014	; 0x3014 <_ZL30printSendConfigurationControlsv>
    3884:	16 c0       	rjmp	.+44     	; 0x38b2 <_ZL14executeCommandRK6StringS1_+0x12a>
    3886:	ce 01       	movw	r24, r28
    3888:	6a e0       	ldi	r22, 0x0A	; 10
    388a:	73 e0       	ldi	r23, 0x03	; 3
    388c:	0e 94 36 08 	call	0x106c	; 0x106c <_ZL17flashStringEqualsRK6StringPKc>
    3890:	88 23       	and	r24, r24
    3892:	31 f0       	breq	.+12     	; 0x38a0 <_ZL14executeCommandRK6StringS1_+0x118>
    3894:	81 e0       	ldi	r24, 0x01	; 1
    3896:	61 e0       	ldi	r22, 0x01	; 1
    3898:	41 e0       	ldi	r20, 0x01	; 1
    389a:	0e 94 0f 1a 	call	0x341e	; 0x341e <_ZL16printSendFullLoghhh>
    389e:	09 c0       	rjmp	.+18     	; 0x38b2 <_ZL14executeCommandRK6StringS1_+0x12a>
    38a0:	ce 01       	movw	r24, r28
    38a2:	65 e1       	ldi	r22, 0x15	; 21
    38a4:	73 e0       	ldi	r23, 0x03	; 3
    38a6:	0e 94 36 08 	call	0x106c	; 0x106c <_ZL17flashStringEqualsRK6StringPKc>
    38aa:	88 23       	and	r24, r24
    38ac:	11 f0       	breq	.+4      	; 0x38b2 <_ZL14executeCommandRK6StringS1_+0x12a>
    38ae:	0e 94 09 17 	call	0x2e12	; 0x2e12 <_Z20printSendStorageDumpv>
    38b2:	80 91 4c 01 	lds	r24, 0x014C
    38b6:	88 23       	and	r24, r24
    38b8:	99 f4       	brne	.+38     	; 0x38e0 <_ZL14executeCommandRK6StringS1_+0x158>
    38ba:	86 e2       	ldi	r24, 0x26	; 38
    38bc:	93 e0       	ldi	r25, 0x03	; 3
    38be:	61 e0       	ldi	r22, 0x01	; 1
    38c0:	70 e0       	ldi	r23, 0x00	; 0
    38c2:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    38c6:	8e e1       	ldi	r24, 0x1E	; 30
    38c8:	93 e0       	ldi	r25, 0x03	; 3
    38ca:	61 e0       	ldi	r22, 0x01	; 1
    38cc:	70 e0       	ldi	r23, 0x00	; 0
    38ce:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZL7sendTagPKc8HTTP_TAG>
    38d2:	06 c0       	rjmp	.+12     	; 0x38e0 <_ZL14executeCommandRK6StringS1_+0x158>
    38d4:	80 91 4b 01 	lds	r24, 0x014B
    38d8:	88 23       	and	r24, r24
    38da:	09 f4       	brne	.+2      	; 0x38de <_ZL14executeCommandRK6StringS1_+0x156>
    38dc:	ba cf       	rjmp	.-140    	; 0x3852 <_ZL14executeCommandRK6StringS1_+0xca>
    38de:	77 cf       	rjmp	.-274    	; 0x37ce <_ZL14executeCommandRK6StringS1_+0x46>
    38e0:	df 91       	pop	r29
    38e2:	cf 91       	pop	r28
    38e4:	08 95       	ret

000038e6 <_Z11serialEventv>:
    38e6:	cf 92       	push	r12
    38e8:	df 92       	push	r13
    38ea:	ef 92       	push	r14
    38ec:	ff 92       	push	r15
    38ee:	0f 93       	push	r16
    38f0:	1f 93       	push	r17
    38f2:	df 93       	push	r29
    38f4:	cf 93       	push	r28
    38f6:	cd b7       	in	r28, 0x3d	; 61
    38f8:	de b7       	in	r29, 0x3e	; 62
    38fa:	2e 97       	sbiw	r28, 0x0e	; 14
    38fc:	0f b6       	in	r0, 0x3f	; 63
    38fe:	f8 94       	cli
    3900:	de bf       	out	0x3e, r29	; 62
    3902:	0f be       	out	0x3f, r0	; 63
    3904:	cd bf       	out	0x3d, r28	; 61
    3906:	80 91 4a 01 	lds	r24, 0x014A
    390a:	88 23       	and	r24, r24
    390c:	19 f4       	brne	.+6      	; 0x3914 <_Z11serialEventv+0x2e>
    390e:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN15GB_SerialHelper13printDirtyEndEv>
    3912:	81 c0       	rjmp	.+258    	; 0x3a16 <_Z11serialEventv+0x130>
    3914:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <freeMemory>
    3918:	6c 01       	movw	r12, r24
    391a:	7e 01       	movw	r14, r28
    391c:	08 94       	sec
    391e:	e1 1c       	adc	r14, r1
    3920:	f1 1c       	adc	r15, r1
    3922:	c7 01       	movw	r24, r14
    3924:	60 e0       	ldi	r22, 0x00	; 0
    3926:	71 e0       	ldi	r23, 0x01	; 1
    3928:	0e 94 07 38 	call	0x700e	; 0x700e <_ZN6StringC1EPKc>
    392c:	10 92 4b 01 	sts	0x014B, r1
    3930:	10 92 4c 01 	sts	0x014C, r1
    3934:	10 92 04 01 	sts	0x0104, r1
    3938:	8e 01       	movw	r16, r28
    393a:	08 5f       	subi	r16, 0xF8	; 248
    393c:	1f 4f       	sbci	r17, 0xFF	; 255
    393e:	c8 01       	movw	r24, r16
    3940:	60 e0       	ldi	r22, 0x00	; 0
    3942:	71 e0       	ldi	r23, 0x01	; 1
    3944:	0e 94 07 38 	call	0x700e	; 0x700e <_ZN6StringC1EPKc>
    3948:	c7 01       	movw	r24, r14
    394a:	6b e4       	ldi	r22, 0x4B	; 75
    394c:	71 e0       	ldi	r23, 0x01	; 1
    394e:	44 e0       	ldi	r20, 0x04	; 4
    3950:	51 e0       	ldi	r21, 0x01	; 1
    3952:	98 01       	movw	r18, r16
    3954:	0e 94 8d 11 	call	0x231a	; 0x231a <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS2_S1_>
    3958:	88 23       	and	r24, r24
    395a:	e1 f4       	brne	.+56     	; 0x3994 <_Z11serialEventv+0xae>
    395c:	8d eb       	ldi	r24, 0xBD	; 189
    395e:	93 e0       	ldi	r25, 0x03	; 3
    3960:	62 eb       	ldi	r22, 0xB2	; 178
    3962:	72 e0       	ldi	r23, 0x02	; 2
    3964:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
    3968:	8d eb       	ldi	r24, 0xBD	; 189
    396a:	93 e0       	ldi	r25, 0x03	; 3
    396c:	b6 01       	movw	r22, r12
    396e:	4a e0       	ldi	r20, 0x0A	; 10
    3970:	50 e0       	ldi	r21, 0x00	; 0
    3972:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <_ZN5Print5printEii>
    3976:	8d eb       	ldi	r24, 0xBD	; 189
    3978:	93 e0       	ldi	r25, 0x03	; 3
    397a:	6b ea       	ldi	r22, 0xAB	; 171
    397c:	72 e0       	ldi	r23, 0x02	; 2
    397e:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
    3982:	0e 94 74 11 	call	0x22e8	; 0x22e8 <_Z15printFreeMemoryv>
    3986:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN15GB_SerialHelper13printDirtyEndEv>
    398a:	c8 01       	movw	r24, r16
    398c:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
    3990:	c7 01       	movw	r24, r14
    3992:	3f c0       	rjmp	.+126    	; 0x3a12 <_Z11serialEventv+0x12c>
    3994:	80 91 4b 01 	lds	r24, 0x014B
    3998:	88 23       	and	r24, r24
    399a:	11 f0       	breq	.+4      	; 0x39a0 <_Z11serialEventv+0xba>
    } 
    return false;
  } 

  static void startHTTPResponse(const byte &wifiPortDescriptor){  
    s_wifiIsHeaderSended = false;
    399c:	10 92 c0 01 	sts	0x01C0, r1
    39a0:	ce 01       	movw	r24, r28
    39a2:	01 96       	adiw	r24, 0x01	; 1
    39a4:	be 01       	movw	r22, r28
    39a6:	68 5f       	subi	r22, 0xF8	; 248
    39a8:	7f 4f       	sbci	r23, 0xFF	; 255
    39aa:	0e 94 c4 1b 	call	0x3788	; 0x3788 <_ZL14executeCommandRK6StringS1_>
    39ae:	80 91 4b 01 	lds	r24, 0x014B
    39b2:	88 23       	and	r24, r24
    39b4:	81 f0       	breq	.+32     	; 0x39d6 <_Z11serialEventv+0xf0>
  }

  static void finishHTTPResponse(const byte &wifiPortDescriptor){  
    if (s_wifiIsHeaderSended){
    39b6:	80 91 c0 01 	lds	r24, 0x01C0
    39ba:	88 23       	and	r24, r24
    39bc:	19 f0       	breq	.+6      	; 0x39c4 <_Z11serialEventv+0xde>
      stopHttpFrame();
    39be:	0e 94 75 14 	call	0x28ea	; 0x28ea <_ZN15GB_SerialHelper13stopHttpFrameEv>
    39c2:	04 c0       	rjmp	.+8      	; 0x39cc <_Z11serialEventv+0xe6>
    } 
    else {
      sendHttpNotFoundHeader(wifiPortDescriptor);
    39c4:	80 91 04 01 	lds	r24, 0x0104
    39c8:	0e 94 26 0b 	call	0x164c	; 0x164c <_ZN15GB_SerialHelper22sendHttpNotFoundHeaderEh>
    }
    closeConnection(wifiPortDescriptor);
    39cc:	80 91 04 01 	lds	r24, 0x0104
    39d0:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_ZN15GB_SerialHelper15closeConnectionEh>
    39d4:	02 c0       	rjmp	.+4      	; 0x39da <_Z11serialEventv+0xf4>
    39d6:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN15GB_SerialHelper13printDirtyEndEv>
    39da:	80 91 af 01 	lds	r24, 0x01AF
    39de:	88 23       	and	r24, r24
    39e0:	91 f0       	breq	.+36     	; 0x3a06 <_Z11serialEventv+0x120>
    39e2:	80 91 4c 01 	lds	r24, 0x014C
    39e6:	88 23       	and	r24, r24
    39e8:	71 f0       	breq	.+28     	; 0x3a06 <_Z11serialEventv+0x120>
    39ea:	8d eb       	ldi	r24, 0xBD	; 189
    39ec:	93 e0       	ldi	r25, 0x03	; 3
    39ee:	63 e0       	ldi	r22, 0x03	; 3
    39f0:	71 e0       	ldi	r23, 0x01	; 1
    39f2:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
    39f6:	8d eb       	ldi	r24, 0xBD	; 189
    39f8:	93 e0       	ldi	r25, 0x03	; 3
    39fa:	67 e9       	ldi	r22, 0x97	; 151
    39fc:	72 e0       	ldi	r23, 0x02	; 2
    39fe:	0e 94 c0 34 	call	0x6980	; 0x6980 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3a02:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN15GB_SerialHelper13printDirtyEndEv>
    3a06:	ce 01       	movw	r24, r28
    3a08:	08 96       	adiw	r24, 0x08	; 8
    3a0a:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
    3a0e:	ce 01       	movw	r24, r28
    3a10:	01 96       	adiw	r24, 0x01	; 1
    3a12:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
    3a16:	2e 96       	adiw	r28, 0x0e	; 14
    3a18:	0f b6       	in	r0, 0x3f	; 63
    3a1a:	f8 94       	cli
    3a1c:	de bf       	out	0x3e, r29	; 62
    3a1e:	0f be       	out	0x3f, r0	; 63
    3a20:	cd bf       	out	0x3d, r28	; 61
    3a22:	cf 91       	pop	r28
    3a24:	df 91       	pop	r29
    3a26:	1f 91       	pop	r17
    3a28:	0f 91       	pop	r16
    3a2a:	ff 90       	pop	r15
    3a2c:	ef 90       	pop	r14
    3a2e:	df 90       	pop	r13
    3a30:	cf 90       	pop	r12
    3a32:	08 95       	ret

00003a34 <_Z15initLoggerModelv>:
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    3a34:	10 92 55 01 	sts	0x0155, r1
    this->sequenceSize = sequenceSize;
    3a38:	42 e0       	ldi	r20, 0x02	; 2
    3a3a:	40 93 56 01 	sts	0x0156, r20
EVENT_SERIAL_UNKNOWN_COMMAND;

void initLoggerModel(){
  
  // Use F macro to reduce requirements to memory. We can't use F macro in constructors.
  ERROR_TIMER_NOT_SET.init(B00, 2, F("Error: Timer not set"));
    3a3e:	8a e9       	ldi	r24, 0x9A	; 154
    3a40:	98 e0       	ldi	r25, 0x08	; 8
    3a42:	90 93 58 01 	sts	0x0158, r25
    3a46:	80 93 57 01 	sts	0x0157, r24
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    3a4a:	31 e0       	ldi	r19, 0x01	; 1
    3a4c:	30 93 5c 01 	sts	0x015C, r19
    this->sequenceSize = sequenceSize;
    3a50:	23 e0       	ldi	r18, 0x03	; 3
    3a52:	20 93 5d 01 	sts	0x015D, r18
  ERROR_TIMER_NEEDS_SYNC.init(B001, 3, F("Error: Timer needs sync"));
    3a56:	82 e8       	ldi	r24, 0x82	; 130
    3a58:	98 e0       	ldi	r25, 0x08	; 8
    3a5a:	90 93 5f 01 	sts	0x015F, r25
    3a5e:	80 93 5e 01 	sts	0x015E, r24
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    3a62:	30 93 63 01 	sts	0x0163, r19
    this->sequenceSize = sequenceSize;
    3a66:	40 93 64 01 	sts	0x0164, r20
  ERROR_TERMOMETER_DISCONNECTED.init(B01, 2, F("Error: Termometer disconnected"));
    3a6a:	83 e6       	ldi	r24, 0x63	; 99
    3a6c:	98 e0       	ldi	r25, 0x08	; 8
    3a6e:	90 93 66 01 	sts	0x0166, r25
    3a72:	80 93 65 01 	sts	0x0165, r24
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    3a76:	40 93 6a 01 	sts	0x016A, r20
    this->sequenceSize = sequenceSize;
    3a7a:	20 93 6b 01 	sts	0x016B, r18
  ERROR_TERMOMETER_ZERO_VALUE.init(B010, 3, F("Error: Termometer returned ZERO value"));
    3a7e:	8d e3       	ldi	r24, 0x3D	; 61
    3a80:	98 e0       	ldi	r25, 0x08	; 8
    3a82:	90 93 6d 01 	sts	0x016D, r25
    3a86:	80 93 6c 01 	sts	0x016C, r24
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    3a8a:	10 92 71 01 	sts	0x0171, r1
    this->sequenceSize = sequenceSize;
    3a8e:	20 93 72 01 	sts	0x0172, r18
  ERROR_TERMOMETER_CRITICAL_VALUE.init(B000, 3, F("Error: Termometer returned CRITICAL value"));
    3a92:	83 e1       	ldi	r24, 0x13	; 19
    3a94:	98 e0       	ldi	r25, 0x08	; 8
    3a96:	90 93 74 01 	sts	0x0174, r25
    3a9a:	80 93 73 01 	sts	0x0173, r24
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    3a9e:	57 e0       	ldi	r21, 0x07	; 7
    3aa0:	50 93 78 01 	sts	0x0178, r21
    this->sequenceSize = sequenceSize;
    3aa4:	20 93 79 01 	sts	0x0179, r18
  ERROR_MEMORY_LOW.init(B111, 3, F("Error: Memory remained less 200 bytes"));
    3aa8:	8d ee       	ldi	r24, 0xED	; 237
    3aaa:	97 e0       	ldi	r25, 0x07	; 7
    3aac:	90 93 7b 01 	sts	0x017B, r25
    3ab0:	80 93 7a 01 	sts	0x017A, r24
  nextEvent(lastAddedEvent), index(0xFF) {
    lastAddedEvent = this;
  }

  void init(byte index, const __FlashStringHelper* description) {
    this->index = index;
    3ab4:	30 93 7f 01 	sts	0x017F, r19

  EVENT_FIRST_START_UP.init(1, F("FIRST STARTUP")), 
    3ab8:	8f ed       	ldi	r24, 0xDF	; 223
    3aba:	97 e0       	ldi	r25, 0x07	; 7
    3abc:	90 93 81 01 	sts	0x0181, r25
    3ac0:	80 93 80 01 	sts	0x0180, r24
    3ac4:	40 93 84 01 	sts	0x0184, r20
  EVENT_RESTART.init(2, F("RESTARTED")), 
    3ac8:	85 ed       	ldi	r24, 0xD5	; 213
    3aca:	97 e0       	ldi	r25, 0x07	; 7
    3acc:	90 93 86 01 	sts	0x0186, r25
    3ad0:	80 93 85 01 	sts	0x0185, r24
    3ad4:	20 93 89 01 	sts	0x0189, r18
  EVENT_MODE_DAY.init(3, F("Growbox switched to DAY mode")), 
    3ad8:	88 eb       	ldi	r24, 0xB8	; 184
    3ada:	97 e0       	ldi	r25, 0x07	; 7
    3adc:	90 93 8b 01 	sts	0x018B, r25
    3ae0:	80 93 8a 01 	sts	0x018A, r24
    3ae4:	84 e0       	ldi	r24, 0x04	; 4
    3ae6:	80 93 8e 01 	sts	0x018E, r24
  EVENT_MODE_NIGHT.init(4, F("Growbox switched to NIGHT mode")), 
    3aea:	89 e9       	ldi	r24, 0x99	; 153
    3aec:	97 e0       	ldi	r25, 0x07	; 7
    3aee:	90 93 90 01 	sts	0x0190, r25
    3af2:	80 93 8f 01 	sts	0x018F, r24
    3af6:	85 e0       	ldi	r24, 0x05	; 5
    3af8:	80 93 93 01 	sts	0x0193, r24
  EVENT_LIGHT_OFF.init(5, F("LIGHT turned OFF")), 
    3afc:	88 e8       	ldi	r24, 0x88	; 136
    3afe:	97 e0       	ldi	r25, 0x07	; 7
    3b00:	90 93 95 01 	sts	0x0195, r25
    3b04:	80 93 94 01 	sts	0x0194, r24
    3b08:	86 e0       	ldi	r24, 0x06	; 6
    3b0a:	80 93 98 01 	sts	0x0198, r24
  EVENT_LIGHT_ON.init(6, F("LIGHT turned ON")), 
    3b0e:	88 e7       	ldi	r24, 0x78	; 120
    3b10:	97 e0       	ldi	r25, 0x07	; 7
    3b12:	90 93 9a 01 	sts	0x019A, r25
    3b16:	80 93 99 01 	sts	0x0199, r24
    3b1a:	50 93 9d 01 	sts	0x019D, r21
  EVENT_FAN_OFF.init(7, F("FAN turned OFF")), 
    3b1e:	89 e6       	ldi	r24, 0x69	; 105
    3b20:	97 e0       	ldi	r25, 0x07	; 7
    3b22:	90 93 9f 01 	sts	0x019F, r25
    3b26:	80 93 9e 01 	sts	0x019E, r24
    3b2a:	88 e0       	ldi	r24, 0x08	; 8
    3b2c:	80 93 a2 01 	sts	0x01A2, r24
  EVENT_FAN_ON_MIN.init(8, F("FAN turned ON MIN speed")), 
    3b30:	81 e5       	ldi	r24, 0x51	; 81
    3b32:	97 e0       	ldi	r25, 0x07	; 7
    3b34:	90 93 a4 01 	sts	0x01A4, r25
    3b38:	80 93 a3 01 	sts	0x01A3, r24
    3b3c:	89 e0       	ldi	r24, 0x09	; 9
    3b3e:	80 93 a7 01 	sts	0x01A7, r24
  EVENT_FAN_ON_MAX.init(9, F("FAN turned ON MAX speed")),
    3b42:	89 e3       	ldi	r24, 0x39	; 57
    3b44:	97 e0       	ldi	r25, 0x07	; 7
    3b46:	90 93 a9 01 	sts	0x01A9, r25
    3b4a:	80 93 a8 01 	sts	0x01A8, r24
    3b4e:	8a e0       	ldi	r24, 0x0A	; 10
    3b50:	80 93 ac 01 	sts	0x01AC, r24
  EVENT_SERIAL_UNKNOWN_COMMAND.init(10, F("Unknown serial command"));
    3b54:	82 e2       	ldi	r24, 0x22	; 34
    3b56:	97 e0       	ldi	r25, 0x07	; 7
    3b58:	90 93 ae 01 	sts	0x01AE, r25
    3b5c:	80 93 ad 01 	sts	0x01AD, r24
}
    3b60:	08 95       	ret

00003b62 <_GLOBAL__I__ZN5Error13lastAddedItemE>:
  byte sequenceSize;
  const __FlashStringHelper* description; // FLASH
  boolean isStored; // should be stored in Log only once, but notification should repeated

    Error() : 
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    3b62:	80 91 4f 01 	lds	r24, 0x014F
    3b66:	90 91 50 01 	lds	r25, 0x0150
    3b6a:	90 93 54 01 	sts	0x0154, r25
    3b6e:	80 93 53 01 	sts	0x0153, r24
    3b72:	2f ef       	ldi	r18, 0xFF	; 255
    3b74:	20 93 55 01 	sts	0x0155, r18
    3b78:	20 93 56 01 	sts	0x0156, r18
    3b7c:	10 92 59 01 	sts	0x0159, r1
    lastAddedItem = this;
    3b80:	83 e5       	ldi	r24, 0x53	; 83
    3b82:	91 e0       	ldi	r25, 0x01	; 1
    3b84:	90 93 5b 01 	sts	0x015B, r25
    3b88:	80 93 5a 01 	sts	0x015A, r24
    3b8c:	20 93 5c 01 	sts	0x015C, r18
    3b90:	20 93 5d 01 	sts	0x015D, r18
    3b94:	10 92 60 01 	sts	0x0160, r1
    3b98:	8a e5       	ldi	r24, 0x5A	; 90
    3b9a:	91 e0       	ldi	r25, 0x01	; 1
    3b9c:	90 93 62 01 	sts	0x0162, r25
    3ba0:	80 93 61 01 	sts	0x0161, r24
    3ba4:	20 93 63 01 	sts	0x0163, r18
    3ba8:	20 93 64 01 	sts	0x0164, r18
    3bac:	10 92 67 01 	sts	0x0167, r1
    3bb0:	81 e6       	ldi	r24, 0x61	; 97
    3bb2:	91 e0       	ldi	r25, 0x01	; 1
    3bb4:	90 93 69 01 	sts	0x0169, r25
    3bb8:	80 93 68 01 	sts	0x0168, r24
    3bbc:	20 93 6a 01 	sts	0x016A, r18
    3bc0:	20 93 6b 01 	sts	0x016B, r18
    3bc4:	10 92 6e 01 	sts	0x016E, r1
    3bc8:	88 e6       	ldi	r24, 0x68	; 104
    3bca:	91 e0       	ldi	r25, 0x01	; 1
    3bcc:	90 93 70 01 	sts	0x0170, r25
    3bd0:	80 93 6f 01 	sts	0x016F, r24
    3bd4:	20 93 71 01 	sts	0x0171, r18
    3bd8:	20 93 72 01 	sts	0x0172, r18
    3bdc:	10 92 75 01 	sts	0x0175, r1
    3be0:	8f e6       	ldi	r24, 0x6F	; 111
    3be2:	91 e0       	ldi	r25, 0x01	; 1
    3be4:	90 93 77 01 	sts	0x0177, r25
    3be8:	80 93 76 01 	sts	0x0176, r24
    3bec:	20 93 78 01 	sts	0x0178, r18
    3bf0:	20 93 79 01 	sts	0x0179, r18
    3bf4:	10 92 7c 01 	sts	0x017C, r1
    3bf8:	86 e7       	ldi	r24, 0x76	; 118
    3bfa:	91 e0       	ldi	r25, 0x01	; 1
    3bfc:	90 93 50 01 	sts	0x0150, r25
    3c00:	80 93 4f 01 	sts	0x014F, r24
public:
  byte index;
  const __FlashStringHelper* description; // FLASH

  Event() : 
  nextEvent(lastAddedEvent), index(0xFF) {
    3c04:	80 91 51 01 	lds	r24, 0x0151
    3c08:	90 91 52 01 	lds	r25, 0x0152
    3c0c:	90 93 7e 01 	sts	0x017E, r25
    3c10:	80 93 7d 01 	sts	0x017D, r24
    3c14:	20 93 7f 01 	sts	0x017F, r18
    lastAddedEvent = this;
    3c18:	8d e7       	ldi	r24, 0x7D	; 125
    3c1a:	91 e0       	ldi	r25, 0x01	; 1
    3c1c:	90 93 83 01 	sts	0x0183, r25
    3c20:	80 93 82 01 	sts	0x0182, r24
    3c24:	20 93 84 01 	sts	0x0184, r18
    3c28:	82 e8       	ldi	r24, 0x82	; 130
    3c2a:	91 e0       	ldi	r25, 0x01	; 1
    3c2c:	90 93 88 01 	sts	0x0188, r25
    3c30:	80 93 87 01 	sts	0x0187, r24
    3c34:	20 93 89 01 	sts	0x0189, r18
    3c38:	87 e8       	ldi	r24, 0x87	; 135
    3c3a:	91 e0       	ldi	r25, 0x01	; 1
    3c3c:	90 93 8d 01 	sts	0x018D, r25
    3c40:	80 93 8c 01 	sts	0x018C, r24
    3c44:	20 93 8e 01 	sts	0x018E, r18
    3c48:	8c e8       	ldi	r24, 0x8C	; 140
    3c4a:	91 e0       	ldi	r25, 0x01	; 1
    3c4c:	90 93 92 01 	sts	0x0192, r25
    3c50:	80 93 91 01 	sts	0x0191, r24
    3c54:	20 93 93 01 	sts	0x0193, r18
    3c58:	81 e9       	ldi	r24, 0x91	; 145
    3c5a:	91 e0       	ldi	r25, 0x01	; 1
    3c5c:	90 93 97 01 	sts	0x0197, r25
    3c60:	80 93 96 01 	sts	0x0196, r24
    3c64:	20 93 98 01 	sts	0x0198, r18
    3c68:	86 e9       	ldi	r24, 0x96	; 150
    3c6a:	91 e0       	ldi	r25, 0x01	; 1
    3c6c:	90 93 9c 01 	sts	0x019C, r25
    3c70:	80 93 9b 01 	sts	0x019B, r24
    3c74:	20 93 9d 01 	sts	0x019D, r18
    3c78:	8b e9       	ldi	r24, 0x9B	; 155
    3c7a:	91 e0       	ldi	r25, 0x01	; 1
    3c7c:	90 93 a1 01 	sts	0x01A1, r25
    3c80:	80 93 a0 01 	sts	0x01A0, r24
    3c84:	20 93 a2 01 	sts	0x01A2, r18
    3c88:	80 ea       	ldi	r24, 0xA0	; 160
    3c8a:	91 e0       	ldi	r25, 0x01	; 1
    3c8c:	90 93 a6 01 	sts	0x01A6, r25
    3c90:	80 93 a5 01 	sts	0x01A5, r24
    3c94:	20 93 a7 01 	sts	0x01A7, r18
    3c98:	85 ea       	ldi	r24, 0xA5	; 165
    3c9a:	91 e0       	ldi	r25, 0x01	; 1
    3c9c:	90 93 ab 01 	sts	0x01AB, r25
    3ca0:	80 93 aa 01 	sts	0x01AA, r24
    3ca4:	20 93 ac 01 	sts	0x01AC, r18
    3ca8:	8a ea       	ldi	r24, 0xAA	; 170
    3caa:	91 e0       	ldi	r25, 0x01	; 1
    3cac:	90 93 52 01 	sts	0x0152, r25
    3cb0:	80 93 51 01 	sts	0x0151, r24
    3cb4:	08 95       	ret

00003cb6 <_Z41__static_initialization_and_destruction_0ii>:

String GB_SerialHelper::s_wifiSID;
String GB_SerialHelper::s_wifiPass;

boolean GB_SerialHelper::s_wifiIsHeaderSended;
int GB_SerialHelper::s_wifiResponseAutoFlushConut;
    3cb6:	81 30       	cpi	r24, 0x01	; 1
    3cb8:	91 05       	cpc	r25, r1
    3cba:	c1 f4       	brne	.+48     	; 0x3cec <_Z41__static_initialization_and_destruction_0ii+0x36>
    3cbc:	6f 5f       	subi	r22, 0xFF	; 255
    3cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    3cc0:	11 f5       	brne	.+68     	; 0x3d06 <_Z41__static_initialization_and_destruction_0ii+0x50>
enum HTTP_TAG {
  HTTP_TAG_OPEN, HTTP_TAG_CLOSED, HTTP_TAG_SINGLE
};

static int flashStringLength(const char PROGMEM* pstr){ 
  return strlen_P(pstr);
    3cc2:	8f ea       	ldi	r24, 0xAF	; 175
    3cc4:	98 e0       	ldi	r25, 0x08	; 8
    3cc6:	0e 94 47 05 	call	0xa8e	; 0xa8e <strlen_P>
const char S_WIFI_RESPONSE_OK[] PROGMEM  = "OK";
const char S_WIFI_GET_[] PROGMEM  = "GET /";
const char S_WIFI_POST_[] PROGMEM  = "POST /"; 
const char S_WIFI_at_recv_data_ [] PROGMEM  = "at+recv_data="; 

const size_t SLENGTH_WIFI_at_recv_data_ = flashStringLength(S_WIFI_at_recv_data_);
    3cca:	90 93 c4 01 	sts	0x01C4, r25
    3cce:	80 93 c3 01 	sts	0x01C3, r24
boolean GB_SerialHelper::s_restartWifi = false;
boolean GB_SerialHelper::s_restartWifiIfNoResponseAutomatically = true;



String GB_SerialHelper::s_wifiSID;
    3cd2:	82 eb       	ldi	r24, 0xB2	; 178
    3cd4:	91 e0       	ldi	r25, 0x01	; 1
    3cd6:	61 e0       	ldi	r22, 0x01	; 1
    3cd8:	71 e0       	ldi	r23, 0x01	; 1
    3cda:	0e 94 07 38 	call	0x700e	; 0x700e <_ZN6StringC1EPKc>
String GB_SerialHelper::s_wifiPass;
    3cde:	89 eb       	ldi	r24, 0xB9	; 185
    3ce0:	91 e0       	ldi	r25, 0x01	; 1
    3ce2:	61 e0       	ldi	r22, 0x01	; 1
    3ce4:	71 e0       	ldi	r23, 0x01	; 1
    3ce6:	0e 94 07 38 	call	0x700e	; 0x700e <_ZN6StringC1EPKc>
    3cea:	08 95       	ret
    3cec:	89 2b       	or	r24, r25
    3cee:	59 f4       	brne	.+22     	; 0x3d06 <_Z41__static_initialization_and_destruction_0ii+0x50>
    3cf0:	6f 5f       	subi	r22, 0xFF	; 255
    3cf2:	7f 4f       	sbci	r23, 0xFF	; 255
    3cf4:	41 f4       	brne	.+16     	; 0x3d06 <_Z41__static_initialization_and_destruction_0ii+0x50>
    3cf6:	89 eb       	ldi	r24, 0xB9	; 185
    3cf8:	91 e0       	ldi	r25, 0x01	; 1
    3cfa:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
boolean GB_SerialHelper::s_restartWifi = false;
boolean GB_SerialHelper::s_restartWifiIfNoResponseAutomatically = true;



String GB_SerialHelper::s_wifiSID;
    3cfe:	82 eb       	ldi	r24, 0xB2	; 178
    3d00:	91 e0       	ldi	r25, 0x01	; 1
    3d02:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <_ZN6StringD1Ev>
    3d06:	08 95       	ret

00003d08 <_GLOBAL__D__ZN15GB_SerialHelper16useSerialMonitorE>:
String GB_SerialHelper::s_wifiPass;

boolean GB_SerialHelper::s_wifiIsHeaderSended;
int GB_SerialHelper::s_wifiResponseAutoFlushConut;
    3d08:	80 e0       	ldi	r24, 0x00	; 0
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	6f ef       	ldi	r22, 0xFF	; 255
    3d0e:	7f ef       	ldi	r23, 0xFF	; 255
    3d10:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <_Z41__static_initialization_and_destruction_0ii>
    3d14:	08 95       	ret

00003d16 <_GLOBAL__I__ZN15GB_SerialHelper16useSerialMonitorE>:
    3d16:	81 e0       	ldi	r24, 0x01	; 1
    3d18:	90 e0       	ldi	r25, 0x00	; 0
    3d1a:	6f ef       	ldi	r22, 0xFF	; 255
    3d1c:	7f ef       	ldi	r23, 0xFF	; 255
    3d1e:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <_Z41__static_initialization_and_destruction_0ii>
    3d22:	08 95       	ret

00003d24 <_GLOBAL__I__ZN14GB_Thermometer17dallasTemperatureE>:
    3d24:	8d eb       	ldi	r24, 0xBD	; 189
    3d26:	98 e0       	ldi	r25, 0x08	; 8
    3d28:	0e 94 47 05 	call	0xa8e	; 0xa8e <strlen_P>
    3d2c:	90 93 0b 02 	sts	0x020B, r25
    3d30:	80 93 0a 02 	sts	0x020A, r24
#include "Thermometer.h"

// Pass our oneWire reference to Dallas Temperature. 
DallasTemperature GB_Thermometer::dallasTemperature(&g_oneWirePin);
    3d34:	85 ee       	ldi	r24, 0xE5	; 229
    3d36:	91 e0       	ldi	r25, 0x01	; 1
    3d38:	6c e3       	ldi	r22, 0x3C	; 60
    3d3a:	71 e0       	ldi	r23, 0x01	; 1
    3d3c:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <_ZN17DallasTemperatureC1EP7OneWire>
DeviceAddress GB_Thermometer::oneWireAddress;

// Visible only in this file
float GB_Thermometer::workingTemperature = 0.0;
double GB_Thermometer::statisticsTemperatureSumm = 0.0;
int GB_Thermometer::statisticsTemperatureCount = 0;
    3d40:	08 95       	ret

00003d42 <freeMemory>:

int freeMemory() {
    3d42:	df 93       	push	r29
    3d44:	cf 93       	push	r28
    3d46:	00 d0       	rcall	.+0      	; 0x3d48 <freeMemory+0x6>
    3d48:	cd b7       	in	r28, 0x3d	; 61
    3d4a:	de b7       	in	r29, 0x3e	; 62
  int free_memory;

  if ((int)__brkval == 0) {
    3d4c:	20 91 e0 03 	lds	r18, 0x03E0
    3d50:	30 91 e1 03 	lds	r19, 0x03E1
    3d54:	ce 01       	movw	r24, r28
    3d56:	01 96       	adiw	r24, 0x01	; 1
    3d58:	21 15       	cp	r18, r1
    3d5a:	31 05       	cpc	r19, r1
    3d5c:	29 f4       	brne	.+10     	; 0x3d68 <freeMemory+0x26>
    free_memory = ((int)&free_memory) - ((int)&__heap_start);
    3d5e:	84 5e       	subi	r24, 0xE4	; 228
    3d60:	93 40       	sbci	r25, 0x03	; 3
    3d62:	9a 83       	std	Y+2, r25	; 0x02
    3d64:	89 83       	std	Y+1, r24	; 0x01
    3d66:	18 c0       	rjmp	.+48     	; 0x3d98 <freeMemory+0x56>
  } else {
    free_memory = ((int)&free_memory) - ((int)__brkval);
    3d68:	ac 01       	movw	r20, r24
    3d6a:	42 1b       	sub	r20, r18
    3d6c:	53 0b       	sbc	r21, r19
/* Calculates the size of the free list */
int freeListSize() {
  struct __freelist* current;
  int total = 0;

  for (current = __flp; current; current = current->nx) {
    3d6e:	e0 91 e2 03 	lds	r30, 0x03E2
    3d72:	f0 91 e3 03 	lds	r31, 0x03E3
    3d76:	20 e0       	ldi	r18, 0x00	; 0
    3d78:	30 e0       	ldi	r19, 0x00	; 0
    3d7a:	08 c0       	rjmp	.+16     	; 0x3d8c <freeMemory+0x4a>
    total += 2; /* Add two bytes for the memory block's header  */
    3d7c:	80 81       	ld	r24, Z
    3d7e:	91 81       	ldd	r25, Z+1	; 0x01
    3d80:	02 96       	adiw	r24, 0x02	; 2
    total += (int) current->sz;
    3d82:	28 0f       	add	r18, r24
    3d84:	39 1f       	adc	r19, r25
/* Calculates the size of the free list */
int freeListSize() {
  struct __freelist* current;
  int total = 0;

  for (current = __flp; current; current = current->nx) {
    3d86:	02 80       	ldd	r0, Z+2	; 0x02
    3d88:	f3 81       	ldd	r31, Z+3	; 0x03
    3d8a:	e0 2d       	mov	r30, r0
    3d8c:	30 97       	sbiw	r30, 0x00	; 0
    3d8e:	b1 f7       	brne	.-20     	; 0x3d7c <freeMemory+0x3a>

  if ((int)__brkval == 0) {
    free_memory = ((int)&free_memory) - ((int)&__heap_start);
  } else {
    free_memory = ((int)&free_memory) - ((int)__brkval);
    free_memory += freeListSize();
    3d90:	24 0f       	add	r18, r20
    3d92:	35 1f       	adc	r19, r21
    3d94:	3a 83       	std	Y+2, r19	; 0x02
    3d96:	29 83       	std	Y+1, r18	; 0x01
  }
  return free_memory;
    3d98:	89 81       	ldd	r24, Y+1	; 0x01
    3d9a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d9c:	0f 90       	pop	r0
    3d9e:	0f 90       	pop	r0
    3da0:	cf 91       	pop	r28
    3da2:	df 91       	pop	r29
    3da4:	08 95       	ret

00003da6 <_Z9breakTimemR12tmElements_t>:
// leap year calulator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+Y)>0) && !((1970+Y)%4) && ( ((1970+Y)%100) || !((1970+Y)%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    3da6:	8f 92       	push	r8
    3da8:	9f 92       	push	r9
    3daa:	af 92       	push	r10
    3dac:	bf 92       	push	r11
    3dae:	cf 92       	push	r12
    3db0:	df 92       	push	r13
    3db2:	ef 92       	push	r14
    3db4:	ff 92       	push	r15
    3db6:	0f 93       	push	r16
    3db8:	1f 93       	push	r17
    3dba:	cf 93       	push	r28
    3dbc:	df 93       	push	r29
    3dbe:	7b 01       	movw	r14, r22
    3dc0:	8c 01       	movw	r16, r24
    3dc2:	ea 01       	movw	r28, r20
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    3dc4:	2c e3       	ldi	r18, 0x3C	; 60
    3dc6:	30 e0       	ldi	r19, 0x00	; 0
    3dc8:	40 e0       	ldi	r20, 0x00	; 0
    3dca:	50 e0       	ldi	r21, 0x00	; 0
    3dcc:	0e 94 48 3c 	call	0x7890	; 0x7890 <__udivmodsi4>
    3dd0:	68 83       	st	Y, r22
  time /= 60; // now it is minutes
    3dd2:	c8 01       	movw	r24, r16
    3dd4:	b7 01       	movw	r22, r14
    3dd6:	2c e3       	ldi	r18, 0x3C	; 60
    3dd8:	30 e0       	ldi	r19, 0x00	; 0
    3dda:	40 e0       	ldi	r20, 0x00	; 0
    3ddc:	50 e0       	ldi	r21, 0x00	; 0
    3dde:	0e 94 48 3c 	call	0x7890	; 0x7890 <__udivmodsi4>
    3de2:	12 2f       	mov	r17, r18
    3de4:	03 2f       	mov	r16, r19
    3de6:	f4 2e       	mov	r15, r20
    3de8:	e5 2e       	mov	r14, r21
  tm.Minute = time % 60;
    3dea:	62 2f       	mov	r22, r18
    3dec:	73 2f       	mov	r23, r19
    3dee:	84 2f       	mov	r24, r20
    3df0:	95 2f       	mov	r25, r21
    3df2:	2c e3       	ldi	r18, 0x3C	; 60
    3df4:	30 e0       	ldi	r19, 0x00	; 0
    3df6:	40 e0       	ldi	r20, 0x00	; 0
    3df8:	50 e0       	ldi	r21, 0x00	; 0
    3dfa:	0e 94 48 3c 	call	0x7890	; 0x7890 <__udivmodsi4>
    3dfe:	69 83       	std	Y+1, r22	; 0x01
  time /= 60; // now it is hours
    3e00:	61 2f       	mov	r22, r17
    3e02:	70 2f       	mov	r23, r16
    3e04:	8f 2d       	mov	r24, r15
    3e06:	9e 2d       	mov	r25, r14
    3e08:	2c e3       	ldi	r18, 0x3C	; 60
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	40 e0       	ldi	r20, 0x00	; 0
    3e0e:	50 e0       	ldi	r21, 0x00	; 0
    3e10:	0e 94 48 3c 	call	0x7890	; 0x7890 <__udivmodsi4>
    3e14:	12 2f       	mov	r17, r18
    3e16:	03 2f       	mov	r16, r19
    3e18:	f4 2e       	mov	r15, r20
    3e1a:	e5 2e       	mov	r14, r21
  tm.Hour = time % 24;
    3e1c:	62 2f       	mov	r22, r18
    3e1e:	73 2f       	mov	r23, r19
    3e20:	84 2f       	mov	r24, r20
    3e22:	95 2f       	mov	r25, r21
    3e24:	28 e1       	ldi	r18, 0x18	; 24
    3e26:	30 e0       	ldi	r19, 0x00	; 0
    3e28:	40 e0       	ldi	r20, 0x00	; 0
    3e2a:	50 e0       	ldi	r21, 0x00	; 0
    3e2c:	0e 94 48 3c 	call	0x7890	; 0x7890 <__udivmodsi4>
    3e30:	6a 83       	std	Y+2, r22	; 0x02
  time /= 24; // now it is days
    3e32:	61 2f       	mov	r22, r17
    3e34:	70 2f       	mov	r23, r16
    3e36:	8f 2d       	mov	r24, r15
    3e38:	9e 2d       	mov	r25, r14
    3e3a:	28 e1       	ldi	r18, 0x18	; 24
    3e3c:	30 e0       	ldi	r19, 0x00	; 0
    3e3e:	40 e0       	ldi	r20, 0x00	; 0
    3e40:	50 e0       	ldi	r21, 0x00	; 0
    3e42:	0e 94 48 3c 	call	0x7890	; 0x7890 <__udivmodsi4>
    3e46:	79 01       	movw	r14, r18
    3e48:	8a 01       	movw	r16, r20
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    3e4a:	c8 01       	movw	r24, r16
    3e4c:	b7 01       	movw	r22, r14
    3e4e:	6c 5f       	subi	r22, 0xFC	; 252
    3e50:	7f 4f       	sbci	r23, 0xFF	; 255
    3e52:	8f 4f       	sbci	r24, 0xFF	; 255
    3e54:	9f 4f       	sbci	r25, 0xFF	; 255
    3e56:	27 e0       	ldi	r18, 0x07	; 7
    3e58:	30 e0       	ldi	r19, 0x00	; 0
    3e5a:	40 e0       	ldi	r20, 0x00	; 0
    3e5c:	50 e0       	ldi	r21, 0x00	; 0
    3e5e:	0e 94 48 3c 	call	0x7890	; 0x7890 <__udivmodsi4>
    3e62:	6f 5f       	subi	r22, 0xFF	; 255
    3e64:	6b 83       	std	Y+3, r22	; 0x03
    3e66:	20 e0       	ldi	r18, 0x00	; 0
    3e68:	aa 24       	eor	r10, r10
    3e6a:	bb 24       	eor	r11, r11
    3e6c:	65 01       	movw	r12, r10
    3e6e:	01 c0       	rjmp	.+2      	; 0x3e72 <_Z9breakTimemR12tmElements_t+0xcc>
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
    3e70:	2f 5f       	subi	r18, 0xFF	; 255
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3e72:	82 2e       	mov	r8, r18
    3e74:	99 24       	eor	r9, r9
    3e76:	f4 01       	movw	r30, r8
    3e78:	ee 54       	subi	r30, 0x4E	; 78
    3e7a:	f8 4f       	sbci	r31, 0xF8	; 248
    3e7c:	cf 01       	movw	r24, r30
    3e7e:	83 70       	andi	r24, 0x03	; 3
    3e80:	90 70       	andi	r25, 0x00	; 0
    3e82:	89 2b       	or	r24, r25
    3e84:	99 f4       	brne	.+38     	; 0x3eac <_Z9breakTimemR12tmElements_t+0x106>
    3e86:	cf 01       	movw	r24, r30
    3e88:	64 e6       	ldi	r22, 0x64	; 100
    3e8a:	70 e0       	ldi	r23, 0x00	; 0
    3e8c:	0e 94 35 3c 	call	0x786a	; 0x786a <__divmodhi4>
    3e90:	89 2b       	or	r24, r25
    3e92:	39 f4       	brne	.+14     	; 0x3ea2 <_Z9breakTimemR12tmElements_t+0xfc>
    3e94:	cf 01       	movw	r24, r30
    3e96:	60 e9       	ldi	r22, 0x90	; 144
    3e98:	71 e0       	ldi	r23, 0x01	; 1
    3e9a:	0e 94 35 3c 	call	0x786a	; 0x786a <__divmodhi4>
    3e9e:	89 2b       	or	r24, r25
    3ea0:	29 f4       	brne	.+10     	; 0x3eac <_Z9breakTimemR12tmElements_t+0x106>
    3ea2:	8e e6       	ldi	r24, 0x6E	; 110
    3ea4:	91 e0       	ldi	r25, 0x01	; 1
    3ea6:	a0 e0       	ldi	r26, 0x00	; 0
    3ea8:	b0 e0       	ldi	r27, 0x00	; 0
    3eaa:	04 c0       	rjmp	.+8      	; 0x3eb4 <_Z9breakTimemR12tmElements_t+0x10e>
    3eac:	8d e6       	ldi	r24, 0x6D	; 109
    3eae:	91 e0       	ldi	r25, 0x01	; 1
    3eb0:	a0 e0       	ldi	r26, 0x00	; 0
    3eb2:	b0 e0       	ldi	r27, 0x00	; 0
    3eb4:	a8 0e       	add	r10, r24
    3eb6:	b9 1e       	adc	r11, r25
    3eb8:	ca 1e       	adc	r12, r26
    3eba:	db 1e       	adc	r13, r27
    3ebc:	c5 01       	movw	r24, r10
    3ebe:	a0 e0       	ldi	r26, 0x00	; 0
    3ec0:	b0 e0       	ldi	r27, 0x00	; 0
    3ec2:	e8 16       	cp	r14, r24
    3ec4:	f9 06       	cpc	r15, r25
    3ec6:	0a 07       	cpc	r16, r26
    3ec8:	1b 07       	cpc	r17, r27
    3eca:	90 f6       	brcc	.-92     	; 0x3e70 <_Z9breakTimemR12tmElements_t+0xca>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    3ecc:	2e 83       	std	Y+6, r18	; 0x06
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    3ece:	f4 01       	movw	r30, r8
    3ed0:	ee 54       	subi	r30, 0x4E	; 78
    3ed2:	f8 4f       	sbci	r31, 0xF8	; 248
    3ed4:	83 e0       	ldi	r24, 0x03	; 3
    3ed6:	88 2e       	mov	r8, r24
    3ed8:	91 2c       	mov	r9, r1
    3eda:	8e 22       	and	r8, r30
    3edc:	9f 22       	and	r9, r31
    3ede:	81 14       	cp	r8, r1
    3ee0:	91 04       	cpc	r9, r1
    3ee2:	99 f4       	brne	.+38     	; 0x3f0a <_Z9breakTimemR12tmElements_t+0x164>
    3ee4:	cf 01       	movw	r24, r30
    3ee6:	64 e6       	ldi	r22, 0x64	; 100
    3ee8:	70 e0       	ldi	r23, 0x00	; 0
    3eea:	0e 94 35 3c 	call	0x786a	; 0x786a <__divmodhi4>
    3eee:	89 2b       	or	r24, r25
    3ef0:	39 f4       	brne	.+14     	; 0x3f00 <_Z9breakTimemR12tmElements_t+0x15a>
    3ef2:	cf 01       	movw	r24, r30
    3ef4:	60 e9       	ldi	r22, 0x90	; 144
    3ef6:	71 e0       	ldi	r23, 0x01	; 1
    3ef8:	0e 94 35 3c 	call	0x786a	; 0x786a <__divmodhi4>
    3efc:	89 2b       	or	r24, r25
    3efe:	29 f4       	brne	.+10     	; 0x3f0a <_Z9breakTimemR12tmElements_t+0x164>
    3f00:	8e e6       	ldi	r24, 0x6E	; 110
    3f02:	91 e0       	ldi	r25, 0x01	; 1
    3f04:	a0 e0       	ldi	r26, 0x00	; 0
    3f06:	b0 e0       	ldi	r27, 0x00	; 0
    3f08:	04 c0       	rjmp	.+8      	; 0x3f12 <_Z9breakTimemR12tmElements_t+0x16c>
    3f0a:	8d e6       	ldi	r24, 0x6D	; 109
    3f0c:	91 e0       	ldi	r25, 0x01	; 1
    3f0e:	a0 e0       	ldi	r26, 0x00	; 0
    3f10:	b0 e0       	ldi	r27, 0x00	; 0
  time  -= days; // now it is days in this year, starting at 0
    3f12:	a8 1a       	sub	r10, r24
    3f14:	b9 0a       	sbc	r11, r25
    3f16:	ca 0a       	sbc	r12, r26
    3f18:	db 0a       	sbc	r13, r27
    3f1a:	98 01       	movw	r18, r16
    3f1c:	87 01       	movw	r16, r14
    3f1e:	0a 19       	sub	r16, r10
    3f20:	1b 09       	sbc	r17, r11
    3f22:	2c 09       	sbc	r18, r12
    3f24:	3d 09       	sbc	r19, r13
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    3f26:	cf 01       	movw	r24, r30
    3f28:	64 e6       	ldi	r22, 0x64	; 100
    3f2a:	70 e0       	ldi	r23, 0x00	; 0
    3f2c:	0e 94 35 3c 	call	0x786a	; 0x786a <__divmodhi4>
    3f30:	7c 01       	movw	r14, r24
    3f32:	cf 01       	movw	r24, r30
    3f34:	60 e9       	ldi	r22, 0x90	; 144
    3f36:	71 e0       	ldi	r23, 0x01	; 1
    3f38:	0e 94 35 3c 	call	0x786a	; 0x786a <__divmodhi4>
    3f3c:	ac 01       	movw	r20, r24
    3f3e:	e0 e1       	ldi	r30, 0x10	; 16
    3f40:	f1 e0       	ldi	r31, 0x01	; 1
    3f42:	60 e0       	ldi	r22, 0x00	; 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    3f44:	61 30       	cpi	r22, 0x01	; 1
    3f46:	51 f4       	brne	.+20     	; 0x3f5c <_Z9breakTimemR12tmElements_t+0x1b6>
      if (LEAP_YEAR(year)) {
    3f48:	81 14       	cp	r8, r1
    3f4a:	91 04       	cpc	r9, r1
    3f4c:	49 f4       	brne	.+18     	; 0x3f60 <_Z9breakTimemR12tmElements_t+0x1ba>
    3f4e:	e1 14       	cp	r14, r1
    3f50:	f1 04       	cpc	r15, r1
    3f52:	41 f4       	brne	.+16     	; 0x3f64 <_Z9breakTimemR12tmElements_t+0x1be>
    3f54:	41 15       	cp	r20, r1
    3f56:	51 05       	cpc	r21, r1
    3f58:	29 f0       	breq	.+10     	; 0x3f64 <_Z9breakTimemR12tmElements_t+0x1be>
    3f5a:	02 c0       	rjmp	.+4      	; 0x3f60 <_Z9breakTimemR12tmElements_t+0x1ba>
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    3f5c:	80 81       	ld	r24, Z
    3f5e:	03 c0       	rjmp	.+6      	; 0x3f66 <_Z9breakTimemR12tmElements_t+0x1c0>
    3f60:	8c e1       	ldi	r24, 0x1C	; 28
    3f62:	01 c0       	rjmp	.+2      	; 0x3f66 <_Z9breakTimemR12tmElements_t+0x1c0>
    3f64:	8d e1       	ldi	r24, 0x1D	; 29
    }
    
    if (time >= monthLength) {
    3f66:	90 e0       	ldi	r25, 0x00	; 0
    3f68:	a0 e0       	ldi	r26, 0x00	; 0
    3f6a:	b0 e0       	ldi	r27, 0x00	; 0
    3f6c:	08 17       	cp	r16, r24
    3f6e:	19 07       	cpc	r17, r25
    3f70:	2a 07       	cpc	r18, r26
    3f72:	3b 07       	cpc	r19, r27
    3f74:	40 f0       	brcs	.+16     	; 0x3f86 <_Z9breakTimemR12tmElements_t+0x1e0>
      time -= monthLength;
    3f76:	08 1b       	sub	r16, r24
    3f78:	19 0b       	sbc	r17, r25
    3f7a:	2a 0b       	sbc	r18, r26
    3f7c:	3b 0b       	sbc	r19, r27
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    3f7e:	6f 5f       	subi	r22, 0xFF	; 255
    3f80:	31 96       	adiw	r30, 0x01	; 1
    3f82:	6c 30       	cpi	r22, 0x0C	; 12
    3f84:	f9 f6       	brne	.-66     	; 0x3f44 <_Z9breakTimemR12tmElements_t+0x19e>
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    3f86:	6f 5f       	subi	r22, 0xFF	; 255
    3f88:	6d 83       	std	Y+5, r22	; 0x05
  tm.Day = time + 1;     // day of month
    3f8a:	80 2f       	mov	r24, r16
    3f8c:	8f 5f       	subi	r24, 0xFF	; 255
    3f8e:	8c 83       	std	Y+4, r24	; 0x04
}
    3f90:	df 91       	pop	r29
    3f92:	cf 91       	pop	r28
    3f94:	1f 91       	pop	r17
    3f96:	0f 91       	pop	r16
    3f98:	ff 90       	pop	r15
    3f9a:	ef 90       	pop	r14
    3f9c:	df 90       	pop	r13
    3f9e:	cf 90       	pop	r12
    3fa0:	bf 90       	pop	r11
    3fa2:	af 90       	pop	r10
    3fa4:	9f 90       	pop	r9
    3fa6:	8f 90       	pop	r8
    3fa8:	08 95       	ret

00003faa <_Z12refreshCachem>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    3faa:	ef 92       	push	r14
    3fac:	ff 92       	push	r15
    3fae:	0f 93       	push	r16
    3fb0:	1f 93       	push	r17
    3fb2:	7b 01       	movw	r14, r22
    3fb4:	8c 01       	movw	r16, r24
  if (t != cacheTime) {
    3fb6:	80 91 23 02 	lds	r24, 0x0223
    3fba:	90 91 24 02 	lds	r25, 0x0224
    3fbe:	a0 91 25 02 	lds	r26, 0x0225
    3fc2:	b0 91 26 02 	lds	r27, 0x0226
    3fc6:	e8 16       	cp	r14, r24
    3fc8:	f9 06       	cpc	r15, r25
    3fca:	0a 07       	cpc	r16, r26
    3fcc:	1b 07       	cpc	r17, r27
    3fce:	71 f0       	breq	.+28     	; 0x3fec <_Z12refreshCachem+0x42>
    breakTime(t, tm); 
    3fd0:	c8 01       	movw	r24, r16
    3fd2:	b7 01       	movw	r22, r14
    3fd4:	48 e1       	ldi	r20, 0x18	; 24
    3fd6:	52 e0       	ldi	r21, 0x02	; 2
    3fd8:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_Z9breakTimemR12tmElements_t>
    cacheTime = t; 
    3fdc:	e0 92 23 02 	sts	0x0223, r14
    3fe0:	f0 92 24 02 	sts	0x0224, r15
    3fe4:	00 93 25 02 	sts	0x0225, r16
    3fe8:	10 93 26 02 	sts	0x0226, r17
  }
}
    3fec:	1f 91       	pop	r17
    3fee:	0f 91       	pop	r16
    3ff0:	ff 90       	pop	r15
    3ff2:	ef 90       	pop	r14
    3ff4:	08 95       	ret

00003ff6 <_Z4yearm>:
int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
    3ff6:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <_Z12refreshCachem>
    3ffa:	20 91 1e 02 	lds	r18, 0x021E
    3ffe:	30 e0       	ldi	r19, 0x00	; 0
    4000:	2e 54       	subi	r18, 0x4E	; 78
    4002:	38 4f       	sbci	r19, 0xF8	; 248
  return tmYearToCalendar(tm.Year);
}
    4004:	c9 01       	movw	r24, r18
    4006:	08 95       	ret

00004008 <_Z8makeTimeR12tmElements_t>:
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
}

time_t makeTime(tmElements_t &tm){   
    4008:	4f 92       	push	r4
    400a:	5f 92       	push	r5
    400c:	6f 92       	push	r6
    400e:	7f 92       	push	r7
    4010:	8f 92       	push	r8
    4012:	9f 92       	push	r9
    4014:	af 92       	push	r10
    4016:	bf 92       	push	r11
    4018:	cf 92       	push	r12
    401a:	df 92       	push	r13
    401c:	ef 92       	push	r14
    401e:	ff 92       	push	r15
    4020:	0f 93       	push	r16
    4022:	1f 93       	push	r17
    4024:	cf 93       	push	r28
    4026:	df 93       	push	r29
    4028:	4c 01       	movw	r8, r24
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
    402a:	dc 01       	movw	r26, r24
    402c:	16 96       	adiw	r26, 0x06	; 6
    402e:	1c 91       	ld	r17, X
    4030:	61 2f       	mov	r22, r17
    4032:	70 e0       	ldi	r23, 0x00	; 0
    4034:	80 e0       	ldi	r24, 0x00	; 0
    4036:	90 e0       	ldi	r25, 0x00	; 0
    4038:	20 e8       	ldi	r18, 0x80	; 128
    403a:	33 e3       	ldi	r19, 0x33	; 51
    403c:	41 ee       	ldi	r20, 0xE1	; 225
    403e:	51 e0       	ldi	r21, 0x01	; 1
    4040:	0e 94 02 3c 	call	0x7804	; 0x7804 <__mulsi3>
    4044:	5b 01       	movw	r10, r22
    4046:	6c 01       	movw	r12, r24
    4048:	22 eb       	ldi	r18, 0xB2	; 178
    404a:	37 e0       	ldi	r19, 0x07	; 7
  for (i = 0; i < tm.Year; i++) {
    404c:	e1 2f       	mov	r30, r17
    404e:	f0 e0       	ldi	r31, 0x00	; 0
    4050:	ee 54       	subi	r30, 0x4E	; 78
    4052:	f8 4f       	sbci	r31, 0xF8	; 248
    4054:	1d c0       	rjmp	.+58     	; 0x4090 <_Z8makeTimeR12tmElements_t+0x88>
    if (LEAP_YEAR(i)) {
    4056:	c9 01       	movw	r24, r18
    4058:	83 70       	andi	r24, 0x03	; 3
    405a:	90 70       	andi	r25, 0x00	; 0
    405c:	89 2b       	or	r24, r25
    405e:	b1 f4       	brne	.+44     	; 0x408c <_Z8makeTimeR12tmElements_t+0x84>
    4060:	c9 01       	movw	r24, r18
    4062:	64 e6       	ldi	r22, 0x64	; 100
    4064:	70 e0       	ldi	r23, 0x00	; 0
    4066:	0e 94 35 3c 	call	0x786a	; 0x786a <__divmodhi4>
    406a:	89 2b       	or	r24, r25
    406c:	39 f4       	brne	.+14     	; 0x407c <_Z8makeTimeR12tmElements_t+0x74>
    406e:	c9 01       	movw	r24, r18
    4070:	60 e9       	ldi	r22, 0x90	; 144
    4072:	71 e0       	ldi	r23, 0x01	; 1
    4074:	0e 94 35 3c 	call	0x786a	; 0x786a <__divmodhi4>
    4078:	89 2b       	or	r24, r25
    407a:	41 f4       	brne	.+16     	; 0x408c <_Z8makeTimeR12tmElements_t+0x84>
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    407c:	80 e8       	ldi	r24, 0x80	; 128
    407e:	91 e5       	ldi	r25, 0x51	; 81
    4080:	a1 e0       	ldi	r26, 0x01	; 1
    4082:	b0 e0       	ldi	r27, 0x00	; 0
    4084:	a8 0e       	add	r10, r24
    4086:	b9 1e       	adc	r11, r25
    4088:	ca 1e       	adc	r12, r26
    408a:	db 1e       	adc	r13, r27
    408c:	2f 5f       	subi	r18, 0xFF	; 255
    408e:	3f 4f       	sbci	r19, 0xFF	; 255
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    4090:	2e 17       	cp	r18, r30
    4092:	3f 07       	cpc	r19, r31
    4094:	01 f7       	brne	.-64     	; 0x4056 <_Z8makeTimeR12tmElements_t+0x4e>
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    4096:	d4 01       	movw	r26, r8
    4098:	15 96       	adiw	r26, 0x05	; 5
    409a:	8c 91       	ld	r24, X
    409c:	48 2e       	mov	r4, r24
    409e:	55 24       	eor	r5, r5
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    40a0:	c9 01       	movw	r24, r18
    40a2:	64 e6       	ldi	r22, 0x64	; 100
    40a4:	70 e0       	ldi	r23, 0x00	; 0
    40a6:	0e 94 35 3c 	call	0x786a	; 0x786a <__divmodhi4>
    40aa:	7c 01       	movw	r14, r24
    40ac:	c9 01       	movw	r24, r18
    40ae:	60 e9       	ldi	r22, 0x90	; 144
    40b0:	71 e0       	ldi	r23, 0x01	; 1
    40b2:	0e 94 35 3c 	call	0x786a	; 0x786a <__divmodhi4>
    40b6:	8c 01       	movw	r16, r24
    40b8:	c1 e0       	ldi	r28, 0x01	; 1
    40ba:	d0 e0       	ldi	r29, 0x00	; 0
    40bc:	93 e0       	ldi	r25, 0x03	; 3
    40be:	69 2e       	mov	r6, r25
    40c0:	71 2c       	mov	r7, r1
    40c2:	62 22       	and	r6, r18
    40c4:	73 22       	and	r7, r19
    40c6:	27 c0       	rjmp	.+78     	; 0x4116 <_Z8makeTimeR12tmElements_t+0x10e>
    40c8:	c2 30       	cpi	r28, 0x02	; 2
    40ca:	d1 05       	cpc	r29, r1
    40cc:	91 f4       	brne	.+36     	; 0x40f2 <_Z8makeTimeR12tmElements_t+0xea>
    40ce:	61 14       	cp	r6, r1
    40d0:	71 04       	cpc	r7, r1
    40d2:	79 f4       	brne	.+30     	; 0x40f2 <_Z8makeTimeR12tmElements_t+0xea>
    40d4:	e1 14       	cp	r14, r1
    40d6:	f1 04       	cpc	r15, r1
    40d8:	19 f4       	brne	.+6      	; 0x40e0 <_Z8makeTimeR12tmElements_t+0xd8>
    40da:	01 15       	cp	r16, r1
    40dc:	11 05       	cpc	r17, r1
    40de:	49 f4       	brne	.+18     	; 0x40f2 <_Z8makeTimeR12tmElements_t+0xea>
      seconds += SECS_PER_DAY * 29;
    40e0:	80 e8       	ldi	r24, 0x80	; 128
    40e2:	9b e3       	ldi	r25, 0x3B	; 59
    40e4:	a6 e2       	ldi	r26, 0x26	; 38
    40e6:	b0 e0       	ldi	r27, 0x00	; 0
    40e8:	a8 0e       	add	r10, r24
    40ea:	b9 1e       	adc	r11, r25
    40ec:	ca 1e       	adc	r12, r26
    40ee:	db 1e       	adc	r13, r27
    40f0:	11 c0       	rjmp	.+34     	; 0x4114 <_Z8makeTimeR12tmElements_t+0x10c>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    40f2:	fe 01       	movw	r30, r28
    40f4:	e1 5f       	subi	r30, 0xF1	; 241
    40f6:	fe 4f       	sbci	r31, 0xFE	; 254
    40f8:	60 81       	ld	r22, Z
    40fa:	70 e0       	ldi	r23, 0x00	; 0
    40fc:	80 e0       	ldi	r24, 0x00	; 0
    40fe:	90 e0       	ldi	r25, 0x00	; 0
    4100:	20 e8       	ldi	r18, 0x80	; 128
    4102:	31 e5       	ldi	r19, 0x51	; 81
    4104:	41 e0       	ldi	r20, 0x01	; 1
    4106:	50 e0       	ldi	r21, 0x00	; 0
    4108:	0e 94 02 3c 	call	0x7804	; 0x7804 <__mulsi3>
    410c:	a6 0e       	add	r10, r22
    410e:	b7 1e       	adc	r11, r23
    4110:	c8 1e       	adc	r12, r24
    4112:	d9 1e       	adc	r13, r25
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    4114:	21 96       	adiw	r28, 0x01	; 1
    4116:	c4 15       	cp	r28, r4
    4118:	d5 05       	cpc	r29, r5
    411a:	b4 f2       	brlt	.-84     	; 0x40c8 <_Z8makeTimeR12tmElements_t+0xc0>
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    }
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
    411c:	d4 01       	movw	r26, r8
    411e:	12 96       	adiw	r26, 0x02	; 2
    4120:	6c 91       	ld	r22, X
    4122:	70 e0       	ldi	r23, 0x00	; 0
    4124:	80 e0       	ldi	r24, 0x00	; 0
    4126:	90 e0       	ldi	r25, 0x00	; 0
    4128:	20 e1       	ldi	r18, 0x10	; 16
    412a:	3e e0       	ldi	r19, 0x0E	; 14
    412c:	40 e0       	ldi	r20, 0x00	; 0
    412e:	50 e0       	ldi	r21, 0x00	; 0
    4130:	0e 94 02 3c 	call	0x7804	; 0x7804 <__mulsi3>
    4134:	7b 01       	movw	r14, r22
    4136:	8c 01       	movw	r16, r24
    4138:	f4 01       	movw	r30, r8
    413a:	61 81       	ldd	r22, Z+1	; 0x01
    413c:	70 e0       	ldi	r23, 0x00	; 0
    413e:	80 e0       	ldi	r24, 0x00	; 0
    4140:	90 e0       	ldi	r25, 0x00	; 0
    4142:	2c e3       	ldi	r18, 0x3C	; 60
    4144:	30 e0       	ldi	r19, 0x00	; 0
    4146:	40 e0       	ldi	r20, 0x00	; 0
    4148:	50 e0       	ldi	r21, 0x00	; 0
    414a:	0e 94 02 3c 	call	0x7804	; 0x7804 <__mulsi3>
    414e:	e6 0e       	add	r14, r22
    4150:	f7 1e       	adc	r15, r23
    4152:	08 1f       	adc	r16, r24
    4154:	19 1f       	adc	r17, r25
  seconds+= tm.Hour * SECS_PER_HOUR;
    4156:	d4 01       	movw	r26, r8
    4158:	8c 91       	ld	r24, X
    415a:	e8 0e       	add	r14, r24
    415c:	f1 1c       	adc	r15, r1
    415e:	01 1d       	adc	r16, r1
    4160:	11 1d       	adc	r17, r1
  seconds+= tm.Minute * SECS_PER_MIN;
    4162:	14 96       	adiw	r26, 0x04	; 4
    4164:	6c 91       	ld	r22, X
    4166:	70 e0       	ldi	r23, 0x00	; 0
    4168:	61 50       	subi	r22, 0x01	; 1
    416a:	70 40       	sbci	r23, 0x00	; 0
    416c:	88 27       	eor	r24, r24
    416e:	77 fd       	sbrc	r23, 7
    4170:	80 95       	com	r24
    4172:	98 2f       	mov	r25, r24
    4174:	20 e8       	ldi	r18, 0x80	; 128
    4176:	31 e5       	ldi	r19, 0x51	; 81
    4178:	41 e0       	ldi	r20, 0x01	; 1
    417a:	50 e0       	ldi	r21, 0x00	; 0
    417c:	0e 94 02 3c 	call	0x7804	; 0x7804 <__mulsi3>
    4180:	e6 0e       	add	r14, r22
    4182:	f7 1e       	adc	r15, r23
    4184:	08 1f       	adc	r16, r24
    4186:	19 1f       	adc	r17, r25
    4188:	ea 0c       	add	r14, r10
    418a:	fb 1c       	adc	r15, r11
    418c:	0c 1d       	adc	r16, r12
    418e:	1d 1d       	adc	r17, r13
  seconds+= tm.Second;
  return (time_t)seconds; 
}
    4190:	b7 01       	movw	r22, r14
    4192:	c8 01       	movw	r24, r16
    4194:	df 91       	pop	r29
    4196:	cf 91       	pop	r28
    4198:	1f 91       	pop	r17
    419a:	0f 91       	pop	r16
    419c:	ff 90       	pop	r15
    419e:	ef 90       	pop	r14
    41a0:	df 90       	pop	r13
    41a2:	cf 90       	pop	r12
    41a4:	bf 90       	pop	r11
    41a6:	af 90       	pop	r10
    41a8:	9f 90       	pop	r9
    41aa:	8f 90       	pop	r8
    41ac:	7f 90       	pop	r7
    41ae:	6f 90       	pop	r6
    41b0:	5f 90       	pop	r5
    41b2:	4f 90       	pop	r4
    41b4:	08 95       	ret

000041b6 <_Z7setTimem>:
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    41b6:	60 93 0e 02 	sts	0x020E, r22
    41ba:	70 93 0f 02 	sts	0x020F, r23
    41be:	80 93 10 02 	sts	0x0210, r24
    41c2:	90 93 11 02 	sts	0x0211, r25
  nextSyncTime = (uint32_t)t + syncInterval;
    41c6:	20 91 06 01 	lds	r18, 0x0106
    41ca:	30 91 07 01 	lds	r19, 0x0107
    41ce:	40 91 08 01 	lds	r20, 0x0108
    41d2:	50 91 09 01 	lds	r21, 0x0109
    41d6:	26 0f       	add	r18, r22
    41d8:	37 1f       	adc	r19, r23
    41da:	48 1f       	adc	r20, r24
    41dc:	59 1f       	adc	r21, r25
    41de:	20 93 12 02 	sts	0x0212, r18
    41e2:	30 93 13 02 	sts	0x0213, r19
    41e6:	40 93 14 02 	sts	0x0214, r20
    41ea:	50 93 15 02 	sts	0x0215, r21
  Status = timeSet;
    41ee:	82 e0       	ldi	r24, 0x02	; 2
    41f0:	90 e0       	ldi	r25, 0x00	; 0
    41f2:	90 93 17 02 	sts	0x0217, r25
    41f6:	80 93 16 02 	sts	0x0216, r24
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    41fa:	0e 94 32 30 	call	0x6064	; 0x6064 <millis>
    41fe:	60 93 1f 02 	sts	0x021F, r22
    4202:	70 93 20 02 	sts	0x0220, r23
    4206:	80 93 21 02 	sts	0x0221, r24
    420a:	90 93 22 02 	sts	0x0222, r25
} 
    420e:	08 95       	ret

00004210 <_Z3nowv>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    4210:	ef 92       	push	r14
    4212:	ff 92       	push	r15
    4214:	0f 93       	push	r16
    4216:	1f 93       	push	r17
    4218:	1c c0       	rjmp	.+56     	; 0x4252 <_Z3nowv+0x42>
  while (millis() - prevMillis >= 1000){      
    sysTime++;
    421a:	2f 5f       	subi	r18, 0xFF	; 255
    421c:	3f 4f       	sbci	r19, 0xFF	; 255
    421e:	4f 4f       	sbci	r20, 0xFF	; 255
    4220:	5f 4f       	sbci	r21, 0xFF	; 255
    4222:	20 93 0e 02 	sts	0x020E, r18
    4226:	30 93 0f 02 	sts	0x020F, r19
    422a:	40 93 10 02 	sts	0x0210, r20
    422e:	50 93 11 02 	sts	0x0211, r21
    prevMillis += 1000;	
    4232:	88 ee       	ldi	r24, 0xE8	; 232
    4234:	93 e0       	ldi	r25, 0x03	; 3
    4236:	a0 e0       	ldi	r26, 0x00	; 0
    4238:	b0 e0       	ldi	r27, 0x00	; 0
    423a:	e8 0e       	add	r14, r24
    423c:	f9 1e       	adc	r15, r25
    423e:	0a 1f       	adc	r16, r26
    4240:	1b 1f       	adc	r17, r27
    4242:	e0 92 1f 02 	sts	0x021F, r14
    4246:	f0 92 20 02 	sts	0x0220, r15
    424a:	00 93 21 02 	sts	0x0221, r16
    424e:	10 93 22 02 	sts	0x0222, r17
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
  while (millis() - prevMillis >= 1000){      
    4252:	0e 94 32 30 	call	0x6064	; 0x6064 <millis>
    4256:	e0 90 1f 02 	lds	r14, 0x021F
    425a:	f0 90 20 02 	lds	r15, 0x0220
    425e:	00 91 21 02 	lds	r16, 0x0221
    4262:	10 91 22 02 	lds	r17, 0x0222
    4266:	6e 19       	sub	r22, r14
    4268:	7f 09       	sbc	r23, r15
    426a:	80 0b       	sbc	r24, r16
    426c:	91 0b       	sbc	r25, r17
    426e:	20 91 0e 02 	lds	r18, 0x020E
    4272:	30 91 0f 02 	lds	r19, 0x020F
    4276:	40 91 10 02 	lds	r20, 0x0210
    427a:	50 91 11 02 	lds	r21, 0x0211
    427e:	68 5e       	subi	r22, 0xE8	; 232
    4280:	73 40       	sbci	r23, 0x03	; 3
    4282:	80 40       	sbci	r24, 0x00	; 0
    4284:	90 40       	sbci	r25, 0x00	; 0
    4286:	48 f6       	brcc	.-110    	; 0x421a <_Z3nowv+0xa>
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    4288:	80 91 12 02 	lds	r24, 0x0212
    428c:	90 91 13 02 	lds	r25, 0x0213
    4290:	a0 91 14 02 	lds	r26, 0x0214
    4294:	b0 91 15 02 	lds	r27, 0x0215
    4298:	28 17       	cp	r18, r24
    429a:	39 07       	cpc	r19, r25
    429c:	4a 07       	cpc	r20, r26
    429e:	5b 07       	cpc	r21, r27
    42a0:	c8 f1       	brcs	.+114    	; 0x4314 <_Z3nowv+0x104>
    if (getTimePtr != 0) {
    42a2:	e0 91 0c 02 	lds	r30, 0x020C
    42a6:	f0 91 0d 02 	lds	r31, 0x020D
    42aa:	30 97       	sbiw	r30, 0x00	; 0
    42ac:	99 f1       	breq	.+102    	; 0x4314 <_Z3nowv+0x104>
      time_t t = getTimePtr();
    42ae:	09 95       	icall
      if (t != 0) {
    42b0:	61 15       	cp	r22, r1
    42b2:	71 05       	cpc	r23, r1
    42b4:	81 05       	cpc	r24, r1
    42b6:	91 05       	cpc	r25, r1
    42b8:	19 f0       	breq	.+6      	; 0x42c0 <_Z3nowv+0xb0>
        setTime(t);
    42ba:	0e 94 db 20 	call	0x41b6	; 0x41b6 <_Z7setTimem>
    42be:	2a c0       	rjmp	.+84     	; 0x4314 <_Z3nowv+0x104>
      } else {
        nextSyncTime = sysTime + syncInterval;
    42c0:	80 91 06 01 	lds	r24, 0x0106
    42c4:	90 91 07 01 	lds	r25, 0x0107
    42c8:	a0 91 08 01 	lds	r26, 0x0108
    42cc:	b0 91 09 01 	lds	r27, 0x0109
    42d0:	20 91 0e 02 	lds	r18, 0x020E
    42d4:	30 91 0f 02 	lds	r19, 0x020F
    42d8:	40 91 10 02 	lds	r20, 0x0210
    42dc:	50 91 11 02 	lds	r21, 0x0211
    42e0:	82 0f       	add	r24, r18
    42e2:	93 1f       	adc	r25, r19
    42e4:	a4 1f       	adc	r26, r20
    42e6:	b5 1f       	adc	r27, r21
    42e8:	80 93 12 02 	sts	0x0212, r24
    42ec:	90 93 13 02 	sts	0x0213, r25
    42f0:	a0 93 14 02 	sts	0x0214, r26
    42f4:	b0 93 15 02 	sts	0x0215, r27
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    42f8:	20 e0       	ldi	r18, 0x00	; 0
    42fa:	30 e0       	ldi	r19, 0x00	; 0
    42fc:	80 91 16 02 	lds	r24, 0x0216
    4300:	90 91 17 02 	lds	r25, 0x0217
    4304:	89 2b       	or	r24, r25
    4306:	11 f0       	breq	.+4      	; 0x430c <_Z3nowv+0xfc>
    4308:	21 e0       	ldi	r18, 0x01	; 1
    430a:	30 e0       	ldi	r19, 0x00	; 0
    430c:	30 93 17 02 	sts	0x0217, r19
    4310:	20 93 16 02 	sts	0x0216, r18
    4314:	60 91 0e 02 	lds	r22, 0x020E
    4318:	70 91 0f 02 	lds	r23, 0x020F
      }
    }
  }  
  return (time_t)sysTime;
}
    431c:	80 91 10 02 	lds	r24, 0x0210
    4320:	90 91 11 02 	lds	r25, 0x0211
    4324:	1f 91       	pop	r17
    4326:	0f 91       	pop	r16
    4328:	ff 90       	pop	r15
    432a:	ef 90       	pop	r14
    432c:	08 95       	ret

0000432e <_Z15setSyncProviderPFmvE>:
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    432e:	90 93 0d 02 	sts	0x020D, r25
    4332:	80 93 0c 02 	sts	0x020C, r24
  nextSyncTime = sysTime;
    4336:	80 91 0e 02 	lds	r24, 0x020E
    433a:	90 91 0f 02 	lds	r25, 0x020F
    433e:	a0 91 10 02 	lds	r26, 0x0210
    4342:	b0 91 11 02 	lds	r27, 0x0211
    4346:	80 93 12 02 	sts	0x0212, r24
    434a:	90 93 13 02 	sts	0x0213, r25
    434e:	a0 93 14 02 	sts	0x0214, r26
    4352:	b0 93 15 02 	sts	0x0215, r27
  now(); // this will sync the clock
    4356:	0e 94 08 21 	call	0x4210	; 0x4210 <_Z3nowv>
}
    435a:	08 95       	ret

0000435c <_Z10timeStatusv>:
  sysTime += adjustment;
}

// indicates if time has been set and recently synchronized
timeStatus_t timeStatus() {
  now(); // required to actually update the status
    435c:	0e 94 08 21 	call	0x4210	; 0x4210 <_Z3nowv>
  return Status;
}
    4360:	80 91 16 02 	lds	r24, 0x0216
    4364:	90 91 17 02 	lds	r25, 0x0217
    4368:	08 95       	ret

0000436a <_Z4yearv>:
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    436a:	0e 94 08 21 	call	0x4210	; 0x4210 <_Z3nowv>
    436e:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <_Z4yearm>
}
    4372:	08 95       	ret

00004374 <_Z4hourv>:
    cacheTime = t; 
  }
}

int hour() { // the hour now 
  return hour(now()); 
    4374:	0e 94 08 21 	call	0x4210	; 0x4210 <_Z3nowv>
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
    4378:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <_Z12refreshCachem>
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    437c:	80 91 1a 02 	lds	r24, 0x021A
    4380:	90 e0       	ldi	r25, 0x00	; 0
    4382:	08 95       	ret

00004384 <_ZN15TimeAlarmsClassC1Ev>:
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    4384:	cf 93       	push	r28
    4386:	df 93       	push	r29
    4388:	dc 01       	movw	r26, r24
    438a:	fc 01       	movw	r30, r24
    438c:	20 e0       	ldi	r18, 0x00	; 0
    438e:	30 e0       	ldi	r19, 0x00	; 0
//**************************************************************
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
    4390:	82 85       	ldd	r24, Z+10	; 0x0a
  Mode.alarmType = dtNotAllocated;
    4392:	80 7c       	andi	r24, 0xC0	; 192
    4394:	82 87       	std	Z+10, r24	; 0x0a
  value = nextTrigger = 0;
    4396:	16 82       	std	Z+6, r1	; 0x06
    4398:	17 82       	std	Z+7, r1	; 0x07
    439a:	10 86       	std	Z+8, r1	; 0x08
    439c:	11 86       	std	Z+9, r1	; 0x09
    439e:	12 82       	std	Z+2, r1	; 0x02
    43a0:	13 82       	std	Z+3, r1	; 0x03
    43a2:	14 82       	std	Z+4, r1	; 0x04
    43a4:	15 82       	std	Z+5, r1	; 0x05
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set 
    43a6:	11 82       	std	Z+1, r1	; 0x01
    43a8:	10 82       	st	Z, r1
    43aa:	25 5f       	subi	r18, 0xF5	; 245
    43ac:	3f 4f       	sbci	r19, 0xFF	; 255
    43ae:	3b 96       	adiw	r30, 0x0b	; 11
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    43b0:	22 34       	cpi	r18, 0x42	; 66
    43b2:	31 05       	cpc	r19, r1
    43b4:	69 f7       	brne	.-38     	; 0x4390 <_ZN15TimeAlarmsClassC1Ev+0xc>
{
  isServicing = false;
    43b6:	ae 5b       	subi	r26, 0xBE	; 190
    43b8:	bf 4f       	sbci	r27, 0xFF	; 255
    43ba:	1c 92       	st	X, r1
    43bc:	a2 54       	subi	r26, 0x42	; 66
    43be:	b0 40       	sbci	r27, 0x00	; 0
    43c0:	ed 01       	movw	r28, r26
    43c2:	20 e0       	ldi	r18, 0x00	; 0
    43c4:	30 e0       	ldi	r19, 0x00	; 0
     }
     
     // returns true if this id is allocated
     bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
     {
        return( ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated );
    43c6:	4b e0       	ldi	r20, 0x0B	; 11
    43c8:	50 e0       	ldi	r21, 0x00	; 0
    43ca:	24 9f       	mul	r18, r20
    43cc:	f0 01       	movw	r30, r0
    43ce:	25 9f       	mul	r18, r21
    43d0:	f0 0d       	add	r31, r0
    43d2:	34 9f       	mul	r19, r20
    43d4:	f0 0d       	add	r31, r0
    43d6:	11 24       	eor	r1, r1
    43d8:	ea 0f       	add	r30, r26
    43da:	fb 1f       	adc	r31, r27
    43dc:	92 85       	ldd	r25, Z+10	; 0x0a
    43de:	89 2f       	mov	r24, r25
    43e0:	8f 70       	andi	r24, 0x0F	; 15
    43e2:	61 f0       	breq	.+24     	; 0x43fc <_ZN15TimeAlarmsClassC1Ev+0x78>
    void TimeAlarmsClass::free(AlarmID_t ID)
    {
      if(isAllocated(ID))
      {
        Alarm[ID].Mode.isEnabled = false;
    	Alarm[ID].Mode.alarmType = dtNotAllocated;
    43e4:	90 7e       	andi	r25, 0xE0	; 224
    43e6:	92 87       	std	Z+10, r25	; 0x0a
        Alarm[ID].onTickHandler = 0;
    43e8:	19 82       	std	Y+1, r1	; 0x01
    43ea:	18 82       	st	Y, r1
    	Alarm[ID].value = 0;
    43ec:	1a 82       	std	Y+2, r1	; 0x02
    43ee:	1b 82       	std	Y+3, r1	; 0x03
    43f0:	1c 82       	std	Y+4, r1	; 0x04
    43f2:	1d 82       	std	Y+5, r1	; 0x05
    	Alarm[ID].nextTrigger = 0;   	
    43f4:	1e 82       	std	Y+6, r1	; 0x06
    43f6:	1f 82       	std	Y+7, r1	; 0x07
    43f8:	18 86       	std	Y+8, r1	; 0x08
    43fa:	19 86       	std	Y+9, r1	; 0x09
    43fc:	2f 5f       	subi	r18, 0xFF	; 255
    43fe:	3f 4f       	sbci	r19, 0xFF	; 255
    4400:	2b 96       	adiw	r28, 0x0b	; 11
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
  for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
    4402:	26 30       	cpi	r18, 0x06	; 6
    4404:	31 05       	cpc	r19, r1
    4406:	09 f7       	brne	.-62     	; 0x43ca <_ZN15TimeAlarmsClassC1Ev+0x46>
     free(id);   // ensure  all Alarms are cleared and available for allocation  
}
    4408:	df 91       	pop	r29
    440a:	cf 91       	pop	r28
    440c:	08 95       	ret

0000440e <_GLOBAL__I__ZN10AlarmClassC2Ev>:
      }
      return dtINVALID_ALARM_ID; // no IDs available or time is invalid
    }
    
    // make one instance for the user to use
    TimeAlarmsClass Alarm = TimeAlarmsClass() ;
    440e:	87 e2       	ldi	r24, 0x27	; 39
    4410:	92 e0       	ldi	r25, 0x02	; 2
    4412:	0e 94 c2 21 	call	0x4384	; 0x4384 <_ZN15TimeAlarmsClassC1Ev>
    4416:	08 95       	ret

00004418 <_ZN10AlarmClass17updateNextTriggerEv>:

//**************************************************************
//* Private Methods

 
void AlarmClass::updateNextTrigger()
    4418:	2f 92       	push	r2
    441a:	3f 92       	push	r3
    441c:	4f 92       	push	r4
    441e:	5f 92       	push	r5
    4420:	6f 92       	push	r6
    4422:	7f 92       	push	r7
    4424:	8f 92       	push	r8
    4426:	9f 92       	push	r9
    4428:	af 92       	push	r10
    442a:	bf 92       	push	r11
    442c:	cf 92       	push	r12
    442e:	df 92       	push	r13
    4430:	ef 92       	push	r14
    4432:	ff 92       	push	r15
    4434:	0f 93       	push	r16
    4436:	1f 93       	push	r17
    4438:	df 93       	push	r29
    443a:	cf 93       	push	r28
    443c:	00 d0       	rcall	.+0      	; 0x443e <_ZN10AlarmClass17updateNextTriggerEv+0x26>
    443e:	00 d0       	rcall	.+0      	; 0x4440 <_ZN10AlarmClass17updateNextTriggerEv+0x28>
    4440:	00 d0       	rcall	.+0      	; 0x4442 <_ZN10AlarmClass17updateNextTriggerEv+0x2a>
    4442:	cd b7       	in	r28, 0x3d	; 61
    4444:	de b7       	in	r29, 0x3e	; 62
    4446:	9e 83       	std	Y+6, r25	; 0x06
    4448:	8d 83       	std	Y+5, r24	; 0x05
{  
  if( (value != 0) && Mode.isEnabled )
    444a:	fc 01       	movw	r30, r24
    444c:	82 81       	ldd	r24, Z+2	; 0x02
    444e:	93 81       	ldd	r25, Z+3	; 0x03
    4450:	a4 81       	ldd	r26, Z+4	; 0x04
    4452:	b5 81       	ldd	r27, Z+5	; 0x05
    4454:	00 97       	sbiw	r24, 0x00	; 0
    4456:	a1 05       	cpc	r26, r1
    4458:	b1 05       	cpc	r27, r1
    445a:	09 f4       	brne	.+2      	; 0x445e <_ZN10AlarmClass17updateNextTriggerEv+0x46>
    445c:	5b c1       	rjmp	.+694    	; 0x4714 <_ZN10AlarmClass17updateNextTriggerEv+0x2fc>
    445e:	82 85       	ldd	r24, Z+10	; 0x0a
    4460:	84 ff       	sbrs	r24, 4
    4462:	58 c1       	rjmp	.+688    	; 0x4714 <_ZN10AlarmClass17updateNextTriggerEv+0x2fc>
  {
    time_t time = now();
    4464:	0e 94 08 21 	call	0x4210	; 0x4210 <_Z3nowv>
    4468:	69 83       	std	Y+1, r22	; 0x01
    446a:	7a 83       	std	Y+2, r23	; 0x02
    446c:	8b 83       	std	Y+3, r24	; 0x03
    446e:	9c 83       	std	Y+4, r25	; 0x04
    if( dtIsAlarm(Mode.alarmType) && nextTrigger <= time )   // update alarm if next trigger is not yet in the future
    4470:	ad 81       	ldd	r26, Y+5	; 0x05
    4472:	be 81       	ldd	r27, Y+6	; 0x06
    4474:	1a 96       	adiw	r26, 0x0a	; 10
    4476:	3c 91       	ld	r19, X
    4478:	1a 97       	sbiw	r26, 0x0a	; 10
    447a:	23 2f       	mov	r18, r19
    447c:	2f 70       	andi	r18, 0x0F	; 15
    447e:	82 2f       	mov	r24, r18
    4480:	82 5f       	subi	r24, 0xF2	; 242
    4482:	8f 70       	andi	r24, 0x0F	; 15
    4484:	83 30       	cpi	r24, 0x03	; 3
    4486:	08 f0       	brcs	.+2      	; 0x448a <_ZN10AlarmClass17updateNextTriggerEv+0x72>
    4488:	28 c1       	rjmp	.+592    	; 0x46da <_ZN10AlarmClass17updateNextTriggerEv+0x2c2>
    448a:	16 96       	adiw	r26, 0x06	; 6
    448c:	8d 91       	ld	r24, X+
    448e:	9d 91       	ld	r25, X+
    4490:	0d 90       	ld	r0, X+
    4492:	bc 91       	ld	r27, X
    4494:	a0 2d       	mov	r26, r0
    4496:	49 81       	ldd	r20, Y+1	; 0x01
    4498:	5a 81       	ldd	r21, Y+2	; 0x02
    449a:	6b 81       	ldd	r22, Y+3	; 0x03
    449c:	7c 81       	ldd	r23, Y+4	; 0x04
    449e:	48 17       	cp	r20, r24
    44a0:	59 07       	cpc	r21, r25
    44a2:	6a 07       	cpc	r22, r26
    44a4:	7b 07       	cpc	r23, r27
    44a6:	08 f4       	brcc	.+2      	; 0x44aa <_ZN10AlarmClass17updateNextTriggerEv+0x92>
    44a8:	18 c1       	rjmp	.+560    	; 0x46da <_ZN10AlarmClass17updateNextTriggerEv+0x2c2>
    {      
      if(Mode.alarmType == dtExplicitAlarm ) // is the value a specific date and time in the future
    44aa:	22 30       	cpi	r18, 0x02	; 2
    44ac:	59 f4       	brne	.+22     	; 0x44c4 <_ZN10AlarmClass17updateNextTriggerEv+0xac>
      {
        nextTrigger = value;  // yes, trigger on this value   
    44ae:	ed 81       	ldd	r30, Y+5	; 0x05
    44b0:	fe 81       	ldd	r31, Y+6	; 0x06
    44b2:	82 81       	ldd	r24, Z+2	; 0x02
    44b4:	93 81       	ldd	r25, Z+3	; 0x03
    44b6:	a4 81       	ldd	r26, Z+4	; 0x04
    44b8:	b5 81       	ldd	r27, Z+5	; 0x05
    44ba:	86 83       	std	Z+6, r24	; 0x06
    44bc:	97 83       	std	Z+7, r25	; 0x07
    44be:	a0 87       	std	Z+8, r26	; 0x08
    44c0:	b1 87       	std	Z+9, r27	; 0x09
    44c2:	0b c1       	rjmp	.+534    	; 0x46da <_ZN10AlarmClass17updateNextTriggerEv+0x2c2>
      }
      else if(Mode.alarmType == dtDailyAlarm)  //if this is a daily alarm
    44c4:	23 30       	cpi	r18, 0x03	; 3
    44c6:	09 f0       	breq	.+2      	; 0x44ca <_ZN10AlarmClass17updateNextTriggerEv+0xb2>
    44c8:	61 c0       	rjmp	.+194    	; 0x458c <_ZN10AlarmClass17updateNextTriggerEv+0x174>
      {
        if( value + previousMidnight(now()) <= time)
    44ca:	ad 81       	ldd	r26, Y+5	; 0x05
    44cc:	be 81       	ldd	r27, Y+6	; 0x06
    44ce:	12 96       	adiw	r26, 0x02	; 2
    44d0:	ed 90       	ld	r14, X+
    44d2:	fd 90       	ld	r15, X+
    44d4:	0d 91       	ld	r16, X+
    44d6:	1c 91       	ld	r17, X
    44d8:	15 97       	sbiw	r26, 0x05	; 5
    44da:	0e 94 08 21 	call	0x4210	; 0x4210 <_Z3nowv>
    44de:	20 e8       	ldi	r18, 0x80	; 128
    44e0:	31 e5       	ldi	r19, 0x51	; 81
    44e2:	41 e0       	ldi	r20, 0x01	; 1
    44e4:	50 e0       	ldi	r21, 0x00	; 0
    44e6:	0e 94 48 3c 	call	0x7890	; 0x7890 <__udivmodsi4>
    44ea:	ca 01       	movw	r24, r20
    44ec:	b9 01       	movw	r22, r18
    44ee:	20 e8       	ldi	r18, 0x80	; 128
    44f0:	31 e5       	ldi	r19, 0x51	; 81
    44f2:	41 e0       	ldi	r20, 0x01	; 1
    44f4:	50 e0       	ldi	r21, 0x00	; 0
    44f6:	0e 94 02 3c 	call	0x7804	; 0x7804 <__mulsi3>
    44fa:	e6 0e       	add	r14, r22
    44fc:	f7 1e       	adc	r15, r23
    44fe:	08 1f       	adc	r16, r24
    4500:	19 1f       	adc	r17, r25
    4502:	ed 81       	ldd	r30, Y+5	; 0x05
    4504:	fe 81       	ldd	r31, Y+6	; 0x06
    4506:	a2 80       	ldd	r10, Z+2	; 0x02
    4508:	b3 80       	ldd	r11, Z+3	; 0x03
    450a:	c4 80       	ldd	r12, Z+4	; 0x04
    450c:	d5 80       	ldd	r13, Z+5	; 0x05
    450e:	29 81       	ldd	r18, Y+1	; 0x01
    4510:	3a 81       	ldd	r19, Y+2	; 0x02
    4512:	4b 81       	ldd	r20, Y+3	; 0x03
    4514:	5c 81       	ldd	r21, Y+4	; 0x04
    4516:	2e 15       	cp	r18, r14
    4518:	3f 05       	cpc	r19, r15
    451a:	40 07       	cpc	r20, r16
    451c:	51 07       	cpc	r21, r17
    451e:	c8 f0       	brcs	.+50     	; 0x4552 <_ZN10AlarmClass17updateNextTriggerEv+0x13a>
        {
          nextTrigger = value + nextMidnight(time); // if time has passed then set for tomorrow
    4520:	ca 01       	movw	r24, r20
    4522:	b9 01       	movw	r22, r18
    4524:	20 e8       	ldi	r18, 0x80	; 128
    4526:	31 e5       	ldi	r19, 0x51	; 81
    4528:	41 e0       	ldi	r20, 0x01	; 1
    452a:	50 e0       	ldi	r21, 0x00	; 0
    452c:	0e 94 48 3c 	call	0x7890	; 0x7890 <__udivmodsi4>
    4530:	2f 5f       	subi	r18, 0xFF	; 255
    4532:	3f 4f       	sbci	r19, 0xFF	; 255
    4534:	4f 4f       	sbci	r20, 0xFF	; 255
    4536:	5f 4f       	sbci	r21, 0xFF	; 255
    4538:	ca 01       	movw	r24, r20
    453a:	b9 01       	movw	r22, r18
    453c:	20 e8       	ldi	r18, 0x80	; 128
    453e:	31 e5       	ldi	r19, 0x51	; 81
    4540:	41 e0       	ldi	r20, 0x01	; 1
    4542:	50 e0       	ldi	r21, 0x00	; 0
    4544:	0e 94 02 3c 	call	0x7804	; 0x7804 <__mulsi3>
    4548:	a6 0e       	add	r10, r22
    454a:	b7 1e       	adc	r11, r23
    454c:	c8 1e       	adc	r12, r24
    454e:	d9 1e       	adc	r13, r25
    4550:	ac c0       	rjmp	.+344    	; 0x46aa <_ZN10AlarmClass17updateNextTriggerEv+0x292>
        }
        else
        {
          nextTrigger = value + previousMidnight(time);  // set the date to today and add the time given in value   
    4552:	69 81       	ldd	r22, Y+1	; 0x01
    4554:	7a 81       	ldd	r23, Y+2	; 0x02
    4556:	8b 81       	ldd	r24, Y+3	; 0x03
    4558:	9c 81       	ldd	r25, Y+4	; 0x04
    455a:	20 e8       	ldi	r18, 0x80	; 128
    455c:	31 e5       	ldi	r19, 0x51	; 81
    455e:	41 e0       	ldi	r20, 0x01	; 1
    4560:	50 e0       	ldi	r21, 0x00	; 0
    4562:	0e 94 48 3c 	call	0x7890	; 0x7890 <__udivmodsi4>
    4566:	ca 01       	movw	r24, r20
    4568:	b9 01       	movw	r22, r18
    456a:	20 e8       	ldi	r18, 0x80	; 128
    456c:	31 e5       	ldi	r19, 0x51	; 81
    456e:	41 e0       	ldi	r20, 0x01	; 1
    4570:	50 e0       	ldi	r21, 0x00	; 0
    4572:	0e 94 02 3c 	call	0x7804	; 0x7804 <__mulsi3>
    4576:	a6 0e       	add	r10, r22
    4578:	b7 1e       	adc	r11, r23
    457a:	c8 1e       	adc	r12, r24
    457c:	d9 1e       	adc	r13, r25
    457e:	ed 81       	ldd	r30, Y+5	; 0x05
    4580:	fe 81       	ldd	r31, Y+6	; 0x06
    4582:	a6 82       	std	Z+6, r10	; 0x06
    4584:	b7 82       	std	Z+7, r11	; 0x07
    4586:	c0 86       	std	Z+8, r12	; 0x08
    4588:	d1 86       	std	Z+9, r13	; 0x09
    458a:	a7 c0       	rjmp	.+334    	; 0x46da <_ZN10AlarmClass17updateNextTriggerEv+0x2c2>
        }
      }
      else if(Mode.alarmType == dtWeeklyAlarm)  // if this is a weekly alarm
    458c:	24 30       	cpi	r18, 0x04	; 4
    458e:	09 f0       	breq	.+2      	; 0x4592 <_ZN10AlarmClass17updateNextTriggerEv+0x17a>
    4590:	a0 c0       	rjmp	.+320    	; 0x46d2 <_ZN10AlarmClass17updateNextTriggerEv+0x2ba>
      {
        if( (value + previousSunday(now())) <= time)
    4592:	ad 81       	ldd	r26, Y+5	; 0x05
    4594:	be 81       	ldd	r27, Y+6	; 0x06
    4596:	12 96       	adiw	r26, 0x02	; 2
    4598:	6d 90       	ld	r6, X+
    459a:	7d 90       	ld	r7, X+
    459c:	8d 90       	ld	r8, X+
    459e:	9c 90       	ld	r9, X
    45a0:	15 97       	sbiw	r26, 0x05	; 5
    45a2:	0e 94 08 21 	call	0x4210	; 0x4210 <_Z3nowv>
    45a6:	7b 01       	movw	r14, r22
    45a8:	8c 01       	movw	r16, r24
    45aa:	0e 94 08 21 	call	0x4210	; 0x4210 <_Z3nowv>
    45ae:	5b 01       	movw	r10, r22
    45b0:	6c 01       	movw	r12, r24
    45b2:	0e 94 08 21 	call	0x4210	; 0x4210 <_Z3nowv>
    45b6:	1b 01       	movw	r2, r22
    45b8:	2c 01       	movw	r4, r24
    45ba:	e6 0c       	add	r14, r6
    45bc:	f7 1c       	adc	r15, r7
    45be:	08 1d       	adc	r16, r8
    45c0:	19 1d       	adc	r17, r9
    45c2:	c6 01       	movw	r24, r12
    45c4:	b5 01       	movw	r22, r10
    45c6:	20 e8       	ldi	r18, 0x80	; 128
    45c8:	31 e5       	ldi	r19, 0x51	; 81
    45ca:	41 e0       	ldi	r20, 0x01	; 1
    45cc:	50 e0       	ldi	r21, 0x00	; 0
    45ce:	0e 94 48 3c 	call	0x7890	; 0x7890 <__udivmodsi4>
    45d2:	e6 1a       	sub	r14, r22
    45d4:	f7 0a       	sbc	r15, r23
    45d6:	08 0b       	sbc	r16, r24
    45d8:	19 0b       	sbc	r17, r25
    45da:	c2 01       	movw	r24, r4
    45dc:	b1 01       	movw	r22, r2
    45de:	20 e8       	ldi	r18, 0x80	; 128
    45e0:	31 e5       	ldi	r19, 0x51	; 81
    45e2:	41 e0       	ldi	r20, 0x01	; 1
    45e4:	50 e0       	ldi	r21, 0x00	; 0
    45e6:	0e 94 48 3c 	call	0x7890	; 0x7890 <__udivmodsi4>
    45ea:	2c 5f       	subi	r18, 0xFC	; 252
    45ec:	3f 4f       	sbci	r19, 0xFF	; 255
    45ee:	4f 4f       	sbci	r20, 0xFF	; 255
    45f0:	5f 4f       	sbci	r21, 0xFF	; 255
    45f2:	ca 01       	movw	r24, r20
    45f4:	b9 01       	movw	r22, r18
    45f6:	27 e0       	ldi	r18, 0x07	; 7
    45f8:	30 e0       	ldi	r19, 0x00	; 0
    45fa:	40 e0       	ldi	r20, 0x00	; 0
    45fc:	50 e0       	ldi	r21, 0x00	; 0
    45fe:	0e 94 48 3c 	call	0x7890	; 0x7890 <__udivmodsi4>
    4602:	20 e8       	ldi	r18, 0x80	; 128
    4604:	31 e5       	ldi	r19, 0x51	; 81
    4606:	41 e0       	ldi	r20, 0x01	; 1
    4608:	50 e0       	ldi	r21, 0x00	; 0
    460a:	0e 94 02 3c 	call	0x7804	; 0x7804 <__mulsi3>
    460e:	e6 1a       	sub	r14, r22
    4610:	f7 0a       	sbc	r15, r23
    4612:	08 0b       	sbc	r16, r24
    4614:	19 0b       	sbc	r17, r25
    4616:	ed 81       	ldd	r30, Y+5	; 0x05
    4618:	fe 81       	ldd	r31, Y+6	; 0x06
    461a:	a2 80       	ldd	r10, Z+2	; 0x02
    461c:	b3 80       	ldd	r11, Z+3	; 0x03
    461e:	c4 80       	ldd	r12, Z+4	; 0x04
    4620:	d5 80       	ldd	r13, Z+5	; 0x05
    4622:	29 81       	ldd	r18, Y+1	; 0x01
    4624:	3a 81       	ldd	r19, Y+2	; 0x02
    4626:	4b 81       	ldd	r20, Y+3	; 0x03
    4628:	5c 81       	ldd	r21, Y+4	; 0x04
    462a:	2e 15       	cp	r18, r14
    462c:	3f 05       	cpc	r19, r15
    462e:	40 07       	cpc	r20, r16
    4630:	51 07       	cpc	r21, r17
    4632:	08 f4       	brcc	.+2      	; 0x4636 <_ZN10AlarmClass17updateNextTriggerEv+0x21e>
    4634:	43 c0       	rjmp	.+134    	; 0x46bc <_ZN10AlarmClass17updateNextTriggerEv+0x2a4>
        {
          nextTrigger = value + nextSunday(time); // if day has passed then set for the next week.
    4636:	40 e8       	ldi	r20, 0x80	; 128
    4638:	5a e3       	ldi	r21, 0x3A	; 58
    463a:	69 e0       	ldi	r22, 0x09	; 9
    463c:	70 e0       	ldi	r23, 0x00	; 0
    463e:	a4 0e       	add	r10, r20
    4640:	b5 1e       	adc	r11, r21
    4642:	c6 1e       	adc	r12, r22
    4644:	d7 1e       	adc	r13, r23
    4646:	69 81       	ldd	r22, Y+1	; 0x01
    4648:	7a 81       	ldd	r23, Y+2	; 0x02
    464a:	8b 81       	ldd	r24, Y+3	; 0x03
    464c:	9c 81       	ldd	r25, Y+4	; 0x04
    464e:	a6 0e       	add	r10, r22
    4650:	b7 1e       	adc	r11, r23
    4652:	c8 1e       	adc	r12, r24
    4654:	d9 1e       	adc	r13, r25
    4656:	20 e8       	ldi	r18, 0x80	; 128
    4658:	31 e5       	ldi	r19, 0x51	; 81
    465a:	41 e0       	ldi	r20, 0x01	; 1
    465c:	50 e0       	ldi	r21, 0x00	; 0
    465e:	0e 94 48 3c 	call	0x7890	; 0x7890 <__udivmodsi4>
    4662:	a6 1a       	sub	r10, r22
    4664:	b7 0a       	sbc	r11, r23
    4666:	c8 0a       	sbc	r12, r24
    4668:	d9 0a       	sbc	r13, r25
    466a:	69 81       	ldd	r22, Y+1	; 0x01
    466c:	7a 81       	ldd	r23, Y+2	; 0x02
    466e:	8b 81       	ldd	r24, Y+3	; 0x03
    4670:	9c 81       	ldd	r25, Y+4	; 0x04
    4672:	20 e8       	ldi	r18, 0x80	; 128
    4674:	31 e5       	ldi	r19, 0x51	; 81
    4676:	41 e0       	ldi	r20, 0x01	; 1
    4678:	50 e0       	ldi	r21, 0x00	; 0
    467a:	0e 94 48 3c 	call	0x7890	; 0x7890 <__udivmodsi4>
    467e:	2c 5f       	subi	r18, 0xFC	; 252
    4680:	3f 4f       	sbci	r19, 0xFF	; 255
    4682:	4f 4f       	sbci	r20, 0xFF	; 255
    4684:	5f 4f       	sbci	r21, 0xFF	; 255
    4686:	ca 01       	movw	r24, r20
    4688:	b9 01       	movw	r22, r18
    468a:	27 e0       	ldi	r18, 0x07	; 7
    468c:	30 e0       	ldi	r19, 0x00	; 0
    468e:	40 e0       	ldi	r20, 0x00	; 0
    4690:	50 e0       	ldi	r21, 0x00	; 0
    4692:	0e 94 48 3c 	call	0x7890	; 0x7890 <__udivmodsi4>
    4696:	20 e8       	ldi	r18, 0x80	; 128
    4698:	31 e5       	ldi	r19, 0x51	; 81
    469a:	41 e0       	ldi	r20, 0x01	; 1
    469c:	50 e0       	ldi	r21, 0x00	; 0
    469e:	0e 94 02 3c 	call	0x7804	; 0x7804 <__mulsi3>
    46a2:	a6 1a       	sub	r10, r22
    46a4:	b7 0a       	sbc	r11, r23
    46a6:	c8 0a       	sbc	r12, r24
    46a8:	d9 0a       	sbc	r13, r25
    46aa:	ad 81       	ldd	r26, Y+5	; 0x05
    46ac:	be 81       	ldd	r27, Y+6	; 0x06
    46ae:	16 96       	adiw	r26, 0x06	; 6
    46b0:	ad 92       	st	X+, r10
    46b2:	bd 92       	st	X+, r11
    46b4:	cd 92       	st	X+, r12
    46b6:	dc 92       	st	X, r13
    46b8:	19 97       	sbiw	r26, 0x09	; 9
    46ba:	0f c0       	rjmp	.+30     	; 0x46da <_ZN10AlarmClass17updateNextTriggerEv+0x2c2>
        }
        else
        {
          nextTrigger = value + previousSunday(time);  // set the date to this week today and add the time given in value 
    46bc:	29 81       	ldd	r18, Y+1	; 0x01
    46be:	3a 81       	ldd	r19, Y+2	; 0x02
    46c0:	4b 81       	ldd	r20, Y+3	; 0x03
    46c2:	5c 81       	ldd	r21, Y+4	; 0x04
    46c4:	a2 0e       	add	r10, r18
    46c6:	b3 1e       	adc	r11, r19
    46c8:	c4 1e       	adc	r12, r20
    46ca:	d5 1e       	adc	r13, r21
    46cc:	ca 01       	movw	r24, r20
    46ce:	b9 01       	movw	r22, r18
    46d0:	c2 cf       	rjmp	.-124    	; 0x4656 <_ZN10AlarmClass17updateNextTriggerEv+0x23e>
        } 
      }
      else  // its not a recognized alarm type - this should not happen 
      {
        Mode.isEnabled = 0;  // Disable the alarm
    46d2:	3f 7e       	andi	r19, 0xEF	; 239
    46d4:	ed 81       	ldd	r30, Y+5	; 0x05
    46d6:	fe 81       	ldd	r31, Y+6	; 0x06
    46d8:	32 87       	std	Z+10, r19	; 0x0a
      }	  
    }
    if( Mode.alarmType == dtTimer)
    46da:	ad 81       	ldd	r26, Y+5	; 0x05
    46dc:	be 81       	ldd	r27, Y+6	; 0x06
    46de:	1a 96       	adiw	r26, 0x0a	; 10
    46e0:	8c 91       	ld	r24, X
    46e2:	1a 97       	sbiw	r26, 0x0a	; 10
    46e4:	8f 70       	andi	r24, 0x0F	; 15
    46e6:	81 30       	cpi	r24, 0x01	; 1
    46e8:	e9 f4       	brne	.+58     	; 0x4724 <_ZN10AlarmClass17updateNextTriggerEv+0x30c>
    {
      // its a timer
      nextTrigger = time + value;  // add the value to previous time (this ensures delay always at least Value seconds)
    46ea:	12 96       	adiw	r26, 0x02	; 2
    46ec:	8d 91       	ld	r24, X+
    46ee:	9d 91       	ld	r25, X+
    46f0:	0d 90       	ld	r0, X+
    46f2:	bc 91       	ld	r27, X
    46f4:	a0 2d       	mov	r26, r0
    46f6:	29 81       	ldd	r18, Y+1	; 0x01
    46f8:	3a 81       	ldd	r19, Y+2	; 0x02
    46fa:	4b 81       	ldd	r20, Y+3	; 0x03
    46fc:	5c 81       	ldd	r21, Y+4	; 0x04
    46fe:	82 0f       	add	r24, r18
    4700:	93 1f       	adc	r25, r19
    4702:	a4 1f       	adc	r26, r20
    4704:	b5 1f       	adc	r27, r21
    4706:	ed 81       	ldd	r30, Y+5	; 0x05
    4708:	fe 81       	ldd	r31, Y+6	; 0x06
    470a:	86 83       	std	Z+6, r24	; 0x06
    470c:	97 83       	std	Z+7, r25	; 0x07
    470e:	a0 87       	std	Z+8, r26	; 0x08
    4710:	b1 87       	std	Z+9, r27	; 0x09
    4712:	08 c0       	rjmp	.+16     	; 0x4724 <_ZN10AlarmClass17updateNextTriggerEv+0x30c>
    }
  }
  else
  {
    Mode.isEnabled = 0;  // Disable if the value is 0
    4714:	ad 81       	ldd	r26, Y+5	; 0x05
    4716:	be 81       	ldd	r27, Y+6	; 0x06
    4718:	1a 96       	adiw	r26, 0x0a	; 10
    471a:	8c 91       	ld	r24, X
    471c:	1a 97       	sbiw	r26, 0x0a	; 10
    471e:	8f 7e       	andi	r24, 0xEF	; 239
    4720:	1a 96       	adiw	r26, 0x0a	; 10
    4722:	8c 93       	st	X, r24
  }
}
    4724:	26 96       	adiw	r28, 0x06	; 6
    4726:	0f b6       	in	r0, 0x3f	; 63
    4728:	f8 94       	cli
    472a:	de bf       	out	0x3e, r29	; 62
    472c:	0f be       	out	0x3f, r0	; 63
    472e:	cd bf       	out	0x3d, r28	; 61
    4730:	cf 91       	pop	r28
    4732:	df 91       	pop	r29
    4734:	1f 91       	pop	r17
    4736:	0f 91       	pop	r16
    4738:	ff 90       	pop	r15
    473a:	ef 90       	pop	r14
    473c:	df 90       	pop	r13
    473e:	cf 90       	pop	r12
    4740:	bf 90       	pop	r11
    4742:	af 90       	pop	r10
    4744:	9f 90       	pop	r9
    4746:	8f 90       	pop	r8
    4748:	7f 90       	pop	r7
    474a:	6f 90       	pop	r6
    474c:	5f 90       	pop	r5
    474e:	4f 90       	pop	r4
    4750:	3f 90       	pop	r3
    4752:	2f 90       	pop	r2
    4754:	08 95       	ret

00004756 <_ZN15TimeAlarmsClass6enableEh>:
    
    AlarmID_t TimeAlarmsClass::timerRepeat(const int H,  const int M,  const int S, OnTick_t onTickHandler){ // trigger after the given number of seconds continuously
         return create( AlarmHMS(H,M,S), onTickHandler, IS_REPEAT, dtTimer);
    }
    
    void TimeAlarmsClass::enable(AlarmID_t ID)
    4756:	ac 01       	movw	r20, r24
     }
     
     // returns true if this id is allocated
     bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
     {
        return( ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated );
    4758:	66 30       	cpi	r22, 0x06	; 6
    475a:	98 f5       	brcc	.+102    	; 0x47c2 <_ZN15TimeAlarmsClass6enableEh+0x6c>
    475c:	70 e0       	ldi	r23, 0x00	; 0
    475e:	8b e0       	ldi	r24, 0x0B	; 11
    4760:	90 e0       	ldi	r25, 0x00	; 0
    4762:	68 9f       	mul	r22, r24
    4764:	f0 01       	movw	r30, r0
    4766:	69 9f       	mul	r22, r25
    4768:	f0 0d       	add	r31, r0
    476a:	78 9f       	mul	r23, r24
    476c:	f0 0d       	add	r31, r0
    476e:	11 24       	eor	r1, r1
    4770:	e4 0f       	add	r30, r20
    4772:	f5 1f       	adc	r31, r21
    4774:	82 85       	ldd	r24, Z+10	; 0x0a
    4776:	8f 70       	andi	r24, 0x0F	; 15
    4778:	21 f1       	breq	.+72     	; 0x47c2 <_ZN15TimeAlarmsClass6enableEh+0x6c>
    }
    
    void TimeAlarmsClass::enable(AlarmID_t ID)
    {
      if(isAllocated(ID)) {
        Alarm[ID].Mode.isEnabled = (Alarm[ID].value != 0) && (Alarm[ID].onTickHandler != 0) ;  // only enable if value is non zero and a tick handler has been set
    477a:	82 81       	ldd	r24, Z+2	; 0x02
    477c:	93 81       	ldd	r25, Z+3	; 0x03
    477e:	a4 81       	ldd	r26, Z+4	; 0x04
    4780:	b5 81       	ldd	r27, Z+5	; 0x05
    4782:	00 97       	sbiw	r24, 0x00	; 0
    4784:	a1 05       	cpc	r26, r1
    4786:	b1 05       	cpc	r27, r1
    4788:	11 f4       	brne	.+4      	; 0x478e <_ZN15TimeAlarmsClass6enableEh+0x38>
    478a:	20 e0       	ldi	r18, 0x00	; 0
    478c:	06 c0       	rjmp	.+12     	; 0x479a <_ZN15TimeAlarmsClass6enableEh+0x44>
    478e:	20 e0       	ldi	r18, 0x00	; 0
    4790:	80 81       	ld	r24, Z
    4792:	91 81       	ldd	r25, Z+1	; 0x01
    4794:	89 2b       	or	r24, r25
    4796:	09 f0       	breq	.+2      	; 0x479a <_ZN15TimeAlarmsClass6enableEh+0x44>
    4798:	21 e0       	ldi	r18, 0x01	; 1
    479a:	8b e0       	ldi	r24, 0x0B	; 11
    479c:	90 e0       	ldi	r25, 0x00	; 0
    479e:	68 9f       	mul	r22, r24
    47a0:	f0 01       	movw	r30, r0
    47a2:	69 9f       	mul	r22, r25
    47a4:	f0 0d       	add	r31, r0
    47a6:	78 9f       	mul	r23, r24
    47a8:	f0 0d       	add	r31, r0
    47aa:	11 24       	eor	r1, r1
    47ac:	e4 0f       	add	r30, r20
    47ae:	f5 1f       	adc	r31, r21
    47b0:	22 95       	swap	r18
    47b2:	20 7f       	andi	r18, 0xF0	; 240
    47b4:	82 85       	ldd	r24, Z+10	; 0x0a
    47b6:	8f 7e       	andi	r24, 0xEF	; 239
    47b8:	82 2b       	or	r24, r18
    47ba:	82 87       	std	Z+10, r24	; 0x0a
        Alarm[ID].updateNextTrigger(); // trigger is updated whenever  this is called, even if already enabled	 
    47bc:	cf 01       	movw	r24, r30
    47be:	0e 94 0c 22 	call	0x4418	; 0x4418 <_ZN10AlarmClass17updateNextTriggerEv>
    47c2:	08 95       	ret

000047c4 <_ZN15TimeAlarmsClass13serviceAlarmsEv>:
    }
    
    //***********************************************************
    //* Private Methods
    
    void TimeAlarmsClass::serviceAlarms()
    47c4:	cf 92       	push	r12
    47c6:	df 92       	push	r13
    47c8:	ef 92       	push	r14
    47ca:	ff 92       	push	r15
    47cc:	0f 93       	push	r16
    47ce:	1f 93       	push	r17
    47d0:	cf 93       	push	r28
    47d2:	df 93       	push	r29
    47d4:	ec 01       	movw	r28, r24
    {
      if(! isServicing)
    47d6:	fc 01       	movw	r30, r24
    47d8:	ee 5b       	subi	r30, 0xBE	; 190
    47da:	ff 4f       	sbci	r31, 0xFF	; 255
    47dc:	80 81       	ld	r24, Z
    47de:	88 23       	and	r24, r24
    47e0:	09 f0       	breq	.+2      	; 0x47e4 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0x20>
    47e2:	5b c0       	rjmp	.+182    	; 0x489a <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xd6>
      {
        isServicing = true;
    47e4:	81 e0       	ldi	r24, 0x01	; 1
    47e6:	80 83       	st	Z, r24
        for( servicedAlarmId = 0; servicedAlarmId < dtNBR_ALARMS; servicedAlarmId++)
    47e8:	fe 01       	movw	r30, r28
    47ea:	ed 5b       	subi	r30, 0xBD	; 189
    47ec:	ff 4f       	sbci	r31, 0xFF	; 255
    47ee:	10 82       	st	Z, r1
    47f0:	8f 01       	movw	r16, r30
        {
          if( Alarm[servicedAlarmId].Mode.isEnabled && (now() >= Alarm[servicedAlarmId].nextTrigger)  )
    47f2:	9b e0       	ldi	r25, 0x0B	; 11
    47f4:	c9 2e       	mov	r12, r25
    47f6:	d1 2c       	mov	r13, r1
    47f8:	48 c0       	rjmp	.+144    	; 0x488a <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xc6>
    47fa:	90 e0       	ldi	r25, 0x00	; 0
    47fc:	8c 9d       	mul	r24, r12
    47fe:	f0 01       	movw	r30, r0
    4800:	8d 9d       	mul	r24, r13
    4802:	f0 0d       	add	r31, r0
    4804:	9c 9d       	mul	r25, r12
    4806:	f0 0d       	add	r31, r0
    4808:	11 24       	eor	r1, r1
    480a:	ec 0f       	add	r30, r28
    480c:	fd 1f       	adc	r31, r29
    480e:	82 85       	ldd	r24, Z+10	; 0x0a
    4810:	84 ff       	sbrs	r24, 4
    4812:	37 c0       	rjmp	.+110    	; 0x4882 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xbe>
    4814:	0e 94 08 21 	call	0x4210	; 0x4210 <_Z3nowv>
    4818:	f8 01       	movw	r30, r16
    481a:	a0 81       	ld	r26, Z
    481c:	2a 2f       	mov	r18, r26
    481e:	30 e0       	ldi	r19, 0x00	; 0
    4820:	2c 9d       	mul	r18, r12
    4822:	f0 01       	movw	r30, r0
    4824:	2d 9d       	mul	r18, r13
    4826:	f0 0d       	add	r31, r0
    4828:	3c 9d       	mul	r19, r12
    482a:	f0 0d       	add	r31, r0
    482c:	11 24       	eor	r1, r1
    482e:	ec 0f       	add	r30, r28
    4830:	fd 1f       	adc	r31, r29
    4832:	26 81       	ldd	r18, Z+6	; 0x06
    4834:	37 81       	ldd	r19, Z+7	; 0x07
    4836:	40 85       	ldd	r20, Z+8	; 0x08
    4838:	51 85       	ldd	r21, Z+9	; 0x09
    483a:	62 17       	cp	r22, r18
    483c:	73 07       	cpc	r23, r19
    483e:	84 07       	cpc	r24, r20
    4840:	95 07       	cpc	r25, r21
    4842:	f8 f0       	brcs	.+62     	; 0x4882 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xbe>
          {
            OnTick_t TickHandler = Alarm[servicedAlarmId].onTickHandler;
    4844:	e0 80       	ld	r14, Z
    4846:	f1 80       	ldd	r15, Z+1	; 0x01
            if(Alarm[servicedAlarmId].Mode.isOneShot)
    4848:	92 85       	ldd	r25, Z+10	; 0x0a
    484a:	95 ff       	sbrs	r25, 5
    484c:	12 c0       	rjmp	.+36     	; 0x4872 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xae>
     }
     
     // returns true if this id is allocated
     bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
     {
        return( ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated );
    484e:	a6 30       	cpi	r26, 0x06	; 6
    4850:	98 f4       	brcc	.+38     	; 0x4878 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xb4>
    4852:	89 2f       	mov	r24, r25
    4854:	8f 70       	andi	r24, 0x0F	; 15
    4856:	81 f0       	breq	.+32     	; 0x4878 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xb4>
    void TimeAlarmsClass::free(AlarmID_t ID)
    {
      if(isAllocated(ID))
      {
        Alarm[ID].Mode.isEnabled = false;
    	Alarm[ID].Mode.alarmType = dtNotAllocated;
    4858:	90 7e       	andi	r25, 0xE0	; 224
    485a:	92 87       	std	Z+10, r25	; 0x0a
        Alarm[ID].onTickHandler = 0;
    485c:	11 82       	std	Z+1, r1	; 0x01
    485e:	10 82       	st	Z, r1
    	Alarm[ID].value = 0;
    4860:	12 82       	std	Z+2, r1	; 0x02
    4862:	13 82       	std	Z+3, r1	; 0x03
    4864:	14 82       	std	Z+4, r1	; 0x04
    4866:	15 82       	std	Z+5, r1	; 0x05
    	Alarm[ID].nextTrigger = 0;   	
    4868:	16 82       	std	Z+6, r1	; 0x06
    486a:	17 82       	std	Z+7, r1	; 0x07
    486c:	10 86       	std	Z+8, r1	; 0x08
    486e:	11 86       	std	Z+9, r1	; 0x09
    4870:	03 c0       	rjmp	.+6      	; 0x4878 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xb4>
          {
            OnTick_t TickHandler = Alarm[servicedAlarmId].onTickHandler;
            if(Alarm[servicedAlarmId].Mode.isOneShot)
               free(servicedAlarmId);  // free the ID if mode is OnShot		
            else   
               Alarm[servicedAlarmId].updateNextTrigger();
    4872:	cf 01       	movw	r24, r30
    4874:	0e 94 0c 22 	call	0x4418	; 0x4418 <_ZN10AlarmClass17updateNextTriggerEv>
            if( TickHandler != NULL) {        
    4878:	e1 14       	cp	r14, r1
    487a:	f1 04       	cpc	r15, r1
    487c:	11 f0       	breq	.+4      	; 0x4882 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xbe>
              (*TickHandler)();     // call the handler  
    487e:	f7 01       	movw	r30, r14
    4880:	09 95       	icall
    void TimeAlarmsClass::serviceAlarms()
    {
      if(! isServicing)
      {
        isServicing = true;
        for( servicedAlarmId = 0; servicedAlarmId < dtNBR_ALARMS; servicedAlarmId++)
    4882:	f8 01       	movw	r30, r16
    4884:	80 81       	ld	r24, Z
    4886:	8f 5f       	subi	r24, 0xFF	; 255
    4888:	80 83       	st	Z, r24
    488a:	f8 01       	movw	r30, r16
    488c:	80 81       	ld	r24, Z
    488e:	86 30       	cpi	r24, 0x06	; 6
    4890:	08 f4       	brcc	.+2      	; 0x4894 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xd0>
    4892:	b3 cf       	rjmp	.-154    	; 0x47fa <_ZN15TimeAlarmsClass13serviceAlarmsEv+0x36>
            if( TickHandler != NULL) {        
              (*TickHandler)();     // call the handler  
            }
          }
        }
        isServicing = false;
    4894:	ce 5b       	subi	r28, 0xBE	; 190
    4896:	df 4f       	sbci	r29, 0xFF	; 255
    4898:	18 82       	st	Y, r1
      }
    }
    489a:	df 91       	pop	r29
    489c:	cf 91       	pop	r28
    489e:	1f 91       	pop	r17
    48a0:	0f 91       	pop	r16
    48a2:	ff 90       	pop	r15
    48a4:	ef 90       	pop	r14
    48a6:	df 90       	pop	r13
    48a8:	cf 90       	pop	r12
    48aa:	08 95       	ret

000048ac <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th>:
    	}
        return nextTrigger == 0xffffffff ? 0 : nextTrigger;  	
     }
    
    // attempt to create an alarm and return true if successful
    AlarmID_t TimeAlarmsClass::create( time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType, uint8_t isEnabled) 
    48ac:	4f 92       	push	r4
    48ae:	5f 92       	push	r5
    48b0:	6f 92       	push	r6
    48b2:	7f 92       	push	r7
    48b4:	8f 92       	push	r8
    48b6:	9f 92       	push	r9
    48b8:	af 92       	push	r10
    48ba:	bf 92       	push	r11
    48bc:	cf 92       	push	r12
    48be:	ef 92       	push	r14
    48c0:	ff 92       	push	r15
    48c2:	0f 93       	push	r16
    48c4:	1f 93       	push	r17
    48c6:	cf 93       	push	r28
    48c8:	df 93       	push	r29
    48ca:	2c 01       	movw	r4, r24
    48cc:	4a 01       	movw	r8, r20
    48ce:	5b 01       	movw	r10, r22
    48d0:	39 01       	movw	r6, r18
    48d2:	e7 01       	movw	r28, r14
    {
      if( ! (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR)) // only create alarm ids if the time is at least Jan 1 1971
    48d4:	c7 01       	movw	r24, r14
    48d6:	02 97       	sbiw	r24, 0x02	; 2
    48d8:	03 97       	sbiw	r24, 0x03	; 3
    48da:	38 f4       	brcc	.+14     	; 0x48ea <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0x3e>
    48dc:	0e 94 08 21 	call	0x4210	; 0x4210 <_Z3nowv>
    48e0:	60 50       	subi	r22, 0x00	; 0
    48e2:	72 4e       	sbci	r23, 0xE2	; 226
    48e4:	8f 4d       	sbci	r24, 0xDF	; 223
    48e6:	91 40       	sbci	r25, 0x01	; 1
    48e8:	c0 f1       	brcs	.+112    	; 0x495a <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xae>
    48ea:	60 e0       	ldi	r22, 0x00	; 0
    48ec:	70 e0       	ldi	r23, 0x00	; 0
      {  
    	for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
        {
          if( Alarm[id].Mode.alarmType == dtNotAllocated )
    48ee:	2b e0       	ldi	r18, 0x0B	; 11
    48f0:	30 e0       	ldi	r19, 0x00	; 0
     }
    
    // attempt to create an alarm and return true if successful
    AlarmID_t TimeAlarmsClass::create( time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType, uint8_t isEnabled) 
    {
      if( ! (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR)) // only create alarm ids if the time is at least Jan 1 1971
    48f2:	16 2f       	mov	r17, r22
      {  
    	for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
        {
          if( Alarm[id].Mode.alarmType == dtNotAllocated )
    48f4:	62 9f       	mul	r22, r18
    48f6:	f0 01       	movw	r30, r0
    48f8:	63 9f       	mul	r22, r19
    48fa:	f0 0d       	add	r31, r0
    48fc:	72 9f       	mul	r23, r18
    48fe:	f0 0d       	add	r31, r0
    4900:	11 24       	eor	r1, r1
    4902:	e4 0d       	add	r30, r4
    4904:	f5 1d       	adc	r31, r5
    4906:	df 01       	movw	r26, r30
    4908:	1a 96       	adiw	r26, 0x0a	; 10
    490a:	82 85       	ldd	r24, Z+10	; 0x0a
    490c:	8f 70       	andi	r24, 0x0F	; 15
    490e:	01 f5       	brne	.+64     	; 0x4950 <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xa4>
    	  {
    	  // here if there is an Alarm id that is not allocated
      	    Alarm[id].onTickHandler = onTickHandler;
    4910:	71 82       	std	Z+1, r7	; 0x01
    4912:	60 82       	st	Z, r6
    	    Alarm[id].Mode.isOneShot = isOneShot;
    4914:	01 70       	andi	r16, 0x01	; 1
    4916:	02 95       	swap	r16
    4918:	00 0f       	add	r16, r16
    491a:	00 7e       	andi	r16, 0xE0	; 224
    491c:	8c 91       	ld	r24, X
    491e:	80 7d       	andi	r24, 0xD0	; 208
    	    Alarm[id].Mode.alarmType = alarmType;
    4920:	9e 01       	movw	r18, r28
    4922:	2f 70       	andi	r18, 0x0F	; 15
    4924:	80 2b       	or	r24, r16
    4926:	82 2b       	or	r24, r18
    4928:	8c 93       	st	X, r24
    	    Alarm[id].value = value;
    492a:	82 82       	std	Z+2, r8	; 0x02
    492c:	93 82       	std	Z+3, r9	; 0x03
    492e:	a4 82       	std	Z+4, r10	; 0x04
    4930:	b5 82       	std	Z+5, r11	; 0x05
    	    isEnabled ?  enable(id) : disable(id);   
    4932:	cc 20       	and	r12, r12
    4934:	21 f0       	breq	.+8      	; 0x493e <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0x92>
    4936:	c2 01       	movw	r24, r4
    4938:	0e 94 ab 23 	call	0x4756	; 0x4756 <_ZN15TimeAlarmsClass6enableEh>
    493c:	0f c0       	rjmp	.+30     	; 0x495c <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xb0>
     }
     
     // returns true if this id is allocated
     bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
     {
        return( ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated );
    493e:	66 30       	cpi	r22, 0x06	; 6
    4940:	68 f4       	brcc	.+26     	; 0x495c <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xb0>
    4942:	9c 91       	ld	r25, X
    4944:	89 2f       	mov	r24, r25
    4946:	8f 70       	andi	r24, 0x0F	; 15
    4948:	49 f0       	breq	.+18     	; 0x495c <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xb0>
    }
    
    void TimeAlarmsClass::disable(AlarmID_t ID)
    {
      if(isAllocated(ID))
        Alarm[ID].Mode.isEnabled = false;
    494a:	9f 7e       	andi	r25, 0xEF	; 239
    494c:	9c 93       	st	X, r25
    494e:	06 c0       	rjmp	.+12     	; 0x495c <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xb0>
    4950:	6f 5f       	subi	r22, 0xFF	; 255
    4952:	7f 4f       	sbci	r23, 0xFF	; 255
    // attempt to create an alarm and return true if successful
    AlarmID_t TimeAlarmsClass::create( time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType, uint8_t isEnabled) 
    {
      if( ! (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR)) // only create alarm ids if the time is at least Jan 1 1971
      {  
    	for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
    4954:	66 30       	cpi	r22, 0x06	; 6
    4956:	71 05       	cpc	r23, r1
    4958:	61 f6       	brne	.-104    	; 0x48f2 <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0x46>
    495a:	1f ef       	ldi	r17, 0xFF	; 255
            return id;  // alarm created ok
    	  }  
        }
      }
      return dtINVALID_ALARM_ID; // no IDs available or time is invalid
    }
    495c:	81 2f       	mov	r24, r17
    495e:	df 91       	pop	r29
    4960:	cf 91       	pop	r28
    4962:	1f 91       	pop	r17
    4964:	0f 91       	pop	r16
    4966:	ff 90       	pop	r15
    4968:	ef 90       	pop	r14
    496a:	cf 90       	pop	r12
    496c:	bf 90       	pop	r11
    496e:	af 90       	pop	r10
    4970:	9f 90       	pop	r9
    4972:	8f 90       	pop	r8
    4974:	7f 90       	pop	r7
    4976:	6f 90       	pop	r6
    4978:	5f 90       	pop	r5
    497a:	4f 90       	pop	r4
    497c:	08 95       	ret

0000497e <_ZN15TimeAlarmsClass11timerRepeatEmPFvvE>:
    
    AlarmID_t TimeAlarmsClass::timerOnce(const int H,  const int M,  const int S, OnTick_t onTickHandler){   // As above with HMS arguments
      return create( AlarmHMS(H,M,S), onTickHandler, IS_ONESHOT, dtTimer );
    }
      
    AlarmID_t TimeAlarmsClass::timerRepeat(time_t value, OnTick_t onTickHandler){ // trigger after the given number of seconds continuously
    497e:	cf 92       	push	r12
    4980:	ef 92       	push	r14
    4982:	ff 92       	push	r15
    4984:	0f 93       	push	r16
         return create( value, onTickHandler, IS_REPEAT, dtTimer);
    4986:	00 e0       	ldi	r16, 0x00	; 0
    4988:	f1 e0       	ldi	r31, 0x01	; 1
    498a:	ef 2e       	mov	r14, r31
    498c:	f1 2c       	mov	r15, r1
    498e:	cc 24       	eor	r12, r12
    4990:	c3 94       	inc	r12
    4992:	0e 94 56 24 	call	0x48ac	; 0x48ac <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th>
    }
    4996:	0f 91       	pop	r16
    4998:	ff 90       	pop	r15
    499a:	ef 90       	pop	r14
    499c:	cf 90       	pop	r12
    499e:	08 95       	ret

000049a0 <_ZN15TimeAlarmsClass11alarmRepeatEiiiPFvvE>:
       return create( value, onTickHandler, IS_REPEAT, dtDailyAlarm );
    else
       return dtINVALID_ALARM_ID; // dont't allocate if the time is greater than one day 	  
    }
    
    AlarmID_t TimeAlarmsClass::alarmRepeat(const int H,  const int M,  const int S, OnTick_t onTickHandler){ // as above with HMS arguments
    49a0:	2f 92       	push	r2
    49a2:	3f 92       	push	r3
    49a4:	4f 92       	push	r4
    49a6:	5f 92       	push	r5
    49a8:	6f 92       	push	r6
    49aa:	7f 92       	push	r7
    49ac:	8f 92       	push	r8
    49ae:	9f 92       	push	r9
    49b0:	af 92       	push	r10
    49b2:	bf 92       	push	r11
    49b4:	cf 92       	push	r12
    49b6:	df 92       	push	r13
    49b8:	ef 92       	push	r14
    49ba:	ff 92       	push	r15
    49bc:	0f 93       	push	r16
    49be:	1f 93       	push	r17
    49c0:	1c 01       	movw	r2, r24
    49c2:	2b 01       	movw	r4, r22
    49c4:	49 01       	movw	r8, r18
         return create( AlarmHMS(H,M,S), onTickHandler, IS_REPEAT, dtDailyAlarm );
    49c6:	66 27       	eor	r22, r22
    49c8:	57 fd       	sbrc	r21, 7
    49ca:	60 95       	com	r22
    49cc:	76 2f       	mov	r23, r22
    49ce:	cb 01       	movw	r24, r22
    49d0:	ba 01       	movw	r22, r20
    49d2:	2c e3       	ldi	r18, 0x3C	; 60
    49d4:	30 e0       	ldi	r19, 0x00	; 0
    49d6:	40 e0       	ldi	r20, 0x00	; 0
    49d8:	50 e0       	ldi	r21, 0x00	; 0
    49da:	0e 94 02 3c 	call	0x7804	; 0x7804 <__mulsi3>
    49de:	6b 01       	movw	r12, r22
    49e0:	7c 01       	movw	r14, r24
    49e2:	aa 24       	eor	r10, r10
    49e4:	97 fc       	sbrc	r9, 7
    49e6:	a0 94       	com	r10
    49e8:	ba 2c       	mov	r11, r10
    49ea:	c8 0c       	add	r12, r8
    49ec:	d9 1c       	adc	r13, r9
    49ee:	ea 1c       	adc	r14, r10
    49f0:	fb 1c       	adc	r15, r11
    49f2:	66 24       	eor	r6, r6
    49f4:	57 fc       	sbrc	r5, 7
    49f6:	60 94       	com	r6
    49f8:	76 2c       	mov	r7, r6
    49fa:	c3 01       	movw	r24, r6
    49fc:	b2 01       	movw	r22, r4
    49fe:	20 e1       	ldi	r18, 0x10	; 16
    4a00:	3e e0       	ldi	r19, 0x0E	; 14
    4a02:	40 e0       	ldi	r20, 0x00	; 0
    4a04:	50 e0       	ldi	r21, 0x00	; 0
    4a06:	0e 94 02 3c 	call	0x7804	; 0x7804 <__mulsi3>
    4a0a:	c6 0e       	add	r12, r22
    4a0c:	d7 1e       	adc	r13, r23
    4a0e:	e8 1e       	adc	r14, r24
    4a10:	f9 1e       	adc	r15, r25
    4a12:	c1 01       	movw	r24, r2
    4a14:	b7 01       	movw	r22, r14
    4a16:	a6 01       	movw	r20, r12
    4a18:	98 01       	movw	r18, r16
    4a1a:	00 e0       	ldi	r16, 0x00	; 0
    4a1c:	e3 e0       	ldi	r30, 0x03	; 3
    4a1e:	ee 2e       	mov	r14, r30
    4a20:	f1 2c       	mov	r15, r1
    4a22:	cc 24       	eor	r12, r12
    4a24:	c3 94       	inc	r12
    4a26:	0e 94 56 24 	call	0x48ac	; 0x48ac <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th>
    }
    4a2a:	1f 91       	pop	r17
    4a2c:	0f 91       	pop	r16
    4a2e:	ff 90       	pop	r15
    4a30:	ef 90       	pop	r14
    4a32:	df 90       	pop	r13
    4a34:	cf 90       	pop	r12
    4a36:	bf 90       	pop	r11
    4a38:	af 90       	pop	r10
    4a3a:	9f 90       	pop	r9
    4a3c:	8f 90       	pop	r8
    4a3e:	7f 90       	pop	r7
    4a40:	6f 90       	pop	r6
    4a42:	5f 90       	pop	r5
    4a44:	4f 90       	pop	r4
    4a46:	3f 90       	pop	r3
    4a48:	2f 90       	pop	r2
    4a4a:	08 95       	ret

00004a4c <_ZN15TimeAlarmsClass5delayEm>:
      else
         return dtINVALID_ALARM_ID; // valid ids only available when servicing a callback
    }
     
    // following functions are not Alarm ID specific.
    void TimeAlarmsClass::delay(unsigned long ms)
    4a4c:	af 92       	push	r10
    4a4e:	bf 92       	push	r11
    4a50:	cf 92       	push	r12
    4a52:	df 92       	push	r13
    4a54:	ef 92       	push	r14
    4a56:	ff 92       	push	r15
    4a58:	0f 93       	push	r16
    4a5a:	1f 93       	push	r17
    4a5c:	cf 93       	push	r28
    4a5e:	df 93       	push	r29
    4a60:	ec 01       	movw	r28, r24
    4a62:	5a 01       	movw	r10, r20
    4a64:	6b 01       	movw	r12, r22
    {
      unsigned long start = millis();
    4a66:	0e 94 32 30 	call	0x6064	; 0x6064 <millis>
    4a6a:	7b 01       	movw	r14, r22
    4a6c:	8c 01       	movw	r16, r24
    4a6e:	03 c0       	rjmp	.+6      	; 0x4a76 <_ZN15TimeAlarmsClass5delayEm+0x2a>
      while( millis() - start  <= ms)
        serviceAlarms();
    4a70:	ce 01       	movw	r24, r28
    4a72:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <_ZN15TimeAlarmsClass13serviceAlarmsEv>
     
    // following functions are not Alarm ID specific.
    void TimeAlarmsClass::delay(unsigned long ms)
    {
      unsigned long start = millis();
      while( millis() - start  <= ms)
    4a76:	0e 94 32 30 	call	0x6064	; 0x6064 <millis>
    4a7a:	6e 19       	sub	r22, r14
    4a7c:	7f 09       	sbc	r23, r15
    4a7e:	80 0b       	sbc	r24, r16
    4a80:	91 0b       	sbc	r25, r17
    4a82:	a6 16       	cp	r10, r22
    4a84:	b7 06       	cpc	r11, r23
    4a86:	c8 06       	cpc	r12, r24
    4a88:	d9 06       	cpc	r13, r25
    4a8a:	90 f7       	brcc	.-28     	; 0x4a70 <_ZN15TimeAlarmsClass5delayEm+0x24>
        serviceAlarms();
    }
    4a8c:	df 91       	pop	r29
    4a8e:	cf 91       	pop	r28
    4a90:	1f 91       	pop	r17
    4a92:	0f 91       	pop	r16
    4a94:	ff 90       	pop	r15
    4a96:	ef 90       	pop	r14
    4a98:	df 90       	pop	r13
    4a9a:	cf 90       	pop	r12
    4a9c:	bf 90       	pop	r11
    4a9e:	af 90       	pop	r10
    4aa0:	08 95       	ret

00004aa2 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    4aa2:	81 e0       	ldi	r24, 0x01	; 1
    4aa4:	80 93 b0 02 	sts	0x02B0, r24
  // set address of targeted slave
  txAddress = address;
    4aa8:	60 93 8d 02 	sts	0x028D, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    4aac:	10 92 ae 02 	sts	0x02AE, r1
  txBufferLength = 0;
    4ab0:	10 92 af 02 	sts	0x02AF, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
    4ab4:	08 95       	ret

00004ab6 <_ZN7TwoWire9availableEv>:
}

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
    4ab6:	20 91 8c 02 	lds	r18, 0x028C
    4aba:	30 e0       	ldi	r19, 0x00	; 0
    4abc:	80 91 8b 02 	lds	r24, 0x028B
    4ac0:	28 1b       	sub	r18, r24
    4ac2:	31 09       	sbc	r19, r1
{
  return rxBufferLength - rxBufferIndex;
}
    4ac4:	c9 01       	movw	r24, r18
    4ac6:	08 95       	ret

00004ac8 <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    4ac8:	40 91 8b 02 	lds	r20, 0x028B
    4acc:	80 91 8c 02 	lds	r24, 0x028C
    4ad0:	48 17       	cp	r20, r24
    4ad2:	18 f0       	brcs	.+6      	; 0x4ada <_ZN7TwoWire4readEv+0x12>
    4ad4:	2f ef       	ldi	r18, 0xFF	; 255
    4ad6:	3f ef       	ldi	r19, 0xFF	; 255
    4ad8:	0a c0       	rjmp	.+20     	; 0x4aee <_ZN7TwoWire4readEv+0x26>
    value = rxBuffer[rxBufferIndex];
    4ada:	e4 2f       	mov	r30, r20
    4adc:	f0 e0       	ldi	r31, 0x00	; 0
    4ade:	e5 59       	subi	r30, 0x95	; 149
    4ae0:	fd 4f       	sbci	r31, 0xFD	; 253
    4ae2:	80 81       	ld	r24, Z
    4ae4:	28 2f       	mov	r18, r24
    4ae6:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    4ae8:	4f 5f       	subi	r20, 0xFF	; 255
    4aea:	40 93 8b 02 	sts	0x028B, r20
  }

  return value;
}
    4aee:	c9 01       	movw	r24, r18
    4af0:	08 95       	ret

00004af2 <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    4af2:	e0 91 8b 02 	lds	r30, 0x028B
    4af6:	80 91 8c 02 	lds	r24, 0x028C
    4afa:	e8 17       	cp	r30, r24
    4afc:	18 f0       	brcs	.+6      	; 0x4b04 <_ZN7TwoWire4peekEv+0x12>
    4afe:	ef ef       	ldi	r30, 0xFF	; 255
    4b00:	ff ef       	ldi	r31, 0xFF	; 255
    4b02:	06 c0       	rjmp	.+12     	; 0x4b10 <_ZN7TwoWire4peekEv+0x1e>
    value = rxBuffer[rxBufferIndex];
    4b04:	f0 e0       	ldi	r31, 0x00	; 0
    4b06:	e5 59       	subi	r30, 0x95	; 149
    4b08:	fd 4f       	sbci	r31, 0xFD	; 253
    4b0a:	80 81       	ld	r24, Z
    4b0c:	e8 2f       	mov	r30, r24
    4b0e:	f0 e0       	ldi	r31, 0x00	; 0
  }

  return value;
}
    4b10:	cf 01       	movw	r24, r30
    4b12:	08 95       	ret

00004b14 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    4b14:	08 95       	ret

00004b16 <_GLOBAL__I__ZN7TwoWire8rxBufferE>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    4b16:	10 92 b4 02 	sts	0x02B4, r1
    4b1a:	10 92 b3 02 	sts	0x02B3, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    4b1e:	88 ee       	ldi	r24, 0xE8	; 232
    4b20:	93 e0       	ldi	r25, 0x03	; 3
    4b22:	a0 e0       	ldi	r26, 0x00	; 0
    4b24:	b0 e0       	ldi	r27, 0x00	; 0
    4b26:	80 93 b5 02 	sts	0x02B5, r24
    4b2a:	90 93 b6 02 	sts	0x02B6, r25
    4b2e:	a0 93 b7 02 	sts	0x02B7, r26
    4b32:	b0 93 b8 02 	sts	0x02B8, r27
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    4b36:	80 e2       	ldi	r24, 0x20	; 32
    4b38:	91 e0       	ldi	r25, 0x01	; 1
    4b3a:	90 93 b2 02 	sts	0x02B2, r25
    4b3e:	80 93 b1 02 	sts	0x02B1, r24
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    4b42:	08 95       	ret

00004b44 <_ZN7TwoWire5writeEPKhj>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
    4b44:	cf 92       	push	r12
    4b46:	df 92       	push	r13
    4b48:	ef 92       	push	r14
    4b4a:	ff 92       	push	r15
    4b4c:	0f 93       	push	r16
    4b4e:	1f 93       	push	r17
    4b50:	cf 93       	push	r28
    4b52:	df 93       	push	r29
    4b54:	7c 01       	movw	r14, r24
    4b56:	6b 01       	movw	r12, r22
    4b58:	8a 01       	movw	r16, r20
{
  if(transmitting){
    4b5a:	80 91 b0 02 	lds	r24, 0x02B0
    4b5e:	88 23       	and	r24, r24
    4b60:	a1 f0       	breq	.+40     	; 0x4b8a <_ZN7TwoWire5writeEPKhj+0x46>
    4b62:	c0 e0       	ldi	r28, 0x00	; 0
    4b64:	d0 e0       	ldi	r29, 0x00	; 0
    4b66:	0d c0       	rjmp	.+26     	; 0x4b82 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
      write(data[i]);
    4b68:	d7 01       	movw	r26, r14
    4b6a:	ed 91       	ld	r30, X+
    4b6c:	fc 91       	ld	r31, X
    4b6e:	d6 01       	movw	r26, r12
    4b70:	ac 0f       	add	r26, r28
    4b72:	bd 1f       	adc	r27, r29
    4b74:	01 90       	ld	r0, Z+
    4b76:	f0 81       	ld	r31, Z
    4b78:	e0 2d       	mov	r30, r0
    4b7a:	c7 01       	movw	r24, r14
    4b7c:	6c 91       	ld	r22, X
    4b7e:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    4b80:	21 96       	adiw	r28, 0x01	; 1
    4b82:	c0 17       	cp	r28, r16
    4b84:	d1 07       	cpc	r29, r17
    4b86:	80 f3       	brcs	.-32     	; 0x4b68 <_ZN7TwoWire5writeEPKhj+0x24>
    4b88:	04 c0       	rjmp	.+8      	; 0x4b92 <_ZN7TwoWire5writeEPKhj+0x4e>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    4b8a:	cb 01       	movw	r24, r22
    4b8c:	64 2f       	mov	r22, r20
    4b8e:	0e 94 d4 26 	call	0x4da8	; 0x4da8 <twi_transmit>
  }
  return quantity;
}
    4b92:	c8 01       	movw	r24, r16
    4b94:	df 91       	pop	r29
    4b96:	cf 91       	pop	r28
    4b98:	1f 91       	pop	r17
    4b9a:	0f 91       	pop	r16
    4b9c:	ff 90       	pop	r15
    4b9e:	ef 90       	pop	r14
    4ba0:	df 90       	pop	r13
    4ba2:	cf 90       	pop	r12
    4ba4:	08 95       	ret

00004ba6 <_ZN7TwoWire5writeEh>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
    4ba6:	df 93       	push	r29
    4ba8:	cf 93       	push	r28
    4baa:	0f 92       	push	r0
    4bac:	cd b7       	in	r28, 0x3d	; 61
    4bae:	de b7       	in	r29, 0x3e	; 62
    4bb0:	fc 01       	movw	r30, r24
    4bb2:	69 83       	std	Y+1, r22	; 0x01
{
  if(transmitting){
    4bb4:	80 91 b0 02 	lds	r24, 0x02B0
    4bb8:	88 23       	and	r24, r24
    4bba:	c9 f0       	breq	.+50     	; 0x4bee <_ZN7TwoWire5writeEh+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    4bbc:	80 91 af 02 	lds	r24, 0x02AF
    4bc0:	80 32       	cpi	r24, 0x20	; 32
    4bc2:	38 f0       	brcs	.+14     	; 0x4bd2 <_ZN7TwoWire5writeEh+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    4bc4:	81 e0       	ldi	r24, 0x01	; 1
    4bc6:	90 e0       	ldi	r25, 0x00	; 0
    4bc8:	93 83       	std	Z+3, r25	; 0x03
    4bca:	82 83       	std	Z+2, r24	; 0x02
    4bcc:	20 e0       	ldi	r18, 0x00	; 0
    4bce:	30 e0       	ldi	r19, 0x00	; 0
    4bd0:	15 c0       	rjmp	.+42     	; 0x4bfc <_ZN7TwoWire5writeEh+0x56>
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    4bd2:	80 91 ae 02 	lds	r24, 0x02AE
    4bd6:	e8 2f       	mov	r30, r24
    4bd8:	f0 e0       	ldi	r31, 0x00	; 0
    4bda:	e2 57       	subi	r30, 0x72	; 114
    4bdc:	fd 4f       	sbci	r31, 0xFD	; 253
    4bde:	99 81       	ldd	r25, Y+1	; 0x01
    4be0:	90 83       	st	Z, r25
    ++txBufferIndex;
    4be2:	8f 5f       	subi	r24, 0xFF	; 255
    4be4:	80 93 ae 02 	sts	0x02AE, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    4be8:	80 93 af 02 	sts	0x02AF, r24
    4bec:	05 c0       	rjmp	.+10     	; 0x4bf8 <_ZN7TwoWire5writeEh+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    4bee:	ce 01       	movw	r24, r28
    4bf0:	01 96       	adiw	r24, 0x01	; 1
    4bf2:	61 e0       	ldi	r22, 0x01	; 1
    4bf4:	0e 94 d4 26 	call	0x4da8	; 0x4da8 <twi_transmit>
    4bf8:	21 e0       	ldi	r18, 0x01	; 1
    4bfa:	30 e0       	ldi	r19, 0x00	; 0
  }
  return 1;
}
    4bfc:	c9 01       	movw	r24, r18
    4bfe:	0f 90       	pop	r0
    4c00:	cf 91       	pop	r28
    4c02:	df 91       	pop	r29
    4c04:	08 95       	ret

00004c06 <_ZN7TwoWire15endTransmissionEh>:
//	the bus tenure has been properly ended with a STOP. It
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
    4c06:	0f 93       	push	r16
    4c08:	06 2f       	mov	r16, r22
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    4c0a:	80 91 8d 02 	lds	r24, 0x028D
    4c0e:	6e e8       	ldi	r22, 0x8E	; 142
    4c10:	72 e0       	ldi	r23, 0x02	; 2
    4c12:	40 91 af 02 	lds	r20, 0x02AF
    4c16:	21 e0       	ldi	r18, 0x01	; 1
    4c18:	0e 94 7f 26 	call	0x4cfe	; 0x4cfe <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    4c1c:	10 92 ae 02 	sts	0x02AE, r1
  txBufferLength = 0;
    4c20:	10 92 af 02 	sts	0x02AF, r1
  // indicate that we are done transmitting
  transmitting = 0;
    4c24:	10 92 b0 02 	sts	0x02B0, r1
  return ret;
}
    4c28:	0f 91       	pop	r16
    4c2a:	08 95       	ret

00004c2c <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    4c2c:	61 e0       	ldi	r22, 0x01	; 1
    4c2e:	0e 94 03 26 	call	0x4c06	; 0x4c06 <_ZN7TwoWire15endTransmissionEh>
}
    4c32:	08 95       	ret

00004c34 <_ZN7TwoWire11requestFromEhhh>:
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    4c34:	41 32       	cpi	r20, 0x21	; 33
    4c36:	08 f0       	brcs	.+2      	; 0x4c3a <_ZN7TwoWire11requestFromEhhh+0x6>
    4c38:	40 e2       	ldi	r20, 0x20	; 32
    4c3a:	86 2f       	mov	r24, r22
    4c3c:	6b e6       	ldi	r22, 0x6B	; 107
    4c3e:	72 e0       	ldi	r23, 0x02	; 2
    4c40:	0e 94 36 26 	call	0x4c6c	; 0x4c6c <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    4c44:	10 92 8b 02 	sts	0x028B, r1
  rxBufferLength = read;
    4c48:	80 93 8c 02 	sts	0x028C, r24

  return read;
}
    4c4c:	08 95       	ret

00004c4e <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    4c4e:	21 e0       	ldi	r18, 0x01	; 1
    4c50:	0e 94 1a 26 	call	0x4c34	; 0x4c34 <_ZN7TwoWire11requestFromEhhh>
}
    4c54:	08 95       	ret

00004c56 <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    4c56:	10 92 8b 02 	sts	0x028B, r1
  rxBufferLength = 0;
    4c5a:	10 92 8c 02 	sts	0x028C, r1

  txBufferIndex = 0;
    4c5e:	10 92 ae 02 	sts	0x02AE, r1
  txBufferLength = 0;
    4c62:	10 92 af 02 	sts	0x02AF, r1

  twi_init();
    4c66:	0e 94 80 28 	call	0x5100	; 0x5100 <twi_init>
}
    4c6a:	08 95       	ret

00004c6c <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    4c6c:	38 2f       	mov	r19, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    4c6e:	41 32       	cpi	r20, 0x21	; 33
    4c70:	10 f0       	brcs	.+4      	; 0x4c76 <twi_readFrom+0xa>
    4c72:	40 e0       	ldi	r20, 0x00	; 0
    4c74:	42 c0       	rjmp	.+132    	; 0x4cfa <twi_readFrom+0x8e>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    4c76:	80 91 bd 02 	lds	r24, 0x02BD
    4c7a:	88 23       	and	r24, r24
    4c7c:	e1 f7       	brne	.-8      	; 0x4c76 <twi_readFrom+0xa>
    continue;
  }
  twi_state = TWI_MRX;
    4c7e:	91 e0       	ldi	r25, 0x01	; 1
    4c80:	90 93 bd 02 	sts	0x02BD, r25
  twi_sendStop = sendStop;
    4c84:	20 93 bf 02 	sts	0x02BF, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    4c88:	8f ef       	ldi	r24, 0xFF	; 255
    4c8a:	80 93 2a 03 	sts	0x032A, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    4c8e:	10 92 e5 02 	sts	0x02E5, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    4c92:	41 50       	subi	r20, 0x01	; 1
    4c94:	40 93 e6 02 	sts	0x02E6, r20
    4c98:	4f 5f       	subi	r20, 0xFF	; 255
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    4c9a:	90 93 be 02 	sts	0x02BE, r25
  twi_slarw |= address << 1;
    4c9e:	80 91 be 02 	lds	r24, 0x02BE
    4ca2:	33 0f       	add	r19, r19
    4ca4:	83 2b       	or	r24, r19
    4ca6:	80 93 be 02 	sts	0x02BE, r24

  if (true == twi_inRepStart) {
    4caa:	80 91 c0 02 	lds	r24, 0x02C0
    4cae:	81 30       	cpi	r24, 0x01	; 1
    4cb0:	41 f4       	brne	.+16     	; 0x4cc2 <twi_readFrom+0x56>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    4cb2:	10 92 c0 02 	sts	0x02C0, r1
    TWDR = twi_slarw;
    4cb6:	80 91 be 02 	lds	r24, 0x02BE
    4cba:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    4cbe:	85 ec       	ldi	r24, 0xC5	; 197
    4cc0:	01 c0       	rjmp	.+2      	; 0x4cc4 <twi_readFrom+0x58>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    4cc2:	85 ee       	ldi	r24, 0xE5	; 229
    4cc4:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    4cc8:	80 91 bd 02 	lds	r24, 0x02BD
    4ccc:	81 30       	cpi	r24, 0x01	; 1
    4cce:	e1 f3       	breq	.-8      	; 0x4cc8 <twi_readFrom+0x5c>
    continue;
  }

  if (twi_masterBufferIndex < length)
    4cd0:	80 91 e5 02 	lds	r24, 0x02E5
    4cd4:	84 17       	cp	r24, r20
    4cd6:	10 f4       	brcc	.+4      	; 0x4cdc <twi_readFrom+0x70>
    length = twi_masterBufferIndex;
    4cd8:	40 91 e5 02 	lds	r20, 0x02E5
    4cdc:	20 e0       	ldi	r18, 0x00	; 0
    4cde:	30 e0       	ldi	r19, 0x00	; 0
    4ce0:	0a c0       	rjmp	.+20     	; 0x4cf6 <twi_readFrom+0x8a>

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    4ce2:	fb 01       	movw	r30, r22
    4ce4:	e2 0f       	add	r30, r18
    4ce6:	f3 1f       	adc	r31, r19
    4ce8:	d9 01       	movw	r26, r18
    4cea:	ab 53       	subi	r26, 0x3B	; 59
    4cec:	bd 4f       	sbci	r27, 0xFD	; 253
    4cee:	8c 91       	ld	r24, X
    4cf0:	80 83       	st	Z, r24
    4cf2:	2f 5f       	subi	r18, 0xFF	; 255
    4cf4:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    4cf6:	24 17       	cp	r18, r20
    4cf8:	a0 f3       	brcs	.-24     	; 0x4ce2 <twi_readFrom+0x76>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    4cfa:	84 2f       	mov	r24, r20
    4cfc:	08 95       	ret

00004cfe <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    4cfe:	0f 93       	push	r16
    4d00:	1f 93       	push	r17
    4d02:	58 2f       	mov	r21, r24
    4d04:	12 2f       	mov	r17, r18
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    4d06:	41 32       	cpi	r20, 0x21	; 33
    4d08:	10 f0       	brcs	.+4      	; 0x4d0e <twi_writeTo+0x10>
    4d0a:	81 e0       	ldi	r24, 0x01	; 1
    4d0c:	4a c0       	rjmp	.+148    	; 0x4da2 <twi_writeTo+0xa4>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    4d0e:	80 91 bd 02 	lds	r24, 0x02BD
    4d12:	88 23       	and	r24, r24
    4d14:	e1 f7       	brne	.-8      	; 0x4d0e <twi_writeTo+0x10>
    continue;
  }
  twi_state = TWI_MTX;
    4d16:	82 e0       	ldi	r24, 0x02	; 2
    4d18:	80 93 bd 02 	sts	0x02BD, r24
  twi_sendStop = sendStop;
    4d1c:	00 93 bf 02 	sts	0x02BF, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    4d20:	8f ef       	ldi	r24, 0xFF	; 255
    4d22:	80 93 2a 03 	sts	0x032A, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    4d26:	10 92 e5 02 	sts	0x02E5, r1
  twi_masterBufferLength = length;
    4d2a:	40 93 e6 02 	sts	0x02E6, r20
    4d2e:	a5 ec       	ldi	r26, 0xC5	; 197
    4d30:	b2 e0       	ldi	r27, 0x02	; 2
    4d32:	fb 01       	movw	r30, r22
    4d34:	02 c0       	rjmp	.+4      	; 0x4d3a <twi_writeTo+0x3c>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    4d36:	81 91       	ld	r24, Z+
    4d38:	8d 93       	st	X+, r24
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    4d3a:	8e 2f       	mov	r24, r30
    4d3c:	86 1b       	sub	r24, r22
    4d3e:	84 17       	cp	r24, r20
    4d40:	d0 f3       	brcs	.-12     	; 0x4d36 <twi_writeTo+0x38>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    4d42:	10 92 be 02 	sts	0x02BE, r1
  twi_slarw |= address << 1;
    4d46:	80 91 be 02 	lds	r24, 0x02BE
    4d4a:	55 0f       	add	r21, r21
    4d4c:	85 2b       	or	r24, r21
    4d4e:	80 93 be 02 	sts	0x02BE, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    4d52:	80 91 c0 02 	lds	r24, 0x02C0
    4d56:	81 30       	cpi	r24, 0x01	; 1
    4d58:	41 f4       	brne	.+16     	; 0x4d6a <twi_writeTo+0x6c>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    4d5a:	10 92 c0 02 	sts	0x02C0, r1
    TWDR = twi_slarw;				
    4d5e:	80 91 be 02 	lds	r24, 0x02BE
    4d62:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    4d66:	85 ec       	ldi	r24, 0xC5	; 197
    4d68:	01 c0       	rjmp	.+2      	; 0x4d6c <twi_writeTo+0x6e>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    4d6a:	85 ee       	ldi	r24, 0xE5	; 229
    4d6c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    4d70:	11 23       	and	r17, r17
    4d72:	21 f0       	breq	.+8      	; 0x4d7c <twi_writeTo+0x7e>
    4d74:	80 91 bd 02 	lds	r24, 0x02BD
    4d78:	82 30       	cpi	r24, 0x02	; 2
    4d7a:	e1 f3       	breq	.-8      	; 0x4d74 <twi_writeTo+0x76>
    continue;
  }
  
  if (twi_error == 0xFF)
    4d7c:	80 91 2a 03 	lds	r24, 0x032A
    4d80:	8f 3f       	cpi	r24, 0xFF	; 255
    4d82:	11 f4       	brne	.+4      	; 0x4d88 <twi_writeTo+0x8a>
    4d84:	80 e0       	ldi	r24, 0x00	; 0
    4d86:	0d c0       	rjmp	.+26     	; 0x4da2 <twi_writeTo+0xa4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    4d88:	80 91 2a 03 	lds	r24, 0x032A
    4d8c:	80 32       	cpi	r24, 0x20	; 32
    4d8e:	11 f4       	brne	.+4      	; 0x4d94 <twi_writeTo+0x96>
    4d90:	82 e0       	ldi	r24, 0x02	; 2
    4d92:	07 c0       	rjmp	.+14     	; 0x4da2 <twi_writeTo+0xa4>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    4d94:	80 91 2a 03 	lds	r24, 0x032A
    4d98:	80 33       	cpi	r24, 0x30	; 48
    4d9a:	11 f0       	breq	.+4      	; 0x4da0 <twi_writeTo+0xa2>
    4d9c:	84 e0       	ldi	r24, 0x04	; 4
    4d9e:	01 c0       	rjmp	.+2      	; 0x4da2 <twi_writeTo+0xa4>
    4da0:	83 e0       	ldi	r24, 0x03	; 3
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    4da2:	1f 91       	pop	r17
    4da4:	0f 91       	pop	r16
    4da6:	08 95       	ret

00004da8 <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    4da8:	48 2f       	mov	r20, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    4daa:	61 32       	cpi	r22, 0x21	; 33
    4dac:	10 f0       	brcs	.+4      	; 0x4db2 <twi_transmit+0xa>
    4dae:	81 e0       	ldi	r24, 0x01	; 1
    4db0:	08 95       	ret
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    4db2:	80 91 bd 02 	lds	r24, 0x02BD
    4db6:	84 30       	cpi	r24, 0x04	; 4
    4db8:	11 f0       	breq	.+4      	; 0x4dbe <twi_transmit+0x16>
    4dba:	82 e0       	ldi	r24, 0x02	; 2
    4dbc:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    4dbe:	60 93 08 03 	sts	0x0308, r22
    4dc2:	a7 ee       	ldi	r26, 0xE7	; 231
    4dc4:	b2 e0       	ldi	r27, 0x02	; 2
    4dc6:	84 2f       	mov	r24, r20
    4dc8:	9c 01       	movw	r18, r24
    4dca:	f9 01       	movw	r30, r18
    4dcc:	02 c0       	rjmp	.+4      	; 0x4dd2 <twi_transmit+0x2a>
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
    4dce:	81 91       	ld	r24, Z+
    4dd0:	8d 93       	st	X+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    4dd2:	8e 2f       	mov	r24, r30
    4dd4:	84 1b       	sub	r24, r20
    4dd6:	86 17       	cp	r24, r22
    4dd8:	d0 f3       	brcs	.-12     	; 0x4dce <twi_transmit+0x26>
    4dda:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    4ddc:	08 95       	ret

00004dde <__vector_24>:
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    4dde:	1f 92       	push	r1
    4de0:	0f 92       	push	r0
    4de2:	0f b6       	in	r0, 0x3f	; 63
    4de4:	0f 92       	push	r0
    4de6:	11 24       	eor	r1, r1
    4de8:	2f 93       	push	r18
    4dea:	3f 93       	push	r19
    4dec:	4f 93       	push	r20
    4dee:	5f 93       	push	r21
    4df0:	6f 93       	push	r22
    4df2:	7f 93       	push	r23
    4df4:	8f 93       	push	r24
    4df6:	9f 93       	push	r25
    4df8:	af 93       	push	r26
    4dfa:	bf 93       	push	r27
    4dfc:	ef 93       	push	r30
    4dfe:	ff 93       	push	r31
  switch(TW_STATUS){
    4e00:	80 91 b9 00 	lds	r24, 0x00B9
    4e04:	90 e0       	ldi	r25, 0x00	; 0
    4e06:	88 7f       	andi	r24, 0xF8	; 248
    4e08:	90 70       	andi	r25, 0x00	; 0
    4e0a:	80 36       	cpi	r24, 0x60	; 96
    4e0c:	91 05       	cpc	r25, r1
    4e0e:	09 f4       	brne	.+2      	; 0x4e12 <__vector_24+0x34>
    4e10:	f2 c0       	rjmp	.+484    	; 0x4ff6 <__vector_24+0x218>
    4e12:	81 36       	cpi	r24, 0x61	; 97
    4e14:	91 05       	cpc	r25, r1
    4e16:	cc f5       	brge	.+114    	; 0x4e8a <__vector_24+0xac>
    4e18:	88 32       	cpi	r24, 0x28	; 40
    4e1a:	91 05       	cpc	r25, r1
    4e1c:	09 f4       	brne	.+2      	; 0x4e20 <__vector_24+0x42>
    4e1e:	7b c0       	rjmp	.+246    	; 0x4f16 <__vector_24+0x138>
    4e20:	89 32       	cpi	r24, 0x29	; 41
    4e22:	91 05       	cpc	r25, r1
    4e24:	b4 f4       	brge	.+44     	; 0x4e52 <__vector_24+0x74>
    4e26:	80 31       	cpi	r24, 0x10	; 16
    4e28:	91 05       	cpc	r25, r1
    4e2a:	09 f4       	brne	.+2      	; 0x4e2e <__vector_24+0x50>
    4e2c:	6f c0       	rjmp	.+222    	; 0x4f0c <__vector_24+0x12e>
    4e2e:	81 31       	cpi	r24, 0x11	; 17
    4e30:	91 05       	cpc	r25, r1
    4e32:	3c f4       	brge	.+14     	; 0x4e42 <__vector_24+0x64>
    4e34:	00 97       	sbiw	r24, 0x00	; 0
    4e36:	09 f4       	brne	.+2      	; 0x4e3a <__vector_24+0x5c>
    4e38:	47 c1       	rjmp	.+654    	; 0x50c8 <__vector_24+0x2ea>
    4e3a:	08 97       	sbiw	r24, 0x08	; 8
    4e3c:	09 f0       	breq	.+2      	; 0x4e40 <__vector_24+0x62>
    4e3e:	4f c1       	rjmp	.+670    	; 0x50de <__vector_24+0x300>
    4e40:	65 c0       	rjmp	.+202    	; 0x4f0c <__vector_24+0x12e>
    4e42:	88 31       	cpi	r24, 0x18	; 24
    4e44:	91 05       	cpc	r25, r1
    4e46:	09 f4       	brne	.+2      	; 0x4e4a <__vector_24+0x6c>
    4e48:	66 c0       	rjmp	.+204    	; 0x4f16 <__vector_24+0x138>
    4e4a:	80 97       	sbiw	r24, 0x20	; 32
    4e4c:	09 f0       	breq	.+2      	; 0x4e50 <__vector_24+0x72>
    4e4e:	47 c1       	rjmp	.+654    	; 0x50de <__vector_24+0x300>
    4e50:	82 c0       	rjmp	.+260    	; 0x4f56 <__vector_24+0x178>
    4e52:	80 34       	cpi	r24, 0x40	; 64
    4e54:	91 05       	cpc	r25, r1
    4e56:	09 f4       	brne	.+2      	; 0x4e5a <__vector_24+0x7c>
    4e58:	a4 c0       	rjmp	.+328    	; 0x4fa2 <__vector_24+0x1c4>
    4e5a:	81 34       	cpi	r24, 0x41	; 65
    4e5c:	91 05       	cpc	r25, r1
    4e5e:	44 f4       	brge	.+16     	; 0x4e70 <__vector_24+0x92>
    4e60:	80 33       	cpi	r24, 0x30	; 48
    4e62:	91 05       	cpc	r25, r1
    4e64:	09 f4       	brne	.+2      	; 0x4e68 <__vector_24+0x8a>
    4e66:	82 c0       	rjmp	.+260    	; 0x4f6c <__vector_24+0x18e>
    4e68:	c8 97       	sbiw	r24, 0x38	; 56
    4e6a:	09 f0       	breq	.+2      	; 0x4e6e <__vector_24+0x90>
    4e6c:	38 c1       	rjmp	.+624    	; 0x50de <__vector_24+0x300>
    4e6e:	89 c0       	rjmp	.+274    	; 0x4f82 <__vector_24+0x1a4>
    4e70:	80 35       	cpi	r24, 0x50	; 80
    4e72:	91 05       	cpc	r25, r1
    4e74:	09 f4       	brne	.+2      	; 0x4e78 <__vector_24+0x9a>
    4e76:	89 c0       	rjmp	.+274    	; 0x4f8a <__vector_24+0x1ac>
    4e78:	88 35       	cpi	r24, 0x58	; 88
    4e7a:	91 05       	cpc	r25, r1
    4e7c:	09 f4       	brne	.+2      	; 0x4e80 <__vector_24+0xa2>
    4e7e:	96 c0       	rjmp	.+300    	; 0x4fac <__vector_24+0x1ce>
    4e80:	88 34       	cpi	r24, 0x48	; 72
    4e82:	91 05       	cpc	r25, r1
    4e84:	09 f0       	breq	.+2      	; 0x4e88 <__vector_24+0xaa>
    4e86:	2b c1       	rjmp	.+598    	; 0x50de <__vector_24+0x300>
    4e88:	ae c0       	rjmp	.+348    	; 0x4fe6 <__vector_24+0x208>
    4e8a:	88 39       	cpi	r24, 0x98	; 152
    4e8c:	91 05       	cpc	r25, r1
    4e8e:	09 f4       	brne	.+2      	; 0x4e92 <__vector_24+0xb4>
    4e90:	13 c1       	rjmp	.+550    	; 0x50b8 <__vector_24+0x2da>
    4e92:	89 39       	cpi	r24, 0x99	; 153
    4e94:	91 05       	cpc	r25, r1
    4e96:	ec f4       	brge	.+58     	; 0x4ed2 <__vector_24+0xf4>
    4e98:	88 37       	cpi	r24, 0x78	; 120
    4e9a:	91 05       	cpc	r25, r1
    4e9c:	09 f4       	brne	.+2      	; 0x4ea0 <__vector_24+0xc2>
    4e9e:	ab c0       	rjmp	.+342    	; 0x4ff6 <__vector_24+0x218>
    4ea0:	89 37       	cpi	r24, 0x79	; 121
    4ea2:	91 05       	cpc	r25, r1
    4ea4:	4c f4       	brge	.+18     	; 0x4eb8 <__vector_24+0xda>
    4ea6:	88 36       	cpi	r24, 0x68	; 104
    4ea8:	91 05       	cpc	r25, r1
    4eaa:	09 f4       	brne	.+2      	; 0x4eae <__vector_24+0xd0>
    4eac:	a4 c0       	rjmp	.+328    	; 0x4ff6 <__vector_24+0x218>
    4eae:	80 37       	cpi	r24, 0x70	; 112
    4eb0:	91 05       	cpc	r25, r1
    4eb2:	09 f0       	breq	.+2      	; 0x4eb6 <__vector_24+0xd8>
    4eb4:	14 c1       	rjmp	.+552    	; 0x50de <__vector_24+0x300>
    4eb6:	9f c0       	rjmp	.+318    	; 0x4ff6 <__vector_24+0x218>
    4eb8:	88 38       	cpi	r24, 0x88	; 136
    4eba:	91 05       	cpc	r25, r1
    4ebc:	09 f4       	brne	.+2      	; 0x4ec0 <__vector_24+0xe2>
    4ebe:	fc c0       	rjmp	.+504    	; 0x50b8 <__vector_24+0x2da>
    4ec0:	80 39       	cpi	r24, 0x90	; 144
    4ec2:	91 05       	cpc	r25, r1
    4ec4:	09 f4       	brne	.+2      	; 0x4ec8 <__vector_24+0xea>
    4ec6:	9d c0       	rjmp	.+314    	; 0x5002 <__vector_24+0x224>
    4ec8:	80 38       	cpi	r24, 0x80	; 128
    4eca:	91 05       	cpc	r25, r1
    4ecc:	09 f0       	breq	.+2      	; 0x4ed0 <__vector_24+0xf2>
    4ece:	07 c1       	rjmp	.+526    	; 0x50de <__vector_24+0x300>
    4ed0:	98 c0       	rjmp	.+304    	; 0x5002 <__vector_24+0x224>
    4ed2:	80 3b       	cpi	r24, 0xB0	; 176
    4ed4:	91 05       	cpc	r25, r1
    4ed6:	09 f4       	brne	.+2      	; 0x4eda <__vector_24+0xfc>
    4ed8:	c6 c0       	rjmp	.+396    	; 0x5066 <__vector_24+0x288>
    4eda:	81 3b       	cpi	r24, 0xB1	; 177
    4edc:	91 05       	cpc	r25, r1
    4ede:	4c f4       	brge	.+18     	; 0x4ef2 <__vector_24+0x114>
    4ee0:	80 3a       	cpi	r24, 0xA0	; 160
    4ee2:	91 05       	cpc	r25, r1
    4ee4:	09 f4       	brne	.+2      	; 0x4ee8 <__vector_24+0x10a>
    4ee6:	9f c0       	rjmp	.+318    	; 0x5026 <__vector_24+0x248>
    4ee8:	88 3a       	cpi	r24, 0xA8	; 168
    4eea:	91 05       	cpc	r25, r1
    4eec:	09 f0       	breq	.+2      	; 0x4ef0 <__vector_24+0x112>
    4eee:	f7 c0       	rjmp	.+494    	; 0x50de <__vector_24+0x300>
    4ef0:	ba c0       	rjmp	.+372    	; 0x5066 <__vector_24+0x288>
    4ef2:	80 3c       	cpi	r24, 0xC0	; 192
    4ef4:	91 05       	cpc	r25, r1
    4ef6:	09 f4       	brne	.+2      	; 0x4efa <__vector_24+0x11c>
    4ef8:	e3 c0       	rjmp	.+454    	; 0x50c0 <__vector_24+0x2e2>
    4efa:	88 3c       	cpi	r24, 0xC8	; 200
    4efc:	91 05       	cpc	r25, r1
    4efe:	09 f4       	brne	.+2      	; 0x4f02 <__vector_24+0x124>
    4f00:	df c0       	rjmp	.+446    	; 0x50c0 <__vector_24+0x2e2>
    4f02:	88 3b       	cpi	r24, 0xB8	; 184
    4f04:	91 05       	cpc	r25, r1
    4f06:	09 f0       	breq	.+2      	; 0x4f0a <__vector_24+0x12c>
    4f08:	ea c0       	rjmp	.+468    	; 0x50de <__vector_24+0x300>
    4f0a:	c2 c0       	rjmp	.+388    	; 0x5090 <__vector_24+0x2b2>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    4f0c:	80 91 be 02 	lds	r24, 0x02BE
    4f10:	80 93 bb 00 	sts	0x00BB, r24
    4f14:	cf c0       	rjmp	.+414    	; 0x50b4 <__vector_24+0x2d6>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4f16:	90 91 e5 02 	lds	r25, 0x02E5
    4f1a:	80 91 e6 02 	lds	r24, 0x02E6
    4f1e:	98 17       	cp	r25, r24
    4f20:	68 f4       	brcc	.+26     	; 0x4f3c <__vector_24+0x15e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    4f22:	90 91 e5 02 	lds	r25, 0x02E5
    4f26:	e9 2f       	mov	r30, r25
    4f28:	f0 e0       	ldi	r31, 0x00	; 0
    4f2a:	eb 53       	subi	r30, 0x3B	; 59
    4f2c:	fd 4f       	sbci	r31, 0xFD	; 253
    4f2e:	80 81       	ld	r24, Z
    4f30:	80 93 bb 00 	sts	0x00BB, r24
    4f34:	9f 5f       	subi	r25, 0xFF	; 255
    4f36:	90 93 e5 02 	sts	0x02E5, r25
    4f3a:	bc c0       	rjmp	.+376    	; 0x50b4 <__vector_24+0x2d6>
        twi_reply(1);
      }else{
	if (twi_sendStop)
    4f3c:	80 91 bf 02 	lds	r24, 0x02BF
    4f40:	88 23       	and	r24, r24
    4f42:	09 f4       	brne	.+2      	; 0x4f46 <__vector_24+0x168>
    4f44:	4b c0       	rjmp	.+150    	; 0x4fdc <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4f46:	85 ed       	ldi	r24, 0xD5	; 213
    4f48:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4f4c:	80 91 bc 00 	lds	r24, 0x00BC
    4f50:	84 fd       	sbrc	r24, 4
    4f52:	fc cf       	rjmp	.-8      	; 0x4f4c <__vector_24+0x16e>
    4f54:	c2 c0       	rjmp	.+388    	; 0x50da <__vector_24+0x2fc>
	  twi_state = TWI_READY;
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    4f56:	80 e2       	ldi	r24, 0x20	; 32
    4f58:	80 93 2a 03 	sts	0x032A, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4f5c:	85 ed       	ldi	r24, 0xD5	; 213
    4f5e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4f62:	80 91 bc 00 	lds	r24, 0x00BC
    4f66:	84 fd       	sbrc	r24, 4
    4f68:	fc cf       	rjmp	.-8      	; 0x4f62 <__vector_24+0x184>
    4f6a:	b7 c0       	rjmp	.+366    	; 0x50da <__vector_24+0x2fc>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4f6c:	80 e3       	ldi	r24, 0x30	; 48
    4f6e:	80 93 2a 03 	sts	0x032A, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4f72:	85 ed       	ldi	r24, 0xD5	; 213
    4f74:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4f78:	80 91 bc 00 	lds	r24, 0x00BC
    4f7c:	84 fd       	sbrc	r24, 4
    4f7e:	fc cf       	rjmp	.-8      	; 0x4f78 <__vector_24+0x19a>
    4f80:	ac c0       	rjmp	.+344    	; 0x50da <__vector_24+0x2fc>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    4f82:	88 e3       	ldi	r24, 0x38	; 56
    4f84:	80 93 2a 03 	sts	0x032A, r24
    4f88:	9b c0       	rjmp	.+310    	; 0x50c0 <__vector_24+0x2e2>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4f8a:	80 91 e5 02 	lds	r24, 0x02E5
    4f8e:	90 91 bb 00 	lds	r25, 0x00BB
    4f92:	e8 2f       	mov	r30, r24
    4f94:	f0 e0       	ldi	r31, 0x00	; 0
    4f96:	eb 53       	subi	r30, 0x3B	; 59
    4f98:	fd 4f       	sbci	r31, 0xFD	; 253
    4f9a:	90 83       	st	Z, r25
    4f9c:	8f 5f       	subi	r24, 0xFF	; 255
    4f9e:	80 93 e5 02 	sts	0x02E5, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4fa2:	90 91 e5 02 	lds	r25, 0x02E5
    4fa6:	80 91 e6 02 	lds	r24, 0x02E6
    4faa:	82 c0       	rjmp	.+260    	; 0x50b0 <__vector_24+0x2d2>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4fac:	80 91 e5 02 	lds	r24, 0x02E5
    4fb0:	90 91 bb 00 	lds	r25, 0x00BB
    4fb4:	e8 2f       	mov	r30, r24
    4fb6:	f0 e0       	ldi	r31, 0x00	; 0
    4fb8:	eb 53       	subi	r30, 0x3B	; 59
    4fba:	fd 4f       	sbci	r31, 0xFD	; 253
    4fbc:	90 83       	st	Z, r25
    4fbe:	8f 5f       	subi	r24, 0xFF	; 255
    4fc0:	80 93 e5 02 	sts	0x02E5, r24
	if (twi_sendStop)
    4fc4:	80 91 bf 02 	lds	r24, 0x02BF
    4fc8:	88 23       	and	r24, r24
    4fca:	41 f0       	breq	.+16     	; 0x4fdc <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4fcc:	85 ed       	ldi	r24, 0xD5	; 213
    4fce:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4fd2:	80 91 bc 00 	lds	r24, 0x00BC
    4fd6:	84 fd       	sbrc	r24, 4
    4fd8:	fc cf       	rjmp	.-8      	; 0x4fd2 <__vector_24+0x1f4>
    4fda:	7f c0       	rjmp	.+254    	; 0x50da <__vector_24+0x2fc>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    4fdc:	81 e0       	ldi	r24, 0x01	; 1
    4fde:	80 93 c0 02 	sts	0x02C0, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4fe2:	84 ea       	ldi	r24, 0xA4	; 164
    4fe4:	6e c0       	rjmp	.+220    	; 0x50c2 <__vector_24+0x2e4>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4fe6:	85 ed       	ldi	r24, 0xD5	; 213
    4fe8:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4fec:	80 91 bc 00 	lds	r24, 0x00BC
    4ff0:	84 fd       	sbrc	r24, 4
    4ff2:	fc cf       	rjmp	.-8      	; 0x4fec <__vector_24+0x20e>
    4ff4:	72 c0       	rjmp	.+228    	; 0x50da <__vector_24+0x2fc>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    4ff6:	83 e0       	ldi	r24, 0x03	; 3
    4ff8:	80 93 bd 02 	sts	0x02BD, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    4ffc:	10 92 29 03 	sts	0x0329, r1
    5000:	59 c0       	rjmp	.+178    	; 0x50b4 <__vector_24+0x2d6>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    5002:	80 91 29 03 	lds	r24, 0x0329
    5006:	80 32       	cpi	r24, 0x20	; 32
    5008:	08 f0       	brcs	.+2      	; 0x500c <__vector_24+0x22e>
    500a:	56 c0       	rjmp	.+172    	; 0x50b8 <__vector_24+0x2da>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    500c:	80 91 29 03 	lds	r24, 0x0329
    5010:	90 91 bb 00 	lds	r25, 0x00BB
    5014:	e8 2f       	mov	r30, r24
    5016:	f0 e0       	ldi	r31, 0x00	; 0
    5018:	e7 5f       	subi	r30, 0xF7	; 247
    501a:	fc 4f       	sbci	r31, 0xFC	; 252
    501c:	90 83       	st	Z, r25
    501e:	8f 5f       	subi	r24, 0xFF	; 255
    5020:	80 93 29 03 	sts	0x0329, r24
    5024:	47 c0       	rjmp	.+142    	; 0x50b4 <__vector_24+0x2d6>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    5026:	80 91 29 03 	lds	r24, 0x0329
    502a:	80 32       	cpi	r24, 0x20	; 32
    502c:	30 f4       	brcc	.+12     	; 0x503a <__vector_24+0x25c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    502e:	e0 91 29 03 	lds	r30, 0x0329
    5032:	f0 e0       	ldi	r31, 0x00	; 0
    5034:	e7 5f       	subi	r30, 0xF7	; 247
    5036:	fc 4f       	sbci	r31, 0xFC	; 252
    5038:	10 82       	st	Z, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    503a:	85 ed       	ldi	r24, 0xD5	; 213
    503c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    5040:	80 91 bc 00 	lds	r24, 0x00BC
    5044:	84 fd       	sbrc	r24, 4
    5046:	fc cf       	rjmp	.-8      	; 0x5040 <__vector_24+0x262>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    5048:	10 92 bd 02 	sts	0x02BD, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    504c:	60 91 29 03 	lds	r22, 0x0329
    5050:	e0 91 c3 02 	lds	r30, 0x02C3
    5054:	f0 91 c4 02 	lds	r31, 0x02C4
    5058:	89 e0       	ldi	r24, 0x09	; 9
    505a:	93 e0       	ldi	r25, 0x03	; 3
    505c:	70 e0       	ldi	r23, 0x00	; 0
    505e:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    5060:	10 92 29 03 	sts	0x0329, r1
    5064:	2d c0       	rjmp	.+90     	; 0x50c0 <__vector_24+0x2e2>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    5066:	84 e0       	ldi	r24, 0x04	; 4
    5068:	80 93 bd 02 	sts	0x02BD, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    506c:	10 92 07 03 	sts	0x0307, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    5070:	10 92 08 03 	sts	0x0308, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    5074:	e0 91 c1 02 	lds	r30, 0x02C1
    5078:	f0 91 c2 02 	lds	r31, 0x02C2
    507c:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    507e:	80 91 08 03 	lds	r24, 0x0308
    5082:	88 23       	and	r24, r24
    5084:	29 f4       	brne	.+10     	; 0x5090 <__vector_24+0x2b2>
        twi_txBufferLength = 1;
    5086:	81 e0       	ldi	r24, 0x01	; 1
    5088:	80 93 08 03 	sts	0x0308, r24
        twi_txBuffer[0] = 0x00;
    508c:	10 92 e7 02 	sts	0x02E7, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    5090:	90 91 07 03 	lds	r25, 0x0307
    5094:	e9 2f       	mov	r30, r25
    5096:	f0 e0       	ldi	r31, 0x00	; 0
    5098:	e9 51       	subi	r30, 0x19	; 25
    509a:	fd 4f       	sbci	r31, 0xFD	; 253
    509c:	80 81       	ld	r24, Z
    509e:	80 93 bb 00 	sts	0x00BB, r24
    50a2:	9f 5f       	subi	r25, 0xFF	; 255
    50a4:	90 93 07 03 	sts	0x0307, r25
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    50a8:	90 91 07 03 	lds	r25, 0x0307
    50ac:	80 91 08 03 	lds	r24, 0x0308
    50b0:	98 17       	cp	r25, r24
    50b2:	10 f4       	brcc	.+4      	; 0x50b8 <__vector_24+0x2da>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    50b4:	85 ec       	ldi	r24, 0xC5	; 197
    50b6:	01 c0       	rjmp	.+2      	; 0x50ba <__vector_24+0x2dc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    50b8:	85 e8       	ldi	r24, 0x85	; 133
    50ba:	80 93 bc 00 	sts	0x00BC, r24
    50be:	0f c0       	rjmp	.+30     	; 0x50de <__vector_24+0x300>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    50c0:	85 ec       	ldi	r24, 0xC5	; 197
    50c2:	80 93 bc 00 	sts	0x00BC, r24
    50c6:	09 c0       	rjmp	.+18     	; 0x50da <__vector_24+0x2fc>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    50c8:	10 92 2a 03 	sts	0x032A, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    50cc:	85 ed       	ldi	r24, 0xD5	; 213
    50ce:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    50d2:	80 91 bc 00 	lds	r24, 0x00BC
    50d6:	84 fd       	sbrc	r24, 4
    50d8:	fc cf       	rjmp	.-8      	; 0x50d2 <__vector_24+0x2f4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    50da:	10 92 bd 02 	sts	0x02BD, r1
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    50de:	ff 91       	pop	r31
    50e0:	ef 91       	pop	r30
    50e2:	bf 91       	pop	r27
    50e4:	af 91       	pop	r26
    50e6:	9f 91       	pop	r25
    50e8:	8f 91       	pop	r24
    50ea:	7f 91       	pop	r23
    50ec:	6f 91       	pop	r22
    50ee:	5f 91       	pop	r21
    50f0:	4f 91       	pop	r20
    50f2:	3f 91       	pop	r19
    50f4:	2f 91       	pop	r18
    50f6:	0f 90       	pop	r0
    50f8:	0f be       	out	0x3f, r0	; 63
    50fa:	0f 90       	pop	r0
    50fc:	1f 90       	pop	r1
    50fe:	18 95       	reti

00005100 <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    5100:	10 92 bd 02 	sts	0x02BD, r1
  twi_sendStop = true;		// default value
    5104:	81 e0       	ldi	r24, 0x01	; 1
    5106:	80 93 bf 02 	sts	0x02BF, r24
  twi_inRepStart = false;
    510a:	10 92 c0 02 	sts	0x02C0, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    510e:	82 e1       	ldi	r24, 0x12	; 18
    5110:	61 e0       	ldi	r22, 0x01	; 1
    5112:	0e 94 1d 31 	call	0x623a	; 0x623a <digitalWrite>
  digitalWrite(SCL, 1);
    5116:	83 e1       	ldi	r24, 0x13	; 19
    5118:	61 e0       	ldi	r22, 0x01	; 1
    511a:	0e 94 1d 31 	call	0x623a	; 0x623a <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    511e:	e9 eb       	ldi	r30, 0xB9	; 185
    5120:	f0 e0       	ldi	r31, 0x00	; 0
    5122:	80 81       	ld	r24, Z
    5124:	8e 7f       	andi	r24, 0xFE	; 254
    5126:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    5128:	80 81       	ld	r24, Z
    512a:	8d 7f       	andi	r24, 0xFD	; 253
    512c:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    512e:	88 e4       	ldi	r24, 0x48	; 72
    5130:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    5134:	85 e4       	ldi	r24, 0x45	; 69
    5136:	80 93 bc 00 	sts	0x00BC, r24
}
    513a:	08 95       	ret

0000513c <_ZN9DS1307RTC4readER12tmElements_t>:
  tm.Second &= 0x7f;  // start the clock
  write(tm); 
}

// Aquire data from the RTC chip in BCD format
bool DS1307RTC::read(tmElements_t &tm)
    513c:	0f 93       	push	r16
    513e:	1f 93       	push	r17
    5140:	cf 93       	push	r28
    5142:	df 93       	push	r29
    5144:	ec 01       	movw	r28, r24
{
  uint8_t sec;
  Wire.beginTransmission(DS1307_CTRL_ID);
    5146:	81 eb       	ldi	r24, 0xB1	; 177
    5148:	92 e0       	ldi	r25, 0x02	; 2
    514a:	68 e6       	ldi	r22, 0x68	; 104
    514c:	70 e0       	ldi	r23, 0x00	; 0
    514e:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <_ZN7TwoWire17beginTransmissionEi>
#if ARDUINO >= 100  
  Wire.write((uint8_t)0x00); 
    5152:	81 eb       	ldi	r24, 0xB1	; 177
    5154:	92 e0       	ldi	r25, 0x02	; 2
    5156:	60 e0       	ldi	r22, 0x00	; 0
    5158:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <_ZN7TwoWire5writeEh>
#else
  Wire.send(0x00);
#endif  
  if (Wire.endTransmission() != 0) {
    515c:	81 eb       	ldi	r24, 0xB1	; 177
    515e:	92 e0       	ldi	r25, 0x02	; 2
    5160:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <_ZN7TwoWire15endTransmissionEv>
    5164:	88 23       	and	r24, r24
    5166:	19 f0       	breq	.+6      	; 0x516e <_ZN9DS1307RTC4readER12tmElements_t+0x32>
    exists = false;
    5168:	10 92 2b 03 	sts	0x032B, r1
    516c:	11 c0       	rjmp	.+34     	; 0x5190 <_ZN9DS1307RTC4readER12tmElements_t+0x54>
    return false;
  }
  exists = true;
    516e:	81 e0       	ldi	r24, 0x01	; 1
    5170:	80 93 2b 03 	sts	0x032B, r24

  // request the 7 data fields   (secs, min, hr, dow, date, mth, yr)
  Wire.requestFrom(DS1307_CTRL_ID, tmNbrFields);
    5174:	81 eb       	ldi	r24, 0xB1	; 177
    5176:	92 e0       	ldi	r25, 0x02	; 2
    5178:	68 e6       	ldi	r22, 0x68	; 104
    517a:	70 e0       	ldi	r23, 0x00	; 0
    517c:	47 e0       	ldi	r20, 0x07	; 7
    517e:	50 e0       	ldi	r21, 0x00	; 0
    5180:	0e 94 27 26 	call	0x4c4e	; 0x4c4e <_ZN7TwoWire11requestFromEii>
  if (Wire.available() < tmNbrFields) return false;
    5184:	81 eb       	ldi	r24, 0xB1	; 177
    5186:	92 e0       	ldi	r25, 0x02	; 2
    5188:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <_ZN7TwoWire9availableEv>
    518c:	07 97       	sbiw	r24, 0x07	; 7
    518e:	14 f4       	brge	.+4      	; 0x5194 <_ZN9DS1307RTC4readER12tmElements_t+0x58>
    5190:	80 e0       	ldi	r24, 0x00	; 0
    5192:	65 c0       	rjmp	.+202    	; 0x525e <_ZN9DS1307RTC4readER12tmElements_t+0x122>
#if ARDUINO >= 100
  sec = Wire.read();
    5194:	81 eb       	ldi	r24, 0xB1	; 177
    5196:	92 e0       	ldi	r25, 0x02	; 2
    5198:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <_ZN7TwoWire4readEv>
    519c:	08 2f       	mov	r16, r24
  tm.Second = bcd2dec(sec & 0x7f);   
    519e:	8f 77       	andi	r24, 0x7F	; 127
    51a0:	82 95       	swap	r24
    51a2:	8f 70       	andi	r24, 0x0F	; 15
    51a4:	1a e0       	ldi	r17, 0x0A	; 10
    51a6:	81 9f       	mul	r24, r17
    51a8:	c0 01       	movw	r24, r0
    51aa:	11 24       	eor	r1, r1
    51ac:	20 2f       	mov	r18, r16
    51ae:	2f 70       	andi	r18, 0x0F	; 15
    51b0:	28 0f       	add	r18, r24
    51b2:	28 83       	st	Y, r18
  tm.Minute = bcd2dec(Wire.read() );
    51b4:	81 eb       	ldi	r24, 0xB1	; 177
    51b6:	92 e0       	ldi	r25, 0x02	; 2
    51b8:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <_ZN7TwoWire4readEv>
    51bc:	28 2f       	mov	r18, r24
    51be:	22 95       	swap	r18
    51c0:	2f 70       	andi	r18, 0x0F	; 15
    51c2:	21 9f       	mul	r18, r17
    51c4:	90 01       	movw	r18, r0
    51c6:	11 24       	eor	r1, r1
    51c8:	8f 70       	andi	r24, 0x0F	; 15
    51ca:	82 0f       	add	r24, r18
    51cc:	89 83       	std	Y+1, r24	; 0x01
  tm.Hour =   bcd2dec(Wire.read() & 0x3f);  // mask assumes 24hr clock
    51ce:	81 eb       	ldi	r24, 0xB1	; 177
    51d0:	92 e0       	ldi	r25, 0x02	; 2
    51d2:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <_ZN7TwoWire4readEv>
    51d6:	28 2f       	mov	r18, r24
    51d8:	2f 73       	andi	r18, 0x3F	; 63
    51da:	22 95       	swap	r18
    51dc:	2f 70       	andi	r18, 0x0F	; 15
    51de:	21 9f       	mul	r18, r17
    51e0:	90 01       	movw	r18, r0
    51e2:	11 24       	eor	r1, r1
    51e4:	8f 70       	andi	r24, 0x0F	; 15
    51e6:	82 0f       	add	r24, r18
    51e8:	8a 83       	std	Y+2, r24	; 0x02
  tm.Wday = bcd2dec(Wire.read() );
    51ea:	81 eb       	ldi	r24, 0xB1	; 177
    51ec:	92 e0       	ldi	r25, 0x02	; 2
    51ee:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <_ZN7TwoWire4readEv>
    51f2:	28 2f       	mov	r18, r24
    51f4:	22 95       	swap	r18
    51f6:	2f 70       	andi	r18, 0x0F	; 15
    51f8:	21 9f       	mul	r18, r17
    51fa:	90 01       	movw	r18, r0
    51fc:	11 24       	eor	r1, r1
    51fe:	8f 70       	andi	r24, 0x0F	; 15
    5200:	82 0f       	add	r24, r18
    5202:	8b 83       	std	Y+3, r24	; 0x03
  tm.Day = bcd2dec(Wire.read() );
    5204:	81 eb       	ldi	r24, 0xB1	; 177
    5206:	92 e0       	ldi	r25, 0x02	; 2
    5208:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <_ZN7TwoWire4readEv>
    520c:	28 2f       	mov	r18, r24
    520e:	22 95       	swap	r18
    5210:	2f 70       	andi	r18, 0x0F	; 15
    5212:	21 9f       	mul	r18, r17
    5214:	90 01       	movw	r18, r0
    5216:	11 24       	eor	r1, r1
    5218:	8f 70       	andi	r24, 0x0F	; 15
    521a:	82 0f       	add	r24, r18
    521c:	8c 83       	std	Y+4, r24	; 0x04
  tm.Month = bcd2dec(Wire.read() );
    521e:	81 eb       	ldi	r24, 0xB1	; 177
    5220:	92 e0       	ldi	r25, 0x02	; 2
    5222:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <_ZN7TwoWire4readEv>
    5226:	28 2f       	mov	r18, r24
    5228:	22 95       	swap	r18
    522a:	2f 70       	andi	r18, 0x0F	; 15
    522c:	21 9f       	mul	r18, r17
    522e:	90 01       	movw	r18, r0
    5230:	11 24       	eor	r1, r1
    5232:	8f 70       	andi	r24, 0x0F	; 15
    5234:	82 0f       	add	r24, r18
    5236:	8d 83       	std	Y+5, r24	; 0x05
  tm.Year = y2kYearToTm((bcd2dec(Wire.read())));
    5238:	81 eb       	ldi	r24, 0xB1	; 177
    523a:	92 e0       	ldi	r25, 0x02	; 2
    523c:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <_ZN7TwoWire4readEv>
    5240:	28 2f       	mov	r18, r24
    5242:	2f 70       	andi	r18, 0x0F	; 15
    5244:	22 5e       	subi	r18, 0xE2	; 226
    5246:	82 95       	swap	r24
    5248:	8f 70       	andi	r24, 0x0F	; 15
    524a:	81 9f       	mul	r24, r17
    524c:	c0 01       	movw	r24, r0
    524e:	11 24       	eor	r1, r1
    5250:	28 0f       	add	r18, r24
    5252:	2e 83       	std	Y+6, r18	; 0x06
    5254:	80 2f       	mov	r24, r16
    5256:	80 95       	com	r24
    5258:	88 1f       	adc	r24, r24
    525a:	88 27       	eor	r24, r24
    525c:	88 1f       	adc	r24, r24
  tm.Month = bcd2dec(Wire.receive() );
  tm.Year = y2kYearToTm((bcd2dec(Wire.receive())));
#endif
  if (sec & 0x80) return false; // clock is halted
  return true;
}
    525e:	df 91       	pop	r29
    5260:	cf 91       	pop	r28
    5262:	1f 91       	pop	r17
    5264:	0f 91       	pop	r16
    5266:	08 95       	ret

00005268 <_ZN9DS1307RTC3getEv>:
{
  Wire.begin();
}
  
// PUBLIC FUNCTIONS
time_t DS1307RTC::get()   // Aquire data from buffer and convert to time_t
    5268:	0f 93       	push	r16
    526a:	1f 93       	push	r17
    526c:	df 93       	push	r29
    526e:	cf 93       	push	r28
    5270:	cd b7       	in	r28, 0x3d	; 61
    5272:	de b7       	in	r29, 0x3e	; 62
    5274:	27 97       	sbiw	r28, 0x07	; 7
    5276:	0f b6       	in	r0, 0x3f	; 63
    5278:	f8 94       	cli
    527a:	de bf       	out	0x3e, r29	; 62
    527c:	0f be       	out	0x3f, r0	; 63
    527e:	cd bf       	out	0x3d, r28	; 61
{
  tmElements_t tm;
  if (read(tm) == false) return 0;
    5280:	8e 01       	movw	r16, r28
    5282:	0f 5f       	subi	r16, 0xFF	; 255
    5284:	1f 4f       	sbci	r17, 0xFF	; 255
    5286:	c8 01       	movw	r24, r16
    5288:	0e 94 9e 28 	call	0x513c	; 0x513c <_ZN9DS1307RTC4readER12tmElements_t>
    528c:	88 23       	and	r24, r24
    528e:	29 f4       	brne	.+10     	; 0x529a <_ZN9DS1307RTC3getEv+0x32>
    5290:	20 e0       	ldi	r18, 0x00	; 0
    5292:	30 e0       	ldi	r19, 0x00	; 0
    5294:	40 e0       	ldi	r20, 0x00	; 0
    5296:	50 e0       	ldi	r21, 0x00	; 0
    5298:	05 c0       	rjmp	.+10     	; 0x52a4 <_ZN9DS1307RTC3getEv+0x3c>
  return(makeTime(tm));
    529a:	c8 01       	movw	r24, r16
    529c:	0e 94 04 20 	call	0x4008	; 0x4008 <_Z8makeTimeR12tmElements_t>
    52a0:	9b 01       	movw	r18, r22
    52a2:	ac 01       	movw	r20, r24
}
    52a4:	b9 01       	movw	r22, r18
    52a6:	ca 01       	movw	r24, r20
    52a8:	27 96       	adiw	r28, 0x07	; 7
    52aa:	0f b6       	in	r0, 0x3f	; 63
    52ac:	f8 94       	cli
    52ae:	de bf       	out	0x3e, r29	; 62
    52b0:	0f be       	out	0x3f, r0	; 63
    52b2:	cd bf       	out	0x3d, r28	; 61
    52b4:	cf 91       	pop	r28
    52b6:	df 91       	pop	r29
    52b8:	1f 91       	pop	r17
    52ba:	0f 91       	pop	r16
    52bc:	08 95       	ret

000052be <_GLOBAL__I__ZN9DS1307RTCC2Ev>:

#define DS1307_CTRL_ID 0x68 

DS1307RTC::DS1307RTC()
{
  Wire.begin();
    52be:	81 eb       	ldi	r24, 0xB1	; 177
    52c0:	92 e0       	ldi	r25, 0x02	; 2
    52c2:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <_ZN7TwoWire5beginEv>
  return ((num/16 * 10) + (num % 16));
}

bool DS1307RTC::exists = false;

DS1307RTC RTC = DS1307RTC(); // create an instance for the user
    52c6:	08 95       	ret

000052c8 <_ZN7OneWire12reset_searchEv>:

//
// You need to use this function to start a search again from the beginning.
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
    52c8:	fc 01       	movw	r30, r24
{
  // reset the search state
  LastDiscrepancy = 0;
    52ca:	13 86       	std	Z+11, r1	; 0x0b
  LastDeviceFlag = FALSE;
    52cc:	15 86       	std	Z+13, r1	; 0x0d
  LastFamilyDiscrepancy = 0;
    52ce:	14 86       	std	Z+12, r1	; 0x0c
    52d0:	87 e0       	ldi	r24, 0x07	; 7
    52d2:	90 e0       	ldi	r25, 0x00	; 0
  for(int i = 7; ; i--) {
    ROM_NO[i] = 0;
    52d4:	12 86       	std	Z+10, r1	; 0x0a
    52d6:	31 97       	sbiw	r30, 0x01	; 1
    if ( i == 0) break;
    52d8:	00 97       	sbiw	r24, 0x00	; 0
    52da:	11 f0       	breq	.+4      	; 0x52e0 <_ZN7OneWire12reset_searchEv+0x18>
{
  // reset the search state
  LastDiscrepancy = 0;
  LastDeviceFlag = FALSE;
  LastFamilyDiscrepancy = 0;
  for(int i = 7; ; i--) {
    52dc:	01 97       	sbiw	r24, 0x01	; 1
    52de:	fa cf       	rjmp	.-12     	; 0x52d4 <_ZN7OneWire12reset_searchEv+0xc>
    52e0:	08 95       	ret

000052e2 <_ZN7OneWire4crc8EPKhh>:
// and the registers.  (note: this might better be done without to
// table, it would probably be smaller and certainly fast enough
// compared to all those delayMicrosecond() calls.  But I got
// confused, so I use this table from the examples.)
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
    52e2:	dc 01       	movw	r26, r24
    52e4:	80 e0       	ldi	r24, 0x00	; 0
    52e6:	0b c0       	rjmp	.+22     	; 0x52fe <_ZN7OneWire4crc8EPKhh+0x1c>
{
	uint8_t crc = 0;

	while (len--) {
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
    52e8:	e8 2f       	mov	r30, r24
    52ea:	f0 e0       	ldi	r31, 0x00	; 0
    52ec:	8d 91       	ld	r24, X+
    52ee:	90 e0       	ldi	r25, 0x00	; 0
    52f0:	e8 27       	eor	r30, r24
    52f2:	f9 27       	eor	r31, r25
    52f4:	e5 53       	subi	r30, 0x35	; 53
    52f6:	f7 4f       	sbci	r31, 0xF7	; 247
    52f8:	e4 91       	lpm	r30, Z+
    52fa:	61 50       	subi	r22, 0x01	; 1
    52fc:	8e 2f       	mov	r24, r30
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;

	while (len--) {
    52fe:	66 23       	and	r22, r22
    5300:	99 f7       	brne	.-26     	; 0x52e8 <_ZN7OneWire4crc8EPKhh+0x6>
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
	}
	return crc;
}
    5302:	08 95       	ret

00005304 <_ZN7OneWire8read_bitEv>:

//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
    5304:	df 92       	push	r13
    5306:	ef 92       	push	r14
    5308:	ff 92       	push	r15
    530a:	0f 93       	push	r16
    530c:	1f 93       	push	r17
    530e:	fc 01       	movw	r30, r24
{
	IO_REG_TYPE mask=bitmask;
    5310:	e0 80       	ld	r14, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    5312:	01 81       	ldd	r16, Z+1	; 0x01
    5314:	12 81       	ldd	r17, Z+2	; 0x02
	uint8_t r;

	noInterrupts();
    5316:	f8 94       	cli
	DIRECT_MODE_OUTPUT(reg, mask);
    5318:	f8 01       	movw	r30, r16
    531a:	81 81       	ldd	r24, Z+1	; 0x01
    531c:	8e 29       	or	r24, r14
    531e:	81 83       	std	Z+1, r24	; 0x01
	DIRECT_WRITE_LOW(reg, mask);
    5320:	82 81       	ldd	r24, Z+2	; 0x02
    5322:	de 2c       	mov	r13, r14
    5324:	d0 94       	com	r13
    5326:	8d 21       	and	r24, r13
    5328:	82 83       	std	Z+2, r24	; 0x02
	delayMicroseconds(3);
    532a:	83 e0       	ldi	r24, 0x03	; 3
    532c:	90 e0       	ldi	r25, 0x00	; 0
    532e:	0e 94 99 30 	call	0x6132	; 0x6132 <delayMicroseconds>
	DIRECT_MODE_INPUT(reg, mask);	// let pin float, pull up will raise
    5332:	f8 01       	movw	r30, r16
    5334:	81 81       	ldd	r24, Z+1	; 0x01
    5336:	8d 21       	and	r24, r13
    5338:	81 83       	std	Z+1, r24	; 0x01
	delayMicroseconds(10);
    533a:	8a e0       	ldi	r24, 0x0A	; 10
    533c:	90 e0       	ldi	r25, 0x00	; 0
    533e:	0e 94 99 30 	call	0x6132	; 0x6132 <delayMicroseconds>
	r = DIRECT_READ(reg, mask);
    5342:	f8 01       	movw	r30, r16
    5344:	00 81       	ld	r16, Z
	interrupts();
    5346:	78 94       	sei
	delayMicroseconds(53);
    5348:	85 e3       	ldi	r24, 0x35	; 53
    534a:	90 e0       	ldi	r25, 0x00	; 0
    534c:	0e 94 99 30 	call	0x6132	; 0x6132 <delayMicroseconds>
    5350:	80 e0       	ldi	r24, 0x00	; 0
    5352:	10 e0       	ldi	r17, 0x00	; 0
    5354:	ff 24       	eor	r15, r15
    5356:	0e 21       	and	r16, r14
    5358:	1f 21       	and	r17, r15
    535a:	01 2b       	or	r16, r17
    535c:	09 f0       	breq	.+2      	; 0x5360 <_ZN7OneWire8read_bitEv+0x5c>
    535e:	81 e0       	ldi	r24, 0x01	; 1
	return r;
}
    5360:	1f 91       	pop	r17
    5362:	0f 91       	pop	r16
    5364:	ff 90       	pop	r15
    5366:	ef 90       	pop	r14
    5368:	df 90       	pop	r13
    536a:	08 95       	ret

0000536c <_ZN7OneWire4readEv>:
}

//
// Read a byte
//
uint8_t OneWire::read() {
    536c:	ef 92       	push	r14
    536e:	ff 92       	push	r15
    5370:	0f 93       	push	r16
    5372:	1f 93       	push	r17
    5374:	cf 93       	push	r28
    5376:	df 93       	push	r29
    5378:	7c 01       	movw	r14, r24
    537a:	01 e0       	ldi	r16, 0x01	; 1
    537c:	10 e0       	ldi	r17, 0x00	; 0
    537e:	c0 e0       	ldi	r28, 0x00	; 0
    5380:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
	if ( OneWire::read_bit()) r |= bitMask;
    5382:	c7 01       	movw	r24, r14
    5384:	0e 94 82 29 	call	0x5304	; 0x5304 <_ZN7OneWire8read_bitEv>
    5388:	81 11       	cpse	r24, r1
    538a:	10 2b       	or	r17, r16
//
uint8_t OneWire::read() {
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    538c:	00 0f       	add	r16, r16
    538e:	21 96       	adiw	r28, 0x01	; 1
    5390:	c8 30       	cpi	r28, 0x08	; 8
    5392:	d1 05       	cpc	r29, r1
    5394:	b1 f7       	brne	.-20     	; 0x5382 <_ZN7OneWire4readEv+0x16>
	if ( OneWire::read_bit()) r |= bitMask;
    }
    return r;
}
    5396:	81 2f       	mov	r24, r17
    5398:	df 91       	pop	r29
    539a:	cf 91       	pop	r28
    539c:	1f 91       	pop	r17
    539e:	0f 91       	pop	r16
    53a0:	ff 90       	pop	r15
    53a2:	ef 90       	pop	r14
    53a4:	08 95       	ret

000053a6 <_ZN7OneWire9write_bitEh>:

//
// Write a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
void OneWire::write_bit(uint8_t v)
    53a6:	1f 93       	push	r17
    53a8:	cf 93       	push	r28
    53aa:	df 93       	push	r29
    53ac:	fc 01       	movw	r30, r24
{
	IO_REG_TYPE mask=bitmask;
    53ae:	10 81       	ld	r17, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    53b0:	c1 81       	ldd	r28, Z+1	; 0x01
    53b2:	d2 81       	ldd	r29, Z+2	; 0x02
    53b4:	91 2f       	mov	r25, r17
    53b6:	90 95       	com	r25

	if (v & 1) {
    53b8:	60 ff       	sbrs	r22, 0
    53ba:	12 c0       	rjmp	.+36     	; 0x53e0 <_ZN7OneWire9write_bitEh+0x3a>
		noInterrupts();
    53bc:	f8 94       	cli
		DIRECT_WRITE_LOW(reg, mask);
    53be:	8a 81       	ldd	r24, Y+2	; 0x02
    53c0:	89 23       	and	r24, r25
    53c2:	8a 83       	std	Y+2, r24	; 0x02
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    53c4:	89 81       	ldd	r24, Y+1	; 0x01
    53c6:	81 2b       	or	r24, r17
    53c8:	89 83       	std	Y+1, r24	; 0x01
		delayMicroseconds(10);
    53ca:	8a e0       	ldi	r24, 0x0A	; 10
    53cc:	90 e0       	ldi	r25, 0x00	; 0
    53ce:	0e 94 99 30 	call	0x6132	; 0x6132 <delayMicroseconds>
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
    53d2:	8a 81       	ldd	r24, Y+2	; 0x02
    53d4:	81 2b       	or	r24, r17
    53d6:	8a 83       	std	Y+2, r24	; 0x02
		interrupts();
    53d8:	78 94       	sei
		delayMicroseconds(55);
    53da:	87 e3       	ldi	r24, 0x37	; 55
    53dc:	90 e0       	ldi	r25, 0x00	; 0
    53de:	11 c0       	rjmp	.+34     	; 0x5402 <_ZN7OneWire9write_bitEh+0x5c>
	} else {
		noInterrupts();
    53e0:	f8 94       	cli
		DIRECT_WRITE_LOW(reg, mask);
    53e2:	8a 81       	ldd	r24, Y+2	; 0x02
    53e4:	89 23       	and	r24, r25
    53e6:	8a 83       	std	Y+2, r24	; 0x02
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    53e8:	89 81       	ldd	r24, Y+1	; 0x01
    53ea:	81 2b       	or	r24, r17
    53ec:	89 83       	std	Y+1, r24	; 0x01
		delayMicroseconds(65);
    53ee:	81 e4       	ldi	r24, 0x41	; 65
    53f0:	90 e0       	ldi	r25, 0x00	; 0
    53f2:	0e 94 99 30 	call	0x6132	; 0x6132 <delayMicroseconds>
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
    53f6:	8a 81       	ldd	r24, Y+2	; 0x02
    53f8:	81 2b       	or	r24, r17
    53fa:	8a 83       	std	Y+2, r24	; 0x02
		interrupts();
    53fc:	78 94       	sei
		delayMicroseconds(5);
    53fe:	85 e0       	ldi	r24, 0x05	; 5
    5400:	90 e0       	ldi	r25, 0x00	; 0
    5402:	0e 94 99 30 	call	0x6132	; 0x6132 <delayMicroseconds>
	}
}
    5406:	df 91       	pop	r29
    5408:	cf 91       	pop	r28
    540a:	1f 91       	pop	r17
    540c:	08 95       	ret

0000540e <_ZN7OneWire5writeEhh>:
// pin high, if you need power after the write (e.g. DS18S20 in
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) {
    540e:	cf 92       	push	r12
    5410:	df 92       	push	r13
    5412:	ef 92       	push	r14
    5414:	ff 92       	push	r15
    5416:	0f 93       	push	r16
    5418:	1f 93       	push	r17
    541a:	cf 93       	push	r28
    541c:	df 93       	push	r29
    541e:	8c 01       	movw	r16, r24
    5420:	e4 2e       	mov	r14, r20
    5422:	ff 24       	eor	r15, r15
    5424:	f3 94       	inc	r15
    5426:	c0 e0       	ldi	r28, 0x00	; 0
    5428:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
	OneWire::write_bit( (bitMask & v)?1:0);
    542a:	c6 2e       	mov	r12, r22
    542c:	dd 24       	eor	r13, r13
    542e:	60 e0       	ldi	r22, 0x00	; 0
    5430:	8f 2d       	mov	r24, r15
    5432:	90 e0       	ldi	r25, 0x00	; 0
    5434:	8c 21       	and	r24, r12
    5436:	9d 21       	and	r25, r13
    5438:	89 2b       	or	r24, r25
    543a:	09 f0       	breq	.+2      	; 0x543e <_ZN7OneWire5writeEhh+0x30>
    543c:	61 e0       	ldi	r22, 0x01	; 1
    543e:	c8 01       	movw	r24, r16
    5440:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <_ZN7OneWire9write_bitEh>
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) {
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    5444:	ff 0c       	add	r15, r15
    5446:	21 96       	adiw	r28, 0x01	; 1
    5448:	c8 30       	cpi	r28, 0x08	; 8
    544a:	d1 05       	cpc	r29, r1
    544c:	81 f7       	brne	.-32     	; 0x542e <_ZN7OneWire5writeEhh+0x20>
	OneWire::write_bit( (bitMask & v)?1:0);
    }
    if ( !power) {
    544e:	ee 20       	and	r14, r14
    5450:	a9 f4       	brne	.+42     	; 0x547c <_ZN7OneWire5writeEhh+0x6e>
	noInterrupts();
    5452:	f8 94       	cli
	DIRECT_MODE_INPUT(baseReg, bitmask);
    5454:	d8 01       	movw	r26, r16
    5456:	11 96       	adiw	r26, 0x01	; 1
    5458:	ed 91       	ld	r30, X+
    545a:	fc 91       	ld	r31, X
    545c:	12 97       	sbiw	r26, 0x02	; 2
    545e:	91 81       	ldd	r25, Z+1	; 0x01
    5460:	8c 91       	ld	r24, X
    5462:	80 95       	com	r24
    5464:	98 23       	and	r25, r24
    5466:	91 83       	std	Z+1, r25	; 0x01
	DIRECT_WRITE_LOW(baseReg, bitmask);
    5468:	11 96       	adiw	r26, 0x01	; 1
    546a:	ed 91       	ld	r30, X+
    546c:	fc 91       	ld	r31, X
    546e:	12 97       	sbiw	r26, 0x02	; 2
    5470:	92 81       	ldd	r25, Z+2	; 0x02
    5472:	8c 91       	ld	r24, X
    5474:	80 95       	com	r24
    5476:	98 23       	and	r25, r24
    5478:	92 83       	std	Z+2, r25	; 0x02
	interrupts();
    547a:	78 94       	sei
    }
}
    547c:	df 91       	pop	r29
    547e:	cf 91       	pop	r28
    5480:	1f 91       	pop	r17
    5482:	0f 91       	pop	r16
    5484:	ff 90       	pop	r15
    5486:	ef 90       	pop	r14
    5488:	df 90       	pop	r13
    548a:	cf 90       	pop	r12
    548c:	08 95       	ret

0000548e <_ZN7OneWire6selectEPKh>:
}

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
    548e:	ef 92       	push	r14
    5490:	ff 92       	push	r15
    5492:	0f 93       	push	r16
    5494:	1f 93       	push	r17
    5496:	cf 93       	push	r28
    5498:	df 93       	push	r29
    549a:	8c 01       	movw	r16, r24
    549c:	7b 01       	movw	r14, r22
{
    uint8_t i;

    write(0x55);           // Choose ROM
    549e:	65 e5       	ldi	r22, 0x55	; 85
    54a0:	40 e0       	ldi	r20, 0x00	; 0
    54a2:	0e 94 07 2a 	call	0x540e	; 0x540e <_ZN7OneWire5writeEhh>
    54a6:	c0 e0       	ldi	r28, 0x00	; 0
    54a8:	d0 e0       	ldi	r29, 0x00	; 0

    for (i = 0; i < 8; i++) write(rom[i]);
    54aa:	f7 01       	movw	r30, r14
    54ac:	ec 0f       	add	r30, r28
    54ae:	fd 1f       	adc	r31, r29
    54b0:	c8 01       	movw	r24, r16
    54b2:	60 81       	ld	r22, Z
    54b4:	40 e0       	ldi	r20, 0x00	; 0
    54b6:	0e 94 07 2a 	call	0x540e	; 0x540e <_ZN7OneWire5writeEhh>
    54ba:	21 96       	adiw	r28, 0x01	; 1
    54bc:	c8 30       	cpi	r28, 0x08	; 8
    54be:	d1 05       	cpc	r29, r1
    54c0:	a1 f7       	brne	.-24     	; 0x54aa <_ZN7OneWire6selectEPKh+0x1c>
}
    54c2:	df 91       	pop	r29
    54c4:	cf 91       	pop	r28
    54c6:	1f 91       	pop	r17
    54c8:	0f 91       	pop	r16
    54ca:	ff 90       	pop	r15
    54cc:	ef 90       	pop	r14
    54ce:	08 95       	ret

000054d0 <_ZN7OneWire5resetEv>:
// the bus to come high, if it doesn't then it is broken or shorted
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
    54d0:	df 92       	push	r13
    54d2:	ef 92       	push	r14
    54d4:	ff 92       	push	r15
    54d6:	0f 93       	push	r16
    54d8:	1f 93       	push	r17
    54da:	cf 93       	push	r28
    54dc:	df 93       	push	r29
    54de:	fc 01       	movw	r30, r24
{
	IO_REG_TYPE mask = bitmask;
    54e0:	00 81       	ld	r16, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    54e2:	c1 81       	ldd	r28, Z+1	; 0x01
    54e4:	d2 81       	ldd	r29, Z+2	; 0x02
	uint8_t r;
	uint8_t retries = 125;

	noInterrupts();
    54e6:	f8 94       	cli
	DIRECT_MODE_INPUT(reg, mask);
    54e8:	89 81       	ldd	r24, Y+1	; 0x01
    54ea:	d0 2e       	mov	r13, r16
    54ec:	d0 94       	com	r13
    54ee:	8d 21       	and	r24, r13
    54f0:	89 83       	std	Y+1, r24	; 0x01
	interrupts();
    54f2:	78 94       	sei
    54f4:	1d e7       	ldi	r17, 0x7D	; 125
	// wait until the wire is high... just in case
	do {
    54f6:	e0 2e       	mov	r14, r16
    54f8:	ff 24       	eor	r15, r15
		if (--retries == 0) return 0;
    54fa:	11 50       	subi	r17, 0x01	; 1
    54fc:	59 f1       	breq	.+86     	; 0x5554 <_ZN7OneWire5resetEv+0x84>
		delayMicroseconds(2);
    54fe:	82 e0       	ldi	r24, 0x02	; 2
    5500:	90 e0       	ldi	r25, 0x00	; 0
    5502:	0e 94 99 30 	call	0x6132	; 0x6132 <delayMicroseconds>

	noInterrupts();
	DIRECT_MODE_INPUT(reg, mask);
	interrupts();
	// wait until the wire is high... just in case
	do {
    5506:	88 81       	ld	r24, Y
    5508:	90 e0       	ldi	r25, 0x00	; 0
    550a:	8e 21       	and	r24, r14
    550c:	9f 21       	and	r25, r15
    550e:	89 2b       	or	r24, r25
    5510:	a1 f3       	breq	.-24     	; 0x54fa <_ZN7OneWire5resetEv+0x2a>
		if (--retries == 0) return 0;
		delayMicroseconds(2);
	} while ( !DIRECT_READ(reg, mask));

	noInterrupts();
    5512:	f8 94       	cli
	DIRECT_WRITE_LOW(reg, mask);
    5514:	8a 81       	ldd	r24, Y+2	; 0x02
    5516:	8d 21       	and	r24, r13
    5518:	8a 83       	std	Y+2, r24	; 0x02
	DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    551a:	89 81       	ldd	r24, Y+1	; 0x01
    551c:	80 2b       	or	r24, r16
    551e:	89 83       	std	Y+1, r24	; 0x01
	interrupts();
    5520:	78 94       	sei
	delayMicroseconds(480);
    5522:	80 ee       	ldi	r24, 0xE0	; 224
    5524:	91 e0       	ldi	r25, 0x01	; 1
    5526:	0e 94 99 30 	call	0x6132	; 0x6132 <delayMicroseconds>
	noInterrupts();
    552a:	f8 94       	cli
	DIRECT_MODE_INPUT(reg, mask);	// allow it to float
    552c:	89 81       	ldd	r24, Y+1	; 0x01
    552e:	8d 21       	and	r24, r13
    5530:	89 83       	std	Y+1, r24	; 0x01
	delayMicroseconds(70);
    5532:	86 e4       	ldi	r24, 0x46	; 70
    5534:	90 e0       	ldi	r25, 0x00	; 0
    5536:	0e 94 99 30 	call	0x6132	; 0x6132 <delayMicroseconds>
	r = !DIRECT_READ(reg, mask);
    553a:	88 81       	ld	r24, Y
    553c:	10 e0       	ldi	r17, 0x00	; 0
    553e:	90 e0       	ldi	r25, 0x00	; 0
    5540:	e8 22       	and	r14, r24
    5542:	f9 22       	and	r15, r25
    5544:	ef 28       	or	r14, r15
    5546:	09 f4       	brne	.+2      	; 0x554a <_ZN7OneWire5resetEv+0x7a>
    5548:	11 e0       	ldi	r17, 0x01	; 1
	interrupts();
    554a:	78 94       	sei
	delayMicroseconds(410);
    554c:	8a e9       	ldi	r24, 0x9A	; 154
    554e:	91 e0       	ldi	r25, 0x01	; 1
    5550:	0e 94 99 30 	call	0x6132	; 0x6132 <delayMicroseconds>
	return r;
}
    5554:	81 2f       	mov	r24, r17
    5556:	df 91       	pop	r29
    5558:	cf 91       	pop	r28
    555a:	1f 91       	pop	r17
    555c:	0f 91       	pop	r16
    555e:	ff 90       	pop	r15
    5560:	ef 90       	pop	r14
    5562:	df 90       	pop	r13
    5564:	08 95       	ret

00005566 <_ZN7OneWire6searchEPh>:
// Perform the 1-Wire Search Algorithm on the 1-Wire bus using the existing
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
    5566:	af 92       	push	r10
    5568:	bf 92       	push	r11
    556a:	df 92       	push	r13
    556c:	ef 92       	push	r14
    556e:	ff 92       	push	r15
    5570:	0f 93       	push	r16
    5572:	1f 93       	push	r17
    5574:	cf 93       	push	r28
    5576:	df 93       	push	r29
    5578:	ec 01       	movw	r28, r24
    557a:	5b 01       	movw	r10, r22
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = 0;

   // if the last call was not the last one
   if (!LastDeviceFlag)
    557c:	8d 85       	ldd	r24, Y+13	; 0x0d
    557e:	88 23       	and	r24, r24
    5580:	09 f0       	breq	.+2      	; 0x5584 <_ZN7OneWire6searchEPh+0x1e>
    5582:	61 c0       	rjmp	.+194    	; 0x5646 <_ZN7OneWire6searchEPh+0xe0>
   {
      // 1-Wire reset
      if (!reset())
    5584:	ce 01       	movw	r24, r28
    5586:	0e 94 68 2a 	call	0x54d0	; 0x54d0 <_ZN7OneWire5resetEv>
    558a:	88 23       	and	r24, r24
    558c:	29 f4       	brne	.+10     	; 0x5598 <_ZN7OneWire6searchEPh+0x32>
      {
         // reset the search
         LastDiscrepancy = 0;
    558e:	1b 86       	std	Y+11, r1	; 0x0b
         LastDeviceFlag = FALSE;
    5590:	1d 86       	std	Y+13, r1	; 0x0d
         LastFamilyDiscrepancy = 0;
    5592:	1c 86       	std	Y+12, r1	; 0x0c
    5594:	90 e0       	ldi	r25, 0x00	; 0
    5596:	6b c0       	rjmp	.+214    	; 0x566e <_ZN7OneWire6searchEPh+0x108>
         return FALSE;
      }

      // issue the search command
      write(0xF0);
    5598:	ce 01       	movw	r24, r28
    559a:	60 ef       	ldi	r22, 0xF0	; 240
    559c:	40 e0       	ldi	r20, 0x00	; 0
    559e:	0e 94 07 2a 	call	0x540e	; 0x540e <_ZN7OneWire5writeEhh>
    55a2:	01 e0       	ldi	r16, 0x01	; 1
    55a4:	dd 24       	eor	r13, r13
    55a6:	ee 24       	eor	r14, r14
    55a8:	ff 24       	eor	r15, r15
    55aa:	f3 94       	inc	r15

      // loop to do the search
      do
      {
         // read a bit and its complement
         id_bit = read_bit();
    55ac:	ce 01       	movw	r24, r28
    55ae:	0e 94 82 29 	call	0x5304	; 0x5304 <_ZN7OneWire8read_bitEv>
    55b2:	18 2f       	mov	r17, r24
         cmp_id_bit = read_bit();
    55b4:	ce 01       	movw	r24, r28
    55b6:	0e 94 82 29 	call	0x5304	; 0x5304 <_ZN7OneWire8read_bitEv>

         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1))
    55ba:	11 30       	cpi	r17, 0x01	; 1
    55bc:	19 f4       	brne	.+6      	; 0x55c4 <_ZN7OneWire6searchEPh+0x5e>
    55be:	81 30       	cpi	r24, 0x01	; 1
    55c0:	e1 f4       	brne	.+56     	; 0x55fa <_ZN7OneWire6searchEPh+0x94>
    55c2:	39 c0       	rjmp	.+114    	; 0x5636 <_ZN7OneWire6searchEPh+0xd0>
            break;
         else
         {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit)
    55c4:	18 17       	cp	r17, r24
    55c6:	09 f5       	brne	.+66     	; 0x560a <_ZN7OneWire6searchEPh+0xa4>
               search_direction = id_bit;  // bit write value for search
            else
            {
               // if this discrepancy if before the Last Discrepancy
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy)
    55c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    55ca:	08 17       	cp	r16, r24
    55cc:	70 f4       	brcc	.+28     	; 0x55ea <_ZN7OneWire6searchEPh+0x84>
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
    55ce:	60 e0       	ldi	r22, 0x00	; 0
    55d0:	fe 01       	movw	r30, r28
    55d2:	ee 0d       	add	r30, r14
    55d4:	f1 1d       	adc	r31, r1
    55d6:	83 81       	ldd	r24, Z+3	; 0x03
    55d8:	90 e0       	ldi	r25, 0x00	; 0
    55da:	2f 2d       	mov	r18, r15
    55dc:	30 e0       	ldi	r19, 0x00	; 0
    55de:	82 23       	and	r24, r18
    55e0:	93 23       	and	r25, r19
    55e2:	18 16       	cp	r1, r24
    55e4:	19 06       	cpc	r1, r25
    55e6:	4c f0       	brlt	.+18     	; 0x55fa <_ZN7OneWire6searchEPh+0x94>
    55e8:	03 c0       	rjmp	.+6      	; 0x55f0 <_ZN7OneWire6searchEPh+0x8a>
               else
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    55ea:	60 e0       	ldi	r22, 0x00	; 0
    55ec:	08 17       	cp	r16, r24
    55ee:	29 f0       	breq	.+10     	; 0x55fa <_ZN7OneWire6searchEPh+0x94>
               if (search_direction == 0)
               {
                  last_zero = id_bit_number;

                  // check for Last discrepancy in family
                  if (last_zero < 9)
    55f0:	09 30       	cpi	r16, 0x09	; 9
    55f2:	08 f0       	brcs	.+2      	; 0x55f6 <_ZN7OneWire6searchEPh+0x90>
    55f4:	4c c0       	rjmp	.+152    	; 0x568e <_ZN7OneWire6searchEPh+0x128>
                     LastFamilyDiscrepancy = last_zero;
    55f6:	0c 87       	std	Y+12, r16	; 0x0c
    55f8:	4a c0       	rjmp	.+148    	; 0x568e <_ZN7OneWire6searchEPh+0x128>
            }

            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
    55fa:	fe 01       	movw	r30, r28
    55fc:	ee 0d       	add	r30, r14
    55fe:	f1 1d       	adc	r31, r1
    5600:	83 81       	ldd	r24, Z+3	; 0x03
    5602:	8f 29       	or	r24, r15
    5604:	83 83       	std	Z+3, r24	; 0x03
    5606:	61 e0       	ldi	r22, 0x01	; 1
    5608:	09 c0       	rjmp	.+18     	; 0x561c <_ZN7OneWire6searchEPh+0xb6>
    560a:	61 2f       	mov	r22, r17
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;
    560c:	fe 01       	movw	r30, r28
    560e:	ee 0d       	add	r30, r14
    5610:	f1 1d       	adc	r31, r1
    5612:	9f 2d       	mov	r25, r15
    5614:	90 95       	com	r25
    5616:	83 81       	ldd	r24, Z+3	; 0x03
    5618:	89 23       	and	r24, r25
    561a:	83 83       	std	Z+3, r24	; 0x03

            // serial number search direction write bit
            write_bit(search_direction);
    561c:	ce 01       	movw	r24, r28
    561e:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <_ZN7OneWire9write_bitEh>

            // increment the byte counter id_bit_number
            // and shift the mask rom_byte_mask
            id_bit_number++;
    5622:	0f 5f       	subi	r16, 0xFF	; 255
            rom_byte_mask <<= 1;
    5624:	ff 0c       	add	r15, r15

            // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
            if (rom_byte_mask == 0)
    5626:	19 f4       	brne	.+6      	; 0x562e <_ZN7OneWire6searchEPh+0xc8>
            {
                rom_byte_number++;
    5628:	e3 94       	inc	r14
    562a:	ff 24       	eor	r15, r15
    562c:	f3 94       	inc	r15

      // issue the search command
      write(0xF0);

      // loop to do the search
      do
    562e:	87 e0       	ldi	r24, 0x07	; 7
    5630:	8e 15       	cp	r24, r14
    5632:	08 f0       	brcs	.+2      	; 0x5636 <_ZN7OneWire6searchEPh+0xd0>
    5634:	bb cf       	rjmp	.-138    	; 0x55ac <_ZN7OneWire6searchEPh+0x46>
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7

      // if the search was successful then
      if (!(id_bit_number < 65))
    5636:	01 34       	cpi	r16, 0x41	; 65
    5638:	30 f0       	brcs	.+12     	; 0x5646 <_ZN7OneWire6searchEPh+0xe0>
      {
         // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
         LastDiscrepancy = last_zero;
    563a:	db 86       	std	Y+11, r13	; 0x0b

         // check for last device
         if (LastDiscrepancy == 0)
    563c:	dd 20       	and	r13, r13
    563e:	11 f5       	brne	.+68     	; 0x5684 <_ZN7OneWire6searchEPh+0x11e>
            LastDeviceFlag = TRUE;
    5640:	81 e0       	ldi	r24, 0x01	; 1
    5642:	8d 87       	std	Y+13, r24	; 0x0d
    5644:	1f c0       	rjmp	.+62     	; 0x5684 <_ZN7OneWire6searchEPh+0x11e>
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
   {
      LastDiscrepancy = 0;
    5646:	1b 86       	std	Y+11, r1	; 0x0b
      LastDeviceFlag = FALSE;
    5648:	1d 86       	std	Y+13, r1	; 0x0d
      LastFamilyDiscrepancy = 0;
    564a:	1c 86       	std	Y+12, r1	; 0x0c
    564c:	90 e0       	ldi	r25, 0x00	; 0
    564e:	de 01       	movw	r26, r28
    5650:	20 e0       	ldi	r18, 0x00	; 0
    5652:	30 e0       	ldi	r19, 0x00	; 0
      search_result = FALSE;
   }
   for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
    5654:	f5 01       	movw	r30, r10
    5656:	e2 0f       	add	r30, r18
    5658:	f3 1f       	adc	r31, r19
    565a:	13 96       	adiw	r26, 0x03	; 3
    565c:	8c 91       	ld	r24, X
    565e:	13 97       	sbiw	r26, 0x03	; 3
    5660:	80 83       	st	Z, r24
    5662:	2f 5f       	subi	r18, 0xFF	; 255
    5664:	3f 4f       	sbci	r19, 0xFF	; 255
    5666:	11 96       	adiw	r26, 0x01	; 1
    5668:	28 30       	cpi	r18, 0x08	; 8
    566a:	31 05       	cpc	r19, r1
    566c:	99 f7       	brne	.-26     	; 0x5654 <_ZN7OneWire6searchEPh+0xee>
   return search_result;
  }
    566e:	89 2f       	mov	r24, r25
    5670:	df 91       	pop	r29
    5672:	cf 91       	pop	r28
    5674:	1f 91       	pop	r17
    5676:	0f 91       	pop	r16
    5678:	ff 90       	pop	r15
    567a:	ef 90       	pop	r14
    567c:	df 90       	pop	r13
    567e:	bf 90       	pop	r11
    5680:	af 90       	pop	r10
    5682:	08 95       	ret
         search_result = TRUE;
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
    5684:	8b 81       	ldd	r24, Y+3	; 0x03
    5686:	88 23       	and	r24, r24
    5688:	f1 f2       	breq	.-68     	; 0x5646 <_ZN7OneWire6searchEPh+0xe0>
    568a:	91 e0       	ldi	r25, 0x01	; 1
    568c:	e0 cf       	rjmp	.-64     	; 0x564e <_ZN7OneWire6searchEPh+0xe8>
    568e:	d0 2e       	mov	r13, r16
    5690:	bd cf       	rjmp	.-134    	; 0x560c <_ZN7OneWire6searchEPh+0xa6>

00005692 <_ZN7OneWireC1Eh>:
*/

#include "OneWire.h"


OneWire::OneWire(uint8_t pin)
    5692:	ff 92       	push	r15
    5694:	0f 93       	push	r16
    5696:	1f 93       	push	r17
    5698:	8c 01       	movw	r16, r24
    569a:	f6 2e       	mov	r15, r22
{
	pinMode(pin, INPUT);
    569c:	86 2f       	mov	r24, r22
    569e:	60 e0       	ldi	r22, 0x00	; 0
    56a0:	0e 94 de 30 	call	0x61bc	; 0x61bc <pinMode>
	bitmask = PIN_TO_BITMASK(pin);
    56a4:	8f 2d       	mov	r24, r15
    56a6:	90 e0       	ldi	r25, 0x00	; 0
    56a8:	fc 01       	movw	r30, r24
    56aa:	e3 50       	subi	r30, 0x03	; 3
    56ac:	f6 4f       	sbci	r31, 0xF6	; 246
    56ae:	e4 91       	lpm	r30, Z+
    56b0:	d8 01       	movw	r26, r16
    56b2:	ec 93       	st	X, r30
	baseReg = PIN_TO_BASEREG(pin);
    56b4:	87 51       	subi	r24, 0x17	; 23
    56b6:	96 4f       	sbci	r25, 0xF6	; 246
    56b8:	fc 01       	movw	r30, r24
    56ba:	64 91       	lpm	r22, Z+
    56bc:	e6 2f       	mov	r30, r22
    56be:	f0 e0       	ldi	r31, 0x00	; 0
    56c0:	ee 0f       	add	r30, r30
    56c2:	ff 1f       	adc	r31, r31
    56c4:	e1 52       	subi	r30, 0x21	; 33
    56c6:	f6 4f       	sbci	r31, 0xF6	; 246
    56c8:	85 91       	lpm	r24, Z+
    56ca:	94 91       	lpm	r25, Z+
    56cc:	12 96       	adiw	r26, 0x02	; 2
    56ce:	9c 93       	st	X, r25
    56d0:	8e 93       	st	-X, r24
    56d2:	11 97       	sbiw	r26, 0x01	; 1
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
  // reset the search state
  LastDiscrepancy = 0;
    56d4:	1b 96       	adiw	r26, 0x0b	; 11
    56d6:	1c 92       	st	X, r1
    56d8:	1b 97       	sbiw	r26, 0x0b	; 11
  LastDeviceFlag = FALSE;
    56da:	1d 96       	adiw	r26, 0x0d	; 13
    56dc:	1c 92       	st	X, r1
    56de:	1d 97       	sbiw	r26, 0x0d	; 13
  LastFamilyDiscrepancy = 0;
    56e0:	1c 96       	adiw	r26, 0x0c	; 12
    56e2:	1c 92       	st	X, r1
    56e4:	f8 01       	movw	r30, r16
    56e6:	87 e0       	ldi	r24, 0x07	; 7
    56e8:	90 e0       	ldi	r25, 0x00	; 0
  for(int i = 7; ; i--) {
    ROM_NO[i] = 0;
    56ea:	12 86       	std	Z+10, r1	; 0x0a
    56ec:	31 97       	sbiw	r30, 0x01	; 1
    if ( i == 0) break;
    56ee:	00 97       	sbiw	r24, 0x00	; 0
    56f0:	11 f0       	breq	.+4      	; 0x56f6 <_ZN7OneWireC1Eh+0x64>
{
  // reset the search state
  LastDiscrepancy = 0;
  LastDeviceFlag = FALSE;
  LastFamilyDiscrepancy = 0;
  for(int i = 7; ; i--) {
    56f2:	01 97       	sbiw	r24, 0x01	; 1
    56f4:	fa cf       	rjmp	.-12     	; 0x56ea <_ZN7OneWireC1Eh+0x58>
	bitmask = PIN_TO_BITMASK(pin);
	baseReg = PIN_TO_BASEREG(pin);
#if ONEWIRE_SEARCH
	reset_search();
#endif
}
    56f6:	1f 91       	pop	r17
    56f8:	0f 91       	pop	r16
    56fa:	ff 90       	pop	r15
    56fc:	08 95       	ret

000056fe <_ZN17DallasTemperatureC1EP7OneWire>:
extern "C" {
    #include "WConstants.h"
}
#endif

DallasTemperature::DallasTemperature(OneWire* _oneWire)
    56fe:	fc 01       	movw	r30, r24
  #if REQUIRESALARMS
  : _AlarmHandler(&defaultAlarmHandler)
    5700:	88 e4       	ldi	r24, 0x48	; 72
    5702:	9c e2       	ldi	r25, 0x2C	; 44
    5704:	92 8b       	std	Z+18, r25	; 0x12
    5706:	81 8b       	std	Z+17, r24	; 0x11
  #endif
{
  _wire = _oneWire;
    5708:	76 83       	std	Z+6, r23	; 0x06
    570a:	65 83       	std	Z+5, r22	; 0x05
  devices = 0;
    570c:	14 82       	std	Z+4, r1	; 0x04
  parasite = false;
    570e:	10 82       	st	Z, r1
  bitResolution = 9;
    5710:	89 e0       	ldi	r24, 0x09	; 9
    5712:	81 83       	std	Z+1, r24	; 0x01
  waitForConversion = true;
    5714:	81 e0       	ldi	r24, 0x01	; 1
    5716:	82 83       	std	Z+2, r24	; 0x02
  checkForConversion = true;
    5718:	83 83       	std	Z+3, r24	; 0x03
}
    571a:	08 95       	ret

0000571c <_ZN17DallasTemperature14getDeviceCountEv>:

// returns the number of devices found on the bus
uint8_t DallasTemperature::getDeviceCount(void)
{
  return devices;
}
    571c:	fc 01       	movw	r30, r24
    571e:	84 81       	ldd	r24, Z+4	; 0x04
    5720:	08 95       	ret

00005722 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>:
{
  return toFahrenheit(getTempCByIndex(deviceIndex));
}

// reads scratchpad and returns the temperature in degrees C
float DallasTemperature::calculateTemperature(uint8_t* deviceAddress, uint8_t* scratchPad)
    5722:	6f 92       	push	r6
    5724:	7f 92       	push	r7
    5726:	8f 92       	push	r8
    5728:	9f 92       	push	r9
    572a:	af 92       	push	r10
    572c:	bf 92       	push	r11
    572e:	cf 92       	push	r12
    5730:	df 92       	push	r13
    5732:	ef 92       	push	r14
    5734:	ff 92       	push	r15
    5736:	0f 93       	push	r16
    5738:	1f 93       	push	r17
    573a:	cf 93       	push	r28
    573c:	df 93       	push	r29
    573e:	fb 01       	movw	r30, r22
    5740:	ea 01       	movw	r28, r20
{
  int16_t rawTemperature = (((int16_t)scratchPad[TEMP_MSB]) << 8) | scratchPad[TEMP_LSB];
    5742:	99 81       	ldd	r25, Y+1	; 0x01
    5744:	80 e0       	ldi	r24, 0x00	; 0
    5746:	28 81       	ld	r18, Y
    5748:	30 e0       	ldi	r19, 0x00	; 0
    574a:	28 2b       	or	r18, r24
    574c:	39 2b       	or	r19, r25

  switch (deviceAddress[0])
    574e:	e0 81       	ld	r30, Z
    5750:	e2 32       	cpi	r30, 0x22	; 34
    5752:	31 f0       	breq	.+12     	; 0x5760 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3e>
    5754:	e8 32       	cpi	r30, 0x28	; 40
    5756:	21 f0       	breq	.+8      	; 0x5760 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3e>
    5758:	e0 31       	cpi	r30, 0x10	; 16
    575a:	09 f0       	breq	.+2      	; 0x575e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3c>
    575c:	84 c0       	rjmp	.+264    	; 0x5866 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
    575e:	4b c0       	rjmp	.+150    	; 0x57f6 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xd4>
  {
    case DS18B20MODEL:
    case DS1822MODEL:
      switch (scratchPad[CONFIGURATION])
    5760:	4c 81       	ldd	r20, Y+4	; 0x04
    5762:	4f 33       	cpi	r20, 0x3F	; 63
    5764:	29 f1       	breq	.+74     	; 0x57b0 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x8e>
    5766:	40 34       	cpi	r20, 0x40	; 64
    5768:	20 f4       	brcc	.+8      	; 0x5772 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x50>
    576a:	4f 31       	cpi	r20, 0x1F	; 31
    576c:	09 f0       	breq	.+2      	; 0x5770 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x4e>
    576e:	7b c0       	rjmp	.+246    	; 0x5866 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
    5770:	2f c0       	rjmp	.+94     	; 0x57d0 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xae>
    5772:	4f 35       	cpi	r20, 0x5F	; 95
    5774:	79 f0       	breq	.+30     	; 0x5794 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x72>
    5776:	4f 37       	cpi	r20, 0x7F	; 127
    5778:	09 f0       	breq	.+2      	; 0x577c <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x5a>
    577a:	75 c0       	rjmp	.+234    	; 0x5866 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
      {
        case TEMP_12_BIT:
          return (float)rawTemperature * 0.0625;
    577c:	b9 01       	movw	r22, r18
    577e:	88 27       	eor	r24, r24
    5780:	77 fd       	sbrc	r23, 7
    5782:	80 95       	com	r24
    5784:	98 2f       	mov	r25, r24
    5786:	0e 94 eb 3a 	call	0x75d6	; 0x75d6 <__floatsisf>
    578a:	20 e0       	ldi	r18, 0x00	; 0
    578c:	30 e0       	ldi	r19, 0x00	; 0
    578e:	40 e8       	ldi	r20, 0x80	; 128
    5790:	5d e3       	ldi	r21, 0x3D	; 61
    5792:	2e c0       	rjmp	.+92     	; 0x57f0 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xce>
          break;
        case TEMP_11_BIT:
          return (float)(rawTemperature >> 1) * 0.125;
    5794:	35 95       	asr	r19
    5796:	27 95       	ror	r18
    5798:	b9 01       	movw	r22, r18
    579a:	88 27       	eor	r24, r24
    579c:	77 fd       	sbrc	r23, 7
    579e:	80 95       	com	r24
    57a0:	98 2f       	mov	r25, r24
    57a2:	0e 94 eb 3a 	call	0x75d6	; 0x75d6 <__floatsisf>
    57a6:	20 e0       	ldi	r18, 0x00	; 0
    57a8:	30 e0       	ldi	r19, 0x00	; 0
    57aa:	40 e0       	ldi	r20, 0x00	; 0
    57ac:	5e e3       	ldi	r21, 0x3E	; 62
    57ae:	20 c0       	rjmp	.+64     	; 0x57f0 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xce>
          break;
        case TEMP_10_BIT:
          return (float)(rawTemperature >> 2) * 0.25;
    57b0:	35 95       	asr	r19
    57b2:	27 95       	ror	r18
    57b4:	35 95       	asr	r19
    57b6:	27 95       	ror	r18
    57b8:	b9 01       	movw	r22, r18
    57ba:	88 27       	eor	r24, r24
    57bc:	77 fd       	sbrc	r23, 7
    57be:	80 95       	com	r24
    57c0:	98 2f       	mov	r25, r24
    57c2:	0e 94 eb 3a 	call	0x75d6	; 0x75d6 <__floatsisf>
    57c6:	20 e0       	ldi	r18, 0x00	; 0
    57c8:	30 e0       	ldi	r19, 0x00	; 0
    57ca:	40 e8       	ldi	r20, 0x80	; 128
    57cc:	5e e3       	ldi	r21, 0x3E	; 62
    57ce:	10 c0       	rjmp	.+32     	; 0x57f0 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xce>
          break;
        case TEMP_9_BIT:
          return (float)(rawTemperature >> 3) * 0.5;
    57d0:	93 e0       	ldi	r25, 0x03	; 3
    57d2:	35 95       	asr	r19
    57d4:	27 95       	ror	r18
    57d6:	9a 95       	dec	r25
    57d8:	e1 f7       	brne	.-8      	; 0x57d2 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xb0>
    57da:	b9 01       	movw	r22, r18
    57dc:	88 27       	eor	r24, r24
    57de:	77 fd       	sbrc	r23, 7
    57e0:	80 95       	com	r24
    57e2:	98 2f       	mov	r25, r24
    57e4:	0e 94 eb 3a 	call	0x75d6	; 0x75d6 <__floatsisf>
    57e8:	20 e0       	ldi	r18, 0x00	; 0
    57ea:	30 e0       	ldi	r19, 0x00	; 0
    57ec:	40 e0       	ldi	r20, 0x00	; 0
    57ee:	5f e3       	ldi	r21, 0x3F	; 63
    57f0:	0e 94 9f 3b 	call	0x773e	; 0x773e <__mulsf3>
    57f4:	32 c0       	rjmp	.+100    	; 0x585a <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x138>
      TEMPERATURE = TEMP_READ - 0.25 + --------------------------
                                               COUNT_PER_C
      */

      // Good spot. Thanks Nic Johns for your contribution
      return (float)(rawTemperature >> 1) - 0.25 +((float)(scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) / (float)scratchPad[COUNT_PER_C] );
    57f6:	ef 80       	ldd	r14, Y+7	; 0x07
    57f8:	35 95       	asr	r19
    57fa:	27 95       	ror	r18
    57fc:	b9 01       	movw	r22, r18
    57fe:	88 27       	eor	r24, r24
    5800:	77 fd       	sbrc	r23, 7
    5802:	80 95       	com	r24
    5804:	98 2f       	mov	r25, r24
    5806:	0e 94 eb 3a 	call	0x75d6	; 0x75d6 <__floatsisf>
    580a:	20 e0       	ldi	r18, 0x00	; 0
    580c:	30 e0       	ldi	r19, 0x00	; 0
    580e:	40 e8       	ldi	r20, 0x80	; 128
    5810:	5e e3       	ldi	r21, 0x3E	; 62
    5812:	0e 94 e7 39 	call	0x73ce	; 0x73ce <__subsf3>
    5816:	3b 01       	movw	r6, r22
    5818:	4c 01       	movw	r8, r24
    581a:	6e 2d       	mov	r22, r14
    581c:	70 e0       	ldi	r23, 0x00	; 0
    581e:	2e 81       	ldd	r18, Y+6	; 0x06
    5820:	62 1b       	sub	r22, r18
    5822:	71 09       	sbc	r23, r1
    5824:	88 27       	eor	r24, r24
    5826:	77 fd       	sbrc	r23, 7
    5828:	80 95       	com	r24
    582a:	98 2f       	mov	r25, r24
    582c:	0e 94 eb 3a 	call	0x75d6	; 0x75d6 <__floatsisf>
    5830:	5b 01       	movw	r10, r22
    5832:	6c 01       	movw	r12, r24
    5834:	ff 24       	eor	r15, r15
    5836:	00 e0       	ldi	r16, 0x00	; 0
    5838:	10 e0       	ldi	r17, 0x00	; 0
    583a:	c8 01       	movw	r24, r16
    583c:	b7 01       	movw	r22, r14
    583e:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <__floatunsisf>
    5842:	9b 01       	movw	r18, r22
    5844:	ac 01       	movw	r20, r24
    5846:	c6 01       	movw	r24, r12
    5848:	b5 01       	movw	r22, r10
    584a:	0e 94 50 3a 	call	0x74a0	; 0x74a0 <__divsf3>
    584e:	9b 01       	movw	r18, r22
    5850:	ac 01       	movw	r20, r24
    5852:	c4 01       	movw	r24, r8
    5854:	b3 01       	movw	r22, r6
    5856:	0e 94 e8 39 	call	0x73d0	; 0x73d0 <__addsf3>
    585a:	9b 01       	movw	r18, r22
    585c:	ac 01       	movw	r20, r24
      break;
  }
}
    585e:	83 2f       	mov	r24, r19
    5860:	94 2f       	mov	r25, r20
    5862:	75 2f       	mov	r23, r21
    5864:	00 c0       	rjmp	.+0      	; 0x5866 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
    5866:	26 2f       	mov	r18, r22
    5868:	38 2f       	mov	r19, r24
    586a:	49 2f       	mov	r20, r25
    586c:	57 2f       	mov	r21, r23
    586e:	b9 01       	movw	r22, r18
    5870:	ca 01       	movw	r24, r20
    5872:	df 91       	pop	r29
    5874:	cf 91       	pop	r28
    5876:	1f 91       	pop	r17
    5878:	0f 91       	pop	r16
    587a:	ff 90       	pop	r15
    587c:	ef 90       	pop	r14
    587e:	df 90       	pop	r13
    5880:	cf 90       	pop	r12
    5882:	bf 90       	pop	r11
    5884:	af 90       	pop	r10
    5886:	9f 90       	pop	r9
    5888:	8f 90       	pop	r8
    588a:	7f 90       	pop	r7
    588c:	6f 90       	pop	r6
    588e:	08 95       	ret

00005890 <_ZN17DallasTemperature19defaultAlarmHandlerEPh>:
}

// The default alarm handler
void DallasTemperature::defaultAlarmHandler(uint8_t* deviceAddress)
{
}
    5890:	08 95       	ret

00005892 <_ZN17DallasTemperature15readPowerSupplyEPh>:
  if (parasite) delay(10); // 10ms delay
  _wire->reset();
}

// reads the device's power requirements
bool DallasTemperature::readPowerSupply(uint8_t* deviceAddress)
    5892:	ef 92       	push	r14
    5894:	ff 92       	push	r15
    5896:	0f 93       	push	r16
    5898:	1f 93       	push	r17
    589a:	8c 01       	movw	r16, r24
    589c:	7b 01       	movw	r14, r22
{
  bool ret = false;
  _wire->reset();
    589e:	fc 01       	movw	r30, r24
    58a0:	85 81       	ldd	r24, Z+5	; 0x05
    58a2:	96 81       	ldd	r25, Z+6	; 0x06
    58a4:	0e 94 68 2a 	call	0x54d0	; 0x54d0 <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
    58a8:	f8 01       	movw	r30, r16
    58aa:	85 81       	ldd	r24, Z+5	; 0x05
    58ac:	96 81       	ldd	r25, Z+6	; 0x06
    58ae:	b7 01       	movw	r22, r14
    58b0:	0e 94 47 2a 	call	0x548e	; 0x548e <_ZN7OneWire6selectEPKh>
  _wire->write(READPOWERSUPPLY);
    58b4:	f8 01       	movw	r30, r16
    58b6:	85 81       	ldd	r24, Z+5	; 0x05
    58b8:	96 81       	ldd	r25, Z+6	; 0x06
    58ba:	64 eb       	ldi	r22, 0xB4	; 180
    58bc:	40 e0       	ldi	r20, 0x00	; 0
    58be:	0e 94 07 2a 	call	0x540e	; 0x540e <_ZN7OneWire5writeEhh>
  if (_wire->read_bit() == 0) ret = true;
    58c2:	f8 01       	movw	r30, r16
    58c4:	85 81       	ldd	r24, Z+5	; 0x05
    58c6:	96 81       	ldd	r25, Z+6	; 0x06
    58c8:	0e 94 82 29 	call	0x5304	; 0x5304 <_ZN7OneWire8read_bitEv>
    58cc:	f8 2e       	mov	r15, r24
  _wire->reset();
    58ce:	f8 01       	movw	r30, r16
    58d0:	85 81       	ldd	r24, Z+5	; 0x05
    58d2:	96 81       	ldd	r25, Z+6	; 0x06
    58d4:	0e 94 68 2a 	call	0x54d0	; 0x54d0 <_ZN7OneWire5resetEv>
    58d8:	80 e0       	ldi	r24, 0x00	; 0
    58da:	ff 20       	and	r15, r15
    58dc:	09 f4       	brne	.+2      	; 0x58e0 <_ZN17DallasTemperature15readPowerSupplyEPh+0x4e>
    58de:	81 e0       	ldi	r24, 0x01	; 1
  return ret;
}
    58e0:	1f 91       	pop	r17
    58e2:	0f 91       	pop	r16
    58e4:	ff 90       	pop	r15
    58e6:	ef 90       	pop	r14
    58e8:	08 95       	ret

000058ea <_ZN17DallasTemperature14readScratchPadEPhS0_>:
  readScratchPad(deviceAddress, scratchPad);
  return (_wire->crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]);
}

// read device's scratch pad
void DallasTemperature::readScratchPad(uint8_t* deviceAddress, uint8_t* scratchPad)
    58ea:	cf 92       	push	r12
    58ec:	df 92       	push	r13
    58ee:	ef 92       	push	r14
    58f0:	ff 92       	push	r15
    58f2:	0f 93       	push	r16
    58f4:	1f 93       	push	r17
    58f6:	8c 01       	movw	r16, r24
    58f8:	6b 01       	movw	r12, r22
    58fa:	7a 01       	movw	r14, r20
{
  // send the command
  _wire->reset();
    58fc:	fc 01       	movw	r30, r24
    58fe:	85 81       	ldd	r24, Z+5	; 0x05
    5900:	96 81       	ldd	r25, Z+6	; 0x06
    5902:	0e 94 68 2a 	call	0x54d0	; 0x54d0 <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
    5906:	f8 01       	movw	r30, r16
    5908:	85 81       	ldd	r24, Z+5	; 0x05
    590a:	96 81       	ldd	r25, Z+6	; 0x06
    590c:	b6 01       	movw	r22, r12
    590e:	0e 94 47 2a 	call	0x548e	; 0x548e <_ZN7OneWire6selectEPKh>
  _wire->write(READSCRATCH);
    5912:	f8 01       	movw	r30, r16
    5914:	85 81       	ldd	r24, Z+5	; 0x05
    5916:	96 81       	ldd	r25, Z+6	; 0x06
    5918:	6e eb       	ldi	r22, 0xBE	; 190
    591a:	40 e0       	ldi	r20, 0x00	; 0
    591c:	0e 94 07 2a 	call	0x540e	; 0x540e <_ZN7OneWire5writeEhh>

  
  // read the response

  // byte 0: temperature LSB
  scratchPad[TEMP_LSB] = _wire->read();
    5920:	f8 01       	movw	r30, r16
    5922:	85 81       	ldd	r24, Z+5	; 0x05
    5924:	96 81       	ldd	r25, Z+6	; 0x06
    5926:	0e 94 b6 29 	call	0x536c	; 0x536c <_ZN7OneWire4readEv>
    592a:	f7 01       	movw	r30, r14
    592c:	80 83       	st	Z, r24

  // byte 1: temperature MSB
  scratchPad[TEMP_MSB] = _wire->read();
    592e:	f8 01       	movw	r30, r16
    5930:	85 81       	ldd	r24, Z+5	; 0x05
    5932:	96 81       	ldd	r25, Z+6	; 0x06
    5934:	0e 94 b6 29 	call	0x536c	; 0x536c <_ZN7OneWire4readEv>
    5938:	f7 01       	movw	r30, r14
    593a:	81 83       	std	Z+1, r24	; 0x01

  // byte 2: high alarm temp
  scratchPad[HIGH_ALARM_TEMP] = _wire->read();
    593c:	f8 01       	movw	r30, r16
    593e:	85 81       	ldd	r24, Z+5	; 0x05
    5940:	96 81       	ldd	r25, Z+6	; 0x06
    5942:	0e 94 b6 29 	call	0x536c	; 0x536c <_ZN7OneWire4readEv>
    5946:	f7 01       	movw	r30, r14
    5948:	82 83       	std	Z+2, r24	; 0x02

  // byte 3: low alarm temp
  scratchPad[LOW_ALARM_TEMP] = _wire->read();
    594a:	f8 01       	movw	r30, r16
    594c:	85 81       	ldd	r24, Z+5	; 0x05
    594e:	96 81       	ldd	r25, Z+6	; 0x06
    5950:	0e 94 b6 29 	call	0x536c	; 0x536c <_ZN7OneWire4readEv>
    5954:	f7 01       	movw	r30, r14
    5956:	83 83       	std	Z+3, r24	; 0x03

  // byte 4:
  // DS18S20: store for crc
  // DS18B20 & DS1822: configuration register
  scratchPad[CONFIGURATION] = _wire->read();
    5958:	f8 01       	movw	r30, r16
    595a:	85 81       	ldd	r24, Z+5	; 0x05
    595c:	96 81       	ldd	r25, Z+6	; 0x06
    595e:	0e 94 b6 29 	call	0x536c	; 0x536c <_ZN7OneWire4readEv>
    5962:	f7 01       	movw	r30, r14
    5964:	84 83       	std	Z+4, r24	; 0x04

  // byte 5:
  // internal use & crc
  scratchPad[INTERNAL_BYTE] = _wire->read();
    5966:	f8 01       	movw	r30, r16
    5968:	85 81       	ldd	r24, Z+5	; 0x05
    596a:	96 81       	ldd	r25, Z+6	; 0x06
    596c:	0e 94 b6 29 	call	0x536c	; 0x536c <_ZN7OneWire4readEv>
    5970:	f7 01       	movw	r30, r14
    5972:	85 83       	std	Z+5, r24	; 0x05

  // byte 6:
  // DS18S20: COUNT_REMAIN
  // DS18B20 & DS1822: store for crc
  scratchPad[COUNT_REMAIN] = _wire->read();
    5974:	f8 01       	movw	r30, r16
    5976:	85 81       	ldd	r24, Z+5	; 0x05
    5978:	96 81       	ldd	r25, Z+6	; 0x06
    597a:	0e 94 b6 29 	call	0x536c	; 0x536c <_ZN7OneWire4readEv>
    597e:	f7 01       	movw	r30, r14
    5980:	86 83       	std	Z+6, r24	; 0x06

  // byte 7:
  // DS18S20: COUNT_PER_C
  // DS18B20 & DS1822: store for crc
  scratchPad[COUNT_PER_C] = _wire->read();
    5982:	f8 01       	movw	r30, r16
    5984:	85 81       	ldd	r24, Z+5	; 0x05
    5986:	96 81       	ldd	r25, Z+6	; 0x06
    5988:	0e 94 b6 29 	call	0x536c	; 0x536c <_ZN7OneWire4readEv>
    598c:	f7 01       	movw	r30, r14
    598e:	87 83       	std	Z+7, r24	; 0x07

  // byte 8:
  // SCTRACHPAD_CRC
  scratchPad[SCRATCHPAD_CRC] = _wire->read();
    5990:	f8 01       	movw	r30, r16
    5992:	85 81       	ldd	r24, Z+5	; 0x05
    5994:	96 81       	ldd	r25, Z+6	; 0x06
    5996:	0e 94 b6 29 	call	0x536c	; 0x536c <_ZN7OneWire4readEv>
    599a:	f7 01       	movw	r30, r14
    599c:	80 87       	std	Z+8, r24	; 0x08

  _wire->reset();
    599e:	f8 01       	movw	r30, r16
    59a0:	85 81       	ldd	r24, Z+5	; 0x05
    59a2:	96 81       	ldd	r25, Z+6	; 0x06
    59a4:	0e 94 68 2a 	call	0x54d0	; 0x54d0 <_ZN7OneWire5resetEv>
}
    59a8:	1f 91       	pop	r17
    59aa:	0f 91       	pop	r16
    59ac:	ff 90       	pop	r15
    59ae:	ef 90       	pop	r14
    59b0:	df 90       	pop	r13
    59b2:	cf 90       	pop	r12
    59b4:	08 95       	ret

000059b6 <_ZN17DallasTemperature21isConversionAvailableEPh>:
bool DallasTemperature::getCheckForConversion()
{
	return checkForConversion;
}

bool DallasTemperature::isConversionAvailable(uint8_t* deviceAddress)
    59b6:	df 93       	push	r29
    59b8:	cf 93       	push	r28
    59ba:	cd b7       	in	r28, 0x3d	; 61
    59bc:	de b7       	in	r29, 0x3e	; 62
    59be:	29 97       	sbiw	r28, 0x09	; 9
    59c0:	0f b6       	in	r0, 0x3f	; 63
    59c2:	f8 94       	cli
    59c4:	de bf       	out	0x3e, r29	; 62
    59c6:	0f be       	out	0x3f, r0	; 63
    59c8:	cd bf       	out	0x3d, r28	; 61
{
	// Check if the clock has been raised indicating the conversion is complete
  	ScratchPad scratchPad;
  	readScratchPad(deviceAddress, scratchPad);
    59ca:	ae 01       	movw	r20, r28
    59cc:	4f 5f       	subi	r20, 0xFF	; 255
    59ce:	5f 4f       	sbci	r21, 0xFF	; 255
    59d0:	0e 94 75 2c 	call	0x58ea	; 0x58ea <_ZN17DallasTemperature14readScratchPadEPhS0_>
    59d4:	89 81       	ldd	r24, Y+1	; 0x01
    59d6:	81 11       	cpse	r24, r1
    59d8:	81 e0       	ldi	r24, 0x01	; 1
	return scratchPad[0];
}	
    59da:	29 96       	adiw	r28, 0x09	; 9
    59dc:	0f b6       	in	r0, 0x3f	; 63
    59de:	f8 94       	cli
    59e0:	de bf       	out	0x3e, r29	; 62
    59e2:	0f be       	out	0x3f, r0	; 63
    59e4:	cd bf       	out	0x3d, r28	; 61
    59e6:	cf 91       	pop	r28
    59e8:	df 91       	pop	r29
    59ea:	08 95       	ret

000059ec <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>:
  
  return true;
}


void DallasTemperature::blockTillConversionComplete(uint8_t* bitResolution, uint8_t* deviceAddress)
    59ec:	cf 92       	push	r12
    59ee:	df 92       	push	r13
    59f0:	ef 92       	push	r14
    59f2:	ff 92       	push	r15
    59f4:	0f 93       	push	r16
    59f6:	1f 93       	push	r17
    59f8:	cf 93       	push	r28
    59fa:	df 93       	push	r29
    59fc:	ec 01       	movw	r28, r24
    59fe:	6b 01       	movw	r12, r22
{
	if(deviceAddress != 0 && checkForConversion && !parasite)
    5a00:	45 2b       	or	r20, r21
    5a02:	e1 f0       	breq	.+56     	; 0x5a3c <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
    5a04:	8b 81       	ldd	r24, Y+3	; 0x03
    5a06:	88 23       	and	r24, r24
    5a08:	c9 f0       	breq	.+50     	; 0x5a3c <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
    5a0a:	88 81       	ld	r24, Y
    5a0c:	88 23       	and	r24, r24
    5a0e:	b1 f4       	brne	.+44     	; 0x5a3c <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
	{
	  	// Continue to check if the IC has responded with a temperature
	  	// NB: Could cause issues with multiple devices (one device may respond faster)
	  	unsigned long start = millis();
    5a10:	0e 94 32 30 	call	0x6064	; 0x6064 <millis>
    5a14:	7b 01       	movw	r14, r22
    5a16:	8c 01       	movw	r16, r24
		while(!isConversionAvailable(0) && ((millis() - start) < 750));	
    5a18:	ce 01       	movw	r24, r28
    5a1a:	60 e0       	ldi	r22, 0x00	; 0
    5a1c:	70 e0       	ldi	r23, 0x00	; 0
    5a1e:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <_ZN17DallasTemperature21isConversionAvailableEPh>
    5a22:	88 23       	and	r24, r24
    5a24:	59 f4       	brne	.+22     	; 0x5a3c <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
    5a26:	0e 94 32 30 	call	0x6064	; 0x6064 <millis>
    5a2a:	6e 19       	sub	r22, r14
    5a2c:	7f 09       	sbc	r23, r15
    5a2e:	80 0b       	sbc	r24, r16
    5a30:	91 0b       	sbc	r25, r17
    5a32:	6e 5e       	subi	r22, 0xEE	; 238
    5a34:	72 40       	sbci	r23, 0x02	; 2
    5a36:	80 40       	sbci	r24, 0x00	; 0
    5a38:	90 40       	sbci	r25, 0x00	; 0
    5a3a:	70 f3       	brcs	.-36     	; 0x5a18 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x2c>
	}
	
  	// Wait a fix number of cycles till conversion is complete (based on IC datasheet)
	  switch (*bitResolution)
    5a3c:	f6 01       	movw	r30, r12
    5a3e:	60 81       	ld	r22, Z
    5a40:	69 30       	cpi	r22, 0x09	; 9
    5a42:	39 f0       	breq	.+14     	; 0x5a52 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x66>
    5a44:	69 30       	cpi	r22, 0x09	; 9
    5a46:	a0 f0       	brcs	.+40     	; 0x5a70 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x84>
    5a48:	6a 30       	cpi	r22, 0x0A	; 10
    5a4a:	41 f0       	breq	.+16     	; 0x5a5c <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x70>
    5a4c:	6b 30       	cpi	r22, 0x0B	; 11
    5a4e:	81 f4       	brne	.+32     	; 0x5a70 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x84>
    5a50:	0a c0       	rjmp	.+20     	; 0x5a66 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x7a>
	  {
	    case 9:
	      delay(94);
    5a52:	6e e5       	ldi	r22, 0x5E	; 94
    5a54:	70 e0       	ldi	r23, 0x00	; 0
    5a56:	80 e0       	ldi	r24, 0x00	; 0
    5a58:	90 e0       	ldi	r25, 0x00	; 0
    5a5a:	0e c0       	rjmp	.+28     	; 0x5a78 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x8c>
	      break;
	    case 10:
	      delay(188);
    5a5c:	6c eb       	ldi	r22, 0xBC	; 188
    5a5e:	70 e0       	ldi	r23, 0x00	; 0
    5a60:	80 e0       	ldi	r24, 0x00	; 0
    5a62:	90 e0       	ldi	r25, 0x00	; 0
    5a64:	09 c0       	rjmp	.+18     	; 0x5a78 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x8c>
	      break;
	    case 11:
	      delay(375);
    5a66:	67 e7       	ldi	r22, 0x77	; 119
    5a68:	71 e0       	ldi	r23, 0x01	; 1
    5a6a:	80 e0       	ldi	r24, 0x00	; 0
    5a6c:	90 e0       	ldi	r25, 0x00	; 0
    5a6e:	04 c0       	rjmp	.+8      	; 0x5a78 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x8c>
	      break;
	    case 12:
	    default:
	      delay(750);
    5a70:	6e ee       	ldi	r22, 0xEE	; 238
    5a72:	72 e0       	ldi	r23, 0x02	; 2
    5a74:	80 e0       	ldi	r24, 0x00	; 0
    5a76:	90 e0       	ldi	r25, 0x00	; 0
    5a78:	0e 94 40 30 	call	0x6080	; 0x6080 <delay>
	      break;
	  }

}
    5a7c:	df 91       	pop	r29
    5a7e:	cf 91       	pop	r28
    5a80:	1f 91       	pop	r17
    5a82:	0f 91       	pop	r16
    5a84:	ff 90       	pop	r15
    5a86:	ef 90       	pop	r14
    5a88:	df 90       	pop	r13
    5a8a:	cf 90       	pop	r12
    5a8c:	08 95       	ret

00005a8e <_ZN17DallasTemperature11isConnectedEPhS0_>:
  return isConnected(deviceAddress, scratchPad);
}

// attempt to determine if the device at the given address is connected to the bus
// also allows for updating the read scratchpad
bool DallasTemperature::isConnected(uint8_t* deviceAddress, uint8_t* scratchPad)
    5a8e:	0f 93       	push	r16
    5a90:	1f 93       	push	r17
    5a92:	8a 01       	movw	r16, r20
{
  readScratchPad(deviceAddress, scratchPad);
    5a94:	0e 94 75 2c 	call	0x58ea	; 0x58ea <_ZN17DallasTemperature14readScratchPadEPhS0_>
  return (_wire->crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]);
    5a98:	c8 01       	movw	r24, r16
    5a9a:	68 e0       	ldi	r22, 0x08	; 8
    5a9c:	0e 94 71 29 	call	0x52e2	; 0x52e2 <_ZN7OneWire4crc8EPKhh>
    5aa0:	20 e0       	ldi	r18, 0x00	; 0
    5aa2:	f8 01       	movw	r30, r16
    5aa4:	90 85       	ldd	r25, Z+8	; 0x08
    5aa6:	89 17       	cp	r24, r25
    5aa8:	09 f4       	brne	.+2      	; 0x5aac <_ZN17DallasTemperature11isConnectedEPhS0_+0x1e>
    5aaa:	21 e0       	ldi	r18, 0x01	; 1
}
    5aac:	82 2f       	mov	r24, r18
    5aae:	1f 91       	pop	r17
    5ab0:	0f 91       	pop	r16
    5ab2:	08 95       	ret

00005ab4 <_ZN17DallasTemperature8getTempCEPh>:
// returns temperature in degrees C or DEVICE_DISCONNECTED if the
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DallasTemperature::getTempC(uint8_t* deviceAddress)
    5ab4:	cf 92       	push	r12
    5ab6:	df 92       	push	r13
    5ab8:	ef 92       	push	r14
    5aba:	ff 92       	push	r15
    5abc:	0f 93       	push	r16
    5abe:	1f 93       	push	r17
    5ac0:	df 93       	push	r29
    5ac2:	cf 93       	push	r28
    5ac4:	cd b7       	in	r28, 0x3d	; 61
    5ac6:	de b7       	in	r29, 0x3e	; 62
    5ac8:	29 97       	sbiw	r28, 0x09	; 9
    5aca:	0f b6       	in	r0, 0x3f	; 63
    5acc:	f8 94       	cli
    5ace:	de bf       	out	0x3e, r29	; 62
    5ad0:	0f be       	out	0x3f, r0	; 63
    5ad2:	cd bf       	out	0x3d, r28	; 61
    5ad4:	8c 01       	movw	r16, r24
    5ad6:	7b 01       	movw	r14, r22
  // TODO: Multiple devices (up to 64) on the same bus may take 
  //       some time to negotiate a response
  // What happens in case of collision?

  ScratchPad scratchPad;
  if (isConnected(deviceAddress, scratchPad)) return calculateTemperature(deviceAddress, scratchPad);
    5ad8:	6e 01       	movw	r12, r28
    5ada:	08 94       	sec
    5adc:	c1 1c       	adc	r12, r1
    5ade:	d1 1c       	adc	r13, r1
    5ae0:	a6 01       	movw	r20, r12
    5ae2:	0e 94 47 2d 	call	0x5a8e	; 0x5a8e <_ZN17DallasTemperature11isConnectedEPhS0_>
    5ae6:	88 23       	and	r24, r24
    5ae8:	29 f4       	brne	.+10     	; 0x5af4 <_ZN17DallasTemperature8getTempCEPh+0x40>
    5aea:	60 e0       	ldi	r22, 0x00	; 0
    5aec:	70 e0       	ldi	r23, 0x00	; 0
    5aee:	8e ef       	ldi	r24, 0xFE	; 254
    5af0:	92 ec       	ldi	r25, 0xC2	; 194
    5af2:	05 c0       	rjmp	.+10     	; 0x5afe <_ZN17DallasTemperature8getTempCEPh+0x4a>
    5af4:	c8 01       	movw	r24, r16
    5af6:	b7 01       	movw	r22, r14
    5af8:	a6 01       	movw	r20, r12
    5afa:	0e 94 91 2b 	call	0x5722	; 0x5722 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>
  return DEVICE_DISCONNECTED;
}
    5afe:	29 96       	adiw	r28, 0x09	; 9
    5b00:	0f b6       	in	r0, 0x3f	; 63
    5b02:	f8 94       	cli
    5b04:	de bf       	out	0x3e, r29	; 62
    5b06:	0f be       	out	0x3f, r0	; 63
    5b08:	cd bf       	out	0x3d, r28	; 61
    5b0a:	cf 91       	pop	r28
    5b0c:	df 91       	pop	r29
    5b0e:	1f 91       	pop	r17
    5b10:	0f 91       	pop	r16
    5b12:	ff 90       	pop	r15
    5b14:	ef 90       	pop	r14
    5b16:	df 90       	pop	r13
    5b18:	cf 90       	pop	r12
    5b1a:	08 95       	ret

00005b1c <_ZN17DallasTemperature13getResolutionEPh>:
	return bitResolution;
}

// returns the current resolution of the device, 9-12
// returns 0 if device not found
uint8_t DallasTemperature::getResolution(uint8_t* deviceAddress)
    5b1c:	df 93       	push	r29
    5b1e:	cf 93       	push	r28
    5b20:	cd b7       	in	r28, 0x3d	; 61
    5b22:	de b7       	in	r29, 0x3e	; 62
    5b24:	29 97       	sbiw	r28, 0x09	; 9
    5b26:	0f b6       	in	r0, 0x3f	; 63
    5b28:	f8 94       	cli
    5b2a:	de bf       	out	0x3e, r29	; 62
    5b2c:	0f be       	out	0x3f, r0	; 63
    5b2e:	cd bf       	out	0x3d, r28	; 61
    5b30:	9c 01       	movw	r18, r24
    5b32:	fb 01       	movw	r30, r22
{
  if (deviceAddress[0] == DS18S20MODEL) return 9; // this model has a fixed resolution
    5b34:	80 81       	ld	r24, Z
    5b36:	80 31       	cpi	r24, 0x10	; 16
    5b38:	d9 f0       	breq	.+54     	; 0x5b70 <_ZN17DallasTemperature13getResolutionEPh+0x54>

  ScratchPad scratchPad;
  if (isConnected(deviceAddress, scratchPad))
    5b3a:	c9 01       	movw	r24, r18
    5b3c:	ae 01       	movw	r20, r28
    5b3e:	4f 5f       	subi	r20, 0xFF	; 255
    5b40:	5f 4f       	sbci	r21, 0xFF	; 255
    5b42:	0e 94 47 2d 	call	0x5a8e	; 0x5a8e <_ZN17DallasTemperature11isConnectedEPhS0_>
    5b46:	88 23       	and	r24, r24
    5b48:	a9 f0       	breq	.+42     	; 0x5b74 <_ZN17DallasTemperature13getResolutionEPh+0x58>
  {
	switch (scratchPad[CONFIGURATION])
    5b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    5b4c:	8f 33       	cpi	r24, 0x3F	; 63
    5b4e:	71 f0       	breq	.+28     	; 0x5b6c <_ZN17DallasTemperature13getResolutionEPh+0x50>
    5b50:	80 34       	cpi	r24, 0x40	; 64
    5b52:	18 f4       	brcc	.+6      	; 0x5b5a <_ZN17DallasTemperature13getResolutionEPh+0x3e>
    5b54:	8f 31       	cpi	r24, 0x1F	; 31
    5b56:	71 f4       	brne	.+28     	; 0x5b74 <_ZN17DallasTemperature13getResolutionEPh+0x58>
    5b58:	0b c0       	rjmp	.+22     	; 0x5b70 <_ZN17DallasTemperature13getResolutionEPh+0x54>
    5b5a:	8f 35       	cpi	r24, 0x5F	; 95
    5b5c:	19 f0       	breq	.+6      	; 0x5b64 <_ZN17DallasTemperature13getResolutionEPh+0x48>
    5b5e:	8f 37       	cpi	r24, 0x7F	; 127
    5b60:	49 f4       	brne	.+18     	; 0x5b74 <_ZN17DallasTemperature13getResolutionEPh+0x58>
    5b62:	02 c0       	rjmp	.+4      	; 0x5b68 <_ZN17DallasTemperature13getResolutionEPh+0x4c>
    5b64:	8b e0       	ldi	r24, 0x0B	; 11
    5b66:	07 c0       	rjmp	.+14     	; 0x5b76 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
    5b68:	8c e0       	ldi	r24, 0x0C	; 12
    5b6a:	05 c0       	rjmp	.+10     	; 0x5b76 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
    5b6c:	8a e0       	ldi	r24, 0x0A	; 10
    5b6e:	03 c0       	rjmp	.+6      	; 0x5b76 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
        
      case TEMP_11_BIT:
        return 11;
        
      case TEMP_10_BIT:
        return 10;
    5b70:	89 e0       	ldi	r24, 0x09	; 9
    5b72:	01 c0       	rjmp	.+2      	; 0x5b76 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
    5b74:	80 e0       	ldi	r24, 0x00	; 0
        return 9;
        
	}
  }
  return 0;
}
    5b76:	29 96       	adiw	r28, 0x09	; 9
    5b78:	0f b6       	in	r0, 0x3f	; 63
    5b7a:	f8 94       	cli
    5b7c:	de bf       	out	0x3e, r29	; 62
    5b7e:	0f be       	out	0x3f, r0	; 63
    5b80:	cd bf       	out	0x3d, r28	; 61
    5b82:	cf 91       	pop	r28
    5b84:	df 91       	pop	r29
    5b86:	08 95       	ret

00005b88 <_ZN17DallasTemperature28requestTemperaturesByAddressEPh>:
}

// sends command for one device to perform a temperature by address
// returns FALSE if device is disconnected
// returns TRUE  otherwise
bool DallasTemperature::requestTemperaturesByAddress(uint8_t* deviceAddress)
    5b88:	ef 92       	push	r14
    5b8a:	ff 92       	push	r15
    5b8c:	0f 93       	push	r16
    5b8e:	1f 93       	push	r17
    5b90:	df 93       	push	r29
    5b92:	cf 93       	push	r28
    5b94:	cd b7       	in	r28, 0x3d	; 61
    5b96:	de b7       	in	r29, 0x3e	; 62
    5b98:	2a 97       	sbiw	r28, 0x0a	; 10
    5b9a:	0f b6       	in	r0, 0x3f	; 63
    5b9c:	f8 94       	cli
    5b9e:	de bf       	out	0x3e, r29	; 62
    5ba0:	0f be       	out	0x3f, r0	; 63
    5ba2:	cd bf       	out	0x3d, r28	; 61
    5ba4:	8c 01       	movw	r16, r24
    5ba6:	7b 01       	movw	r14, r22
{

  _wire->reset();
    5ba8:	fc 01       	movw	r30, r24
    5baa:	85 81       	ldd	r24, Z+5	; 0x05
    5bac:	96 81       	ldd	r25, Z+6	; 0x06
    5bae:	0e 94 68 2a 	call	0x54d0	; 0x54d0 <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
    5bb2:	f8 01       	movw	r30, r16
    5bb4:	85 81       	ldd	r24, Z+5	; 0x05
    5bb6:	96 81       	ldd	r25, Z+6	; 0x06
    5bb8:	b7 01       	movw	r22, r14
    5bba:	0e 94 47 2a 	call	0x548e	; 0x548e <_ZN7OneWire6selectEPKh>
  _wire->write(STARTCONVO, parasite);
    5bbe:	f8 01       	movw	r30, r16
    5bc0:	85 81       	ldd	r24, Z+5	; 0x05
    5bc2:	96 81       	ldd	r25, Z+6	; 0x06
    5bc4:	64 e4       	ldi	r22, 0x44	; 68
    5bc6:	40 81       	ld	r20, Z
    5bc8:	0e 94 07 2a 	call	0x540e	; 0x540e <_ZN7OneWire5writeEhh>
  
    // check device
  ScratchPad scratchPad;
  if (!isConnected(deviceAddress, scratchPad)) return false;
    5bcc:	c8 01       	movw	r24, r16
    5bce:	b7 01       	movw	r22, r14
    5bd0:	ae 01       	movw	r20, r28
    5bd2:	4e 5f       	subi	r20, 0xFE	; 254
    5bd4:	5f 4f       	sbci	r21, 0xFF	; 255
    5bd6:	0e 94 47 2d 	call	0x5a8e	; 0x5a8e <_ZN17DallasTemperature11isConnectedEPhS0_>
    5bda:	88 23       	and	r24, r24
    5bdc:	89 f0       	breq	.+34     	; 0x5c00 <_ZN17DallasTemperature28requestTemperaturesByAddressEPh+0x78>
  
  
  // ASYNC mode?
  if (!waitForConversion) return true;   
    5bde:	f8 01       	movw	r30, r16
    5be0:	82 81       	ldd	r24, Z+2	; 0x02
    5be2:	88 23       	and	r24, r24
    5be4:	61 f0       	breq	.+24     	; 0x5bfe <_ZN17DallasTemperature28requestTemperaturesByAddressEPh+0x76>
  uint8_t bitResolution = getResolution(deviceAddress);
    5be6:	c8 01       	movw	r24, r16
    5be8:	b7 01       	movw	r22, r14
    5bea:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <_ZN17DallasTemperature13getResolutionEPh>
    5bee:	89 83       	std	Y+1, r24	; 0x01
  blockTillConversionComplete(&bitResolution, deviceAddress);
    5bf0:	c8 01       	movw	r24, r16
    5bf2:	be 01       	movw	r22, r28
    5bf4:	6f 5f       	subi	r22, 0xFF	; 255
    5bf6:	7f 4f       	sbci	r23, 0xFF	; 255
    5bf8:	a7 01       	movw	r20, r14
    5bfa:	0e 94 f6 2c 	call	0x59ec	; 0x59ec <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>
    5bfe:	81 e0       	ldi	r24, 0x01	; 1
  
  return true;
}
    5c00:	2a 96       	adiw	r28, 0x0a	; 10
    5c02:	0f b6       	in	r0, 0x3f	; 63
    5c04:	f8 94       	cli
    5c06:	de bf       	out	0x3e, r29	; 62
    5c08:	0f be       	out	0x3f, r0	; 63
    5c0a:	cd bf       	out	0x3d, r28	; 61
    5c0c:	cf 91       	pop	r28
    5c0e:	df 91       	pop	r29
    5c10:	1f 91       	pop	r17
    5c12:	0f 91       	pop	r16
    5c14:	ff 90       	pop	r15
    5c16:	ef 90       	pop	r14
    5c18:	08 95       	ret

00005c1a <_ZN17DallasTemperature12validAddressEPh>:
{
  return devices;
}

// returns true if address is valid
bool DallasTemperature::validAddress(uint8_t* deviceAddress)
    5c1a:	0f 93       	push	r16
    5c1c:	1f 93       	push	r17
    5c1e:	8b 01       	movw	r16, r22
{
  return (_wire->crc8(deviceAddress, 7) == deviceAddress[7]);
    5c20:	cb 01       	movw	r24, r22
    5c22:	67 e0       	ldi	r22, 0x07	; 7
    5c24:	0e 94 71 29 	call	0x52e2	; 0x52e2 <_ZN7OneWire4crc8EPKhh>
    5c28:	20 e0       	ldi	r18, 0x00	; 0
    5c2a:	f8 01       	movw	r30, r16
    5c2c:	97 81       	ldd	r25, Z+7	; 0x07
    5c2e:	89 17       	cp	r24, r25
    5c30:	09 f4       	brne	.+2      	; 0x5c34 <_ZN17DallasTemperature12validAddressEPh+0x1a>
    5c32:	21 e0       	ldi	r18, 0x01	; 1
}
    5c34:	82 2f       	mov	r24, r18
    5c36:	1f 91       	pop	r17
    5c38:	0f 91       	pop	r16
    5c3a:	08 95       	ret

00005c3c <_ZN17DallasTemperature10getAddressEPhh>:

// finds an address at a given index on the bus
// returns true if the device was found
bool DallasTemperature::getAddress(uint8_t* deviceAddress, uint8_t index)
    5c3c:	ef 92       	push	r14
    5c3e:	ff 92       	push	r15
    5c40:	0f 93       	push	r16
    5c42:	1f 93       	push	r17
    5c44:	cf 93       	push	r28
    5c46:	df 93       	push	r29
    5c48:	ec 01       	movw	r28, r24
    5c4a:	7b 01       	movw	r14, r22
    5c4c:	04 2f       	mov	r16, r20
{
  uint8_t depth = 0;

  _wire->reset_search();
    5c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    5c50:	9e 81       	ldd	r25, Y+6	; 0x06
    5c52:	0e 94 64 29 	call	0x52c8	; 0x52c8 <_ZN7OneWire12reset_searchEv>
    5c56:	10 e0       	ldi	r17, 0x00	; 0
    5c58:	07 c0       	rjmp	.+14     	; 0x5c68 <_ZN17DallasTemperature10getAddressEPhh+0x2c>

  while (depth <= index && _wire->search(deviceAddress))
  {
    if (depth == index && validAddress(deviceAddress)) return true;
    5c5a:	ce 01       	movw	r24, r28
    5c5c:	b7 01       	movw	r22, r14
    5c5e:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <_ZN17DallasTemperature12validAddressEPh>
    5c62:	88 23       	and	r24, r24
    5c64:	a9 f0       	breq	.+42     	; 0x5c90 <_ZN17DallasTemperature10getAddressEPhh+0x54>
    5c66:	0a c0       	rjmp	.+20     	; 0x5c7c <_ZN17DallasTemperature10getAddressEPhh+0x40>
{
  uint8_t depth = 0;

  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
    5c68:	8d 81       	ldd	r24, Y+5	; 0x05
    5c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    5c6c:	b7 01       	movw	r22, r14
    5c6e:	0e 94 b3 2a 	call	0x5566	; 0x5566 <_ZN7OneWire6searchEPh>
    5c72:	88 23       	and	r24, r24
    5c74:	29 f0       	breq	.+10     	; 0x5c80 <_ZN17DallasTemperature10getAddressEPhh+0x44>
  {
    if (depth == index && validAddress(deviceAddress)) return true;
    5c76:	10 17       	cp	r17, r16
    5c78:	59 f4       	brne	.+22     	; 0x5c90 <_ZN17DallasTemperature10getAddressEPhh+0x54>
    5c7a:	ef cf       	rjmp	.-34     	; 0x5c5a <_ZN17DallasTemperature10getAddressEPhh+0x1e>
    5c7c:	81 e0       	ldi	r24, 0x01	; 1
    5c7e:	01 c0       	rjmp	.+2      	; 0x5c82 <_ZN17DallasTemperature10getAddressEPhh+0x46>
    5c80:	80 e0       	ldi	r24, 0x00	; 0
    depth++;
  }

  return false;
}
    5c82:	df 91       	pop	r29
    5c84:	cf 91       	pop	r28
    5c86:	1f 91       	pop	r17
    5c88:	0f 91       	pop	r16
    5c8a:	ff 90       	pop	r15
    5c8c:	ef 90       	pop	r14
    5c8e:	08 95       	ret
  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
  {
    if (depth == index && validAddress(deviceAddress)) return true;
    depth++;
    5c90:	1f 5f       	subi	r17, 0xFF	; 255
{
  uint8_t depth = 0;

  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
    5c92:	01 17       	cp	r16, r17
    5c94:	a8 f3       	brcs	.-22     	; 0x5c80 <_ZN17DallasTemperature10getAddressEPhh+0x44>
    5c96:	e8 cf       	rjmp	.-48     	; 0x5c68 <_ZN17DallasTemperature10getAddressEPhh+0x2c>

00005c98 <_ZN17DallasTemperature5beginEv>:
  waitForConversion = true;
  checkForConversion = true;
}

// initialise the bus
void DallasTemperature::begin(void)
    5c98:	af 92       	push	r10
    5c9a:	bf 92       	push	r11
    5c9c:	cf 92       	push	r12
    5c9e:	df 92       	push	r13
    5ca0:	ef 92       	push	r14
    5ca2:	ff 92       	push	r15
    5ca4:	0f 93       	push	r16
    5ca6:	1f 93       	push	r17
    5ca8:	df 93       	push	r29
    5caa:	cf 93       	push	r28
    5cac:	cd b7       	in	r28, 0x3d	; 61
    5cae:	de b7       	in	r29, 0x3e	; 62
    5cb0:	61 97       	sbiw	r28, 0x11	; 17
    5cb2:	0f b6       	in	r0, 0x3f	; 63
    5cb4:	f8 94       	cli
    5cb6:	de bf       	out	0x3e, r29	; 62
    5cb8:	0f be       	out	0x3f, r0	; 63
    5cba:	cd bf       	out	0x3d, r28	; 61
    5cbc:	7c 01       	movw	r14, r24
{
  DeviceAddress deviceAddress;

  _wire->reset_search();
    5cbe:	fc 01       	movw	r30, r24
    5cc0:	85 81       	ldd	r24, Z+5	; 0x05
    5cc2:	96 81       	ldd	r25, Z+6	; 0x06
    5cc4:	0e 94 64 29 	call	0x52c8	; 0x52c8 <_ZN7OneWire12reset_searchEv>
  devices = 0; // Reset the number of devices when we enumerate wire devices
    5cc8:	f7 01       	movw	r30, r14
    5cca:	14 82       	std	Z+4, r1	; 0x04

  while (_wire->search(deviceAddress))
    5ccc:	6e 01       	movw	r12, r28
    5cce:	08 94       	sec
    5cd0:	c1 1c       	adc	r12, r1
    5cd2:	d1 1c       	adc	r13, r1
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;

      ScratchPad scratchPad;

      readScratchPad(deviceAddress, scratchPad);
    5cd4:	79 e0       	ldi	r23, 0x09	; 9
    5cd6:	a7 2e       	mov	r10, r23
    5cd8:	b1 2c       	mov	r11, r1
    5cda:	ac 0e       	add	r10, r28
    5cdc:	bd 1e       	adc	r11, r29

  while (_wire->search(deviceAddress))
  {
    if (validAddress(deviceAddress))
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;
    5cde:	01 e0       	ldi	r16, 0x01	; 1
    5ce0:	2b c0       	rjmp	.+86     	; 0x5d38 <_ZN17DallasTemperature5beginEv+0xa0>
  _wire->reset_search();
  devices = 0; // Reset the number of devices when we enumerate wire devices

  while (_wire->search(deviceAddress))
  {
    if (validAddress(deviceAddress))
    5ce2:	c7 01       	movw	r24, r14
    5ce4:	b6 01       	movw	r22, r12
    5ce6:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <_ZN17DallasTemperature12validAddressEPh>
    5cea:	88 23       	and	r24, r24
    5cec:	29 f1       	breq	.+74     	; 0x5d38 <_ZN17DallasTemperature5beginEv+0xa0>
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;
    5cee:	f7 01       	movw	r30, r14
    5cf0:	80 81       	ld	r24, Z
    5cf2:	88 23       	and	r24, r24
    5cf4:	41 f4       	brne	.+16     	; 0x5d06 <_ZN17DallasTemperature5beginEv+0x6e>
    5cf6:	c7 01       	movw	r24, r14
    5cf8:	b6 01       	movw	r22, r12
    5cfa:	0e 94 49 2c 	call	0x5892	; 0x5892 <_ZN17DallasTemperature15readPowerSupplyEPh>
    5cfe:	88 23       	and	r24, r24
    5d00:	11 f0       	breq	.+4      	; 0x5d06 <_ZN17DallasTemperature5beginEv+0x6e>
    5d02:	f7 01       	movw	r30, r14
    5d04:	00 83       	st	Z, r16

      ScratchPad scratchPad;

      readScratchPad(deviceAddress, scratchPad);
    5d06:	c7 01       	movw	r24, r14
    5d08:	b6 01       	movw	r22, r12
    5d0a:	a5 01       	movw	r20, r10
    5d0c:	0e 94 75 2c 	call	0x58ea	; 0x58ea <_ZN17DallasTemperature14readScratchPadEPhS0_>

	  bitResolution = max(bitResolution, getResolution(deviceAddress));
    5d10:	f7 01       	movw	r30, r14
    5d12:	11 81       	ldd	r17, Z+1	; 0x01
    5d14:	c7 01       	movw	r24, r14
    5d16:	b6 01       	movw	r22, r12
    5d18:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <_ZN17DallasTemperature13getResolutionEPh>
    5d1c:	81 17       	cp	r24, r17
    5d1e:	18 f4       	brcc	.+6      	; 0x5d26 <_ZN17DallasTemperature5beginEv+0x8e>
    5d20:	f7 01       	movw	r30, r14
    5d22:	81 81       	ldd	r24, Z+1	; 0x01
    5d24:	04 c0       	rjmp	.+8      	; 0x5d2e <_ZN17DallasTemperature5beginEv+0x96>
    5d26:	c7 01       	movw	r24, r14
    5d28:	b6 01       	movw	r22, r12
    5d2a:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <_ZN17DallasTemperature13getResolutionEPh>
    5d2e:	f7 01       	movw	r30, r14
    5d30:	81 83       	std	Z+1, r24	; 0x01

      devices++;
    5d32:	84 81       	ldd	r24, Z+4	; 0x04
    5d34:	8f 5f       	subi	r24, 0xFF	; 255
    5d36:	84 83       	std	Z+4, r24	; 0x04
  DeviceAddress deviceAddress;

  _wire->reset_search();
  devices = 0; // Reset the number of devices when we enumerate wire devices

  while (_wire->search(deviceAddress))
    5d38:	f7 01       	movw	r30, r14
    5d3a:	85 81       	ldd	r24, Z+5	; 0x05
    5d3c:	96 81       	ldd	r25, Z+6	; 0x06
    5d3e:	b6 01       	movw	r22, r12
    5d40:	0e 94 b3 2a 	call	0x5566	; 0x5566 <_ZN7OneWire6searchEPh>
    5d44:	88 23       	and	r24, r24
    5d46:	69 f6       	brne	.-102    	; 0x5ce2 <_ZN17DallasTemperature5beginEv+0x4a>
	  bitResolution = max(bitResolution, getResolution(deviceAddress));

      devices++;
    }
  }
}
    5d48:	61 96       	adiw	r28, 0x11	; 17
    5d4a:	0f b6       	in	r0, 0x3f	; 63
    5d4c:	f8 94       	cli
    5d4e:	de bf       	out	0x3e, r29	; 62
    5d50:	0f be       	out	0x3f, r0	; 63
    5d52:	cd bf       	out	0x3d, r28	; 61
    5d54:	cf 91       	pop	r28
    5d56:	df 91       	pop	r29
    5d58:	1f 91       	pop	r17
    5d5a:	0f 91       	pop	r16
    5d5c:	ff 90       	pop	r15
    5d5e:	ef 90       	pop	r14
    5d60:	df 90       	pop	r13
    5d62:	cf 90       	pop	r12
    5d64:	bf 90       	pop	r11
    5d66:	af 90       	pop	r10
    5d68:	08 95       	ret

00005d6a <malloc>:
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	if (len < sizeof(struct __freelist) - sizeof(size_t))
    5d6a:	0f 93       	push	r16
    5d6c:	1f 93       	push	r17
    5d6e:	cf 93       	push	r28
    5d70:	df 93       	push	r29
    5d72:	bc 01       	movw	r22, r24
    5d74:	82 30       	cpi	r24, 0x02	; 2
    5d76:	91 05       	cpc	r25, r1
    5d78:	10 f4       	brcc	.+4      	; 0x5d7e <malloc+0x14>
    5d7a:	62 e0       	ldi	r22, 0x02	; 2
    5d7c:	70 e0       	ldi	r23, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    5d7e:	e0 91 e2 03 	lds	r30, 0x03E2
    5d82:	f0 91 e3 03 	lds	r31, 0x03E3
    5d86:	a0 e0       	ldi	r26, 0x00	; 0
    5d88:	b0 e0       	ldi	r27, 0x00	; 0
    5d8a:	40 e0       	ldi	r20, 0x00	; 0
    5d8c:	50 e0       	ldi	r21, 0x00	; 0
    5d8e:	24 c0       	rjmp	.+72     	; 0x5dd8 <malloc+0x6e>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    5d90:	80 81       	ld	r24, Z
    5d92:	91 81       	ldd	r25, Z+1	; 0x01
    5d94:	86 17       	cp	r24, r22
    5d96:	97 07       	cpc	r25, r23
    5d98:	d0 f0       	brcs	.+52     	; 0x5dce <malloc+0x64>
			continue;
		if (fp1->sz == len) {
    5d9a:	86 17       	cp	r24, r22
    5d9c:	97 07       	cpc	r25, r23
    5d9e:	71 f4       	brne	.+28     	; 0x5dbc <malloc+0x52>
    5da0:	82 81       	ldd	r24, Z+2	; 0x02
    5da2:	93 81       	ldd	r25, Z+3	; 0x03
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    5da4:	10 97       	sbiw	r26, 0x00	; 0
    5da6:	29 f0       	breq	.+10     	; 0x5db2 <malloc+0x48>
				fp2->nx = fp1->nx;
    5da8:	13 96       	adiw	r26, 0x03	; 3
    5daa:	9c 93       	st	X, r25
    5dac:	8e 93       	st	-X, r24
    5dae:	12 97       	sbiw	r26, 0x02	; 2
    5db0:	2c c0       	rjmp	.+88     	; 0x5e0a <malloc+0xa0>
			else
				__flp = fp1->nx;
    5db2:	90 93 e3 03 	sts	0x03E3, r25
    5db6:	80 93 e2 03 	sts	0x03E2, r24
    5dba:	27 c0       	rjmp	.+78     	; 0x5e0a <malloc+0xa0>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    5dbc:	41 15       	cp	r20, r1
    5dbe:	51 05       	cpc	r21, r1
    5dc0:	19 f0       	breq	.+6      	; 0x5dc8 <malloc+0x5e>
    5dc2:	84 17       	cp	r24, r20
    5dc4:	95 07       	cpc	r25, r21
    5dc6:	18 f4       	brcc	.+6      	; 0x5dce <malloc+0x64>
    5dc8:	ef 01       	movw	r28, r30
    5dca:	8d 01       	movw	r16, r26
    5dcc:	ac 01       	movw	r20, r24
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    5dce:	df 01       	movw	r26, r30
    5dd0:	82 81       	ldd	r24, Z+2	; 0x02
    5dd2:	93 81       	ldd	r25, Z+3	; 0x03
    5dd4:	9c 01       	movw	r18, r24
    5dd6:	f9 01       	movw	r30, r18
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
    5dd8:	30 97       	sbiw	r30, 0x00	; 0
    5dda:	d1 f6       	brne	.-76     	; 0x5d90 <malloc+0x26>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    5ddc:	41 15       	cp	r20, r1
    5dde:	51 05       	cpc	r21, r1
    5de0:	f9 f0       	breq	.+62     	; 0x5e20 <malloc+0xb6>
		if (s - len < sizeof(struct __freelist)) {
    5de2:	ca 01       	movw	r24, r20
    5de4:	86 1b       	sub	r24, r22
    5de6:	97 0b       	sbc	r25, r23
    5de8:	84 30       	cpi	r24, 0x04	; 4
    5dea:	91 05       	cpc	r25, r1
    5dec:	80 f4       	brcc	.+32     	; 0x5e0e <malloc+0xa4>
    5dee:	8a 81       	ldd	r24, Y+2	; 0x02
    5df0:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    5df2:	01 15       	cp	r16, r1
    5df4:	11 05       	cpc	r17, r1
    5df6:	21 f0       	breq	.+8      	; 0x5e00 <malloc+0x96>
				sfp2->nx = sfp1->nx;
    5df8:	f8 01       	movw	r30, r16
    5dfa:	93 83       	std	Z+3, r25	; 0x03
    5dfc:	82 83       	std	Z+2, r24	; 0x02
    5dfe:	04 c0       	rjmp	.+8      	; 0x5e08 <malloc+0x9e>
			else
				__flp = sfp1->nx;
    5e00:	90 93 e3 03 	sts	0x03E3, r25
    5e04:	80 93 e2 03 	sts	0x03E2, r24
			return &(sfp1->nx);
    5e08:	fe 01       	movw	r30, r28
    5e0a:	32 96       	adiw	r30, 0x02	; 2
    5e0c:	45 c0       	rjmp	.+138    	; 0x5e98 <malloc+0x12e>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    5e0e:	fe 01       	movw	r30, r28
    5e10:	e8 0f       	add	r30, r24
    5e12:	f9 1f       	adc	r31, r25
    5e14:	61 93       	st	Z+, r22
    5e16:	71 93       	st	Z+, r23
		sfp1->sz = s - sizeof(size_t);
    5e18:	02 97       	sbiw	r24, 0x02	; 2
    5e1a:	99 83       	std	Y+1, r25	; 0x01
    5e1c:	88 83       	st	Y, r24
    5e1e:	3c c0       	rjmp	.+120    	; 0x5e98 <malloc+0x12e>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
    5e20:	80 91 e0 03 	lds	r24, 0x03E0
    5e24:	90 91 e1 03 	lds	r25, 0x03E1
    5e28:	89 2b       	or	r24, r25
    5e2a:	41 f4       	brne	.+16     	; 0x5e3c <malloc+0xd2>
		__brkval = __malloc_heap_start;
    5e2c:	80 91 0c 01 	lds	r24, 0x010C
    5e30:	90 91 0d 01 	lds	r25, 0x010D
    5e34:	90 93 e1 03 	sts	0x03E1, r25
    5e38:	80 93 e0 03 	sts	0x03E0, r24
	cp = __malloc_heap_end;
    5e3c:	40 91 0e 01 	lds	r20, 0x010E
    5e40:	50 91 0f 01 	lds	r21, 0x010F
	if (cp == 0)
    5e44:	41 15       	cp	r20, r1
    5e46:	51 05       	cpc	r21, r1
    5e48:	41 f4       	brne	.+16     	; 0x5e5a <malloc+0xf0>
		cp = STACK_POINTER() - __malloc_margin;
    5e4a:	4d b7       	in	r20, 0x3d	; 61
    5e4c:	5e b7       	in	r21, 0x3e	; 62
    5e4e:	80 91 0a 01 	lds	r24, 0x010A
    5e52:	90 91 0b 01 	lds	r25, 0x010B
    5e56:	48 1b       	sub	r20, r24
    5e58:	59 0b       	sbc	r21, r25
	if (cp <= __brkval)
    5e5a:	20 91 e0 03 	lds	r18, 0x03E0
    5e5e:	30 91 e1 03 	lds	r19, 0x03E1
    5e62:	24 17       	cp	r18, r20
    5e64:	35 07       	cpc	r19, r21
    5e66:	b0 f4       	brcc	.+44     	; 0x5e94 <malloc+0x12a>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    5e68:	ca 01       	movw	r24, r20
    5e6a:	82 1b       	sub	r24, r18
    5e6c:	93 0b       	sbc	r25, r19
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    5e6e:	86 17       	cp	r24, r22
    5e70:	97 07       	cpc	r25, r23
    5e72:	80 f0       	brcs	.+32     	; 0x5e94 <malloc+0x12a>
    5e74:	ab 01       	movw	r20, r22
    5e76:	4e 5f       	subi	r20, 0xFE	; 254
    5e78:	5f 4f       	sbci	r21, 0xFF	; 255
    5e7a:	84 17       	cp	r24, r20
    5e7c:	95 07       	cpc	r25, r21
    5e7e:	50 f0       	brcs	.+20     	; 0x5e94 <malloc+0x12a>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    5e80:	42 0f       	add	r20, r18
    5e82:	53 1f       	adc	r21, r19
    5e84:	50 93 e1 03 	sts	0x03E1, r21
    5e88:	40 93 e0 03 	sts	0x03E0, r20
		fp1->sz = len;
    5e8c:	f9 01       	movw	r30, r18
    5e8e:	61 93       	st	Z+, r22
    5e90:	71 93       	st	Z+, r23
    5e92:	02 c0       	rjmp	.+4      	; 0x5e98 <malloc+0x12e>
		return &(fp1->nx);
    5e94:	e0 e0       	ldi	r30, 0x00	; 0
    5e96:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
    5e98:	cf 01       	movw	r24, r30
    5e9a:	df 91       	pop	r29
    5e9c:	cf 91       	pop	r28
    5e9e:	1f 91       	pop	r17
    5ea0:	0f 91       	pop	r16
    5ea2:	08 95       	ret

00005ea4 <free>:
{
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    5ea4:	cf 93       	push	r28
    5ea6:	df 93       	push	r29
    5ea8:	9c 01       	movw	r18, r24
    5eaa:	00 97       	sbiw	r24, 0x00	; 0
    5eac:	09 f4       	brne	.+2      	; 0x5eb0 <free+0xc>
    5eae:	8f c0       	rjmp	.+286    	; 0x5fce <free+0x12a>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    5eb0:	ec 01       	movw	r28, r24
    5eb2:	22 97       	sbiw	r28, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    5eb4:	1b 82       	std	Y+3, r1	; 0x03
    5eb6:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    5eb8:	60 91 e2 03 	lds	r22, 0x03E2
    5ebc:	70 91 e3 03 	lds	r23, 0x03E3
    5ec0:	61 15       	cp	r22, r1
    5ec2:	71 05       	cpc	r23, r1
    5ec4:	81 f4       	brne	.+32     	; 0x5ee6 <free+0x42>
		if ((char *)p + fpnew->sz == __brkval)
    5ec6:	88 81       	ld	r24, Y
    5ec8:	99 81       	ldd	r25, Y+1	; 0x01
    5eca:	82 0f       	add	r24, r18
    5ecc:	93 1f       	adc	r25, r19
    5ece:	20 91 e0 03 	lds	r18, 0x03E0
    5ed2:	30 91 e1 03 	lds	r19, 0x03E1
    5ed6:	28 17       	cp	r18, r24
    5ed8:	39 07       	cpc	r19, r25
    5eda:	39 f5       	brne	.+78     	; 0x5f2a <free+0x86>
			__brkval = cpnew;
    5edc:	d0 93 e1 03 	sts	0x03E1, r29
    5ee0:	c0 93 e0 03 	sts	0x03E0, r28
    5ee4:	74 c0       	rjmp	.+232    	; 0x5fce <free+0x12a>
		else
			__flp = fpnew;
    5ee6:	db 01       	movw	r26, r22
    5ee8:	40 e0       	ldi	r20, 0x00	; 0
    5eea:	50 e0       	ldi	r21, 0x00	; 0
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    5eec:	ac 17       	cp	r26, r28
    5eee:	bd 07       	cpc	r27, r29
    5ef0:	08 f1       	brcs	.+66     	; 0x5f34 <free+0x90>
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    5ef2:	bb 83       	std	Y+3, r27	; 0x03
    5ef4:	aa 83       	std	Y+2, r26	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    5ef6:	fe 01       	movw	r30, r28
    5ef8:	21 91       	ld	r18, Z+
    5efa:	31 91       	ld	r19, Z+
    5efc:	e2 0f       	add	r30, r18
    5efe:	f3 1f       	adc	r31, r19
    5f00:	ae 17       	cp	r26, r30
    5f02:	bf 07       	cpc	r27, r31
    5f04:	79 f4       	brne	.+30     	; 0x5f24 <free+0x80>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    5f06:	8d 91       	ld	r24, X+
    5f08:	9c 91       	ld	r25, X
    5f0a:	11 97       	sbiw	r26, 0x01	; 1
    5f0c:	28 0f       	add	r18, r24
    5f0e:	39 1f       	adc	r19, r25
    5f10:	2e 5f       	subi	r18, 0xFE	; 254
    5f12:	3f 4f       	sbci	r19, 0xFF	; 255
    5f14:	39 83       	std	Y+1, r19	; 0x01
    5f16:	28 83       	st	Y, r18
			fpnew->nx = fp1->nx;
    5f18:	12 96       	adiw	r26, 0x02	; 2
    5f1a:	8d 91       	ld	r24, X+
    5f1c:	9c 91       	ld	r25, X
    5f1e:	13 97       	sbiw	r26, 0x03	; 3
    5f20:	9b 83       	std	Y+3, r25	; 0x03
    5f22:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (fp2 == 0) {
    5f24:	41 15       	cp	r20, r1
    5f26:	51 05       	cpc	r21, r1
    5f28:	71 f4       	brne	.+28     	; 0x5f46 <free+0xa2>
			/* new head of freelist */
			__flp = fpnew;
    5f2a:	d0 93 e3 03 	sts	0x03E3, r29
    5f2e:	c0 93 e2 03 	sts	0x03E2, r28
    5f32:	4d c0       	rjmp	.+154    	; 0x5fce <free+0x12a>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    5f34:	12 96       	adiw	r26, 0x02	; 2
    5f36:	8d 91       	ld	r24, X+
    5f38:	9c 91       	ld	r25, X
    5f3a:	13 97       	sbiw	r26, 0x03	; 3
    5f3c:	ad 01       	movw	r20, r26
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
    5f3e:	00 97       	sbiw	r24, 0x00	; 0
    5f40:	11 f0       	breq	.+4      	; 0x5f46 <free+0xa2>
    5f42:	dc 01       	movw	r26, r24
    5f44:	d3 cf       	rjmp	.-90     	; 0x5eec <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    5f46:	da 01       	movw	r26, r20
    5f48:	13 96       	adiw	r26, 0x03	; 3
    5f4a:	dc 93       	st	X, r29
    5f4c:	ce 93       	st	-X, r28
    5f4e:	12 97       	sbiw	r26, 0x02	; 2
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    5f50:	fa 01       	movw	r30, r20
    5f52:	21 91       	ld	r18, Z+
    5f54:	31 91       	ld	r19, Z+
    5f56:	e2 0f       	add	r30, r18
    5f58:	f3 1f       	adc	r31, r19
    5f5a:	ce 17       	cp	r28, r30
    5f5c:	df 07       	cpc	r29, r31
    5f5e:	69 f4       	brne	.+26     	; 0x5f7a <free+0xd6>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    5f60:	88 81       	ld	r24, Y
    5f62:	99 81       	ldd	r25, Y+1	; 0x01
    5f64:	28 0f       	add	r18, r24
    5f66:	39 1f       	adc	r19, r25
    5f68:	2e 5f       	subi	r18, 0xFE	; 254
    5f6a:	3f 4f       	sbci	r19, 0xFF	; 255
    5f6c:	fa 01       	movw	r30, r20
    5f6e:	31 83       	std	Z+1, r19	; 0x01
    5f70:	20 83       	st	Z, r18
		fp2->nx = fpnew->nx;
    5f72:	8a 81       	ldd	r24, Y+2	; 0x02
    5f74:	9b 81       	ldd	r25, Y+3	; 0x03
    5f76:	93 83       	std	Z+3, r25	; 0x03
    5f78:	82 83       	std	Z+2, r24	; 0x02
    5f7a:	e0 e0       	ldi	r30, 0x00	; 0
    5f7c:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1->nx != 0;
    5f7e:	db 01       	movw	r26, r22
    5f80:	12 96       	adiw	r26, 0x02	; 2
    5f82:	8d 91       	ld	r24, X+
    5f84:	9c 91       	ld	r25, X
    5f86:	13 97       	sbiw	r26, 0x03	; 3
    5f88:	00 97       	sbiw	r24, 0x00	; 0
    5f8a:	19 f0       	breq	.+6      	; 0x5f92 <free+0xee>
    5f8c:	bc 01       	movw	r22, r24
    5f8e:	fd 01       	movw	r30, r26
    5f90:	f6 cf       	rjmp	.-20     	; 0x5f7e <free+0xda>
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
    5f92:	ab 01       	movw	r20, r22
    5f94:	4e 5f       	subi	r20, 0xFE	; 254
    5f96:	5f 4f       	sbci	r21, 0xFF	; 255
	if (cp2 + fp1->sz == __brkval) {
    5f98:	db 01       	movw	r26, r22
    5f9a:	8d 91       	ld	r24, X+
    5f9c:	9c 91       	ld	r25, X
    5f9e:	84 0f       	add	r24, r20
    5fa0:	95 1f       	adc	r25, r21
    5fa2:	20 91 e0 03 	lds	r18, 0x03E0
    5fa6:	30 91 e1 03 	lds	r19, 0x03E1
    5faa:	28 17       	cp	r18, r24
    5fac:	39 07       	cpc	r19, r25
    5fae:	79 f4       	brne	.+30     	; 0x5fce <free+0x12a>
		if (fp2 == NULL)
    5fb0:	30 97       	sbiw	r30, 0x00	; 0
    5fb2:	29 f4       	brne	.+10     	; 0x5fbe <free+0x11a>
			/* Freelist is empty now. */
			__flp = NULL;
    5fb4:	10 92 e3 03 	sts	0x03E3, r1
    5fb8:	10 92 e2 03 	sts	0x03E2, r1
    5fbc:	02 c0       	rjmp	.+4      	; 0x5fc2 <free+0x11e>
		else
			fp2->nx = NULL;
    5fbe:	13 82       	std	Z+3, r1	; 0x03
    5fc0:	12 82       	std	Z+2, r1	; 0x02
		__brkval = cp2 - sizeof(size_t);
    5fc2:	42 50       	subi	r20, 0x02	; 2
    5fc4:	50 40       	sbci	r21, 0x00	; 0
    5fc6:	50 93 e1 03 	sts	0x03E1, r21
    5fca:	40 93 e0 03 	sts	0x03E0, r20
	}
}
    5fce:	df 91       	pop	r29
    5fd0:	cf 91       	pop	r28
    5fd2:	08 95       	ret

00005fd4 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    5fd4:	1f 92       	push	r1
    5fd6:	0f 92       	push	r0
    5fd8:	0f b6       	in	r0, 0x3f	; 63
    5fda:	0f 92       	push	r0
    5fdc:	11 24       	eor	r1, r1
    5fde:	2f 93       	push	r18
    5fe0:	3f 93       	push	r19
    5fe2:	8f 93       	push	r24
    5fe4:	9f 93       	push	r25
    5fe6:	af 93       	push	r26
    5fe8:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    5fea:	80 91 30 03 	lds	r24, 0x0330
    5fee:	90 91 31 03 	lds	r25, 0x0331
    5ff2:	a0 91 32 03 	lds	r26, 0x0332
    5ff6:	b0 91 33 03 	lds	r27, 0x0333
	unsigned char f = timer0_fract;
    5ffa:	30 91 34 03 	lds	r19, 0x0334

	m += MILLIS_INC;
    5ffe:	01 96       	adiw	r24, 0x01	; 1
    6000:	a1 1d       	adc	r26, r1
    6002:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    6004:	23 2f       	mov	r18, r19
    6006:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    6008:	2d 37       	cpi	r18, 0x7D	; 125
    600a:	20 f0       	brcs	.+8      	; 0x6014 <__vector_16+0x40>
		f -= FRACT_MAX;
    600c:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    600e:	01 96       	adiw	r24, 0x01	; 1
    6010:	a1 1d       	adc	r26, r1
    6012:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    6014:	20 93 34 03 	sts	0x0334, r18
	timer0_millis = m;
    6018:	80 93 30 03 	sts	0x0330, r24
    601c:	90 93 31 03 	sts	0x0331, r25
    6020:	a0 93 32 03 	sts	0x0332, r26
    6024:	b0 93 33 03 	sts	0x0333, r27
	timer0_overflow_count++;
    6028:	80 91 2c 03 	lds	r24, 0x032C
    602c:	90 91 2d 03 	lds	r25, 0x032D
    6030:	a0 91 2e 03 	lds	r26, 0x032E
    6034:	b0 91 2f 03 	lds	r27, 0x032F
    6038:	01 96       	adiw	r24, 0x01	; 1
    603a:	a1 1d       	adc	r26, r1
    603c:	b1 1d       	adc	r27, r1
    603e:	80 93 2c 03 	sts	0x032C, r24
    6042:	90 93 2d 03 	sts	0x032D, r25
    6046:	a0 93 2e 03 	sts	0x032E, r26
    604a:	b0 93 2f 03 	sts	0x032F, r27
}
    604e:	bf 91       	pop	r27
    6050:	af 91       	pop	r26
    6052:	9f 91       	pop	r25
    6054:	8f 91       	pop	r24
    6056:	3f 91       	pop	r19
    6058:	2f 91       	pop	r18
    605a:	0f 90       	pop	r0
    605c:	0f be       	out	0x3f, r0	; 63
    605e:	0f 90       	pop	r0
    6060:	1f 90       	pop	r1
    6062:	18 95       	reti

00006064 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    6064:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    6066:	f8 94       	cli
	m = timer0_millis;
    6068:	20 91 30 03 	lds	r18, 0x0330
    606c:	30 91 31 03 	lds	r19, 0x0331
    6070:	40 91 32 03 	lds	r20, 0x0332
    6074:	50 91 33 03 	lds	r21, 0x0333
	SREG = oldSREG;
    6078:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    607a:	b9 01       	movw	r22, r18
    607c:	ca 01       	movw	r24, r20
    607e:	08 95       	ret

00006080 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    6080:	9b 01       	movw	r18, r22
    6082:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    6084:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    6086:	f8 94       	cli
	m = timer0_overflow_count;
    6088:	80 91 2c 03 	lds	r24, 0x032C
    608c:	90 91 2d 03 	lds	r25, 0x032D
    6090:	a0 91 2e 03 	lds	r26, 0x032E
    6094:	b0 91 2f 03 	lds	r27, 0x032F
#if defined(TCNT0)
	t = TCNT0;
    6098:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    609a:	a8 9b       	sbis	0x15, 0	; 21
    609c:	05 c0       	rjmp	.+10     	; 0x60a8 <delay+0x28>
    609e:	6f 3f       	cpi	r22, 0xFF	; 255
    60a0:	19 f0       	breq	.+6      	; 0x60a8 <delay+0x28>
		m++;
    60a2:	01 96       	adiw	r24, 0x01	; 1
    60a4:	a1 1d       	adc	r26, r1
    60a6:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    60a8:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    60aa:	ba 2f       	mov	r27, r26
    60ac:	a9 2f       	mov	r26, r25
    60ae:	98 2f       	mov	r25, r24
    60b0:	88 27       	eor	r24, r24
    60b2:	86 0f       	add	r24, r22
    60b4:	91 1d       	adc	r25, r1
    60b6:	a1 1d       	adc	r26, r1
    60b8:	b1 1d       	adc	r27, r1
    60ba:	62 e0       	ldi	r22, 0x02	; 2
    60bc:	88 0f       	add	r24, r24
    60be:	99 1f       	adc	r25, r25
    60c0:	aa 1f       	adc	r26, r26
    60c2:	bb 1f       	adc	r27, r27
    60c4:	6a 95       	dec	r22
    60c6:	d1 f7       	brne	.-12     	; 0x60bc <delay+0x3c>
    60c8:	bc 01       	movw	r22, r24
    60ca:	2d c0       	rjmp	.+90     	; 0x6126 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    60cc:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    60ce:	f8 94       	cli
	m = timer0_overflow_count;
    60d0:	80 91 2c 03 	lds	r24, 0x032C
    60d4:	90 91 2d 03 	lds	r25, 0x032D
    60d8:	a0 91 2e 03 	lds	r26, 0x032E
    60dc:	b0 91 2f 03 	lds	r27, 0x032F
#if defined(TCNT0)
	t = TCNT0;
    60e0:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    60e2:	a8 9b       	sbis	0x15, 0	; 21
    60e4:	05 c0       	rjmp	.+10     	; 0x60f0 <delay+0x70>
    60e6:	ef 3f       	cpi	r30, 0xFF	; 255
    60e8:	19 f0       	breq	.+6      	; 0x60f0 <delay+0x70>
		m++;
    60ea:	01 96       	adiw	r24, 0x01	; 1
    60ec:	a1 1d       	adc	r26, r1
    60ee:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    60f0:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    60f2:	ba 2f       	mov	r27, r26
    60f4:	a9 2f       	mov	r26, r25
    60f6:	98 2f       	mov	r25, r24
    60f8:	88 27       	eor	r24, r24
    60fa:	8e 0f       	add	r24, r30
    60fc:	91 1d       	adc	r25, r1
    60fe:	a1 1d       	adc	r26, r1
    6100:	b1 1d       	adc	r27, r1
    6102:	e2 e0       	ldi	r30, 0x02	; 2
    6104:	88 0f       	add	r24, r24
    6106:	99 1f       	adc	r25, r25
    6108:	aa 1f       	adc	r26, r26
    610a:	bb 1f       	adc	r27, r27
    610c:	ea 95       	dec	r30
    610e:	d1 f7       	brne	.-12     	; 0x6104 <delay+0x84>
    6110:	86 1b       	sub	r24, r22
    6112:	97 0b       	sbc	r25, r23
    6114:	88 5e       	subi	r24, 0xE8	; 232
    6116:	93 40       	sbci	r25, 0x03	; 3
    6118:	c8 f2       	brcs	.-78     	; 0x60cc <delay+0x4c>
			ms--;
    611a:	21 50       	subi	r18, 0x01	; 1
    611c:	30 40       	sbci	r19, 0x00	; 0
    611e:	40 40       	sbci	r20, 0x00	; 0
    6120:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    6122:	68 51       	subi	r22, 0x18	; 24
    6124:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    6126:	21 15       	cp	r18, r1
    6128:	31 05       	cpc	r19, r1
    612a:	41 05       	cpc	r20, r1
    612c:	51 05       	cpc	r21, r1
    612e:	71 f6       	brne	.-100    	; 0x60cc <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    6130:	08 95       	ret

00006132 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    6132:	01 97       	sbiw	r24, 0x01	; 1
    6134:	39 f0       	breq	.+14     	; 0x6144 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    6136:	88 0f       	add	r24, r24
    6138:	99 1f       	adc	r25, r25
    613a:	88 0f       	add	r24, r24
    613c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    613e:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    6140:	01 97       	sbiw	r24, 0x01	; 1
    6142:	f1 f7       	brne	.-4      	; 0x6140 <delayMicroseconds+0xe>
    6144:	08 95       	ret

00006146 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    6146:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    6148:	84 b5       	in	r24, 0x24	; 36
    614a:	82 60       	ori	r24, 0x02	; 2
    614c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    614e:	84 b5       	in	r24, 0x24	; 36
    6150:	81 60       	ori	r24, 0x01	; 1
    6152:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    6154:	85 b5       	in	r24, 0x25	; 37
    6156:	82 60       	ori	r24, 0x02	; 2
    6158:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    615a:	85 b5       	in	r24, 0x25	; 37
    615c:	81 60       	ori	r24, 0x01	; 1
    615e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    6160:	ee e6       	ldi	r30, 0x6E	; 110
    6162:	f0 e0       	ldi	r31, 0x00	; 0
    6164:	80 81       	ld	r24, Z
    6166:	81 60       	ori	r24, 0x01	; 1
    6168:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    616a:	e1 e8       	ldi	r30, 0x81	; 129
    616c:	f0 e0       	ldi	r31, 0x00	; 0
    616e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    6170:	80 81       	ld	r24, Z
    6172:	82 60       	ori	r24, 0x02	; 2
    6174:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    6176:	80 81       	ld	r24, Z
    6178:	81 60       	ori	r24, 0x01	; 1
    617a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    617c:	e0 e8       	ldi	r30, 0x80	; 128
    617e:	f0 e0       	ldi	r31, 0x00	; 0
    6180:	80 81       	ld	r24, Z
    6182:	81 60       	ori	r24, 0x01	; 1
    6184:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    6186:	e1 eb       	ldi	r30, 0xB1	; 177
    6188:	f0 e0       	ldi	r31, 0x00	; 0
    618a:	80 81       	ld	r24, Z
    618c:	84 60       	ori	r24, 0x04	; 4
    618e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    6190:	e0 eb       	ldi	r30, 0xB0	; 176
    6192:	f0 e0       	ldi	r31, 0x00	; 0
    6194:	80 81       	ld	r24, Z
    6196:	81 60       	ori	r24, 0x01	; 1
    6198:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    619a:	ea e7       	ldi	r30, 0x7A	; 122
    619c:	f0 e0       	ldi	r31, 0x00	; 0
    619e:	80 81       	ld	r24, Z
    61a0:	84 60       	ori	r24, 0x04	; 4
    61a2:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    61a4:	80 81       	ld	r24, Z
    61a6:	82 60       	ori	r24, 0x02	; 2
    61a8:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    61aa:	80 81       	ld	r24, Z
    61ac:	81 60       	ori	r24, 0x01	; 1
    61ae:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    61b0:	80 81       	ld	r24, Z
    61b2:	80 68       	ori	r24, 0x80	; 128
    61b4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    61b6:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    61ba:	08 95       	ret

000061bc <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    61bc:	cf 93       	push	r28
    61be:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    61c0:	48 2f       	mov	r20, r24
    61c2:	50 e0       	ldi	r21, 0x00	; 0
    61c4:	ca 01       	movw	r24, r20
    61c6:	83 50       	subi	r24, 0x03	; 3
    61c8:	96 4f       	sbci	r25, 0xF6	; 246
    61ca:	fc 01       	movw	r30, r24
    61cc:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    61ce:	47 51       	subi	r20, 0x17	; 23
    61d0:	56 4f       	sbci	r21, 0xF6	; 246
    61d2:	fa 01       	movw	r30, r20
    61d4:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    61d6:	88 23       	and	r24, r24
    61d8:	69 f1       	breq	.+90     	; 0x6234 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    61da:	90 e0       	ldi	r25, 0x00	; 0
    61dc:	88 0f       	add	r24, r24
    61de:	99 1f       	adc	r25, r25
    61e0:	fc 01       	movw	r30, r24
    61e2:	e5 53       	subi	r30, 0x35	; 53
    61e4:	f6 4f       	sbci	r31, 0xF6	; 246
    61e6:	a5 91       	lpm	r26, Z+
    61e8:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    61ea:	fc 01       	movw	r30, r24
    61ec:	eb 52       	subi	r30, 0x2B	; 43
    61ee:	f6 4f       	sbci	r31, 0xF6	; 246
    61f0:	c5 91       	lpm	r28, Z+
    61f2:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    61f4:	66 23       	and	r22, r22
    61f6:	51 f4       	brne	.+20     	; 0x620c <pinMode+0x50>
		uint8_t oldSREG = SREG;
    61f8:	2f b7       	in	r18, 0x3f	; 63
                cli();
    61fa:	f8 94       	cli
		*reg &= ~bit;
    61fc:	8c 91       	ld	r24, X
    61fe:	93 2f       	mov	r25, r19
    6200:	90 95       	com	r25
    6202:	89 23       	and	r24, r25
    6204:	8c 93       	st	X, r24
		*out &= ~bit;
    6206:	88 81       	ld	r24, Y
    6208:	89 23       	and	r24, r25
    620a:	0b c0       	rjmp	.+22     	; 0x6222 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    620c:	62 30       	cpi	r22, 0x02	; 2
    620e:	61 f4       	brne	.+24     	; 0x6228 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    6210:	2f b7       	in	r18, 0x3f	; 63
                cli();
    6212:	f8 94       	cli
		*reg &= ~bit;
    6214:	8c 91       	ld	r24, X
    6216:	93 2f       	mov	r25, r19
    6218:	90 95       	com	r25
    621a:	89 23       	and	r24, r25
    621c:	8c 93       	st	X, r24
		*out |= bit;
    621e:	88 81       	ld	r24, Y
    6220:	83 2b       	or	r24, r19
    6222:	88 83       	st	Y, r24
		SREG = oldSREG;
    6224:	2f bf       	out	0x3f, r18	; 63
    6226:	06 c0       	rjmp	.+12     	; 0x6234 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    6228:	9f b7       	in	r25, 0x3f	; 63
                cli();
    622a:	f8 94       	cli
		*reg |= bit;
    622c:	8c 91       	ld	r24, X
    622e:	83 2b       	or	r24, r19
    6230:	8c 93       	st	X, r24
		SREG = oldSREG;
    6232:	9f bf       	out	0x3f, r25	; 63
	}
}
    6234:	df 91       	pop	r29
    6236:	cf 91       	pop	r28
    6238:	08 95       	ret

0000623a <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    623a:	48 2f       	mov	r20, r24
    623c:	50 e0       	ldi	r21, 0x00	; 0
    623e:	ca 01       	movw	r24, r20
    6240:	8f 5e       	subi	r24, 0xEF	; 239
    6242:	95 4f       	sbci	r25, 0xF5	; 245
    6244:	fc 01       	movw	r30, r24
    6246:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    6248:	ca 01       	movw	r24, r20
    624a:	83 50       	subi	r24, 0x03	; 3
    624c:	96 4f       	sbci	r25, 0xF6	; 246
    624e:	fc 01       	movw	r30, r24
    6250:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    6252:	47 51       	subi	r20, 0x17	; 23
    6254:	56 4f       	sbci	r21, 0xF6	; 246
    6256:	fa 01       	movw	r30, r20
    6258:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    625a:	33 23       	and	r19, r19
    625c:	09 f4       	brne	.+2      	; 0x6260 <digitalWrite+0x26>
    625e:	40 c0       	rjmp	.+128    	; 0x62e0 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6260:	22 23       	and	r18, r18
    6262:	51 f1       	breq	.+84     	; 0x62b8 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    6264:	23 30       	cpi	r18, 0x03	; 3
    6266:	71 f0       	breq	.+28     	; 0x6284 <digitalWrite+0x4a>
    6268:	24 30       	cpi	r18, 0x04	; 4
    626a:	28 f4       	brcc	.+10     	; 0x6276 <digitalWrite+0x3c>
    626c:	21 30       	cpi	r18, 0x01	; 1
    626e:	a1 f0       	breq	.+40     	; 0x6298 <digitalWrite+0x5e>
    6270:	22 30       	cpi	r18, 0x02	; 2
    6272:	11 f5       	brne	.+68     	; 0x62b8 <digitalWrite+0x7e>
    6274:	14 c0       	rjmp	.+40     	; 0x629e <digitalWrite+0x64>
    6276:	26 30       	cpi	r18, 0x06	; 6
    6278:	b1 f0       	breq	.+44     	; 0x62a6 <digitalWrite+0x6c>
    627a:	27 30       	cpi	r18, 0x07	; 7
    627c:	c1 f0       	breq	.+48     	; 0x62ae <digitalWrite+0x74>
    627e:	24 30       	cpi	r18, 0x04	; 4
    6280:	d9 f4       	brne	.+54     	; 0x62b8 <digitalWrite+0x7e>
    6282:	04 c0       	rjmp	.+8      	; 0x628c <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    6284:	80 91 80 00 	lds	r24, 0x0080
    6288:	8f 77       	andi	r24, 0x7F	; 127
    628a:	03 c0       	rjmp	.+6      	; 0x6292 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    628c:	80 91 80 00 	lds	r24, 0x0080
    6290:	8f 7d       	andi	r24, 0xDF	; 223
    6292:	80 93 80 00 	sts	0x0080, r24
    6296:	10 c0       	rjmp	.+32     	; 0x62b8 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    6298:	84 b5       	in	r24, 0x24	; 36
    629a:	8f 77       	andi	r24, 0x7F	; 127
    629c:	02 c0       	rjmp	.+4      	; 0x62a2 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    629e:	84 b5       	in	r24, 0x24	; 36
    62a0:	8f 7d       	andi	r24, 0xDF	; 223
    62a2:	84 bd       	out	0x24, r24	; 36
    62a4:	09 c0       	rjmp	.+18     	; 0x62b8 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    62a6:	80 91 b0 00 	lds	r24, 0x00B0
    62aa:	8f 77       	andi	r24, 0x7F	; 127
    62ac:	03 c0       	rjmp	.+6      	; 0x62b4 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    62ae:	80 91 b0 00 	lds	r24, 0x00B0
    62b2:	8f 7d       	andi	r24, 0xDF	; 223
    62b4:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    62b8:	e3 2f       	mov	r30, r19
    62ba:	f0 e0       	ldi	r31, 0x00	; 0
    62bc:	ee 0f       	add	r30, r30
    62be:	ff 1f       	adc	r31, r31
    62c0:	eb 52       	subi	r30, 0x2B	; 43
    62c2:	f6 4f       	sbci	r31, 0xF6	; 246
    62c4:	a5 91       	lpm	r26, Z+
    62c6:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    62c8:	2f b7       	in	r18, 0x3f	; 63
	cli();
    62ca:	f8 94       	cli

	if (val == LOW) {
    62cc:	66 23       	and	r22, r22
    62ce:	21 f4       	brne	.+8      	; 0x62d8 <digitalWrite+0x9e>
		*out &= ~bit;
    62d0:	8c 91       	ld	r24, X
    62d2:	90 95       	com	r25
    62d4:	89 23       	and	r24, r25
    62d6:	02 c0       	rjmp	.+4      	; 0x62dc <digitalWrite+0xa2>
	} else {
		*out |= bit;
    62d8:	8c 91       	ld	r24, X
    62da:	89 2b       	or	r24, r25
    62dc:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    62de:	2f bf       	out	0x3f, r18	; 63
    62e0:	08 95       	ret

000062e2 <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    62e2:	68 2f       	mov	r22, r24
    62e4:	70 e0       	ldi	r23, 0x00	; 0
    62e6:	cb 01       	movw	r24, r22
    62e8:	8f 5e       	subi	r24, 0xEF	; 239
    62ea:	95 4f       	sbci	r25, 0xF5	; 245
    62ec:	fc 01       	movw	r30, r24
    62ee:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    62f0:	cb 01       	movw	r24, r22
    62f2:	83 50       	subi	r24, 0x03	; 3
    62f4:	96 4f       	sbci	r25, 0xF6	; 246
    62f6:	fc 01       	movw	r30, r24
    62f8:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    62fa:	67 51       	subi	r22, 0x17	; 23
    62fc:	76 4f       	sbci	r23, 0xF6	; 246
    62fe:	fb 01       	movw	r30, r22
    6300:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
    6302:	99 23       	and	r25, r25
    6304:	19 f4       	brne	.+6      	; 0x630c <digitalRead+0x2a>
    6306:	20 e0       	ldi	r18, 0x00	; 0
    6308:	30 e0       	ldi	r19, 0x00	; 0
    630a:	3c c0       	rjmp	.+120    	; 0x6384 <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    630c:	22 23       	and	r18, r18
    630e:	51 f1       	breq	.+84     	; 0x6364 <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    6310:	23 30       	cpi	r18, 0x03	; 3
    6312:	71 f0       	breq	.+28     	; 0x6330 <digitalRead+0x4e>
    6314:	24 30       	cpi	r18, 0x04	; 4
    6316:	28 f4       	brcc	.+10     	; 0x6322 <digitalRead+0x40>
    6318:	21 30       	cpi	r18, 0x01	; 1
    631a:	a1 f0       	breq	.+40     	; 0x6344 <digitalRead+0x62>
    631c:	22 30       	cpi	r18, 0x02	; 2
    631e:	11 f5       	brne	.+68     	; 0x6364 <digitalRead+0x82>
    6320:	14 c0       	rjmp	.+40     	; 0x634a <digitalRead+0x68>
    6322:	26 30       	cpi	r18, 0x06	; 6
    6324:	b1 f0       	breq	.+44     	; 0x6352 <digitalRead+0x70>
    6326:	27 30       	cpi	r18, 0x07	; 7
    6328:	c1 f0       	breq	.+48     	; 0x635a <digitalRead+0x78>
    632a:	24 30       	cpi	r18, 0x04	; 4
    632c:	d9 f4       	brne	.+54     	; 0x6364 <digitalRead+0x82>
    632e:	04 c0       	rjmp	.+8      	; 0x6338 <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    6330:	80 91 80 00 	lds	r24, 0x0080
    6334:	8f 77       	andi	r24, 0x7F	; 127
    6336:	03 c0       	rjmp	.+6      	; 0x633e <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    6338:	80 91 80 00 	lds	r24, 0x0080
    633c:	8f 7d       	andi	r24, 0xDF	; 223
    633e:	80 93 80 00 	sts	0x0080, r24
    6342:	10 c0       	rjmp	.+32     	; 0x6364 <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    6344:	84 b5       	in	r24, 0x24	; 36
    6346:	8f 77       	andi	r24, 0x7F	; 127
    6348:	02 c0       	rjmp	.+4      	; 0x634e <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    634a:	84 b5       	in	r24, 0x24	; 36
    634c:	8f 7d       	andi	r24, 0xDF	; 223
    634e:	84 bd       	out	0x24, r24	; 36
    6350:	09 c0       	rjmp	.+18     	; 0x6364 <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    6352:	80 91 b0 00 	lds	r24, 0x00B0
    6356:	8f 77       	andi	r24, 0x7F	; 127
    6358:	03 c0       	rjmp	.+6      	; 0x6360 <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    635a:	80 91 b0 00 	lds	r24, 0x00B0
    635e:	8f 7d       	andi	r24, 0xDF	; 223
    6360:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    6364:	89 2f       	mov	r24, r25
    6366:	90 e0       	ldi	r25, 0x00	; 0
    6368:	88 0f       	add	r24, r24
    636a:	99 1f       	adc	r25, r25
    636c:	81 52       	subi	r24, 0x21	; 33
    636e:	96 4f       	sbci	r25, 0xF6	; 246
    6370:	fc 01       	movw	r30, r24
    6372:	a5 91       	lpm	r26, Z+
    6374:	b4 91       	lpm	r27, Z+
    6376:	8c 91       	ld	r24, X
    6378:	20 e0       	ldi	r18, 0x00	; 0
    637a:	30 e0       	ldi	r19, 0x00	; 0
    637c:	84 23       	and	r24, r20
    637e:	11 f0       	breq	.+4      	; 0x6384 <digitalRead+0xa2>
    6380:	21 e0       	ldi	r18, 0x01	; 1
    6382:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    6384:	c9 01       	movw	r24, r18
    6386:	08 95       	ret

00006388 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
    6388:	1f 92       	push	r1
    638a:	0f 92       	push	r0
    638c:	0f b6       	in	r0, 0x3f	; 63
    638e:	0f 92       	push	r0
    6390:	11 24       	eor	r1, r1
    6392:	2f 93       	push	r18
    6394:	3f 93       	push	r19
    6396:	4f 93       	push	r20
    6398:	8f 93       	push	r24
    639a:	9f 93       	push	r25
    639c:	ef 93       	push	r30
    639e:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    63a0:	80 91 c0 00 	lds	r24, 0x00C0
    63a4:	82 fd       	sbrc	r24, 2
    63a6:	1d c0       	rjmp	.+58     	; 0x63e2 <__vector_18+0x5a>
      unsigned char c = UDR0;
    63a8:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    63ac:	20 91 75 03 	lds	r18, 0x0375
    63b0:	30 91 76 03 	lds	r19, 0x0376

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    63b4:	2f 5f       	subi	r18, 0xFF	; 255
    63b6:	3f 4f       	sbci	r19, 0xFF	; 255
    63b8:	2f 73       	andi	r18, 0x3F	; 63
    63ba:	30 70       	andi	r19, 0x00	; 0
    63bc:	80 91 77 03 	lds	r24, 0x0377
    63c0:	90 91 78 03 	lds	r25, 0x0378
    63c4:	28 17       	cp	r18, r24
    63c6:	39 07       	cpc	r19, r25
    63c8:	71 f0       	breq	.+28     	; 0x63e6 <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    63ca:	e0 91 75 03 	lds	r30, 0x0375
    63ce:	f0 91 76 03 	lds	r31, 0x0376
    63d2:	eb 5c       	subi	r30, 0xCB	; 203
    63d4:	fc 4f       	sbci	r31, 0xFC	; 252
    63d6:	40 83       	st	Z, r20
    buffer->head = i;
    63d8:	30 93 76 03 	sts	0x0376, r19
    63dc:	20 93 75 03 	sts	0x0375, r18
    63e0:	02 c0       	rjmp	.+4      	; 0x63e6 <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    63e2:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    63e6:	ff 91       	pop	r31
    63e8:	ef 91       	pop	r30
    63ea:	9f 91       	pop	r25
    63ec:	8f 91       	pop	r24
    63ee:	4f 91       	pop	r20
    63f0:	3f 91       	pop	r19
    63f2:	2f 91       	pop	r18
    63f4:	0f 90       	pop	r0
    63f6:	0f be       	out	0x3f, r0	; 63
    63f8:	0f 90       	pop	r0
    63fa:	1f 90       	pop	r1
    63fc:	18 95       	reti

000063fe <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    63fe:	e0 91 c9 03 	lds	r30, 0x03C9
    6402:	f0 91 ca 03 	lds	r31, 0x03CA
    6406:	e0 5c       	subi	r30, 0xC0	; 192
    6408:	ff 4f       	sbci	r31, 0xFF	; 255
    640a:	81 91       	ld	r24, Z+
    640c:	91 91       	ld	r25, Z+
    640e:	20 81       	ld	r18, Z
    6410:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    6412:	82 1b       	sub	r24, r18
    6414:	93 0b       	sbc	r25, r19
    6416:	8f 73       	andi	r24, 0x3F	; 63
    6418:	90 70       	andi	r25, 0x00	; 0
    641a:	89 2b       	or	r24, r25
    641c:	11 f0       	breq	.+4      	; 0x6422 <_Z14serialEventRunv+0x24>
    641e:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <_Z11serialEventv>
    6422:	08 95       	ret

00006424 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    6424:	1f 92       	push	r1
    6426:	0f 92       	push	r0
    6428:	0f b6       	in	r0, 0x3f	; 63
    642a:	0f 92       	push	r0
    642c:	11 24       	eor	r1, r1
    642e:	2f 93       	push	r18
    6430:	3f 93       	push	r19
    6432:	8f 93       	push	r24
    6434:	9f 93       	push	r25
    6436:	ef 93       	push	r30
    6438:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    643a:	20 91 b9 03 	lds	r18, 0x03B9
    643e:	30 91 ba 03 	lds	r19, 0x03BA
    6442:	80 91 bb 03 	lds	r24, 0x03BB
    6446:	90 91 bc 03 	lds	r25, 0x03BC
    644a:	28 17       	cp	r18, r24
    644c:	39 07       	cpc	r19, r25
    644e:	31 f4       	brne	.+12     	; 0x645c <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    6450:	80 91 c1 00 	lds	r24, 0x00C1
    6454:	8f 7d       	andi	r24, 0xDF	; 223
    6456:	80 93 c1 00 	sts	0x00C1, r24
    645a:	14 c0       	rjmp	.+40     	; 0x6484 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    645c:	e0 91 bb 03 	lds	r30, 0x03BB
    6460:	f0 91 bc 03 	lds	r31, 0x03BC
    6464:	e7 58       	subi	r30, 0x87	; 135
    6466:	fc 4f       	sbci	r31, 0xFC	; 252
    6468:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    646a:	80 91 bb 03 	lds	r24, 0x03BB
    646e:	90 91 bc 03 	lds	r25, 0x03BC
    6472:	01 96       	adiw	r24, 0x01	; 1
    6474:	8f 73       	andi	r24, 0x3F	; 63
    6476:	90 70       	andi	r25, 0x00	; 0
    6478:	90 93 bc 03 	sts	0x03BC, r25
    647c:	80 93 bb 03 	sts	0x03BB, r24
	
  #if defined(UDR0)
    UDR0 = c;
    6480:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    6484:	ff 91       	pop	r31
    6486:	ef 91       	pop	r30
    6488:	9f 91       	pop	r25
    648a:	8f 91       	pop	r24
    648c:	3f 91       	pop	r19
    648e:	2f 91       	pop	r18
    6490:	0f 90       	pop	r0
    6492:	0f be       	out	0x3f, r0	; 63
    6494:	0f 90       	pop	r0
    6496:	1f 90       	pop	r1
    6498:	18 95       	reti

0000649a <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    649a:	af 92       	push	r10
    649c:	bf 92       	push	r11
    649e:	df 92       	push	r13
    64a0:	ef 92       	push	r14
    64a2:	ff 92       	push	r15
    64a4:	0f 93       	push	r16
    64a6:	1f 93       	push	r17
    64a8:	cf 93       	push	r28
    64aa:	df 93       	push	r29
    64ac:	ec 01       	movw	r28, r24
    64ae:	7a 01       	movw	r14, r20
    64b0:	8b 01       	movw	r16, r22
    64b2:	dd 24       	eor	r13, r13
    64b4:	40 30       	cpi	r20, 0x00	; 0
    64b6:	81 ee       	ldi	r24, 0xE1	; 225
    64b8:	58 07       	cpc	r21, r24
    64ba:	80 e0       	ldi	r24, 0x00	; 0
    64bc:	68 07       	cpc	r22, r24
    64be:	80 e0       	ldi	r24, 0x00	; 0
    64c0:	78 07       	cpc	r23, r24
    64c2:	11 f0       	breq	.+4      	; 0x64c8 <_ZN14HardwareSerial5beginEm+0x2e>
    64c4:	dd 24       	eor	r13, r13
    64c6:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    64c8:	91 e0       	ldi	r25, 0x01	; 1
    64ca:	a9 2e       	mov	r10, r25
    64cc:	b1 2c       	mov	r11, r1
    64ce:	ec 89       	ldd	r30, Y+20	; 0x14
    64d0:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    64d2:	dd 20       	and	r13, r13
    64d4:	69 f0       	breq	.+26     	; 0x64f0 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    64d6:	c5 01       	movw	r24, r10
    64d8:	08 a0       	ldd	r0, Y+32	; 0x20
    64da:	02 c0       	rjmp	.+4      	; 0x64e0 <_ZN14HardwareSerial5beginEm+0x46>
    64dc:	88 0f       	add	r24, r24
    64de:	99 1f       	adc	r25, r25
    64e0:	0a 94       	dec	r0
    64e2:	e2 f7       	brpl	.-8      	; 0x64dc <_ZN14HardwareSerial5beginEm+0x42>
    64e4:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    64e6:	60 e0       	ldi	r22, 0x00	; 0
    64e8:	79 e0       	ldi	r23, 0x09	; 9
    64ea:	8d e3       	ldi	r24, 0x3D	; 61
    64ec:	90 e0       	ldi	r25, 0x00	; 0
    64ee:	05 c0       	rjmp	.+10     	; 0x64fa <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    64f0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    64f2:	60 e8       	ldi	r22, 0x80	; 128
    64f4:	74 e8       	ldi	r23, 0x84	; 132
    64f6:	8e e1       	ldi	r24, 0x1E	; 30
    64f8:	90 e0       	ldi	r25, 0x00	; 0
    64fa:	a8 01       	movw	r20, r16
    64fc:	97 01       	movw	r18, r14
    64fe:	0e 94 48 3c 	call	0x7890	; 0x7890 <__udivmodsi4>
    6502:	21 50       	subi	r18, 0x01	; 1
    6504:	30 40       	sbci	r19, 0x00	; 0
    6506:	40 40       	sbci	r20, 0x00	; 0
    6508:	50 40       	sbci	r21, 0x00	; 0
    650a:	56 95       	lsr	r21
    650c:	47 95       	ror	r20
    650e:	37 95       	ror	r19
    6510:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    6512:	80 e1       	ldi	r24, 0x10	; 16
    6514:	20 30       	cpi	r18, 0x00	; 0
    6516:	38 07       	cpc	r19, r24
    6518:	20 f0       	brcs	.+8      	; 0x6522 <_ZN14HardwareSerial5beginEm+0x88>
    651a:	dd 20       	and	r13, r13
    651c:	11 f0       	breq	.+4      	; 0x6522 <_ZN14HardwareSerial5beginEm+0x88>
    651e:	dd 24       	eor	r13, r13
    6520:	d6 cf       	rjmp	.-84     	; 0x64ce <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    6522:	e8 89       	ldd	r30, Y+16	; 0x10
    6524:	f9 89       	ldd	r31, Y+17	; 0x11
    6526:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    6528:	ea 89       	ldd	r30, Y+18	; 0x12
    652a:	fb 89       	ldd	r31, Y+19	; 0x13
    652c:	20 83       	st	Z, r18

  transmitting = false;
    652e:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    6530:	ee 89       	ldd	r30, Y+22	; 0x16
    6532:	ff 89       	ldd	r31, Y+23	; 0x17
    6534:	40 81       	ld	r20, Z
    6536:	21 e0       	ldi	r18, 0x01	; 1
    6538:	30 e0       	ldi	r19, 0x00	; 0
    653a:	c9 01       	movw	r24, r18
    653c:	0c 8c       	ldd	r0, Y+28	; 0x1c
    653e:	02 c0       	rjmp	.+4      	; 0x6544 <_ZN14HardwareSerial5beginEm+0xaa>
    6540:	88 0f       	add	r24, r24
    6542:	99 1f       	adc	r25, r25
    6544:	0a 94       	dec	r0
    6546:	e2 f7       	brpl	.-8      	; 0x6540 <_ZN14HardwareSerial5beginEm+0xa6>
    6548:	48 2b       	or	r20, r24
    654a:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    654c:	ee 89       	ldd	r30, Y+22	; 0x16
    654e:	ff 89       	ldd	r31, Y+23	; 0x17
    6550:	40 81       	ld	r20, Z
    6552:	c9 01       	movw	r24, r18
    6554:	0d 8c       	ldd	r0, Y+29	; 0x1d
    6556:	02 c0       	rjmp	.+4      	; 0x655c <_ZN14HardwareSerial5beginEm+0xc2>
    6558:	88 0f       	add	r24, r24
    655a:	99 1f       	adc	r25, r25
    655c:	0a 94       	dec	r0
    655e:	e2 f7       	brpl	.-8      	; 0x6558 <_ZN14HardwareSerial5beginEm+0xbe>
    6560:	48 2b       	or	r20, r24
    6562:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    6564:	ee 89       	ldd	r30, Y+22	; 0x16
    6566:	ff 89       	ldd	r31, Y+23	; 0x17
    6568:	40 81       	ld	r20, Z
    656a:	c9 01       	movw	r24, r18
    656c:	0e 8c       	ldd	r0, Y+30	; 0x1e
    656e:	02 c0       	rjmp	.+4      	; 0x6574 <_ZN14HardwareSerial5beginEm+0xda>
    6570:	88 0f       	add	r24, r24
    6572:	99 1f       	adc	r25, r25
    6574:	0a 94       	dec	r0
    6576:	e2 f7       	brpl	.-8      	; 0x6570 <_ZN14HardwareSerial5beginEm+0xd6>
    6578:	48 2b       	or	r20, r24
    657a:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    657c:	ee 89       	ldd	r30, Y+22	; 0x16
    657e:	ff 89       	ldd	r31, Y+23	; 0x17
    6580:	80 81       	ld	r24, Z
    6582:	0f 8c       	ldd	r0, Y+31	; 0x1f
    6584:	02 c0       	rjmp	.+4      	; 0x658a <_ZN14HardwareSerial5beginEm+0xf0>
    6586:	22 0f       	add	r18, r18
    6588:	33 1f       	adc	r19, r19
    658a:	0a 94       	dec	r0
    658c:	e2 f7       	brpl	.-8      	; 0x6586 <_ZN14HardwareSerial5beginEm+0xec>
    658e:	20 95       	com	r18
    6590:	28 23       	and	r18, r24
    6592:	20 83       	st	Z, r18
}
    6594:	df 91       	pop	r29
    6596:	cf 91       	pop	r28
    6598:	1f 91       	pop	r17
    659a:	0f 91       	pop	r16
    659c:	ff 90       	pop	r15
    659e:	ef 90       	pop	r14
    65a0:	df 90       	pop	r13
    65a2:	bf 90       	pop	r11
    65a4:	af 90       	pop	r10
    65a6:	08 95       	ret

000065a8 <_ZN14HardwareSerial3endEv>:
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
  cbi(*_ucsrb, _udrie);
}

void HardwareSerial::end()
    65a8:	cf 93       	push	r28
    65aa:	df 93       	push	r29
    65ac:	dc 01       	movw	r26, r24
{
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    65ae:	1e 96       	adiw	r26, 0x0e	; 14
    65b0:	8d 91       	ld	r24, X+
    65b2:	9c 91       	ld	r25, X
    65b4:	1f 97       	sbiw	r26, 0x0f	; 15
    65b6:	ec 01       	movw	r28, r24
    65b8:	c0 5c       	subi	r28, 0xC0	; 192
    65ba:	df 4f       	sbci	r29, 0xFF	; 255
    65bc:	fc 01       	movw	r30, r24
    65be:	ee 5b       	subi	r30, 0xBE	; 190
    65c0:	ff 4f       	sbci	r31, 0xFF	; 255
    65c2:	28 81       	ld	r18, Y
    65c4:	39 81       	ldd	r19, Y+1	; 0x01
    65c6:	80 81       	ld	r24, Z
    65c8:	91 81       	ldd	r25, Z+1	; 0x01
    65ca:	28 17       	cp	r18, r24
    65cc:	39 07       	cpc	r19, r25
    65ce:	c9 f7       	brne	.-14     	; 0x65c2 <_ZN14HardwareSerial3endEv+0x1a>
    ;

  cbi(*_ucsrb, _rxen);
    65d0:	56 96       	adiw	r26, 0x16	; 22
    65d2:	ed 91       	ld	r30, X+
    65d4:	fc 91       	ld	r31, X
    65d6:	57 97       	sbiw	r26, 0x17	; 23
    65d8:	40 81       	ld	r20, Z
    65da:	21 e0       	ldi	r18, 0x01	; 1
    65dc:	30 e0       	ldi	r19, 0x00	; 0
    65de:	c9 01       	movw	r24, r18
    65e0:	5c 96       	adiw	r26, 0x1c	; 28
    65e2:	0c 90       	ld	r0, X
    65e4:	5c 97       	sbiw	r26, 0x1c	; 28
    65e6:	02 c0       	rjmp	.+4      	; 0x65ec <_ZN14HardwareSerial3endEv+0x44>
    65e8:	88 0f       	add	r24, r24
    65ea:	99 1f       	adc	r25, r25
    65ec:	0a 94       	dec	r0
    65ee:	e2 f7       	brpl	.-8      	; 0x65e8 <_ZN14HardwareSerial3endEv+0x40>
    65f0:	80 95       	com	r24
    65f2:	84 23       	and	r24, r20
    65f4:	80 83       	st	Z, r24
  cbi(*_ucsrb, _txen);
    65f6:	56 96       	adiw	r26, 0x16	; 22
    65f8:	ed 91       	ld	r30, X+
    65fa:	fc 91       	ld	r31, X
    65fc:	57 97       	sbiw	r26, 0x17	; 23
    65fe:	40 81       	ld	r20, Z
    6600:	c9 01       	movw	r24, r18
    6602:	5d 96       	adiw	r26, 0x1d	; 29
    6604:	0c 90       	ld	r0, X
    6606:	5d 97       	sbiw	r26, 0x1d	; 29
    6608:	02 c0       	rjmp	.+4      	; 0x660e <_ZN14HardwareSerial3endEv+0x66>
    660a:	88 0f       	add	r24, r24
    660c:	99 1f       	adc	r25, r25
    660e:	0a 94       	dec	r0
    6610:	e2 f7       	brpl	.-8      	; 0x660a <_ZN14HardwareSerial3endEv+0x62>
    6612:	80 95       	com	r24
    6614:	84 23       	and	r24, r20
    6616:	80 83       	st	Z, r24
  cbi(*_ucsrb, _rxcie);  
    6618:	56 96       	adiw	r26, 0x16	; 22
    661a:	ed 91       	ld	r30, X+
    661c:	fc 91       	ld	r31, X
    661e:	57 97       	sbiw	r26, 0x17	; 23
    6620:	40 81       	ld	r20, Z
    6622:	c9 01       	movw	r24, r18
    6624:	5e 96       	adiw	r26, 0x1e	; 30
    6626:	0c 90       	ld	r0, X
    6628:	5e 97       	sbiw	r26, 0x1e	; 30
    662a:	02 c0       	rjmp	.+4      	; 0x6630 <_ZN14HardwareSerial3endEv+0x88>
    662c:	88 0f       	add	r24, r24
    662e:	99 1f       	adc	r25, r25
    6630:	0a 94       	dec	r0
    6632:	e2 f7       	brpl	.-8      	; 0x662c <_ZN14HardwareSerial3endEv+0x84>
    6634:	80 95       	com	r24
    6636:	84 23       	and	r24, r20
    6638:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
    663a:	56 96       	adiw	r26, 0x16	; 22
    663c:	ed 91       	ld	r30, X+
    663e:	fc 91       	ld	r31, X
    6640:	57 97       	sbiw	r26, 0x17	; 23
    6642:	80 81       	ld	r24, Z
    6644:	5f 96       	adiw	r26, 0x1f	; 31
    6646:	0c 90       	ld	r0, X
    6648:	5f 97       	sbiw	r26, 0x1f	; 31
    664a:	02 c0       	rjmp	.+4      	; 0x6650 <_ZN14HardwareSerial3endEv+0xa8>
    664c:	22 0f       	add	r18, r18
    664e:	33 1f       	adc	r19, r19
    6650:	0a 94       	dec	r0
    6652:	e2 f7       	brpl	.-8      	; 0x664c <_ZN14HardwareSerial3endEv+0xa4>
    6654:	20 95       	com	r18
    6656:	28 23       	and	r18, r24
    6658:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    665a:	1c 96       	adiw	r26, 0x0c	; 12
    665c:	ed 91       	ld	r30, X+
    665e:	fc 91       	ld	r31, X
    6660:	1d 97       	sbiw	r26, 0x0d	; 13
    6662:	ee 5b       	subi	r30, 0xBE	; 190
    6664:	ff 4f       	sbci	r31, 0xFF	; 255
    6666:	80 81       	ld	r24, Z
    6668:	91 81       	ldd	r25, Z+1	; 0x01
    666a:	92 93       	st	-Z, r25
    666c:	82 93       	st	-Z, r24
}
    666e:	df 91       	pop	r29
    6670:	cf 91       	pop	r28
    6672:	08 95       	ret

00006674 <_ZN14HardwareSerial9availableEv>:

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    6674:	dc 01       	movw	r26, r24
    6676:	1c 96       	adiw	r26, 0x0c	; 12
    6678:	ed 91       	ld	r30, X+
    667a:	fc 91       	ld	r31, X
    667c:	1d 97       	sbiw	r26, 0x0d	; 13
    667e:	e0 5c       	subi	r30, 0xC0	; 192
    6680:	ff 4f       	sbci	r31, 0xFF	; 255
    6682:	21 91       	ld	r18, Z+
    6684:	31 91       	ld	r19, Z+
    6686:	80 81       	ld	r24, Z
    6688:	91 81       	ldd	r25, Z+1	; 0x01
    668a:	28 1b       	sub	r18, r24
    668c:	39 0b       	sbc	r19, r25
    668e:	2f 73       	andi	r18, 0x3F	; 63
    6690:	30 70       	andi	r19, 0x00	; 0
}
    6692:	c9 01       	movw	r24, r18
    6694:	08 95       	ret

00006696 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    6696:	dc 01       	movw	r26, r24
    6698:	1c 96       	adiw	r26, 0x0c	; 12
    669a:	ed 91       	ld	r30, X+
    669c:	fc 91       	ld	r31, X
    669e:	1d 97       	sbiw	r26, 0x0d	; 13
    66a0:	e0 5c       	subi	r30, 0xC0	; 192
    66a2:	ff 4f       	sbci	r31, 0xFF	; 255
    66a4:	20 81       	ld	r18, Z
    66a6:	31 81       	ldd	r19, Z+1	; 0x01
    66a8:	e0 54       	subi	r30, 0x40	; 64
    66aa:	f0 40       	sbci	r31, 0x00	; 0
    66ac:	df 01       	movw	r26, r30
    66ae:	ae 5b       	subi	r26, 0xBE	; 190
    66b0:	bf 4f       	sbci	r27, 0xFF	; 255
    66b2:	8d 91       	ld	r24, X+
    66b4:	9c 91       	ld	r25, X
    66b6:	11 97       	sbiw	r26, 0x01	; 1
    66b8:	28 17       	cp	r18, r24
    66ba:	39 07       	cpc	r19, r25
    66bc:	19 f4       	brne	.+6      	; 0x66c4 <_ZN14HardwareSerial4peekEv+0x2e>
    66be:	2f ef       	ldi	r18, 0xFF	; 255
    66c0:	3f ef       	ldi	r19, 0xFF	; 255
    66c2:	07 c0       	rjmp	.+14     	; 0x66d2 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    66c4:	8d 91       	ld	r24, X+
    66c6:	9c 91       	ld	r25, X
    66c8:	e8 0f       	add	r30, r24
    66ca:	f9 1f       	adc	r31, r25
    66cc:	80 81       	ld	r24, Z
    66ce:	28 2f       	mov	r18, r24
    66d0:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    66d2:	c9 01       	movw	r24, r18
    66d4:	08 95       	ret

000066d6 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    66d6:	dc 01       	movw	r26, r24
    66d8:	1c 96       	adiw	r26, 0x0c	; 12
    66da:	ed 91       	ld	r30, X+
    66dc:	fc 91       	ld	r31, X
    66de:	1d 97       	sbiw	r26, 0x0d	; 13
    66e0:	e0 5c       	subi	r30, 0xC0	; 192
    66e2:	ff 4f       	sbci	r31, 0xFF	; 255
    66e4:	20 81       	ld	r18, Z
    66e6:	31 81       	ldd	r19, Z+1	; 0x01
    66e8:	e0 54       	subi	r30, 0x40	; 64
    66ea:	f0 40       	sbci	r31, 0x00	; 0
    66ec:	df 01       	movw	r26, r30
    66ee:	ae 5b       	subi	r26, 0xBE	; 190
    66f0:	bf 4f       	sbci	r27, 0xFF	; 255
    66f2:	8d 91       	ld	r24, X+
    66f4:	9c 91       	ld	r25, X
    66f6:	11 97       	sbiw	r26, 0x01	; 1
    66f8:	28 17       	cp	r18, r24
    66fa:	39 07       	cpc	r19, r25
    66fc:	19 f4       	brne	.+6      	; 0x6704 <_ZN14HardwareSerial4readEv+0x2e>
    66fe:	2f ef       	ldi	r18, 0xFF	; 255
    6700:	3f ef       	ldi	r19, 0xFF	; 255
    6702:	10 c0       	rjmp	.+32     	; 0x6724 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    6704:	8d 91       	ld	r24, X+
    6706:	9c 91       	ld	r25, X
    6708:	11 97       	sbiw	r26, 0x01	; 1
    670a:	e8 0f       	add	r30, r24
    670c:	f9 1f       	adc	r31, r25
    670e:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    6710:	8d 91       	ld	r24, X+
    6712:	9c 91       	ld	r25, X
    6714:	11 97       	sbiw	r26, 0x01	; 1
    6716:	01 96       	adiw	r24, 0x01	; 1
    6718:	8f 73       	andi	r24, 0x3F	; 63
    671a:	90 70       	andi	r25, 0x00	; 0
    671c:	11 96       	adiw	r26, 0x01	; 1
    671e:	9c 93       	st	X, r25
    6720:	8e 93       	st	-X, r24
    return c;
    6722:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    6724:	c9 01       	movw	r24, r18
    6726:	08 95       	ret

00006728 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
    6728:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    672a:	91 96       	adiw	r26, 0x21	; 33
    672c:	8c 91       	ld	r24, X
    672e:	91 97       	sbiw	r26, 0x21	; 33
    6730:	88 23       	and	r24, r24
    6732:	39 f0       	breq	.+14     	; 0x6742 <_ZN14HardwareSerial5flushEv+0x1a>
    6734:	54 96       	adiw	r26, 0x14	; 20
    6736:	ed 91       	ld	r30, X+
    6738:	fc 91       	ld	r31, X
    673a:	55 97       	sbiw	r26, 0x15	; 21
    673c:	80 81       	ld	r24, Z
    673e:	86 ff       	sbrs	r24, 6
    6740:	f9 cf       	rjmp	.-14     	; 0x6734 <_ZN14HardwareSerial5flushEv+0xc>
  transmitting = false;
    6742:	91 96       	adiw	r26, 0x21	; 33
    6744:	1c 92       	st	X, r1
}
    6746:	08 95       	ret

00006748 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    6748:	cf 93       	push	r28
    674a:	df 93       	push	r29
    674c:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    674e:	ee 85       	ldd	r30, Y+14	; 0x0e
    6750:	ff 85       	ldd	r31, Y+15	; 0x0f
    6752:	e0 5c       	subi	r30, 0xC0	; 192
    6754:	ff 4f       	sbci	r31, 0xFF	; 255
    6756:	20 81       	ld	r18, Z
    6758:	31 81       	ldd	r19, Z+1	; 0x01
    675a:	e0 54       	subi	r30, 0x40	; 64
    675c:	f0 40       	sbci	r31, 0x00	; 0
    675e:	2f 5f       	subi	r18, 0xFF	; 255
    6760:	3f 4f       	sbci	r19, 0xFF	; 255
    6762:	2f 73       	andi	r18, 0x3F	; 63
    6764:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    6766:	df 01       	movw	r26, r30
    6768:	ae 5b       	subi	r26, 0xBE	; 190
    676a:	bf 4f       	sbci	r27, 0xFF	; 255
    676c:	8d 91       	ld	r24, X+
    676e:	9c 91       	ld	r25, X
    6770:	11 97       	sbiw	r26, 0x01	; 1
    6772:	28 17       	cp	r18, r24
    6774:	39 07       	cpc	r19, r25
    6776:	d1 f3       	breq	.-12     	; 0x676c <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    6778:	e0 5c       	subi	r30, 0xC0	; 192
    677a:	ff 4f       	sbci	r31, 0xFF	; 255
    677c:	80 81       	ld	r24, Z
    677e:	91 81       	ldd	r25, Z+1	; 0x01
    6780:	e0 54       	subi	r30, 0x40	; 64
    6782:	f0 40       	sbci	r31, 0x00	; 0
    6784:	e8 0f       	add	r30, r24
    6786:	f9 1f       	adc	r31, r25
    6788:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    678a:	ee 85       	ldd	r30, Y+14	; 0x0e
    678c:	ff 85       	ldd	r31, Y+15	; 0x0f
    678e:	e0 5c       	subi	r30, 0xC0	; 192
    6790:	ff 4f       	sbci	r31, 0xFF	; 255
    6792:	31 83       	std	Z+1, r19	; 0x01
    6794:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    6796:	ee 89       	ldd	r30, Y+22	; 0x16
    6798:	ff 89       	ldd	r31, Y+23	; 0x17
    679a:	20 81       	ld	r18, Z
    679c:	81 e0       	ldi	r24, 0x01	; 1
    679e:	90 e0       	ldi	r25, 0x00	; 0
    67a0:	0f 8c       	ldd	r0, Y+31	; 0x1f
    67a2:	02 c0       	rjmp	.+4      	; 0x67a8 <_ZN14HardwareSerial5writeEh+0x60>
    67a4:	88 0f       	add	r24, r24
    67a6:	99 1f       	adc	r25, r25
    67a8:	0a 94       	dec	r0
    67aa:	e2 f7       	brpl	.-8      	; 0x67a4 <_ZN14HardwareSerial5writeEh+0x5c>
    67ac:	28 2b       	or	r18, r24
    67ae:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    67b0:	81 e0       	ldi	r24, 0x01	; 1
    67b2:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    67b4:	ec 89       	ldd	r30, Y+20	; 0x14
    67b6:	fd 89       	ldd	r31, Y+21	; 0x15
    67b8:	80 81       	ld	r24, Z
    67ba:	80 64       	ori	r24, 0x40	; 64
    67bc:	80 83       	st	Z, r24
  
  return 1;
}
    67be:	81 e0       	ldi	r24, 0x01	; 1
    67c0:	90 e0       	ldi	r25, 0x00	; 0
    67c2:	df 91       	pop	r29
    67c4:	cf 91       	pop	r28
    67c6:	08 95       	ret

000067c8 <_ZN14HardwareSerialcvbEv>:

HardwareSerial::operator bool() {
	return true;
}
    67c8:	81 e0       	ldi	r24, 0x01	; 1
    67ca:	08 95       	ret

000067cc <_GLOBAL__I_rx_buffer>:
  public:
    Print() : write_error(0) {}
    67cc:	10 92 c0 03 	sts	0x03C0, r1
    67d0:	10 92 bf 03 	sts	0x03BF, r1
    67d4:	88 ee       	ldi	r24, 0xE8	; 232
    67d6:	93 e0       	ldi	r25, 0x03	; 3
    67d8:	a0 e0       	ldi	r26, 0x00	; 0
    67da:	b0 e0       	ldi	r27, 0x00	; 0
    67dc:	80 93 c1 03 	sts	0x03C1, r24
    67e0:	90 93 c2 03 	sts	0x03C2, r25
    67e4:	a0 93 c3 03 	sts	0x03C3, r26
    67e8:	b0 93 c4 03 	sts	0x03C4, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    67ec:	80 e3       	ldi	r24, 0x30	; 48
    67ee:	91 e0       	ldi	r25, 0x01	; 1
    67f0:	90 93 be 03 	sts	0x03BE, r25
    67f4:	80 93 bd 03 	sts	0x03BD, r24
{
  _rx_buffer = rx_buffer;
    67f8:	85 e3       	ldi	r24, 0x35	; 53
    67fa:	93 e0       	ldi	r25, 0x03	; 3
    67fc:	90 93 ca 03 	sts	0x03CA, r25
    6800:	80 93 c9 03 	sts	0x03C9, r24
  _tx_buffer = tx_buffer;
    6804:	89 e7       	ldi	r24, 0x79	; 121
    6806:	93 e0       	ldi	r25, 0x03	; 3
    6808:	90 93 cc 03 	sts	0x03CC, r25
    680c:	80 93 cb 03 	sts	0x03CB, r24
  _ubrrh = ubrrh;
    6810:	85 ec       	ldi	r24, 0xC5	; 197
    6812:	90 e0       	ldi	r25, 0x00	; 0
    6814:	90 93 ce 03 	sts	0x03CE, r25
    6818:	80 93 cd 03 	sts	0x03CD, r24
  _ubrrl = ubrrl;
    681c:	84 ec       	ldi	r24, 0xC4	; 196
    681e:	90 e0       	ldi	r25, 0x00	; 0
    6820:	90 93 d0 03 	sts	0x03D0, r25
    6824:	80 93 cf 03 	sts	0x03CF, r24
  _ucsra = ucsra;
    6828:	80 ec       	ldi	r24, 0xC0	; 192
    682a:	90 e0       	ldi	r25, 0x00	; 0
    682c:	90 93 d2 03 	sts	0x03D2, r25
    6830:	80 93 d1 03 	sts	0x03D1, r24
  _ucsrb = ucsrb;
    6834:	81 ec       	ldi	r24, 0xC1	; 193
    6836:	90 e0       	ldi	r25, 0x00	; 0
    6838:	90 93 d4 03 	sts	0x03D4, r25
    683c:	80 93 d3 03 	sts	0x03D3, r24
  _ucsrc = ucsrc;
    6840:	82 ec       	ldi	r24, 0xC2	; 194
    6842:	90 e0       	ldi	r25, 0x00	; 0
    6844:	90 93 d6 03 	sts	0x03D6, r25
    6848:	80 93 d5 03 	sts	0x03D5, r24
  _udr = udr;
    684c:	86 ec       	ldi	r24, 0xC6	; 198
    684e:	90 e0       	ldi	r25, 0x00	; 0
    6850:	90 93 d8 03 	sts	0x03D8, r25
    6854:	80 93 d7 03 	sts	0x03D7, r24
  _rxen = rxen;
    6858:	84 e0       	ldi	r24, 0x04	; 4
    685a:	80 93 d9 03 	sts	0x03D9, r24
  _txen = txen;
    685e:	83 e0       	ldi	r24, 0x03	; 3
    6860:	80 93 da 03 	sts	0x03DA, r24
  _rxcie = rxcie;
    6864:	87 e0       	ldi	r24, 0x07	; 7
    6866:	80 93 db 03 	sts	0x03DB, r24
  _udrie = udrie;
    686a:	85 e0       	ldi	r24, 0x05	; 5
    686c:	80 93 dc 03 	sts	0x03DC, r24
  _u2x = u2x;
    6870:	81 e0       	ldi	r24, 0x01	; 1
    6872:	80 93 dd 03 	sts	0x03DD, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    6876:	08 95       	ret

00006878 <main>:
#include <Arduino.h>

int main(void)
    6878:	cf 93       	push	r28
    687a:	df 93       	push	r29
{
	init();
    687c:	0e 94 a3 30 	call	0x6146	; 0x6146 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    6880:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    6884:	cf ef       	ldi	r28, 0xFF	; 255
    6886:	d1 e3       	ldi	r29, 0x31	; 49
#endif
	
	setup();
    
	for (;;) {
		loop();
    6888:	0e 94 4b 12 	call	0x2496	; 0x2496 <loop>
		if (serialEventRun) serialEventRun();
    688c:	20 97       	sbiw	r28, 0x00	; 0
    688e:	e1 f3       	breq	.-8      	; 0x6888 <main+0x10>
    6890:	0e 94 ff 31 	call	0x63fe	; 0x63fe <_Z14serialEventRunv>
    6894:	f9 cf       	rjmp	.-14     	; 0x6888 <main+0x10>

00006896 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    6896:	cf 92       	push	r12
    6898:	df 92       	push	r13
    689a:	ef 92       	push	r14
    689c:	ff 92       	push	r15
    689e:	0f 93       	push	r16
    68a0:	1f 93       	push	r17
    68a2:	cf 93       	push	r28
    68a4:	df 93       	push	r29
    68a6:	7c 01       	movw	r14, r24
    68a8:	6b 01       	movw	r12, r22
    68aa:	8a 01       	movw	r16, r20
    68ac:	c0 e0       	ldi	r28, 0x00	; 0
    68ae:	d0 e0       	ldi	r29, 0x00	; 0
    68b0:	0f c0       	rjmp	.+30     	; 0x68d0 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    68b2:	d6 01       	movw	r26, r12
    68b4:	6d 91       	ld	r22, X+
    68b6:	6d 01       	movw	r12, r26
    68b8:	d7 01       	movw	r26, r14
    68ba:	ed 91       	ld	r30, X+
    68bc:	fc 91       	ld	r31, X
    68be:	01 90       	ld	r0, Z+
    68c0:	f0 81       	ld	r31, Z
    68c2:	e0 2d       	mov	r30, r0
    68c4:	c7 01       	movw	r24, r14
    68c6:	09 95       	icall
    68c8:	c8 0f       	add	r28, r24
    68ca:	d9 1f       	adc	r29, r25
    68cc:	01 50       	subi	r16, 0x01	; 1
    68ce:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    68d0:	01 15       	cp	r16, r1
    68d2:	11 05       	cpc	r17, r1
    68d4:	71 f7       	brne	.-36     	; 0x68b2 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    68d6:	ce 01       	movw	r24, r28
    68d8:	df 91       	pop	r29
    68da:	cf 91       	pop	r28
    68dc:	1f 91       	pop	r17
    68de:	0f 91       	pop	r16
    68e0:	ff 90       	pop	r15
    68e2:	ef 90       	pop	r14
    68e4:	df 90       	pop	r13
    68e6:	cf 90       	pop	r12
    68e8:	08 95       	ret

000068ea <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
    68ea:	ef 92       	push	r14
    68ec:	ff 92       	push	r15
    68ee:	0f 93       	push	r16
    68f0:	1f 93       	push	r17
    68f2:	cf 93       	push	r28
    68f4:	df 93       	push	r29
    68f6:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    68f8:	8b 01       	movw	r16, r22
    68fa:	c0 e0       	ldi	r28, 0x00	; 0
    68fc:	d0 e0       	ldi	r29, 0x00	; 0
    68fe:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    6900:	0f 5f       	subi	r16, 0xFF	; 255
    6902:	1f 4f       	sbci	r17, 0xFF	; 255
    6904:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    6906:	66 23       	and	r22, r22
    6908:	59 f0       	breq	.+22     	; 0x6920 <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    n += write(c);
    690a:	d7 01       	movw	r26, r14
    690c:	ed 91       	ld	r30, X+
    690e:	fc 91       	ld	r31, X
    6910:	01 90       	ld	r0, Z+
    6912:	f0 81       	ld	r31, Z
    6914:	e0 2d       	mov	r30, r0
    6916:	c7 01       	movw	r24, r14
    6918:	09 95       	icall
    691a:	c8 0f       	add	r28, r24
    691c:	d9 1f       	adc	r29, r25
    691e:	ef cf       	rjmp	.-34     	; 0x68fe <_ZN5Print5printEPK19__FlashStringHelper+0x14>
  }
  return n;
}
    6920:	ce 01       	movw	r24, r28
    6922:	df 91       	pop	r29
    6924:	cf 91       	pop	r28
    6926:	1f 91       	pop	r17
    6928:	0f 91       	pop	r16
    692a:	ff 90       	pop	r15
    692c:	ef 90       	pop	r14
    692e:	08 95       	ret

00006930 <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    6930:	dc 01       	movw	r26, r24
{
  return write(c);
    6932:	ed 91       	ld	r30, X+
    6934:	fc 91       	ld	r31, X
    6936:	01 90       	ld	r0, Z+
    6938:	f0 81       	ld	r31, Z
    693a:	e0 2d       	mov	r30, r0
    693c:	09 95       	icall
}
    693e:	08 95       	ret

00006940 <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    6940:	ef 92       	push	r14
    6942:	ff 92       	push	r15
    6944:	0f 93       	push	r16
    6946:	1f 93       	push	r17
    6948:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    694a:	dc 01       	movw	r26, r24
    694c:	ed 91       	ld	r30, X+
    694e:	fc 91       	ld	r31, X
    6950:	01 90       	ld	r0, Z+
    6952:	f0 81       	ld	r31, Z
    6954:	e0 2d       	mov	r30, r0
    6956:	6d e0       	ldi	r22, 0x0D	; 13
    6958:	09 95       	icall
    695a:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    695c:	d8 01       	movw	r26, r16
    695e:	ed 91       	ld	r30, X+
    6960:	fc 91       	ld	r31, X
    6962:	01 90       	ld	r0, Z+
    6964:	f0 81       	ld	r31, Z
    6966:	e0 2d       	mov	r30, r0
    6968:	c8 01       	movw	r24, r16
    696a:	6a e0       	ldi	r22, 0x0A	; 10
    696c:	09 95       	icall
    696e:	9c 01       	movw	r18, r24
    6970:	2e 0d       	add	r18, r14
    6972:	3f 1d       	adc	r19, r15
    6974:	c9 01       	movw	r24, r18
    6976:	1f 91       	pop	r17
    6978:	0f 91       	pop	r16
    697a:	ff 90       	pop	r15
    697c:	ef 90       	pop	r14
    697e:	08 95       	ret

00006980 <_ZN5Print7printlnEPK19__FlashStringHelper>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    6980:	ef 92       	push	r14
    6982:	ff 92       	push	r15
    6984:	0f 93       	push	r16
    6986:	1f 93       	push	r17
    6988:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    698a:	0e 94 75 34 	call	0x68ea	; 0x68ea <_ZN5Print5printEPK19__FlashStringHelper>
    698e:	8c 01       	movw	r16, r24
  n += println();
    6990:	c7 01       	movw	r24, r14
    6992:	0e 94 a0 34 	call	0x6940	; 0x6940 <_ZN5Print7printlnEv>
    6996:	9c 01       	movw	r18, r24
    6998:	20 0f       	add	r18, r16
    699a:	31 1f       	adc	r19, r17
  return n;
}
    699c:	c9 01       	movw	r24, r18
    699e:	1f 91       	pop	r17
    69a0:	0f 91       	pop	r16
    69a2:	ff 90       	pop	r15
    69a4:	ef 90       	pop	r14
    69a6:	08 95       	ret

000069a8 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    69a8:	cf 93       	push	r28
    69aa:	df 93       	push	r29
    69ac:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    69ae:	61 15       	cp	r22, r1
    69b0:	71 05       	cpc	r23, r1
    69b2:	19 f4       	brne	.+6      	; 0x69ba <_ZN5Print5writeEPKc+0x12>
    69b4:	20 e0       	ldi	r18, 0x00	; 0
    69b6:	30 e0       	ldi	r19, 0x00	; 0
    69b8:	0f c0       	rjmp	.+30     	; 0x69d8 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
    69ba:	db 01       	movw	r26, r22
    69bc:	0d 90       	ld	r0, X+
    69be:	00 20       	and	r0, r0
    69c0:	e9 f7       	brne	.-6      	; 0x69bc <_ZN5Print5writeEPKc+0x14>
    69c2:	11 97       	sbiw	r26, 0x01	; 1
    69c4:	a6 1b       	sub	r26, r22
    69c6:	b7 0b       	sbc	r27, r23
    69c8:	e8 81       	ld	r30, Y
    69ca:	f9 81       	ldd	r31, Y+1	; 0x01
    69cc:	02 80       	ldd	r0, Z+2	; 0x02
    69ce:	f3 81       	ldd	r31, Z+3	; 0x03
    69d0:	e0 2d       	mov	r30, r0
    69d2:	ad 01       	movw	r20, r26
    69d4:	09 95       	icall
    69d6:	9c 01       	movw	r18, r24
    }
    69d8:	c9 01       	movw	r24, r18
    69da:	df 91       	pop	r29
    69dc:	cf 91       	pop	r28
    69de:	08 95       	ret

000069e0 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    69e0:	4f 92       	push	r4
    69e2:	5f 92       	push	r5
    69e4:	7f 92       	push	r7
    69e6:	8f 92       	push	r8
    69e8:	9f 92       	push	r9
    69ea:	af 92       	push	r10
    69ec:	bf 92       	push	r11
    69ee:	cf 92       	push	r12
    69f0:	df 92       	push	r13
    69f2:	ef 92       	push	r14
    69f4:	ff 92       	push	r15
    69f6:	0f 93       	push	r16
    69f8:	1f 93       	push	r17
    69fa:	df 93       	push	r29
    69fc:	cf 93       	push	r28
    69fe:	cd b7       	in	r28, 0x3d	; 61
    6a00:	de b7       	in	r29, 0x3e	; 62
    6a02:	a1 97       	sbiw	r28, 0x21	; 33
    6a04:	0f b6       	in	r0, 0x3f	; 63
    6a06:	f8 94       	cli
    6a08:	de bf       	out	0x3e, r29	; 62
    6a0a:	0f be       	out	0x3f, r0	; 63
    6a0c:	cd bf       	out	0x3d, r28	; 61
    6a0e:	2c 01       	movw	r4, r24
    6a10:	74 2e       	mov	r7, r20
    6a12:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    6a14:	22 30       	cpi	r18, 0x02	; 2
    6a16:	08 f4       	brcc	.+2      	; 0x6a1a <_ZN5Print11printNumberEmh+0x3a>
    6a18:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    6a1a:	19 a2       	std	Y+33, r1	; 0x21
    6a1c:	31 e2       	ldi	r19, 0x21	; 33
    6a1e:	c3 2e       	mov	r12, r19
    6a20:	d1 2c       	mov	r13, r1
    6a22:	cc 0e       	add	r12, r28
    6a24:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    6a26:	82 2e       	mov	r8, r18
    6a28:	99 24       	eor	r9, r9
    6a2a:	aa 24       	eor	r10, r10
    6a2c:	bb 24       	eor	r11, r11
    6a2e:	67 2d       	mov	r22, r7
    6a30:	75 2f       	mov	r23, r21
    6a32:	a5 01       	movw	r20, r10
    6a34:	94 01       	movw	r18, r8
    6a36:	0e 94 48 3c 	call	0x7890	; 0x7890 <__udivmodsi4>
    6a3a:	79 01       	movw	r14, r18
    6a3c:	8a 01       	movw	r16, r20
    char c = m - base * n;
    6a3e:	c8 01       	movw	r24, r16
    6a40:	b7 01       	movw	r22, r14
    6a42:	a5 01       	movw	r20, r10
    6a44:	94 01       	movw	r18, r8
    6a46:	0e 94 02 3c 	call	0x7804	; 0x7804 <__mulsi3>
    6a4a:	47 2d       	mov	r20, r7
    6a4c:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    6a4e:	08 94       	sec
    6a50:	c1 08       	sbc	r12, r1
    6a52:	d1 08       	sbc	r13, r1
    6a54:	4a 30       	cpi	r20, 0x0A	; 10
    6a56:	14 f4       	brge	.+4      	; 0x6a5c <_ZN5Print11printNumberEmh+0x7c>
    6a58:	40 5d       	subi	r20, 0xD0	; 208
    6a5a:	01 c0       	rjmp	.+2      	; 0x6a5e <_ZN5Print11printNumberEmh+0x7e>
    6a5c:	49 5c       	subi	r20, 0xC9	; 201
    6a5e:	f6 01       	movw	r30, r12
    6a60:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    6a62:	e1 14       	cp	r14, r1
    6a64:	f1 04       	cpc	r15, r1
    6a66:	01 05       	cpc	r16, r1
    6a68:	11 05       	cpc	r17, r1
    6a6a:	21 f0       	breq	.+8      	; 0x6a74 <_ZN5Print11printNumberEmh+0x94>
    6a6c:	7e 2c       	mov	r7, r14
    6a6e:	5f 2d       	mov	r21, r15
    6a70:	c8 01       	movw	r24, r16
    6a72:	dd cf       	rjmp	.-70     	; 0x6a2e <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    6a74:	c2 01       	movw	r24, r4
    6a76:	b6 01       	movw	r22, r12
    6a78:	0e 94 d4 34 	call	0x69a8	; 0x69a8 <_ZN5Print5writeEPKc>
}
    6a7c:	a1 96       	adiw	r28, 0x21	; 33
    6a7e:	0f b6       	in	r0, 0x3f	; 63
    6a80:	f8 94       	cli
    6a82:	de bf       	out	0x3e, r29	; 62
    6a84:	0f be       	out	0x3f, r0	; 63
    6a86:	cd bf       	out	0x3d, r28	; 61
    6a88:	cf 91       	pop	r28
    6a8a:	df 91       	pop	r29
    6a8c:	1f 91       	pop	r17
    6a8e:	0f 91       	pop	r16
    6a90:	ff 90       	pop	r15
    6a92:	ef 90       	pop	r14
    6a94:	df 90       	pop	r13
    6a96:	cf 90       	pop	r12
    6a98:	bf 90       	pop	r11
    6a9a:	af 90       	pop	r10
    6a9c:	9f 90       	pop	r9
    6a9e:	8f 90       	pop	r8
    6aa0:	7f 90       	pop	r7
    6aa2:	5f 90       	pop	r5
    6aa4:	4f 90       	pop	r4
    6aa6:	08 95       	ret

00006aa8 <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    6aa8:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    6aaa:	21 15       	cp	r18, r1
    6aac:	31 05       	cpc	r19, r1
    6aae:	41 f4       	brne	.+16     	; 0x6ac0 <_ZN5Print5printEmi+0x18>
    6ab0:	ed 91       	ld	r30, X+
    6ab2:	fc 91       	ld	r31, X
    6ab4:	01 90       	ld	r0, Z+
    6ab6:	f0 81       	ld	r31, Z
    6ab8:	e0 2d       	mov	r30, r0
    6aba:	64 2f       	mov	r22, r20
    6abc:	09 95       	icall
    6abe:	08 95       	ret
  else return printNumber(n, base);
    6ac0:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <_ZN5Print11printNumberEmh>
}
    6ac4:	08 95       	ret

00006ac6 <_ZN5Print5printEji>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
    6ac6:	ef 92       	push	r14
    6ac8:	ff 92       	push	r15
    6aca:	0f 93       	push	r16
    6acc:	1f 93       	push	r17
    6ace:	9a 01       	movw	r18, r20
{
  return print((unsigned long) n, base);
    6ad0:	7b 01       	movw	r14, r22
    6ad2:	00 e0       	ldi	r16, 0x00	; 0
    6ad4:	10 e0       	ldi	r17, 0x00	; 0
    6ad6:	b8 01       	movw	r22, r16
    6ad8:	a7 01       	movw	r20, r14
    6ada:	0e 94 54 35 	call	0x6aa8	; 0x6aa8 <_ZN5Print5printEmi>
}
    6ade:	1f 91       	pop	r17
    6ae0:	0f 91       	pop	r16
    6ae2:	ff 90       	pop	r15
    6ae4:	ef 90       	pop	r14
    6ae6:	08 95       	ret

00006ae8 <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    6ae8:	ef 92       	push	r14
    6aea:	ff 92       	push	r15
    6aec:	0f 93       	push	r16
    6aee:	1f 93       	push	r17
    6af0:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    6af2:	e6 2e       	mov	r14, r22
    6af4:	ff 24       	eor	r15, r15
    6af6:	00 e0       	ldi	r16, 0x00	; 0
    6af8:	10 e0       	ldi	r17, 0x00	; 0
    6afa:	b8 01       	movw	r22, r16
    6afc:	a7 01       	movw	r20, r14
    6afe:	0e 94 54 35 	call	0x6aa8	; 0x6aa8 <_ZN5Print5printEmi>
}
    6b02:	1f 91       	pop	r17
    6b04:	0f 91       	pop	r16
    6b06:	ff 90       	pop	r15
    6b08:	ef 90       	pop	r14
    6b0a:	08 95       	ret

00006b0c <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    6b0c:	cf 92       	push	r12
    6b0e:	df 92       	push	r13
    6b10:	ef 92       	push	r14
    6b12:	ff 92       	push	r15
    6b14:	0f 93       	push	r16
    6b16:	1f 93       	push	r17
    6b18:	cf 93       	push	r28
    6b1a:	df 93       	push	r29
    6b1c:	ec 01       	movw	r28, r24
    6b1e:	6a 01       	movw	r12, r20
    6b20:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    6b22:	21 15       	cp	r18, r1
    6b24:	31 05       	cpc	r19, r1
    6b26:	41 f4       	brne	.+16     	; 0x6b38 <_ZN5Print5printEli+0x2c>
    return write(n);
    6b28:	e8 81       	ld	r30, Y
    6b2a:	f9 81       	ldd	r31, Y+1	; 0x01
    6b2c:	01 90       	ld	r0, Z+
    6b2e:	f0 81       	ld	r31, Z
    6b30:	e0 2d       	mov	r30, r0
    6b32:	64 2f       	mov	r22, r20
    6b34:	09 95       	icall
    6b36:	1f c0       	rjmp	.+62     	; 0x6b76 <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    6b38:	2a 30       	cpi	r18, 0x0A	; 10
    6b3a:	31 05       	cpc	r19, r1
    6b3c:	d1 f4       	brne	.+52     	; 0x6b72 <_ZN5Print5printEli+0x66>
    if (n < 0) {
    6b3e:	77 ff       	sbrs	r23, 7
    6b40:	17 c0       	rjmp	.+46     	; 0x6b70 <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    6b42:	e8 81       	ld	r30, Y
    6b44:	f9 81       	ldd	r31, Y+1	; 0x01
    6b46:	01 90       	ld	r0, Z+
    6b48:	f0 81       	ld	r31, Z
    6b4a:	e0 2d       	mov	r30, r0
    6b4c:	6d e2       	ldi	r22, 0x2D	; 45
    6b4e:	09 95       	icall
    6b50:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    6b52:	44 27       	eor	r20, r20
    6b54:	55 27       	eor	r21, r21
    6b56:	ba 01       	movw	r22, r20
    6b58:	4c 19       	sub	r20, r12
    6b5a:	5d 09       	sbc	r21, r13
    6b5c:	6e 09       	sbc	r22, r14
    6b5e:	7f 09       	sbc	r23, r15
    6b60:	ce 01       	movw	r24, r28
    6b62:	2a e0       	ldi	r18, 0x0A	; 10
    6b64:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <_ZN5Print11printNumberEmh>
    6b68:	98 01       	movw	r18, r16
    6b6a:	28 0f       	add	r18, r24
    6b6c:	39 1f       	adc	r19, r25
    6b6e:	04 c0       	rjmp	.+8      	; 0x6b78 <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    6b70:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    6b72:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <_ZN5Print11printNumberEmh>
    6b76:	9c 01       	movw	r18, r24
  }
}
    6b78:	c9 01       	movw	r24, r18
    6b7a:	df 91       	pop	r29
    6b7c:	cf 91       	pop	r28
    6b7e:	1f 91       	pop	r17
    6b80:	0f 91       	pop	r16
    6b82:	ff 90       	pop	r15
    6b84:	ef 90       	pop	r14
    6b86:	df 90       	pop	r13
    6b88:	cf 90       	pop	r12
    6b8a:	08 95       	ret

00006b8c <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    6b8c:	ef 92       	push	r14
    6b8e:	ff 92       	push	r15
    6b90:	0f 93       	push	r16
    6b92:	1f 93       	push	r17
    6b94:	7b 01       	movw	r14, r22
    6b96:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    6b98:	00 27       	eor	r16, r16
    6b9a:	f7 fc       	sbrc	r15, 7
    6b9c:	00 95       	com	r16
    6b9e:	10 2f       	mov	r17, r16
    6ba0:	b8 01       	movw	r22, r16
    6ba2:	a7 01       	movw	r20, r14
    6ba4:	0e 94 86 35 	call	0x6b0c	; 0x6b0c <_ZN5Print5printEli>
}
    6ba8:	1f 91       	pop	r17
    6baa:	0f 91       	pop	r16
    6bac:	ff 90       	pop	r15
    6bae:	ef 90       	pop	r14
    6bb0:	08 95       	ret

00006bb2 <_ZN5Print7printlnEii>:
  size_t n = print(b, base);
  n += println();
  return n;
}

size_t Print::println(int num, int base)
    6bb2:	cf 92       	push	r12
    6bb4:	df 92       	push	r13
    6bb6:	ef 92       	push	r14
    6bb8:	ff 92       	push	r15
    6bba:	0f 93       	push	r16
    6bbc:	1f 93       	push	r17
    6bbe:	6c 01       	movw	r12, r24
    6bc0:	7b 01       	movw	r14, r22
    6bc2:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    6bc4:	00 27       	eor	r16, r16
    6bc6:	f7 fc       	sbrc	r15, 7
    6bc8:	00 95       	com	r16
    6bca:	10 2f       	mov	r17, r16
    6bcc:	b8 01       	movw	r22, r16
    6bce:	a7 01       	movw	r20, r14
    6bd0:	0e 94 86 35 	call	0x6b0c	; 0x6b0c <_ZN5Print5printEli>
    6bd4:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
    6bd6:	c6 01       	movw	r24, r12
    6bd8:	0e 94 a0 34 	call	0x6940	; 0x6940 <_ZN5Print7printlnEv>
    6bdc:	08 0f       	add	r16, r24
    6bde:	19 1f       	adc	r17, r25
  return n;
}
    6be0:	c8 01       	movw	r24, r16
    6be2:	1f 91       	pop	r17
    6be4:	0f 91       	pop	r16
    6be6:	ff 90       	pop	r15
    6be8:	ef 90       	pop	r14
    6bea:	df 90       	pop	r13
    6bec:	cf 90       	pop	r12
    6bee:	08 95       	ret

00006bf0 <_ZN5Print5printERK6String>:
    n += write(c);
  }
  return n;
}

size_t Print::print(const String &s)
    6bf0:	af 92       	push	r10
    6bf2:	bf 92       	push	r11
    6bf4:	cf 92       	push	r12
    6bf6:	df 92       	push	r13
    6bf8:	ef 92       	push	r14
    6bfa:	ff 92       	push	r15
    6bfc:	0f 93       	push	r16
    6bfe:	1f 93       	push	r17
    6c00:	cf 93       	push	r28
    6c02:	df 93       	push	r29
    6c04:	5c 01       	movw	r10, r24
    6c06:	6b 01       	movw	r12, r22
    6c08:	ee 24       	eor	r14, r14
    6c0a:	ff 24       	eor	r15, r15
    6c0c:	c0 e0       	ldi	r28, 0x00	; 0
    6c0e:	d0 e0       	ldi	r29, 0x00	; 0
    6c10:	10 c0       	rjmp	.+32     	; 0x6c32 <_ZN5Print5printERK6String+0x42>
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    n += write(s[i]);
    6c12:	d5 01       	movw	r26, r10
    6c14:	ed 91       	ld	r30, X+
    6c16:	fc 91       	ld	r31, X
    6c18:	00 81       	ld	r16, Z
    6c1a:	11 81       	ldd	r17, Z+1	; 0x01
    6c1c:	c6 01       	movw	r24, r12
    6c1e:	be 01       	movw	r22, r28
    6c20:	0e 94 90 36 	call	0x6d20	; 0x6d20 <_ZNK6StringixEj>
    6c24:	68 2f       	mov	r22, r24
    6c26:	c5 01       	movw	r24, r10
    6c28:	f8 01       	movw	r30, r16
    6c2a:	09 95       	icall
    6c2c:	e8 0e       	add	r14, r24
    6c2e:	f9 1e       	adc	r15, r25
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    6c30:	21 96       	adiw	r28, 0x01	; 1
    6c32:	f6 01       	movw	r30, r12
    6c34:	84 81       	ldd	r24, Z+4	; 0x04
    6c36:	95 81       	ldd	r25, Z+5	; 0x05
    6c38:	c8 17       	cp	r28, r24
    6c3a:	d9 07       	cpc	r29, r25
    6c3c:	50 f3       	brcs	.-44     	; 0x6c12 <_ZN5Print5printERK6String+0x22>
    n += write(s[i]);
  }
  return n;
}
    6c3e:	c7 01       	movw	r24, r14
    6c40:	df 91       	pop	r29
    6c42:	cf 91       	pop	r28
    6c44:	1f 91       	pop	r17
    6c46:	0f 91       	pop	r16
    6c48:	ff 90       	pop	r15
    6c4a:	ef 90       	pop	r14
    6c4c:	df 90       	pop	r13
    6c4e:	cf 90       	pop	r12
    6c50:	bf 90       	pop	r11
    6c52:	af 90       	pop	r10
    6c54:	08 95       	ret

00006c56 <_ZN6Stream9timedReadEv>:

#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
    6c56:	cf 93       	push	r28
    6c58:	df 93       	push	r29
    6c5a:	ec 01       	movw	r28, r24
{
  int c;
  _startMillis = millis();
    6c5c:	0e 94 32 30 	call	0x6064	; 0x6064 <millis>
    6c60:	68 87       	std	Y+8, r22	; 0x08
    6c62:	79 87       	std	Y+9, r23	; 0x09
    6c64:	8a 87       	std	Y+10, r24	; 0x0a
    6c66:	9b 87       	std	Y+11, r25	; 0x0b
  do {
    c = read();
    6c68:	e8 81       	ld	r30, Y
    6c6a:	f9 81       	ldd	r31, Y+1	; 0x01
    6c6c:	06 80       	ldd	r0, Z+6	; 0x06
    6c6e:	f7 81       	ldd	r31, Z+7	; 0x07
    6c70:	e0 2d       	mov	r30, r0
    6c72:	ce 01       	movw	r24, r28
    6c74:	09 95       	icall
    6c76:	9c 01       	movw	r18, r24
    if (c >= 0) return c;
    6c78:	97 ff       	sbrs	r25, 7
    6c7a:	15 c0       	rjmp	.+42     	; 0x6ca6 <_ZN6Stream9timedReadEv+0x50>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
    6c7c:	0e 94 32 30 	call	0x6064	; 0x6064 <millis>
    6c80:	28 85       	ldd	r18, Y+8	; 0x08
    6c82:	39 85       	ldd	r19, Y+9	; 0x09
    6c84:	4a 85       	ldd	r20, Y+10	; 0x0a
    6c86:	5b 85       	ldd	r21, Y+11	; 0x0b
    6c88:	62 1b       	sub	r22, r18
    6c8a:	73 0b       	sbc	r23, r19
    6c8c:	84 0b       	sbc	r24, r20
    6c8e:	95 0b       	sbc	r25, r21
    6c90:	2c 81       	ldd	r18, Y+4	; 0x04
    6c92:	3d 81       	ldd	r19, Y+5	; 0x05
    6c94:	4e 81       	ldd	r20, Y+6	; 0x06
    6c96:	5f 81       	ldd	r21, Y+7	; 0x07
    6c98:	62 17       	cp	r22, r18
    6c9a:	73 07       	cpc	r23, r19
    6c9c:	84 07       	cpc	r24, r20
    6c9e:	95 07       	cpc	r25, r21
    6ca0:	18 f3       	brcs	.-58     	; 0x6c68 <_ZN6Stream9timedReadEv+0x12>
    6ca2:	2f ef       	ldi	r18, 0xFF	; 255
    6ca4:	3f ef       	ldi	r19, 0xFF	; 255
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
}
    6ca6:	c9 01       	movw	r24, r18
    6ca8:	df 91       	pop	r29
    6caa:	cf 91       	pop	r28
    6cac:	08 95       	ret

00006cae <_ZN6Stream9readBytesEPcj>:
// read characters from stream into buffer
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
    6cae:	cf 92       	push	r12
    6cb0:	df 92       	push	r13
    6cb2:	ef 92       	push	r14
    6cb4:	ff 92       	push	r15
    6cb6:	0f 93       	push	r16
    6cb8:	1f 93       	push	r17
    6cba:	cf 93       	push	r28
    6cbc:	df 93       	push	r29
    6cbe:	6c 01       	movw	r12, r24
    6cc0:	8b 01       	movw	r16, r22
    6cc2:	7a 01       	movw	r14, r20
    6cc4:	c0 e0       	ldi	r28, 0x00	; 0
    6cc6:	d0 e0       	ldi	r29, 0x00	; 0
    6cc8:	09 c0       	rjmp	.+18     	; 0x6cdc <_ZN6Stream9readBytesEPcj+0x2e>
{
  size_t count = 0;
  while (count < length) {
    int c = timedRead();
    6cca:	c6 01       	movw	r24, r12
    6ccc:	0e 94 2b 36 	call	0x6c56	; 0x6c56 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
    6cd0:	97 fd       	sbrc	r25, 7
    6cd2:	07 c0       	rjmp	.+14     	; 0x6ce2 <_ZN6Stream9readBytesEPcj+0x34>
    *buffer++ = (char)c;
    6cd4:	f8 01       	movw	r30, r16
    6cd6:	81 93       	st	Z+, r24
    6cd8:	8f 01       	movw	r16, r30
    count++;
    6cda:	21 96       	adiw	r28, 0x01	; 1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
    6cdc:	ce 15       	cp	r28, r14
    6cde:	df 05       	cpc	r29, r15
    6ce0:	a0 f3       	brcs	.-24     	; 0x6cca <_ZN6Stream9readBytesEPcj+0x1c>
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
    6ce2:	ce 01       	movw	r24, r28
    6ce4:	df 91       	pop	r29
    6ce6:	cf 91       	pop	r28
    6ce8:	1f 91       	pop	r17
    6cea:	0f 91       	pop	r16
    6cec:	ff 90       	pop	r15
    6cee:	ef 90       	pop	r14
    6cf0:	df 90       	pop	r13
    6cf2:	cf 90       	pop	r12
    6cf4:	08 95       	ret

00006cf6 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
    6cf6:	fc 01       	movw	r30, r24
    6cf8:	9b 01       	movw	r18, r22
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    6cfa:	84 81       	ldd	r24, Z+4	; 0x04
    6cfc:	95 81       	ldd	r25, Z+5	; 0x05
    6cfe:	68 17       	cp	r22, r24
    6d00:	79 07       	cpc	r23, r25
    6d02:	28 f4       	brcc	.+10     	; 0x6d0e <_ZN6StringixEj+0x18>
    6d04:	60 81       	ld	r22, Z
    6d06:	71 81       	ldd	r23, Z+1	; 0x01
    6d08:	61 15       	cp	r22, r1
    6d0a:	71 05       	cpc	r23, r1
    6d0c:	29 f4       	brne	.+10     	; 0x6d18 <_ZN6StringixEj+0x22>
		dummy_writable_char = 0;
    6d0e:	10 92 df 03 	sts	0x03DF, r1
    6d12:	6f ed       	ldi	r22, 0xDF	; 223
    6d14:	73 e0       	ldi	r23, 0x03	; 3
    6d16:	02 c0       	rjmp	.+4      	; 0x6d1c <_ZN6StringixEj+0x26>
		return dummy_writable_char;
	}
	return buffer[index];
    6d18:	62 0f       	add	r22, r18
    6d1a:	73 1f       	adc	r23, r19
}
    6d1c:	cb 01       	movw	r24, r22
    6d1e:	08 95       	ret

00006d20 <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
    6d20:	fc 01       	movw	r30, r24
{
	if (index >= len || !buffer) return 0;
    6d22:	84 81       	ldd	r24, Z+4	; 0x04
    6d24:	95 81       	ldd	r25, Z+5	; 0x05
    6d26:	68 17       	cp	r22, r24
    6d28:	79 07       	cpc	r23, r25
    6d2a:	48 f4       	brcc	.+18     	; 0x6d3e <_ZNK6StringixEj+0x1e>
    6d2c:	01 90       	ld	r0, Z+
    6d2e:	f0 81       	ld	r31, Z
    6d30:	e0 2d       	mov	r30, r0
    6d32:	30 97       	sbiw	r30, 0x00	; 0
    6d34:	21 f0       	breq	.+8      	; 0x6d3e <_ZNK6StringixEj+0x1e>
	return buffer[index];
    6d36:	e6 0f       	add	r30, r22
    6d38:	f7 1f       	adc	r31, r23
    6d3a:	80 81       	ld	r24, Z
    6d3c:	08 95       	ret
    6d3e:	80 e0       	ldi	r24, 0x00	; 0
}
    6d40:	08 95       	ret

00006d42 <_ZN6String11toUpperCaseEv>:
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}

void String::toUpperCase(void)
    6d42:	cf 93       	push	r28
    6d44:	df 93       	push	r29
    6d46:	fc 01       	movw	r30, r24
{
	if (!buffer) return;
    6d48:	c0 81       	ld	r28, Z
    6d4a:	d1 81       	ldd	r29, Z+1	; 0x01
    6d4c:	20 97       	sbiw	r28, 0x00	; 0
    6d4e:	39 f4       	brne	.+14     	; 0x6d5e <_ZN6String11toUpperCaseEv+0x1c>
    6d50:	09 c0       	rjmp	.+18     	; 0x6d64 <_ZN6String11toUpperCaseEv+0x22>
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
    6d52:	99 27       	eor	r25, r25
    6d54:	87 fd       	sbrc	r24, 7
    6d56:	90 95       	com	r25
    6d58:	0e 94 70 3c 	call	0x78e0	; 0x78e0 <toupper>
    6d5c:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    6d5e:	88 81       	ld	r24, Y
    6d60:	88 23       	and	r24, r24
    6d62:	b9 f7       	brne	.-18     	; 0x6d52 <_ZN6String11toUpperCaseEv+0x10>
		*p = toupper(*p);
	}
}
    6d64:	df 91       	pop	r29
    6d66:	cf 91       	pop	r28
    6d68:	08 95       	ret

00006d6a <_ZN6String12changeBufferEj>:
		return 1;
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
    6d6a:	0f 93       	push	r16
    6d6c:	1f 93       	push	r17
    6d6e:	cf 93       	push	r28
    6d70:	df 93       	push	r29
    6d72:	ec 01       	movw	r28, r24
    6d74:	8b 01       	movw	r16, r22
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    6d76:	6f 5f       	subi	r22, 0xFF	; 255
    6d78:	7f 4f       	sbci	r23, 0xFF	; 255
    6d7a:	88 81       	ld	r24, Y
    6d7c:	99 81       	ldd	r25, Y+1	; 0x01
    6d7e:	0e 94 06 39 	call	0x720c	; 0x720c <realloc>
	if (newbuffer) {
    6d82:	00 97       	sbiw	r24, 0x00	; 0
    6d84:	11 f4       	brne	.+4      	; 0x6d8a <_ZN6String12changeBufferEj+0x20>
    6d86:	80 e0       	ldi	r24, 0x00	; 0
    6d88:	05 c0       	rjmp	.+10     	; 0x6d94 <_ZN6String12changeBufferEj+0x2a>
		buffer = newbuffer;
    6d8a:	99 83       	std	Y+1, r25	; 0x01
    6d8c:	88 83       	st	Y, r24
		capacity = maxStrLen;
    6d8e:	1b 83       	std	Y+3, r17	; 0x03
    6d90:	0a 83       	std	Y+2, r16	; 0x02
    6d92:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    6d94:	df 91       	pop	r29
    6d96:	cf 91       	pop	r28
    6d98:	1f 91       	pop	r17
    6d9a:	0f 91       	pop	r16
    6d9c:	08 95       	ret

00006d9e <_ZN6String7reserveEj>:
	if (buffer) free(buffer);
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
    6d9e:	cf 93       	push	r28
    6da0:	df 93       	push	r29
    6da2:	ec 01       	movw	r28, r24
{
	if (buffer && capacity >= size) return 1;
    6da4:	88 81       	ld	r24, Y
    6da6:	99 81       	ldd	r25, Y+1	; 0x01
    6da8:	89 2b       	or	r24, r25
    6daa:	29 f0       	breq	.+10     	; 0x6db6 <_ZN6String7reserveEj+0x18>
    6dac:	8a 81       	ldd	r24, Y+2	; 0x02
    6dae:	9b 81       	ldd	r25, Y+3	; 0x03
    6db0:	86 17       	cp	r24, r22
    6db2:	97 07       	cpc	r25, r23
    6db4:	60 f4       	brcc	.+24     	; 0x6dce <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    6db6:	ce 01       	movw	r24, r28
    6db8:	0e 94 b5 36 	call	0x6d6a	; 0x6d6a <_ZN6String12changeBufferEj>
    6dbc:	88 23       	and	r24, r24
    6dbe:	41 f0       	breq	.+16     	; 0x6dd0 <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    6dc0:	8c 81       	ldd	r24, Y+4	; 0x04
    6dc2:	9d 81       	ldd	r25, Y+5	; 0x05
    6dc4:	89 2b       	or	r24, r25
    6dc6:	19 f4       	brne	.+6      	; 0x6dce <_ZN6String7reserveEj+0x30>
    6dc8:	e8 81       	ld	r30, Y
    6dca:	f9 81       	ldd	r31, Y+1	; 0x01
    6dcc:	10 82       	st	Z, r1
    6dce:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    6dd0:	df 91       	pop	r29
    6dd2:	cf 91       	pop	r28
    6dd4:	08 95       	ret

00006dd6 <_ZN6String6concatEPKcj>:
unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
    6dd6:	ef 92       	push	r14
    6dd8:	ff 92       	push	r15
    6dda:	0f 93       	push	r16
    6ddc:	1f 93       	push	r17
    6dde:	cf 93       	push	r28
    6de0:	df 93       	push	r29
    6de2:	ec 01       	movw	r28, r24
    6de4:	7b 01       	movw	r14, r22
{
	unsigned int newlen = len + length;
    6de6:	6c 81       	ldd	r22, Y+4	; 0x04
    6de8:	7d 81       	ldd	r23, Y+5	; 0x05
	if (!cstr) return 0;
    6dea:	e1 14       	cp	r14, r1
    6dec:	f1 04       	cpc	r15, r1
    6dee:	c1 f0       	breq	.+48     	; 0x6e20 <_ZN6String6concatEPKcj+0x4a>
	if (length == 0) return 1;
    6df0:	41 15       	cp	r20, r1
    6df2:	51 05       	cpc	r21, r1
    6df4:	99 f0       	breq	.+38     	; 0x6e1c <_ZN6String6concatEPKcj+0x46>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    6df6:	8a 01       	movw	r16, r20
    6df8:	06 0f       	add	r16, r22
    6dfa:	17 1f       	adc	r17, r23
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
    6dfc:	b8 01       	movw	r22, r16
    6dfe:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <_ZN6String7reserveEj>
    6e02:	88 23       	and	r24, r24
    6e04:	69 f0       	breq	.+26     	; 0x6e20 <_ZN6String6concatEPKcj+0x4a>
	strcpy(buffer + len, cstr);
    6e06:	88 81       	ld	r24, Y
    6e08:	99 81       	ldd	r25, Y+1	; 0x01
    6e0a:	2c 81       	ldd	r18, Y+4	; 0x04
    6e0c:	3d 81       	ldd	r19, Y+5	; 0x05
    6e0e:	82 0f       	add	r24, r18
    6e10:	93 1f       	adc	r25, r19
    6e12:	b7 01       	movw	r22, r14
    6e14:	0e 94 59 05 	call	0xab2	; 0xab2 <strcpy>
	len = newlen;
    6e18:	1d 83       	std	Y+5, r17	; 0x05
    6e1a:	0c 83       	std	Y+4, r16	; 0x04
    6e1c:	81 e0       	ldi	r24, 0x01	; 1
    6e1e:	01 c0       	rjmp	.+2      	; 0x6e22 <_ZN6String6concatEPKcj+0x4c>
	return 1;
    6e20:	80 e0       	ldi	r24, 0x00	; 0
}
    6e22:	df 91       	pop	r29
    6e24:	cf 91       	pop	r28
    6e26:	1f 91       	pop	r17
    6e28:	0f 91       	pop	r16
    6e2a:	ff 90       	pop	r15
    6e2c:	ef 90       	pop	r14
    6e2e:	08 95       	ret

00006e30 <_ZN6String6concatEj>:
	char buf[7];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(unsigned int num)
    6e30:	ef 92       	push	r14
    6e32:	ff 92       	push	r15
    6e34:	0f 93       	push	r16
    6e36:	1f 93       	push	r17
    6e38:	df 93       	push	r29
    6e3a:	cf 93       	push	r28
    6e3c:	00 d0       	rcall	.+0      	; 0x6e3e <_ZN6String6concatEj+0xe>
    6e3e:	00 d0       	rcall	.+0      	; 0x6e40 <_ZN6String6concatEj+0x10>
    6e40:	00 d0       	rcall	.+0      	; 0x6e42 <_ZN6String6concatEj+0x12>
    6e42:	cd b7       	in	r28, 0x3d	; 61
    6e44:	de b7       	in	r29, 0x3e	; 62
    6e46:	7c 01       	movw	r14, r24
    6e48:	cb 01       	movw	r24, r22
{
	char buf[6];
	utoa(num, buf, 10);
    6e4a:	8e 01       	movw	r16, r28
    6e4c:	0f 5f       	subi	r16, 0xFF	; 255
    6e4e:	1f 4f       	sbci	r17, 0xFF	; 255
    6e50:	b8 01       	movw	r22, r16
    6e52:	4a e0       	ldi	r20, 0x0A	; 10
    6e54:	50 e0       	ldi	r21, 0x00	; 0
    6e56:	0e 94 81 05 	call	0xb02	; 0xb02 <utoa>
	return concat(buf, strlen(buf));
    6e5a:	f8 01       	movw	r30, r16
    6e5c:	01 90       	ld	r0, Z+
    6e5e:	00 20       	and	r0, r0
    6e60:	e9 f7       	brne	.-6      	; 0x6e5c <_ZN6String6concatEj+0x2c>
    6e62:	31 97       	sbiw	r30, 0x01	; 1
    6e64:	e0 1b       	sub	r30, r16
    6e66:	f1 0b       	sbc	r31, r17
    6e68:	c7 01       	movw	r24, r14
    6e6a:	b8 01       	movw	r22, r16
    6e6c:	af 01       	movw	r20, r30
    6e6e:	0e 94 eb 36 	call	0x6dd6	; 0x6dd6 <_ZN6String6concatEPKcj>
}
    6e72:	26 96       	adiw	r28, 0x06	; 6
    6e74:	0f b6       	in	r0, 0x3f	; 63
    6e76:	f8 94       	cli
    6e78:	de bf       	out	0x3e, r29	; 62
    6e7a:	0f be       	out	0x3f, r0	; 63
    6e7c:	cd bf       	out	0x3d, r28	; 61
    6e7e:	cf 91       	pop	r28
    6e80:	df 91       	pop	r29
    6e82:	1f 91       	pop	r17
    6e84:	0f 91       	pop	r16
    6e86:	ff 90       	pop	r15
    6e88:	ef 90       	pop	r14
    6e8a:	08 95       	ret

00006e8c <_ZN6String6concatEi>:
	char buf[4];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
    6e8c:	ef 92       	push	r14
    6e8e:	ff 92       	push	r15
    6e90:	0f 93       	push	r16
    6e92:	1f 93       	push	r17
    6e94:	df 93       	push	r29
    6e96:	cf 93       	push	r28
    6e98:	cd b7       	in	r28, 0x3d	; 61
    6e9a:	de b7       	in	r29, 0x3e	; 62
    6e9c:	27 97       	sbiw	r28, 0x07	; 7
    6e9e:	0f b6       	in	r0, 0x3f	; 63
    6ea0:	f8 94       	cli
    6ea2:	de bf       	out	0x3e, r29	; 62
    6ea4:	0f be       	out	0x3f, r0	; 63
    6ea6:	cd bf       	out	0x3d, r28	; 61
    6ea8:	7c 01       	movw	r14, r24
    6eaa:	cb 01       	movw	r24, r22
{
	char buf[7];
	itoa(num, buf, 10);
    6eac:	8e 01       	movw	r16, r28
    6eae:	0f 5f       	subi	r16, 0xFF	; 255
    6eb0:	1f 4f       	sbci	r17, 0xFF	; 255
    6eb2:	b8 01       	movw	r22, r16
    6eb4:	4a e0       	ldi	r20, 0x0A	; 10
    6eb6:	50 e0       	ldi	r21, 0x00	; 0
    6eb8:	0e 94 60 05 	call	0xac0	; 0xac0 <itoa>
	return concat(buf, strlen(buf));
    6ebc:	f8 01       	movw	r30, r16
    6ebe:	01 90       	ld	r0, Z+
    6ec0:	00 20       	and	r0, r0
    6ec2:	e9 f7       	brne	.-6      	; 0x6ebe <_ZN6String6concatEi+0x32>
    6ec4:	31 97       	sbiw	r30, 0x01	; 1
    6ec6:	e0 1b       	sub	r30, r16
    6ec8:	f1 0b       	sbc	r31, r17
    6eca:	c7 01       	movw	r24, r14
    6ecc:	b8 01       	movw	r22, r16
    6ece:	af 01       	movw	r20, r30
    6ed0:	0e 94 eb 36 	call	0x6dd6	; 0x6dd6 <_ZN6String6concatEPKcj>
}
    6ed4:	27 96       	adiw	r28, 0x07	; 7
    6ed6:	0f b6       	in	r0, 0x3f	; 63
    6ed8:	f8 94       	cli
    6eda:	de bf       	out	0x3e, r29	; 62
    6edc:	0f be       	out	0x3f, r0	; 63
    6ede:	cd bf       	out	0x3d, r28	; 61
    6ee0:	cf 91       	pop	r28
    6ee2:	df 91       	pop	r29
    6ee4:	1f 91       	pop	r17
    6ee6:	0f 91       	pop	r16
    6ee8:	ff 90       	pop	r15
    6eea:	ef 90       	pop	r14
    6eec:	08 95       	ret

00006eee <_ZN6String6concatEh>:
	buf[0] = c;
	buf[1] = 0;
	return concat(buf, 1);
}

unsigned char String::concat(unsigned char num)
    6eee:	ef 92       	push	r14
    6ef0:	ff 92       	push	r15
    6ef2:	0f 93       	push	r16
    6ef4:	1f 93       	push	r17
    6ef6:	df 93       	push	r29
    6ef8:	cf 93       	push	r28
    6efa:	00 d0       	rcall	.+0      	; 0x6efc <_ZN6String6concatEh+0xe>
    6efc:	00 d0       	rcall	.+0      	; 0x6efe <_ZN6String6concatEh+0x10>
    6efe:	cd b7       	in	r28, 0x3d	; 61
    6f00:	de b7       	in	r29, 0x3e	; 62
    6f02:	7c 01       	movw	r14, r24
    6f04:	86 2f       	mov	r24, r22
{
	char buf[4];
	itoa(num, buf, 10);
    6f06:	90 e0       	ldi	r25, 0x00	; 0
    6f08:	8e 01       	movw	r16, r28
    6f0a:	0f 5f       	subi	r16, 0xFF	; 255
    6f0c:	1f 4f       	sbci	r17, 0xFF	; 255
    6f0e:	b8 01       	movw	r22, r16
    6f10:	4a e0       	ldi	r20, 0x0A	; 10
    6f12:	50 e0       	ldi	r21, 0x00	; 0
    6f14:	0e 94 60 05 	call	0xac0	; 0xac0 <itoa>
	return concat(buf, strlen(buf));
    6f18:	f8 01       	movw	r30, r16
    6f1a:	01 90       	ld	r0, Z+
    6f1c:	00 20       	and	r0, r0
    6f1e:	e9 f7       	brne	.-6      	; 0x6f1a <_ZN6String6concatEh+0x2c>
    6f20:	31 97       	sbiw	r30, 0x01	; 1
    6f22:	e0 1b       	sub	r30, r16
    6f24:	f1 0b       	sbc	r31, r17
    6f26:	c7 01       	movw	r24, r14
    6f28:	b8 01       	movw	r22, r16
    6f2a:	af 01       	movw	r20, r30
    6f2c:	0e 94 eb 36 	call	0x6dd6	; 0x6dd6 <_ZN6String6concatEPKcj>
}
    6f30:	0f 90       	pop	r0
    6f32:	0f 90       	pop	r0
    6f34:	0f 90       	pop	r0
    6f36:	0f 90       	pop	r0
    6f38:	cf 91       	pop	r28
    6f3a:	df 91       	pop	r29
    6f3c:	1f 91       	pop	r17
    6f3e:	0f 91       	pop	r16
    6f40:	ff 90       	pop	r15
    6f42:	ef 90       	pop	r14
    6f44:	08 95       	ret

00006f46 <_ZN6String6concatEc>:
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}

unsigned char String::concat(char c)
    6f46:	df 93       	push	r29
    6f48:	cf 93       	push	r28
    6f4a:	00 d0       	rcall	.+0      	; 0x6f4c <_ZN6String6concatEc+0x6>
    6f4c:	cd b7       	in	r28, 0x3d	; 61
    6f4e:	de b7       	in	r29, 0x3e	; 62
{
	char buf[2];
	buf[0] = c;
    6f50:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    6f52:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
    6f54:	be 01       	movw	r22, r28
    6f56:	6f 5f       	subi	r22, 0xFF	; 255
    6f58:	7f 4f       	sbci	r23, 0xFF	; 255
    6f5a:	41 e0       	ldi	r20, 0x01	; 1
    6f5c:	50 e0       	ldi	r21, 0x00	; 0
    6f5e:	0e 94 eb 36 	call	0x6dd6	; 0x6dd6 <_ZN6String6concatEPKcj>
}
    6f62:	0f 90       	pop	r0
    6f64:	0f 90       	pop	r0
    6f66:	cf 91       	pop	r28
    6f68:	df 91       	pop	r29
    6f6a:	08 95       	ret

00006f6c <_ZN6String6concatERKS_>:

/*********************************************/
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
    6f6c:	fb 01       	movw	r30, r22
{
	return concat(s.buffer, s.len);
    6f6e:	60 81       	ld	r22, Z
    6f70:	71 81       	ldd	r23, Z+1	; 0x01
    6f72:	44 81       	ldd	r20, Z+4	; 0x04
    6f74:	55 81       	ldd	r21, Z+5	; 0x05
    6f76:	0e 94 eb 36 	call	0x6dd6	; 0x6dd6 <_ZN6String6concatEPKcj>
}
    6f7a:	08 95       	ret

00006f7c <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
	flags = 0;
}

void String::invalidate(void)
    6f7c:	cf 93       	push	r28
    6f7e:	df 93       	push	r29
    6f80:	ec 01       	movw	r28, r24
{
	if (buffer) free(buffer);
    6f82:	88 81       	ld	r24, Y
    6f84:	99 81       	ldd	r25, Y+1	; 0x01
    6f86:	00 97       	sbiw	r24, 0x00	; 0
    6f88:	11 f0       	breq	.+4      	; 0x6f8e <_ZN6String10invalidateEv+0x12>
    6f8a:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <free>
	buffer = NULL;
    6f8e:	19 82       	std	Y+1, r1	; 0x01
    6f90:	18 82       	st	Y, r1
	capacity = len = 0;
    6f92:	1d 82       	std	Y+5, r1	; 0x05
    6f94:	1c 82       	std	Y+4, r1	; 0x04
    6f96:	1b 82       	std	Y+3, r1	; 0x03
    6f98:	1a 82       	std	Y+2, r1	; 0x02
}
    6f9a:	df 91       	pop	r29
    6f9c:	cf 91       	pop	r28
    6f9e:	08 95       	ret

00006fa0 <_ZplRK15StringSumHelperRK6String>:

/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
    6fa0:	0f 93       	push	r16
    6fa2:	1f 93       	push	r17
    6fa4:	18 2f       	mov	r17, r24
    6fa6:	09 2f       	mov	r16, r25
    6fa8:	fb 01       	movw	r30, r22
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    6faa:	60 81       	ld	r22, Z
    6fac:	71 81       	ldd	r23, Z+1	; 0x01
    6fae:	44 81       	ldd	r20, Z+4	; 0x04
    6fb0:	55 81       	ldd	r21, Z+5	; 0x05
    6fb2:	0e 94 eb 36 	call	0x6dd6	; 0x6dd6 <_ZN6String6concatEPKcj>
    6fb6:	88 23       	and	r24, r24
    6fb8:	21 f4       	brne	.+8      	; 0x6fc2 <_ZplRK15StringSumHelperRK6String+0x22>
    6fba:	81 2f       	mov	r24, r17
    6fbc:	90 2f       	mov	r25, r16
    6fbe:	0e 94 be 37 	call	0x6f7c	; 0x6f7c <_ZN6String10invalidateEv>
	return a;
}
    6fc2:	81 2f       	mov	r24, r17
    6fc4:	90 2f       	mov	r25, r16
    6fc6:	1f 91       	pop	r17
    6fc8:	0f 91       	pop	r16
    6fca:	08 95       	ret

00006fcc <_ZN6String4copyEPKcj>:

/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
    6fcc:	ef 92       	push	r14
    6fce:	ff 92       	push	r15
    6fd0:	0f 93       	push	r16
    6fd2:	1f 93       	push	r17
    6fd4:	cf 93       	push	r28
    6fd6:	df 93       	push	r29
    6fd8:	ec 01       	movw	r28, r24
    6fda:	7b 01       	movw	r14, r22
    6fdc:	8a 01       	movw	r16, r20
{
	if (!reserve(length)) {
    6fde:	ba 01       	movw	r22, r20
    6fe0:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <_ZN6String7reserveEj>
    6fe4:	88 23       	and	r24, r24
    6fe6:	21 f4       	brne	.+8      	; 0x6ff0 <_ZN6String4copyEPKcj+0x24>
		invalidate();
    6fe8:	ce 01       	movw	r24, r28
    6fea:	0e 94 be 37 	call	0x6f7c	; 0x6f7c <_ZN6String10invalidateEv>
    6fee:	07 c0       	rjmp	.+14     	; 0x6ffe <_ZN6String4copyEPKcj+0x32>
		return *this;
	}
	len = length;
    6ff0:	1d 83       	std	Y+5, r17	; 0x05
    6ff2:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    6ff4:	88 81       	ld	r24, Y
    6ff6:	99 81       	ldd	r25, Y+1	; 0x01
    6ff8:	b7 01       	movw	r22, r14
    6ffa:	0e 94 59 05 	call	0xab2	; 0xab2 <strcpy>
	return *this;
}
    6ffe:	ce 01       	movw	r24, r28
    7000:	df 91       	pop	r29
    7002:	cf 91       	pop	r28
    7004:	1f 91       	pop	r17
    7006:	0f 91       	pop	r16
    7008:	ff 90       	pop	r15
    700a:	ef 90       	pop	r14
    700c:	08 95       	ret

0000700e <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    700e:	cf 93       	push	r28
    7010:	df 93       	push	r29
    7012:	ec 01       	movw	r28, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    7014:	19 82       	std	Y+1, r1	; 0x01
    7016:	18 82       	st	Y, r1
	capacity = 0;
    7018:	1b 82       	std	Y+3, r1	; 0x03
    701a:	1a 82       	std	Y+2, r1	; 0x02
	len = 0;
    701c:	1d 82       	std	Y+5, r1	; 0x05
    701e:	1c 82       	std	Y+4, r1	; 0x04
	flags = 0;
    7020:	1e 82       	std	Y+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    7022:	61 15       	cp	r22, r1
    7024:	71 05       	cpc	r23, r1
    7026:	51 f0       	breq	.+20     	; 0x703c <_ZN6StringC1EPKc+0x2e>
    7028:	db 01       	movw	r26, r22
    702a:	0d 90       	ld	r0, X+
    702c:	00 20       	and	r0, r0
    702e:	e9 f7       	brne	.-6      	; 0x702a <_ZN6StringC1EPKc+0x1c>
    7030:	11 97       	sbiw	r26, 0x01	; 1
    7032:	a6 1b       	sub	r26, r22
    7034:	b7 0b       	sbc	r27, r23
    7036:	ad 01       	movw	r20, r26
    7038:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <_ZN6String4copyEPKcj>
}
    703c:	df 91       	pop	r29
    703e:	cf 91       	pop	r28
    7040:	08 95       	ret

00007042 <_ZN6StringaSEPKc>:
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    7042:	0f 93       	push	r16
    7044:	1f 93       	push	r17
    7046:	18 2f       	mov	r17, r24
    7048:	09 2f       	mov	r16, r25
{
	if (cstr) copy(cstr, strlen(cstr));
    704a:	61 15       	cp	r22, r1
    704c:	71 05       	cpc	r23, r1
    704e:	59 f0       	breq	.+22     	; 0x7066 <_ZN6StringaSEPKc+0x24>
    7050:	db 01       	movw	r26, r22
    7052:	0d 90       	ld	r0, X+
    7054:	00 20       	and	r0, r0
    7056:	e9 f7       	brne	.-6      	; 0x7052 <_ZN6StringaSEPKc+0x10>
    7058:	11 97       	sbiw	r26, 0x01	; 1
    705a:	a6 1b       	sub	r26, r22
    705c:	b7 0b       	sbc	r27, r23
    705e:	ad 01       	movw	r20, r26
    7060:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <_ZN6String4copyEPKcj>
    7064:	02 c0       	rjmp	.+4      	; 0x706a <_ZN6StringaSEPKc+0x28>
	else invalidate();
    7066:	0e 94 be 37 	call	0x6f7c	; 0x6f7c <_ZN6String10invalidateEv>
	
	return *this;
}
    706a:	81 2f       	mov	r24, r17
    706c:	90 2f       	mov	r25, r16
    706e:	1f 91       	pop	r17
    7070:	0f 91       	pop	r16
    7072:	08 95       	ret

00007074 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    7074:	ef 92       	push	r14
    7076:	ff 92       	push	r15
    7078:	0f 93       	push	r16
    707a:	1f 93       	push	r17
    707c:	df 93       	push	r29
    707e:	cf 93       	push	r28
    7080:	cd b7       	in	r28, 0x3d	; 61
    7082:	de b7       	in	r29, 0x3e	; 62
    7084:	29 97       	sbiw	r28, 0x09	; 9
    7086:	0f b6       	in	r0, 0x3f	; 63
    7088:	f8 94       	cli
    708a:	de bf       	out	0x3e, r29	; 62
    708c:	0f be       	out	0x3f, r0	; 63
    708e:	cd bf       	out	0x3d, r28	; 61
    7090:	8c 01       	movw	r16, r24
    7092:	86 2f       	mov	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    7094:	f8 01       	movw	r30, r16
    7096:	11 82       	std	Z+1, r1	; 0x01
    7098:	10 82       	st	Z, r1
	capacity = 0;
    709a:	13 82       	std	Z+3, r1	; 0x03
    709c:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    709e:	15 82       	std	Z+5, r1	; 0x05
    70a0:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    70a2:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned char value, unsigned char base)
{
	init();
	char buf[9];
	utoa(value, buf, base);
    70a4:	90 e0       	ldi	r25, 0x00	; 0
    70a6:	7e 01       	movw	r14, r28
    70a8:	08 94       	sec
    70aa:	e1 1c       	adc	r14, r1
    70ac:	f1 1c       	adc	r15, r1
    70ae:	b7 01       	movw	r22, r14
    70b0:	50 e0       	ldi	r21, 0x00	; 0
    70b2:	0e 94 81 05 	call	0xb02	; 0xb02 <utoa>
	*this = buf;
    70b6:	c8 01       	movw	r24, r16
    70b8:	b7 01       	movw	r22, r14
    70ba:	0e 94 21 38 	call	0x7042	; 0x7042 <_ZN6StringaSEPKc>
}
    70be:	29 96       	adiw	r28, 0x09	; 9
    70c0:	0f b6       	in	r0, 0x3f	; 63
    70c2:	f8 94       	cli
    70c4:	de bf       	out	0x3e, r29	; 62
    70c6:	0f be       	out	0x3f, r0	; 63
    70c8:	cd bf       	out	0x3d, r28	; 61
    70ca:	cf 91       	pop	r28
    70cc:	df 91       	pop	r29
    70ce:	1f 91       	pop	r17
    70d0:	0f 91       	pop	r16
    70d2:	ff 90       	pop	r15
    70d4:	ef 90       	pop	r14
    70d6:	08 95       	ret

000070d8 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
    70d8:	df 93       	push	r29
    70da:	cf 93       	push	r28
    70dc:	00 d0       	rcall	.+0      	; 0x70de <_ZN6StringC1Ec+0x6>
    70de:	cd b7       	in	r28, 0x3d	; 61
    70e0:	de b7       	in	r29, 0x3e	; 62
    70e2:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    70e4:	11 82       	std	Z+1, r1	; 0x01
    70e6:	10 82       	st	Z, r1
	capacity = 0;
    70e8:	13 82       	std	Z+3, r1	; 0x03
    70ea:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    70ec:	15 82       	std	Z+5, r1	; 0x05
    70ee:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    70f0:	16 82       	std	Z+6, r1	; 0x06

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
    70f2:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    70f4:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
    70f6:	be 01       	movw	r22, r28
    70f8:	6f 5f       	subi	r22, 0xFF	; 255
    70fa:	7f 4f       	sbci	r23, 0xFF	; 255
    70fc:	0e 94 21 38 	call	0x7042	; 0x7042 <_ZN6StringaSEPKc>
}
    7100:	0f 90       	pop	r0
    7102:	0f 90       	pop	r0
    7104:	cf 91       	pop	r28
    7106:	df 91       	pop	r29
    7108:	08 95       	ret

0000710a <_ZNK6String9substringEjj>:
String String::substring( unsigned int left ) const
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
    710a:	bf 92       	push	r11
    710c:	cf 92       	push	r12
    710e:	df 92       	push	r13
    7110:	ef 92       	push	r14
    7112:	ff 92       	push	r15
    7114:	0f 93       	push	r16
    7116:	1f 93       	push	r17
    7118:	cf 93       	push	r28
    711a:	df 93       	push	r29
    711c:	08 2f       	mov	r16, r24
    711e:	b9 2e       	mov	r11, r25
    7120:	6b 01       	movw	r12, r22
    7122:	7a 01       	movw	r14, r20
    7124:	e9 01       	movw	r28, r18
{
	if (left > right) {
    7126:	24 17       	cp	r18, r20
    7128:	35 07       	cpc	r19, r21
    712a:	10 f4       	brcc	.+4      	; 0x7130 <_ZNK6String9substringEjj+0x26>
    712c:	ea 01       	movw	r28, r20
    712e:	79 01       	movw	r14, r18
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    7130:	80 2f       	mov	r24, r16
    7132:	9b 2d       	mov	r25, r11
    7134:	62 e0       	ldi	r22, 0x02	; 2
    7136:	71 e0       	ldi	r23, 0x01	; 1
    7138:	0e 94 07 38 	call	0x700e	; 0x700e <_ZN6StringC1EPKc>
	if (left > len) return out;
    713c:	d6 01       	movw	r26, r12
    713e:	14 96       	adiw	r26, 0x04	; 4
    7140:	8d 91       	ld	r24, X+
    7142:	9c 91       	ld	r25, X
    7144:	15 97       	sbiw	r26, 0x05	; 5
    7146:	8e 15       	cp	r24, r14
    7148:	9f 05       	cpc	r25, r15
    714a:	d0 f0       	brcs	.+52     	; 0x7180 <_ZNK6String9substringEjj+0x76>
    714c:	8c 17       	cp	r24, r28
    714e:	9d 07       	cpc	r25, r29
    7150:	08 f4       	brcc	.+2      	; 0x7154 <_ZNK6String9substringEjj+0x4a>
    7152:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    7154:	d6 01       	movw	r26, r12
    7156:	ed 91       	ld	r30, X+
    7158:	fc 91       	ld	r31, X
    715a:	11 97       	sbiw	r26, 0x01	; 1
    715c:	ec 0f       	add	r30, r28
    715e:	fd 1f       	adc	r31, r29
    7160:	10 81       	ld	r17, Z
	buffer[right] = '\0';	
    7162:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    7164:	6d 91       	ld	r22, X+
    7166:	7c 91       	ld	r23, X
    7168:	6e 0d       	add	r22, r14
    716a:	7f 1d       	adc	r23, r15
    716c:	80 2f       	mov	r24, r16
    716e:	9b 2d       	mov	r25, r11
    7170:	0e 94 21 38 	call	0x7042	; 0x7042 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    7174:	d6 01       	movw	r26, r12
    7176:	ed 91       	ld	r30, X+
    7178:	fc 91       	ld	r31, X
    717a:	ec 0f       	add	r30, r28
    717c:	fd 1f       	adc	r31, r29
    717e:	10 83       	st	Z, r17
	return out;
}
    7180:	80 2f       	mov	r24, r16
    7182:	9b 2d       	mov	r25, r11
    7184:	df 91       	pop	r29
    7186:	cf 91       	pop	r28
    7188:	1f 91       	pop	r17
    718a:	0f 91       	pop	r16
    718c:	ff 90       	pop	r15
    718e:	ef 90       	pop	r14
    7190:	df 90       	pop	r13
    7192:	cf 90       	pop	r12
    7194:	bf 90       	pop	r11
    7196:	08 95       	ret

00007198 <_ZNK6String9substringEj>:
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}

String String::substring( unsigned int left ) const
    7198:	0f 93       	push	r16
    719a:	1f 93       	push	r17
    719c:	8c 01       	movw	r16, r24
    719e:	fb 01       	movw	r30, r22
{
	return substring(left, len);
    71a0:	24 81       	ldd	r18, Z+4	; 0x04
    71a2:	35 81       	ldd	r19, Z+5	; 0x05
    71a4:	0e 94 85 38 	call	0x710a	; 0x710a <_ZNK6String9substringEjj>
}
    71a8:	c8 01       	movw	r24, r16
    71aa:	1f 91       	pop	r17
    71ac:	0f 91       	pop	r16
    71ae:	08 95       	ret

000071b0 <_ZN6StringaSERKS_>:
	rhs.capacity = 0;
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
    71b0:	cf 93       	push	r28
    71b2:	df 93       	push	r29
    71b4:	ec 01       	movw	r28, r24
    71b6:	fb 01       	movw	r30, r22
{
	if (this == &rhs) return *this;
    71b8:	86 17       	cp	r24, r22
    71ba:	97 07       	cpc	r25, r23
    71bc:	61 f0       	breq	.+24     	; 0x71d6 <_ZN6StringaSERKS_+0x26>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    71be:	60 81       	ld	r22, Z
    71c0:	71 81       	ldd	r23, Z+1	; 0x01
    71c2:	61 15       	cp	r22, r1
    71c4:	71 05       	cpc	r23, r1
    71c6:	29 f0       	breq	.+10     	; 0x71d2 <_ZN6StringaSERKS_+0x22>
    71c8:	44 81       	ldd	r20, Z+4	; 0x04
    71ca:	55 81       	ldd	r21, Z+5	; 0x05
    71cc:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <_ZN6String4copyEPKcj>
    71d0:	02 c0       	rjmp	.+4      	; 0x71d6 <_ZN6StringaSERKS_+0x26>
	else invalidate();
    71d2:	0e 94 be 37 	call	0x6f7c	; 0x6f7c <_ZN6String10invalidateEv>
	
	return *this;
}
    71d6:	ce 01       	movw	r24, r28
    71d8:	df 91       	pop	r29
    71da:	cf 91       	pop	r28
    71dc:	08 95       	ret

000071de <_ZN6StringC2ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    71de:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    71e0:	11 82       	std	Z+1, r1	; 0x01
    71e2:	10 82       	st	Z, r1
	capacity = 0;
    71e4:	13 82       	std	Z+3, r1	; 0x03
    71e6:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    71e8:	15 82       	std	Z+5, r1	; 0x05
    71ea:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    71ec:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
    71ee:	0e 94 d8 38 	call	0x71b0	; 0x71b0 <_ZN6StringaSERKS_>
}
    71f2:	08 95       	ret

000071f4 <_ZN6StringD1Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    71f4:	fc 01       	movw	r30, r24
{
	free(buffer);
    71f6:	80 81       	ld	r24, Z
    71f8:	91 81       	ldd	r25, Z+1	; 0x01
    71fa:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <free>
}
    71fe:	08 95       	ret

00007200 <_ZN6StringD2Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    7200:	fc 01       	movw	r30, r24
{
	free(buffer);
    7202:	80 81       	ld	r24, Z
    7204:	91 81       	ldd	r25, Z+1	; 0x01
    7206:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <free>
}
    720a:	08 95       	ret

0000720c <realloc>:
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
    720c:	6f 92       	push	r6
    720e:	7f 92       	push	r7
    7210:	8f 92       	push	r8
    7212:	9f 92       	push	r9
    7214:	af 92       	push	r10
    7216:	bf 92       	push	r11
    7218:	cf 92       	push	r12
    721a:	df 92       	push	r13
    721c:	ef 92       	push	r14
    721e:	ff 92       	push	r15
    7220:	0f 93       	push	r16
    7222:	1f 93       	push	r17
    7224:	cf 93       	push	r28
    7226:	df 93       	push	r29
    7228:	8c 01       	movw	r16, r24
    722a:	00 97       	sbiw	r24, 0x00	; 0
    722c:	29 f4       	brne	.+10     	; 0x7238 <realloc+0x2c>
		return malloc(len);
    722e:	cb 01       	movw	r24, r22
    7230:	0e 94 b5 2e 	call	0x5d6a	; 0x5d6a <malloc>
    7234:	8c 01       	movw	r16, r24
    7236:	bb c0       	rjmp	.+374    	; 0x73ae <realloc+0x1a2>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
    7238:	8e ef       	ldi	r24, 0xFE	; 254
    723a:	e8 2e       	mov	r14, r24
    723c:	8f ef       	ldi	r24, 0xFF	; 255
    723e:	f8 2e       	mov	r15, r24
    7240:	e0 0e       	add	r14, r16
    7242:	f1 1e       	adc	r15, r17
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
    7244:	48 01       	movw	r8, r16
    7246:	86 0e       	add	r8, r22
    7248:	97 1e       	adc	r9, r23
	if (cp < cp1)
    724a:	8e 14       	cp	r8, r14
    724c:	9f 04       	cpc	r9, r15
    724e:	08 f4       	brcc	.+2      	; 0x7252 <realloc+0x46>
    7250:	ac c0       	rjmp	.+344    	; 0x73aa <realloc+0x19e>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
    7252:	d7 01       	movw	r26, r14
    7254:	4d 91       	ld	r20, X+
    7256:	5c 91       	ld	r21, X
    7258:	11 97       	sbiw	r26, 0x01	; 1
    725a:	46 17       	cp	r20, r22
    725c:	57 07       	cpc	r21, r23
    725e:	b8 f0       	brcs	.+46     	; 0x728e <realloc+0x82>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    7260:	45 30       	cpi	r20, 0x05	; 5
    7262:	51 05       	cpc	r21, r1
    7264:	08 f4       	brcc	.+2      	; 0x7268 <realloc+0x5c>
    7266:	a3 c0       	rjmp	.+326    	; 0x73ae <realloc+0x1a2>
    7268:	ca 01       	movw	r24, r20
    726a:	04 97       	sbiw	r24, 0x04	; 4
    726c:	86 17       	cp	r24, r22
    726e:	97 07       	cpc	r25, r23
    7270:	08 f4       	brcc	.+2      	; 0x7274 <realloc+0x68>
    7272:	9d c0       	rjmp	.+314    	; 0x73ae <realloc+0x1a2>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
    7274:	42 50       	subi	r20, 0x02	; 2
    7276:	50 40       	sbci	r21, 0x00	; 0
    7278:	46 1b       	sub	r20, r22
    727a:	57 0b       	sbc	r21, r23
    727c:	f4 01       	movw	r30, r8
    727e:	41 93       	st	Z+, r20
    7280:	51 93       	st	Z+, r21
		fp1->sz = len;
    7282:	6d 93       	st	X+, r22
    7284:	7c 93       	st	X, r23
		free(&(fp2->nx));
    7286:	cf 01       	movw	r24, r30
    7288:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <free>
    728c:	90 c0       	rjmp	.+288    	; 0x73ae <realloc+0x1a2>

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
    728e:	5b 01       	movw	r10, r22
    7290:	a4 1a       	sub	r10, r20
    7292:	b5 0a       	sbc	r11, r21
	cp = (char *)ptr + fp1->sz;
    7294:	38 01       	movw	r6, r16
    7296:	64 0e       	add	r6, r20
    7298:	75 1e       	adc	r7, r21
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
    729a:	a0 91 e2 03 	lds	r26, 0x03E2
    729e:	b0 91 e3 03 	lds	r27, 0x03E3
    72a2:	cc 24       	eor	r12, r12
    72a4:	dd 24       	eor	r13, r13
    72a6:	e0 e0       	ldi	r30, 0x00	; 0
    72a8:	f0 e0       	ldi	r31, 0x00	; 0
    72aa:	47 c0       	rjmp	.+142    	; 0x733a <realloc+0x12e>
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
    72ac:	a6 15       	cp	r26, r6
    72ae:	b7 05       	cpc	r27, r7
    72b0:	a9 f5       	brne	.+106    	; 0x731c <realloc+0x110>
    72b2:	cd 91       	ld	r28, X+
    72b4:	dc 91       	ld	r29, X
    72b6:	11 97       	sbiw	r26, 0x01	; 1
    72b8:	ce 01       	movw	r24, r28
    72ba:	02 96       	adiw	r24, 0x02	; 2
    72bc:	8a 15       	cp	r24, r10
    72be:	9b 05       	cpc	r25, r11
    72c0:	68 f1       	brcs	.+90     	; 0x731c <realloc+0x110>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
    72c2:	ce 01       	movw	r24, r28
    72c4:	8a 19       	sub	r24, r10
    72c6:	9b 09       	sbc	r25, r11
    72c8:	02 96       	adiw	r24, 0x02	; 2
    72ca:	12 96       	adiw	r26, 0x02	; 2
    72cc:	2c 91       	ld	r18, X
    72ce:	12 97       	sbiw	r26, 0x02	; 2
    72d0:	13 96       	adiw	r26, 0x03	; 3
    72d2:	3c 91       	ld	r19, X
    72d4:	05 97       	sbiw	r24, 0x05	; 5
    72d6:	58 f0       	brcs	.+22     	; 0x72ee <realloc+0xe2>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
    72d8:	f4 01       	movw	r30, r8
				fp2->nx = fp3->nx;
    72da:	22 83       	std	Z+2, r18	; 0x02
    72dc:	33 83       	std	Z+3, r19	; 0x03
				fp2->sz = fp3->sz - incr;
    72de:	ca 19       	sub	r28, r10
    72e0:	db 09       	sbc	r29, r11
    72e2:	d1 83       	std	Z+1, r29	; 0x01
    72e4:	c0 83       	st	Z, r28
				fp1->sz = len;
    72e6:	d7 01       	movw	r26, r14
    72e8:	6d 93       	st	X+, r22
    72ea:	7c 93       	st	X, r23
    72ec:	09 c0       	rjmp	.+18     	; 0x7300 <realloc+0xf4>
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
    72ee:	4e 5f       	subi	r20, 0xFE	; 254
    72f0:	5f 4f       	sbci	r21, 0xFF	; 255
    72f2:	4c 0f       	add	r20, r28
    72f4:	5d 1f       	adc	r21, r29
    72f6:	f7 01       	movw	r30, r14
    72f8:	51 83       	std	Z+1, r21	; 0x01
    72fa:	40 83       	st	Z, r20
				fp2 = fp3->nx;
    72fc:	c9 01       	movw	r24, r18
    72fe:	fc 01       	movw	r30, r24
			}
			if (ofp3)
    7300:	c1 14       	cp	r12, r1
    7302:	d1 04       	cpc	r13, r1
    7304:	31 f0       	breq	.+12     	; 0x7312 <realloc+0x106>
				ofp3->nx = fp2;
    7306:	d6 01       	movw	r26, r12
    7308:	13 96       	adiw	r26, 0x03	; 3
    730a:	fc 93       	st	X, r31
    730c:	ee 93       	st	-X, r30
    730e:	12 97       	sbiw	r26, 0x02	; 2
    7310:	4e c0       	rjmp	.+156    	; 0x73ae <realloc+0x1a2>
			else
				__flp = fp2;
    7312:	f0 93 e3 03 	sts	0x03E3, r31
    7316:	e0 93 e2 03 	sts	0x03E2, r30
    731a:	49 c0       	rjmp	.+146    	; 0x73ae <realloc+0x1a2>
    731c:	8d 91       	ld	r24, X+
    731e:	9c 91       	ld	r25, X
    7320:	11 97       	sbiw	r26, 0x01	; 1
    7322:	e8 17       	cp	r30, r24
    7324:	f9 07       	cpc	r31, r25
    7326:	08 f4       	brcc	.+2      	; 0x732a <realloc+0x11e>
    7328:	fc 01       	movw	r30, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
    732a:	6d 01       	movw	r12, r26
    732c:	12 96       	adiw	r26, 0x02	; 2
    732e:	8c 91       	ld	r24, X
    7330:	12 97       	sbiw	r26, 0x02	; 2
    7332:	13 96       	adiw	r26, 0x03	; 3
    7334:	9c 91       	ld	r25, X
    7336:	9c 01       	movw	r18, r24
    7338:	d9 01       	movw	r26, r18
	 */
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
    733a:	10 97       	sbiw	r26, 0x00	; 0
    733c:	09 f0       	breq	.+2      	; 0x7340 <realloc+0x134>
    733e:	b6 cf       	rjmp	.-148    	; 0x72ac <realloc+0xa0>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
    7340:	80 91 e0 03 	lds	r24, 0x03E0
    7344:	90 91 e1 03 	lds	r25, 0x03E1
    7348:	86 15       	cp	r24, r6
    734a:	97 05       	cpc	r25, r7
    734c:	e9 f4       	brne	.+58     	; 0x7388 <realloc+0x17c>
    734e:	e6 17       	cp	r30, r22
    7350:	f7 07       	cpc	r31, r23
    7352:	d0 f4       	brcc	.+52     	; 0x7388 <realloc+0x17c>
		cp1 = __malloc_heap_end;
    7354:	20 91 0e 01 	lds	r18, 0x010E
    7358:	30 91 0f 01 	lds	r19, 0x010F
		cp = (char *)ptr + len;
		if (cp1 == 0)
    735c:	21 15       	cp	r18, r1
    735e:	31 05       	cpc	r19, r1
    7360:	41 f4       	brne	.+16     	; 0x7372 <realloc+0x166>
			cp1 = STACK_POINTER() - __malloc_margin;
    7362:	2d b7       	in	r18, 0x3d	; 61
    7364:	3e b7       	in	r19, 0x3e	; 62
    7366:	80 91 0a 01 	lds	r24, 0x010A
    736a:	90 91 0b 01 	lds	r25, 0x010B
    736e:	28 1b       	sub	r18, r24
    7370:	39 0b       	sbc	r19, r25
		if (cp < cp1) {
    7372:	82 16       	cp	r8, r18
    7374:	93 06       	cpc	r9, r19
    7376:	c8 f4       	brcc	.+50     	; 0x73aa <realloc+0x19e>
			__brkval = cp;
    7378:	90 92 e1 03 	sts	0x03E1, r9
    737c:	80 92 e0 03 	sts	0x03E0, r8
			fp1->sz = len;
    7380:	f7 01       	movw	r30, r14
    7382:	71 83       	std	Z+1, r23	; 0x01
    7384:	60 83       	st	Z, r22
    7386:	13 c0       	rjmp	.+38     	; 0x73ae <realloc+0x1a2>

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
    7388:	cb 01       	movw	r24, r22
    738a:	0e 94 b5 2e 	call	0x5d6a	; 0x5d6a <malloc>
    738e:	ec 01       	movw	r28, r24
    7390:	00 97       	sbiw	r24, 0x00	; 0
    7392:	59 f0       	breq	.+22     	; 0x73aa <realloc+0x19e>
		return 0;
	memcpy(memp, ptr, fp1->sz);
    7394:	d7 01       	movw	r26, r14
    7396:	4d 91       	ld	r20, X+
    7398:	5c 91       	ld	r21, X
    739a:	b8 01       	movw	r22, r16
    739c:	0e 94 50 05 	call	0xaa0	; 0xaa0 <memcpy>
	free(ptr);
    73a0:	c8 01       	movw	r24, r16
    73a2:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <free>
    73a6:	8e 01       	movw	r16, r28
    73a8:	02 c0       	rjmp	.+4      	; 0x73ae <realloc+0x1a2>
	return memp;
    73aa:	00 e0       	ldi	r16, 0x00	; 0
    73ac:	10 e0       	ldi	r17, 0x00	; 0
}
    73ae:	c8 01       	movw	r24, r16
    73b0:	df 91       	pop	r29
    73b2:	cf 91       	pop	r28
    73b4:	1f 91       	pop	r17
    73b6:	0f 91       	pop	r16
    73b8:	ff 90       	pop	r15
    73ba:	ef 90       	pop	r14
    73bc:	df 90       	pop	r13
    73be:	cf 90       	pop	r12
    73c0:	bf 90       	pop	r11
    73c2:	af 90       	pop	r10
    73c4:	9f 90       	pop	r9
    73c6:	8f 90       	pop	r8
    73c8:	7f 90       	pop	r7
    73ca:	6f 90       	pop	r6
    73cc:	08 95       	ret

000073ce <__subsf3>:
    73ce:	50 58       	subi	r21, 0x80	; 128

000073d0 <__addsf3>:
    73d0:	bb 27       	eor	r27, r27
    73d2:	aa 27       	eor	r26, r26
    73d4:	0e d0       	rcall	.+28     	; 0x73f2 <__addsf3x>
    73d6:	75 c1       	rjmp	.+746    	; 0x76c2 <__fp_round>
    73d8:	66 d1       	rcall	.+716    	; 0x76a6 <__fp_pscA>
    73da:	30 f0       	brcs	.+12     	; 0x73e8 <__addsf3+0x18>
    73dc:	6b d1       	rcall	.+726    	; 0x76b4 <__fp_pscB>
    73de:	20 f0       	brcs	.+8      	; 0x73e8 <__addsf3+0x18>
    73e0:	31 f4       	brne	.+12     	; 0x73ee <__addsf3+0x1e>
    73e2:	9f 3f       	cpi	r25, 0xFF	; 255
    73e4:	11 f4       	brne	.+4      	; 0x73ea <__addsf3+0x1a>
    73e6:	1e f4       	brtc	.+6      	; 0x73ee <__addsf3+0x1e>
    73e8:	5b c1       	rjmp	.+694    	; 0x76a0 <__fp_nan>
    73ea:	0e f4       	brtc	.+2      	; 0x73ee <__addsf3+0x1e>
    73ec:	e0 95       	com	r30
    73ee:	e7 fb       	bst	r30, 7
    73f0:	51 c1       	rjmp	.+674    	; 0x7694 <__fp_inf>

000073f2 <__addsf3x>:
    73f2:	e9 2f       	mov	r30, r25
    73f4:	77 d1       	rcall	.+750    	; 0x76e4 <__fp_split3>
    73f6:	80 f3       	brcs	.-32     	; 0x73d8 <__addsf3+0x8>
    73f8:	ba 17       	cp	r27, r26
    73fa:	62 07       	cpc	r22, r18
    73fc:	73 07       	cpc	r23, r19
    73fe:	84 07       	cpc	r24, r20
    7400:	95 07       	cpc	r25, r21
    7402:	18 f0       	brcs	.+6      	; 0x740a <__addsf3x+0x18>
    7404:	71 f4       	brne	.+28     	; 0x7422 <__addsf3x+0x30>
    7406:	9e f5       	brtc	.+102    	; 0x746e <__addsf3x+0x7c>
    7408:	8f c1       	rjmp	.+798    	; 0x7728 <__fp_zero>
    740a:	0e f4       	brtc	.+2      	; 0x740e <__addsf3x+0x1c>
    740c:	e0 95       	com	r30
    740e:	0b 2e       	mov	r0, r27
    7410:	ba 2f       	mov	r27, r26
    7412:	a0 2d       	mov	r26, r0
    7414:	0b 01       	movw	r0, r22
    7416:	b9 01       	movw	r22, r18
    7418:	90 01       	movw	r18, r0
    741a:	0c 01       	movw	r0, r24
    741c:	ca 01       	movw	r24, r20
    741e:	a0 01       	movw	r20, r0
    7420:	11 24       	eor	r1, r1
    7422:	ff 27       	eor	r31, r31
    7424:	59 1b       	sub	r21, r25
    7426:	99 f0       	breq	.+38     	; 0x744e <__addsf3x+0x5c>
    7428:	59 3f       	cpi	r21, 0xF9	; 249
    742a:	50 f4       	brcc	.+20     	; 0x7440 <__addsf3x+0x4e>
    742c:	50 3e       	cpi	r21, 0xE0	; 224
    742e:	68 f1       	brcs	.+90     	; 0x748a <__addsf3x+0x98>
    7430:	1a 16       	cp	r1, r26
    7432:	f0 40       	sbci	r31, 0x00	; 0
    7434:	a2 2f       	mov	r26, r18
    7436:	23 2f       	mov	r18, r19
    7438:	34 2f       	mov	r19, r20
    743a:	44 27       	eor	r20, r20
    743c:	58 5f       	subi	r21, 0xF8	; 248
    743e:	f3 cf       	rjmp	.-26     	; 0x7426 <__addsf3x+0x34>
    7440:	46 95       	lsr	r20
    7442:	37 95       	ror	r19
    7444:	27 95       	ror	r18
    7446:	a7 95       	ror	r26
    7448:	f0 40       	sbci	r31, 0x00	; 0
    744a:	53 95       	inc	r21
    744c:	c9 f7       	brne	.-14     	; 0x7440 <__addsf3x+0x4e>
    744e:	7e f4       	brtc	.+30     	; 0x746e <__addsf3x+0x7c>
    7450:	1f 16       	cp	r1, r31
    7452:	ba 0b       	sbc	r27, r26
    7454:	62 0b       	sbc	r22, r18
    7456:	73 0b       	sbc	r23, r19
    7458:	84 0b       	sbc	r24, r20
    745a:	ba f0       	brmi	.+46     	; 0x748a <__addsf3x+0x98>
    745c:	91 50       	subi	r25, 0x01	; 1
    745e:	a1 f0       	breq	.+40     	; 0x7488 <__addsf3x+0x96>
    7460:	ff 0f       	add	r31, r31
    7462:	bb 1f       	adc	r27, r27
    7464:	66 1f       	adc	r22, r22
    7466:	77 1f       	adc	r23, r23
    7468:	88 1f       	adc	r24, r24
    746a:	c2 f7       	brpl	.-16     	; 0x745c <__addsf3x+0x6a>
    746c:	0e c0       	rjmp	.+28     	; 0x748a <__addsf3x+0x98>
    746e:	ba 0f       	add	r27, r26
    7470:	62 1f       	adc	r22, r18
    7472:	73 1f       	adc	r23, r19
    7474:	84 1f       	adc	r24, r20
    7476:	48 f4       	brcc	.+18     	; 0x748a <__addsf3x+0x98>
    7478:	87 95       	ror	r24
    747a:	77 95       	ror	r23
    747c:	67 95       	ror	r22
    747e:	b7 95       	ror	r27
    7480:	f7 95       	ror	r31
    7482:	9e 3f       	cpi	r25, 0xFE	; 254
    7484:	08 f0       	brcs	.+2      	; 0x7488 <__addsf3x+0x96>
    7486:	b3 cf       	rjmp	.-154    	; 0x73ee <__addsf3+0x1e>
    7488:	93 95       	inc	r25
    748a:	88 0f       	add	r24, r24
    748c:	08 f0       	brcs	.+2      	; 0x7490 <__addsf3x+0x9e>
    748e:	99 27       	eor	r25, r25
    7490:	ee 0f       	add	r30, r30
    7492:	97 95       	ror	r25
    7494:	87 95       	ror	r24
    7496:	08 95       	ret

00007498 <__cmpsf2>:
    7498:	d9 d0       	rcall	.+434    	; 0x764c <__fp_cmp>
    749a:	08 f4       	brcc	.+2      	; 0x749e <__cmpsf2+0x6>
    749c:	81 e0       	ldi	r24, 0x01	; 1
    749e:	08 95       	ret

000074a0 <__divsf3>:
    74a0:	0c d0       	rcall	.+24     	; 0x74ba <__divsf3x>
    74a2:	0f c1       	rjmp	.+542    	; 0x76c2 <__fp_round>
    74a4:	07 d1       	rcall	.+526    	; 0x76b4 <__fp_pscB>
    74a6:	40 f0       	brcs	.+16     	; 0x74b8 <__divsf3+0x18>
    74a8:	fe d0       	rcall	.+508    	; 0x76a6 <__fp_pscA>
    74aa:	30 f0       	brcs	.+12     	; 0x74b8 <__divsf3+0x18>
    74ac:	21 f4       	brne	.+8      	; 0x74b6 <__divsf3+0x16>
    74ae:	5f 3f       	cpi	r21, 0xFF	; 255
    74b0:	19 f0       	breq	.+6      	; 0x74b8 <__divsf3+0x18>
    74b2:	f0 c0       	rjmp	.+480    	; 0x7694 <__fp_inf>
    74b4:	51 11       	cpse	r21, r1
    74b6:	39 c1       	rjmp	.+626    	; 0x772a <__fp_szero>
    74b8:	f3 c0       	rjmp	.+486    	; 0x76a0 <__fp_nan>

000074ba <__divsf3x>:
    74ba:	14 d1       	rcall	.+552    	; 0x76e4 <__fp_split3>
    74bc:	98 f3       	brcs	.-26     	; 0x74a4 <__divsf3+0x4>

000074be <__divsf3_pse>:
    74be:	99 23       	and	r25, r25
    74c0:	c9 f3       	breq	.-14     	; 0x74b4 <__divsf3+0x14>
    74c2:	55 23       	and	r21, r21
    74c4:	b1 f3       	breq	.-20     	; 0x74b2 <__divsf3+0x12>
    74c6:	95 1b       	sub	r25, r21
    74c8:	55 0b       	sbc	r21, r21
    74ca:	bb 27       	eor	r27, r27
    74cc:	aa 27       	eor	r26, r26
    74ce:	62 17       	cp	r22, r18
    74d0:	73 07       	cpc	r23, r19
    74d2:	84 07       	cpc	r24, r20
    74d4:	38 f0       	brcs	.+14     	; 0x74e4 <__divsf3_pse+0x26>
    74d6:	9f 5f       	subi	r25, 0xFF	; 255
    74d8:	5f 4f       	sbci	r21, 0xFF	; 255
    74da:	22 0f       	add	r18, r18
    74dc:	33 1f       	adc	r19, r19
    74de:	44 1f       	adc	r20, r20
    74e0:	aa 1f       	adc	r26, r26
    74e2:	a9 f3       	breq	.-22     	; 0x74ce <__divsf3_pse+0x10>
    74e4:	33 d0       	rcall	.+102    	; 0x754c <__divsf3_pse+0x8e>
    74e6:	0e 2e       	mov	r0, r30
    74e8:	3a f0       	brmi	.+14     	; 0x74f8 <__divsf3_pse+0x3a>
    74ea:	e0 e8       	ldi	r30, 0x80	; 128
    74ec:	30 d0       	rcall	.+96     	; 0x754e <__divsf3_pse+0x90>
    74ee:	91 50       	subi	r25, 0x01	; 1
    74f0:	50 40       	sbci	r21, 0x00	; 0
    74f2:	e6 95       	lsr	r30
    74f4:	00 1c       	adc	r0, r0
    74f6:	ca f7       	brpl	.-14     	; 0x74ea <__divsf3_pse+0x2c>
    74f8:	29 d0       	rcall	.+82     	; 0x754c <__divsf3_pse+0x8e>
    74fa:	fe 2f       	mov	r31, r30
    74fc:	27 d0       	rcall	.+78     	; 0x754c <__divsf3_pse+0x8e>
    74fe:	66 0f       	add	r22, r22
    7500:	77 1f       	adc	r23, r23
    7502:	88 1f       	adc	r24, r24
    7504:	bb 1f       	adc	r27, r27
    7506:	26 17       	cp	r18, r22
    7508:	37 07       	cpc	r19, r23
    750a:	48 07       	cpc	r20, r24
    750c:	ab 07       	cpc	r26, r27
    750e:	b0 e8       	ldi	r27, 0x80	; 128
    7510:	09 f0       	breq	.+2      	; 0x7514 <__divsf3_pse+0x56>
    7512:	bb 0b       	sbc	r27, r27
    7514:	80 2d       	mov	r24, r0
    7516:	bf 01       	movw	r22, r30
    7518:	ff 27       	eor	r31, r31
    751a:	93 58       	subi	r25, 0x83	; 131
    751c:	5f 4f       	sbci	r21, 0xFF	; 255
    751e:	2a f0       	brmi	.+10     	; 0x752a <__divsf3_pse+0x6c>
    7520:	9e 3f       	cpi	r25, 0xFE	; 254
    7522:	51 05       	cpc	r21, r1
    7524:	68 f0       	brcs	.+26     	; 0x7540 <__divsf3_pse+0x82>
    7526:	b6 c0       	rjmp	.+364    	; 0x7694 <__fp_inf>
    7528:	00 c1       	rjmp	.+512    	; 0x772a <__fp_szero>
    752a:	5f 3f       	cpi	r21, 0xFF	; 255
    752c:	ec f3       	brlt	.-6      	; 0x7528 <__divsf3_pse+0x6a>
    752e:	98 3e       	cpi	r25, 0xE8	; 232
    7530:	dc f3       	brlt	.-10     	; 0x7528 <__divsf3_pse+0x6a>
    7532:	86 95       	lsr	r24
    7534:	77 95       	ror	r23
    7536:	67 95       	ror	r22
    7538:	b7 95       	ror	r27
    753a:	f7 95       	ror	r31
    753c:	9f 5f       	subi	r25, 0xFF	; 255
    753e:	c9 f7       	brne	.-14     	; 0x7532 <__divsf3_pse+0x74>
    7540:	88 0f       	add	r24, r24
    7542:	91 1d       	adc	r25, r1
    7544:	96 95       	lsr	r25
    7546:	87 95       	ror	r24
    7548:	97 f9       	bld	r25, 7
    754a:	08 95       	ret
    754c:	e1 e0       	ldi	r30, 0x01	; 1
    754e:	66 0f       	add	r22, r22
    7550:	77 1f       	adc	r23, r23
    7552:	88 1f       	adc	r24, r24
    7554:	bb 1f       	adc	r27, r27
    7556:	62 17       	cp	r22, r18
    7558:	73 07       	cpc	r23, r19
    755a:	84 07       	cpc	r24, r20
    755c:	ba 07       	cpc	r27, r26
    755e:	20 f0       	brcs	.+8      	; 0x7568 <__divsf3_pse+0xaa>
    7560:	62 1b       	sub	r22, r18
    7562:	73 0b       	sbc	r23, r19
    7564:	84 0b       	sbc	r24, r20
    7566:	ba 0b       	sbc	r27, r26
    7568:	ee 1f       	adc	r30, r30
    756a:	88 f7       	brcc	.-30     	; 0x754e <__divsf3_pse+0x90>
    756c:	e0 95       	com	r30
    756e:	08 95       	ret

00007570 <__fixsfsi>:
    7570:	04 d0       	rcall	.+8      	; 0x757a <__fixunssfsi>
    7572:	68 94       	set
    7574:	b1 11       	cpse	r27, r1
    7576:	d9 c0       	rjmp	.+434    	; 0x772a <__fp_szero>
    7578:	08 95       	ret

0000757a <__fixunssfsi>:
    757a:	bc d0       	rcall	.+376    	; 0x76f4 <__fp_splitA>
    757c:	88 f0       	brcs	.+34     	; 0x75a0 <__fixunssfsi+0x26>
    757e:	9f 57       	subi	r25, 0x7F	; 127
    7580:	90 f0       	brcs	.+36     	; 0x75a6 <__fixunssfsi+0x2c>
    7582:	b9 2f       	mov	r27, r25
    7584:	99 27       	eor	r25, r25
    7586:	b7 51       	subi	r27, 0x17	; 23
    7588:	a0 f0       	brcs	.+40     	; 0x75b2 <__fixunssfsi+0x38>
    758a:	d1 f0       	breq	.+52     	; 0x75c0 <__fixunssfsi+0x46>
    758c:	66 0f       	add	r22, r22
    758e:	77 1f       	adc	r23, r23
    7590:	88 1f       	adc	r24, r24
    7592:	99 1f       	adc	r25, r25
    7594:	1a f0       	brmi	.+6      	; 0x759c <__fixunssfsi+0x22>
    7596:	ba 95       	dec	r27
    7598:	c9 f7       	brne	.-14     	; 0x758c <__fixunssfsi+0x12>
    759a:	12 c0       	rjmp	.+36     	; 0x75c0 <__fixunssfsi+0x46>
    759c:	b1 30       	cpi	r27, 0x01	; 1
    759e:	81 f0       	breq	.+32     	; 0x75c0 <__fixunssfsi+0x46>
    75a0:	c3 d0       	rcall	.+390    	; 0x7728 <__fp_zero>
    75a2:	b1 e0       	ldi	r27, 0x01	; 1
    75a4:	08 95       	ret
    75a6:	c0 c0       	rjmp	.+384    	; 0x7728 <__fp_zero>
    75a8:	67 2f       	mov	r22, r23
    75aa:	78 2f       	mov	r23, r24
    75ac:	88 27       	eor	r24, r24
    75ae:	b8 5f       	subi	r27, 0xF8	; 248
    75b0:	39 f0       	breq	.+14     	; 0x75c0 <__fixunssfsi+0x46>
    75b2:	b9 3f       	cpi	r27, 0xF9	; 249
    75b4:	cc f3       	brlt	.-14     	; 0x75a8 <__fixunssfsi+0x2e>
    75b6:	86 95       	lsr	r24
    75b8:	77 95       	ror	r23
    75ba:	67 95       	ror	r22
    75bc:	b3 95       	inc	r27
    75be:	d9 f7       	brne	.-10     	; 0x75b6 <__fixunssfsi+0x3c>
    75c0:	3e f4       	brtc	.+14     	; 0x75d0 <__fixunssfsi+0x56>
    75c2:	90 95       	com	r25
    75c4:	80 95       	com	r24
    75c6:	70 95       	com	r23
    75c8:	61 95       	neg	r22
    75ca:	7f 4f       	sbci	r23, 0xFF	; 255
    75cc:	8f 4f       	sbci	r24, 0xFF	; 255
    75ce:	9f 4f       	sbci	r25, 0xFF	; 255
    75d0:	08 95       	ret

000075d2 <__floatunsisf>:
    75d2:	e8 94       	clt
    75d4:	09 c0       	rjmp	.+18     	; 0x75e8 <__floatsisf+0x12>

000075d6 <__floatsisf>:
    75d6:	97 fb       	bst	r25, 7
    75d8:	3e f4       	brtc	.+14     	; 0x75e8 <__floatsisf+0x12>
    75da:	90 95       	com	r25
    75dc:	80 95       	com	r24
    75de:	70 95       	com	r23
    75e0:	61 95       	neg	r22
    75e2:	7f 4f       	sbci	r23, 0xFF	; 255
    75e4:	8f 4f       	sbci	r24, 0xFF	; 255
    75e6:	9f 4f       	sbci	r25, 0xFF	; 255
    75e8:	99 23       	and	r25, r25
    75ea:	a9 f0       	breq	.+42     	; 0x7616 <__floatsisf+0x40>
    75ec:	f9 2f       	mov	r31, r25
    75ee:	96 e9       	ldi	r25, 0x96	; 150
    75f0:	bb 27       	eor	r27, r27
    75f2:	93 95       	inc	r25
    75f4:	f6 95       	lsr	r31
    75f6:	87 95       	ror	r24
    75f8:	77 95       	ror	r23
    75fa:	67 95       	ror	r22
    75fc:	b7 95       	ror	r27
    75fe:	f1 11       	cpse	r31, r1
    7600:	f8 cf       	rjmp	.-16     	; 0x75f2 <__floatsisf+0x1c>
    7602:	fa f4       	brpl	.+62     	; 0x7642 <__floatsisf+0x6c>
    7604:	bb 0f       	add	r27, r27
    7606:	11 f4       	brne	.+4      	; 0x760c <__floatsisf+0x36>
    7608:	60 ff       	sbrs	r22, 0
    760a:	1b c0       	rjmp	.+54     	; 0x7642 <__floatsisf+0x6c>
    760c:	6f 5f       	subi	r22, 0xFF	; 255
    760e:	7f 4f       	sbci	r23, 0xFF	; 255
    7610:	8f 4f       	sbci	r24, 0xFF	; 255
    7612:	9f 4f       	sbci	r25, 0xFF	; 255
    7614:	16 c0       	rjmp	.+44     	; 0x7642 <__floatsisf+0x6c>
    7616:	88 23       	and	r24, r24
    7618:	11 f0       	breq	.+4      	; 0x761e <__floatsisf+0x48>
    761a:	96 e9       	ldi	r25, 0x96	; 150
    761c:	11 c0       	rjmp	.+34     	; 0x7640 <__floatsisf+0x6a>
    761e:	77 23       	and	r23, r23
    7620:	21 f0       	breq	.+8      	; 0x762a <__floatsisf+0x54>
    7622:	9e e8       	ldi	r25, 0x8E	; 142
    7624:	87 2f       	mov	r24, r23
    7626:	76 2f       	mov	r23, r22
    7628:	05 c0       	rjmp	.+10     	; 0x7634 <__floatsisf+0x5e>
    762a:	66 23       	and	r22, r22
    762c:	71 f0       	breq	.+28     	; 0x764a <__floatsisf+0x74>
    762e:	96 e8       	ldi	r25, 0x86	; 134
    7630:	86 2f       	mov	r24, r22
    7632:	70 e0       	ldi	r23, 0x00	; 0
    7634:	60 e0       	ldi	r22, 0x00	; 0
    7636:	2a f0       	brmi	.+10     	; 0x7642 <__floatsisf+0x6c>
    7638:	9a 95       	dec	r25
    763a:	66 0f       	add	r22, r22
    763c:	77 1f       	adc	r23, r23
    763e:	88 1f       	adc	r24, r24
    7640:	da f7       	brpl	.-10     	; 0x7638 <__floatsisf+0x62>
    7642:	88 0f       	add	r24, r24
    7644:	96 95       	lsr	r25
    7646:	87 95       	ror	r24
    7648:	97 f9       	bld	r25, 7
    764a:	08 95       	ret

0000764c <__fp_cmp>:
    764c:	99 0f       	add	r25, r25
    764e:	00 08       	sbc	r0, r0
    7650:	55 0f       	add	r21, r21
    7652:	aa 0b       	sbc	r26, r26
    7654:	e0 e8       	ldi	r30, 0x80	; 128
    7656:	fe ef       	ldi	r31, 0xFE	; 254
    7658:	16 16       	cp	r1, r22
    765a:	17 06       	cpc	r1, r23
    765c:	e8 07       	cpc	r30, r24
    765e:	f9 07       	cpc	r31, r25
    7660:	c0 f0       	brcs	.+48     	; 0x7692 <__fp_cmp+0x46>
    7662:	12 16       	cp	r1, r18
    7664:	13 06       	cpc	r1, r19
    7666:	e4 07       	cpc	r30, r20
    7668:	f5 07       	cpc	r31, r21
    766a:	98 f0       	brcs	.+38     	; 0x7692 <__fp_cmp+0x46>
    766c:	62 1b       	sub	r22, r18
    766e:	73 0b       	sbc	r23, r19
    7670:	84 0b       	sbc	r24, r20
    7672:	95 0b       	sbc	r25, r21
    7674:	39 f4       	brne	.+14     	; 0x7684 <__fp_cmp+0x38>
    7676:	0a 26       	eor	r0, r26
    7678:	61 f0       	breq	.+24     	; 0x7692 <__fp_cmp+0x46>
    767a:	23 2b       	or	r18, r19
    767c:	24 2b       	or	r18, r20
    767e:	25 2b       	or	r18, r21
    7680:	21 f4       	brne	.+8      	; 0x768a <__fp_cmp+0x3e>
    7682:	08 95       	ret
    7684:	0a 26       	eor	r0, r26
    7686:	09 f4       	brne	.+2      	; 0x768a <__fp_cmp+0x3e>
    7688:	a1 40       	sbci	r26, 0x01	; 1
    768a:	a6 95       	lsr	r26
    768c:	8f ef       	ldi	r24, 0xFF	; 255
    768e:	81 1d       	adc	r24, r1
    7690:	81 1d       	adc	r24, r1
    7692:	08 95       	ret

00007694 <__fp_inf>:
    7694:	97 f9       	bld	r25, 7
    7696:	9f 67       	ori	r25, 0x7F	; 127
    7698:	80 e8       	ldi	r24, 0x80	; 128
    769a:	70 e0       	ldi	r23, 0x00	; 0
    769c:	60 e0       	ldi	r22, 0x00	; 0
    769e:	08 95       	ret

000076a0 <__fp_nan>:
    76a0:	9f ef       	ldi	r25, 0xFF	; 255
    76a2:	80 ec       	ldi	r24, 0xC0	; 192
    76a4:	08 95       	ret

000076a6 <__fp_pscA>:
    76a6:	00 24       	eor	r0, r0
    76a8:	0a 94       	dec	r0
    76aa:	16 16       	cp	r1, r22
    76ac:	17 06       	cpc	r1, r23
    76ae:	18 06       	cpc	r1, r24
    76b0:	09 06       	cpc	r0, r25
    76b2:	08 95       	ret

000076b4 <__fp_pscB>:
    76b4:	00 24       	eor	r0, r0
    76b6:	0a 94       	dec	r0
    76b8:	12 16       	cp	r1, r18
    76ba:	13 06       	cpc	r1, r19
    76bc:	14 06       	cpc	r1, r20
    76be:	05 06       	cpc	r0, r21
    76c0:	08 95       	ret

000076c2 <__fp_round>:
    76c2:	09 2e       	mov	r0, r25
    76c4:	03 94       	inc	r0
    76c6:	00 0c       	add	r0, r0
    76c8:	11 f4       	brne	.+4      	; 0x76ce <__fp_round+0xc>
    76ca:	88 23       	and	r24, r24
    76cc:	52 f0       	brmi	.+20     	; 0x76e2 <__fp_round+0x20>
    76ce:	bb 0f       	add	r27, r27
    76d0:	40 f4       	brcc	.+16     	; 0x76e2 <__fp_round+0x20>
    76d2:	bf 2b       	or	r27, r31
    76d4:	11 f4       	brne	.+4      	; 0x76da <__fp_round+0x18>
    76d6:	60 ff       	sbrs	r22, 0
    76d8:	04 c0       	rjmp	.+8      	; 0x76e2 <__fp_round+0x20>
    76da:	6f 5f       	subi	r22, 0xFF	; 255
    76dc:	7f 4f       	sbci	r23, 0xFF	; 255
    76de:	8f 4f       	sbci	r24, 0xFF	; 255
    76e0:	9f 4f       	sbci	r25, 0xFF	; 255
    76e2:	08 95       	ret

000076e4 <__fp_split3>:
    76e4:	57 fd       	sbrc	r21, 7
    76e6:	90 58       	subi	r25, 0x80	; 128
    76e8:	44 0f       	add	r20, r20
    76ea:	55 1f       	adc	r21, r21
    76ec:	59 f0       	breq	.+22     	; 0x7704 <__fp_splitA+0x10>
    76ee:	5f 3f       	cpi	r21, 0xFF	; 255
    76f0:	71 f0       	breq	.+28     	; 0x770e <__fp_splitA+0x1a>
    76f2:	47 95       	ror	r20

000076f4 <__fp_splitA>:
    76f4:	88 0f       	add	r24, r24
    76f6:	97 fb       	bst	r25, 7
    76f8:	99 1f       	adc	r25, r25
    76fa:	61 f0       	breq	.+24     	; 0x7714 <__fp_splitA+0x20>
    76fc:	9f 3f       	cpi	r25, 0xFF	; 255
    76fe:	79 f0       	breq	.+30     	; 0x771e <__fp_splitA+0x2a>
    7700:	87 95       	ror	r24
    7702:	08 95       	ret
    7704:	12 16       	cp	r1, r18
    7706:	13 06       	cpc	r1, r19
    7708:	14 06       	cpc	r1, r20
    770a:	55 1f       	adc	r21, r21
    770c:	f2 cf       	rjmp	.-28     	; 0x76f2 <__fp_split3+0xe>
    770e:	46 95       	lsr	r20
    7710:	f1 df       	rcall	.-30     	; 0x76f4 <__fp_splitA>
    7712:	08 c0       	rjmp	.+16     	; 0x7724 <__fp_splitA+0x30>
    7714:	16 16       	cp	r1, r22
    7716:	17 06       	cpc	r1, r23
    7718:	18 06       	cpc	r1, r24
    771a:	99 1f       	adc	r25, r25
    771c:	f1 cf       	rjmp	.-30     	; 0x7700 <__fp_splitA+0xc>
    771e:	86 95       	lsr	r24
    7720:	71 05       	cpc	r23, r1
    7722:	61 05       	cpc	r22, r1
    7724:	08 94       	sec
    7726:	08 95       	ret

00007728 <__fp_zero>:
    7728:	e8 94       	clt

0000772a <__fp_szero>:
    772a:	bb 27       	eor	r27, r27
    772c:	66 27       	eor	r22, r22
    772e:	77 27       	eor	r23, r23
    7730:	cb 01       	movw	r24, r22
    7732:	97 f9       	bld	r25, 7
    7734:	08 95       	ret

00007736 <__gesf2>:
    7736:	8a df       	rcall	.-236    	; 0x764c <__fp_cmp>
    7738:	08 f4       	brcc	.+2      	; 0x773c <__gesf2+0x6>
    773a:	8f ef       	ldi	r24, 0xFF	; 255
    773c:	08 95       	ret

0000773e <__mulsf3>:
    773e:	0b d0       	rcall	.+22     	; 0x7756 <__mulsf3x>
    7740:	c0 cf       	rjmp	.-128    	; 0x76c2 <__fp_round>
    7742:	b1 df       	rcall	.-158    	; 0x76a6 <__fp_pscA>
    7744:	28 f0       	brcs	.+10     	; 0x7750 <__mulsf3+0x12>
    7746:	b6 df       	rcall	.-148    	; 0x76b4 <__fp_pscB>
    7748:	18 f0       	brcs	.+6      	; 0x7750 <__mulsf3+0x12>
    774a:	95 23       	and	r25, r21
    774c:	09 f0       	breq	.+2      	; 0x7750 <__mulsf3+0x12>
    774e:	a2 cf       	rjmp	.-188    	; 0x7694 <__fp_inf>
    7750:	a7 cf       	rjmp	.-178    	; 0x76a0 <__fp_nan>
    7752:	11 24       	eor	r1, r1
    7754:	ea cf       	rjmp	.-44     	; 0x772a <__fp_szero>

00007756 <__mulsf3x>:
    7756:	c6 df       	rcall	.-116    	; 0x76e4 <__fp_split3>
    7758:	a0 f3       	brcs	.-24     	; 0x7742 <__mulsf3+0x4>

0000775a <__mulsf3_pse>:
    775a:	95 9f       	mul	r25, r21
    775c:	d1 f3       	breq	.-12     	; 0x7752 <__mulsf3+0x14>
    775e:	95 0f       	add	r25, r21
    7760:	50 e0       	ldi	r21, 0x00	; 0
    7762:	55 1f       	adc	r21, r21
    7764:	62 9f       	mul	r22, r18
    7766:	f0 01       	movw	r30, r0
    7768:	72 9f       	mul	r23, r18
    776a:	bb 27       	eor	r27, r27
    776c:	f0 0d       	add	r31, r0
    776e:	b1 1d       	adc	r27, r1
    7770:	63 9f       	mul	r22, r19
    7772:	aa 27       	eor	r26, r26
    7774:	f0 0d       	add	r31, r0
    7776:	b1 1d       	adc	r27, r1
    7778:	aa 1f       	adc	r26, r26
    777a:	64 9f       	mul	r22, r20
    777c:	66 27       	eor	r22, r22
    777e:	b0 0d       	add	r27, r0
    7780:	a1 1d       	adc	r26, r1
    7782:	66 1f       	adc	r22, r22
    7784:	82 9f       	mul	r24, r18
    7786:	22 27       	eor	r18, r18
    7788:	b0 0d       	add	r27, r0
    778a:	a1 1d       	adc	r26, r1
    778c:	62 1f       	adc	r22, r18
    778e:	73 9f       	mul	r23, r19
    7790:	b0 0d       	add	r27, r0
    7792:	a1 1d       	adc	r26, r1
    7794:	62 1f       	adc	r22, r18
    7796:	83 9f       	mul	r24, r19
    7798:	a0 0d       	add	r26, r0
    779a:	61 1d       	adc	r22, r1
    779c:	22 1f       	adc	r18, r18
    779e:	74 9f       	mul	r23, r20
    77a0:	33 27       	eor	r19, r19
    77a2:	a0 0d       	add	r26, r0
    77a4:	61 1d       	adc	r22, r1
    77a6:	23 1f       	adc	r18, r19
    77a8:	84 9f       	mul	r24, r20
    77aa:	60 0d       	add	r22, r0
    77ac:	21 1d       	adc	r18, r1
    77ae:	82 2f       	mov	r24, r18
    77b0:	76 2f       	mov	r23, r22
    77b2:	6a 2f       	mov	r22, r26
    77b4:	11 24       	eor	r1, r1
    77b6:	9f 57       	subi	r25, 0x7F	; 127
    77b8:	50 40       	sbci	r21, 0x00	; 0
    77ba:	8a f0       	brmi	.+34     	; 0x77de <__mulsf3_pse+0x84>
    77bc:	e1 f0       	breq	.+56     	; 0x77f6 <__mulsf3_pse+0x9c>
    77be:	88 23       	and	r24, r24
    77c0:	4a f0       	brmi	.+18     	; 0x77d4 <__mulsf3_pse+0x7a>
    77c2:	ee 0f       	add	r30, r30
    77c4:	ff 1f       	adc	r31, r31
    77c6:	bb 1f       	adc	r27, r27
    77c8:	66 1f       	adc	r22, r22
    77ca:	77 1f       	adc	r23, r23
    77cc:	88 1f       	adc	r24, r24
    77ce:	91 50       	subi	r25, 0x01	; 1
    77d0:	50 40       	sbci	r21, 0x00	; 0
    77d2:	a9 f7       	brne	.-22     	; 0x77be <__mulsf3_pse+0x64>
    77d4:	9e 3f       	cpi	r25, 0xFE	; 254
    77d6:	51 05       	cpc	r21, r1
    77d8:	70 f0       	brcs	.+28     	; 0x77f6 <__mulsf3_pse+0x9c>
    77da:	5c cf       	rjmp	.-328    	; 0x7694 <__fp_inf>
    77dc:	a6 cf       	rjmp	.-180    	; 0x772a <__fp_szero>
    77de:	5f 3f       	cpi	r21, 0xFF	; 255
    77e0:	ec f3       	brlt	.-6      	; 0x77dc <__mulsf3_pse+0x82>
    77e2:	98 3e       	cpi	r25, 0xE8	; 232
    77e4:	dc f3       	brlt	.-10     	; 0x77dc <__mulsf3_pse+0x82>
    77e6:	86 95       	lsr	r24
    77e8:	77 95       	ror	r23
    77ea:	67 95       	ror	r22
    77ec:	b7 95       	ror	r27
    77ee:	f7 95       	ror	r31
    77f0:	e7 95       	ror	r30
    77f2:	9f 5f       	subi	r25, 0xFF	; 255
    77f4:	c1 f7       	brne	.-16     	; 0x77e6 <__mulsf3_pse+0x8c>
    77f6:	fe 2b       	or	r31, r30
    77f8:	88 0f       	add	r24, r24
    77fa:	91 1d       	adc	r25, r1
    77fc:	96 95       	lsr	r25
    77fe:	87 95       	ror	r24
    7800:	97 f9       	bld	r25, 7
    7802:	08 95       	ret

00007804 <__mulsi3>:
    7804:	62 9f       	mul	r22, r18
    7806:	d0 01       	movw	r26, r0
    7808:	73 9f       	mul	r23, r19
    780a:	f0 01       	movw	r30, r0
    780c:	82 9f       	mul	r24, r18
    780e:	e0 0d       	add	r30, r0
    7810:	f1 1d       	adc	r31, r1
    7812:	64 9f       	mul	r22, r20
    7814:	e0 0d       	add	r30, r0
    7816:	f1 1d       	adc	r31, r1
    7818:	92 9f       	mul	r25, r18
    781a:	f0 0d       	add	r31, r0
    781c:	83 9f       	mul	r24, r19
    781e:	f0 0d       	add	r31, r0
    7820:	74 9f       	mul	r23, r20
    7822:	f0 0d       	add	r31, r0
    7824:	65 9f       	mul	r22, r21
    7826:	f0 0d       	add	r31, r0
    7828:	99 27       	eor	r25, r25
    782a:	72 9f       	mul	r23, r18
    782c:	b0 0d       	add	r27, r0
    782e:	e1 1d       	adc	r30, r1
    7830:	f9 1f       	adc	r31, r25
    7832:	63 9f       	mul	r22, r19
    7834:	b0 0d       	add	r27, r0
    7836:	e1 1d       	adc	r30, r1
    7838:	f9 1f       	adc	r31, r25
    783a:	bd 01       	movw	r22, r26
    783c:	cf 01       	movw	r24, r30
    783e:	11 24       	eor	r1, r1
    7840:	08 95       	ret

00007842 <__udivmodhi4>:
    7842:	aa 1b       	sub	r26, r26
    7844:	bb 1b       	sub	r27, r27
    7846:	51 e1       	ldi	r21, 0x11	; 17
    7848:	07 c0       	rjmp	.+14     	; 0x7858 <__udivmodhi4_ep>

0000784a <__udivmodhi4_loop>:
    784a:	aa 1f       	adc	r26, r26
    784c:	bb 1f       	adc	r27, r27
    784e:	a6 17       	cp	r26, r22
    7850:	b7 07       	cpc	r27, r23
    7852:	10 f0       	brcs	.+4      	; 0x7858 <__udivmodhi4_ep>
    7854:	a6 1b       	sub	r26, r22
    7856:	b7 0b       	sbc	r27, r23

00007858 <__udivmodhi4_ep>:
    7858:	88 1f       	adc	r24, r24
    785a:	99 1f       	adc	r25, r25
    785c:	5a 95       	dec	r21
    785e:	a9 f7       	brne	.-22     	; 0x784a <__udivmodhi4_loop>
    7860:	80 95       	com	r24
    7862:	90 95       	com	r25
    7864:	bc 01       	movw	r22, r24
    7866:	cd 01       	movw	r24, r26
    7868:	08 95       	ret

0000786a <__divmodhi4>:
    786a:	97 fb       	bst	r25, 7
    786c:	09 2e       	mov	r0, r25
    786e:	07 26       	eor	r0, r23
    7870:	0a d0       	rcall	.+20     	; 0x7886 <__divmodhi4_neg1>
    7872:	77 fd       	sbrc	r23, 7
    7874:	04 d0       	rcall	.+8      	; 0x787e <__divmodhi4_neg2>
    7876:	e5 df       	rcall	.-54     	; 0x7842 <__udivmodhi4>
    7878:	06 d0       	rcall	.+12     	; 0x7886 <__divmodhi4_neg1>
    787a:	00 20       	and	r0, r0
    787c:	1a f4       	brpl	.+6      	; 0x7884 <__divmodhi4_exit>

0000787e <__divmodhi4_neg2>:
    787e:	70 95       	com	r23
    7880:	61 95       	neg	r22
    7882:	7f 4f       	sbci	r23, 0xFF	; 255

00007884 <__divmodhi4_exit>:
    7884:	08 95       	ret

00007886 <__divmodhi4_neg1>:
    7886:	f6 f7       	brtc	.-4      	; 0x7884 <__divmodhi4_exit>
    7888:	90 95       	com	r25
    788a:	81 95       	neg	r24
    788c:	9f 4f       	sbci	r25, 0xFF	; 255
    788e:	08 95       	ret

00007890 <__udivmodsi4>:
    7890:	a1 e2       	ldi	r26, 0x21	; 33
    7892:	1a 2e       	mov	r1, r26
    7894:	aa 1b       	sub	r26, r26
    7896:	bb 1b       	sub	r27, r27
    7898:	fd 01       	movw	r30, r26
    789a:	0d c0       	rjmp	.+26     	; 0x78b6 <__udivmodsi4_ep>

0000789c <__udivmodsi4_loop>:
    789c:	aa 1f       	adc	r26, r26
    789e:	bb 1f       	adc	r27, r27
    78a0:	ee 1f       	adc	r30, r30
    78a2:	ff 1f       	adc	r31, r31
    78a4:	a2 17       	cp	r26, r18
    78a6:	b3 07       	cpc	r27, r19
    78a8:	e4 07       	cpc	r30, r20
    78aa:	f5 07       	cpc	r31, r21
    78ac:	20 f0       	brcs	.+8      	; 0x78b6 <__udivmodsi4_ep>
    78ae:	a2 1b       	sub	r26, r18
    78b0:	b3 0b       	sbc	r27, r19
    78b2:	e4 0b       	sbc	r30, r20
    78b4:	f5 0b       	sbc	r31, r21

000078b6 <__udivmodsi4_ep>:
    78b6:	66 1f       	adc	r22, r22
    78b8:	77 1f       	adc	r23, r23
    78ba:	88 1f       	adc	r24, r24
    78bc:	99 1f       	adc	r25, r25
    78be:	1a 94       	dec	r1
    78c0:	69 f7       	brne	.-38     	; 0x789c <__udivmodsi4_loop>
    78c2:	60 95       	com	r22
    78c4:	70 95       	com	r23
    78c6:	80 95       	com	r24
    78c8:	90 95       	com	r25
    78ca:	9b 01       	movw	r18, r22
    78cc:	ac 01       	movw	r20, r24
    78ce:	bd 01       	movw	r22, r26
    78d0:	cf 01       	movw	r24, r30
    78d2:	08 95       	ret

000078d4 <__tablejump2__>:
    78d4:	ee 0f       	add	r30, r30
    78d6:	ff 1f       	adc	r31, r31

000078d8 <__tablejump__>:
    78d8:	05 90       	lpm	r0, Z+
    78da:	f4 91       	lpm	r31, Z+
    78dc:	e0 2d       	mov	r30, r0
    78de:	09 94       	ijmp

000078e0 <toupper>:
    78e0:	91 11       	cpse	r25, r1
    78e2:	08 95       	ret
    78e4:	81 56       	subi	r24, 0x61	; 97
    78e6:	8a 51       	subi	r24, 0x1A	; 26
    78e8:	08 f4       	brcc	.+2      	; 0x78ec <toupper+0xc>
    78ea:	80 52       	subi	r24, 0x20	; 32
    78ec:	85 58       	subi	r24, 0x85	; 133
    78ee:	08 95       	ret

000078f0 <__do_global_dtors>:
    78f0:	1a e0       	ldi	r17, 0x0A	; 10
    78f2:	c8 e3       	ldi	r28, 0x38	; 56
    78f4:	da e0       	ldi	r29, 0x0A	; 10
    78f6:	04 c0       	rjmp	.+8      	; 0x7900 <.do_global_dtors_start>

000078f8 <.do_global_dtors_loop>:
    78f8:	fe 01       	movw	r30, r28
    78fa:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <__tablejump__>
    78fe:	22 96       	adiw	r28, 0x02	; 2

00007900 <.do_global_dtors_start>:
    7900:	ca 33       	cpi	r28, 0x3A	; 58
    7902:	d1 07       	cpc	r29, r17
    7904:	c9 f7       	brne	.-14     	; 0x78f8 <.do_global_dtors_loop>
    7906:	f8 94       	cli

00007908 <__stop_program>:
    7908:	ff cf       	rjmp	.-2      	; 0x7908 <__stop_program>
