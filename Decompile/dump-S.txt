
Growbox.cpp.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <__dtors_end>
uint8_t EEPROMClass::read(int address)
{
	return eeprom_read_byte((unsigned char *) address);
}

void EEPROMClass::write(int address, uint8_t value)
       4:	0c 94 92 04 	jmp	0x924	; 0x924 <__bad_interrupt>
    total += 2; /* Add two bytes for the memory block's header  */
    total += (int) current->sz;
  }

  return total;
}
       8:	0c 94 92 04 	jmp	0x924	; 0x924 <__bad_interrupt>
   
int month(){
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
       c:	0c 94 92 04 	jmp	0x924	; 0x924 <__bad_interrupt>
TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
  for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
     free(id);   // ensure  all Alarms are cleared and available for allocation  
}
      10:	0c 94 92 04 	jmp	0x924	; 0x924 <__bad_interrupt>
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
  txBufferLength = 0;
}
      14:	0c 94 92 04 	jmp	0x924	; 0x924 <__bad_interrupt>
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
}
      18:	0c 94 92 04 	jmp	0x924	; 0x924 <__bad_interrupt>
    exists = false;
    return false;
  }
  exists = true;
  return true;
}
      1c:	0c 94 92 04 	jmp	0x924	; 0x924 <__bad_interrupt>
void OneWire::depower()
{
	noInterrupts();
	DIRECT_MODE_INPUT(baseReg, bitmask);
	interrupts();
}
      20:	0c 94 92 04 	jmp	0x924	; 0x924 <__bad_interrupt>
  devices = 0;
  parasite = false;
  bitResolution = 9;
  waitForConversion = true;
  checkForConversion = true;
}
      24:	0c 94 92 04 	jmp	0x924	; 0x924 <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      28:	0c 94 92 04 	jmp	0x924	; 0x924 <__bad_interrupt>
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
      2c:	0c 94 92 04 	jmp	0x924	; 0x924 <__bad_interrupt>
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
      30:	0c 94 92 04 	jmp	0x924	; 0x924 <__bad_interrupt>
	return operator[](loc);
}

void String::setCharAt(unsigned int loc, char c) 
{
	if (loc < len) buffer[loc] = c;
      34:	0c 94 92 04 	jmp	0x924	; 0x924 <__bad_interrupt>
      38:	0c 94 92 04 	jmp	0x924	; 0x924 <__bad_interrupt>
      3c:	0c 94 92 04 	jmp	0x924	; 0x924 <__bad_interrupt>
      40:	0c 94 c3 31 	jmp	0x6386	; 0x6386 <__vector_16>
      44:	0c 94 92 04 	jmp	0x924	; 0x924 <__bad_interrupt>
      48:	0c 94 9d 33 	jmp	0x673a	; 0x673a <__vector_18>
      4c:	0c 94 eb 33 	jmp	0x67d6	; 0x67d6 <__vector_19>
      50:	0c 94 92 04 	jmp	0x924	; 0x924 <__bad_interrupt>
      54:	0c 94 92 04 	jmp	0x924	; 0x924 <__bad_interrupt>
      58:	0c 94 92 04 	jmp	0x924	; 0x924 <__bad_interrupt>
      5c:	0c 94 92 04 	jmp	0x924	; 0x924 <__bad_interrupt>
      60:	0c 94 c8 28 	jmp	0x5190	; 0x5190 <__vector_24>
      64:	0c 94 92 04 	jmp	0x924	; 0x924 <__bad_interrupt>

00000068 <_ZL7S_table>:
      68:	74 61 62 6c 65 00                                   table.

0000006e <_ZL4S_tr>:
      6e:	74 72 00                                            tr.

00000071 <_ZL4S_td>:
      71:	74 64 00                                            td.

00000074 <_ZL4S_0x>:
      74:	30 78 00                                            0x.

00000077 <_ZL18S_WIFI_RESPONSE_OK>:
      77:	4f 4b 00                                            OK.

0000007a <_ZL6S_CRLF>:
      7a:	0d 0a 00                                            ...

0000007d <_ZL21S_WIFI_RESPONSE_ERROR>:
      7d:	45 52 52 4f 52 00                                   ERROR.

00000083 <_ZL7S_empty>:
	...

00000084 <_ZL6S_Next>:
      84:	20 3e 20 00                                          > .

00000088 <_ZZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperiE3__c_1>:
      88:	45 72 72 6f 72 20 00                                Error .

0000008f <_ZZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperiE3__c_0>:
      8f:	20 28 72 65 62 6f 6f 74 29 00                        (reboot).

00000099 <_ZZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperiE3__c>:
      99:	4e 6f 20 72 65 73 70 6f 6e 73 65 00                 No response.

000000a5 <_ZL6S_WIFI>:
      a5:	57 49 46 49 3e 20 00                                WIFI> .

000000ac <_ZZN13GB_PrintDirty16printWithoutCRLFERK6StringE3__c_0>:
      ac:	5c 6e 00                                            \n.

000000af <_ZZN13GB_PrintDirty16printWithoutCRLFERK6StringE3__c>:
      af:	5c 72 00                                            \r.

000000b2 <_ZZN15GB_SerialHelper18sendWifiFrameStartEhjE3__c>:
      b2:	61 74 2b 73 65 6e 64 5f 64 61 74 61 3d 00           at+send_data=.

000000c0 <_ZL13S_Free_memory>:
      c0:	46 72 65 65 20 6d 65 6d 6f 72 79 3a 20 00           Free memory: .

000000ce <_ZL7S_bytes>:
      ce:	20 62 79 74 65 73 00                                 bytes.

000000d5 <_ZZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhhE3__c_0>:
      d5:	4e 4f 54 20 53 54 4f 52 45 44 20 00                 NOT STORED .

000000e1 <_ZZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhhE3__c>:
      e1:	4c 4f 47 3e 20 00                                   LOG> .

000000e7 <_ZZN9GB_Logger18getLogRecordSuffixERK9LogRecordE3__c_0>:
      e7:	5d 20 43 00                                         ] C.

000000eb <_ZZN9GB_Logger18getLogRecordSuffixERK9LogRecordE3__c>:
      eb:	20 5b 00                                             [.

000000ee <_ZL24S_WIFI_RESPONSE_WELLCOME>:
      ee:	57 65 6c 63 6f 6d 65 20 74 6f 20 52 41 4b 34 31     Welcome to RAK41
      fe:	30 0d 0a 00                                         0...

00000102 <_ZL9S_enabled>:
     102:	20 65 6e 61 62 6c 65 64 00                           enabled.

0000010b <_ZL10S_disabled>:
     10b:	20 64 69 73 61 62 6c 65 64 00                        disabled.

00000115 <_ZL11S_connected>:
     115:	20 63 6f 6e 6e 65 63 74 65 64 00                     connected.

00000120 <_ZL14S_disconnected>:
     120:	20 64 69 73 63 6f 6e 6e 65 63 74 65 64 00            disconnected.

0000012e <_ZZN15GB_SerialHelper11checkSerialEhhE3__c_3>:
     12e:	53 65 72 69 61 6c 20 57 69 2d 46 69 3a 00           Serial Wi-Fi:.

0000013c <_ZZN15GB_SerialHelper11checkSerialEhhE3__c_2>:
     13c:	53 65 72 69 61 6c 20 6d 6f 6e 69 74 6f 72 3a 20     Serial monitor: 
	...

0000014d <_ZZN15GB_SerialHelper11checkSerialEhhE3__c_1>:
     14d:	4e 6f 74 20 63 6f 72 72 65 63 74 20 77 65 6c 6c     Not correct well
     15d:	63 6f 6d 65 20 6d 65 73 73 61 67 65 3a 20 00        come message: .

0000016c <_ZZN15GB_SerialHelper11checkSerialEhhE3__c_0>:
     16c:	61 74 2b 72 65 73 65 74 3d 30 00                    at+reset=0.

00000177 <_ZZN15GB_SerialHelper11checkSerialEhhE3__c>:
     177:	52 65 73 74 61 72 74 69 6e 67 2e 2e 2e 00           Restarting....

00000185 <_ZZN15GB_SerialHelper9startWifiEvE3__c_1>:
     185:	53 74 61 72 74 20 66 61 69 6c 65 64 00              Start failed.

00000192 <_ZZN15GB_SerialHelper9startWifiEvE3__c_0>:
     192:	53 74 61 72 74 65 64 00                             Started.

0000019a <_ZZN15GB_SerialHelper9startWifiEvE3__c>:
     19a:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

000001a6 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_7>:
     1a6:	61 74 2b 6c 74 63 70 3d 38 30 00                    at+ltcp=80.

000001b1 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_6>:
     1b1:	61 74 2b 61 70 3d 47 72 6f 77 62 6f 78 2c 31 00     at+ap=Growbox,1.

000001c1 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_5>:
     1c1:	61 74 2b 69 70 64 68 63 70 3d 31 00                 at+ipdhcp=1.

000001cd <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_4>:
     1cd:	61 74 2b 69 70 73 74 61 74 69 63 3d 31 39 32 2e     at+ipstatic=192.
     1dd:	31 36 38 2e 30 2e 31 2c 32 35 35 2e 32 35 35 2e     168.0.1,255.255.
     1ed:	30 2e 30 2c 30 2e 30 2e 30 2e 30 2c 30 2c 30 00     0.0,0.0.0.0,0,0.

000001fd <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_3>:
     1fd:	61 74 2b 70 73 6b 3d 69 6e 67 6f 64 77 65 74 72     at+psk=ingodwetr
     20d:	75 73 74 00                                         ust.

00000211 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_2>:
     211:	61 74 2b 69 70 64 68 63 70 3d 30 00                 at+ipdhcp=0.

0000021d <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_1>:
     21d:	61 74 2b 63 6f 6e 6e 65 63 74 3d 00                 at+connect=.

00000229 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c_0>:
     229:	61 74 2b 70 73 6b 3d 00                             at+psk=.

00000231 <_ZZN15GB_SerialHelper15startWifiSilentEvE3__c>:
     231:	61 74 2b 73 63 61 6e 3d 30 00                       at+scan=0.

0000023b <_ZL13S_Temperature>:
     23b:	54 65 6d 70 65 72 61 74 75 72 65 00                 Temperature.

00000247 <_ZL5S_url>:
     247:	2f 00                                               /.

00000249 <_ZL9S_url_log>:
     249:	2f 6c 6f 67 00                                      /log.

0000024e <_ZL10S_url_conf>:
     24e:	2f 63 6f 6e 66 00                                   /conf.

00000254 <_ZL13S_url_storage>:
     254:	2f 73 74 6f 72 61 67 65 00                          /storage.

0000025d <_ZZ11serialEventvE3__c>:
     25d:	53 65 6e 64 20 72 65 73 70 6f 6e 63 65 20 65 72     Send responce er
     26d:	72 6f 72 00                                         ror.

00000271 <_ZL11S_WIFI_GET_>:
     271:	47 45 54 20 2f 00                                   GET /.

00000277 <_ZL12S_WIFI_POST_>:
     277:	50 4f 53 54 20 2f 00                                POST /.

0000027e <_ZL10S_CRLFCRLF>:
     27e:	0d 0a 0d 0a 00                                      .....

00000283 <_ZZN15GB_SerialHelper17handleSerialEventER6StringRhS1_E3__c>:
     283:	61 74 2b 72 65 63 76 5f 64 61 74 61 3d 00           at+recv_data=.

00000291 <_ZZN15GB_SerialHelper16sendHTTPRedirectERKhPK19__FlashStringHelperE3__c>:
     291:	48 54 54 50 2f 31 2e 31 20 32 30 30 20 4f 4b 20     HTTP/1.1 200 OK 
     2a1:	28 33 30 33 20 64 6f 65 73 6e 27 74 20 77 6f 72     (303 doesn't wor
     2b1:	6b 20 6f 6e 20 52 41 4b 20 34 31 30 29 0d 0a 72     k on RAK 410)..r
     2c1:	65 66 72 65 73 68 3a 20 30 3b 20 75 72 6c 3d 00     efresh: 0; url=.

000002d1 <_ZZN15GB_SerialHelper23sendWifiCloseConnectionEhE3__c>:
     2d1:	61 74 2b 63 6c 73 3d 00                             at+cls=.

000002d9 <_ZZN15GB_SerialHelper17sendHttpOK_HeaderEhE3__c>:
     2d9:	48 54 54 50 2f 31 2e 31 20 32 30 30 20 4f 4b 0d     HTTP/1.1 200 OK.
     2e9:	0a 43 6f 6e 6e 65 63 74 69 6f 6e 3a 20 63 6c 6f     .Connection: clo
     2f9:	73 65 0d 0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65     se..Content-Type
     309:	3a 20 74 65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 00     : text/html.....

00000319 <_ZL6S_html>:
     319:	68 74 6d 6c 00                                      html.

0000031e <_ZL4S_hr>:
     31e:	68 72 00                                            hr.

00000321 <_ZL5S_pre>:
     321:	70 72 65 00                                         pre.

00000325 <_ZZL24generateHttpResponsePageRK6StringE3__c_3>:
     325:	53 74 6f 72 61 67 65 20 64 75 6d 70 00              Storage dump.

00000332 <_ZZL24generateHttpResponsePageRK6StringE3__c_2>:
     332:	43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 00           Configuration.

00000340 <_ZZL24generateHttpResponsePageRK6StringE3__c_1>:
     340:	44 61 69 6c 79 20 6c 6f 67 00                       Daily log.

0000034a <_ZZL24generateHttpResponsePageRK6StringE3__c_0>:
     34a:	53 74 61 74 75 73 00                                Status.

00000351 <_ZZL24generateHttpResponsePageRK6StringE3__c>:
     351:	47 72 6f 77 62 6f 78 00                             Growbox.

00000359 <_ZZL13sendTagButtonPKcPK19__FlashStringHelperE3__c_1>:
     359:	22 2f 3e 00                                         "/>.

0000035d <_ZZL13sendTagButtonPKcPK19__FlashStringHelperE3__c_0>:
     35d:	27 22 20 76 61 6c 75 65 3d 22 00                    '" value=".

00000368 <_ZZL13sendTagButtonPKcPK19__FlashStringHelperE3__c>:
     368:	3c 69 6e 70 75 74 20 74 79 70 65 3d 22 62 75 74     <input type="but
     378:	74 6f 6e 22 20 6f 6e 63 6c 69 63 6b 3d 22 64 6f     ton" onclick="do
     388:	63 75 6d 65 6e 74 2e 6c 6f 63 61 74 69 6f 6e 3d     cument.location=
     398:	27 00                                               '.

0000039a <_ZZL14sendBootStatusvE3__c_3>:
     39a:	2c 20 6f 76 65 72 66 6c 6f 77 00                    , overflow.

000003a5 <_ZZL14sendBootStatusvE3__c_2>:
     3a5:	2c 20 72 65 63 6f 72 64 73 20 00                    , records .

000003b0 <_ZZL14sendBootStatusvE3__c_1>:
     3b0:	0d 0a 4c 6f 67 67 65 72 3a 00                       ..Logger:.

000003ba <_ZZL14sendBootStatusvE3__c_0>:
     3ba:	2c 20 66 69 72 73 74 20 73 74 61 72 74 75 70 3a     , first startup:
     3ca:	20 00                                                .

000003cc <_ZZL14sendBootStatusvE3__c>:
     3cc:	43 6f 6e 74 72 6f 6c 6c 65 72 3a 20 73 74 61 72     Controller: star
     3dc:	74 75 70 3a 20 00                                   tup: .

000003e2 <_ZZL14sendTimeStatusvE3__c_5>:
     3e2:	3a 30 30 5d 0d 0a 00                                :00]...

000003e9 <_ZZL14sendTimeStatusvE3__c_4>:
     3e9:	3a 30 30 5d 2c 20 64 6f 77 6e 20 74 69 6d 65 20     :00], down time 
     3f9:	5b 00                                               [.

000003fb <_ZZL14sendTimeStatusvE3__c_3>:
     3fb:	2c 20 75 70 20 74 69 6d 65 20 5b 00                 , up time [.

00000407 <_ZZL14sendTimeStatusvE3__c_2>:
     407:	20 6d 6f 64 65 2c 20 74 69 6d 65 20 00               mode, time .

00000414 <_ZZL14sendTimeStatusvE3__c_1>:
     414:	4e 49 47 48 54 00                                   NIGHT.

0000041a <_ZZL14sendTimeStatusvE3__c_0>:
     41a:	44 41 59 00                                         DAY.

0000041e <_ZZL14sendTimeStatusvE3__c>:
     41e:	43 6c 6f 63 6b 3a 20 00                             Clock: .

00000426 <_ZL11S_PlusMinus>:
     426:	2b 2f 2d 00                                         +/-.

0000042a <_ZZL21sendTemperatureStatusvE3__c_4>:
     42a:	2c 20 63 72 69 74 69 63 61 6c 20 00                 , critical .

00000436 <_ZZL21sendTemperatureStatusvE3__c_3>:
     436:	2c 20 6e 69 67 68 74 20 00                          , night .

0000043f <_ZZL21sendTemperatureStatusvE3__c_2>:
     43f:	29 2c 20 64 61 79 20 00                             ), day .

00000447 <_ZZL21sendTemperatureStatusvE3__c_1>:
     447:	20 28 63 6f 75 6e 74 20 00                           (count .

00000450 <_ZZL21sendTemperatureStatusvE3__c_0>:
     450:	2c 20 6e 65 78 74 20 00                             , next .

00000458 <_ZZL21sendTemperatureStatusvE3__c>:
     458:	3a 20 63 75 72 72 65 6e 74 20 00                    : current .

00000463 <_ZZL19printSendPinsStatusvE3__c_3>:
     463:	20 20 20 00                                            .

00000467 <_ZZL19printSendPinsStatusvE3__c_2>:
     467:	20 20 2d 20 20 20 20 20 00                            -     .

00000470 <_ZZL19printSendPinsStatusvE3__c_1>:
     470:	20 20 20 20 20 2d 20 20 20 00                            -   .

0000047a <_ZZL19printSendPinsStatusvE3__c_0>:
     47a:	20 20 00                                              .

0000047d <_ZZL19printSendPinsStatusvE3__c>:
     47d:	20 20 00                                              .

00000480 <_ZZL30printSendConfigurationControlsvE3__c_1>:
     480:	3c 2f 66 6f 72 6d 3e 00                             </form>.

00000488 <_ZZL30printSendConfigurationControlsvE3__c_0>:
     488:	3c 69 6e 70 75 74 20 74 79 70 65 3d 22 73 75 62     <input type="sub
     498:	6d 69 74 22 20 76 61 6c 75 65 3d 22 53 75 62 6d     mit" value="Subm
     4a8:	69 74 22 3e 00                                      it">.

000004ad <_ZZL30printSendConfigurationControlsvE3__c>:
     4ad:	3c 66 6f 72 6d 20 61 63 74 69 6f 6e 3d 22 2f 22     <form action="/"
     4bd:	20 6d 65 74 68 6f 64 3d 22 70 6f 73 74 22 3e 00      method="post">.

000004cd <_ZZL16printSendFullLoghhhE3__c>:
     4cd:	4c 6f 67 20 65 6d 70 74 79 00                       Log empty.

000004d7 <_ZZN9GB_Logger23getLogRecordDescriptionER9LogRecordE3__c_1>:
     4d7:	55 6e 6b 6e 6f 77 6e 00                             Unknown.

000004df <_ZZN9GB_Logger23getLogRecordDescriptionER9LogRecordE3__c_0>:
     4df:	55 6e 6b 6e 6f 77 6e 20 65 72 72 6f 72 00           Unknown error.

000004ed <_ZZN9GB_Logger23getLogRecordDescriptionER9LogRecordE3__c>:
     4ed:	55 6e 6b 6e 6f 77 6e 20 65 76 65 6e 74 00           Unknown event.

000004fb <_ZZN15GB_SerialHelper16sendHttpNotFoundEhE3__c>:
     4fb:	48 54 54 50 2f 31 2e 31 20 34 30 34 20 4e 6f 74     HTTP/1.1 404 Not
     50b:	20 46 6f 75 6e 64 0d 0a 43 6f 6e 6e 65 63 74 69      Found..Connecti
     51b:	6f 6e 3a 20 63 6c 6f 73 65 0d 0a 0d 0a 00           on: close.....

00000529 <_ZZ5setupE3__c_9>:
     529:	66 6c 61 74 36 35 72 6f 75 74 65 72 00              flat65router.

00000536 <_ZZ5setupE3__c_8>:
     536:	48 65 6c 6c 00                                      Hell.

0000053b <_ZZ5setupE3__c_7>:
     53b:	47 72 6f 77 62 6f 78 20 73 75 63 63 65 73 73 66     Growbox successf
     54b:	75 6c 6c 79 20 73 74 61 72 74 65 64 00              ully started.

00000558 <_ZZ5setupE3__c_6>:
     558:	73 74 6f 72 61 67 65 00                             storage.

00000560 <_ZZ5setupE3__c_5>:
     560:	74 65 72 6d 6f 6d 65 74 65 72 00                    termometer.

0000056b <_ZZ5setupE3__c_4>:
     56b:	63 6c 6f 63 6b 00                                   clock.

00000571 <_ZZ5setupE3__c_1>:
     571:	6e 6f 74 20 61 6c 6c 20 45 76 65 6e 74 73 20 69     not all Events i
     581:	6e 69 74 69 61 6c 69 7a 65 64 00                    nitialized.

0000058c <_ZZ5setupE3__c_0>:
     58c:	6e 6f 74 20 61 6c 6c 20 45 72 72 6f 72 73 20 69     not all Errors i
     59c:	6e 69 74 69 61 6c 69 7a 65 64 00                    nitialized.

000005a7 <_ZZ5setupE3__c>:
     5a7:	73 6f 66 74 77 61 72 65 20 63 6f 6e 66 69 67 75     software configu
     5b7:	72 61 74 69 6f 6e 00                                ration.

000005be <_ZZL21printFatalErrorOnBootPK19__FlashStringHelperE3__c>:
     5be:	46 61 74 61 6c 20 65 72 72 6f 72 3a 20 00           Fatal error: .

000005cc <_ZZL17printStatusOnBootPK19__FlashStringHelperE3__c_0>:
     5cc:	2e 2e 2e 00                                         ....

000005d0 <_ZZL17printStatusOnBootPK19__FlashStringHelperE3__c>:
     5d0:	43 68 65 63 6b 69 6e 67 20 00                       Checking .

000005da <_ZZ15initLoggerModelvE3__c_14>:
     5da:	55 6e 6b 6e 6f 77 6e 20 73 65 72 69 61 6c 20 63     Unknown serial c
     5ea:	6f 6d 6d 61 6e 64 00                                ommand.

000005f1 <_ZZ15initLoggerModelvE3__c_13>:
     5f1:	46 41 4e 20 74 75 72 6e 65 64 20 4f 4e 20 4d 41     FAN turned ON MA
     601:	58 20 73 70 65 65 64 00                             X speed.

00000609 <_ZZ15initLoggerModelvE3__c_12>:
     609:	46 41 4e 20 74 75 72 6e 65 64 20 4f 4e 20 4d 49     FAN turned ON MI
     619:	4e 20 73 70 65 65 64 00                             N speed.

00000621 <_ZZ15initLoggerModelvE3__c_11>:
     621:	46 41 4e 20 74 75 72 6e 65 64 20 4f 46 46 00        FAN turned OFF.

00000630 <_ZZ15initLoggerModelvE3__c_10>:
     630:	4c 49 47 48 54 20 74 75 72 6e 65 64 20 4f 4e 00     LIGHT turned ON.

00000640 <_ZZ15initLoggerModelvE3__c_9>:
     640:	4c 49 47 48 54 20 74 75 72 6e 65 64 20 4f 46 46     LIGHT turned OFF
	...

00000651 <_ZZ15initLoggerModelvE3__c_8>:
     651:	47 72 6f 77 62 6f 78 20 73 77 69 74 63 68 65 64     Growbox switched
     661:	20 74 6f 20 4e 49 47 48 54 20 6d 6f 64 65 00         to NIGHT mode.

00000670 <_ZZ15initLoggerModelvE3__c_7>:
     670:	47 72 6f 77 62 6f 78 20 73 77 69 74 63 68 65 64     Growbox switched
     680:	20 74 6f 20 44 41 59 20 6d 6f 64 65 00               to DAY mode.

0000068d <_ZZ15initLoggerModelvE3__c_6>:
     68d:	52 45 53 54 41 52 54 45 44 00                       RESTARTED.

00000697 <_ZZ15initLoggerModelvE3__c_5>:
     697:	46 49 52 53 54 20 53 54 41 52 54 55 50 00           FIRST STARTUP.

000006a5 <_ZZ15initLoggerModelvE3__c_4>:
     6a5:	45 72 72 6f 72 3a 20 4d 65 6d 6f 72 79 20 72 65     Error: Memory re
     6b5:	6d 61 69 6e 65 64 20 6c 65 73 73 20 32 30 30 20     mained less 200 
     6c5:	62 79 74 65 73 00                                   bytes.

000006cb <_ZZ15initLoggerModelvE3__c_3>:
     6cb:	45 72 72 6f 72 3a 20 54 65 72 6d 6f 6d 65 74 65     Error: Termomete
     6db:	72 20 72 65 74 75 72 6e 65 64 20 43 52 49 54 49     r returned CRITI
     6eb:	43 41 4c 20 76 61 6c 75 65 00                       CAL value.

000006f5 <_ZZ15initLoggerModelvE3__c_2>:
     6f5:	45 72 72 6f 72 3a 20 54 65 72 6d 6f 6d 65 74 65     Error: Termomete
     705:	72 20 72 65 74 75 72 6e 65 64 20 5a 45 52 4f 20     r returned ZERO 
     715:	76 61 6c 75 65 00                                   value.

0000071b <_ZZ15initLoggerModelvE3__c_1>:
     71b:	45 72 72 6f 72 3a 20 54 65 72 6d 6f 6d 65 74 65     Error: Termomete
     72b:	72 20 64 69 73 63 6f 6e 6e 65 63 74 65 64 00        r disconnected.

0000073a <_ZZ15initLoggerModelvE3__c_0>:
     73a:	45 72 72 6f 72 3a 20 54 69 6d 65 72 20 6e 65 65     Error: Timer nee
     74a:	64 73 20 73 79 6e 63 00                             ds sync.

00000752 <_ZZ15initLoggerModelvE3__c>:
     752:	45 72 72 6f 72 3a 20 54 69 6d 65 72 20 6e 6f 74     Error: Timer not
     762:	20 73 65 74 00                                       set.

00000767 <_ZL11dscrc_table>:
     767:	00 5e bc e2 61 3f dd 83 c2 9c 7e 20 a3 fd 1f 41     .^..a?....~ ...A
     777:	9d c3 21 7f fc a2 40 1e 5f 01 e3 bd 3e 60 82 dc     ..!...@._...>`..
     787:	23 7d 9f c1 42 1c fe a0 e1 bf 5d 03 80 de 3c 62     #}..B.....]...<b
     797:	be e0 02 5c df 81 63 3d 7c 22 c0 9e 1d 43 a1 ff     ...\..c=|"...C..
     7a7:	46 18 fa a4 27 79 9b c5 84 da 38 66 e5 bb 59 07     F...'y....8f..Y.
     7b7:	db 85 67 39 ba e4 06 58 19 47 a5 fb 78 26 c4 9a     ..g9...X.G..x&..
     7c7:	65 3b d9 87 04 5a b8 e6 a7 f9 1b 45 c6 98 7a 24     e;...Z.....E..z$
     7d7:	f8 a6 44 1a 99 c7 25 7b 3a 64 86 d8 5b 05 e7 b9     ..D...%{:d..[...
     7e7:	8c d2 30 6e ed b3 51 0f 4e 10 f2 ac 2f 71 93 cd     ..0n..Q.N.../q..
     7f7:	11 4f ad f3 70 2e cc 92 d3 8d 6f 31 b2 ec 0e 50     .O..p.....o1...P
     807:	af f1 13 4d ce 90 72 2c 6d 33 d1 8f 0c 52 b0 ee     ...M..r,m3...R..
     817:	32 6c 8e d0 53 0d ef b1 f0 ae 4c 12 91 cf 2d 73     2l..S.....L...-s
     827:	ca 94 76 28 ab f5 17 49 08 56 b4 ea 69 37 d5 8b     ..v(...I.V..i7..
     837:	57 09 eb b5 36 68 8a d4 95 cb 29 77 f4 aa 48 16     W...6h....)w..H.
     847:	e9 b7 55 0b 88 d6 34 6a 2b 75 97 c9 4a 14 f6 a8     ..U...4j+u..J...
     857:	74 2a c8 96 15 4b a9 f7 b6 e8 0a 54 d7 89 6b 35     t*...K.....T..k5

00000867 <port_to_mode_PGM>:
     867:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000871 <port_to_output_PGM>:
     871:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000087b <port_to_input_PGM>:
     87b:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000885 <digital_pin_to_port_PGM>:
     885:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     895:	03 03 03 03                                         ....

00000899 <digital_pin_to_bit_mask_PGM>:
     899:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     8a9:	04 08 10 20                                         ... 

000008ad <digital_pin_to_timer_PGM>:
     8ad:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     8bd:	00 00 00 00 00                                      .....

000008c2 <__ctors_start>:
     8c2:	0d 05       	cpc	r16, r13
     8c4:	93 1f       	adc	r25, r19
     8c6:	65 20       	and	r6, r5
     8c8:	6c 20       	and	r6, r12
     8ca:	e0 23       	and	r30, r16
     8cc:	64 27       	eor	r22, r20
     8ce:	38 2b       	or	r19, r24
     8d0:	bf 35       	cpi	r27, 0x5F	; 95

000008d2 <__ctors_end>:
     8d2:	5e 20       	and	r5, r14

000008d4 <__dtors_end>:
     8d4:	11 24       	eor	r1, r1
     8d6:	1f be       	out	0x3f, r1	; 63
     8d8:	cf ef       	ldi	r28, 0xFF	; 255
     8da:	d8 e0       	ldi	r29, 0x08	; 8
     8dc:	de bf       	out	0x3e, r29	; 62
     8de:	cd bf       	out	0x3d, r28	; 61

000008e0 <__do_copy_data>:
     8e0:	11 e0       	ldi	r17, 0x01	; 1
     8e2:	a0 e0       	ldi	r26, 0x00	; 0
     8e4:	b1 e0       	ldi	r27, 0x01	; 1
     8e6:	ea e1       	ldi	r30, 0x1A	; 26
     8e8:	fc e7       	ldi	r31, 0x7C	; 124
     8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <.do_copy_data_start>

000008ec <.do_copy_data_loop>:
     8ec:	05 90       	lpm	r0, Z+
     8ee:	0d 92       	st	X+, r0

000008f0 <.do_copy_data_start>:
     8f0:	ac 33       	cpi	r26, 0x3C	; 60
     8f2:	b1 07       	cpc	r27, r17
     8f4:	d9 f7       	brne	.-10     	; 0x8ec <.do_copy_data_loop>

000008f6 <__do_clear_bss>:
     8f6:	13 e0       	ldi	r17, 0x03	; 3
     8f8:	ac e3       	ldi	r26, 0x3C	; 60
     8fa:	b1 e0       	ldi	r27, 0x01	; 1
     8fc:	01 c0       	rjmp	.+2      	; 0x900 <.do_clear_bss_start>

000008fe <.do_clear_bss_loop>:
     8fe:	1d 92       	st	X+, r1

00000900 <.do_clear_bss_start>:
     900:	af 3d       	cpi	r26, 0xDF	; 223
     902:	b1 07       	cpc	r27, r17
     904:	e1 f7       	brne	.-8      	; 0x8fe <.do_clear_bss_loop>

00000906 <__do_global_ctors>:
     906:	18 e0       	ldi	r17, 0x08	; 8
     908:	c2 ed       	ldi	r28, 0xD2	; 210
     90a:	d8 e0       	ldi	r29, 0x08	; 8
     90c:	04 c0       	rjmp	.+8      	; 0x916 <.do_global_ctors_start>

0000090e <.do_global_ctors_loop>:
     90e:	22 97       	sbiw	r28, 0x02	; 2
     910:	fe 01       	movw	r30, r28
     912:	0e 94 f4 3d 	call	0x7be8	; 0x7be8 <__tablejump__>

00000916 <.do_global_ctors_start>:
     916:	c2 3c       	cpi	r28, 0xC2	; 194
     918:	d1 07       	cpc	r29, r17
     91a:	c9 f7       	brne	.-14     	; 0x90e <.do_global_ctors_loop>
     91c:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <main>
     920:	0c 94 00 3e 	jmp	0x7c00	; 0x7c00 <__do_global_dtors>

00000924 <__bad_interrupt>:
     924:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000928 <strlen_P>:
     928:	fc 01       	movw	r30, r24
     92a:	05 90       	lpm	r0, Z+
     92c:	00 20       	and	r0, r0
     92e:	e9 f7       	brne	.-6      	; 0x92a <strlen_P+0x2>
     930:	80 95       	com	r24
     932:	90 95       	com	r25
     934:	8e 0f       	add	r24, r30
     936:	9f 1f       	adc	r25, r31
     938:	08 95       	ret

0000093a <strncmp_P>:
     93a:	fb 01       	movw	r30, r22
     93c:	dc 01       	movw	r26, r24
     93e:	41 50       	subi	r20, 0x01	; 1
     940:	50 40       	sbci	r21, 0x00	; 0
     942:	30 f0       	brcs	.+12     	; 0x950 <strncmp_P+0x16>
     944:	8d 91       	ld	r24, X+
     946:	05 90       	lpm	r0, Z+
     948:	80 19       	sub	r24, r0
     94a:	19 f4       	brne	.+6      	; 0x952 <strncmp_P+0x18>
     94c:	00 20       	and	r0, r0
     94e:	b9 f7       	brne	.-18     	; 0x93e <strncmp_P+0x4>
     950:	88 1b       	sub	r24, r24
     952:	99 0b       	sbc	r25, r25
     954:	08 95       	ret

00000956 <memcpy>:
     956:	fb 01       	movw	r30, r22
     958:	dc 01       	movw	r26, r24
     95a:	02 c0       	rjmp	.+4      	; 0x960 <memcpy+0xa>
     95c:	01 90       	ld	r0, Z+
     95e:	0d 92       	st	X+, r0
     960:	41 50       	subi	r20, 0x01	; 1
     962:	50 40       	sbci	r21, 0x00	; 0
     964:	d8 f7       	brcc	.-10     	; 0x95c <memcpy+0x6>
     966:	08 95       	ret

00000968 <strchr>:
     968:	fc 01       	movw	r30, r24
     96a:	81 91       	ld	r24, Z+
     96c:	86 17       	cp	r24, r22
     96e:	21 f0       	breq	.+8      	; 0x978 <strchr+0x10>
     970:	88 23       	and	r24, r24
     972:	d9 f7       	brne	.-10     	; 0x96a <strchr+0x2>
     974:	99 27       	eor	r25, r25
     976:	08 95       	ret
     978:	31 97       	sbiw	r30, 0x01	; 1
     97a:	cf 01       	movw	r24, r30
     97c:	08 95       	ret

0000097e <strcpy>:
     97e:	fb 01       	movw	r30, r22
     980:	dc 01       	movw	r26, r24
     982:	01 90       	ld	r0, Z+
     984:	0d 92       	st	X+, r0
     986:	00 20       	and	r0, r0
     988:	e1 f7       	brne	.-8      	; 0x982 <strcpy+0x4>
     98a:	08 95       	ret

0000098c <itoa>:
     98c:	fb 01       	movw	r30, r22
     98e:	9f 01       	movw	r18, r30
     990:	e8 94       	clt
     992:	42 30       	cpi	r20, 0x02	; 2
     994:	c4 f0       	brlt	.+48     	; 0x9c6 <itoa+0x3a>
     996:	45 32       	cpi	r20, 0x25	; 37
     998:	b4 f4       	brge	.+44     	; 0x9c6 <itoa+0x3a>
     99a:	4a 30       	cpi	r20, 0x0A	; 10
     99c:	29 f4       	brne	.+10     	; 0x9a8 <itoa+0x1c>
     99e:	97 fb       	bst	r25, 7
     9a0:	1e f4       	brtc	.+6      	; 0x9a8 <itoa+0x1c>
     9a2:	90 95       	com	r25
     9a4:	81 95       	neg	r24
     9a6:	9f 4f       	sbci	r25, 0xFF	; 255
     9a8:	64 2f       	mov	r22, r20
     9aa:	77 27       	eor	r23, r23
     9ac:	0e 94 a9 3d 	call	0x7b52	; 0x7b52 <__udivmodhi4>
     9b0:	80 5d       	subi	r24, 0xD0	; 208
     9b2:	8a 33       	cpi	r24, 0x3A	; 58
     9b4:	0c f0       	brlt	.+2      	; 0x9b8 <itoa+0x2c>
     9b6:	89 5d       	subi	r24, 0xD9	; 217
     9b8:	81 93       	st	Z+, r24
     9ba:	cb 01       	movw	r24, r22
     9bc:	00 97       	sbiw	r24, 0x00	; 0
     9be:	a1 f7       	brne	.-24     	; 0x9a8 <itoa+0x1c>
     9c0:	16 f4       	brtc	.+4      	; 0x9c6 <itoa+0x3a>
     9c2:	5d e2       	ldi	r21, 0x2D	; 45
     9c4:	51 93       	st	Z+, r21
     9c6:	10 82       	st	Z, r1
     9c8:	c9 01       	movw	r24, r18
     9ca:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <strrev>

000009ce <utoa>:
     9ce:	fb 01       	movw	r30, r22
     9d0:	9f 01       	movw	r18, r30
     9d2:	42 30       	cpi	r20, 0x02	; 2
     9d4:	74 f0       	brlt	.+28     	; 0x9f2 <utoa+0x24>
     9d6:	45 32       	cpi	r20, 0x25	; 37
     9d8:	64 f4       	brge	.+24     	; 0x9f2 <utoa+0x24>
     9da:	64 2f       	mov	r22, r20
     9dc:	77 27       	eor	r23, r23
     9de:	0e 94 a9 3d 	call	0x7b52	; 0x7b52 <__udivmodhi4>
     9e2:	80 5d       	subi	r24, 0xD0	; 208
     9e4:	8a 33       	cpi	r24, 0x3A	; 58
     9e6:	0c f0       	brlt	.+2      	; 0x9ea <utoa+0x1c>
     9e8:	89 5d       	subi	r24, 0xD9	; 217
     9ea:	81 93       	st	Z+, r24
     9ec:	cb 01       	movw	r24, r22
     9ee:	00 97       	sbiw	r24, 0x00	; 0
     9f0:	a1 f7       	brne	.-24     	; 0x9da <utoa+0xc>
     9f2:	10 82       	st	Z, r1
     9f4:	c9 01       	movw	r24, r18
     9f6:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <strrev>

000009fa <strrev>:
     9fa:	dc 01       	movw	r26, r24
     9fc:	fc 01       	movw	r30, r24
     9fe:	67 2f       	mov	r22, r23
     a00:	71 91       	ld	r23, Z+
     a02:	77 23       	and	r23, r23
     a04:	e1 f7       	brne	.-8      	; 0x9fe <strrev+0x4>
     a06:	32 97       	sbiw	r30, 0x02	; 2
     a08:	04 c0       	rjmp	.+8      	; 0xa12 <strrev+0x18>
     a0a:	7c 91       	ld	r23, X
     a0c:	6d 93       	st	X+, r22
     a0e:	70 83       	st	Z, r23
     a10:	62 91       	ld	r22, -Z
     a12:	ae 17       	cp	r26, r30
     a14:	bf 07       	cpc	r27, r31
     a16:	c8 f3       	brcs	.-14     	; 0xa0a <strrev+0x10>
     a18:	08 95       	ret

00000a1a <_GLOBAL__I_g_oneWirePin>:
#include "Global.h"

// Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)
OneWire g_oneWirePin(ONE_WIRE_PIN);
     a1a:	8c e3       	ldi	r24, 0x3C	; 60
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	68 e0       	ldi	r22, 0x08	; 8
     a20:	0e 94 22 2d 	call	0x5a44	; 0x5a44 <_ZN7OneWireC1Eh>

boolean g_isGrowboxStarted = false;
     a24:	08 95       	ret

00000a26 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord>:
    out += ' '; 
    return out;
  }

  static const __FlashStringHelper* getLogRecordDescription(LogRecord &logRecord) {
    byte data = (logRecord.data & B00111111);   
     a26:	fc 01       	movw	r30, r24
     a28:	24 81       	ldd	r18, Z+4	; 0x04
     a2a:	42 2f       	mov	r20, r18
     a2c:	4f 73       	andi	r20, 0x3F	; 63

    return out;
  }

  static boolean isEvent(const LogRecord &logRecord){
    return (logRecord.data & B11000000) == B00000000;
     a2e:	82 2f       	mov	r24, r18
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	80 7c       	andi	r24, 0xC0	; 192
     a34:	90 70       	andi	r25, 0x00	; 0
    return out;
  }

  static const __FlashStringHelper* getLogRecordDescription(LogRecord &logRecord) {
    byte data = (logRecord.data & B00111111);   
    if (isEvent(logRecord)){
     a36:	00 97       	sbiw	r24, 0x00	; 0
     a38:	91 f4       	brne	.+36     	; 0xa5e <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x38>
  static Event* findByIndex(byte index){
    //Serial.print("search ev: ");    
    //Serial.println(index);
    // Serial.print("lastAddedEvent ev: ");
    //Serial.println(lastAddedEvent->description);
    Event* currentItemPtr = lastAddedEvent;
     a3a:	e0 91 50 01 	lds	r30, 0x0150
     a3e:	f0 91 51 01 	lds	r31, 0x0151
     a42:	07 c0       	rjmp	.+14     	; 0xa52 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x2c>
    while (currentItemPtr != 0){
      //Serial.println(currentItemPtr->description);
      if (currentItemPtr->index == index) {
     a44:	82 81       	ldd	r24, Z+2	; 0x02
     a46:	84 17       	cp	r24, r20
     a48:	39 f0       	breq	.+14     	; 0xa58 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x32>
        return currentItemPtr;
      }
      currentItemPtr = (Event*)currentItemPtr->nextEvent;
     a4a:	80 81       	ld	r24, Z
     a4c:	91 81       	ldd	r25, Z+1	; 0x01
     a4e:	9c 01       	movw	r18, r24
     a50:	f9 01       	movw	r30, r18
    //Serial.print("search ev: ");    
    //Serial.println(index);
    // Serial.print("lastAddedEvent ev: ");
    //Serial.println(lastAddedEvent->description);
    Event* currentItemPtr = lastAddedEvent;
    while (currentItemPtr != 0){
     a52:	30 97       	sbiw	r30, 0x00	; 0
     a54:	b9 f7       	brne	.-18     	; 0xa44 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x1e>
     a56:	29 c0       	rjmp	.+82     	; 0xaaa <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x84>
      Event* foundItemPtr = Event::findByIndex(data);
      if (foundItemPtr == 0){
        return F("Unknown event");
      } 
      else {
        return foundItemPtr->description;
     a58:	23 81       	ldd	r18, Z+3	; 0x03
     a5a:	34 81       	ldd	r19, Z+4	; 0x04
     a5c:	24 c0       	rjmp	.+72     	; 0xaa6 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x80>
      }
    } 
    else if (isTemperature(logRecord)){
     a5e:	80 3c       	cpi	r24, 0xC0	; 192
     a60:	91 05       	cpc	r25, r1
     a62:	19 f4       	brne	.+6      	; 0xa6a <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x44>
      return FS(S_Temperature);
     a64:	2b e3       	ldi	r18, 0x3B	; 59
     a66:	32 e0       	ldi	r19, 0x02	; 2
     a68:	1e c0       	rjmp	.+60     	; 0xaa6 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x80>
    } 
    else if (isError(logRecord)){    
     a6a:	80 34       	cpi	r24, 0x40	; 64
     a6c:	91 05       	cpc	r25, r1
     a6e:	c9 f4       	brne	.+50     	; 0xaa2 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x7c>
      byte sequence = (data & B00001111); 
     a70:	52 2f       	mov	r21, r18
     a72:	5f 70       	andi	r21, 0x0F	; 15
      byte sequenceSize = (data & B00110000)>>4; 
     a74:	42 95       	swap	r20
     a76:	4f 70       	andi	r20, 0x0F	; 15
    this->sequenceSize = sequenceSize;
    this->description = description;
  }
  
  static Error* findByIndex(byte sequence, byte sequenceSize){
    Error* currentItemPtr = lastAddedItem;
     a78:	e0 91 4e 01 	lds	r30, 0x014E
     a7c:	f0 91 4f 01 	lds	r31, 0x014F
     a80:	0a c0       	rjmp	.+20     	; 0xa96 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x70>
    while (currentItemPtr != 0){
      if (currentItemPtr->sequence == sequence && currentItemPtr->sequenceSize == sequenceSize) {
     a82:	82 81       	ldd	r24, Z+2	; 0x02
     a84:	85 17       	cp	r24, r21
     a86:	19 f4       	brne	.+6      	; 0xa8e <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x68>
     a88:	83 81       	ldd	r24, Z+3	; 0x03
     a8a:	84 17       	cp	r24, r20
     a8c:	39 f0       	breq	.+14     	; 0xa9c <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x76>
        return currentItemPtr;
      }
      currentItemPtr = (Error*)currentItemPtr->nextError;
     a8e:	80 81       	ld	r24, Z
     a90:	91 81       	ldd	r25, Z+1	; 0x01
     a92:	9c 01       	movw	r18, r24
     a94:	f9 01       	movw	r30, r18
    this->description = description;
  }
  
  static Error* findByIndex(byte sequence, byte sequenceSize){
    Error* currentItemPtr = lastAddedItem;
    while (currentItemPtr != 0){
     a96:	30 97       	sbiw	r30, 0x00	; 0
     a98:	a1 f7       	brne	.-24     	; 0xa82 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x5c>
     a9a:	0a c0       	rjmp	.+20     	; 0xab0 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x8a>
      Error* foundItemPtr = Error::findByIndex(sequence, sequenceSize);
      if (foundItemPtr == 0){
        return F("Unknown error");
      } 
      else {
        return foundItemPtr->description;
     a9c:	24 81       	ldd	r18, Z+4	; 0x04
     a9e:	35 81       	ldd	r19, Z+5	; 0x05
     aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x80>
      }
    } 
    else {
      return F("Unknown");
     aa2:	27 ed       	ldi	r18, 0xD7	; 215
     aa4:	34 e0       	ldi	r19, 0x04	; 4
    }
  }
     aa6:	c9 01       	movw	r24, r18
     aa8:	08 95       	ret
  static const __FlashStringHelper* getLogRecordDescription(LogRecord &logRecord) {
    byte data = (logRecord.data & B00111111);   
    if (isEvent(logRecord)){
      Event* foundItemPtr = Event::findByIndex(data);
      if (foundItemPtr == 0){
        return F("Unknown event");
     aaa:	2d ee       	ldi	r18, 0xED	; 237
     aac:	34 e0       	ldi	r19, 0x04	; 4
     aae:	fb cf       	rjmp	.-10     	; 0xaa6 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x80>
    else if (isError(logRecord)){    
      byte sequence = (data & B00001111); 
      byte sequenceSize = (data & B00110000)>>4; 
      Error* foundItemPtr = Error::findByIndex(sequence, sequenceSize);
      if (foundItemPtr == 0){
        return F("Unknown error");
     ab0:	2f ed       	ldi	r18, 0xDF	; 223
     ab2:	34 e0       	ldi	r19, 0x04	; 4
     ab4:	f8 cf       	rjmp	.-16     	; 0xaa6 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord+0x80>

00000ab6 <_ZN10GB_Storage5writeEjPKvh>:
    else {
      return 0xFF;
    }
  }

  static void write(word address, const void* data, const byte sizeofData) {
     ab6:	af 92       	push	r10
     ab8:	bf 92       	push	r11
     aba:	df 92       	push	r13
     abc:	ef 92       	push	r14
     abe:	ff 92       	push	r15
     ac0:	0f 93       	push	r16
     ac2:	1f 93       	push	r17
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	ec 01       	movw	r28, r24
     aca:	5b 01       	movw	r10, r22
     acc:	00 e0       	ldi	r16, 0x00	; 0
     ace:	10 e0       	ldi	r17, 0x00	; 0
    for (word c = 0; c < sizeofData; c++){
     ad0:	e4 2e       	mov	r14, r20
     ad2:	ff 24       	eor	r15, r15
     ad4:	2a c0       	rjmp	.+84     	; 0xb2a <_ZN10GB_Storage5writeEjPKvh+0x74>
      byte value = ((byte*)data)[c];
     ad6:	f5 01       	movw	r30, r10
     ad8:	e0 0f       	add	r30, r16
     ada:	f1 1f       	adc	r31, r17
     adc:	d0 80       	ld	r13, Z
      return true;
    return false;
  }

  static void write(const word address, const byte data) {
    if (address >= CAPACITY){
     ade:	80 e1       	ldi	r24, 0x10	; 16
     ae0:	c0 30       	cpi	r28, 0x00	; 0
     ae2:	d8 07       	cpc	r29, r24
     ae4:	f8 f4       	brcc	.+62     	; 0xb24 <_ZN10GB_Storage5writeEjPKvh+0x6e>
      return;
    }
    Wire.beginTransmission(AT24C32);
     ae6:	8c ea       	ldi	r24, 0xAC	; 172
     ae8:	92 e0       	ldi	r25, 0x02	; 2
     aea:	60 e5       	ldi	r22, 0x50	; 80
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((byte)(address >> 8)); // MSB
     af2:	8c ea       	ldi	r24, 0xAC	; 172
     af4:	92 e0       	ldi	r25, 0x02	; 2
     af6:	6d 2f       	mov	r22, r29
     af8:	0e 94 ac 27 	call	0x4f58	; 0x4f58 <_ZN7TwoWire5writeEh>
    Wire.write((byte)(address & 0xFF)); // LSB
     afc:	8c ea       	ldi	r24, 0xAC	; 172
     afe:	92 e0       	ldi	r25, 0x02	; 2
     b00:	6c 2f       	mov	r22, r28
     b02:	0e 94 ac 27 	call	0x4f58	; 0x4f58 <_ZN7TwoWire5writeEh>
    Wire.write(data);
     b06:	8c ea       	ldi	r24, 0xAC	; 172
     b08:	92 e0       	ldi	r25, 0x02	; 2
     b0a:	6d 2d       	mov	r22, r13
     b0c:	0e 94 ac 27 	call	0x4f58	; 0x4f58 <_ZN7TwoWire5writeEh>
    Wire.endTransmission();  
     b10:	8c ea       	ldi	r24, 0xAC	; 172
     b12:	92 e0       	ldi	r25, 0x02	; 2
     b14:	0e 94 ef 27 	call	0x4fde	; 0x4fde <_ZN7TwoWire15endTransmissionEv>
    delay(10);  // http://www.hobbytronics.co.uk/arduino-external-eeprom
     b18:	6a e0       	ldi	r22, 0x0A	; 10
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	0e 94 19 32 	call	0x6432	; 0x6432 <delay>
      return 0xFF;
    }
  }

  static void write(word address, const void* data, const byte sizeofData) {
    for (word c = 0; c < sizeofData; c++){
     b24:	0f 5f       	subi	r16, 0xFF	; 255
     b26:	1f 4f       	sbci	r17, 0xFF	; 255
     b28:	21 96       	adiw	r28, 0x01	; 1
     b2a:	0e 15       	cp	r16, r14
     b2c:	1f 05       	cpc	r17, r15
     b2e:	98 f2       	brcs	.-90     	; 0xad6 <_ZN10GB_Storage5writeEjPKvh+0x20>
      byte value = ((byte*)data)[c];
      write(address + c, value);
    }
  }
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	1f 91       	pop	r17
     b36:	0f 91       	pop	r16
     b38:	ff 90       	pop	r15
     b3a:	ef 90       	pop	r14
     b3c:	df 90       	pop	r13
     b3e:	bf 90       	pop	r11
     b40:	af 90       	pop	r10
     b42:	08 95       	ret

00000b44 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord>:

  /////////////////////////////////////////////////////////////////////
  //                            LOG RECORDS                          //
  /////////////////////////////////////////////////////////////////////

  static boolean storeLogRecord(LogRecord &logRecord){ 
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	ec 01       	movw	r28, r24
    boolean storeLog = g_isGrowboxStarted && isBootRecordCorrect() && bootRecord.boolPreferencies.isLoggerEnabled && GB_Storage::isPresent(); // TODO check in another places
     b4a:	80 91 4a 01 	lds	r24, 0x014A
     b4e:	88 23       	and	r24, r24
     b50:	09 f4       	brne	.+2      	; 0xb54 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0x10>
     b52:	52 c0       	rjmp	.+164    	; 0xbf8 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb4>
  }

private :

  static boolean isBootRecordCorrect(){ // TODO rename it
    return (bootRecord.first_magic == MAGIC_NUMBER) && (bootRecord.last_magic == MAGIC_NUMBER);
     b54:	80 91 c1 01 	lds	r24, 0x01C1
     b58:	90 91 c2 01 	lds	r25, 0x01C2
     b5c:	85 55       	subi	r24, 0x55	; 85
     b5e:	9a 4a       	sbci	r25, 0xAA	; 170
     b60:	09 f0       	breq	.+2      	; 0xb64 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0x20>
     b62:	4a c0       	rjmp	.+148    	; 0xbf8 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb4>
     b64:	80 91 df 01 	lds	r24, 0x01DF
     b68:	90 91 e0 01 	lds	r25, 0x01E0
     b6c:	85 55       	subi	r24, 0x55	; 85
     b6e:	9a 4a       	sbci	r25, 0xAA	; 170
     b70:	09 f0       	breq	.+2      	; 0xb74 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0x30>
     b72:	42 c0       	rjmp	.+132    	; 0xbf8 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb4>
  /////////////////////////////////////////////////////////////////////
  //                            LOG RECORDS                          //
  /////////////////////////////////////////////////////////////////////

  static boolean storeLogRecord(LogRecord &logRecord){ 
    boolean storeLog = g_isGrowboxStarted && isBootRecordCorrect() && bootRecord.boolPreferencies.isLoggerEnabled && GB_Storage::isPresent(); // TODO check in another places
     b74:	80 91 cd 01 	lds	r24, 0x01CD
     b78:	86 95       	lsr	r24
     b7a:	83 70       	andi	r24, 0x03	; 3
     b7c:	e9 f1       	breq	.+122    	; 0xbf8 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb4>
  static const int AT24C32 = 0x50; // External EEPROM I2C address
public:
  static const word CAPACITY = 0x1000; // 4K byte = 32K bit

  static boolean isPresent(void) {     // check if the device is present
    Wire.beginTransmission(AT24C32);
     b7e:	8c ea       	ldi	r24, 0xAC	; 172
     b80:	92 e0       	ldi	r25, 0x02	; 2
     b82:	60 e5       	ldi	r22, 0x50	; 80
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <_ZN7TwoWire17beginTransmissionEi>
    if (Wire.endTransmission() == 0)
     b8a:	8c ea       	ldi	r24, 0xAC	; 172
     b8c:	92 e0       	ldi	r25, 0x02	; 2
     b8e:	0e 94 ef 27 	call	0x4fde	; 0x4fde <_ZN7TwoWire15endTransmissionEv>
     b92:	88 23       	and	r24, r24
     b94:	89 f5       	brne	.+98     	; 0xbf8 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb4>
    if (!storeLog){
      return false;
    }
    GB_Storage::write(bootRecord.nextLogRecordAddress, &logRecord, sizeof(LogRecord));
     b96:	80 91 cb 01 	lds	r24, 0x01CB
     b9a:	90 91 cc 01 	lds	r25, 0x01CC
     b9e:	be 01       	movw	r22, r28
     ba0:	45 e0       	ldi	r20, 0x05	; 5
     ba2:	0e 94 5b 05 	call	0xab6	; 0xab6 <_ZN10GB_Storage5writeEjPKvh>
  static boolean isBootRecordCorrect(){ // TODO rename it
    return (bootRecord.first_magic == MAGIC_NUMBER) && (bootRecord.last_magic == MAGIC_NUMBER);
  }

  static void increaseLogPointer(){
    bootRecord.nextLogRecordAddress += sizeof(LogRecord); 
     ba6:	80 91 cb 01 	lds	r24, 0x01CB
     baa:	90 91 cc 01 	lds	r25, 0x01CC
     bae:	05 96       	adiw	r24, 0x05	; 5
     bb0:	90 93 cc 01 	sts	0x01CC, r25
     bb4:	80 93 cb 01 	sts	0x01CB, r24
    if (bootRecord.nextLogRecordAddress >= (sizeof(BootRecord) + LOG_RECORD_OVERFLOW_OFFSET)){
     bb8:	8c 5f       	subi	r24, 0xFC	; 252
     bba:	9f 40       	sbci	r25, 0x0F	; 15
     bbc:	a0 f0       	brcs	.+40     	; 0xbe6 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xa2>
      bootRecord.nextLogRecordAddress = sizeof(BootRecord);
     bbe:	80 e2       	ldi	r24, 0x20	; 32
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	90 93 cc 01 	sts	0x01CC, r25
     bc6:	80 93 cb 01 	sts	0x01CB, r24
      if (!bootRecord.boolPreferencies.isLogOverflow){
     bca:	80 91 cd 01 	lds	r24, 0x01CD
     bce:	80 fd       	sbrc	r24, 0
     bd0:	0a c0       	rjmp	.+20     	; 0xbe6 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xa2>
        bootRecord.boolPreferencies.isLogOverflow = true;
     bd2:	81 60       	ori	r24, 0x01	; 1
     bd4:	80 93 cd 01 	sts	0x01CD, r24
        GB_Storage::write(OFFSETOF(BootRecord, boolPreferencies), &(bootRecord.boolPreferencies), sizeof(bootRecord.boolPreferencies)); 
     bd8:	8c e0       	ldi	r24, 0x0C	; 12
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	6d ec       	ldi	r22, 0xCD	; 205
     bde:	71 e0       	ldi	r23, 0x01	; 1
     be0:	41 e0       	ldi	r20, 0x01	; 1
     be2:	0e 94 5b 05 	call	0xab6	; 0xab6 <_ZN10GB_Storage5writeEjPKvh>
      }
    }
    GB_Storage::write(OFFSETOF(BootRecord, nextLogRecordAddress), &(bootRecord.nextLogRecordAddress), sizeof(bootRecord.nextLogRecordAddress)); 
     be6:	8a e0       	ldi	r24, 0x0A	; 10
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	6b ec       	ldi	r22, 0xCB	; 203
     bec:	71 e0       	ldi	r23, 0x01	; 1
     bee:	42 e0       	ldi	r20, 0x02	; 2
     bf0:	0e 94 5b 05 	call	0xab6	; 0xab6 <_ZN10GB_Storage5writeEjPKvh>
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	01 c0       	rjmp	.+2      	; 0xbfa <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord+0xb6>
    if (!storeLog){
      return false;
    }
    GB_Storage::write(bootRecord.nextLogRecordAddress, &logRecord, sizeof(LogRecord));
    increaseLogPointer();
    return true;
     bf8:	80 e0       	ldi	r24, 0x00	; 0
  }
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	08 95       	ret

00000c00 <_ZN10GB_Storage4readEj>:
    Wire.write(data);
    Wire.endTransmission();  
    delay(10);  // http://www.hobbytronics.co.uk/arduino-external-eeprom
  }

  static byte read(word address) {
     c00:	0f 93       	push	r16
     c02:	1f 93       	push	r17
     c04:	8c 01       	movw	r16, r24
    Wire.beginTransmission(AT24C32);
     c06:	8c ea       	ldi	r24, 0xAC	; 172
     c08:	92 e0       	ldi	r25, 0x02	; 2
     c0a:	60 e5       	ldi	r22, 0x50	; 80
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((byte)(address >> 8)); // MSB
     c12:	8c ea       	ldi	r24, 0xAC	; 172
     c14:	92 e0       	ldi	r25, 0x02	; 2
     c16:	61 2f       	mov	r22, r17
     c18:	0e 94 ac 27 	call	0x4f58	; 0x4f58 <_ZN7TwoWire5writeEh>
    Wire.write((byte)(address & 0xFF)); // LSB
     c1c:	8c ea       	ldi	r24, 0xAC	; 172
     c1e:	92 e0       	ldi	r25, 0x02	; 2
     c20:	60 2f       	mov	r22, r16
     c22:	0e 94 ac 27 	call	0x4f58	; 0x4f58 <_ZN7TwoWire5writeEh>
    Wire.endTransmission();
     c26:	8c ea       	ldi	r24, 0xAC	; 172
     c28:	92 e0       	ldi	r25, 0x02	; 2
     c2a:	0e 94 ef 27 	call	0x4fde	; 0x4fde <_ZN7TwoWire15endTransmissionEv>
    delay(10);  // http://www.hobbytronics.co.uk/arduino-external-eeprom
     c2e:	6a e0       	ldi	r22, 0x0A	; 10
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	0e 94 19 32 	call	0x6432	; 0x6432 <delay>
    Wire.requestFrom(AT24C32, 1);
     c3a:	8c ea       	ldi	r24, 0xAC	; 172
     c3c:	92 e0       	ldi	r25, 0x02	; 2
     c3e:	60 e5       	ldi	r22, 0x50	; 80
     c40:	70 e0       	ldi	r23, 0x00	; 0
     c42:	41 e0       	ldi	r20, 0x01	; 1
     c44:	50 e0       	ldi	r21, 0x00	; 0
     c46:	0e 94 00 28 	call	0x5000	; 0x5000 <_ZN7TwoWire11requestFromEii>
    if (Wire.available()) {
     c4a:	8c ea       	ldi	r24, 0xAC	; 172
     c4c:	92 e0       	ldi	r25, 0x02	; 2
     c4e:	0e 94 34 27 	call	0x4e68	; 0x4e68 <_ZN7TwoWire9availableEv>
     c52:	89 2b       	or	r24, r25
     c54:	11 f4       	brne	.+4      	; 0xc5a <_ZN10GB_Storage4readEj+0x5a>
     c56:	8f ef       	ldi	r24, 0xFF	; 255
     c58:	04 c0       	rjmp	.+8      	; 0xc62 <_ZN10GB_Storage4readEj+0x62>
      return Wire.read();
     c5a:	8c ea       	ldi	r24, 0xAC	; 172
     c5c:	92 e0       	ldi	r25, 0x02	; 2
     c5e:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <_ZN7TwoWire4readEv>
    } 
    else {
      return 0xFF;
    }
  }
     c62:	1f 91       	pop	r17
     c64:	0f 91       	pop	r16
     c66:	08 95       	ret

00000c68 <_ZL17flashStringCharAtPKcih>:

static int flashStringLength(const char PROGMEM* pstr){ 
  return strlen_P(pstr);
}

static char flashStringCharAt(const char PROGMEM* pstr, int index, boolean checkOverflow = true){ 
     c68:	0f 93       	push	r16
     c6a:	1f 93       	push	r17
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	ec 01       	movw	r28, r24
     c72:	8b 01       	movw	r16, r22
  if (checkOverflow){
     c74:	44 23       	and	r20, r20
     c76:	39 f0       	breq	.+14     	; 0xc86 <_ZL17flashStringCharAtPKcih+0x1e>
  /////////////////////////////////////////////////////////////////////
  //                         FALASH STRINGS                          //
  /////////////////////////////////////////////////////////////////////

static int flashStringLength(const char PROGMEM* pstr){ 
  return strlen_P(pstr);
     c78:	0e 94 94 04 	call	0x928	; 0x928 <strlen_P>
}

static char flashStringCharAt(const char PROGMEM* pstr, int index, boolean checkOverflow = true){ 
  if (checkOverflow){
    if (index >= flashStringLength(pstr)){
     c7c:	08 17       	cp	r16, r24
     c7e:	19 07       	cpc	r17, r25
     c80:	14 f0       	brlt	.+4      	; 0xc86 <_ZL17flashStringCharAtPKcih+0x1e>
     c82:	8f ef       	ldi	r24, 0xFF	; 255
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <_ZL17flashStringCharAtPKcih+0x26>
      return 0xFF; 
    }
  }
  return pgm_read_byte(pstr+index);
     c86:	c0 0f       	add	r28, r16
     c88:	d1 1f       	adc	r29, r17
     c8a:	fe 01       	movw	r30, r28
     c8c:	84 91       	lpm	r24, Z+
}
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	1f 91       	pop	r17
     c94:	0f 91       	pop	r16
     c96:	08 95       	ret

00000c98 <_ZL15flashStringLoadPKc>:
    }
  }
  return true; 
}

static String flashStringLoad(const char PROGMEM* pstr){
     c98:	cf 92       	push	r12
     c9a:	df 92       	push	r13
     c9c:	ef 92       	push	r14
     c9e:	ff 92       	push	r15
     ca0:	0f 93       	push	r16
     ca2:	1f 93       	push	r17
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	f8 2e       	mov	r15, r24
     caa:	e9 2e       	mov	r14, r25
     cac:	6b 01       	movw	r12, r22
  /////////////////////////////////////////////////////////////////////
  //                         FALASH STRINGS                          //
  /////////////////////////////////////////////////////////////////////

static int flashStringLength(const char PROGMEM* pstr){ 
  return strlen_P(pstr);
     cae:	cb 01       	movw	r24, r22
     cb0:	0e 94 94 04 	call	0x928	; 0x928 <strlen_P>
     cb4:	18 2f       	mov	r17, r24
     cb6:	09 2f       	mov	r16, r25
     cb8:	c8 2f       	mov	r28, r24
     cba:	d9 2f       	mov	r29, r25
}

static String flashStringLoad(const char PROGMEM* pstr){
  int length = flashStringLength(pstr);

  String str;
     cbc:	8f 2d       	mov	r24, r15
     cbe:	9e 2d       	mov	r25, r14
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	71 e0       	ldi	r23, 0x01	; 1
     cc4:	0e 94 8f 39 	call	0x731e	; 0x731e <_ZN6StringC1EPKc>
  str.reserve(length);
     cc8:	8f 2d       	mov	r24, r15
     cca:	9e 2d       	mov	r25, r14
     ccc:	61 2f       	mov	r22, r17
     cce:	70 2f       	mov	r23, r16
     cd0:	0e 94 57 38 	call	0x70ae	; 0x70ae <_ZN6String7reserveEj>
     cd4:	00 e0       	ldi	r16, 0x00	; 0
     cd6:	10 e0       	ldi	r17, 0x00	; 0
     cd8:	0c c0       	rjmp	.+24     	; 0xcf2 <_ZL15flashStringLoadPKc+0x5a>
  for (int i = 0; i< length; i++){
    str += flashStringCharAt(pstr, i, false);
     cda:	c6 01       	movw	r24, r12
     cdc:	b8 01       	movw	r22, r16
     cde:	40 e0       	ldi	r20, 0x00	; 0
     ce0:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZL17flashStringCharAtPKcih>
     ce4:	68 2f       	mov	r22, r24
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
     ce6:	8f 2d       	mov	r24, r15
     ce8:	9e 2d       	mov	r25, r14
     cea:	0e 94 2b 39 	call	0x7256	; 0x7256 <_ZN6String6concatEc>
static String flashStringLoad(const char PROGMEM* pstr){
  int length = flashStringLength(pstr);

  String str;
  str.reserve(length);
  for (int i = 0; i< length; i++){
     cee:	0f 5f       	subi	r16, 0xFF	; 255
     cf0:	1f 4f       	sbci	r17, 0xFF	; 255
     cf2:	0c 17       	cp	r16, r28
     cf4:	1d 07       	cpc	r17, r29
     cf6:	8c f3       	brlt	.-30     	; 0xcda <_ZL15flashStringLoadPKc+0x42>
    str += flashStringCharAt(pstr, i, false);
  }
  return str; 
}
     cf8:	8f 2d       	mov	r24, r15
     cfa:	9e 2d       	mov	r25, r14
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	1f 91       	pop	r17
     d02:	0f 91       	pop	r16
     d04:	ff 90       	pop	r15
     d06:	ef 90       	pop	r14
     d08:	df 90       	pop	r13
     d0a:	cf 90       	pop	r12
     d0c:	08 95       	ret

00000d0e <_ZN13GB_PrintDirty6getHEXEhh>:
    }
    out += number;
    return out.substring(out.length()-numberOfDigits);
  }

  static String getHEX(byte number, boolean addPrefix = false){
     d0e:	bf 92       	push	r11
     d10:	cf 92       	push	r12
     d12:	df 92       	push	r13
     d14:	ef 92       	push	r14
     d16:	ff 92       	push	r15
     d18:	0f 93       	push	r16
     d1a:	1f 93       	push	r17
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	6c 97       	sbiw	r28, 0x1c	; 28
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	d8 2e       	mov	r13, r24
     d32:	c9 2e       	mov	r12, r25
     d34:	16 2f       	mov	r17, r22
     d36:	b4 2e       	mov	r11, r20
    String out(number, HEX);
     d38:	40 e1       	ldi	r20, 0x10	; 16
     d3a:	0e 94 c2 39 	call	0x7384	; 0x7384 <_ZN6StringC1Ehh>
    out.toUpperCase();
     d3e:	8d 2d       	mov	r24, r13
     d40:	9c 2d       	mov	r25, r12
     d42:	0e 94 0b 38 	call	0x7016	; 0x7016 <_ZN6String11toUpperCaseEv>
    if(number < 0x10){
     d46:	10 31       	cpi	r17, 0x10	; 16
     d48:	f8 f4       	brcc	.+62     	; 0xd88 <_ZN13GB_PrintDirty6getHEXEhh+0x7a>
      out = String('0') + out;
     d4a:	7e 01       	movw	r14, r28
     d4c:	08 94       	sec
     d4e:	e1 1c       	adc	r14, r1
     d50:	f1 1c       	adc	r15, r1
     d52:	c7 01       	movw	r24, r14
     d54:	60 e3       	ldi	r22, 0x30	; 48
     d56:	0e 94 f4 39 	call	0x73e8	; 0x73e8 <_ZN6StringC1Ec>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
     d5a:	8e 01       	movw	r16, r28
     d5c:	08 5f       	subi	r16, 0xF8	; 248
     d5e:	1f 4f       	sbci	r17, 0xFF	; 255
     d60:	c8 01       	movw	r24, r16
     d62:	b7 01       	movw	r22, r14
     d64:	0e 94 77 3a 	call	0x74ee	; 0x74ee <_ZN6StringC2ERKS_>
     d68:	c8 01       	movw	r24, r16
     d6a:	6d 2d       	mov	r22, r13
     d6c:	7c 2d       	mov	r23, r12
     d6e:	0e 94 58 39 	call	0x72b0	; 0x72b0 <_ZplRK15StringSumHelperRK6String>
     d72:	bc 01       	movw	r22, r24
     d74:	8d 2d       	mov	r24, r13
     d76:	9c 2d       	mov	r25, r12
     d78:	0e 94 60 3a 	call	0x74c0	; 0x74c0 <_ZN6StringaSERKS_>
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
{
     d7c:	c8 01       	movw	r24, r16
     d7e:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD2Ev>
     d82:	c7 01       	movw	r24, r14
     d84:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
    }
    if (addPrefix){
     d88:	bb 20       	and	r11, r11
     d8a:	09 f1       	breq	.+66     	; 0xdce <_ZN13GB_PrintDirty6getHEXEhh+0xc0>
      out = flashStringLoad(S_0x) + out;
     d8c:	8f e0       	ldi	r24, 0x0F	; 15
     d8e:	e8 2e       	mov	r14, r24
     d90:	f1 2c       	mov	r15, r1
     d92:	ec 0e       	add	r14, r28
     d94:	fd 1e       	adc	r15, r29
     d96:	c7 01       	movw	r24, r14
     d98:	64 e7       	ldi	r22, 0x74	; 116
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	0e 94 4c 06 	call	0xc98	; 0xc98 <_ZL15flashStringLoadPKc>
public:
	StringSumHelper(const String &s) : String(s) {}
     da0:	8e 01       	movw	r16, r28
     da2:	0a 5e       	subi	r16, 0xEA	; 234
     da4:	1f 4f       	sbci	r17, 0xFF	; 255
     da6:	c8 01       	movw	r24, r16
     da8:	b7 01       	movw	r22, r14
     daa:	0e 94 77 3a 	call	0x74ee	; 0x74ee <_ZN6StringC2ERKS_>
     dae:	c8 01       	movw	r24, r16
     db0:	6d 2d       	mov	r22, r13
     db2:	7c 2d       	mov	r23, r12
     db4:	0e 94 58 39 	call	0x72b0	; 0x72b0 <_ZplRK15StringSumHelperRK6String>
     db8:	bc 01       	movw	r22, r24
     dba:	8d 2d       	mov	r24, r13
     dbc:	9c 2d       	mov	r25, r12
     dbe:	0e 94 60 3a 	call	0x74c0	; 0x74c0 <_ZN6StringaSERKS_>
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
{
     dc2:	c8 01       	movw	r24, r16
     dc4:	0e 94 88 3a 	call	0x7510	; 0x7510 <_ZN6StringD2Ev>
     dc8:	c7 01       	movw	r24, r14
     dca:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
    }
    return out;
  }
     dce:	8d 2d       	mov	r24, r13
     dd0:	9c 2d       	mov	r25, r12
     dd2:	6c 96       	adiw	r28, 0x1c	; 28
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	f8 94       	cli
     dd8:	de bf       	out	0x3e, r29	; 62
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	cd bf       	out	0x3d, r28	; 61
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	1f 91       	pop	r17
     de4:	0f 91       	pop	r16
     de6:	ff 90       	pop	r15
     de8:	ef 90       	pop	r14
     dea:	df 90       	pop	r13
     dec:	cf 90       	pop	r12
     dee:	bf 90       	pop	r11
     df0:	08 95       	ret

00000df2 <_ZL21flashStringStartsWithRK6StringPKc>:
    return false;
  }
  return (strncmp_P(cstr, pstr, cstr_length) == 0); // check this method
}

static boolean flashStringStartsWith(const String &str, const char PROGMEM* pstr){ 
     df2:	af 92       	push	r10
     df4:	bf 92       	push	r11
     df6:	cf 92       	push	r12
     df8:	df 92       	push	r13
     dfa:	ef 92       	push	r14
     dfc:	ff 92       	push	r15
     dfe:	1f 93       	push	r17
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
     e04:	5c 01       	movw	r10, r24
     e06:	6b 01       	movw	r12, r22
  /////////////////////////////////////////////////////////////////////
  //                         FALASH STRINGS                          //
  /////////////////////////////////////////////////////////////////////

static int flashStringLength(const char PROGMEM* pstr){ 
  return strlen_P(pstr);
     e08:	cb 01       	movw	r24, r22
     e0a:	0e 94 94 04 	call	0x928	; 0x928 <strlen_P>
     e0e:	7c 01       	movw	r14, r24
  return (strncmp_P(cstr, pstr, cstr_length) == 0); // check this method
}

static boolean flashStringStartsWith(const String &str, const char PROGMEM* pstr){ 
  int length = flashStringLength(pstr);
  if (length > str.length()) {
     e10:	f5 01       	movw	r30, r10
     e12:	84 81       	ldd	r24, Z+4	; 0x04
     e14:	95 81       	ldd	r25, Z+5	; 0x05
     e16:	8e 15       	cp	r24, r14
     e18:	9f 05       	cpc	r25, r15
     e1a:	a8 f0       	brcs	.+42     	; 0xe46 <_ZL21flashStringStartsWithRK6StringPKc+0x54>
     e1c:	c0 e0       	ldi	r28, 0x00	; 0
     e1e:	d0 e0       	ldi	r29, 0x00	; 0
     e20:	0d c0       	rjmp	.+26     	; 0xe3c <_ZL21flashStringStartsWithRK6StringPKc+0x4a>
    return false; 
  }
  for (int i = 0; i < length; i++){
    if (flashStringCharAt(pstr, i, false) != str[i]){
     e22:	c6 01       	movw	r24, r12
     e24:	be 01       	movw	r22, r28
     e26:	40 e0       	ldi	r20, 0x00	; 0
     e28:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZL17flashStringCharAtPKcih>
     e2c:	18 2f       	mov	r17, r24
     e2e:	c5 01       	movw	r24, r10
     e30:	be 01       	movw	r22, r28
     e32:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <_ZNK6StringixEj>
     e36:	18 17       	cp	r17, r24
     e38:	31 f4       	brne	.+12     	; 0xe46 <_ZL21flashStringStartsWithRK6StringPKc+0x54>
static boolean flashStringStartsWith(const String &str, const char PROGMEM* pstr){ 
  int length = flashStringLength(pstr);
  if (length > str.length()) {
    return false; 
  }
  for (int i = 0; i < length; i++){
     e3a:	21 96       	adiw	r28, 0x01	; 1
     e3c:	ce 15       	cp	r28, r14
     e3e:	df 05       	cpc	r29, r15
     e40:	84 f3       	brlt	.-32     	; 0xe22 <_ZL21flashStringStartsWithRK6StringPKc+0x30>
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	01 c0       	rjmp	.+2      	; 0xe48 <_ZL21flashStringStartsWithRK6StringPKc+0x56>
     e46:	80 e0       	ldi	r24, 0x00	; 0
    if (flashStringCharAt(pstr, i, false) != str[i]){
      return false;
    }
  }
  return true; 
}
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	1f 91       	pop	r17
     e4e:	ff 90       	pop	r15
     e50:	ef 90       	pop	r14
     e52:	df 90       	pop	r13
     e54:	cf 90       	pop	r12
     e56:	bf 90       	pop	r11
     e58:	af 90       	pop	r10
     e5a:	08 95       	ret

00000e5c <_ZL19flashStringEndsWithRK6StringPKc>:
    }
  }
  return true; 
}

static boolean flashStringEndsWith(const String &str, const char PROGMEM* pstr){ 
     e5c:	8f 92       	push	r8
     e5e:	9f 92       	push	r9
     e60:	af 92       	push	r10
     e62:	bf 92       	push	r11
     e64:	cf 92       	push	r12
     e66:	df 92       	push	r13
     e68:	ef 92       	push	r14
     e6a:	ff 92       	push	r15
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	5c 01       	movw	r10, r24
     e74:	6b 01       	movw	r12, r22
  /////////////////////////////////////////////////////////////////////
  //                         FALASH STRINGS                          //
  /////////////////////////////////////////////////////////////////////

static int flashStringLength(const char PROGMEM* pstr){ 
  return strlen_P(pstr);
     e76:	cb 01       	movw	r24, r22
     e78:	0e 94 94 04 	call	0x928	; 0x928 <strlen_P>
     e7c:	7c 01       	movw	r14, r24
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
     e7e:	f5 01       	movw	r30, r10
     e80:	84 81       	ldd	r24, Z+4	; 0x04
     e82:	95 81       	ldd	r25, Z+5	; 0x05
  return true; 
}

static boolean flashStringEndsWith(const String &str, const char PROGMEM* pstr){ 
  int length = flashStringLength(pstr);
  if (length > str.length()) {
     e84:	8e 15       	cp	r24, r14
     e86:	9f 05       	cpc	r25, r15
     e88:	d0 f0       	brcs	.+52     	; 0xebe <_ZL19flashStringEndsWithRK6StringPKc+0x62>
    return false; 
  }
  int strOffset = str.length() - length;
     e8a:	4c 01       	movw	r8, r24
     e8c:	8e 18       	sub	r8, r14
     e8e:	9f 08       	sbc	r9, r15
     e90:	c0 e0       	ldi	r28, 0x00	; 0
     e92:	d0 e0       	ldi	r29, 0x00	; 0
     e94:	0f c0       	rjmp	.+30     	; 0xeb4 <_ZL19flashStringEndsWithRK6StringPKc+0x58>
  for (int i = 0; i < length; i++){
    if (flashStringCharAt(pstr, i, false) != str[strOffset+i]){
     e96:	c6 01       	movw	r24, r12
     e98:	be 01       	movw	r22, r28
     e9a:	40 e0       	ldi	r20, 0x00	; 0
     e9c:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZL17flashStringCharAtPKcih>
     ea0:	18 2f       	mov	r17, r24
     ea2:	be 01       	movw	r22, r28
     ea4:	68 0d       	add	r22, r8
     ea6:	79 1d       	adc	r23, r9
     ea8:	c5 01       	movw	r24, r10
     eaa:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <_ZNK6StringixEj>
     eae:	18 17       	cp	r17, r24
     eb0:	31 f4       	brne	.+12     	; 0xebe <_ZL19flashStringEndsWithRK6StringPKc+0x62>
  int length = flashStringLength(pstr);
  if (length > str.length()) {
    return false; 
  }
  int strOffset = str.length() - length;
  for (int i = 0; i < length; i++){
     eb2:	21 96       	adiw	r28, 0x01	; 1
     eb4:	ce 15       	cp	r28, r14
     eb6:	df 05       	cpc	r29, r15
     eb8:	74 f3       	brlt	.-36     	; 0xe96 <_ZL19flashStringEndsWithRK6StringPKc+0x3a>
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	01 c0       	rjmp	.+2      	; 0xec0 <_ZL19flashStringEndsWithRK6StringPKc+0x64>
     ebe:	80 e0       	ldi	r24, 0x00	; 0
    if (flashStringCharAt(pstr, i, false) != str[strOffset+i]){
      return false;
    }
  }
  return true; 
}
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	1f 91       	pop	r17
     ec6:	ff 90       	pop	r15
     ec8:	ef 90       	pop	r14
     eca:	df 90       	pop	r13
     ecc:	cf 90       	pop	r12
     ece:	bf 90       	pop	r11
     ed0:	af 90       	pop	r10
     ed2:	9f 90       	pop	r9
     ed4:	8f 90       	pop	r8
     ed6:	08 95       	ret

00000ed8 <_ZL17flashStringEqualsRK6StringPKc>:
    }
  }
  return pgm_read_byte(pstr+index);
}

static boolean flashStringEquals(const String &str, const char PROGMEM* pstr){ 
     ed8:	af 92       	push	r10
     eda:	bf 92       	push	r11
     edc:	cf 92       	push	r12
     ede:	df 92       	push	r13
     ee0:	ef 92       	push	r14
     ee2:	ff 92       	push	r15
     ee4:	1f 93       	push	r17
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	5c 01       	movw	r10, r24
     eec:	6b 01       	movw	r12, r22
  /////////////////////////////////////////////////////////////////////
  //                         FALASH STRINGS                          //
  /////////////////////////////////////////////////////////////////////

static int flashStringLength(const char PROGMEM* pstr){ 
  return strlen_P(pstr);
     eee:	cb 01       	movw	r24, r22
     ef0:	0e 94 94 04 	call	0x928	; 0x928 <strlen_P>
     ef4:	7c 01       	movw	r14, r24
  return pgm_read_byte(pstr+index);
}

static boolean flashStringEquals(const String &str, const char PROGMEM* pstr){ 
  int length = flashStringLength(pstr);
  if (length != str.length()) {
     ef6:	f5 01       	movw	r30, r10
     ef8:	84 81       	ldd	r24, Z+4	; 0x04
     efa:	95 81       	ldd	r25, Z+5	; 0x05
     efc:	e8 16       	cp	r14, r24
     efe:	f9 06       	cpc	r15, r25
     f00:	a9 f4       	brne	.+42     	; 0xf2c <_ZL17flashStringEqualsRK6StringPKc+0x54>
     f02:	c0 e0       	ldi	r28, 0x00	; 0
     f04:	d0 e0       	ldi	r29, 0x00	; 0
     f06:	0d c0       	rjmp	.+26     	; 0xf22 <_ZL17flashStringEqualsRK6StringPKc+0x4a>
    return false; 
  }
  for (int i = 0; i < length; i++){
    if (flashStringCharAt(pstr, i, false) != str[i]){
     f08:	c6 01       	movw	r24, r12
     f0a:	be 01       	movw	r22, r28
     f0c:	40 e0       	ldi	r20, 0x00	; 0
     f0e:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZL17flashStringCharAtPKcih>
     f12:	18 2f       	mov	r17, r24
     f14:	c5 01       	movw	r24, r10
     f16:	be 01       	movw	r22, r28
     f18:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <_ZNK6StringixEj>
     f1c:	18 17       	cp	r17, r24
     f1e:	31 f4       	brne	.+12     	; 0xf2c <_ZL17flashStringEqualsRK6StringPKc+0x54>
static boolean flashStringEquals(const String &str, const char PROGMEM* pstr){ 
  int length = flashStringLength(pstr);
  if (length != str.length()) {
    return false; 
  }
  for (int i = 0; i < length; i++){
     f20:	21 96       	adiw	r28, 0x01	; 1
     f22:	ce 15       	cp	r28, r14
     f24:	df 05       	cpc	r29, r15
     f26:	84 f3       	brlt	.-32     	; 0xf08 <_ZL17flashStringEqualsRK6StringPKc+0x30>
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	01 c0       	rjmp	.+2      	; 0xf2e <_ZL17flashStringEqualsRK6StringPKc+0x56>
     f2c:	80 e0       	ldi	r24, 0x00	; 0
    if (flashStringCharAt(pstr, i, false) != str[i]){
      return false;
    }
  }
  return true;
}
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	1f 91       	pop	r17
     f34:	ff 90       	pop	r15
     f36:	ef 90       	pop	r14
     f38:	df 90       	pop	r13
     f3a:	cf 90       	pop	r12
     f3c:	bf 90       	pop	r11
     f3e:	af 90       	pop	r10
     f40:	08 95       	ret

00000f42 <_ZN13GB_PrintDirty8printHEXERK6String>:
    out += getFixedDigitsString(tmYearToCalendar(tm.Year), 4); 
    out += ']';
    return out;
  } 

  static void printHEX(const String &input){   
     f42:	cf 92       	push	r12
     f44:	df 92       	push	r13
     f46:	ef 92       	push	r14
     f48:	ff 92       	push	r15
     f4a:	0f 93       	push	r16
     f4c:	1f 93       	push	r17
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	27 97       	sbiw	r28, 0x07	; 7
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	f8 94       	cli
     f5c:	de bf       	out	0x3e, r29	; 62
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	cd bf       	out	0x3d, r28	; 61
     f62:	7c 01       	movw	r14, r24
     f64:	00 e0       	ldi	r16, 0x00	; 0
     f66:	10 e0       	ldi	r17, 0x00	; 0
    for(int i = 0; i<input.length(); i++){
      byte c = input[i];
      Serial.print(getHEX(c, 2));
     f68:	6e 01       	movw	r12, r28
     f6a:	08 94       	sec
     f6c:	c1 1c       	adc	r12, r1
     f6e:	d1 1c       	adc	r13, r1
     f70:	1e c0       	rjmp	.+60     	; 0xfae <_ZN13GB_PrintDirty8printHEXERK6String+0x6c>
    return out;
  } 

  static void printHEX(const String &input){   
    for(int i = 0; i<input.length(); i++){
      byte c = input[i];
     f72:	c7 01       	movw	r24, r14
     f74:	b8 01       	movw	r22, r16
     f76:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <_ZNK6StringixEj>
     f7a:	68 2f       	mov	r22, r24
      Serial.print(getHEX(c, 2));
     f7c:	c6 01       	movw	r24, r12
     f7e:	42 e0       	ldi	r20, 0x02	; 2
     f80:	0e 94 87 06 	call	0xd0e	; 0xd0e <_ZN13GB_PrintDirty6getHEXEhh>
     f84:	88 eb       	ldi	r24, 0xB8	; 184
     f86:	93 e0       	ldi	r25, 0x03	; 3
     f88:	b6 01       	movw	r22, r12
     f8a:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <_ZN5Print5printERK6String>
     f8e:	c6 01       	movw	r24, r12
     f90:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
      if ((i+1)<input.length()) {
     f94:	0f 5f       	subi	r16, 0xFF	; 255
     f96:	1f 4f       	sbci	r17, 0xFF	; 255
     f98:	f7 01       	movw	r30, r14
     f9a:	84 81       	ldd	r24, Z+4	; 0x04
     f9c:	95 81       	ldd	r25, Z+5	; 0x05
     f9e:	08 17       	cp	r16, r24
     fa0:	19 07       	cpc	r17, r25
     fa2:	28 f4       	brcc	.+10     	; 0xfae <_ZN13GB_PrintDirty8printHEXERK6String+0x6c>
        Serial.print(' '); 
     fa4:	88 eb       	ldi	r24, 0xB8	; 184
     fa6:	93 e0       	ldi	r25, 0x03	; 3
     fa8:	60 e2       	ldi	r22, 0x20	; 32
     faa:	0e 94 71 36 	call	0x6ce2	; 0x6ce2 <_ZN5Print5printEc>
    out += ']';
    return out;
  } 

  static void printHEX(const String &input){   
    for(int i = 0; i<input.length(); i++){
     fae:	f7 01       	movw	r30, r14
     fb0:	84 81       	ldd	r24, Z+4	; 0x04
     fb2:	95 81       	ldd	r25, Z+5	; 0x05
     fb4:	08 17       	cp	r16, r24
     fb6:	19 07       	cpc	r17, r25
     fb8:	e0 f2       	brcs	.-72     	; 0xf72 <_ZN13GB_PrintDirty8printHEXERK6String+0x30>
      Serial.print(getHEX(c, 2));
      if ((i+1)<input.length()) {
        Serial.print(' '); 
      }
    }
  }  
     fba:	27 96       	adiw	r28, 0x07	; 7
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	de bf       	out	0x3e, r29	; 62
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	cd bf       	out	0x3d, r28	; 61
     fc6:	cf 91       	pop	r28
     fc8:	df 91       	pop	r29
     fca:	1f 91       	pop	r17
     fcc:	0f 91       	pop	r16
     fce:	ff 90       	pop	r15
     fd0:	ef 90       	pop	r14
     fd2:	df 90       	pop	r13
     fd4:	cf 90       	pop	r12
     fd6:	08 95       	ret

00000fd8 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String>:

  static void printWithoutCRLF(const String &input){   
     fd8:	0f 93       	push	r16
     fda:	1f 93       	push	r17
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	8c 01       	movw	r16, r24
     fe2:	c0 e0       	ldi	r28, 0x00	; 0
     fe4:	d0 e0       	ldi	r29, 0x00	; 0
     fe6:	22 c0       	rjmp	.+68     	; 0x102c <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x54>
    for (int i = 0; i<input.length(); i++){
      if (input[i] == '\r'){
     fe8:	c8 01       	movw	r24, r16
     fea:	be 01       	movw	r22, r28
     fec:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <_ZNK6StringixEj>
     ff0:	8d 30       	cpi	r24, 0x0D	; 13
     ff2:	29 f4       	brne	.+10     	; 0xffe <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x26>
        Serial.print(F("\\r"));
     ff4:	88 eb       	ldi	r24, 0xB8	; 184
     ff6:	93 e0       	ldi	r25, 0x03	; 3
     ff8:	6f ea       	ldi	r22, 0xAF	; 175
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	0a c0       	rjmp	.+20     	; 0x1012 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x3a>
      } 
      else if (input[i] == '\n'){
     ffe:	c8 01       	movw	r24, r16
    1000:	be 01       	movw	r22, r28
    1002:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <_ZNK6StringixEj>
    1006:	8a 30       	cpi	r24, 0x0A	; 10
    1008:	39 f4       	brne	.+14     	; 0x1018 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x40>
        Serial.print(F("\\n"));
    100a:	88 eb       	ldi	r24, 0xB8	; 184
    100c:	93 e0       	ldi	r25, 0x03	; 3
    100e:	6c ea       	ldi	r22, 0xAC	; 172
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_ZN5Print5printEPK19__FlashStringHelper>
    1016:	09 c0       	rjmp	.+18     	; 0x102a <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x52>
      } 
      else {
        Serial.print(input[i]);
    1018:	c8 01       	movw	r24, r16
    101a:	be 01       	movw	r22, r28
    101c:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <_ZNK6StringixEj>
    1020:	68 2f       	mov	r22, r24
    1022:	88 eb       	ldi	r24, 0xB8	; 184
    1024:	93 e0       	ldi	r25, 0x03	; 3
    1026:	0e 94 71 36 	call	0x6ce2	; 0x6ce2 <_ZN5Print5printEc>
      }
    }
  }  

  static void printWithoutCRLF(const String &input){   
    for (int i = 0; i<input.length(); i++){
    102a:	21 96       	adiw	r28, 0x01	; 1
    102c:	f8 01       	movw	r30, r16
    102e:	84 81       	ldd	r24, Z+4	; 0x04
    1030:	95 81       	ldd	r25, Z+5	; 0x05
    1032:	c8 17       	cp	r28, r24
    1034:	d9 07       	cpc	r29, r25
    1036:	c0 f2       	brcs	.-80     	; 0xfe8 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String+0x10>
      } 
      else {
        Serial.print(input[i]);
      }
    }
  }
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	1f 91       	pop	r17
    103e:	0f 91       	pop	r16
    1040:	08 95       	ret

00001042 <_ZL21printFatalErrorOnBootPK19__FlashStringHelper>:
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
    1046:	ec 01       	movw	r28, r24
    1048:	80 91 ae 01 	lds	r24, 0x01AE
    104c:	88 23       	and	r24, r24
    104e:	59 f0       	breq	.+22     	; 0x1066 <_ZL21printFatalErrorOnBootPK19__FlashStringHelper+0x24>
    1050:	88 eb       	ldi	r24, 0xB8	; 184
    1052:	93 e0       	ldi	r25, 0x03	; 3
    1054:	6e eb       	ldi	r22, 0xBE	; 190
    1056:	75 e0       	ldi	r23, 0x05	; 5
    1058:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_ZN5Print5printEPK19__FlashStringHelper>
    105c:	88 eb       	ldi	r24, 0xB8	; 184
    105e:	93 e0       	ldi	r25, 0x03	; 3
    1060:	be 01       	movw	r22, r28
    1062:	0e 94 99 36 	call	0x6d32	; 0x6d32 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	08 95       	ret

0000106c <_ZL17printStatusOnBootPK19__FlashStringHelper>:
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	ec 01       	movw	r28, r24
    1072:	80 91 ae 01 	lds	r24, 0x01AE
    1076:	88 23       	and	r24, r24
    1078:	89 f0       	breq	.+34     	; 0x109c <_ZL17printStatusOnBootPK19__FlashStringHelper+0x30>
    107a:	88 eb       	ldi	r24, 0xB8	; 184
    107c:	93 e0       	ldi	r25, 0x03	; 3
    107e:	60 ed       	ldi	r22, 0xD0	; 208
    1080:	75 e0       	ldi	r23, 0x05	; 5
    1082:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_ZN5Print5printEPK19__FlashStringHelper>
    1086:	88 eb       	ldi	r24, 0xB8	; 184
    1088:	93 e0       	ldi	r25, 0x03	; 3
    108a:	be 01       	movw	r22, r28
    108c:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_ZN5Print5printEPK19__FlashStringHelper>
    1090:	88 eb       	ldi	r24, 0xB8	; 184
    1092:	93 e0       	ldi	r25, 0x03	; 3
    1094:	6c ec       	ldi	r22, 0xCC	; 204
    1096:	75 e0       	ldi	r23, 0x05	; 5
    1098:	0e 94 99 36 	call	0x6d32	; 0x6d32 <_ZN5Print7printlnEPK19__FlashStringHelper>
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	08 95       	ret

000010a2 <_ZN15GB_SerialHelper17cleanSerialBufferEv>:
      }      
    }
  }

  static void cleanSerialBuffer(){
    delay(10);
    10a2:	6a e0       	ldi	r22, 0x0A	; 10
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	0e 94 19 32 	call	0x6432	; 0x6432 <delay>
    10ae:	04 c0       	rjmp	.+8      	; 0x10b8 <_ZN15GB_SerialHelper17cleanSerialBufferEv+0x16>
    while (Serial.available()){
      Serial.read();
    10b0:	88 eb       	ldi	r24, 0xB8	; 184
    10b2:	93 e0       	ldi	r25, 0x03	; 3
    10b4:	0e 94 44 35 	call	0x6a88	; 0x6a88 <_ZN14HardwareSerial4readEv>
    }
  }

  static void cleanSerialBuffer(){
    delay(10);
    while (Serial.available()){
    10b8:	88 eb       	ldi	r24, 0xB8	; 184
    10ba:	93 e0       	ldi	r25, 0x03	; 3
    10bc:	0e 94 13 35 	call	0x6a26	; 0x6a26 <_ZN14HardwareSerial9availableEv>
    10c0:	89 2b       	or	r24, r25
    10c2:	b1 f7       	brne	.-20     	; 0x10b0 <_ZN15GB_SerialHelper17cleanSerialBufferEv+0xe>
      Serial.read();
    }
  }
    10c4:	08 95       	ret

000010c6 <_ZN15GB_SerialHelper13printDirtyEndEv>:
  static /*volatile*/ boolean useSerialMonitor;
  static /*volatile*/ boolean useSerialWifi;


  static void printDirtyEnd(){
    if (useSerialWifi) {
    10c6:	80 91 af 01 	lds	r24, 0x01AF
    10ca:	88 23       	and	r24, r24
    10cc:	11 f0       	breq	.+4      	; 0x10d2 <_ZN15GB_SerialHelper13printDirtyEndEv+0xc>
      cleanSerialBuffer();
    10ce:	0e 94 51 08 	call	0x10a2	; 0x10a2 <_ZN15GB_SerialHelper17cleanSerialBufferEv>
    10d2:	08 95       	ret

000010d4 <_ZN15GB_SerialHelper15showWifiMessageEPK19__FlashStringHelperh>:
    sendWifiCloseConnection(wifiPortDescriptor);
  }

private:

  static void showWifiMessage(const __FlashStringHelper* str, boolean newLine = true){ //TODO 
    10d4:	1f 93       	push	r17
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	ec 01       	movw	r28, r24
    10dc:	16 2f       	mov	r17, r22
    if (useSerialMonitor){
    10de:	80 91 ae 01 	lds	r24, 0x01AE
    10e2:	88 23       	and	r24, r24
    10e4:	99 f0       	breq	.+38     	; 0x110c <_ZN15GB_SerialHelper15showWifiMessageEPK19__FlashStringHelperh+0x38>
      Serial.print(FS(S_WIFI));
    10e6:	88 eb       	ldi	r24, 0xB8	; 184
    10e8:	93 e0       	ldi	r25, 0x03	; 3
    10ea:	65 ea       	ldi	r22, 0xA5	; 165
    10ec:	70 e0       	ldi	r23, 0x00	; 0
    10ee:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(str);
    10f2:	88 eb       	ldi	r24, 0xB8	; 184
    10f4:	93 e0       	ldi	r25, 0x03	; 3
    10f6:	be 01       	movw	r22, r28
    10f8:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_ZN5Print5printEPK19__FlashStringHelper>
      if (newLine){  
    10fc:	11 23       	and	r17, r17
    10fe:	31 f0       	breq	.+12     	; 0x110c <_ZN15GB_SerialHelper15showWifiMessageEPK19__FlashStringHelperh+0x38>
        Serial.println();
    1100:	88 eb       	ldi	r24, 0xB8	; 184
    1102:	93 e0       	ldi	r25, 0x03	; 3
    1104:	0e 94 79 36 	call	0x6cf2	; 0x6cf2 <_ZN5Print7printlnEv>
        printDirtyEnd();        
    1108:	0e 94 63 08 	call	0x10c6	; 0x10c6 <_ZN15GB_SerialHelper13printDirtyEndEv>
      }      
    }
  }
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	1f 91       	pop	r17
    1112:	08 95       	ret

00001114 <_ZL16Serial_timedReadPc>:

  static const unsigned long Stream_timeout = 1000; // Like in Stram.h

  // WARNING! This is adapted copy of Stream.h, Serial.h, and HardwareSerial.h
  // functionality
  static boolean Serial_timedRead(char* c){
    1114:	ef 92       	push	r14
    1116:	ff 92       	push	r15
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	ec 01       	movw	r28, r24
    unsigned long _startMillis = millis();
    1122:	0e 94 0b 32 	call	0x6416	; 0x6416 <millis>
    1126:	7b 01       	movw	r14, r22
    1128:	8c 01       	movw	r16, r24
    unsigned long _currentMillis;
    do {
      if (Serial.available()){
    112a:	88 eb       	ldi	r24, 0xB8	; 184
    112c:	93 e0       	ldi	r25, 0x03	; 3
    112e:	0e 94 13 35 	call	0x6a26	; 0x6a26 <_ZN14HardwareSerial9availableEv>
    1132:	89 2b       	or	r24, r25
    1134:	39 f0       	breq	.+14     	; 0x1144 <_ZL16Serial_timedReadPc+0x30>
        *c = (char) Serial.read();
    1136:	88 eb       	ldi	r24, 0xB8	; 184
    1138:	93 e0       	ldi	r25, 0x03	; 3
    113a:	0e 94 44 35 	call	0x6a88	; 0x6a88 <_ZN14HardwareSerial4readEv>
    113e:	88 83       	st	Y, r24
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	15 c0       	rjmp	.+42     	; 0x116e <_ZL16Serial_timedReadPc+0x5a>
        return true;   
      }
      _currentMillis = millis();
    1144:	0e 94 0b 32 	call	0x6416	; 0x6416 <millis>
    1148:	9b 01       	movw	r18, r22
    114a:	ac 01       	movw	r20, r24
  // WARNING! This is adapted copy of Stream.h, Serial.h, and HardwareSerial.h
  // functionality
  static boolean Serial_timedRead(char* c){
    unsigned long _startMillis = millis();
    unsigned long _currentMillis;
    do {
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	8e 19       	sub	r24, r14
    1152:	9f 09       	sbc	r25, r15
    1154:	a0 0b       	sbc	r26, r16
    1156:	b1 0b       	sbc	r27, r17
    1158:	88 5e       	subi	r24, 0xE8	; 232
    115a:	93 40       	sbci	r25, 0x03	; 3
    115c:	a0 40       	sbci	r26, 0x00	; 0
    115e:	b0 40       	sbci	r27, 0x00	; 0
    1160:	20 f3       	brcs	.-56     	; 0x112a <_ZL16Serial_timedReadPc+0x16>
    1162:	2e 15       	cp	r18, r14
    1164:	3f 05       	cpc	r19, r15
    1166:	40 07       	cpc	r20, r16
    1168:	51 07       	cpc	r21, r17
    116a:	f8 f2       	brcs	.-66     	; 0x112a <_ZL16Serial_timedReadPc+0x16>
    116c:	80 e0       	ldi	r24, 0x00	; 0
    } 
    while(((_currentMillis - _startMillis) < Stream_timeout) || (_currentMillis < _startMillis));  // Overflow check 
    //while((_currentMillis - _startMillis) < Stream_timeout); 
    //while(millis() - _startMillis < Stream_timeout); 
    return false;     // false indicates timeout
  }
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	1f 91       	pop	r17
    1174:	0f 91       	pop	r16
    1176:	ff 90       	pop	r15
    1178:	ef 90       	pop	r14
    117a:	08 95       	ret

0000117c <_ZL22Serial_readStringUntilR6StringjPKc>:
      } 
    }
    return count;
  }  

  static size_t Serial_readStringUntil(String& str, size_t length, const char PROGMEM* pstr){      
    117c:	8f 92       	push	r8
    117e:	9f 92       	push	r9
    1180:	af 92       	push	r10
    1182:	bf 92       	push	r11
    1184:	cf 92       	push	r12
    1186:	df 92       	push	r13
    1188:	ef 92       	push	r14
    118a:	ff 92       	push	r15
    118c:	0f 93       	push	r16
    118e:	1f 93       	push	r17
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	0f 92       	push	r0
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	7c 01       	movw	r14, r24
    119c:	5b 01       	movw	r10, r22
    119e:	6a 01       	movw	r12, r20
    11a0:	00 e0       	ldi	r16, 0x00	; 0
    11a2:	10 e0       	ldi	r17, 0x00	; 0
    char c;
    size_t count = 0;
    while (count < length) {
      if (!Serial_timedRead(&c)){
    11a4:	4e 01       	movw	r8, r28
    11a6:	08 94       	sec
    11a8:	81 1c       	adc	r8, r1
    11aa:	91 1c       	adc	r9, r1
    11ac:	11 c0       	rjmp	.+34     	; 0x11d0 <_ZL22Serial_readStringUntilR6StringjPKc+0x54>
    11ae:	c4 01       	movw	r24, r8
    11b0:	0e 94 8a 08 	call	0x1114	; 0x1114 <_ZL16Serial_timedReadPc>
    11b4:	88 23       	and	r24, r24
    11b6:	79 f0       	breq	.+30     	; 0x11d6 <_ZL22Serial_readStringUntilR6StringjPKc+0x5a>
        break;
      }
      count++;
    11b8:	0f 5f       	subi	r16, 0xFF	; 255
    11ba:	1f 4f       	sbci	r17, 0xFF	; 255
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    11bc:	c7 01       	movw	r24, r14
    11be:	69 81       	ldd	r22, Y+1	; 0x01
    11c0:	0e 94 2b 39 	call	0x7256	; 0x7256 <_ZN6String6concatEc>
      str +=c;
      if (flashStringEndsWith(str, pstr)){
    11c4:	c7 01       	movw	r24, r14
    11c6:	b6 01       	movw	r22, r12
    11c8:	0e 94 2e 07 	call	0xe5c	; 0xe5c <_ZL19flashStringEndsWithRK6StringPKc>
    11cc:	88 23       	and	r24, r24
    11ce:	19 f4       	brne	.+6      	; 0x11d6 <_ZL22Serial_readStringUntilR6StringjPKc+0x5a>
  }  

  static size_t Serial_readStringUntil(String& str, size_t length, const char PROGMEM* pstr){      
    char c;
    size_t count = 0;
    while (count < length) {
    11d0:	0a 15       	cp	r16, r10
    11d2:	1b 05       	cpc	r17, r11
    11d4:	60 f3       	brcs	.-40     	; 0x11ae <_ZL22Serial_readStringUntilR6StringjPKc+0x32>
      if (flashStringEndsWith(str, pstr)){
        break;
      } 
    }
    return count;
  } 
    11d6:	c8 01       	movw	r24, r16
    11d8:	0f 90       	pop	r0
    11da:	cf 91       	pop	r28
    11dc:	df 91       	pop	r29
    11de:	1f 91       	pop	r17
    11e0:	0f 91       	pop	r16
    11e2:	ff 90       	pop	r15
    11e4:	ef 90       	pop	r14
    11e6:	df 90       	pop	r13
    11e8:	cf 90       	pop	r12
    11ea:	bf 90       	pop	r11
    11ec:	af 90       	pop	r10
    11ee:	9f 90       	pop	r9
    11f0:	8f 90       	pop	r8
    11f2:	08 95       	ret

000011f4 <_ZL16Serial_skipBytesj>:
      count++;
    }
    return count;
  }

  static size_t Serial_skipBytes(size_t length) {
    11f4:	cf 92       	push	r12
    11f6:	df 92       	push	r13
    11f8:	ef 92       	push	r14
    11fa:	ff 92       	push	r15
    11fc:	0f 93       	push	r16
    11fe:	1f 93       	push	r17
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	0f 92       	push	r0
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	7c 01       	movw	r14, r24
    120c:	00 e0       	ldi	r16, 0x00	; 0
    120e:	10 e0       	ldi	r17, 0x00	; 0
    char c;
    size_t count = 0;
    while (count < length) {
      if (!Serial_timedRead(&c)){
    1210:	6e 01       	movw	r12, r28
    1212:	08 94       	sec
    1214:	c1 1c       	adc	r12, r1
    1216:	d1 1c       	adc	r13, r1
    1218:	07 c0       	rjmp	.+14     	; 0x1228 <_ZL16Serial_skipBytesj+0x34>
    121a:	c6 01       	movw	r24, r12
    121c:	0e 94 8a 08 	call	0x1114	; 0x1114 <_ZL16Serial_timedReadPc>
    1220:	88 23       	and	r24, r24
    1222:	29 f0       	breq	.+10     	; 0x122e <_ZL16Serial_skipBytesj+0x3a>
        break;
      }
      count++;
    1224:	0f 5f       	subi	r16, 0xFF	; 255
    1226:	1f 4f       	sbci	r17, 0xFF	; 255
  }

  static size_t Serial_skipBytes(size_t length) {
    char c;
    size_t count = 0;
    while (count < length) {
    1228:	0e 15       	cp	r16, r14
    122a:	1f 05       	cpc	r17, r15
    122c:	b0 f3       	brcs	.-20     	; 0x121a <_ZL16Serial_skipBytesj+0x26>
        break;
      }
      count++;
    }
    return count;
  }
    122e:	c8 01       	movw	r24, r16
    1230:	0f 90       	pop	r0
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	1f 91       	pop	r17
    1238:	0f 91       	pop	r16
    123a:	ff 90       	pop	r15
    123c:	ef 90       	pop	r14
    123e:	df 90       	pop	r13
    1240:	cf 90       	pop	r12
    1242:	08 95       	ret

00001244 <_ZL17Serial_readStringR6Stringj>:
      } 
    }
    return count;
  } 

  static size_t Serial_readString(String& str, size_t length){
    1244:	8f 92       	push	r8
    1246:	9f 92       	push	r9
    1248:	af 92       	push	r10
    124a:	bf 92       	push	r11
    124c:	cf 92       	push	r12
    124e:	df 92       	push	r13
    1250:	ef 92       	push	r14
    1252:	ff 92       	push	r15
    1254:	0f 93       	push	r16
    1256:	1f 93       	push	r17
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
    1260:	6c 01       	movw	r12, r24
    1262:	8b 01       	movw	r16, r22
    str.reserve(str.length() + count);
    for (size_t i = 0; i < count; i++) {
      str += buffer[i];  
    }
    return count;
  }
    1264:	8d b6       	in	r8, 0x3d	; 61
    1266:	9e b6       	in	r9, 0x3e	; 62
    }
    return count;
  } 

  static size_t Serial_readString(String& str, size_t length){
    char buffer[length];
    1268:	8d b7       	in	r24, 0x3d	; 61
    126a:	9e b7       	in	r25, 0x3e	; 62
    126c:	86 1b       	sub	r24, r22
    126e:	97 0b       	sbc	r25, r23
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	9e bf       	out	0x3e, r25	; 62
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	8d bf       	out	0x3d, r24	; 61
    127a:	ad b6       	in	r10, 0x3d	; 61
    127c:	be b6       	in	r11, 0x3e	; 62
    127e:	08 94       	sec
    1280:	a1 1c       	adc	r10, r1
    1282:	b1 1c       	adc	r11, r1
    size_t count = Serial_readBytes(buffer, length);
    1284:	ee 24       	eor	r14, r14
    1286:	ff 24       	eor	r15, r15
    1288:	07 c0       	rjmp	.+14     	; 0x1298 <_ZL17Serial_readStringR6Stringj+0x54>
  }

  static size_t Serial_readBytes(char *buffer, size_t length) {
    size_t count = 0;
    while (count < length) {
      if (!Serial_timedRead(buffer)){
    128a:	0e 94 8a 08 	call	0x1114	; 0x1114 <_ZL16Serial_timedReadPc>
    128e:	88 23       	and	r24, r24
    1290:	49 f0       	breq	.+18     	; 0x12a4 <_ZL17Serial_readStringR6Stringj+0x60>
        break;
      }
      buffer++;
      count++;
    1292:	08 94       	sec
    1294:	e1 1c       	adc	r14, r1
    1296:	f1 1c       	adc	r15, r1
    1298:	c5 01       	movw	r24, r10
    129a:	8e 0d       	add	r24, r14
    129c:	9f 1d       	adc	r25, r15
    return false;     // false indicates timeout
  }

  static size_t Serial_readBytes(char *buffer, size_t length) {
    size_t count = 0;
    while (count < length) {
    129e:	e0 16       	cp	r14, r16
    12a0:	f1 06       	cpc	r15, r17
    12a2:	98 f3       	brcs	.-26     	; 0x128a <_ZL17Serial_readStringR6Stringj+0x46>
  } 

  static size_t Serial_readString(String& str, size_t length){
    char buffer[length];
    size_t count = Serial_readBytes(buffer, length);
    str.reserve(str.length() + count);
    12a4:	f6 01       	movw	r30, r12
    12a6:	64 81       	ldd	r22, Z+4	; 0x04
    12a8:	75 81       	ldd	r23, Z+5	; 0x05
    12aa:	6e 0d       	add	r22, r14
    12ac:	7f 1d       	adc	r23, r15
    12ae:	c6 01       	movw	r24, r12
    12b0:	0e 94 57 38 	call	0x70ae	; 0x70ae <_ZN6String7reserveEj>
    12b4:	00 e0       	ldi	r16, 0x00	; 0
    12b6:	10 e0       	ldi	r17, 0x00	; 0
    12b8:	09 c0       	rjmp	.+18     	; 0x12cc <_ZL17Serial_readStringR6Stringj+0x88>
    12ba:	f5 01       	movw	r30, r10
    12bc:	e0 0f       	add	r30, r16
    12be:	f1 1f       	adc	r31, r17
    12c0:	c6 01       	movw	r24, r12
    12c2:	60 81       	ld	r22, Z
    12c4:	0e 94 2b 39 	call	0x7256	; 0x7256 <_ZN6String6concatEc>
    for (size_t i = 0; i < count; i++) {
    12c8:	0f 5f       	subi	r16, 0xFF	; 255
    12ca:	1f 4f       	sbci	r17, 0xFF	; 255
    12cc:	0e 15       	cp	r16, r14
    12ce:	1f 05       	cpc	r17, r15
    12d0:	a0 f3       	brcs	.-24     	; 0x12ba <_ZL17Serial_readStringR6Stringj+0x76>
      str += buffer[i];  
    }
    return count;
  }
    12d2:	c7 01       	movw	r24, r14
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	f8 94       	cli
    12d8:	9e be       	out	0x3e, r9	; 62
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	8d be       	out	0x3d, r8	; 61
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	1f 91       	pop	r17
    12e4:	0f 91       	pop	r16
    12e6:	ff 90       	pop	r15
    12e8:	ef 90       	pop	r14
    12ea:	df 90       	pop	r13
    12ec:	cf 90       	pop	r12
    12ee:	bf 90       	pop	r11
    12f0:	af 90       	pop	r10
    12f2:	9f 90       	pop	r9
    12f4:	8f 90       	pop	r8
    12f6:	08 95       	ret

000012f8 <_ZL17Serial_readStringR6String>:

  static size_t Serial_readString(String& str){
    12f8:	0f 93       	push	r16
    12fa:	1f 93       	push	r17
    12fc:	cf 93       	push	r28
    12fe:	df 93       	push	r29
    1300:	8c 01       	movw	r16, r24

    size_t maxFrameLenght = 100; 
    size_t countInFrame = Serial_readString(str, maxFrameLenght);
    1302:	64 e6       	ldi	r22, 0x64	; 100
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZL17Serial_readStringR6Stringj>
    130a:	ec 01       	movw	r28, r24
    130c:	07 c0       	rjmp	.+14     	; 0x131c <_ZL17Serial_readStringR6String+0x24>

    size_t count = countInFrame; 

    while (countInFrame == maxFrameLenght){
      countInFrame = Serial_readString(str, maxFrameLenght); 
    130e:	c8 01       	movw	r24, r16
    1310:	64 e6       	ldi	r22, 0x64	; 100
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZL17Serial_readStringR6Stringj>
      count += countInFrame;
    1318:	c8 0f       	add	r28, r24
    131a:	d9 1f       	adc	r29, r25
    size_t maxFrameLenght = 100; 
    size_t countInFrame = Serial_readString(str, maxFrameLenght);

    size_t count = countInFrame; 

    while (countInFrame == maxFrameLenght){
    131c:	84 36       	cpi	r24, 0x64	; 100
    131e:	91 05       	cpc	r25, r1
    1320:	b1 f3       	breq	.-20     	; 0x130e <_ZL17Serial_readStringR6String+0x16>
      countInFrame = Serial_readString(str, maxFrameLenght); 
      count += countInFrame;
    }
    return count;
  }
    1322:	ce 01       	movw	r24, r28
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	1f 91       	pop	r17
    132a:	0f 91       	pop	r16
    132c:	08 95       	ret

0000132e <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperi>:
    }

    return false;
  }

  static String wifiExecuteRawCommand(const __FlashStringHelper* command, int maxResponseDeleay){
    132e:	6f 92       	push	r6
    1330:	7f 92       	push	r7
    1332:	8f 92       	push	r8
    1334:	9f 92       	push	r9
    1336:	af 92       	push	r10
    1338:	bf 92       	push	r11
    133a:	cf 92       	push	r12
    133c:	df 92       	push	r13
    133e:	ef 92       	push	r14
    1340:	ff 92       	push	r15
    1342:	0f 93       	push	r16
    1344:	1f 93       	push	r17
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	98 2e       	mov	r9, r24
    134c:	89 2e       	mov	r8, r25
    134e:	eb 01       	movw	r28, r22
    1350:	3a 01       	movw	r6, r20

    cleanSerialBuffer();
    1352:	0e 94 51 08 	call	0x10a2	; 0x10a2 <_ZN15GB_SerialHelper17cleanSerialBufferEv>

    if (command == 0){
    1356:	20 97       	sbiw	r28, 0x00	; 0
    1358:	29 f4       	brne	.+10     	; 0x1364 <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperi+0x36>
      Serial.println();
    135a:	88 eb       	ldi	r24, 0xB8	; 184
    135c:	93 e0       	ldi	r25, 0x03	; 3
    135e:	0e 94 79 36 	call	0x6cf2	; 0x6cf2 <_ZN5Print7printlnEv>
    1362:	05 c0       	rjmp	.+10     	; 0x136e <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperi+0x40>
    } 
    else {
      Serial.println(command);
    1364:	88 eb       	ldi	r24, 0xB8	; 184
    1366:	93 e0       	ldi	r25, 0x03	; 3
    1368:	be 01       	movw	r22, r28
    136a:	0e 94 99 36 	call	0x6d32	; 0x6d32 <_ZN5Print7printlnEPK19__FlashStringHelper>
    }

    String input;
    136e:	89 2d       	mov	r24, r9
    1370:	98 2d       	mov	r25, r8
    1372:	60 e0       	ldi	r22, 0x00	; 0
    1374:	71 e0       	ldi	r23, 0x01	; 1
    1376:	0e 94 8f 39 	call	0x731e	; 0x731e <_ZN6StringC1EPKc>
    input.reserve(10);
    137a:	89 2d       	mov	r24, r9
    137c:	98 2d       	mov	r25, r8
    137e:	6a e0       	ldi	r22, 0x0A	; 10
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	0e 94 57 38 	call	0x70ae	; 0x70ae <_ZN6String7reserveEj>
    unsigned long start = millis();
    1386:	0e 94 0b 32 	call	0x6416	; 0x6416 <millis>
    138a:	5b 01       	movw	r10, r22
    138c:	6c 01       	movw	r12, r24
    while(millis() - start <= maxResponseDeleay){
    138e:	73 01       	movw	r14, r6
    1390:	00 27       	eor	r16, r16
    1392:	f7 fc       	sbrc	r15, 7
    1394:	00 95       	com	r16
    1396:	10 2f       	mov	r17, r16
    1398:	0a c0       	rjmp	.+20     	; 0x13ae <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperi+0x80>
      if (Serial.available()){
    139a:	88 eb       	ldi	r24, 0xB8	; 184
    139c:	93 e0       	ldi	r25, 0x03	; 3
    139e:	0e 94 13 35 	call	0x6a26	; 0x6a26 <_ZN14HardwareSerial9availableEv>
    13a2:	89 2b       	or	r24, r25
    13a4:	21 f0       	breq	.+8      	; 0x13ae <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperi+0x80>
        //input += (char) Serial.read(); 
        //input += Serial.readString(); // WARNING! Problems with command at+ipdhcp=0, it returns bytes with minus sign, Error in Serial library
        Serial_readString(input);
    13a6:	89 2d       	mov	r24, r9
    13a8:	98 2d       	mov	r25, r8
    13aa:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZL17Serial_readStringR6String>
    }

    String input;
    input.reserve(10);
    unsigned long start = millis();
    while(millis() - start <= maxResponseDeleay){
    13ae:	0e 94 0b 32 	call	0x6416	; 0x6416 <millis>
    13b2:	6a 19       	sub	r22, r10
    13b4:	7b 09       	sbc	r23, r11
    13b6:	8c 09       	sbc	r24, r12
    13b8:	9d 09       	sbc	r25, r13
    13ba:	e6 16       	cp	r14, r22
    13bc:	f7 06       	cpc	r15, r23
    13be:	08 07       	cpc	r16, r24
    13c0:	19 07       	cpc	r17, r25
    13c2:	58 f7       	brcc	.-42     	; 0x139a <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperi+0x6c>
        //input += Serial.readString(); // WARNING! Problems with command at+ipdhcp=0, it returns bytes with minus sign, Error in Serial library
        Serial_readString(input);
      }
    }
    return input;
  }
    13c4:	89 2d       	mov	r24, r9
    13c6:	98 2d       	mov	r25, r8
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	ff 90       	pop	r15
    13d2:	ef 90       	pop	r14
    13d4:	df 90       	pop	r13
    13d6:	cf 90       	pop	r12
    13d8:	bf 90       	pop	r11
    13da:	af 90       	pop	r10
    13dc:	9f 90       	pop	r9
    13de:	8f 90       	pop	r8
    13e0:	7f 90       	pop	r7
    13e2:	6f 90       	pop	r6
    13e4:	08 95       	ret

000013e6 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>:
    }

    return true;
  }

  static boolean wifiExecuteCommand(const __FlashStringHelper* command = 0, int maxResponseDeleay = WIFI_RESPONSE_DEFAULT_DELAY){   
    13e6:	ff 92       	push	r15
    13e8:	0f 93       	push	r16
    13ea:	1f 93       	push	r17
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	2e 97       	sbiw	r28, 0x0e	; 14
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	de bf       	out	0x3e, r29	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	cd bf       	out	0x3d, r28	; 61
    1400:	9c 01       	movw	r18, r24
    1402:	ab 01       	movw	r20, r22
    String input = wifiExecuteRawCommand(command, maxResponseDeleay);
    1404:	8e 01       	movw	r16, r28
    1406:	0f 5f       	subi	r16, 0xFF	; 255
    1408:	1f 4f       	sbci	r17, 0xFF	; 255
    140a:	c8 01       	movw	r24, r16
    140c:	b9 01       	movw	r22, r18
    140e:	0e 94 97 09 	call	0x132e	; 0x132e <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperi>
    if (input.length() == 0){
    1412:	8d 81       	ldd	r24, Y+5	; 0x05
    1414:	9e 81       	ldd	r25, Y+6	; 0x06
    1416:	89 2b       	or	r24, r25
    1418:	e9 f4       	brne	.+58     	; 0x1454 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x6e>
      if (s_restartWifiIfNoResponseAutomatically){
    141a:	80 91 05 01 	lds	r24, 0x0105
    141e:	88 23       	and	r24, r24
    1420:	19 f0       	breq	.+6      	; 0x1428 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x42>
        s_restartWifi = true;
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	80 93 b0 01 	sts	0x01B0, r24
      }

      if (useSerialMonitor){   
    1428:	80 91 ae 01 	lds	r24, 0x01AE
    142c:	88 23       	and	r24, r24
    142e:	09 f4       	brne	.+2      	; 0x1432 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x4c>
    1430:	66 c0       	rjmp	.+204    	; 0x14fe <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x118>
        showWifiMessage(F("No response"), false);
    1432:	89 e9       	ldi	r24, 0x99	; 153
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <_ZN15GB_SerialHelper15showWifiMessageEPK19__FlashStringHelperh>
        if (s_restartWifiIfNoResponseAutomatically){
    143c:	80 91 05 01 	lds	r24, 0x0105
    1440:	88 23       	and	r24, r24
    1442:	09 f4       	brne	.+2      	; 0x1446 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x60>
    1444:	56 c0       	rjmp	.+172    	; 0x14f2 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x10c>
          Serial.print(F(" (reboot)"));
    1446:	88 eb       	ldi	r24, 0xB8	; 184
    1448:	93 e0       	ldi	r25, 0x03	; 3
    144a:	6f e8       	ldi	r22, 0x8F	; 143
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_ZN5Print5printEPK19__FlashStringHelper>
    1452:	4f c0       	rjmp	.+158    	; 0x14f2 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x10c>
        Serial.println();
        printDirtyEnd();
      }
      // Nothing to do
    } 
    else if (flashStringStartsWith(input, S_WIFI_RESPONSE_OK) && flashStringEndsWith(input, S_CRLF)){
    1454:	c8 01       	movw	r24, r16
    1456:	67 e7       	ldi	r22, 0x77	; 119
    1458:	70 e0       	ldi	r23, 0x00	; 0
    145a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <_ZL21flashStringStartsWithRK6StringPKc>
    145e:	88 23       	and	r24, r24
    1460:	09 f4       	brne	.+2      	; 0x1464 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x7e>
    1462:	5f c0       	rjmp	.+190    	; 0x1522 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x13c>
    1464:	c8 01       	movw	r24, r16
    1466:	6a e7       	ldi	r22, 0x7A	; 122
    1468:	70 e0       	ldi	r23, 0x00	; 0
    146a:	0e 94 2e 07 	call	0xe5c	; 0xe5c <_ZL19flashStringEndsWithRK6StringPKc>
    146e:	88 23       	and	r24, r24
    1470:	09 f4       	brne	.+2      	; 0x1474 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x8e>
    1472:	57 c0       	rjmp	.+174    	; 0x1522 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x13c>
    1474:	01 e0       	ldi	r16, 0x01	; 1
    1476:	44 c0       	rjmp	.+136    	; 0x1500 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x11a>
      return true;
    } 
    else if (flashStringStartsWith(input, S_WIFI_RESPONSE_ERROR) && flashStringEndsWith(input, S_CRLF)){
    1478:	c8 01       	movw	r24, r16
    147a:	6a e7       	ldi	r22, 0x7A	; 122
    147c:	70 e0       	ldi	r23, 0x00	; 0
    147e:	0e 94 2e 07 	call	0xe5c	; 0xe5c <_ZL19flashStringEndsWithRK6StringPKc>
    1482:	88 23       	and	r24, r24
    1484:	09 f4       	brne	.+2      	; 0x1488 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0xa2>
    1486:	58 c0       	rjmp	.+176    	; 0x1538 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x152>
      if (useSerialMonitor){
    1488:	80 91 ae 01 	lds	r24, 0x01AE
    148c:	88 23       	and	r24, r24
    148e:	b9 f1       	breq	.+110    	; 0x14fe <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x118>
        byte errorCode = input[5];
    1490:	c8 01       	movw	r24, r16
    1492:	65 e0       	ldi	r22, 0x05	; 5
    1494:	70 e0       	ldi	r23, 0x00	; 0
    1496:	0e 94 e5 37 	call	0x6fca	; 0x6fca <_ZN6StringixEj>
    149a:	fc 01       	movw	r30, r24
    149c:	f0 80       	ld	r15, Z
        showWifiMessage(F("Error "), false);
    149e:	88 e8       	ldi	r24, 0x88	; 136
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	60 e0       	ldi	r22, 0x00	; 0
    14a4:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <_ZN15GB_SerialHelper15showWifiMessageEPK19__FlashStringHelperh>
        Serial.print(GB_PrintDirty::getHEX(errorCode, true));
    14a8:	8e 01       	movw	r16, r28
    14aa:	08 5f       	subi	r16, 0xF8	; 248
    14ac:	1f 4f       	sbci	r17, 0xFF	; 255
    14ae:	c8 01       	movw	r24, r16
    14b0:	6f 2d       	mov	r22, r15
    14b2:	41 e0       	ldi	r20, 0x01	; 1
    14b4:	0e 94 87 06 	call	0xd0e	; 0xd0e <_ZN13GB_PrintDirty6getHEXEhh>
    14b8:	88 eb       	ldi	r24, 0xB8	; 184
    14ba:	93 e0       	ldi	r25, 0x03	; 3
    14bc:	b8 01       	movw	r22, r16
    14be:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <_ZN5Print5printERK6String>
    14c2:	c8 01       	movw	r24, r16
    14c4:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
    14c8:	14 c0       	rjmp	.+40     	; 0x14f2 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x10c>
        printDirtyEnd();
      }      
    } 
    else {
      if (useSerialMonitor){
        showWifiMessage(FS(S_empty), false);
    14ca:	83 e8       	ldi	r24, 0x83	; 131
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	60 e0       	ldi	r22, 0x00	; 0
    14d0:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <_ZN15GB_SerialHelper15showWifiMessageEPK19__FlashStringHelperh>
        GB_PrintDirty::printWithoutCRLF(input);
    14d4:	8e 01       	movw	r16, r28
    14d6:	0f 5f       	subi	r16, 0xFF	; 255
    14d8:	1f 4f       	sbci	r17, 0xFF	; 255
    14da:	c8 01       	movw	r24, r16
    14dc:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String>
        Serial.print(FS(S_Next));
    14e0:	88 eb       	ldi	r24, 0xB8	; 184
    14e2:	93 e0       	ldi	r25, 0x03	; 3
    14e4:	64 e8       	ldi	r22, 0x84	; 132
    14e6:	70 e0       	ldi	r23, 0x00	; 0
    14e8:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_ZN5Print5printEPK19__FlashStringHelper>
        GB_PrintDirty::printHEX(input); 
    14ec:	c8 01       	movw	r24, r16
    14ee:	0e 94 a1 07 	call	0xf42	; 0xf42 <_ZN13GB_PrintDirty8printHEXERK6String>
        Serial.println();
    14f2:	88 eb       	ldi	r24, 0xB8	; 184
    14f4:	93 e0       	ldi	r25, 0x03	; 3
    14f6:	0e 94 79 36 	call	0x6cf2	; 0x6cf2 <_ZN5Print7printlnEv>
        printDirtyEnd();
    14fa:	0e 94 63 08 	call	0x10c6	; 0x10c6 <_ZN15GB_SerialHelper13printDirtyEndEv>
    14fe:	00 e0       	ldi	r16, 0x00	; 0
      }
    }

    return false;
    1500:	ce 01       	movw	r24, r28
    1502:	01 96       	adiw	r24, 0x01	; 1
    1504:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
  }
    1508:	80 2f       	mov	r24, r16
    150a:	2e 96       	adiw	r28, 0x0e	; 14
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	cd bf       	out	0x3d, r28	; 61
    1516:	cf 91       	pop	r28
    1518:	df 91       	pop	r29
    151a:	1f 91       	pop	r17
    151c:	0f 91       	pop	r16
    151e:	ff 90       	pop	r15
    1520:	08 95       	ret
      // Nothing to do
    } 
    else if (flashStringStartsWith(input, S_WIFI_RESPONSE_OK) && flashStringEndsWith(input, S_CRLF)){
      return true;
    } 
    else if (flashStringStartsWith(input, S_WIFI_RESPONSE_ERROR) && flashStringEndsWith(input, S_CRLF)){
    1522:	8e 01       	movw	r16, r28
    1524:	0f 5f       	subi	r16, 0xFF	; 255
    1526:	1f 4f       	sbci	r17, 0xFF	; 255
    1528:	c8 01       	movw	r24, r16
    152a:	6d e7       	ldi	r22, 0x7D	; 125
    152c:	70 e0       	ldi	r23, 0x00	; 0
    152e:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <_ZL21flashStringStartsWithRK6StringPKc>
    1532:	88 23       	and	r24, r24
    1534:	09 f0       	breq	.+2      	; 0x1538 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x152>
    1536:	a0 cf       	rjmp	.-192    	; 0x1478 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x92>
        Serial.println();
        printDirtyEnd();
      }      
    } 
    else {
      if (useSerialMonitor){
    1538:	80 91 ae 01 	lds	r24, 0x01AE
    153c:	88 23       	and	r24, r24
    153e:	f9 f2       	breq	.-66     	; 0x14fe <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0x118>
    1540:	c4 cf       	rjmp	.-120    	; 0x14ca <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi+0xe4>

00001542 <_ZN15GB_SerialHelper15startWifiSilentEv>:
  //                             Wi-FI DEVICE                        //
  /////////////////////////////////////////////////////////////////////

  static boolean startWifiSilent(){

    cleanSerialBuffer();
    1542:	0e 94 51 08 	call	0x10a2	; 0x10a2 <_ZN15GB_SerialHelper17cleanSerialBufferEv>

    if (!wifiExecuteCommand(F("at+scan=0"), 5000)){
    1546:	81 e3       	ldi	r24, 0x31	; 49
    1548:	92 e0       	ldi	r25, 0x02	; 2
    154a:	68 e8       	ldi	r22, 0x88	; 136
    154c:	73 e1       	ldi	r23, 0x13	; 19
    154e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    1552:	88 23       	and	r24, r24
    1554:	09 f4       	brne	.+2      	; 0x1558 <_ZN15GB_SerialHelper15startWifiSilentEv+0x16>
    1556:	62 c0       	rjmp	.+196    	; 0x161c <_ZN15GB_SerialHelper15startWifiSilentEv+0xda>
      return false;
    } 

    boolean isStationMode = (s_wifiSID.length()>0);    
    if (isStationMode){
    1558:	80 91 b5 01 	lds	r24, 0x01B5
    155c:	90 91 b6 01 	lds	r25, 0x01B6
    1560:	89 2b       	or	r24, r25
    1562:	91 f1       	breq	.+100    	; 0x15c8 <_ZN15GB_SerialHelper15startWifiSilentEv+0x86>
      if (s_wifiPass.length() > 0){
    1564:	80 91 bc 01 	lds	r24, 0x01BC
    1568:	90 91 bd 01 	lds	r25, 0x01BD
    156c:	89 2b       	or	r24, r25
    156e:	a9 f0       	breq	.+42     	; 0x159a <_ZN15GB_SerialHelper15startWifiSilentEv+0x58>
        Serial.print(F("at+psk="));
    1570:	88 eb       	ldi	r24, 0xB8	; 184
    1572:	93 e0       	ldi	r25, 0x03	; 3
    1574:	69 e2       	ldi	r22, 0x29	; 41
    1576:	72 e0       	ldi	r23, 0x02	; 2
    1578:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.print(s_wifiPass);
    157c:	88 eb       	ldi	r24, 0xB8	; 184
    157e:	93 e0       	ldi	r25, 0x03	; 3
    1580:	68 eb       	ldi	r22, 0xB8	; 184
    1582:	71 e0       	ldi	r23, 0x01	; 1
    1584:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <_ZN5Print5printERK6String>
        if (!wifiExecuteCommand()){
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	68 ee       	ldi	r22, 0xE8	; 232
    158e:	73 e0       	ldi	r23, 0x03	; 3
    1590:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    1594:	88 23       	and	r24, r24
    1596:	09 f4       	brne	.+2      	; 0x159a <_ZN15GB_SerialHelper15startWifiSilentEv+0x58>
    1598:	41 c0       	rjmp	.+130    	; 0x161c <_ZN15GB_SerialHelper15startWifiSilentEv+0xda>
          return false;
        }
      } 

      Serial.print(F("at+connect="));
    159a:	88 eb       	ldi	r24, 0xB8	; 184
    159c:	93 e0       	ldi	r25, 0x03	; 3
    159e:	6d e1       	ldi	r22, 0x1D	; 29
    15a0:	72 e0       	ldi	r23, 0x02	; 2
    15a2:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(s_wifiSID);
    15a6:	88 eb       	ldi	r24, 0xB8	; 184
    15a8:	93 e0       	ldi	r25, 0x03	; 3
    15aa:	61 eb       	ldi	r22, 0xB1	; 177
    15ac:	71 e0       	ldi	r23, 0x01	; 1
    15ae:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <_ZN5Print5printERK6String>
      if (!wifiExecuteCommand(0, 5000)){
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	68 e8       	ldi	r22, 0x88	; 136
    15b8:	73 e1       	ldi	r23, 0x13	; 19
    15ba:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    15be:	88 23       	and	r24, r24
    15c0:	69 f1       	breq	.+90     	; 0x161c <_ZN15GB_SerialHelper15startWifiSilentEv+0xda>

      /*if (!wifiExecuteCommand(F("at+listen=20"))){
       return false;
       }*/

      if (!wifiExecuteCommand(F("at+ipdhcp=0"), 5000)){
    15c2:	81 e1       	ldi	r24, 0x11	; 17
    15c4:	92 e0       	ldi	r25, 0x02	; 2
    15c6:	1a c0       	rjmp	.+52     	; 0x15fc <_ZN15GB_SerialHelper15startWifiSilentEv+0xba>
        return false;
      }
    }
    else {
      if (!wifiExecuteCommand(F("at+psk=ingodwetrust"))){
    15c8:	8d ef       	ldi	r24, 0xFD	; 253
    15ca:	91 e0       	ldi	r25, 0x01	; 1
    15cc:	68 ee       	ldi	r22, 0xE8	; 232
    15ce:	73 e0       	ldi	r23, 0x03	; 3
    15d0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    15d4:	88 23       	and	r24, r24
    15d6:	11 f1       	breq	.+68     	; 0x161c <_ZN15GB_SerialHelper15startWifiSilentEv+0xda>
        return false;
      }  

      // at+ipstatic=<ip>,<mask>,<gateway>,<dns server1>(0 is valid),<dns server2>(0 is valid)\r\n
      if (!wifiExecuteCommand(F("at+ipstatic=192.168.0.1,255.255.0.0,0.0.0.0,0,0"))){
    15d8:	8d ec       	ldi	r24, 0xCD	; 205
    15da:	91 e0       	ldi	r25, 0x01	; 1
    15dc:	68 ee       	ldi	r22, 0xE8	; 232
    15de:	73 e0       	ldi	r23, 0x03	; 3
    15e0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    15e4:	88 23       	and	r24, r24
    15e6:	d1 f0       	breq	.+52     	; 0x161c <_ZN15GB_SerialHelper15startWifiSilentEv+0xda>
        return false;
      }

      if (!wifiExecuteCommand(F("at+ipdhcp=1"), 5000)){
    15e8:	81 ec       	ldi	r24, 0xC1	; 193
    15ea:	91 e0       	ldi	r25, 0x01	; 1
    15ec:	68 e8       	ldi	r22, 0x88	; 136
    15ee:	73 e1       	ldi	r23, 0x13	; 19
    15f0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    15f4:	88 23       	and	r24, r24
    15f6:	91 f0       	breq	.+36     	; 0x161c <_ZN15GB_SerialHelper15startWifiSilentEv+0xda>
        return false;
      }

      if (!wifiExecuteCommand(F("at+ap=Growbox,1"), 5000)){ // Hidden
    15f8:	81 eb       	ldi	r24, 0xB1	; 177
    15fa:	91 e0       	ldi	r25, 0x01	; 1
    15fc:	68 e8       	ldi	r22, 0x88	; 136
    15fe:	73 e1       	ldi	r23, 0x13	; 19
    1600:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    1604:	88 23       	and	r24, r24
    1606:	51 f0       	breq	.+20     	; 0x161c <_ZN15GB_SerialHelper15startWifiSilentEv+0xda>
    }

    /*if (!wifiExecuteCommand(F("at+httpd_open"))){
     return false;
     }*/
    if (!wifiExecuteCommand(F("at+ltcp=80"))){
    1608:	86 ea       	ldi	r24, 0xA6	; 166
    160a:	91 e0       	ldi	r25, 0x01	; 1
    160c:	68 ee       	ldi	r22, 0xE8	; 232
    160e:	73 e0       	ldi	r23, 0x03	; 3
    1610:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    1614:	88 23       	and	r24, r24
    1616:	19 f0       	breq	.+6      	; 0x161e <_ZN15GB_SerialHelper15startWifiSilentEv+0xdc>
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	08 95       	ret
    161c:	80 e0       	ldi	r24, 0x00	; 0
      return false;
    }

    return true;
  }
    161e:	08 95       	ret

00001620 <_ZN15GB_SerialHelper9startWifiEv>:
      startWifi();
    }
  }

  static boolean startWifi(){
    showWifiMessage(F("Starting..."));
    1620:	8a e9       	ldi	r24, 0x9A	; 154
    1622:	91 e0       	ldi	r25, 0x01	; 1
    1624:	61 e0       	ldi	r22, 0x01	; 1
    1626:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <_ZN15GB_SerialHelper15showWifiMessageEPK19__FlashStringHelperh>
    boolean isLoaded = startWifiSilent();
    162a:	0e 94 a1 0a 	call	0x1542	; 0x1542 <_ZN15GB_SerialHelper15startWifiSilentEv>
    if (isLoaded){
    162e:	88 23       	and	r24, r24
    1630:	31 f0       	breq	.+12     	; 0x163e <_ZN15GB_SerialHelper9startWifiEv+0x1e>
      showWifiMessage(F("Started"));
    1632:	82 e9       	ldi	r24, 0x92	; 146
    1634:	91 e0       	ldi	r25, 0x01	; 1
    1636:	61 e0       	ldi	r22, 0x01	; 1
    1638:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <_ZN15GB_SerialHelper15showWifiMessageEPK19__FlashStringHelperh>
    163c:	08 95       	ret
    } 
    else {
      showWifiMessage(F("Start failed"));
    163e:	85 e8       	ldi	r24, 0x85	; 133
    1640:	91 e0       	ldi	r25, 0x01	; 1
    1642:	61 e0       	ldi	r22, 0x01	; 1
    1644:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <_ZN15GB_SerialHelper15showWifiMessageEPK19__FlashStringHelperh>
      s_restartWifi = true;
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	80 93 b0 01 	sts	0x01B0, r24
    }
  }
    164e:	08 95       	ret

00001650 <_ZN15GB_SerialHelper23sendWifiCloseConnectionEh>:
      }
    }
    return sendWifiFrameStop();
  } 

  static boolean sendWifiCloseConnection(const byte portDescriptor){
    1650:	ff 92       	push	r15
    1652:	0f 93       	push	r16
    1654:	1f 93       	push	r17
    1656:	f8 2e       	mov	r15, r24
    Serial.print(F("at+cls="));
    1658:	08 eb       	ldi	r16, 0xB8	; 184
    165a:	13 e0       	ldi	r17, 0x03	; 3
    165c:	c8 01       	movw	r24, r16
    165e:	61 ed       	ldi	r22, 0xD1	; 209
    1660:	72 e0       	ldi	r23, 0x02	; 2
    1662:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(portDescriptor);
    1666:	c8 01       	movw	r24, r16
    1668:	6f 2d       	mov	r22, r15
    166a:	4a e0       	ldi	r20, 0x0A	; 10
    166c:	50 e0       	ldi	r21, 0x00	; 0
    166e:	0e 94 4d 37 	call	0x6e9a	; 0x6e9a <_ZN5Print5printEhi>
    return wifiExecuteCommand(); 
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	68 ee       	ldi	r22, 0xE8	; 232
    1678:	73 e0       	ldi	r23, 0x03	; 3
    167a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
  }
    167e:	1f 91       	pop	r17
    1680:	0f 91       	pop	r16
    1682:	ff 90       	pop	r15
    1684:	08 95       	ret

00001686 <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>:

  /////////////////////////////////////////////////////////////////////
  //                           WIFI PROTOCOL                         //
  /////////////////////////////////////////////////////////////////////

  static void sendWifiFrameStart(const byte portDescriptor, word length){ // 1400 bytes max (Wi-Fi module spec restriction)   
    1686:	df 92       	push	r13
    1688:	ef 92       	push	r14
    168a:	ff 92       	push	r15
    168c:	0f 93       	push	r16
    168e:	1f 93       	push	r17
    1690:	d8 2e       	mov	r13, r24
    1692:	7b 01       	movw	r14, r22
    Serial.print(F("at+send_data="));
    1694:	08 eb       	ldi	r16, 0xB8	; 184
    1696:	13 e0       	ldi	r17, 0x03	; 3
    1698:	c8 01       	movw	r24, r16
    169a:	62 eb       	ldi	r22, 0xB2	; 178
    169c:	70 e0       	ldi	r23, 0x00	; 0
    169e:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(portDescriptor);
    16a2:	c8 01       	movw	r24, r16
    16a4:	6d 2d       	mov	r22, r13
    16a6:	4a e0       	ldi	r20, 0x0A	; 10
    16a8:	50 e0       	ldi	r21, 0x00	; 0
    16aa:	0e 94 4d 37 	call	0x6e9a	; 0x6e9a <_ZN5Print5printEhi>
    Serial.print(',');
    16ae:	c8 01       	movw	r24, r16
    16b0:	6c e2       	ldi	r22, 0x2C	; 44
    16b2:	0e 94 71 36 	call	0x6ce2	; 0x6ce2 <_ZN5Print5printEc>
    Serial.print(length);
    16b6:	c8 01       	movw	r24, r16
    16b8:	b7 01       	movw	r22, r14
    16ba:	4a e0       	ldi	r20, 0x0A	; 10
    16bc:	50 e0       	ldi	r21, 0x00	; 0
    16be:	0e 94 3c 37 	call	0x6e78	; 0x6e78 <_ZN5Print5printEji>
    Serial.print(',');
    16c2:	c8 01       	movw	r24, r16
    16c4:	6c e2       	ldi	r22, 0x2C	; 44
    16c6:	0e 94 71 36 	call	0x6ce2	; 0x6ce2 <_ZN5Print5printEc>
  }
    16ca:	1f 91       	pop	r17
    16cc:	0f 91       	pop	r16
    16ce:	ff 90       	pop	r15
    16d0:	ef 90       	pop	r14
    16d2:	df 90       	pop	r13
    16d4:	08 95       	ret

000016d6 <_ZN15GB_SerialHelper16sendHTTPRedirectERKhPK19__FlashStringHelper>:
  }
  
  // WARNING! RAK 410 became mad when 2 parallel connections comes. Like with Chrome and POST request, when RAK response 303.
  // Connection for POST request closed by Chrome (not by RAK). And during this time Chrome creates new parallel connection for GET
  // request.
  static void sendHTTPRedirect(const byte &wifiPortDescriptor, const __FlashStringHelper* data){ 
    16d6:	6f 92       	push	r6
    16d8:	7f 92       	push	r7
    16da:	8f 92       	push	r8
    16dc:	9f 92       	push	r9
    16de:	af 92       	push	r10
    16e0:	bf 92       	push	r11
    16e2:	cf 92       	push	r12
    16e4:	df 92       	push	r13
    16e6:	ef 92       	push	r14
    16e8:	ff 92       	push	r15
    16ea:	0f 93       	push	r16
    16ec:	1f 93       	push	r17
    16ee:	3c 01       	movw	r6, r24
    16f0:	4b 01       	movw	r8, r22
    //const __FlashStringHelper* header = F("HTTP/1.1 303 See Other\r\nLocation: "); // DO not use it with RAK 410
    const __FlashStringHelper* header = F("HTTP/1.1 200 OK (303 doesn't work on RAK 410)\r\nrefresh: 0; url="); 
    16f2:	21 e9       	ldi	r18, 0x91	; 145
    16f4:	a2 2e       	mov	r10, r18
    16f6:	22 e0       	ldi	r18, 0x02	; 2
    16f8:	b2 2e       	mov	r11, r18
    16fa:	c5 01       	movw	r24, r10
    16fc:	0e 94 94 04 	call	0x928	; 0x928 <strlen_P>
    1700:	7c 01       	movw	r14, r24
  /////////////////////////////////////////////////////////////////////
  //                         FALASH STRINGS                          //
  /////////////////////////////////////////////////////////////////////

static int flashStringLength(const char PROGMEM* pstr){ 
  return strlen_P(pstr);
    1702:	c4 01       	movw	r24, r8
    1704:	0e 94 94 04 	call	0x928	; 0x928 <strlen_P>
    1708:	8c 01       	movw	r16, r24
    sendWifiFrameStart(wifiPortDescriptor, flashStringLength(header) + flashStringLength(data) + flashStringLength(S_CRLFCRLF));
    170a:	9e e7       	ldi	r25, 0x7E	; 126
    170c:	c9 2e       	mov	r12, r25
    170e:	92 e0       	ldi	r25, 0x02	; 2
    1710:	d9 2e       	mov	r13, r25
    1712:	c6 01       	movw	r24, r12
    1714:	0e 94 94 04 	call	0x928	; 0x928 <strlen_P>
    1718:	0e 0d       	add	r16, r14
    171a:	1f 1d       	adc	r17, r15
    171c:	08 0f       	add	r16, r24
    171e:	19 1f       	adc	r17, r25
    1720:	f3 01       	movw	r30, r6
    1722:	80 81       	ld	r24, Z
    1724:	b8 01       	movw	r22, r16
    1726:	0e 94 43 0b 	call	0x1686	; 0x1686 <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>
    Serial.print(header);
    172a:	08 eb       	ldi	r16, 0xB8	; 184
    172c:	13 e0       	ldi	r17, 0x03	; 3
  // WARNING! RAK 410 became mad when 2 parallel connections comes. Like with Chrome and POST request, when RAK response 303.
  // Connection for POST request closed by Chrome (not by RAK). And during this time Chrome creates new parallel connection for GET
  // request.
  static void sendHTTPRedirect(const byte &wifiPortDescriptor, const __FlashStringHelper* data){ 
    //const __FlashStringHelper* header = F("HTTP/1.1 303 See Other\r\nLocation: "); // DO not use it with RAK 410
    const __FlashStringHelper* header = F("HTTP/1.1 200 OK (303 doesn't work on RAK 410)\r\nrefresh: 0; url="); 
    172e:	c8 01       	movw	r24, r16
    1730:	b5 01       	movw	r22, r10
    1732:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_ZN5Print5printEPK19__FlashStringHelper>
    sendWifiFrameStart(wifiPortDescriptor, flashStringLength(header) + flashStringLength(data) + flashStringLength(S_CRLFCRLF));
    Serial.print(header);
    Serial.print(data);
    1736:	c8 01       	movw	r24, r16
    1738:	b4 01       	movw	r22, r8
    173a:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(FS(S_CRLFCRLF));
    173e:	c8 01       	movw	r24, r16
    1740:	b6 01       	movw	r22, r12
    1742:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(length);
    Serial.print(',');
  }

  static boolean sendWifiFrameStop(){
    s_restartWifiIfNoResponseAutomatically = false;
    1746:	10 92 05 01 	sts	0x0105, r1
    boolean rez = wifiExecuteCommand();
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	68 ee       	ldi	r22, 0xE8	; 232
    1750:	73 e0       	ldi	r23, 0x03	; 3
    1752:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    s_restartWifiIfNoResponseAutomatically = true;
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	80 93 05 01 	sts	0x0105, r24
    sendWifiFrameStart(wifiPortDescriptor, flashStringLength(header) + flashStringLength(data) + flashStringLength(S_CRLFCRLF));
    Serial.print(header);
    Serial.print(data);
    Serial.print(FS(S_CRLFCRLF));
    sendWifiFrameStop();
    sendWifiCloseConnection(wifiPortDescriptor);
    175c:	f3 01       	movw	r30, r6
    175e:	80 81       	ld	r24, Z
    1760:	0e 94 28 0b 	call	0x1650	; 0x1650 <_ZN15GB_SerialHelper23sendWifiCloseConnectionEh>
  }
    1764:	1f 91       	pop	r17
    1766:	0f 91       	pop	r16
    1768:	ff 90       	pop	r15
    176a:	ef 90       	pop	r14
    176c:	df 90       	pop	r13
    176e:	cf 90       	pop	r12
    1770:	bf 90       	pop	r11
    1772:	af 90       	pop	r10
    1774:	9f 90       	pop	r9
    1776:	8f 90       	pop	r8
    1778:	7f 90       	pop	r7
    177a:	6f 90       	pop	r6
    177c:	08 95       	ret

0000177e <_ZN15GB_SerialHelper12sendWifiDataEhPK19__FlashStringHelper>:
    boolean rez = wifiExecuteCommand();
    s_restartWifiIfNoResponseAutomatically = true;
    return rez;
  }

  static void sendWifiData(const byte portDescriptor, const __FlashStringHelper* data){ // INT_MAX (own test) or 1400 bytes max (Wi-Fi spec restriction)
    177e:	1f 93       	push	r17
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	18 2f       	mov	r17, r24
    1786:	eb 01       	movw	r28, r22
    1788:	cb 01       	movw	r24, r22
    178a:	0e 94 94 04 	call	0x928	; 0x928 <strlen_P>
    178e:	bc 01       	movw	r22, r24
    int length = flashStringLength(data);
    if (length == 0){
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	99 f0       	breq	.+38     	; 0x17ba <_ZN15GB_SerialHelper12sendWifiDataEhPK19__FlashStringHelper+0x3c>
      return;
    }
    sendWifiFrameStart(portDescriptor, length);
    1794:	81 2f       	mov	r24, r17
    1796:	0e 94 43 0b 	call	0x1686	; 0x1686 <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>
    Serial.print(data);
    179a:	88 eb       	ldi	r24, 0xB8	; 184
    179c:	93 e0       	ldi	r25, 0x03	; 3
    179e:	be 01       	movw	r22, r28
    17a0:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(length);
    Serial.print(',');
  }

  static boolean sendWifiFrameStop(){
    s_restartWifiIfNoResponseAutomatically = false;
    17a4:	10 92 05 01 	sts	0x0105, r1
    boolean rez = wifiExecuteCommand();
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	68 ee       	ldi	r22, 0xE8	; 232
    17ae:	73 e0       	ldi	r23, 0x03	; 3
    17b0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    s_restartWifiIfNoResponseAutomatically = true;
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	80 93 05 01 	sts	0x0105, r24
      return;
    }
    sendWifiFrameStart(portDescriptor, length);
    Serial.print(data);
    sendWifiFrameStop();
  }
    17ba:	df 91       	pop	r29
    17bc:	cf 91       	pop	r28
    17be:	1f 91       	pop	r17
    17c0:	08 95       	ret

000017c2 <_ZN15GB_SerialHelper16sendHttpNotFoundEh>:

  /////////////////////////////////////////////////////////////////////
  //                           HTTP PROTOCOL                         //
  /////////////////////////////////////////////////////////////////////

  static void sendHttpNotFound(const byte wifiPortDescriptor){ 
    17c2:	1f 93       	push	r17
    17c4:	18 2f       	mov	r17, r24
    sendWifiData(wifiPortDescriptor, F("HTTP/1.1 404 Not Found\r\nConnection: close\r\n\r\n"));
    17c6:	6b ef       	ldi	r22, 0xFB	; 251
    17c8:	74 e0       	ldi	r23, 0x04	; 4
    17ca:	0e 94 bf 0b 	call	0x177e	; 0x177e <_ZN15GB_SerialHelper12sendWifiDataEhPK19__FlashStringHelper>
    sendWifiCloseConnection(wifiPortDescriptor);
    17ce:	81 2f       	mov	r24, r17
    17d0:	0e 94 28 0b 	call	0x1650	; 0x1650 <_ZN15GB_SerialHelper23sendWifiCloseConnectionEh>
  }
    17d4:	1f 91       	pop	r17
    17d6:	08 95       	ret

000017d8 <_ZN15GB_SerialHelper17sendHttpOK_HeaderEh>:
    Serial.print(FS(S_CRLFCRLF));
    sendWifiFrameStop();
    sendWifiCloseConnection(wifiPortDescriptor);
  }

  static void sendHttpOK_Header(const byte wifiPortDescriptor){ 
    17d8:	1f 93       	push	r17
    17da:	18 2f       	mov	r17, r24
    sendWifiData(wifiPortDescriptor, F("HTTP/1.1 200 OK\r\nConnection: close\r\nContent-Type: text/html\r\n\r\n"));
    17dc:	69 ed       	ldi	r22, 0xD9	; 217
    17de:	72 e0       	ldi	r23, 0x02	; 2
    17e0:	0e 94 bf 0b 	call	0x177e	; 0x177e <_ZN15GB_SerialHelper12sendWifiDataEhPK19__FlashStringHelper>
    Serial.print(data);
    sendWifiFrameStop();
  }

  static void sendWifiDataStart(const byte &wifiPortDescriptor){
    sendWifiFrameStart(wifiPortDescriptor, WIFI_MAX_SEND_FRAME_SIZE);
    17e4:	81 2f       	mov	r24, r17
    17e6:	68 e7       	ldi	r22, 0x78	; 120
    17e8:	75 e0       	ldi	r23, 0x05	; 5
    17ea:	0e 94 43 0b 	call	0x1686	; 0x1686 <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>
    s_sendWifiDataFrameSize = 0;
    17ee:	10 92 c0 01 	sts	0x01C0, r1
    17f2:	10 92 bf 01 	sts	0x01BF, r1
  }

  static void sendHttpOK_Header(const byte wifiPortDescriptor){ 
    sendWifiData(wifiPortDescriptor, F("HTTP/1.1 200 OK\r\nConnection: close\r\nContent-Type: text/html\r\n\r\n"));
    sendWifiDataStart(wifiPortDescriptor);
  }
    17f6:	1f 91       	pop	r17
    17f8:	08 95       	ret

000017fa <_Z18updateBreezeStatusv>:
    17fa:	8d e0       	ldi	r24, 0x0D	; 13
    17fc:	0e 94 4a 33 	call	0x6694	; 0x6694 <digitalRead>
    1800:	60 e0       	ldi	r22, 0x00	; 0
    1802:	89 2b       	or	r24, r25
    1804:	09 f4       	brne	.+2      	; 0x1808 <_Z18updateBreezeStatusv+0xe>
    1806:	61 e0       	ldi	r22, 0x01	; 1
    1808:	8d e0       	ldi	r24, 0x0D	; 13
    180a:	0e 94 f6 32 	call	0x65ec	; 0x65ec <digitalWrite>
    180e:	08 95       	ret

00001810 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>:
#define GB_PrintDirty_h

class GB_PrintDirty {
public:

  static String getFixedDigitsString(const int number, const byte numberOfDigits){
    1810:	8f 92       	push	r8
    1812:	9f 92       	push	r9
    1814:	af 92       	push	r10
    1816:	bf 92       	push	r11
    1818:	cf 92       	push	r12
    181a:	df 92       	push	r13
    181c:	ef 92       	push	r14
    181e:	ff 92       	push	r15
    1820:	0f 93       	push	r16
    1822:	1f 93       	push	r17
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	27 97       	sbiw	r28, 0x07	; 7
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	4c 01       	movw	r8, r24
    183a:	5b 01       	movw	r10, r22
    183c:	f4 2e       	mov	r15, r20
    String out;
    183e:	8e 01       	movw	r16, r28
    1840:	0f 5f       	subi	r16, 0xFF	; 255
    1842:	1f 4f       	sbci	r17, 0xFF	; 255
    1844:	c8 01       	movw	r24, r16
    1846:	60 e0       	ldi	r22, 0x00	; 0
    1848:	71 e0       	ldi	r23, 0x01	; 1
    184a:	0e 94 8f 39 	call	0x731e	; 0x731e <_ZN6StringC1EPKc>
    184e:	cc 24       	eor	r12, r12
    1850:	dd 24       	eor	r13, r13
    for (int i = 0; i< numberOfDigits; i++){
    1852:	ef 2c       	mov	r14, r15
    1854:	ff 24       	eor	r15, r15
    1856:	07 c0       	rjmp	.+14     	; 0x1866 <_ZN13GB_PrintDirty20getFixedDigitsStringEih+0x56>
    1858:	c8 01       	movw	r24, r16
    185a:	60 e3       	ldi	r22, 0x30	; 48
    185c:	0e 94 2b 39 	call	0x7256	; 0x7256 <_ZN6String6concatEc>
    1860:	08 94       	sec
    1862:	c1 1c       	adc	r12, r1
    1864:	d1 1c       	adc	r13, r1
    1866:	ce 14       	cp	r12, r14
    1868:	df 04       	cpc	r13, r15
    186a:	b4 f3       	brlt	.-20     	; 0x1858 <_ZN13GB_PrintDirty20getFixedDigitsStringEih+0x48>
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
    186c:	c8 01       	movw	r24, r16
    186e:	b5 01       	movw	r22, r10
    1870:	0e 94 ce 38 	call	0x719c	; 0x719c <_ZN6String6concatEi>
      out +='0';
    }
    out += number;
    return out.substring(out.length()-numberOfDigits);
    1874:	4d 81       	ldd	r20, Y+5	; 0x05
    1876:	5e 81       	ldd	r21, Y+6	; 0x06
    1878:	4e 19       	sub	r20, r14
    187a:	5f 09       	sbc	r21, r15
    187c:	c4 01       	movw	r24, r8
    187e:	b8 01       	movw	r22, r16
    1880:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <_ZNK6String9substringEj>
    1884:	c8 01       	movw	r24, r16
    1886:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
  }
    188a:	c4 01       	movw	r24, r8
    188c:	27 96       	adiw	r28, 0x07	; 7
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	1f 91       	pop	r17
    189e:	0f 91       	pop	r16
    18a0:	ff 90       	pop	r15
    18a2:	ef 90       	pop	r14
    18a4:	df 90       	pop	r13
    18a6:	cf 90       	pop	r12
    18a8:	bf 90       	pop	r11
    18aa:	af 90       	pop	r10
    18ac:	9f 90       	pop	r9
    18ae:	8f 90       	pop	r8
    18b0:	08 95       	ret

000018b2 <_ZN13GB_PrintDirty13getTimeStringEm>:
    out += getFixedDigitsString(temp,2);
    return out;
  }


  static String getTimeString(time_t time){
    18b2:	cf 92       	push	r12
    18b4:	df 92       	push	r13
    18b6:	ef 92       	push	r14
    18b8:	ff 92       	push	r15
    18ba:	0f 93       	push	r16
    18bc:	1f 93       	push	r17
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
    18c6:	e1 97       	sbiw	r28, 0x31	; 49
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	f8 94       	cli
    18cc:	de bf       	out	0x3e, r29	; 62
    18ce:	0f be       	out	0x3f, r0	; 63
    18d0:	cd bf       	out	0x3d, r28	; 61
    18d2:	d8 2e       	mov	r13, r24
    18d4:	c9 2e       	mov	r12, r25
    18d6:	7a 01       	movw	r14, r20
    18d8:	8b 01       	movw	r16, r22
    String out;
    18da:	60 e0       	ldi	r22, 0x00	; 0
    18dc:	71 e0       	ldi	r23, 0x01	; 1
    18de:	0e 94 8f 39 	call	0x731e	; 0x731e <_ZN6StringC1EPKc>

    tmElements_t tm;
    breakTime(time, tm);
    18e2:	c8 01       	movw	r24, r16
    18e4:	b7 01       	movw	r22, r14
    18e6:	ae 01       	movw	r20, r28
    18e8:	4f 5f       	subi	r20, 0xFF	; 255
    18ea:	5f 4f       	sbci	r21, 0xFF	; 255
    18ec:	0e 94 ac 20 	call	0x4158	; 0x4158 <_Z9breakTimemR12tmElements_t>
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    18f0:	8d 2d       	mov	r24, r13
    18f2:	9c 2d       	mov	r25, r12
    18f4:	6b e5       	ldi	r22, 0x5B	; 91
    18f6:	0e 94 2b 39 	call	0x7256	; 0x7256 <_ZN6String6concatEc>

    out += '[';
    out += getFixedDigitsString(tm.Hour, 2);
    18fa:	8e 01       	movw	r16, r28
    18fc:	08 5f       	subi	r16, 0xF8	; 248
    18fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1900:	6b 81       	ldd	r22, Y+3	; 0x03
    1902:	c8 01       	movw	r24, r16
    1904:	70 e0       	ldi	r23, 0x00	; 0
    1906:	42 e0       	ldi	r20, 0x02	; 2
    1908:	0e 94 08 0c 	call	0x1810	; 0x1810 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    190c:	8d 2d       	mov	r24, r13
    190e:	9c 2d       	mov	r25, r12
    1910:	b8 01       	movw	r22, r16
    1912:	0e 94 3e 39 	call	0x727c	; 0x727c <_ZN6String6concatERKS_>
    1916:	c8 01       	movw	r24, r16
    1918:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    191c:	8d 2d       	mov	r24, r13
    191e:	9c 2d       	mov	r25, r12
    1920:	6a e3       	ldi	r22, 0x3A	; 58
    1922:	0e 94 2b 39 	call	0x7256	; 0x7256 <_ZN6String6concatEc>
    out += ':';
    out += getFixedDigitsString(tm.Minute, 2);
    1926:	8e 01       	movw	r16, r28
    1928:	01 5f       	subi	r16, 0xF1	; 241
    192a:	1f 4f       	sbci	r17, 0xFF	; 255
    192c:	6a 81       	ldd	r22, Y+2	; 0x02
    192e:	c8 01       	movw	r24, r16
    1930:	70 e0       	ldi	r23, 0x00	; 0
    1932:	42 e0       	ldi	r20, 0x02	; 2
    1934:	0e 94 08 0c 	call	0x1810	; 0x1810 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1938:	8d 2d       	mov	r24, r13
    193a:	9c 2d       	mov	r25, r12
    193c:	b8 01       	movw	r22, r16
    193e:	0e 94 3e 39 	call	0x727c	; 0x727c <_ZN6String6concatERKS_>
    1942:	c8 01       	movw	r24, r16
    1944:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1948:	8d 2d       	mov	r24, r13
    194a:	9c 2d       	mov	r25, r12
    194c:	6a e3       	ldi	r22, 0x3A	; 58
    194e:	0e 94 2b 39 	call	0x7256	; 0x7256 <_ZN6String6concatEc>
    out += ':';
    out += getFixedDigitsString(tm.Second, 2);
    1952:	8e 01       	movw	r16, r28
    1954:	0a 5e       	subi	r16, 0xEA	; 234
    1956:	1f 4f       	sbci	r17, 0xFF	; 255
    1958:	69 81       	ldd	r22, Y+1	; 0x01
    195a:	c8 01       	movw	r24, r16
    195c:	70 e0       	ldi	r23, 0x00	; 0
    195e:	42 e0       	ldi	r20, 0x02	; 2
    1960:	0e 94 08 0c 	call	0x1810	; 0x1810 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1964:	8d 2d       	mov	r24, r13
    1966:	9c 2d       	mov	r25, r12
    1968:	b8 01       	movw	r22, r16
    196a:	0e 94 3e 39 	call	0x727c	; 0x727c <_ZN6String6concatERKS_>
    196e:	c8 01       	movw	r24, r16
    1970:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1974:	8d 2d       	mov	r24, r13
    1976:	9c 2d       	mov	r25, r12
    1978:	60 e2       	ldi	r22, 0x20	; 32
    197a:	0e 94 2b 39 	call	0x7256	; 0x7256 <_ZN6String6concatEc>
    out += ' ';
    out += getFixedDigitsString(tm.Day, 2);
    197e:	8e 01       	movw	r16, r28
    1980:	03 5e       	subi	r16, 0xE3	; 227
    1982:	1f 4f       	sbci	r17, 0xFF	; 255
    1984:	6d 81       	ldd	r22, Y+5	; 0x05
    1986:	c8 01       	movw	r24, r16
    1988:	70 e0       	ldi	r23, 0x00	; 0
    198a:	42 e0       	ldi	r20, 0x02	; 2
    198c:	0e 94 08 0c 	call	0x1810	; 0x1810 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1990:	8d 2d       	mov	r24, r13
    1992:	9c 2d       	mov	r25, r12
    1994:	b8 01       	movw	r22, r16
    1996:	0e 94 3e 39 	call	0x727c	; 0x727c <_ZN6String6concatERKS_>
    199a:	c8 01       	movw	r24, r16
    199c:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    19a0:	8d 2d       	mov	r24, r13
    19a2:	9c 2d       	mov	r25, r12
    19a4:	6e e2       	ldi	r22, 0x2E	; 46
    19a6:	0e 94 2b 39 	call	0x7256	; 0x7256 <_ZN6String6concatEc>
    out +='.';
    out += getFixedDigitsString(tm.Month, 2);
    19aa:	8e 01       	movw	r16, r28
    19ac:	0c 5d       	subi	r16, 0xDC	; 220
    19ae:	1f 4f       	sbci	r17, 0xFF	; 255
    19b0:	6e 81       	ldd	r22, Y+6	; 0x06
    19b2:	c8 01       	movw	r24, r16
    19b4:	70 e0       	ldi	r23, 0x00	; 0
    19b6:	42 e0       	ldi	r20, 0x02	; 2
    19b8:	0e 94 08 0c 	call	0x1810	; 0x1810 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    19bc:	8d 2d       	mov	r24, r13
    19be:	9c 2d       	mov	r25, r12
    19c0:	b8 01       	movw	r22, r16
    19c2:	0e 94 3e 39 	call	0x727c	; 0x727c <_ZN6String6concatERKS_>
    19c6:	c8 01       	movw	r24, r16
    19c8:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    19cc:	8d 2d       	mov	r24, r13
    19ce:	9c 2d       	mov	r25, r12
    19d0:	6e e2       	ldi	r22, 0x2E	; 46
    19d2:	0e 94 2b 39 	call	0x7256	; 0x7256 <_ZN6String6concatEc>
    out += '.';
    out += getFixedDigitsString(tmYearToCalendar(tm.Year), 4); 
    19d6:	8e 01       	movw	r16, r28
    19d8:	05 5d       	subi	r16, 0xD5	; 213
    19da:	1f 4f       	sbci	r17, 0xFF	; 255
    19dc:	6f 81       	ldd	r22, Y+7	; 0x07
    19de:	70 e0       	ldi	r23, 0x00	; 0
    19e0:	6e 54       	subi	r22, 0x4E	; 78
    19e2:	78 4f       	sbci	r23, 0xF8	; 248
    19e4:	c8 01       	movw	r24, r16
    19e6:	44 e0       	ldi	r20, 0x04	; 4
    19e8:	0e 94 08 0c 	call	0x1810	; 0x1810 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    19ec:	8d 2d       	mov	r24, r13
    19ee:	9c 2d       	mov	r25, r12
    19f0:	b8 01       	movw	r22, r16
    19f2:	0e 94 3e 39 	call	0x727c	; 0x727c <_ZN6String6concatERKS_>
    19f6:	c8 01       	movw	r24, r16
    19f8:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    19fc:	8d 2d       	mov	r24, r13
    19fe:	9c 2d       	mov	r25, r12
    1a00:	6d e5       	ldi	r22, 0x5D	; 93
    1a02:	0e 94 2b 39 	call	0x7256	; 0x7256 <_ZN6String6concatEc>
    out += ']';
    return out;
  } 
    1a06:	8d 2d       	mov	r24, r13
    1a08:	9c 2d       	mov	r25, r12
    1a0a:	e1 96       	adiw	r28, 0x31	; 49
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	f8 94       	cli
    1a10:	de bf       	out	0x3e, r29	; 62
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	cd bf       	out	0x3d, r28	; 61
    1a16:	cf 91       	pop	r28
    1a18:	df 91       	pop	r29
    1a1a:	1f 91       	pop	r17
    1a1c:	0f 91       	pop	r16
    1a1e:	ff 90       	pop	r15
    1a20:	ef 90       	pop	r14
    1a22:	df 90       	pop	r13
    1a24:	cf 90       	pop	r12
    1a26:	08 95       	ret

00001a28 <_ZN9GB_Logger18getLogRecordSuffixERK9LogRecord>:
    else {
      return F("Unknown");
    }
  }
  
  static String getLogRecordSuffix(const LogRecord &logRecord){        
    1a28:	df 92       	push	r13
    1a2a:	ef 92       	push	r14
    1a2c:	ff 92       	push	r15
    1a2e:	0f 93       	push	r16
    1a30:	1f 93       	push	r17
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	2e 97       	sbiw	r28, 0x0e	; 14
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	f8 94       	cli
    1a40:	de bf       	out	0x3e, r29	; 62
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	cd bf       	out	0x3d, r28	; 61
    1a46:	e8 2e       	mov	r14, r24
    1a48:	d9 2e       	mov	r13, r25
    1a4a:	8b 01       	movw	r16, r22
    String out;
    1a4c:	60 e0       	ldi	r22, 0x00	; 0
    1a4e:	71 e0       	ldi	r23, 0x01	; 1
    1a50:	0e 94 8f 39 	call	0x731e	; 0x731e <_ZN6StringC1EPKc>
  }
  static boolean isError(const LogRecord &logRecord){
    return (logRecord.data & B11000000) == B01000000;
  }
  static boolean isTemperature(const LogRecord &logRecord){
    return (logRecord.data & B11000000) == B11000000;
    1a54:	f8 01       	movw	r30, r16
    1a56:	f4 80       	ldd	r15, Z+4	; 0x04
    }
  }
  
  static String getLogRecordSuffix(const LogRecord &logRecord){        
    String out;
    if (isTemperature(logRecord)) {
    1a58:	8f 2d       	mov	r24, r15
    1a5a:	80 7c       	andi	r24, 0xC0	; 192
    1a5c:	80 3c       	cpi	r24, 0xC0	; 192
    1a5e:	39 f5       	brne	.+78     	; 0x1aae <_ZN9GB_Logger18getLogRecordSuffixERK9LogRecord+0x86>
      byte temperature = (logRecord.data & B00111111);
      out += flashStringLoad(F(" ["));
    1a60:	8e 01       	movw	r16, r28
    1a62:	0f 5f       	subi	r16, 0xFF	; 255
    1a64:	1f 4f       	sbci	r17, 0xFF	; 255
    1a66:	c8 01       	movw	r24, r16
    1a68:	6b ee       	ldi	r22, 0xEB	; 235
    1a6a:	70 e0       	ldi	r23, 0x00	; 0
    1a6c:	0e 94 4c 06 	call	0xc98	; 0xc98 <_ZL15flashStringLoadPKc>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1a70:	8e 2d       	mov	r24, r14
    1a72:	9d 2d       	mov	r25, r13
    1a74:	b8 01       	movw	r22, r16
    1a76:	0e 94 3e 39 	call	0x727c	; 0x727c <_ZN6String6concatERKS_>
    1a7a:	c8 01       	movw	r24, r16
    1a7c:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
    1a80:	ff e3       	ldi	r31, 0x3F	; 63
    1a82:	ff 22       	and	r15, r31
    1a84:	8e 2d       	mov	r24, r14
    1a86:	9d 2d       	mov	r25, r13
    1a88:	6f 2d       	mov	r22, r15
    1a8a:	0e 94 ff 38 	call	0x71fe	; 0x71fe <_ZN6String6concatEh>
  }
  return str; 
}

static String flashStringLoad(const __FlashStringHelper* fstr){ 
  return flashStringLoad((const char PROGMEM*) fstr);
    1a8e:	8e 01       	movw	r16, r28
    1a90:	08 5f       	subi	r16, 0xF8	; 248
    1a92:	1f 4f       	sbci	r17, 0xFF	; 255
      out += temperature;
      out += flashStringLoad(F("] C"));
    1a94:	c8 01       	movw	r24, r16
    1a96:	67 ee       	ldi	r22, 0xE7	; 231
    1a98:	70 e0       	ldi	r23, 0x00	; 0
    1a9a:	0e 94 4c 06 	call	0xc98	; 0xc98 <_ZL15flashStringLoadPKc>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1a9e:	8e 2d       	mov	r24, r14
    1aa0:	9d 2d       	mov	r25, r13
    1aa2:	b8 01       	movw	r22, r16
    1aa4:	0e 94 3e 39 	call	0x727c	; 0x727c <_ZN6String6concatERKS_>
    1aa8:	c8 01       	movw	r24, r16
    1aaa:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
    }
    //Serial.print(F(" HEX: "));
    //GB_PrintDirty::printRAM(&((LogRecord)logRecord), sizeof(LogRecord));  

    return out;
  }
    1aae:	8e 2d       	mov	r24, r14
    1ab0:	9d 2d       	mov	r25, r13
    1ab2:	2e 96       	adiw	r28, 0x0e	; 14
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	cd bf       	out	0x3d, r28	; 61
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	1f 91       	pop	r17
    1ac4:	0f 91       	pop	r16
    1ac6:	ff 90       	pop	r15
    1ac8:	ef 90       	pop	r14
    1aca:	df 90       	pop	r13
    1acc:	08 95       	ret

00001ace <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh>:
  }


private:

  static void printDirtyLogRecord(const LogRecord &logRecord, const __FlashStringHelper* description, const boolean isStored, const byte temperature = 0xFF){
    1ace:	af 92       	push	r10
    1ad0:	bf 92       	push	r11
    1ad2:	cf 92       	push	r12
    1ad4:	df 92       	push	r13
    1ad6:	ef 92       	push	r14
    1ad8:	ff 92       	push	r15
    1ada:	0f 93       	push	r16
    1adc:	1f 93       	push	r17
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	6c 97       	sbiw	r28, 0x1c	; 28
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	f8 94       	cli
    1aec:	de bf       	out	0x3e, r29	; 62
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	cd bf       	out	0x3d, r28	; 61
    1af2:	6c 01       	movw	r12, r24
    1af4:	5b 01       	movw	r10, r22
    1af6:	04 2f       	mov	r16, r20
    if (!GB_SerialHelper::useSerialMonitor) {
    1af8:	80 91 ae 01 	lds	r24, 0x01AE
    1afc:	88 23       	and	r24, r24
    1afe:	09 f4       	brne	.+2      	; 0x1b02 <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh+0x34>
    1b00:	61 c0       	rjmp	.+194    	; 0x1bc4 <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh+0xf6>
      return;
    }
    Serial.print(F("LOG> ")); 
    1b02:	88 eb       	ldi	r24, 0xB8	; 184
    1b04:	93 e0       	ldi	r25, 0x03	; 3
    1b06:	61 ee       	ldi	r22, 0xE1	; 225
    1b08:	70 e0       	ldi	r23, 0x00	; 0
    1b0a:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_ZN5Print5printEPK19__FlashStringHelper>
    if (!isStored) {
    1b0e:	00 23       	and	r16, r16
    1b10:	31 f4       	brne	.+12     	; 0x1b1e <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh+0x50>
      Serial.print(F("NOT STORED "));
    1b12:	88 eb       	ldi	r24, 0xB8	; 184
    1b14:	93 e0       	ldi	r25, 0x03	; 3
    1b16:	65 ed       	ldi	r22, 0xD5	; 213
    1b18:	70 e0       	ldi	r23, 0x00	; 0
    1b1a:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_ZN5Print5printEPK19__FlashStringHelper>
    GB_StorageHelper::getLogRecordByIndex(index, logRecord);
    return logRecord;
  }

  static String getLogRecordPrefix(const LogRecord &logRecord){        
    String out;
    1b1e:	7e 01       	movw	r14, r28
    1b20:	08 94       	sec
    1b22:	e1 1c       	adc	r14, r1
    1b24:	f1 1c       	adc	r15, r1
    1b26:	c7 01       	movw	r24, r14
    1b28:	60 e0       	ldi	r22, 0x00	; 0
    1b2a:	71 e0       	ldi	r23, 0x01	; 1
    1b2c:	0e 94 8f 39 	call	0x731e	; 0x731e <_ZN6StringC1EPKc>
    out += GB_PrintDirty::getTimeString(logRecord.timeStamp);
    1b30:	8e 01       	movw	r16, r28
    1b32:	01 5f       	subi	r16, 0xF1	; 241
    1b34:	1f 4f       	sbci	r17, 0xFF	; 255
    1b36:	f6 01       	movw	r30, r12
    1b38:	40 81       	ld	r20, Z
    1b3a:	51 81       	ldd	r21, Z+1	; 0x01
    1b3c:	62 81       	ldd	r22, Z+2	; 0x02
    1b3e:	73 81       	ldd	r23, Z+3	; 0x03
    1b40:	c8 01       	movw	r24, r16
    1b42:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <_ZN13GB_PrintDirty13getTimeStringEm>
    1b46:	c7 01       	movw	r24, r14
    1b48:	b8 01       	movw	r22, r16
    1b4a:	0e 94 3e 39 	call	0x727c	; 0x727c <_ZN6String6concatERKS_>
    1b4e:	c8 01       	movw	r24, r16
    1b50:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1b54:	c7 01       	movw	r24, r14
    1b56:	60 e2       	ldi	r22, 0x20	; 32
    1b58:	0e 94 2b 39 	call	0x7256	; 0x7256 <_ZN6String6concatEc>
    out += ' '; 
    out += GB_PrintDirty::getHEX(logRecord.data, true);
    1b5c:	8e 01       	movw	r16, r28
    1b5e:	0a 5e       	subi	r16, 0xEA	; 234
    1b60:	1f 4f       	sbci	r17, 0xFF	; 255
    1b62:	c8 01       	movw	r24, r16
    1b64:	f6 01       	movw	r30, r12
    1b66:	64 81       	ldd	r22, Z+4	; 0x04
    1b68:	41 e0       	ldi	r20, 0x01	; 1
    1b6a:	0e 94 87 06 	call	0xd0e	; 0xd0e <_ZN13GB_PrintDirty6getHEXEhh>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1b6e:	c7 01       	movw	r24, r14
    1b70:	b8 01       	movw	r22, r16
    1b72:	0e 94 3e 39 	call	0x727c	; 0x727c <_ZN6String6concatERKS_>
    1b76:	c8 01       	movw	r24, r16
    1b78:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1b7c:	c7 01       	movw	r24, r14
    1b7e:	60 e2       	ldi	r22, 0x20	; 32
    1b80:	0e 94 2b 39 	call	0x7256	; 0x7256 <_ZN6String6concatEc>
    }
    Serial.print(F("LOG> ")); 
    if (!isStored) {
      Serial.print(F("NOT STORED "));
    }
    Serial.print(getLogRecordPrefix(logRecord));    
    1b84:	88 eb       	ldi	r24, 0xB8	; 184
    1b86:	93 e0       	ldi	r25, 0x03	; 3
    1b88:	b7 01       	movw	r22, r14
    1b8a:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <_ZN5Print5printERK6String>
    1b8e:	c7 01       	movw	r24, r14
    1b90:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
    Serial.print(description);
    1b94:	88 eb       	ldi	r24, 0xB8	; 184
    1b96:	93 e0       	ldi	r25, 0x03	; 3
    1b98:	b5 01       	movw	r22, r10
    1b9a:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(getLogRecordSuffix(logRecord));  
    1b9e:	8e 01       	movw	r16, r28
    1ba0:	08 5f       	subi	r16, 0xF8	; 248
    1ba2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba4:	c8 01       	movw	r24, r16
    1ba6:	b6 01       	movw	r22, r12
    1ba8:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_ZN9GB_Logger18getLogRecordSuffixERK9LogRecord>
    1bac:	88 eb       	ldi	r24, 0xB8	; 184
    1bae:	93 e0       	ldi	r25, 0x03	; 3
    1bb0:	b8 01       	movw	r22, r16
    1bb2:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <_ZN5Print5printERK6String>
    1bb6:	c8 01       	movw	r24, r16
    1bb8:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>

    Serial.println();      
    1bbc:	88 eb       	ldi	r24, 0xB8	; 184
    1bbe:	93 e0       	ldi	r25, 0x03	; 3
    1bc0:	0e 94 79 36 	call	0x6cf2	; 0x6cf2 <_ZN5Print7printlnEv>
  }
    1bc4:	6c 96       	adiw	r28, 0x1c	; 28
    1bc6:	0f b6       	in	r0, 0x3f	; 63
    1bc8:	f8 94       	cli
    1bca:	de bf       	out	0x3e, r29	; 62
    1bcc:	0f be       	out	0x3f, r0	; 63
    1bce:	cd bf       	out	0x3d, r28	; 61
    1bd0:	cf 91       	pop	r28
    1bd2:	df 91       	pop	r29
    1bd4:	1f 91       	pop	r17
    1bd6:	0f 91       	pop	r16
    1bd8:	ff 90       	pop	r15
    1bda:	ef 90       	pop	r14
    1bdc:	df 90       	pop	r13
    1bde:	cf 90       	pop	r12
    1be0:	bf 90       	pop	r11
    1be2:	af 90       	pop	r10
    1be4:	08 95       	ret

00001be6 <_ZN9GB_Logger8logEventER5Event>:
public:

  // Normal event uses uses format [00DDDDDD]
  //   00 - prefix for normal events 
  //   DDDDDD - event identificator
  static void logEvent(Event &event){
    1be6:	ef 92       	push	r14
    1be8:	ff 92       	push	r15
    1bea:	0f 93       	push	r16
    1bec:	1f 93       	push	r17
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	00 d0       	rcall	.+0      	; 0x1bf4 <_ZN9GB_Logger8logEventER5Event+0xe>
    1bf4:	00 d0       	rcall	.+0      	; 0x1bf6 <_ZN9GB_Logger8logEventER5Event+0x10>
    1bf6:	0f 92       	push	r0
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    1bfc:	7c 01       	movw	r14, r24
    LogRecord logRecord(event.index);
    1bfe:	fc 01       	movw	r30, r24
    1c00:	12 81       	ldd	r17, Z+2	; 0x02
struct LogRecord {
  time_t timeStamp;
  byte data;  

  LogRecord (byte data): 
  timeStamp(now()), data(data) {
    1c02:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <_Z3nowv>
    1c06:	69 83       	std	Y+1, r22	; 0x01
    1c08:	7a 83       	std	Y+2, r23	; 0x02
    1c0a:	8b 83       	std	Y+3, r24	; 0x03
    1c0c:	9c 83       	std	Y+4, r25	; 0x04
    1c0e:	1d 83       	std	Y+5, r17	; 0x05
    boolean isStored = GB_StorageHelper::storeLogRecord(logRecord);
    1c10:	8e 01       	movw	r16, r28
    1c12:	0f 5f       	subi	r16, 0xFF	; 255
    1c14:	1f 4f       	sbci	r17, 0xFF	; 255
    1c16:	c8 01       	movw	r24, r16
    1c18:	0e 94 a2 05 	call	0xb44	; 0xb44 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord>
    1c1c:	48 2f       	mov	r20, r24
    printDirtyLogRecord(logRecord, event.description, isStored);
    1c1e:	f7 01       	movw	r30, r14
    1c20:	63 81       	ldd	r22, Z+3	; 0x03
    1c22:	74 81       	ldd	r23, Z+4	; 0x04
    1c24:	c8 01       	movw	r24, r16
    1c26:	2f ef       	ldi	r18, 0xFF	; 255
    1c28:	0e 94 67 0d 	call	0x1ace	; 0x1ace <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh>
    GB_SerialHelper::printDirtyEnd();
    1c2c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <_ZN15GB_SerialHelper13printDirtyEndEv>
  }
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	1f 91       	pop	r17
    1c40:	0f 91       	pop	r16
    1c42:	ff 90       	pop	r15
    1c44:	ef 90       	pop	r14
    1c46:	08 95       	ret

00001c48 <_Z10turnOffFanv>:
    1c48:	84 e0       	ldi	r24, 0x04	; 4
    1c4a:	0e 94 4a 33 	call	0x6694	; 0x6694 <digitalRead>
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	61 f0       	breq	.+24     	; 0x1c6a <_Z10turnOffFanv+0x22>
    1c52:	84 e0       	ldi	r24, 0x04	; 4
    1c54:	61 e0       	ldi	r22, 0x01	; 1
    1c56:	0e 94 f6 32 	call	0x65ec	; 0x65ec <digitalWrite>
    1c5a:	85 e0       	ldi	r24, 0x05	; 5
    1c5c:	61 e0       	ldi	r22, 0x01	; 1
    1c5e:	0e 94 f6 32 	call	0x65ec	; 0x65ec <digitalWrite>
    1c62:	8a e9       	ldi	r24, 0x9A	; 154
    1c64:	91 e0       	ldi	r25, 0x01	; 1
    1c66:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <_ZN9GB_Logger8logEventER5Event>
    1c6a:	08 95       	ret

00001c6c <_Z9turnOnFani>:
    1c6c:	cf 93       	push	r28
    1c6e:	df 93       	push	r29
    1c70:	ec 01       	movw	r28, r24
    1c72:	84 e0       	ldi	r24, 0x04	; 4
    1c74:	0e 94 4a 33 	call	0x6694	; 0x6694 <digitalRead>
    1c78:	89 2b       	or	r24, r25
    1c7a:	79 f4       	brne	.+30     	; 0x1c9a <_Z9turnOnFani+0x2e>
    1c7c:	85 e0       	ldi	r24, 0x05	; 5
    1c7e:	0e 94 4a 33 	call	0x6694	; 0x6694 <digitalRead>
    1c82:	8c 17       	cp	r24, r28
    1c84:	9d 07       	cpc	r25, r29
    1c86:	49 f4       	brne	.+18     	; 0x1c9a <_Z9turnOnFani+0x2e>
    1c88:	13 c0       	rjmp	.+38     	; 0x1cb0 <_Z9turnOnFani+0x44>
    1c8a:	8f e9       	ldi	r24, 0x9F	; 159
    1c8c:	91 e0       	ldi	r25, 0x01	; 1
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <_Z9turnOnFani+0x28>
    1c90:	84 ea       	ldi	r24, 0xA4	; 164
    1c92:	91 e0       	ldi	r25, 0x01	; 1
    1c94:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <_ZN9GB_Logger8logEventER5Event>
    1c98:	0b c0       	rjmp	.+22     	; 0x1cb0 <_Z9turnOnFani+0x44>
    1c9a:	85 e0       	ldi	r24, 0x05	; 5
    1c9c:	6c 2f       	mov	r22, r28
    1c9e:	0e 94 f6 32 	call	0x65ec	; 0x65ec <digitalWrite>
    1ca2:	84 e0       	ldi	r24, 0x04	; 4
    1ca4:	60 e0       	ldi	r22, 0x00	; 0
    1ca6:	0e 94 f6 32 	call	0x65ec	; 0x65ec <digitalWrite>
    1caa:	21 97       	sbiw	r28, 0x01	; 1
    1cac:	89 f7       	brne	.-30     	; 0x1c90 <_Z9turnOnFani+0x24>
    1cae:	ed cf       	rjmp	.-38     	; 0x1c8a <_Z9turnOnFani+0x1e>
    1cb0:	df 91       	pop	r29
    1cb2:	cf 91       	pop	r28
    1cb4:	08 95       	ret

00001cb6 <_Z12turnOffLightv>:
    1cb6:	83 e0       	ldi	r24, 0x03	; 3
    1cb8:	0e 94 4a 33 	call	0x6694	; 0x6694 <digitalRead>
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	41 f0       	breq	.+16     	; 0x1cd0 <_Z12turnOffLightv+0x1a>
    1cc0:	83 e0       	ldi	r24, 0x03	; 3
    1cc2:	61 e0       	ldi	r22, 0x01	; 1
    1cc4:	0e 94 f6 32 	call	0x65ec	; 0x65ec <digitalWrite>
    1cc8:	80 e9       	ldi	r24, 0x90	; 144
    1cca:	91 e0       	ldi	r25, 0x01	; 1
    1ccc:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <_ZN9GB_Logger8logEventER5Event>
    1cd0:	08 95       	ret

00001cd2 <_Z11turnOnLightv>:
    1cd2:	83 e0       	ldi	r24, 0x03	; 3
    1cd4:	0e 94 4a 33 	call	0x6694	; 0x6694 <digitalRead>
    1cd8:	89 2b       	or	r24, r25
    1cda:	41 f0       	breq	.+16     	; 0x1cec <_Z11turnOnLightv+0x1a>
    1cdc:	83 e0       	ldi	r24, 0x03	; 3
    1cde:	60 e0       	ldi	r22, 0x00	; 0
    1ce0:	0e 94 f6 32 	call	0x65ec	; 0x65ec <digitalWrite>
    1ce4:	85 e9       	ldi	r24, 0x95	; 149
    1ce6:	91 e0       	ldi	r25, 0x01	; 1
    1ce8:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <_ZN9GB_Logger8logEventER5Event>
    1cec:	08 95       	ret

00001cee <_ZN9GB_Logger8logErrorER5Error>:

  // Error events uses format [01SSDDDD] 
  //   01 - prefix for error events 
  //   SS - length of errir seqence 
  //   DDDD - sequence data
  static void logError(Error &error){
    1cee:	8f 92       	push	r8
    1cf0:	9f 92       	push	r9
    1cf2:	af 92       	push	r10
    1cf4:	bf 92       	push	r11
    1cf6:	cf 92       	push	r12
    1cf8:	df 92       	push	r13
    1cfa:	ef 92       	push	r14
    1cfc:	ff 92       	push	r15
    1cfe:	0f 93       	push	r16
    1d00:	1f 93       	push	r17
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	00 d0       	rcall	.+0      	; 0x1d08 <_ZN9GB_Logger8logErrorER5Error+0x1a>
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <_ZN9GB_Logger8logErrorER5Error+0x1c>
    1d0a:	0f 92       	push	r0
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	7c 01       	movw	r14, r24
    LogRecord logRecord(B01000000|(B00000011 | error.sequenceSize-1)<<4 | (B00001111 & error.sequence));
    1d12:	fc 01       	movw	r30, r24
    1d14:	12 81       	ldd	r17, Z+2	; 0x02
    1d16:	1f 70       	andi	r17, 0x0F	; 15
    1d18:	10 64       	ori	r17, 0x40	; 64
    1d1a:	83 81       	ldd	r24, Z+3	; 0x03
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	83 60       	ori	r24, 0x03	; 3
    1d22:	34 e0       	ldi	r19, 0x04	; 4
    1d24:	88 0f       	add	r24, r24
    1d26:	99 1f       	adc	r25, r25
    1d28:	3a 95       	dec	r19
    1d2a:	e1 f7       	brne	.-8      	; 0x1d24 <_ZN9GB_Logger8logErrorER5Error+0x36>
    1d2c:	18 2b       	or	r17, r24
    1d2e:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <_Z3nowv>
    1d32:	69 83       	std	Y+1, r22	; 0x01
    1d34:	7a 83       	std	Y+2, r23	; 0x02
    1d36:	8b 83       	std	Y+3, r24	; 0x03
    1d38:	9c 83       	std	Y+4, r25	; 0x04
    1d3a:	1d 83       	std	Y+5, r17	; 0x05
    boolean isStoredNow = false;
    if(!error.isStored){
    1d3c:	f7 01       	movw	r30, r14
    1d3e:	86 81       	ldd	r24, Z+6	; 0x06
    1d40:	88 23       	and	r24, r24
    1d42:	11 f0       	breq	.+4      	; 0x1d48 <_ZN9GB_Logger8logErrorER5Error+0x5a>
    1d44:	40 e0       	ldi	r20, 0x00	; 0
    1d46:	07 c0       	rjmp	.+14     	; 0x1d56 <_ZN9GB_Logger8logErrorER5Error+0x68>
      error.isStored = GB_StorageHelper::storeLogRecord(logRecord);
    1d48:	ce 01       	movw	r24, r28
    1d4a:	01 96       	adiw	r24, 0x01	; 1
    1d4c:	0e 94 a2 05 	call	0xb44	; 0xb44 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord>
    1d50:	f7 01       	movw	r30, r14
    1d52:	86 83       	std	Z+6, r24	; 0x06
    1d54:	41 e0       	ldi	r20, 0x01	; 1
      isStoredNow = true;
    } 
    printDirtyLogRecord(logRecord, error.description, isStoredNow);
    1d56:	f7 01       	movw	r30, r14
    1d58:	64 81       	ldd	r22, Z+4	; 0x04
    1d5a:	75 81       	ldd	r23, Z+5	; 0x05
    1d5c:	ce 01       	movw	r24, r28
    1d5e:	01 96       	adiw	r24, 0x01	; 1
    1d60:	2f ef       	ldi	r18, 0xFF	; 255
    1d62:	0e 94 67 0d 	call	0x1ace	; 0x1ace <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh>
    GB_SerialHelper::printDirtyEnd();
    1d66:	0e 94 63 08 	call	0x10c6	; 0x10c6 <_ZN15GB_SerialHelper13printDirtyEndEv>
    error.isStored = true;   
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	f7 01       	movw	r30, r14
    1d6e:	86 83       	std	Z+6, r24	; 0x06
    return (findByIndex(0xFF, 0xFF) == 0);
  }
  
  
void notify() {
  digitalWrite(ERROR_PIN, LOW);
    1d70:	8c e0       	ldi	r24, 0x0C	; 12
    1d72:	60 e0       	ldi	r22, 0x00	; 0
    1d74:	0e 94 f6 32 	call	0x65ec	; 0x65ec <digitalWrite>
  delay(1000);
    1d78:	68 ee       	ldi	r22, 0xE8	; 232
    1d7a:	73 e0       	ldi	r23, 0x03	; 3
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	0e 94 19 32 	call	0x6432	; 0x6432 <delay>
  for (int i = sequenceSize-1; i >= 0; i--){
    1d84:	f7 01       	movw	r30, r14
    1d86:	83 81       	ldd	r24, Z+3	; 0x03
    1d88:	00 e0       	ldi	r16, 0x00	; 0
    1d8a:	10 e0       	ldi	r17, 0x00	; 0

  // Error events uses format [01SSDDDD] 
  //   01 - prefix for error events 
  //   SS - length of errir seqence 
  //   DDDD - sequence data
  static void logError(Error &error){
    1d8c:	a8 2e       	mov	r10, r24
    1d8e:	bb 24       	eor	r11, r11
    1d90:	45 01       	movw	r8, r10
    1d92:	08 94       	sec
    1d94:	81 08       	sbc	r8, r1
    1d96:	91 08       	sbc	r9, r1
    1d98:	25 c0       	rjmp	.+74     	; 0x1de4 <_ZN9GB_Logger8logErrorER5Error+0xf6>
    digitalWrite(ERROR_PIN, HIGH);
    1d9a:	8c e0       	ldi	r24, 0x0C	; 12
    1d9c:	61 e0       	ldi	r22, 0x01	; 1
    1d9e:	0e 94 f6 32 	call	0x65ec	; 0x65ec <digitalWrite>
    if (bitRead(sequence, i)){
    1da2:	f7 01       	movw	r30, r14
    1da4:	82 81       	ldd	r24, Z+2	; 0x02
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <_ZN9GB_Logger8logErrorER5Error+0xc0>
    1daa:	95 95       	asr	r25
    1dac:	87 95       	ror	r24
    1dae:	ca 94       	dec	r12
    1db0:	e2 f7       	brpl	.-8      	; 0x1daa <_ZN9GB_Logger8logErrorER5Error+0xbc>
    1db2:	80 ff       	sbrs	r24, 0
    1db4:	05 c0       	rjmp	.+10     	; 0x1dc0 <_ZN9GB_Logger8logErrorER5Error+0xd2>
      delay(ERROR_LONG_SIGNAL_MS);
    1db6:	60 e9       	ldi	r22, 0x90	; 144
    1db8:	71 e0       	ldi	r23, 0x01	; 1
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	04 c0       	rjmp	.+8      	; 0x1dc8 <_ZN9GB_Logger8logErrorER5Error+0xda>
    } 
    else {
      delay(ERROR_SHORT_SIGNAL_MS);
    1dc0:	64 e6       	ldi	r22, 0x64	; 100
    1dc2:	70 e0       	ldi	r23, 0x00	; 0
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	0e 94 19 32 	call	0x6432	; 0x6432 <delay>
    } 
    digitalWrite(ERROR_PIN, LOW);
    1dcc:	8c e0       	ldi	r24, 0x0C	; 12
    1dce:	60 e0       	ldi	r22, 0x00	; 0
    1dd0:	0e 94 f6 32 	call	0x65ec	; 0x65ec <digitalWrite>
    delay(ERROR_DELAY_BETWEEN_SIGNALS_MS);
    1dd4:	66 e9       	ldi	r22, 0x96	; 150
    1dd6:	70 e0       	ldi	r23, 0x00	; 0
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	0e 94 19 32 	call	0x6432	; 0x6432 <delay>
    1de0:	0f 5f       	subi	r16, 0xFF	; 255
    1de2:	1f 4f       	sbci	r17, 0xFF	; 255
    1de4:	64 01       	movw	r12, r8
    1de6:	c0 1a       	sub	r12, r16
    1de8:	d1 0a       	sbc	r13, r17
  
  
void notify() {
  digitalWrite(ERROR_PIN, LOW);
  delay(1000);
  for (int i = sequenceSize-1; i >= 0; i--){
    1dea:	0a 15       	cp	r16, r10
    1dec:	1b 05       	cpc	r17, r11
    1dee:	a9 f6       	brne	.-86     	; 0x1d9a <_ZN9GB_Logger8logErrorER5Error+0xac>
      delay(ERROR_SHORT_SIGNAL_MS);
    } 
    digitalWrite(ERROR_PIN, LOW);
    delay(ERROR_DELAY_BETWEEN_SIGNALS_MS);
  }
  digitalWrite(ERROR_PIN, LOW);
    1df0:	8c e0       	ldi	r24, 0x0C	; 12
    1df2:	60 e0       	ldi	r22, 0x00	; 0
    1df4:	0e 94 f6 32 	call	0x65ec	; 0x65ec <digitalWrite>
  delay(1000);
    1df8:	68 ee       	ldi	r22, 0xE8	; 232
    1dfa:	73 e0       	ldi	r23, 0x03	; 3
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	0e 94 19 32 	call	0x6432	; 0x6432 <delay>
    } 
    printDirtyLogRecord(logRecord, error.description, isStoredNow);
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
    1e04:	0f 90       	pop	r0
    1e06:	0f 90       	pop	r0
    1e08:	0f 90       	pop	r0
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	cf 91       	pop	r28
    1e10:	df 91       	pop	r29
    1e12:	1f 91       	pop	r17
    1e14:	0f 91       	pop	r16
    1e16:	ff 90       	pop	r15
    1e18:	ef 90       	pop	r14
    1e1a:	df 90       	pop	r13
    1e1c:	cf 90       	pop	r12
    1e1e:	bf 90       	pop	r11
    1e20:	af 90       	pop	r10
    1e22:	9f 90       	pop	r9
    1e24:	8f 90       	pop	r8
    1e26:	08 95       	ret

00001e28 <_ZN13GB_Controller15checkFreeMemoryEv>:
    resetFunc(); // call
  }

  // discover-memory-overflow-errors-in-the-arduino-c-code
  static void checkFreeMemory(){
    if(freeMemory() < 200){ 
    1e28:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <freeMemory>
    1e2c:	88 3c       	cpi	r24, 0xC8	; 200
    1e2e:	91 05       	cpc	r25, r1
    1e30:	2c f4       	brge	.+10     	; 0x1e3c <_ZN13GB_Controller15checkFreeMemoryEv+0x14>
      GB_Logger::logError(ERROR_MEMORY_LOW);   
    1e32:	85 e7       	ldi	r24, 0x75	; 117
    1e34:	91 e0       	ldi	r25, 0x01	; 1
    1e36:	0e 94 77 0e 	call	0x1cee	; 0x1cee <_ZN9GB_Logger8logErrorER5Error>
    1e3a:	08 95       	ret
  static boolean stopLogError(Error &error){
    if (error.isStored){
    1e3c:	80 91 7b 01 	lds	r24, 0x017B
    1e40:	88 23       	and	r24, r24
    1e42:	11 f0       	breq	.+4      	; 0x1e48 <_ZN13GB_Controller15checkFreeMemoryEv+0x20>
      error.isStored = false;
    1e44:	10 92 7b 01 	sts	0x017B, r1
    1e48:	08 95       	ret

00001e4a <_ZN14GB_Thermometer14getTemperatureEh>:
    }

    return true;
  }

  static float getTemperature(boolean forceLog = false){
    1e4a:	8f 92       	push	r8
    1e4c:	9f 92       	push	r9
    1e4e:	af 92       	push	r10
    1e50:	bf 92       	push	r11
    1e52:	cf 92       	push	r12
    1e54:	df 92       	push	r13
    1e56:	ef 92       	push	r14
    1e58:	ff 92       	push	r15
    1e5a:	0f 93       	push	r16
    1e5c:	1f 93       	push	r17
    1e5e:	df 93       	push	r29
    1e60:	cf 93       	push	r28
    1e62:	00 d0       	rcall	.+0      	; 0x1e64 <_ZN14GB_Thermometer14getTemperatureEh+0x1a>
    1e64:	00 d0       	rcall	.+0      	; 0x1e66 <_ZN14GB_Thermometer14getTemperatureEh+0x1c>
    1e66:	0f 92       	push	r0
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    1e6c:	c8 2e       	mov	r12, r24

    if (statisticsTemperatureCount == 0){
    1e6e:	20 91 04 02 	lds	r18, 0x0204
    1e72:	30 91 05 02 	lds	r19, 0x0205
    1e76:	21 15       	cp	r18, r1
    1e78:	31 05       	cpc	r19, r1
    1e7a:	49 f4       	brne	.+18     	; 0x1e8e <_ZN14GB_Thermometer14getTemperatureEh+0x44>
      return workingTemperature; 
    1e7c:	80 90 fc 01 	lds	r8, 0x01FC
    1e80:	90 90 fd 01 	lds	r9, 0x01FD
    1e84:	a0 90 fe 01 	lds	r10, 0x01FE
    1e88:	b0 90 ff 01 	lds	r11, 0x01FF
    1e8c:	5e c0       	rjmp	.+188    	; 0x1f4a <_ZN14GB_Thermometer14getTemperatureEh+0x100>
    }

    float freshTemperature = statisticsTemperatureSumm/statisticsTemperatureCount;
    1e8e:	b9 01       	movw	r22, r18
    1e90:	88 27       	eor	r24, r24
    1e92:	77 fd       	sbrc	r23, 7
    1e94:	80 95       	com	r24
    1e96:	98 2f       	mov	r25, r24
    1e98:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <__floatsisf>
    1e9c:	9b 01       	movw	r18, r22
    1e9e:	ac 01       	movw	r20, r24
    1ea0:	60 91 00 02 	lds	r22, 0x0200
    1ea4:	70 91 01 02 	lds	r23, 0x0201
    1ea8:	80 91 02 02 	lds	r24, 0x0202
    1eac:	90 91 03 02 	lds	r25, 0x0203
    1eb0:	0e 94 d8 3b 	call	0x77b0	; 0x77b0 <__divsf3>
    1eb4:	4b 01       	movw	r8, r22
    1eb6:	5c 01       	movw	r10, r24

    if (((int)freshTemperature != (int)workingTemperature) || forceLog) {          
    1eb8:	0e 94 40 3c 	call	0x7880	; 0x7880 <__fixsfsi>
    1ebc:	7b 01       	movw	r14, r22
    1ebe:	8c 01       	movw	r16, r24
    1ec0:	60 91 fc 01 	lds	r22, 0x01FC
    1ec4:	70 91 fd 01 	lds	r23, 0x01FD
    1ec8:	80 91 fe 01 	lds	r24, 0x01FE
    1ecc:	90 91 ff 01 	lds	r25, 0x01FF
    1ed0:	0e 94 40 3c 	call	0x7880	; 0x7880 <__fixsfsi>
    1ed4:	e6 16       	cp	r14, r22
    1ed6:	f7 06       	cpc	r15, r23
    1ed8:	11 f4       	brne	.+4      	; 0x1ede <_ZN14GB_Thermometer14getTemperatureEh+0x94>
    1eda:	cc 20       	and	r12, r12
    1edc:	f1 f0       	breq	.+60     	; 0x1f1a <_ZN14GB_Thermometer14getTemperatureEh+0xd0>
      GB_Logger::logTemperature((byte)freshTemperature);
    1ede:	c5 01       	movw	r24, r10
    1ee0:	b4 01       	movw	r22, r8
    1ee2:	0e 94 45 3c 	call	0x788a	; 0x788a <__fixunssfsi>
    1ee6:	6b 01       	movw	r12, r22
    1ee8:	7c 01       	movw	r14, r24
    1eea:	16 2f       	mov	r17, r22
    1eec:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <_Z3nowv>
    1ef0:	69 83       	std	Y+1, r22	; 0x01
    1ef2:	7a 83       	std	Y+2, r23	; 0x02
    1ef4:	8b 83       	std	Y+3, r24	; 0x03
    1ef6:	9c 83       	std	Y+4, r25	; 0x04
    1ef8:	10 6c       	ori	r17, 0xC0	; 192
    1efa:	1d 83       	std	Y+5, r17	; 0x05
  // Termometer events uses format [11TTTTTT].
  //   11 - prefix for termometer events
  //   TTTTTT - temperature [0..2^6] = [0..64]
  static void logTemperature(byte temperature){
    LogRecord logRecord(B11000000|temperature);
    boolean isStored = GB_StorageHelper::storeLogRecord(logRecord);
    1efc:	8e 01       	movw	r16, r28
    1efe:	0f 5f       	subi	r16, 0xFF	; 255
    1f00:	1f 4f       	sbci	r17, 0xFF	; 255
    1f02:	c8 01       	movw	r24, r16
    1f04:	0e 94 a2 05 	call	0xb44	; 0xb44 <_ZN16GB_StorageHelper14storeLogRecordER9LogRecord>
    1f08:	48 2f       	mov	r20, r24
    printDirtyLogRecord(logRecord, FS(S_Temperature), isStored, temperature);
    1f0a:	c8 01       	movw	r24, r16
    1f0c:	6b e3       	ldi	r22, 0x3B	; 59
    1f0e:	72 e0       	ldi	r23, 0x02	; 2
    1f10:	2c 2d       	mov	r18, r12
    1f12:	0e 94 67 0d 	call	0x1ace	; 0x1ace <_ZN9GB_Logger19printDirtyLogRecordERK9LogRecordPK19__FlashStringHelperhh>
    GB_SerialHelper::printDirtyEnd();
    1f16:	0e 94 63 08 	call	0x10c6	; 0x10c6 <_ZN15GB_SerialHelper13printDirtyEndEv>
    }

    workingTemperature = freshTemperature;
    1f1a:	80 92 fc 01 	sts	0x01FC, r8
    1f1e:	90 92 fd 01 	sts	0x01FD, r9
    1f22:	a0 92 fe 01 	sts	0x01FE, r10
    1f26:	b0 92 ff 01 	sts	0x01FF, r11

    statisticsTemperatureSumm = 0.0;
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	a0 e0       	ldi	r26, 0x00	; 0
    1f30:	b0 e0       	ldi	r27, 0x00	; 0
    1f32:	80 93 00 02 	sts	0x0200, r24
    1f36:	90 93 01 02 	sts	0x0201, r25
    1f3a:	a0 93 02 02 	sts	0x0202, r26
    1f3e:	b0 93 03 02 	sts	0x0203, r27
    statisticsTemperatureCount = 0;
    1f42:	10 92 05 02 	sts	0x0205, r1
    1f46:	10 92 04 02 	sts	0x0204, r1

    return workingTemperature;
  }
    1f4a:	b4 01       	movw	r22, r8
    1f4c:	c5 01       	movw	r24, r10
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	1f 91       	pop	r17
    1f5e:	0f 91       	pop	r16
    1f60:	ff 90       	pop	r15
    1f62:	ef 90       	pop	r14
    1f64:	df 90       	pop	r13
    1f66:	cf 90       	pop	r12
    1f68:	bf 90       	pop	r11
    1f6a:	af 90       	pop	r10
    1f6c:	9f 90       	pop	r9
    1f6e:	8f 90       	pop	r8
    1f70:	08 95       	ret

00001f72 <_Z18updateGrowboxStatev>:
    1f72:	ef 92       	push	r14
    1f74:	ff 92       	push	r15
    1f76:	0f 93       	push	r16
    1f78:	1f 93       	push	r17
    1f7a:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <_ZN13GB_Controller15checkFreeMemoryEv>
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <_ZN14GB_Thermometer14getTemperatureEh>
    1f84:	7b 01       	movw	r14, r22
    1f86:	8c 01       	movw	r16, r24
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	4c e0       	ldi	r20, 0x0C	; 12
    1f8e:	52 e4       	ldi	r21, 0x42	; 66
    1f90:	0e 94 23 3d 	call	0x7a46	; 0x7a46 <__gesf2>
    1f94:	88 23       	and	r24, r24
    1f96:	5c f0       	brlt	.+22     	; 0x1fae <_Z18updateGrowboxStatev+0x3c>
    1f98:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <_Z12turnOffLightv>
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <_Z9turnOnFani>
    1fa4:	8e e6       	ldi	r24, 0x6E	; 110
    1fa6:	91 e0       	ldi	r25, 0x01	; 1
    1fa8:	0e 94 77 0e 	call	0x1cee	; 0x1cee <_ZN9GB_Logger8logErrorER5Error>
    1fac:	45 c0       	rjmp	.+138    	; 0x2038 <_Z18updateGrowboxStatev+0xc6>
    1fae:	80 91 03 01 	lds	r24, 0x0103
    1fb2:	88 23       	and	r24, r24
    1fb4:	b9 f0       	breq	.+46     	; 0x1fe4 <_Z18updateGrowboxStatev+0x72>
    1fb6:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <_Z11turnOnLightv>
    1fba:	c8 01       	movw	r24, r16
    1fbc:	b7 01       	movw	r22, r14
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	48 eb       	ldi	r20, 0xB8	; 184
    1fc4:	51 e4       	ldi	r21, 0x41	; 65
    1fc6:	0e 94 d4 3b 	call	0x77a8	; 0x77a8 <__cmpsf2>
    1fca:	88 23       	and	r24, r24
    1fcc:	74 f1       	brlt	.+92     	; 0x202a <_Z18updateGrowboxStatev+0xb8>
    1fce:	c8 01       	movw	r24, r16
    1fd0:	b7 01       	movw	r22, r14
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	48 ee       	ldi	r20, 0xE8	; 232
    1fd8:	51 e4       	ldi	r21, 0x41	; 65
    1fda:	0e 94 23 3d 	call	0x7a46	; 0x7a46 <__gesf2>
    1fde:	18 16       	cp	r1, r24
    1fe0:	24 f5       	brge	.+72     	; 0x202a <_Z18updateGrowboxStatev+0xb8>
    1fe2:	16 c0       	rjmp	.+44     	; 0x2010 <_Z18updateGrowboxStatev+0x9e>
    1fe4:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <_Z12turnOffLightv>
    1fe8:	c8 01       	movw	r24, r16
    1fea:	b7 01       	movw	r22, r14
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	48 e9       	ldi	r20, 0x98	; 152
    1ff2:	51 e4       	ldi	r21, 0x41	; 65
    1ff4:	0e 94 d4 3b 	call	0x77a8	; 0x77a8 <__cmpsf2>
    1ff8:	88 23       	and	r24, r24
    1ffa:	e4 f0       	brlt	.+56     	; 0x2034 <_Z18updateGrowboxStatev+0xc2>
    1ffc:	c8 01       	movw	r24, r16
    1ffe:	b7 01       	movw	r22, r14
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 ee       	ldi	r20, 0xE0	; 224
    2006:	51 e4       	ldi	r21, 0x41	; 65
    2008:	0e 94 23 3d 	call	0x7a46	; 0x7a46 <__gesf2>
    200c:	18 16       	cp	r1, r24
    200e:	1c f4       	brge	.+6      	; 0x2016 <_Z18updateGrowboxStatev+0xa4>
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	0c c0       	rjmp	.+24     	; 0x202e <_Z18updateGrowboxStatev+0xbc>
    2016:	c8 01       	movw	r24, r16
    2018:	b7 01       	movw	r22, r14
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	48 ec       	ldi	r20, 0xC8	; 200
    2020:	51 e4       	ldi	r21, 0x41	; 65
    2022:	0e 94 23 3d 	call	0x7a46	; 0x7a46 <__gesf2>
    2026:	18 16       	cp	r1, r24
    2028:	2c f4       	brge	.+10     	; 0x2034 <_Z18updateGrowboxStatev+0xc2>
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <_Z9turnOnFani>
    2032:	02 c0       	rjmp	.+4      	; 0x2038 <_Z18updateGrowboxStatev+0xc6>
    2034:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z10turnOffFanv>
    2038:	1f 91       	pop	r17
    203a:	0f 91       	pop	r16
    203c:	ff 90       	pop	r15
    203e:	ef 90       	pop	r14
    2040:	08 95       	ret

00002042 <_Z17switchToNightModev>:
    2042:	80 91 03 01 	lds	r24, 0x0103
    2046:	88 23       	and	r24, r24
    2048:	41 f0       	breq	.+16     	; 0x205a <_Z17switchToNightModev+0x18>
    204a:	10 92 03 01 	sts	0x0103, r1
    204e:	8b e8       	ldi	r24, 0x8B	; 139
    2050:	91 e0       	ldi	r25, 0x01	; 1
    2052:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <_ZN9GB_Logger8logEventER5Event>
    2056:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <_Z18updateGrowboxStatev>
    205a:	08 95       	ret

0000205c <_Z15switchToDayModev>:
    205c:	80 91 03 01 	lds	r24, 0x0103
    2060:	81 30       	cpi	r24, 0x01	; 1
    2062:	49 f0       	breq	.+18     	; 0x2076 <_Z15switchToDayModev+0x1a>
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	80 93 03 01 	sts	0x0103, r24
    206a:	86 e8       	ldi	r24, 0x86	; 134
    206c:	91 e0       	ldi	r25, 0x01	; 1
    206e:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <_ZN9GB_Logger8logEventER5Event>
    2072:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <_Z18updateGrowboxStatev>
    2076:	08 95       	ret

00002078 <_ZN15GB_SerialHelper11checkSerialEhh>:

  static void updateSerialMonitorStatus(){
    checkSerial(true, false); // not interruption cause Serial print problems
  }

  static void checkSerial(boolean checkSerialMonitor, boolean checkWifi){
    2078:	cf 92       	push	r12
    207a:	df 92       	push	r13
    207c:	ef 92       	push	r14
    207e:	ff 92       	push	r15
    2080:	0f 93       	push	r16
    2082:	1f 93       	push	r17
    2084:	df 93       	push	r29
    2086:	cf 93       	push	r28
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	27 97       	sbiw	r28, 0x07	; 7
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	f8 94       	cli
    2092:	de bf       	out	0x3e, r29	; 62
    2094:	0f be       	out	0x3f, r0	; 63
    2096:	cd bf       	out	0x3d, r28	; 61
    2098:	06 2f       	mov	r16, r22

    boolean oldUseSerialMonitor  = useSerialMonitor;
    209a:	c0 90 ae 01 	lds	r12, 0x01AE
    boolean oldUseSerialWifi     = useSerialWifi;
    209e:	d0 90 af 01 	lds	r13, 0x01AF
    boolean serialInUse          = (useSerialMonitor || useSerialWifi);
    20a2:	cc 20       	and	r12, r12
    20a4:	11 f0       	breq	.+4      	; 0x20aa <_ZN15GB_SerialHelper11checkSerialEhh+0x32>
    20a6:	11 e0       	ldi	r17, 0x01	; 1
    20a8:	04 c0       	rjmp	.+8      	; 0x20b2 <_ZN15GB_SerialHelper11checkSerialEhh+0x3a>
    20aa:	9d 2d       	mov	r25, r13
    20ac:	d1 10       	cpse	r13, r1
    20ae:	91 e0       	ldi	r25, 0x01	; 1
    20b0:	19 2f       	mov	r17, r25

    if (checkSerialMonitor){
    20b2:	88 23       	and	r24, r24
    20b4:	51 f0       	breq	.+20     	; 0x20ca <_ZN15GB_SerialHelper11checkSerialEhh+0x52>
      useSerialMonitor = (digitalRead(USE_SERIAL_MONOTOR_PIN) == SERIAL_ON);
    20b6:	8b e0       	ldi	r24, 0x0B	; 11
    20b8:	0e 94 4a 33 	call	0x6694	; 0x6694 <digitalRead>
    20bc:	10 92 ae 01 	sts	0x01AE, r1
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	19 f4       	brne	.+6      	; 0x20ca <_ZN15GB_SerialHelper11checkSerialEhh+0x52>
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	80 93 ae 01 	sts	0x01AE, r24
    }

    // Start serial, if we need
    if (!serialInUse && (useSerialMonitor || checkWifi)){
    20ca:	11 23       	and	r17, r17
    20cc:	a9 f4       	brne	.+42     	; 0x20f8 <_ZN15GB_SerialHelper11checkSerialEhh+0x80>
    20ce:	80 91 ae 01 	lds	r24, 0x01AE
    20d2:	88 23       	and	r24, r24
    20d4:	19 f4       	brne	.+6      	; 0x20dc <_ZN15GB_SerialHelper11checkSerialEhh+0x64>
    20d6:	00 23       	and	r16, r16
    20d8:	09 f4       	brne	.+2      	; 0x20dc <_ZN15GB_SerialHelper11checkSerialEhh+0x64>
    20da:	b0 c0       	rjmp	.+352    	; 0x223c <_ZN15GB_SerialHelper11checkSerialEhh+0x1c4>
      Serial.begin(115200);
    20dc:	88 eb       	ldi	r24, 0xB8	; 184
    20de:	93 e0       	ldi	r25, 0x03	; 3
    20e0:	40 e0       	ldi	r20, 0x00	; 0
    20e2:	52 ec       	ldi	r21, 0xC2	; 194
    20e4:	61 e0       	ldi	r22, 0x01	; 1
    20e6:	70 e0       	ldi	r23, 0x00	; 0
    20e8:	0e 94 26 34 	call	0x684c	; 0x684c <_ZN14HardwareSerial5beginEm>
      while (!Serial) {
    20ec:	88 eb       	ldi	r24, 0xB8	; 184
    20ee:	93 e0       	ldi	r25, 0x03	; 3
    20f0:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <_ZN14HardwareSerialcvbEv>
    20f4:	88 23       	and	r24, r24
    20f6:	d1 f3       	breq	.-12     	; 0x20ec <_ZN15GB_SerialHelper11checkSerialEhh+0x74>
    if (!serialInUse){
      return; 
    }

    boolean loadWifiConfiguration = false;
    if (checkWifi || s_restartWifi){
    20f8:	00 23       	and	r16, r16
    20fa:	29 f4       	brne	.+10     	; 0x2106 <_ZN15GB_SerialHelper11checkSerialEhh+0x8e>
    20fc:	80 91 b0 01 	lds	r24, 0x01B0
    2100:	88 23       	and	r24, r24
    2102:	09 f4       	brne	.+2      	; 0x2106 <_ZN15GB_SerialHelper11checkSerialEhh+0x8e>
    2104:	4f c0       	rjmp	.+158    	; 0x21a4 <_ZN15GB_SerialHelper11checkSerialEhh+0x12c>
    2106:	00 e0       	ldi	r16, 0x00	; 0
    2108:	10 e0       	ldi	r17, 0x00	; 0
      for (int i = 0; i<2; i++){ // Sometimes first command returns ERROR, two attempts
        showWifiMessage(F("Restarting..."));
        
        String input = wifiExecuteRawCommand(F("at+reset=0"), 500); // spec boot time 210   // NOresponse checked wrong
    210a:	7e 01       	movw	r14, r28
    210c:	08 94       	sec
    210e:	e1 1c       	adc	r14, r1
    2110:	f1 1c       	adc	r15, r1
    }

    boolean loadWifiConfiguration = false;
    if (checkWifi || s_restartWifi){
      for (int i = 0; i<2; i++){ // Sometimes first command returns ERROR, two attempts
        showWifiMessage(F("Restarting..."));
    2112:	87 e7       	ldi	r24, 0x77	; 119
    2114:	91 e0       	ldi	r25, 0x01	; 1
    2116:	61 e0       	ldi	r22, 0x01	; 1
    2118:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <_ZN15GB_SerialHelper15showWifiMessageEPK19__FlashStringHelperh>
        
        String input = wifiExecuteRawCommand(F("at+reset=0"), 500); // spec boot time 210   // NOresponse checked wrong
    211c:	c7 01       	movw	r24, r14
    211e:	6c e6       	ldi	r22, 0x6C	; 108
    2120:	71 e0       	ldi	r23, 0x01	; 1
    2122:	44 ef       	ldi	r20, 0xF4	; 244
    2124:	51 e0       	ldi	r21, 0x01	; 1
    2126:	0e 94 97 09 	call	0x132e	; 0x132e <_ZN15GB_SerialHelper21wifiExecuteRawCommandEPK19__FlashStringHelperi>
        
        useSerialWifi = flashStringEquals(input, S_WIFI_RESPONSE_WELLCOME);
    212a:	c7 01       	movw	r24, r14
    212c:	6e ee       	ldi	r22, 0xEE	; 238
    212e:	70 e0       	ldi	r23, 0x00	; 0
    2130:	0e 94 6c 07 	call	0xed8	; 0xed8 <_ZL17flashStringEqualsRK6StringPKc>
    2134:	80 93 af 01 	sts	0x01AF, r24
        if (useSerialWifi) {
    2138:	88 23       	and	r24, r24
    213a:	61 f0       	breq	.+24     	; 0x2154 <_ZN15GB_SerialHelper11checkSerialEhh+0xdc>
          s_restartWifi = false;
    213c:	10 92 b0 01 	sts	0x01B0, r1
    2140:	80 91 4a 01 	lds	r24, 0x014A
    2144:	81 11       	cpse	r24, r1
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	18 2f       	mov	r17, r24
      return; 
    }

    boolean loadWifiConfiguration = false;
    if (checkWifi || s_restartWifi){
      for (int i = 0; i<2; i++){ // Sometimes first command returns ERROR, two attempts
    214a:	ce 01       	movw	r24, r28
    214c:	01 96       	adiw	r24, 0x01	; 1
    214e:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
    2152:	29 c0       	rjmp	.+82     	; 0x21a6 <_ZN15GB_SerialHelper11checkSerialEhh+0x12e>
          if(g_isGrowboxStarted){
            loadWifiConfiguration = true;
          }
          break;
        }
        if (useSerialMonitor && input.length() > 0){
    2154:	80 91 ae 01 	lds	r24, 0x01AE
    2158:	88 23       	and	r24, r24
    215a:	d9 f0       	breq	.+54     	; 0x2192 <_ZN15GB_SerialHelper11checkSerialEhh+0x11a>
    215c:	8d 81       	ldd	r24, Y+5	; 0x05
    215e:	9e 81       	ldd	r25, Y+6	; 0x06
    2160:	89 2b       	or	r24, r25
    2162:	b9 f0       	breq	.+46     	; 0x2192 <_ZN15GB_SerialHelper11checkSerialEhh+0x11a>
          showWifiMessage(F("Not correct wellcome message: "), false);
    2164:	8d e4       	ldi	r24, 0x4D	; 77
    2166:	91 e0       	ldi	r25, 0x01	; 1
    2168:	60 e0       	ldi	r22, 0x00	; 0
    216a:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <_ZN15GB_SerialHelper15showWifiMessageEPK19__FlashStringHelperh>
          GB_PrintDirty::printWithoutCRLF(input);
    216e:	c7 01       	movw	r24, r14
    2170:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_ZN13GB_PrintDirty16printWithoutCRLFERK6String>
          Serial.print(FS(S_Next));
    2174:	88 eb       	ldi	r24, 0xB8	; 184
    2176:	93 e0       	ldi	r25, 0x03	; 3
    2178:	64 e8       	ldi	r22, 0x84	; 132
    217a:	70 e0       	ldi	r23, 0x00	; 0
    217c:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_ZN5Print5printEPK19__FlashStringHelper>
          GB_PrintDirty::printHEX(input); 
    2180:	c7 01       	movw	r24, r14
    2182:	0e 94 a1 07 	call	0xf42	; 0xf42 <_ZN13GB_PrintDirty8printHEXERK6String>
          Serial.println();
    2186:	88 eb       	ldi	r24, 0xB8	; 184
    2188:	93 e0       	ldi	r25, 0x03	; 3
    218a:	0e 94 79 36 	call	0x6cf2	; 0x6cf2 <_ZN5Print7printlnEv>
          printDirtyEnd();
    218e:	0e 94 63 08 	call	0x10c6	; 0x10c6 <_ZN15GB_SerialHelper13printDirtyEndEv>
      return; 
    }

    boolean loadWifiConfiguration = false;
    if (checkWifi || s_restartWifi){
      for (int i = 0; i<2; i++){ // Sometimes first command returns ERROR, two attempts
    2192:	c7 01       	movw	r24, r14
    2194:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
    2198:	0f 5f       	subi	r16, 0xFF	; 255
    219a:	1f 4f       	sbci	r17, 0xFF	; 255
    219c:	02 30       	cpi	r16, 0x02	; 2
    219e:	11 05       	cpc	r17, r1
    21a0:	09 f0       	breq	.+2      	; 0x21a4 <_ZN15GB_SerialHelper11checkSerialEhh+0x12c>
    21a2:	b7 cf       	rjmp	.-146    	; 0x2112 <_ZN15GB_SerialHelper11checkSerialEhh+0x9a>
    21a4:	10 e0       	ldi	r17, 0x00	; 0
          printDirtyEnd();
        }
      }
    }

    if (useSerialMonitor != oldUseSerialMonitor){
    21a6:	80 91 ae 01 	lds	r24, 0x01AE
    21aa:	8c 15       	cp	r24, r12
    21ac:	b9 f0       	breq	.+46     	; 0x21dc <_ZN15GB_SerialHelper11checkSerialEhh+0x164>
      Serial.print(F("Serial monitor: "));
    21ae:	88 eb       	ldi	r24, 0xB8	; 184
    21b0:	93 e0       	ldi	r25, 0x03	; 3
    21b2:	6c e3       	ldi	r22, 0x3C	; 60
    21b4:	71 e0       	ldi	r23, 0x01	; 1
    21b6:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_ZN5Print5printEPK19__FlashStringHelper>
      if (useSerialMonitor){
    21ba:	80 91 ae 01 	lds	r24, 0x01AE
    21be:	88 23       	and	r24, r24
    21c0:	29 f0       	breq	.+10     	; 0x21cc <_ZN15GB_SerialHelper11checkSerialEhh+0x154>
        Serial.println(FS(S_enabled));
    21c2:	88 eb       	ldi	r24, 0xB8	; 184
    21c4:	93 e0       	ldi	r25, 0x03	; 3
    21c6:	62 e0       	ldi	r22, 0x02	; 2
    21c8:	71 e0       	ldi	r23, 0x01	; 1
    21ca:	04 c0       	rjmp	.+8      	; 0x21d4 <_ZN15GB_SerialHelper11checkSerialEhh+0x15c>
      } 
      else {
        Serial.println(FS(S_disabled));
    21cc:	88 eb       	ldi	r24, 0xB8	; 184
    21ce:	93 e0       	ldi	r25, 0x03	; 3
    21d0:	6b e0       	ldi	r22, 0x0B	; 11
    21d2:	71 e0       	ldi	r23, 0x01	; 1
    21d4:	0e 94 99 36 	call	0x6d32	; 0x6d32 <_ZN5Print7printlnEPK19__FlashStringHelper>
      }
      printDirtyEnd();
    21d8:	0e 94 63 08 	call	0x10c6	; 0x10c6 <_ZN15GB_SerialHelper13printDirtyEndEv>
    }
    if (useSerialWifi != oldUseSerialWifi && (useSerialMonitor || (useSerialMonitor != oldUseSerialMonitor ))){
    21dc:	90 91 af 01 	lds	r25, 0x01AF
    21e0:	9d 15       	cp	r25, r13
    21e2:	d9 f0       	breq	.+54     	; 0x221a <_ZN15GB_SerialHelper11checkSerialEhh+0x1a2>
    21e4:	80 91 ae 01 	lds	r24, 0x01AE
    21e8:	88 23       	and	r24, r24
    21ea:	11 f4       	brne	.+4      	; 0x21f0 <_ZN15GB_SerialHelper11checkSerialEhh+0x178>
    21ec:	cc 20       	and	r12, r12
    21ee:	a9 f0       	breq	.+42     	; 0x221a <_ZN15GB_SerialHelper11checkSerialEhh+0x1a2>
      if(useSerialWifi){ 
    21f0:	99 23       	and	r25, r25
    21f2:	59 f0       	breq	.+22     	; 0x220a <_ZN15GB_SerialHelper11checkSerialEhh+0x192>
        Serial.print(F("Serial Wi-Fi:"));
    21f4:	88 eb       	ldi	r24, 0xB8	; 184
    21f6:	93 e0       	ldi	r25, 0x03	; 3
    21f8:	6e e2       	ldi	r22, 0x2E	; 46
    21fa:	71 e0       	ldi	r23, 0x01	; 1
    21fc:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.println(FS(S_connected)); // shows when useSerialMonitor=false
    2200:	88 eb       	ldi	r24, 0xB8	; 184
    2202:	93 e0       	ldi	r25, 0x03	; 3
    2204:	65 e1       	ldi	r22, 0x15	; 21
    2206:	71 e0       	ldi	r23, 0x01	; 1
    2208:	04 c0       	rjmp	.+8      	; 0x2212 <_ZN15GB_SerialHelper11checkSerialEhh+0x19a>
      } 
      else {
        Serial.println(FS(S_disconnected));
    220a:	88 eb       	ldi	r24, 0xB8	; 184
    220c:	93 e0       	ldi	r25, 0x03	; 3
    220e:	60 e2       	ldi	r22, 0x20	; 32
    2210:	71 e0       	ldi	r23, 0x01	; 1
    2212:	0e 94 99 36 	call	0x6d32	; 0x6d32 <_ZN5Print7printlnEPK19__FlashStringHelper>
      }
      printDirtyEnd();
    2216:	0e 94 63 08 	call	0x10c6	; 0x10c6 <_ZN15GB_SerialHelper13printDirtyEndEv>
    }

    // Close Serial connection if nessesary
    boolean newSerialInUse = (useSerialMonitor || useSerialWifi);
    221a:	80 91 ae 01 	lds	r24, 0x01AE
    221e:	88 23       	and	r24, r24
    2220:	21 f4       	brne	.+8      	; 0x222a <_ZN15GB_SerialHelper11checkSerialEhh+0x1b2>
    2222:	80 91 af 01 	lds	r24, 0x01AF
    2226:	88 23       	and	r24, r24
    2228:	29 f0       	breq	.+10     	; 0x2234 <_ZN15GB_SerialHelper11checkSerialEhh+0x1bc>
    if (!newSerialInUse){
      Serial.end();
      return;
    } 
    else if (loadWifiConfiguration){
    222a:	11 23       	and	r17, r17
    222c:	39 f0       	breq	.+14     	; 0x223c <_ZN15GB_SerialHelper11checkSerialEhh+0x1c4>
      startWifi();
    222e:	0e 94 10 0b 	call	0x1620	; 0x1620 <_ZN15GB_SerialHelper9startWifiEv>
    2232:	04 c0       	rjmp	.+8      	; 0x223c <_ZN15GB_SerialHelper11checkSerialEhh+0x1c4>
    }

    // Close Serial connection if nessesary
    boolean newSerialInUse = (useSerialMonitor || useSerialWifi);
    if (!newSerialInUse){
      Serial.end();
    2234:	88 eb       	ldi	r24, 0xB8	; 184
    2236:	93 e0       	ldi	r25, 0x03	; 3
    2238:	0e 94 ad 34 	call	0x695a	; 0x695a <_ZN14HardwareSerial3endEv>
      return;
    } 
    else if (loadWifiConfiguration){
      startWifi();
    }
  }
    223c:	27 96       	adiw	r28, 0x07	; 7
    223e:	0f b6       	in	r0, 0x3f	; 63
    2240:	f8 94       	cli
    2242:	de bf       	out	0x3e, r29	; 62
    2244:	0f be       	out	0x3f, r0	; 63
    2246:	cd bf       	out	0x3d, r28	; 61
    2248:	cf 91       	pop	r28
    224a:	df 91       	pop	r29
    224c:	1f 91       	pop	r17
    224e:	0f 91       	pop	r16
    2250:	ff 90       	pop	r15
    2252:	ef 90       	pop	r14
    2254:	df 90       	pop	r13
    2256:	cf 90       	pop	r12
    2258:	08 95       	ret

0000225a <_Z25updateSerialMonitorStatusv>:
    }
    //wifiExecuteCommand(F("at+con_status"));
  }

  static void updateSerialMonitorStatus(){
    checkSerial(true, false); // not interruption cause Serial print problems
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	60 e0       	ldi	r22, 0x00	; 0
    225e:	0e 94 3c 10 	call	0x2078	; 0x2078 <_ZN15GB_SerialHelper11checkSerialEhh>
    2262:	08 95       	ret

00002264 <_Z16updateWiFiStatusv>:
    s_wifiSID = _s_wifiSID;
    s_wifiPass = _s_wifiPass;
  }

  static void updateWiFiStatus(){
    if (s_restartWifi){
    2264:	80 91 b0 01 	lds	r24, 0x01B0
    2268:	88 23       	and	r24, r24
    226a:	21 f0       	breq	.+8      	; 0x2274 <_Z16updateWiFiStatusv+0x10>
      checkSerial(false, true);
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	61 e0       	ldi	r22, 0x01	; 1
    2270:	0e 94 3c 10 	call	0x2078	; 0x2078 <_ZN15GB_SerialHelper11checkSerialEhh>
    2274:	08 95       	ret

00002276 <_ZN14GB_Thermometer16updateStatisticsEv>:

    dallasTemperature.getAddress(oneWireAddress, 0); // search for devices on the bus and assign based on an index.
  }

  // TODO rename
  static boolean updateStatistics(){
    2276:	ef 92       	push	r14
    2278:	ff 92       	push	r15
    227a:	0f 93       	push	r16
    227c:	1f 93       	push	r17

    if(!dallasTemperature.requestTemperaturesByAddress(oneWireAddress)){
    227e:	81 ee       	ldi	r24, 0xE1	; 225
    2280:	91 e0       	ldi	r25, 0x01	; 1
    2282:	64 ef       	ldi	r22, 0xF4	; 244
    2284:	71 e0       	ldi	r23, 0x01	; 1
    2286:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <_ZN17DallasTemperature28requestTemperaturesByAddressEPh>
    228a:	88 23       	and	r24, r24
    228c:	19 f4       	brne	.+6      	; 0x2294 <_ZN14GB_Thermometer16updateStatisticsEv+0x1e>
      GB_Logger::logError(ERROR_TERMOMETER_DISCONNECTED);
    228e:	80 e6       	ldi	r24, 0x60	; 96
    2290:	91 e0       	ldi	r25, 0x01	; 1
    2292:	0e c0       	rjmp	.+28     	; 0x22b0 <_ZN14GB_Thermometer16updateStatisticsEv+0x3a>
      return false;
    };

    float freshTemperature = dallasTemperature.getTempC(oneWireAddress);
    2294:	81 ee       	ldi	r24, 0xE1	; 225
    2296:	91 e0       	ldi	r25, 0x01	; 1
    2298:	64 ef       	ldi	r22, 0xF4	; 244
    229a:	71 e0       	ldi	r23, 0x01	; 1
    229c:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <_ZN17DallasTemperature8getTempCEPh>
    22a0:	7b 01       	movw	r14, r22
    22a2:	8c 01       	movw	r16, r24

    if ((int)freshTemperature == 0){
    22a4:	0e 94 40 3c 	call	0x7880	; 0x7880 <__fixsfsi>
    22a8:	67 2b       	or	r22, r23
    22aa:	31 f4       	brne	.+12     	; 0x22b8 <_ZN14GB_Thermometer16updateStatisticsEv+0x42>
      GB_Logger::logError(ERROR_TERMOMETER_ZERO_VALUE);  
    22ac:	87 e6       	ldi	r24, 0x67	; 103
    22ae:	91 e0       	ldi	r25, 0x01	; 1
    22b0:	0e 94 77 0e 	call	0x1cee	; 0x1cee <_ZN9GB_Logger8logErrorER5Error>
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    22b6:	39 c0       	rjmp	.+114    	; 0x232a <_ZN14GB_Thermometer16updateStatisticsEv+0xb4>
      return false;
    }

    statisticsTemperatureSumm += freshTemperature;
    22b8:	60 91 00 02 	lds	r22, 0x0200
    22bc:	70 91 01 02 	lds	r23, 0x0201
    22c0:	80 91 02 02 	lds	r24, 0x0202
    22c4:	90 91 03 02 	lds	r25, 0x0203
    22c8:	a8 01       	movw	r20, r16
    22ca:	97 01       	movw	r18, r14
    22cc:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__addsf3>
    22d0:	60 93 00 02 	sts	0x0200, r22
    22d4:	70 93 01 02 	sts	0x0201, r23
    22d8:	80 93 02 02 	sts	0x0202, r24
    22dc:	90 93 03 02 	sts	0x0203, r25
    statisticsTemperatureCount++;
    22e0:	20 91 04 02 	lds	r18, 0x0204
    22e4:	30 91 05 02 	lds	r19, 0x0205
    22e8:	2f 5f       	subi	r18, 0xFF	; 255
    22ea:	3f 4f       	sbci	r19, 0xFF	; 255
    22ec:	30 93 05 02 	sts	0x0205, r19
    22f0:	20 93 04 02 	sts	0x0204, r18
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
  static boolean stopLogError(Error &error){
    if (error.isStored){
    22f4:	80 91 6d 01 	lds	r24, 0x016D
    22f8:	88 23       	and	r24, r24
    22fa:	11 f4       	brne	.+4      	; 0x2300 <_ZN14GB_Thermometer16updateStatisticsEv+0x8a>
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	03 c0       	rjmp	.+6      	; 0x2306 <_ZN14GB_Thermometer16updateStatisticsEv+0x90>
      error.isStored = false;
    2300:	10 92 6d 01 	sts	0x016D, r1
    2304:	91 e0       	ldi	r25, 0x01	; 1
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
  static boolean stopLogError(Error &error){
    if (error.isStored){
    2306:	80 91 66 01 	lds	r24, 0x0166
    230a:	88 23       	and	r24, r24
    230c:	19 f0       	breq	.+6      	; 0x2314 <_ZN14GB_Thermometer16updateStatisticsEv+0x9e>
      error.isStored = false;
    230e:	10 92 66 01 	sts	0x0166, r1
    2312:	81 e0       	ldi	r24, 0x01	; 1

    boolean forceLog = 
      GB_Logger::stopLogError(ERROR_TERMOMETER_ZERO_VALUE) |
      GB_Logger::stopLogError(ERROR_TERMOMETER_DISCONNECTED); 
    if (forceLog) {
    2314:	89 2b       	or	r24, r25
    2316:	11 f0       	breq	.+4      	; 0x231c <_ZN14GB_Thermometer16updateStatisticsEv+0xa6>
      getTemperature(true);
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	04 c0       	rjmp	.+8      	; 0x2324 <_ZN14GB_Thermometer16updateStatisticsEv+0xae>
    }
    else if (statisticsTemperatureCount > 100){
    231c:	25 36       	cpi	r18, 0x65	; 101
    231e:	31 05       	cpc	r19, r1
    2320:	1c f0       	brlt	.+6      	; 0x2328 <_ZN14GB_Thermometer16updateStatisticsEv+0xb2>
      getTemperature(); // prevents overflow 
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <_ZN14GB_Thermometer14getTemperatureEh>
    2328:	81 e0       	ldi	r24, 0x01	; 1
    }

    return true;
  }
    232a:	1f 91       	pop	r17
    232c:	0f 91       	pop	r16
    232e:	ff 90       	pop	r15
    2330:	ef 90       	pop	r14
    2332:	08 95       	ret

00002334 <_Z27updateThermometerStatisticsv>:
    2334:	0e 94 3b 11 	call	0x2276	; 0x2276 <_ZN14GB_Thermometer16updateStatisticsEv>
    2338:	08 95       	ret

0000233a <_ZL21Serial_skipBytesUntiljPKc>:
      count++;
    }
    return count;
  }

  static size_t Serial_skipBytesUntil(size_t length, const char PROGMEM* pstr){   
    233a:	2f 92       	push	r2
    233c:	3f 92       	push	r3
    233e:	4f 92       	push	r4
    2340:	5f 92       	push	r5
    2342:	6f 92       	push	r6
    2344:	7f 92       	push	r7
    2346:	8f 92       	push	r8
    2348:	9f 92       	push	r9
    234a:	af 92       	push	r10
    234c:	bf 92       	push	r11
    234e:	cf 92       	push	r12
    2350:	df 92       	push	r13
    2352:	ef 92       	push	r14
    2354:	ff 92       	push	r15
    2356:	0f 93       	push	r16
    2358:	1f 93       	push	r17
    235a:	df 93       	push	r29
    235c:	cf 93       	push	r28
    235e:	00 d0       	rcall	.+0      	; 0x2360 <_ZL21Serial_skipBytesUntiljPKc+0x26>
    2360:	0f 92       	push	r0
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	3c 01       	movw	r6, r24
    2368:	5b 01       	movw	r10, r22
      if (count >= pstr_length && flashStringEquals(matcher, pstr_length, pstr)){
        break;
      } 
    }
    return count;
  }  
    236a:	4d b6       	in	r4, 0x3d	; 61
    236c:	5e b6       	in	r5, 0x3e	; 62
  /////////////////////////////////////////////////////////////////////
  //                         FALASH STRINGS                          //
  /////////////////////////////////////////////////////////////////////

static int flashStringLength(const char PROGMEM* pstr){ 
  return strlen_P(pstr);
    236e:	cb 01       	movw	r24, r22
    2370:	0e 94 94 04 	call	0x928	; 0x928 <strlen_P>
    2374:	8c 01       	movw	r16, r24
    return count;
  }

  static size_t Serial_skipBytesUntil(size_t length, const char PROGMEM* pstr){   
    int pstr_length = flashStringLength(pstr);   
    char matcher[pstr_length];
    2376:	8d b7       	in	r24, 0x3d	; 61
    2378:	9e b7       	in	r25, 0x3e	; 62
    237a:	80 1b       	sub	r24, r16
    237c:	91 0b       	sbc	r25, r17
    237e:	0f b6       	in	r0, 0x3f	; 63
    2380:	f8 94       	cli
    2382:	9e bf       	out	0x3e, r25	; 62
    2384:	0f be       	out	0x3f, r0	; 63
    2386:	8d bf       	out	0x3d, r24	; 61
    2388:	cd b6       	in	r12, 0x3d	; 61
    238a:	de b6       	in	r13, 0x3e	; 62
    238c:	08 94       	sec
    238e:	c1 1c       	adc	r12, r1
    2390:	d1 1c       	adc	r13, r1

      for (int i = 1; i < pstr_length; i++){
        matcher[i-1] = matcher[i];  
      }
      matcher[pstr_length-1] = c;
      if (count >= pstr_length && flashStringEquals(matcher, pstr_length, pstr)){
    2392:	ca 82       	std	Y+2, r12	; 0x02
    2394:	db 82       	std	Y+3, r13	; 0x03
    2396:	ee 24       	eor	r14, r14
    2398:	ff 24       	eor	r15, r15
    char matcher[pstr_length];

    char c;
    size_t count = 0;
    while (count < length) {
      if (!Serial_timedRead(&c)){
    239a:	1e 01       	movw	r2, r28
    239c:	08 94       	sec
    239e:	21 1c       	adc	r2, r1
    23a0:	31 1c       	adc	r3, r1
    return count;
  }

  static size_t Serial_skipBytesUntil(size_t length, const char PROGMEM* pstr){   
    int pstr_length = flashStringLength(pstr);   
    char matcher[pstr_length];
    23a2:	01 50       	subi	r16, 0x01	; 1
    23a4:	10 40       	sbci	r17, 0x00	; 0
      count++;

      for (int i = 1; i < pstr_length; i++){
        matcher[i-1] = matcher[i];  
      }
      matcher[pstr_length-1] = c;
    23a6:	46 01       	movw	r8, r12
    23a8:	80 0e       	add	r8, r16
    23aa:	91 1e       	adc	r9, r17
    23ac:	0f 5f       	subi	r16, 0xFF	; 255
    23ae:	1f 4f       	sbci	r17, 0xFF	; 255
    23b0:	21 c0       	rjmp	.+66     	; 0x23f4 <_ZL21Serial_skipBytesUntiljPKc+0xba>
    char matcher[pstr_length];

    char c;
    size_t count = 0;
    while (count < length) {
      if (!Serial_timedRead(&c)){
    23b2:	c1 01       	movw	r24, r2
    23b4:	0e 94 8a 08 	call	0x1114	; 0x1114 <_ZL16Serial_timedReadPc>
    23b8:	88 23       	and	r24, r24
    23ba:	f9 f0       	breq	.+62     	; 0x23fa <_ZL21Serial_skipBytesUntiljPKc+0xc0>
        break;
      }
      count++;
    23bc:	08 94       	sec
    23be:	e1 1c       	adc	r14, r1
    23c0:	f1 1c       	adc	r15, r1
    23c2:	f6 01       	movw	r30, r12
    23c4:	21 e0       	ldi	r18, 0x01	; 1
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	04 c0       	rjmp	.+8      	; 0x23d2 <_ZL21Serial_skipBytesUntiljPKc+0x98>

      for (int i = 1; i < pstr_length; i++){
        matcher[i-1] = matcher[i];  
    23ca:	81 81       	ldd	r24, Z+1	; 0x01
    23cc:	81 93       	st	Z+, r24
      if (!Serial_timedRead(&c)){
        break;
      }
      count++;

      for (int i = 1; i < pstr_length; i++){
    23ce:	2f 5f       	subi	r18, 0xFF	; 255
    23d0:	3f 4f       	sbci	r19, 0xFF	; 255
    23d2:	20 17       	cp	r18, r16
    23d4:	31 07       	cpc	r19, r17
    23d6:	cc f3       	brlt	.-14     	; 0x23ca <_ZL21Serial_skipBytesUntiljPKc+0x90>
        matcher[i-1] = matcher[i];  
      }
      matcher[pstr_length-1] = c;
    23d8:	89 81       	ldd	r24, Y+1	; 0x01
    23da:	f4 01       	movw	r30, r8
    23dc:	80 83       	st	Z, r24
      if (count >= pstr_length && flashStringEquals(matcher, pstr_length, pstr)){
    23de:	e0 16       	cp	r14, r16
    23e0:	f1 06       	cpc	r15, r17
    23e2:	40 f0       	brcs	.+16     	; 0x23f4 <_ZL21Serial_skipBytesUntiljPKc+0xba>

static boolean flashStringEquals(const char* cstr, size_t cstr_length, const char PROGMEM* pstr){ 
  if (cstr_length != flashStringLength(pstr)){
    return false;
  }
  return (strncmp_P(cstr, pstr, cstr_length) == 0); // check this method
    23e4:	8a 81       	ldd	r24, Y+2	; 0x02
    23e6:	9b 81       	ldd	r25, Y+3	; 0x03
    23e8:	b5 01       	movw	r22, r10
    23ea:	a8 01       	movw	r20, r16
    23ec:	0e 94 9d 04 	call	0x93a	; 0x93a <strncmp_P>

      for (int i = 1; i < pstr_length; i++){
        matcher[i-1] = matcher[i];  
      }
      matcher[pstr_length-1] = c;
      if (count >= pstr_length && flashStringEquals(matcher, pstr_length, pstr)){
    23f0:	89 2b       	or	r24, r25
    23f2:	19 f0       	breq	.+6      	; 0x23fa <_ZL21Serial_skipBytesUntiljPKc+0xc0>
    int pstr_length = flashStringLength(pstr);   
    char matcher[pstr_length];

    char c;
    size_t count = 0;
    while (count < length) {
    23f4:	e6 14       	cp	r14, r6
    23f6:	f7 04       	cpc	r15, r7
    23f8:	e0 f2       	brcs	.-72     	; 0x23b2 <_ZL21Serial_skipBytesUntiljPKc+0x78>
      if (count >= pstr_length && flashStringEquals(matcher, pstr_length, pstr)){
        break;
      } 
    }
    return count;
  }  
    23fa:	c7 01       	movw	r24, r14
    23fc:	0f b6       	in	r0, 0x3f	; 63
    23fe:	f8 94       	cli
    2400:	5e be       	out	0x3e, r5	; 62
    2402:	0f be       	out	0x3f, r0	; 63
    2404:	4d be       	out	0x3d, r4	; 61
    2406:	0f 90       	pop	r0
    2408:	0f 90       	pop	r0
    240a:	0f 90       	pop	r0
    240c:	cf 91       	pop	r28
    240e:	df 91       	pop	r29
    2410:	1f 91       	pop	r17
    2412:	0f 91       	pop	r16
    2414:	ff 90       	pop	r15
    2416:	ef 90       	pop	r14
    2418:	df 90       	pop	r13
    241a:	cf 90       	pop	r12
    241c:	bf 90       	pop	r11
    241e:	af 90       	pop	r10
    2420:	9f 90       	pop	r9
    2422:	8f 90       	pop	r8
    2424:	7f 90       	pop	r7
    2426:	6f 90       	pop	r6
    2428:	5f 90       	pop	r5
    242a:	4f 90       	pop	r4
    242c:	3f 90       	pop	r3
    242e:	2f 90       	pop	r2
    2430:	08 95       	ret

00002432 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_>:
      showWifiMessage(F("Start failed"));
      s_restartWifi = true;
    }
  }

  static GB_COMMAND_TYPE handleSerialEvent(String &input, byte &wifiPortDescriptor, String &postParams){
    2432:	7f 92       	push	r7
    2434:	8f 92       	push	r8
    2436:	9f 92       	push	r9
    2438:	af 92       	push	r10
    243a:	bf 92       	push	r11
    243c:	cf 92       	push	r12
    243e:	df 92       	push	r13
    2440:	ef 92       	push	r14
    2442:	ff 92       	push	r15
    2444:	0f 93       	push	r16
    2446:	1f 93       	push	r17
    2448:	df 93       	push	r29
    244a:	cf 93       	push	r28
    244c:	cd b7       	in	r28, 0x3d	; 61
    244e:	de b7       	in	r29, 0x3e	; 62
    2450:	a3 97       	sbiw	r28, 0x23	; 35
    2452:	0f b6       	in	r0, 0x3f	; 63
    2454:	f8 94       	cli
    2456:	de bf       	out	0x3e, r29	; 62
    2458:	0f be       	out	0x3f, r0	; 63
    245a:	cd bf       	out	0x3d, r28	; 61
    245c:	6c 01       	movw	r12, r24
    245e:	7b 01       	movw	r14, r22
    2460:	4a 01       	movw	r8, r20

    input = String();
    2462:	8e 01       	movw	r16, r28
    2464:	0f 5f       	subi	r16, 0xFF	; 255
    2466:	1f 4f       	sbci	r17, 0xFF	; 255
    2468:	c8 01       	movw	r24, r16
    246a:	60 e0       	ldi	r22, 0x00	; 0
    246c:	71 e0       	ldi	r23, 0x01	; 1
    246e:	0e 94 8f 39 	call	0x731e	; 0x731e <_ZN6StringC1EPKc>
    2472:	c6 01       	movw	r24, r12
    2474:	b8 01       	movw	r22, r16
    2476:	0e 94 60 3a 	call	0x74c0	; 0x74c0 <_ZN6StringaSERKS_>
    247a:	c8 01       	movw	r24, r16
    247c:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
    input.reserve(100);
    2480:	c6 01       	movw	r24, r12
    2482:	64 e6       	ldi	r22, 0x64	; 100
    2484:	70 e0       	ldi	r23, 0x00	; 0
    2486:	0e 94 57 38 	call	0x70ae	; 0x70ae <_ZN6String7reserveEj>
    wifiPortDescriptor = 0xFF;
    248a:	8f ef       	ldi	r24, 0xFF	; 255
    248c:	d7 01       	movw	r26, r14
    248e:	8c 93       	st	X, r24
    postParams = String();
    2490:	8e 01       	movw	r16, r28
    2492:	08 5f       	subi	r16, 0xF8	; 248
    2494:	1f 4f       	sbci	r17, 0xFF	; 255
    2496:	c8 01       	movw	r24, r16
    2498:	60 e0       	ldi	r22, 0x00	; 0
    249a:	71 e0       	ldi	r23, 0x01	; 1
    249c:	0e 94 8f 39 	call	0x731e	; 0x731e <_ZN6StringC1EPKc>
    24a0:	c4 01       	movw	r24, r8
    24a2:	b8 01       	movw	r22, r16
    24a4:	0e 94 60 3a 	call	0x74c0	; 0x74c0 <_ZN6StringaSERKS_>
    24a8:	c8 01       	movw	r24, r16
    24aa:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>

    Serial_readString(input, 13); // "at+recv_data="
    24ae:	c6 01       	movw	r24, r12
    24b0:	6d e0       	ldi	r22, 0x0D	; 13
    24b2:	70 e0       	ldi	r23, 0x00	; 0
    24b4:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZL17Serial_readStringR6Stringj>

    if (!flashStringEquals(input, F("at+recv_data="))){
    24b8:	c6 01       	movw	r24, r12
    24ba:	63 e8       	ldi	r22, 0x83	; 131
    24bc:	72 e0       	ldi	r23, 0x02	; 2
    24be:	0e 94 6c 07 	call	0xed8	; 0xed8 <_ZL17flashStringEqualsRK6StringPKc>
    24c2:	88 23       	and	r24, r24
    24c4:	c9 f4       	brne	.+50     	; 0x24f8 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0xc6>
      // Read data from serial manager
      Serial_readString(input); // at first we should read, after manipulate  
    24c6:	c6 01       	movw	r24, r12
    24c8:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZL17Serial_readStringR6String>

      if (flashStringStartsWith(input, S_WIFI_RESPONSE_WELLCOME) || flashStringStartsWith(input, S_WIFI_RESPONSE_ERROR)){
    24cc:	c6 01       	movw	r24, r12
    24ce:	6e ee       	ldi	r22, 0xEE	; 238
    24d0:	70 e0       	ldi	r23, 0x00	; 0
    24d2:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <_ZL21flashStringStartsWithRK6StringPKc>
    24d6:	88 23       	and	r24, r24
    24d8:	51 f4       	brne	.+20     	; 0x24ee <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0xbc>
    24da:	c6 01       	movw	r24, r12
    24dc:	6d e7       	ldi	r22, 0x7D	; 125
    24de:	70 e0       	ldi	r23, 0x00	; 0
    24e0:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <_ZL21flashStringStartsWithRK6StringPKc>
    24e4:	88 23       	and	r24, r24
    24e6:	19 f4       	brne	.+6      	; 0x24ee <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0xbc>
    24e8:	21 e0       	ldi	r18, 0x01	; 1
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	09 c1       	rjmp	.+530    	; 0x2700 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x2ce>
        checkSerial(false, true); // manual restart, or wrong state of Wi-Fi
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	61 e0       	ldi	r22, 0x01	; 1
    24f2:	0e 94 3c 10 	call	0x2078	; 0x2078 <_ZN15GB_SerialHelper11checkSerialEhh>
    24f6:	02 c1       	rjmp	.+516    	; 0x26fc <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x2ca>

      return GB_COMMAND_SERIAL_MONITOR;
    } 
    else {
      // WARNING! We need to do it quick. Standart serial buffer capacity only 64 bytes
      Serial_readString(input, 1); // ends with '\r', cause '\n' will be removed
    24f8:	c6 01       	movw	r24, r12
    24fa:	61 e0       	ldi	r22, 0x01	; 1
    24fc:	70 e0       	ldi	r23, 0x00	; 0
    24fe:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZL17Serial_readStringR6Stringj>
      byte firstRequestHeaderByte = input[13]; //
    2502:	c6 01       	movw	r24, r12
    2504:	6d e0       	ldi	r22, 0x0D	; 13
    2506:	70 e0       	ldi	r23, 0x00	; 0
    2508:	0e 94 e5 37 	call	0x6fca	; 0x6fca <_ZN6StringixEj>
    250c:	fc 01       	movw	r30, r24
    250e:	e0 81       	ld	r30, Z
      
      if (firstRequestHeaderByte <= 0x07) {        
    2510:	e8 30       	cpi	r30, 0x08	; 8
    2512:	08 f0       	brcs	.+2      	; 0x2516 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0xe4>
    2514:	c1 c0       	rjmp	.+386    	; 0x2698 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x266>
        // Data Received Successfully
        wifiPortDescriptor = firstRequestHeaderByte; 
    2516:	d7 01       	movw	r26, r14
    2518:	ec 93       	st	X, r30
    
        Serial_readString(input, 8);  // get full request header
    251a:	c6 01       	movw	r24, r12
    251c:	68 e0       	ldi	r22, 0x08	; 8
    251e:	70 e0       	ldi	r23, 0x00	; 0
    2520:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZL17Serial_readStringR6Stringj>

        byte lowByteDataLength = input[20];
    2524:	c6 01       	movw	r24, r12
    2526:	64 e1       	ldi	r22, 0x14	; 20
    2528:	70 e0       	ldi	r23, 0x00	; 0
    252a:	0e 94 e5 37 	call	0x6fca	; 0x6fca <_ZN6StringixEj>
    252e:	fc 01       	movw	r30, r24
    2530:	f0 80       	ld	r15, Z
        byte highByteDataLength = input[21];
    2532:	c6 01       	movw	r24, r12
    2534:	65 e1       	ldi	r22, 0x15	; 21
    2536:	70 e0       	ldi	r23, 0x00	; 0
    2538:	0e 94 e5 37 	call	0x6fca	; 0x6fca <_ZN6StringixEj>
    253c:	fc 01       	movw	r30, r24
        word dataLength = (((word)highByteDataLength) << 8) + lowByteDataLength;
    253e:	10 81       	ld	r17, Z
    2540:	00 e0       	ldi	r16, 0x00	; 0
    2542:	0f 0d       	add	r16, r15
    2544:	11 1d       	adc	r17, r1

        // Check HTTP type 
        input = String();
    2546:	4f e0       	ldi	r20, 0x0F	; 15
    2548:	e4 2e       	mov	r14, r20
    254a:	f1 2c       	mov	r15, r1
    254c:	ec 0e       	add	r14, r28
    254e:	fd 1e       	adc	r15, r29
    2550:	c7 01       	movw	r24, r14
    2552:	60 e0       	ldi	r22, 0x00	; 0
    2554:	71 e0       	ldi	r23, 0x01	; 1
    2556:	0e 94 8f 39 	call	0x731e	; 0x731e <_ZN6StringC1EPKc>
    255a:	c6 01       	movw	r24, r12
    255c:	b7 01       	movw	r22, r14
    255e:	0e 94 60 3a 	call	0x74c0	; 0x74c0 <_ZN6StringaSERKS_>
    2562:	c7 01       	movw	r24, r14
    2564:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
        input.reserve(100);
    2568:	c6 01       	movw	r24, r12
    256a:	64 e6       	ldi	r22, 0x64	; 100
    256c:	70 e0       	ldi	r23, 0x00	; 0
    256e:	0e 94 57 38 	call	0x70ae	; 0x70ae <_ZN6String7reserveEj>
        dataLength -= Serial_readStringUntil(input, dataLength, S_CRLF);
    2572:	c6 01       	movw	r24, r12
    2574:	b8 01       	movw	r22, r16
    2576:	4a e7       	ldi	r20, 0x7A	; 122
    2578:	50 e0       	ldi	r21, 0x00	; 0
    257a:	0e 94 be 08 	call	0x117c	; 0x117c <_ZL22Serial_readStringUntilR6StringjPKc>
    257e:	78 01       	movw	r14, r16
    2580:	e8 1a       	sub	r14, r24
    2582:	f9 0a       	sbc	r15, r25

        boolean isGet = flashStringStartsWith(input, S_WIFI_GET_);
    2584:	c6 01       	movw	r24, r12
    2586:	61 e7       	ldi	r22, 0x71	; 113
    2588:	72 e0       	ldi	r23, 0x02	; 2
    258a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <_ZL21flashStringStartsWithRK6StringPKc>
    258e:	b8 2e       	mov	r11, r24
        boolean isPost = flashStringStartsWith(input, S_WIFI_POST_);
    2590:	c6 01       	movw	r24, r12
    2592:	67 e7       	ldi	r22, 0x77	; 119
    2594:	72 e0       	ldi	r23, 0x02	; 2
    2596:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <_ZL21flashStringStartsWithRK6StringPKc>

        if ((isGet || isPost) && flashStringEndsWith(input, S_CRLF)){
    259a:	bb 20       	and	r11, r11
    259c:	19 f4       	brne	.+6      	; 0x25a4 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x172>
    259e:	88 23       	and	r24, r24
    25a0:	09 f4       	brne	.+2      	; 0x25a4 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x172>
    25a2:	c3 c0       	rjmp	.+390    	; 0x272a <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x2f8>
    25a4:	c6 01       	movw	r24, r12
    25a6:	6a e7       	ldi	r22, 0x7A	; 122
    25a8:	70 e0       	ldi	r23, 0x00	; 0
    25aa:	0e 94 2e 07 	call	0xe5c	; 0xe5c <_ZL19flashStringEndsWithRK6StringPKc>
    25ae:	88 23       	and	r24, r24
    25b0:	09 f4       	brne	.+2      	; 0x25b4 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x182>
    25b2:	bb c0       	rjmp	.+374    	; 0x272a <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x2f8>
         
          int firstIndex;
          if (isGet){  
    25b4:	bb 20       	and	r11, r11
    25b6:	19 f0       	breq	.+6      	; 0x25be <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x18c>
  /////////////////////////////////////////////////////////////////////
  //                         FALASH STRINGS                          //
  /////////////////////////////////////////////////////////////////////

static int flashStringLength(const char PROGMEM* pstr){ 
  return strlen_P(pstr);
    25b8:	81 e7       	ldi	r24, 0x71	; 113
    25ba:	92 e0       	ldi	r25, 0x02	; 2
    25bc:	02 c0       	rjmp	.+4      	; 0x25c2 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x190>
            firstIndex = flashStringLength(S_WIFI_GET_) - 1;
          } 
          else {
            firstIndex = flashStringLength(S_WIFI_POST_) - 1;
    25be:	87 e7       	ldi	r24, 0x77	; 119
    25c0:	92 e0       	ldi	r25, 0x02	; 2
    25c2:	0e 94 94 04 	call	0x928	; 0x928 <strlen_P>
    25c6:	9c 01       	movw	r18, r24
    25c8:	21 50       	subi	r18, 0x01	; 1
    25ca:	30 40       	sbci	r19, 0x00	; 0
          }
          int lastIndex = input.indexOf(' ', firstIndex);
    25cc:	a2 2e       	mov	r10, r18
    25ce:	73 2e       	mov	r7, r19
    25d0:	c6 01       	movw	r24, r12
    25d2:	60 e2       	ldi	r22, 0x20	; 32
    25d4:	a9 01       	movw	r20, r18
    25d6:	0e 94 1f 38 	call	0x703e	; 0x703e <_ZNK6String7indexOfEcj>
    25da:	9c 01       	movw	r18, r24
          if (lastIndex == -1){
    25dc:	bf ef       	ldi	r27, 0xFF	; 255
    25de:	8f 3f       	cpi	r24, 0xFF	; 255
    25e0:	9b 07       	cpc	r25, r27
    25e2:	29 f4       	brne	.+10     	; 0x25ee <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x1bc>
            lastIndex = input.length()-2; // \r\n
    25e4:	f6 01       	movw	r30, r12
    25e6:	24 81       	ldd	r18, Z+4	; 0x04
    25e8:	35 81       	ldd	r19, Z+5	; 0x05
    25ea:	22 50       	subi	r18, 0x02	; 2
    25ec:	30 40       	sbci	r19, 0x00	; 0
          }
          input = input.substring(firstIndex, lastIndex);             
    25ee:	8e 01       	movw	r16, r28
    25f0:	0a 5e       	subi	r16, 0xEA	; 234
    25f2:	1f 4f       	sbci	r17, 0xFF	; 255
    25f4:	c8 01       	movw	r24, r16
    25f6:	b6 01       	movw	r22, r12
    25f8:	4a 2d       	mov	r20, r10
    25fa:	57 2d       	mov	r21, r7
    25fc:	0e 94 0d 3a 	call	0x741a	; 0x741a <_ZNK6String9substringEjj>
    2600:	c6 01       	movw	r24, r12
    2602:	b8 01       	movw	r22, r16
    2604:	0e 94 60 3a 	call	0x74c0	; 0x74c0 <_ZN6StringaSERKS_>
    2608:	c8 01       	movw	r24, r16
    260a:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>

          if (isGet) {
    260e:	bb 20       	and	r11, r11
    2610:	51 f0       	breq	.+20     	; 0x2626 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x1f4>
            // We are not interested in this information
            Serial_skipBytes(dataLength); 
    2612:	c7 01       	movw	r24, r14
    2614:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <_ZL16Serial_skipBytesj>
            Serial_skipBytes(2); // remove end mark 
    2618:	82 e0       	ldi	r24, 0x02	; 2
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <_ZL16Serial_skipBytesj>
    2620:	24 e0       	ldi	r18, 0x04	; 4
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	6d c0       	rjmp	.+218    	; 0x2700 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x2ce>
            return GB_COMMAND_HTTP_GET;
          } 
          else {
            // Post
            //word dataLength0 = dataLength;
            dataLength -= Serial_skipBytesUntil(dataLength, S_CRLFCRLF); // skip HTTP header
    2626:	c7 01       	movw	r24, r14
    2628:	6e e7       	ldi	r22, 0x7E	; 126
    262a:	72 e0       	ldi	r23, 0x02	; 2
    262c:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZL21Serial_skipBytesUntiljPKc>
    2630:	87 01       	movw	r16, r14
    2632:	08 1b       	sub	r16, r24
    2634:	19 0b       	sbc	r17, r25
            //word dataLength1 = dataLength;
            dataLength -= Serial_readStringUntil(postParams, dataLength, S_CRLF); // read HTTP data;
    2636:	c4 01       	movw	r24, r8
    2638:	b8 01       	movw	r22, r16
    263a:	4a e7       	ldi	r20, 0x7A	; 122
    263c:	50 e0       	ldi	r21, 0x00	; 0
    263e:	0e 94 be 08 	call	0x117c	; 0x117c <_ZL22Serial_readStringUntilR6StringjPKc>
            // word dataLength2 = dataLength;           
            Serial_skipBytes(dataLength); // skip remaned endings
    2642:	98 01       	movw	r18, r16
    2644:	28 1b       	sub	r18, r24
    2646:	39 0b       	sbc	r19, r25
    2648:	c9 01       	movw	r24, r18
    264a:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <_ZL16Serial_skipBytesj>

            if (flashStringEndsWith(postParams, S_CRLF)){
    264e:	c4 01       	movw	r24, r8
    2650:	6a e7       	ldi	r22, 0x7A	; 122
    2652:	70 e0       	ldi	r23, 0x00	; 0
    2654:	0e 94 2e 07 	call	0xe5c	; 0xe5c <_ZL19flashStringEndsWithRK6StringPKc>
    2658:	88 23       	and	r24, r24
    265a:	b9 f0       	breq	.+46     	; 0x268a <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x258>
              postParams = postParams.substring(0, input.length()-2);   
    265c:	8e 01       	movw	r16, r28
    265e:	03 5e       	subi	r16, 0xE3	; 227
    2660:	1f 4f       	sbci	r17, 0xFF	; 255
    2662:	d6 01       	movw	r26, r12
    2664:	14 96       	adiw	r26, 0x04	; 4
    2666:	2d 91       	ld	r18, X+
    2668:	3c 91       	ld	r19, X
    266a:	15 97       	sbiw	r26, 0x05	; 5
    266c:	22 50       	subi	r18, 0x02	; 2
    266e:	30 40       	sbci	r19, 0x00	; 0
    2670:	c8 01       	movw	r24, r16
    2672:	b4 01       	movw	r22, r8
    2674:	40 e0       	ldi	r20, 0x00	; 0
    2676:	50 e0       	ldi	r21, 0x00	; 0
    2678:	0e 94 0d 3a 	call	0x741a	; 0x741a <_ZNK6String9substringEjj>
    267c:	c4 01       	movw	r24, r8
    267e:	b8 01       	movw	r22, r16
    2680:	0e 94 60 3a 	call	0x74c0	; 0x74c0 <_ZN6StringaSERKS_>
    2684:	c8 01       	movw	r24, r16
    2686:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
             postParams += ", dataLength1=";
             postParams += dataLength1;
             postParams += ", dataLength2=";
             postParams += dataLength2;
             */
            Serial_skipBytes(2); // remove end mark 
    268a:	82 e0       	ldi	r24, 0x02	; 2
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <_ZL16Serial_skipBytesj>
    2692:	25 e0       	ldi	r18, 0x05	; 5
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	34 c0       	rjmp	.+104    	; 0x2700 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x2ce>
          Serial_skipBytes(2); // remove end mark 
          return GB_COMMAND_NONE;
        }

      } 
      else if (firstRequestHeaderByte == 0x80) {
    2698:	e0 38       	cpi	r30, 0x80	; 128
    269a:	a9 f4       	brne	.+42     	; 0x26c6 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x294>
        // TCP client connected
        Serial_readString(input, 1); 
    269c:	c6 01       	movw	r24, r12
    269e:	61 e0       	ldi	r22, 0x01	; 1
    26a0:	70 e0       	ldi	r23, 0x00	; 0
    26a2:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZL17Serial_readStringR6Stringj>
        wifiPortDescriptor = input[14]; 
    26a6:	c6 01       	movw	r24, r12
    26a8:	6e e0       	ldi	r22, 0x0E	; 14
    26aa:	70 e0       	ldi	r23, 0x00	; 0
    26ac:	0e 94 e5 37 	call	0x6fca	; 0x6fca <_ZN6StringixEj>
    26b0:	fc 01       	movw	r30, r24
    26b2:	80 81       	ld	r24, Z
    26b4:	f7 01       	movw	r30, r14
    26b6:	80 83       	st	Z, r24
        Serial_skipBytes(8); 
    26b8:	88 e0       	ldi	r24, 0x08	; 8
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <_ZL16Serial_skipBytesj>
    26c0:	22 e0       	ldi	r18, 0x02	; 2
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	1d c0       	rjmp	.+58     	; 0x2700 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x2ce>
        return GB_COMMAND_HTTP_CONNECTED;

      } 
      else if (firstRequestHeaderByte == 0x81) {
    26c6:	e1 38       	cpi	r30, 0x81	; 129
    26c8:	a9 f4       	brne	.+42     	; 0x26f4 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x2c2>
        // TCP client disconnected
        Serial_readString(input, 1); 
    26ca:	c6 01       	movw	r24, r12
    26cc:	61 e0       	ldi	r22, 0x01	; 1
    26ce:	70 e0       	ldi	r23, 0x00	; 0
    26d0:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZL17Serial_readStringR6Stringj>
        wifiPortDescriptor = input[14]; 
    26d4:	c6 01       	movw	r24, r12
    26d6:	6e e0       	ldi	r22, 0x0E	; 14
    26d8:	70 e0       	ldi	r23, 0x00	; 0
    26da:	0e 94 e5 37 	call	0x6fca	; 0x6fca <_ZN6StringixEj>
    26de:	fc 01       	movw	r30, r24
    26e0:	80 81       	ld	r24, Z
    26e2:	d7 01       	movw	r26, r14
    26e4:	8c 93       	st	X, r24
        Serial_skipBytes(8); 
    26e6:	88 e0       	ldi	r24, 0x08	; 8
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <_ZL16Serial_skipBytesj>
    26ee:	23 e0       	ldi	r18, 0x03	; 3
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	06 c0       	rjmp	.+12     	; 0x2700 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x2ce>
        return GB_COMMAND_HTTP_DISCONNECTED;

      } 
      else if (firstRequestHeaderByte == 0xFF) { 
    26f4:	ef 3f       	cpi	r30, 0xFF	; 255
    26f6:	e1 f0       	breq	.+56     	; 0x2730 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x2fe>
        return GB_COMMAND_NONE;

      } 
      else {
        // Unknown packet and it size
        cleanSerialBuffer();
    26f8:	0e 94 51 08 	call	0x10a2	; 0x10a2 <_ZN15GB_SerialHelper17cleanSerialBufferEv>
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
        return GB_COMMAND_NONE;   
      }
    }
    return GB_COMMAND_NONE;  
  } 
    2700:	c9 01       	movw	r24, r18
    2702:	a3 96       	adiw	r28, 0x23	; 35
    2704:	0f b6       	in	r0, 0x3f	; 63
    2706:	f8 94       	cli
    2708:	de bf       	out	0x3e, r29	; 62
    270a:	0f be       	out	0x3f, r0	; 63
    270c:	cd bf       	out	0x3d, r28	; 61
    270e:	cf 91       	pop	r28
    2710:	df 91       	pop	r29
    2712:	1f 91       	pop	r17
    2714:	0f 91       	pop	r16
    2716:	ff 90       	pop	r15
    2718:	ef 90       	pop	r14
    271a:	df 90       	pop	r13
    271c:	cf 90       	pop	r12
    271e:	bf 90       	pop	r11
    2720:	af 90       	pop	r10
    2722:	9f 90       	pop	r9
    2724:	8f 90       	pop	r8
    2726:	7f 90       	pop	r7
    2728:	08 95       	ret
            return GB_COMMAND_HTTP_POST; 
          }
        } 
        else {
          // Unknown HTTP request type
          Serial_skipBytes(dataLength); // remove all data
    272a:	c7 01       	movw	r24, r14
    272c:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <_ZL16Serial_skipBytesj>
          Serial_skipBytes(2); // remove end mark 
    2730:	82 e0       	ldi	r24, 0x02	; 2
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <_ZL16Serial_skipBytesj>
    2738:	e1 cf       	rjmp	.-62     	; 0x26fc <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_+0x2ca>

0000273a <_ZL16EEPROMStringLoadj>:
const word ES_printSendPinsStatus_SerialMonotor = 0xD0; // Use serial monitor on(1)/off(0)
const word ES_printSendPinsStatus_ErrorStatus = 0xF0; // Error status
const word ES_printSendPinsStatus_Breeze = 0xFD; // Breeze
const word ES_printSendPinsStatus_I2C = 0x104; // Reserved by I2C. Can be used, if SCL, SDA pins will be used

static String EEPROMStringLoad(word offset) {
    273a:	0f 93       	push	r16
    273c:	1f 93       	push	r17
    273e:	cf 93       	push	r28
    2740:	df 93       	push	r29
    2742:	18 2f       	mov	r17, r24
    2744:	09 2f       	mov	r16, r25
    2746:	eb 01       	movw	r28, r22
  String rez;
    2748:	60 e0       	ldi	r22, 0x00	; 0
    274a:	71 e0       	ldi	r23, 0x01	; 1
    274c:	0e 94 8f 39 	call	0x731e	; 0x731e <_ZN6StringC1EPKc>
    2750:	04 c0       	rjmp	.+8      	; 0x275a <_ZL16EEPROMStringLoadj+0x20>
    2752:	81 2f       	mov	r24, r17
    2754:	90 2f       	mov	r25, r16
    2756:	0e 94 2b 39 	call	0x7256	; 0x7256 <_ZN6String6concatEc>
  char c = EEPROM.read(offset++);
   while(c){
    rez += c;
    c = EEPROM.read(offset++);
    275a:	86 e0       	ldi	r24, 0x06	; 6
    275c:	92 e0       	ldi	r25, 0x02	; 2
    275e:	be 01       	movw	r22, r28
    2760:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN11EEPROMClass4readEi>
    2764:	68 2f       	mov	r22, r24
    2766:	21 96       	adiw	r28, 0x01	; 1
const word ES_printSendPinsStatus_I2C = 0x104; // Reserved by I2C. Can be used, if SCL, SDA pins will be used

static String EEPROMStringLoad(word offset) {
  String rez;
  char c = EEPROM.read(offset++);
   while(c){
    2768:	88 23       	and	r24, r24
    276a:	99 f7       	brne	.-26     	; 0x2752 <_ZL16EEPROMStringLoadj+0x18>
    rez += c;
    c = EEPROM.read(offset++);
  }
  return rez;
}
    276c:	81 2f       	mov	r24, r17
    276e:	90 2f       	mov	r25, r16
    2770:	df 91       	pop	r29
    2772:	cf 91       	pop	r28
    2774:	1f 91       	pop	r17
    2776:	0f 91       	pop	r16
    2778:	08 95       	ret

0000277a <loop>:
    277a:	82 e2       	ldi	r24, 0x22	; 34
    277c:	92 e0       	ldi	r25, 0x02	; 2
    277e:	40 e0       	ldi	r20, 0x00	; 0
    2780:	50 e0       	ldi	r21, 0x00	; 0
    2782:	60 e0       	ldi	r22, 0x00	; 0
    2784:	70 e0       	ldi	r23, 0x00	; 0
    2786:	0e 94 ff 26 	call	0x4dfe	; 0x4dfe <_ZN15TimeAlarmsClass5delayEm>
    278a:	08 95       	ret

0000278c <_Z15printFreeMemoryv>:
    278c:	0f 93       	push	r16
    278e:	1f 93       	push	r17
    2790:	08 eb       	ldi	r16, 0xB8	; 184
    2792:	13 e0       	ldi	r17, 0x03	; 3
    2794:	c8 01       	movw	r24, r16
    2796:	60 ec       	ldi	r22, 0xC0	; 192
    2798:	70 e0       	ldi	r23, 0x00	; 0
    279a:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_ZN5Print5printEPK19__FlashStringHelper>
    279e:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <freeMemory>
    27a2:	bc 01       	movw	r22, r24
    27a4:	c8 01       	movw	r24, r16
    27a6:	4a e0       	ldi	r20, 0x0A	; 10
    27a8:	50 e0       	ldi	r21, 0x00	; 0
    27aa:	0e 94 9f 37 	call	0x6f3e	; 0x6f3e <_ZN5Print5printEii>
    27ae:	c8 01       	movw	r24, r16
    27b0:	6e ec       	ldi	r22, 0xCE	; 206
    27b2:	70 e0       	ldi	r23, 0x00	; 0
    27b4:	0e 94 99 36 	call	0x6d32	; 0x6d32 <_ZN5Print7printlnEPK19__FlashStringHelper>
    27b8:	1f 91       	pop	r17
    27ba:	0f 91       	pop	r16
    27bc:	08 95       	ret

000027be <_Z14isDayInGrowboxv>:
    27be:	0e 94 87 23 	call	0x470e	; 0x470e <_Z10timeStatusv>
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	29 f4       	brne	.+10     	; 0x27d0 <_Z14isDayInGrowboxv+0x12>
    27c6:	89 e5       	ldi	r24, 0x59	; 89
    27c8:	91 e0       	ldi	r25, 0x01	; 1
    27ca:	0e 94 77 0e 	call	0x1cee	; 0x1cee <_ZN9GB_Logger8logErrorER5Error>
    27ce:	06 c0       	rjmp	.+12     	; 0x27dc <_Z14isDayInGrowboxv+0x1e>
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
  static boolean stopLogError(Error &error){
    if (error.isStored){
    27d0:	80 91 5f 01 	lds	r24, 0x015F
    27d4:	88 23       	and	r24, r24
    27d6:	11 f0       	breq	.+4      	; 0x27dc <_Z14isDayInGrowboxv+0x1e>
      error.isStored = false;
    27d8:	10 92 5f 01 	sts	0x015F, r1
    27dc:	0e 94 93 23 	call	0x4726	; 0x4726 <_Z4hourv>
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	02 97       	sbiw	r24, 0x02	; 2
    27e4:	07 97       	sbiw	r24, 0x07	; 7
    27e6:	08 f4       	brcc	.+2      	; 0x27ea <_Z14isDayInGrowboxv+0x2c>
    27e8:	21 e0       	ldi	r18, 0x01	; 1
    27ea:	82 2f       	mov	r24, r18
    27ec:	08 95       	ret

000027ee <setup>:
    27ee:	ef 92       	push	r14
    27f0:	ff 92       	push	r15
    27f2:	0f 93       	push	r16
    27f4:	1f 93       	push	r17
    27f6:	df 93       	push	r29
    27f8:	cf 93       	push	r28
    27fa:	cd b7       	in	r28, 0x3d	; 61
    27fc:	de b7       	in	r29, 0x3e	; 62
    27fe:	2e 97       	sbiw	r28, 0x0e	; 14
    2800:	0f b6       	in	r0, 0x3f	; 63
    2802:	f8 94       	cli
    2804:	de bf       	out	0x3e, r29	; 62
    2806:	0f be       	out	0x3f, r0	; 63
    2808:	cd bf       	out	0x3d, r28	; 61
    280a:	8d e0       	ldi	r24, 0x0D	; 13
    280c:	61 e0       	ldi	r22, 0x01	; 1
    280e:	0e 94 b7 32 	call	0x656e	; 0x656e <pinMode>
    2812:	8d e0       	ldi	r24, 0x0D	; 13
    2814:	61 e0       	ldi	r22, 0x01	; 1
    2816:	0e 94 b7 32 	call	0x656e	; 0x656e <pinMode>
    281a:	8c e0       	ldi	r24, 0x0C	; 12
    281c:	61 e0       	ldi	r22, 0x01	; 1
    281e:	0e 94 b7 32 	call	0x656e	; 0x656e <pinMode>
    2822:	8b e0       	ldi	r24, 0x0B	; 11
    2824:	62 e0       	ldi	r22, 0x02	; 2
    2826:	0e 94 b7 32 	call	0x656e	; 0x656e <pinMode>
    282a:	83 e0       	ldi	r24, 0x03	; 3
    282c:	61 e0       	ldi	r22, 0x01	; 1
    282e:	0e 94 b7 32 	call	0x656e	; 0x656e <pinMode>
    2832:	84 e0       	ldi	r24, 0x04	; 4
    2834:	61 e0       	ldi	r22, 0x01	; 1
    2836:	0e 94 b7 32 	call	0x656e	; 0x656e <pinMode>
    283a:	85 e0       	ldi	r24, 0x05	; 5
    283c:	61 e0       	ldi	r22, 0x01	; 1
    283e:	0e 94 b7 32 	call	0x656e	; 0x656e <pinMode>
    2842:	83 e0       	ldi	r24, 0x03	; 3
    2844:	61 e0       	ldi	r22, 0x01	; 1
    2846:	0e 94 f6 32 	call	0x65ec	; 0x65ec <digitalWrite>
    284a:	84 e0       	ldi	r24, 0x04	; 4
    284c:	61 e0       	ldi	r22, 0x01	; 1
    284e:	0e 94 f6 32 	call	0x65ec	; 0x65ec <digitalWrite>
    2852:	85 e0       	ldi	r24, 0x05	; 5
    2854:	61 e0       	ldi	r22, 0x01	; 1
    2856:	0e 94 f6 32 	call	0x65ec	; 0x65ec <digitalWrite>
    285a:	10 92 4a 01 	sts	0x014A, r1
    285e:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <freeMemory>
    2862:	7c 01       	movw	r14, r24
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	61 e0       	ldi	r22, 0x01	; 1
    2868:	0e 94 3c 10 	call	0x2078	; 0x2078 <_ZN15GB_SerialHelper11checkSerialEhh>
    286c:	80 91 ae 01 	lds	r24, 0x01AE
    2870:	88 23       	and	r24, r24
    2872:	31 f0       	breq	.+12     	; 0x2880 <setup+0x92>
    2874:	0e 94 c6 13 	call	0x278c	; 0x278c <_Z15printFreeMemoryv>
    2878:	87 ea       	ldi	r24, 0xA7	; 167
    287a:	95 e0       	ldi	r25, 0x05	; 5
    287c:	0e 94 36 08 	call	0x106c	; 0x106c <_ZL17printStatusOnBootPK19__FlashStringHelper>
    2880:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <_Z15initLoggerModelv>
    this->sequenceSize = sequenceSize;
    this->description = description;
  }
  
  static Error* findByIndex(byte sequence, byte sequenceSize){
    Error* currentItemPtr = lastAddedItem;
    2884:	e0 91 4e 01 	lds	r30, 0x014E
    2888:	f0 91 4f 01 	lds	r31, 0x014F
    288c:	0a c0       	rjmp	.+20     	; 0x28a2 <setup+0xb4>
    while (currentItemPtr != 0){
      if (currentItemPtr->sequence == sequence && currentItemPtr->sequenceSize == sequenceSize) {
    288e:	82 81       	ldd	r24, Z+2	; 0x02
    2890:	8f 3f       	cpi	r24, 0xFF	; 255
    2892:	19 f4       	brne	.+6      	; 0x289a <setup+0xac>
    2894:	83 81       	ldd	r24, Z+3	; 0x03
    2896:	8f 3f       	cpi	r24, 0xFF	; 255
    2898:	39 f0       	breq	.+14     	; 0x28a8 <setup+0xba>
        return currentItemPtr;
      }
      currentItemPtr = (Error*)currentItemPtr->nextError;
    289a:	80 81       	ld	r24, Z
    289c:	91 81       	ldd	r25, Z+1	; 0x01
    289e:	9c 01       	movw	r18, r24
    28a0:	f9 01       	movw	r30, r18
    this->description = description;
  }
  
  static Error* findByIndex(byte sequence, byte sequenceSize){
    Error* currentItemPtr = lastAddedItem;
    while (currentItemPtr != 0){
    28a2:	30 97       	sbiw	r30, 0x00	; 0
    28a4:	a1 f7       	brne	.-24     	; 0x288e <setup+0xa0>
    28a6:	92 c1       	rjmp	.+804    	; 0x2bcc <setup+0x3de>
    28a8:	80 91 ae 01 	lds	r24, 0x01AE
    28ac:	88 23       	and	r24, r24
    28ae:	21 f0       	breq	.+8      	; 0x28b8 <setup+0xca>
    28b0:	8c e8       	ldi	r24, 0x8C	; 140
    28b2:	95 e0       	ldi	r25, 0x05	; 5
    28b4:	0e 94 21 08 	call	0x1042	; 0x1042 <_ZL21printFatalErrorOnBootPK19__FlashStringHelper>
    28b8:	68 e8       	ldi	r22, 0x88	; 136
    28ba:	73 e1       	ldi	r23, 0x13	; 19
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	0e 94 19 32 	call	0x6432	; 0x6432 <delay>
    28c4:	f9 cf       	rjmp	.-14     	; 0x28b8 <setup+0xca>
    // Serial.print("lastAddedEvent ev: ");
    //Serial.println(lastAddedEvent->description);
    Event* currentItemPtr = lastAddedEvent;
    while (currentItemPtr != 0){
      //Serial.println(currentItemPtr->description);
      if (currentItemPtr->index == index) {
    28c6:	82 81       	ldd	r24, Z+2	; 0x02
    28c8:	8f 3f       	cpi	r24, 0xFF	; 255
    28ca:	39 f0       	breq	.+14     	; 0x28da <setup+0xec>
        return currentItemPtr;
      }
      currentItemPtr = (Event*)currentItemPtr->nextEvent;
    28cc:	80 81       	ld	r24, Z
    28ce:	91 81       	ldd	r25, Z+1	; 0x01
    28d0:	9c 01       	movw	r18, r24
    28d2:	f9 01       	movw	r30, r18
    //Serial.print("search ev: ");    
    //Serial.println(index);
    // Serial.print("lastAddedEvent ev: ");
    //Serial.println(lastAddedEvent->description);
    Event* currentItemPtr = lastAddedEvent;
    while (currentItemPtr != 0){
    28d4:	30 97       	sbiw	r30, 0x00	; 0
    28d6:	b9 f7       	brne	.-18     	; 0x28c6 <setup+0xd8>
    28d8:	7e c1       	rjmp	.+764    	; 0x2bd6 <setup+0x3e8>
    28da:	80 91 ae 01 	lds	r24, 0x01AE
    28de:	88 23       	and	r24, r24
    28e0:	21 f0       	breq	.+8      	; 0x28ea <setup+0xfc>
    28e2:	81 e7       	ldi	r24, 0x71	; 113
    28e4:	95 e0       	ldi	r25, 0x05	; 5
    28e6:	0e 94 21 08 	call	0x1042	; 0x1042 <_ZL21printFatalErrorOnBootPK19__FlashStringHelper>
    28ea:	68 e8       	ldi	r22, 0x88	; 136
    28ec:	73 e1       	ldi	r23, 0x13	; 19
    28ee:	80 e0       	ldi	r24, 0x00	; 0
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	0e 94 19 32 	call	0x6432	; 0x6432 <delay>
    28f6:	f9 cf       	rjmp	.-14     	; 0x28ea <setup+0xfc>
    28f8:	8b e6       	ldi	r24, 0x6B	; 107
    28fa:	95 e0       	ldi	r25, 0x05	; 5
    28fc:	0e 94 36 08 	call	0x106c	; 0x106c <_ZL17printStatusOnBootPK19__FlashStringHelper>
    2900:	8d e0       	ldi	r24, 0x0D	; 13
    2902:	9b e2       	ldi	r25, 0x2B	; 43
    2904:	0e 94 70 23 	call	0x46e0	; 0x46e0 <_Z15setSyncProviderPFmvE>
    2908:	0e 94 87 23 	call	0x470e	; 0x470e <_Z10timeStatusv>
    290c:	89 2b       	or	r24, r25
    290e:	59 f0       	breq	.+22     	; 0x2926 <setup+0x138>
    2910:	0e 94 8e 23 	call	0x471c	; 0x471c <_Z4yearv>
    2914:	8f 5d       	subi	r24, 0xDF	; 223
    2916:	97 40       	sbci	r25, 0x07	; 7
    2918:	34 f4       	brge	.+12     	; 0x2926 <setup+0x138>
    291a:	0e 94 8e 23 	call	0x471c	; 0x471c <_Z4yearv>
    291e:	85 5e       	subi	r24, 0xE5	; 229
    2920:	97 40       	sbci	r25, 0x07	; 7
    2922:	0c f4       	brge	.+2      	; 0x2926 <setup+0x138>
    2924:	26 c1       	rjmp	.+588    	; 0x2b72 <setup+0x384>
    2926:	82 e5       	ldi	r24, 0x52	; 82
    2928:	91 e0       	ldi	r25, 0x01	; 1
    292a:	0e 94 77 0e 	call	0x1cee	; 0x1cee <_ZN9GB_Logger8logErrorER5Error>
    292e:	e8 cf       	rjmp	.-48     	; 0x2900 <setup+0x112>
    2930:	10 92 58 01 	sts	0x0158, r1
    2934:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <_ZN13GB_Controller15checkFreeMemoryEv>
    2938:	80 91 ae 01 	lds	r24, 0x01AE
    293c:	88 23       	and	r24, r24
    293e:	49 f0       	breq	.+18     	; 0x2952 <setup+0x164>
    2940:	80 e6       	ldi	r24, 0x60	; 96
    2942:	95 e0       	ldi	r25, 0x05	; 5
    2944:	0e 94 36 08 	call	0x106c	; 0x106c <_ZL17printStatusOnBootPK19__FlashStringHelper>
    2948:	04 c0       	rjmp	.+8      	; 0x2952 <setup+0x164>
public:

  static void start(){
    dallasTemperature.begin();
    while(dallasTemperature.getDeviceCount() == 0){
      GB_Logger::logError(ERROR_TERMOMETER_DISCONNECTED);
    294a:	80 e6       	ldi	r24, 0x60	; 96
    294c:	91 e0       	ldi	r25, 0x01	; 1
    294e:	0e 94 77 0e 	call	0x1cee	; 0x1cee <_ZN9GB_Logger8logErrorER5Error>
      dallasTemperature.begin();
    2952:	81 ee       	ldi	r24, 0xE1	; 225
    2954:	91 e0       	ldi	r25, 0x01	; 1
    2956:	0e 94 25 30 	call	0x604a	; 0x604a <_ZN17DallasTemperature5beginEv>

public:

  static void start(){
    dallasTemperature.begin();
    while(dallasTemperature.getDeviceCount() == 0){
    295a:	81 ee       	ldi	r24, 0xE1	; 225
    295c:	91 e0       	ldi	r25, 0x01	; 1
    295e:	0e 94 67 2d 	call	0x5ace	; 0x5ace <_ZN17DallasTemperature14getDeviceCountEv>
    2962:	88 23       	and	r24, r24
    2964:	91 f3       	breq	.-28     	; 0x294a <setup+0x15c>
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
  static boolean stopLogError(Error &error){
    if (error.isStored){
    2966:	80 91 66 01 	lds	r24, 0x0166
    296a:	88 23       	and	r24, r24
    296c:	11 f0       	breq	.+4      	; 0x2972 <setup+0x184>
      error.isStored = false;
    296e:	10 92 66 01 	sts	0x0166, r1
      GB_Logger::logError(ERROR_TERMOMETER_DISCONNECTED);
      dallasTemperature.begin();
    }  
    GB_Logger::stopLogError(ERROR_TERMOMETER_DISCONNECTED);

    dallasTemperature.getAddress(oneWireAddress, 0); // search for devices on the bus and assign based on an index.
    2972:	81 ee       	ldi	r24, 0xE1	; 225
    2974:	91 e0       	ldi	r25, 0x01	; 1
    2976:	64 ef       	ldi	r22, 0xF4	; 244
    2978:	71 e0       	ldi	r23, 0x01	; 1
    297a:	40 e0       	ldi	r20, 0x00	; 0
    297c:	0e 94 f7 2f 	call	0x5fee	; 0x5fee <_ZN17DallasTemperature10getAddressEPhh>
    2980:	06 c0       	rjmp	.+12     	; 0x298e <setup+0x1a0>
    2982:	68 ee       	ldi	r22, 0xE8	; 232
    2984:	73 e0       	ldi	r23, 0x03	; 3
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	0e 94 19 32 	call	0x6432	; 0x6432 <delay>
    298e:	0e 94 3b 11 	call	0x2276	; 0x2276 <_ZN14GB_Thermometer16updateStatisticsEv>
    2992:	88 23       	and	r24, r24
    2994:	b1 f3       	breq	.-20     	; 0x2982 <setup+0x194>
    2996:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <_ZN13GB_Controller15checkFreeMemoryEv>
    299a:	80 91 ae 01 	lds	r24, 0x01AE
    299e:	88 23       	and	r24, r24
    29a0:	21 f0       	breq	.+8      	; 0x29aa <setup+0x1bc>
    29a2:	88 e5       	ldi	r24, 0x58	; 88
    29a4:	95 e0       	ldi	r25, 0x05	; 5
    29a6:	0e 94 36 08 	call	0x106c	; 0x106c <_ZL17printStatusOnBootPK19__FlashStringHelper>
    29aa:	00 e0       	ldi	r16, 0x00	; 0
    29ac:	10 e0       	ldi	r17, 0x00	; 0
    }
  }

  static void read(word address, void *data, const byte sizeofData) {
    for (word c = 0; c < sizeofData; c++){
      byte value =  read(address + c);
    29ae:	c8 01       	movw	r24, r16
    29b0:	0e 94 00 06 	call	0xc00	; 0xc00 <_ZN10GB_Storage4readEj>
      ((byte*)data)[c] = value;
    29b4:	f8 01       	movw	r30, r16
    29b6:	ef 53       	subi	r30, 0x3F	; 63
    29b8:	fe 4f       	sbci	r31, 0xFE	; 254
    29ba:	80 83       	st	Z, r24
      write(address + c, value);
    }
  }

  static void read(word address, void *data, const byte sizeofData) {
    for (word c = 0; c < sizeofData; c++){
    29bc:	0f 5f       	subi	r16, 0xFF	; 255
    29be:	1f 4f       	sbci	r17, 0xFF	; 255
    29c0:	00 32       	cpi	r16, 0x20	; 32
    29c2:	11 05       	cpc	r17, r1
    29c4:	a1 f7       	brne	.-24     	; 0x29ae <setup+0x1c0>
  }

private :

  static boolean isBootRecordCorrect(){ // TODO rename it
    return (bootRecord.first_magic == MAGIC_NUMBER) && (bootRecord.last_magic == MAGIC_NUMBER);
    29c6:	80 91 c1 01 	lds	r24, 0x01C1
    29ca:	90 91 c2 01 	lds	r25, 0x01C2
    29ce:	85 55       	subi	r24, 0x55	; 85
    29d0:	9a 4a       	sbci	r25, 0xAA	; 170
    29d2:	09 f0       	breq	.+2      	; 0x29d6 <setup+0x1e8>
    29d4:	d4 c0       	rjmp	.+424    	; 0x2b7e <setup+0x390>
    29d6:	80 91 df 01 	lds	r24, 0x01DF
    29da:	90 91 e0 01 	lds	r25, 0x01E0
    29de:	85 55       	subi	r24, 0x55	; 85
    29e0:	9a 4a       	sbci	r25, 0xAA	; 170
    29e2:	09 f0       	breq	.+2      	; 0x29e6 <setup+0x1f8>
    29e4:	cc c0       	rjmp	.+408    	; 0x2b7e <setup+0x390>

  static boolean start(){

    GB_Storage::read(0, &bootRecord, sizeof(BootRecord));
    if (isBootRecordCorrect()){
      bootRecord.lastStartupTimeStamp = now();      
    29e6:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <_Z3nowv>
    29ea:	60 93 c7 01 	sts	0x01C7, r22
    29ee:	70 93 c8 01 	sts	0x01C8, r23
    29f2:	80 93 c9 01 	sts	0x01C9, r24
    29f6:	90 93 ca 01 	sts	0x01CA, r25
      GB_Storage::write(OFFSETOF(BootRecord, lastStartupTimeStamp), &(bootRecord.lastStartupTimeStamp), sizeof(bootRecord.lastStartupTimeStamp));      
    29fa:	86 e0       	ldi	r24, 0x06	; 6
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	67 ec       	ldi	r22, 0xC7	; 199
    2a00:	71 e0       	ldi	r23, 0x01	; 1
    2a02:	44 e0       	ldi	r20, 0x04	; 4
    2a04:	0e 94 5b 05 	call	0xab6	; 0xab6 <_ZN10GB_Storage5writeEjPKvh>
    2a08:	91 e0       	ldi	r25, 0x01	; 1
    2a0a:	11 c0       	rjmp	.+34     	; 0x2a2e <setup+0x240>
      bootRecord.lastStartupTimeStamp = bootRecord.firstStartupTimeStamp;
      bootRecord.nextLogRecordAddress = sizeof(BootRecord);
      bootRecord.boolPreferencies.isLogOverflow = false;
      bootRecord.boolPreferencies.isLoggerEnabled = true;
      for(byte i=0; i<sizeof(bootRecord.reserved); i++){
        bootRecord.reserved[i] = 0;
    2a0c:	11 92       	st	Z+, r1
      bootRecord.firstStartupTimeStamp = now();
      bootRecord.lastStartupTimeStamp = bootRecord.firstStartupTimeStamp;
      bootRecord.nextLogRecordAddress = sizeof(BootRecord);
      bootRecord.boolPreferencies.isLogOverflow = false;
      bootRecord.boolPreferencies.isLoggerEnabled = true;
      for(byte i=0; i<sizeof(bootRecord.reserved); i++){
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	ef 3d       	cpi	r30, 0xDF	; 223
    2a12:	f8 07       	cpc	r31, r24
    2a14:	d9 f7       	brne	.-10     	; 0x2a0c <setup+0x21e>
        bootRecord.reserved[i] = 0;
      }
      bootRecord.last_magic = MAGIC_NUMBER;
    2a16:	85 e5       	ldi	r24, 0x55	; 85
    2a18:	9a ea       	ldi	r25, 0xAA	; 170
    2a1a:	91 83       	std	Z+1, r25	; 0x01
    2a1c:	80 83       	st	Z, r24

      GB_Storage::write(0, &bootRecord, sizeof(BootRecord));
    2a1e:	7e 97       	sbiw	r30, 0x1e	; 30
    2a20:	80 e0       	ldi	r24, 0x00	; 0
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	bf 01       	movw	r22, r30
    2a26:	40 e2       	ldi	r20, 0x20	; 32
    2a28:	0e 94 5b 05 	call	0xab6	; 0xab6 <_ZN10GB_Storage5writeEjPKvh>
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	80 93 4a 01 	sts	0x014A, r24
    2a34:	99 23       	and	r25, r25
    2a36:	19 f0       	breq	.+6      	; 0x2a3e <setup+0x250>
    2a38:	81 e8       	ldi	r24, 0x81	; 129
    2a3a:	91 e0       	ldi	r25, 0x01	; 1
    2a3c:	02 c0       	rjmp	.+4      	; 0x2a42 <setup+0x254>
    2a3e:	8c e7       	ldi	r24, 0x7C	; 124
    2a40:	91 e0       	ldi	r25, 0x01	; 1
    2a42:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <_ZN9GB_Logger8logEventER5Event>
    2a46:	80 e0       	ldi	r24, 0x00	; 0
    2a48:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <_ZN14GB_Thermometer14getTemperatureEh>
    2a4c:	0e 94 df 13 	call	0x27be	; 0x27be <_Z14isDayInGrowboxv>
    2a50:	88 23       	and	r24, r24
    2a52:	19 f0       	breq	.+6      	; 0x2a5a <setup+0x26c>
    2a54:	0e 94 2e 10 	call	0x205c	; 0x205c <_Z15switchToDayModev>
    2a58:	02 c0       	rjmp	.+4      	; 0x2a5e <setup+0x270>
    2a5a:	0e 94 21 10 	call	0x2042	; 0x2042 <_Z17switchToNightModev>
    2a5e:	82 e2       	ldi	r24, 0x22	; 34
    2a60:	92 e0       	ldi	r25, 0x02	; 2
    2a62:	44 e1       	ldi	r20, 0x14	; 20
    2a64:	50 e0       	ldi	r21, 0x00	; 0
    2a66:	60 e0       	ldi	r22, 0x00	; 0
    2a68:	70 e0       	ldi	r23, 0x00	; 0
    2a6a:	2a e9       	ldi	r18, 0x9A	; 154
    2a6c:	31 e1       	ldi	r19, 0x11	; 17
    2a6e:	0e 94 98 26 	call	0x4d30	; 0x4d30 <_ZN15TimeAlarmsClass11timerRepeatEmPFvvE>
    2a72:	82 e2       	ldi	r24, 0x22	; 34
    2a74:	92 e0       	ldi	r25, 0x02	; 2
    2a76:	41 e0       	ldi	r20, 0x01	; 1
    2a78:	50 e0       	ldi	r21, 0x00	; 0
    2a7a:	60 e0       	ldi	r22, 0x00	; 0
    2a7c:	70 e0       	ldi	r23, 0x00	; 0
    2a7e:	2d e2       	ldi	r18, 0x2D	; 45
    2a80:	31 e1       	ldi	r19, 0x11	; 17
    2a82:	0e 94 98 26 	call	0x4d30	; 0x4d30 <_ZN15TimeAlarmsClass11timerRepeatEmPFvvE>
    2a86:	82 e2       	ldi	r24, 0x22	; 34
    2a88:	92 e0       	ldi	r25, 0x02	; 2
    2a8a:	44 e1       	ldi	r20, 0x14	; 20
    2a8c:	50 e0       	ldi	r21, 0x00	; 0
    2a8e:	60 e0       	ldi	r22, 0x00	; 0
    2a90:	70 e0       	ldi	r23, 0x00	; 0
    2a92:	22 e3       	ldi	r18, 0x32	; 50
    2a94:	31 e1       	ldi	r19, 0x11	; 17
    2a96:	0e 94 98 26 	call	0x4d30	; 0x4d30 <_ZN15TimeAlarmsClass11timerRepeatEmPFvvE>
    2a9a:	82 e2       	ldi	r24, 0x22	; 34
    2a9c:	92 e0       	ldi	r25, 0x02	; 2
    2a9e:	41 e0       	ldi	r20, 0x01	; 1
    2aa0:	50 e0       	ldi	r21, 0x00	; 0
    2aa2:	60 e0       	ldi	r22, 0x00	; 0
    2aa4:	70 e0       	ldi	r23, 0x00	; 0
    2aa6:	2d ef       	ldi	r18, 0xFD	; 253
    2aa8:	3b e0       	ldi	r19, 0x0B	; 11
    2aaa:	0e 94 98 26 	call	0x4d30	; 0x4d30 <_ZN15TimeAlarmsClass11timerRepeatEmPFvvE>
    2aae:	82 e2       	ldi	r24, 0x22	; 34
    2ab0:	92 e0       	ldi	r25, 0x02	; 2
    2ab2:	4c e2       	ldi	r20, 0x2C	; 44
    2ab4:	51 e0       	ldi	r21, 0x01	; 1
    2ab6:	60 e0       	ldi	r22, 0x00	; 0
    2ab8:	70 e0       	ldi	r23, 0x00	; 0
    2aba:	29 eb       	ldi	r18, 0xB9	; 185
    2abc:	3f e0       	ldi	r19, 0x0F	; 15
    2abe:	0e 94 98 26 	call	0x4d30	; 0x4d30 <_ZN15TimeAlarmsClass11timerRepeatEmPFvvE>
    2ac2:	82 e2       	ldi	r24, 0x22	; 34
    2ac4:	92 e0       	ldi	r25, 0x02	; 2
    2ac6:	61 e0       	ldi	r22, 0x01	; 1
    2ac8:	70 e0       	ldi	r23, 0x00	; 0
    2aca:	40 e0       	ldi	r20, 0x00	; 0
    2acc:	50 e0       	ldi	r21, 0x00	; 0
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	0e e2       	ldi	r16, 0x2E	; 46
    2ad4:	10 e1       	ldi	r17, 0x10	; 16
    2ad6:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <_ZN15TimeAlarmsClass11alarmRepeatEiiiPFvvE>
    2ada:	82 e2       	ldi	r24, 0x22	; 34
    2adc:	92 e0       	ldi	r25, 0x02	; 2
    2ade:	69 e0       	ldi	r22, 0x09	; 9
    2ae0:	70 e0       	ldi	r23, 0x00	; 0
    2ae2:	40 e0       	ldi	r20, 0x00	; 0
    2ae4:	50 e0       	ldi	r21, 0x00	; 0
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	01 e2       	ldi	r16, 0x21	; 33
    2aec:	10 e1       	ldi	r17, 0x10	; 16
    2aee:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <_ZN15TimeAlarmsClass11alarmRepeatEiiiPFvvE>
    2af2:	80 91 ae 01 	lds	r24, 0x01AE
    2af6:	88 23       	and	r24, r24
    2af8:	69 f0       	breq	.+26     	; 0x2b14 <setup+0x326>
    2afa:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <freeMemory>
    2afe:	e8 16       	cp	r14, r24
    2b00:	f9 06       	cpc	r15, r25
    2b02:	11 f0       	breq	.+4      	; 0x2b08 <setup+0x31a>
    2b04:	0e 94 c6 13 	call	0x278c	; 0x278c <_Z15printFreeMemoryv>
    2b08:	88 eb       	ldi	r24, 0xB8	; 184
    2b0a:	93 e0       	ldi	r25, 0x03	; 3
    2b0c:	6b e3       	ldi	r22, 0x3B	; 59
    2b0e:	75 e0       	ldi	r23, 0x05	; 5
    2b10:	0e 94 99 36 	call	0x6d32	; 0x6d32 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2b14:	80 91 ae 01 	lds	r24, 0x01AE
    2b18:	88 23       	and	r24, r24
    2b1a:	11 f0       	breq	.+4      	; 0x2b20 <setup+0x332>
    2b1c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <_ZN15GB_SerialHelper13printDirtyEndEv>
    2b20:	80 91 af 01 	lds	r24, 0x01AF
    2b24:	88 23       	and	r24, r24
    2b26:	09 f4       	brne	.+2      	; 0x2b2a <setup+0x33c>
    2b28:	5e c0       	rjmp	.+188    	; 0x2be6 <setup+0x3f8>
    2b2a:	7e 01       	movw	r14, r28
    2b2c:	08 94       	sec
    2b2e:	e1 1c       	adc	r14, r1
    2b30:	f1 1c       	adc	r15, r1
    2b32:	c7 01       	movw	r24, r14
    2b34:	66 e3       	ldi	r22, 0x36	; 54
    2b36:	75 e0       	ldi	r23, 0x05	; 5
    2b38:	0e 94 4c 06 	call	0xc98	; 0xc98 <_ZL15flashStringLoadPKc>
  }
  return str; 
}

static String flashStringLoad(const __FlashStringHelper* fstr){ 
  return flashStringLoad((const char PROGMEM*) fstr);
    2b3c:	8e 01       	movw	r16, r28
    2b3e:	08 5f       	subi	r16, 0xF8	; 248
    2b40:	1f 4f       	sbci	r17, 0xFF	; 255
    2b42:	c8 01       	movw	r24, r16
    2b44:	69 e2       	ldi	r22, 0x29	; 41
    2b46:	75 e0       	ldi	r23, 0x05	; 5
    2b48:	0e 94 4c 06 	call	0xc98	; 0xc98 <_ZL15flashStringLoadPKc>
      cleanSerialBuffer();
    }
  }

  static void setWifiConfiguration(const String& _s_wifiSID, const String& _s_wifiPass){
    s_wifiSID = _s_wifiSID;
    2b4c:	81 eb       	ldi	r24, 0xB1	; 177
    2b4e:	91 e0       	ldi	r25, 0x01	; 1
    2b50:	b7 01       	movw	r22, r14
    2b52:	0e 94 60 3a 	call	0x74c0	; 0x74c0 <_ZN6StringaSERKS_>
    s_wifiPass = _s_wifiPass;
    2b56:	88 eb       	ldi	r24, 0xB8	; 184
    2b58:	91 e0       	ldi	r25, 0x01	; 1
    2b5a:	b8 01       	movw	r22, r16
    2b5c:	0e 94 60 3a 	call	0x74c0	; 0x74c0 <_ZN6StringaSERKS_>
    2b60:	c8 01       	movw	r24, r16
    2b62:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
    2b66:	c7 01       	movw	r24, r14
    2b68:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
    2b6c:	0e 94 10 0b 	call	0x1620	; 0x1620 <_ZN15GB_SerialHelper9startWifiEv>
    2b70:	3a c0       	rjmp	.+116    	; 0x2be6 <setup+0x3f8>
    GB_SerialHelper::printDirtyEnd();
    error.isStored = true;   
    error.notify();
  }
  static boolean stopLogError(Error &error){
    if (error.isStored){
    2b72:	80 91 58 01 	lds	r24, 0x0158
    2b76:	88 23       	and	r24, r24
    2b78:	09 f0       	breq	.+2      	; 0x2b7c <setup+0x38e>
    2b7a:	da ce       	rjmp	.-588    	; 0x2930 <setup+0x142>
    2b7c:	db ce       	rjmp	.-586    	; 0x2934 <setup+0x146>
      bootRecord.lastStartupTimeStamp = now();      
      GB_Storage::write(OFFSETOF(BootRecord, lastStartupTimeStamp), &(bootRecord.lastStartupTimeStamp), sizeof(bootRecord.lastStartupTimeStamp));      
      return true;   
    } 
    else {
      bootRecord.first_magic = MAGIC_NUMBER;
    2b7e:	85 e5       	ldi	r24, 0x55	; 85
    2b80:	9a ea       	ldi	r25, 0xAA	; 170
    2b82:	90 93 c2 01 	sts	0x01C2, r25
    2b86:	80 93 c1 01 	sts	0x01C1, r24
      bootRecord.firstStartupTimeStamp = now();
    2b8a:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <_Z3nowv>
    2b8e:	60 93 c3 01 	sts	0x01C3, r22
    2b92:	70 93 c4 01 	sts	0x01C4, r23
    2b96:	80 93 c5 01 	sts	0x01C5, r24
    2b9a:	90 93 c6 01 	sts	0x01C6, r25
      bootRecord.lastStartupTimeStamp = bootRecord.firstStartupTimeStamp;
    2b9e:	60 93 c7 01 	sts	0x01C7, r22
    2ba2:	70 93 c8 01 	sts	0x01C8, r23
    2ba6:	80 93 c9 01 	sts	0x01C9, r24
    2baa:	90 93 ca 01 	sts	0x01CA, r25
      bootRecord.nextLogRecordAddress = sizeof(BootRecord);
    2bae:	80 e2       	ldi	r24, 0x20	; 32
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	90 93 cc 01 	sts	0x01CC, r25
    2bb6:	80 93 cb 01 	sts	0x01CB, r24
      bootRecord.boolPreferencies.isLogOverflow = false;
    2bba:	80 91 cd 01 	lds	r24, 0x01CD
      bootRecord.boolPreferencies.isLoggerEnabled = true;
    2bbe:	88 7f       	andi	r24, 0xF8	; 248
    2bc0:	82 60       	ori	r24, 0x02	; 2
    2bc2:	80 93 cd 01 	sts	0x01CD, r24
    2bc6:	ee ec       	ldi	r30, 0xCE	; 206
    2bc8:	f1 e0       	ldi	r31, 0x01	; 1
    2bca:	20 cf       	rjmp	.-448    	; 0x2a0c <setup+0x21e>
  static Event* findByIndex(byte index){
    //Serial.print("search ev: ");    
    //Serial.println(index);
    // Serial.print("lastAddedEvent ev: ");
    //Serial.println(lastAddedEvent->description);
    Event* currentItemPtr = lastAddedEvent;
    2bcc:	e0 91 50 01 	lds	r30, 0x0150
    2bd0:	f0 91 51 01 	lds	r31, 0x0151
    2bd4:	7f ce       	rjmp	.-770    	; 0x28d4 <setup+0xe6>
    2bd6:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <_ZN13GB_Controller15checkFreeMemoryEv>
    2bda:	80 91 ae 01 	lds	r24, 0x01AE
    2bde:	88 23       	and	r24, r24
    2be0:	09 f4       	brne	.+2      	; 0x2be4 <setup+0x3f6>
    2be2:	8e ce       	rjmp	.-740    	; 0x2900 <setup+0x112>
    2be4:	89 ce       	rjmp	.-750    	; 0x28f8 <setup+0x10a>
    2be6:	2e 96       	adiw	r28, 0x0e	; 14
    2be8:	0f b6       	in	r0, 0x3f	; 63
    2bea:	f8 94       	cli
    2bec:	de bf       	out	0x3e, r29	; 62
    2bee:	0f be       	out	0x3f, r0	; 63
    2bf0:	cd bf       	out	0x3d, r28	; 61
    2bf2:	cf 91       	pop	r28
    2bf4:	df 91       	pop	r29
    2bf6:	1f 91       	pop	r17
    2bf8:	0f 91       	pop	r16
    2bfa:	ff 90       	pop	r15
    2bfc:	ef 90       	pop	r14
    2bfe:	08 95       	ret

00002c00 <_ZN15GB_SerialHelper16sendWifiDataStopEv>:
  static void sendWifiDataStart(const byte &wifiPortDescriptor){
    sendWifiFrameStart(wifiPortDescriptor, WIFI_MAX_SEND_FRAME_SIZE);
    s_sendWifiDataFrameSize = 0;
  }

  static boolean sendWifiDataStop(){
    2c00:	cf 93       	push	r28
    2c02:	df 93       	push	r29
    if (s_sendWifiDataFrameSize > 0){
    2c04:	80 91 bf 01 	lds	r24, 0x01BF
    2c08:	90 91 c0 01 	lds	r25, 0x01C0
    2c0c:	18 16       	cp	r1, r24
    2c0e:	19 06       	cpc	r1, r25
    2c10:	64 f0       	brlt	.+24     	; 0x2c2a <_ZN15GB_SerialHelper16sendWifiDataStopEv+0x2a>
    2c12:	13 c0       	rjmp	.+38     	; 0x2c3a <_ZN15GB_SerialHelper16sendWifiDataStopEv+0x3a>
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    2c14:	88 eb       	ldi	r24, 0xB8	; 184
    2c16:	93 e0       	ldi	r25, 0x03	; 3
    2c18:	60 e0       	ldi	r22, 0x00	; 0
    2c1a:	0e 94 7d 35 	call	0x6afa	; 0x6afa <_ZN14HardwareSerial5writeEh>
      while (s_sendWifiDataFrameSize < WIFI_MAX_SEND_FRAME_SIZE){
        s_sendWifiDataFrameSize += Serial.write(0x00); // Filler 0x00
    2c1e:	c8 0f       	add	r28, r24
    2c20:	d9 1f       	adc	r29, r25
    2c22:	d0 93 c0 01 	sts	0x01C0, r29
    2c26:	c0 93 bf 01 	sts	0x01BF, r28
    s_sendWifiDataFrameSize = 0;
  }

  static boolean sendWifiDataStop(){
    if (s_sendWifiDataFrameSize > 0){
      while (s_sendWifiDataFrameSize < WIFI_MAX_SEND_FRAME_SIZE){
    2c2a:	c0 91 bf 01 	lds	r28, 0x01BF
    2c2e:	d0 91 c0 01 	lds	r29, 0x01C0
    2c32:	85 e0       	ldi	r24, 0x05	; 5
    2c34:	c8 37       	cpi	r28, 0x78	; 120
    2c36:	d8 07       	cpc	r29, r24
    2c38:	6c f3       	brlt	.-38     	; 0x2c14 <_ZN15GB_SerialHelper16sendWifiDataStopEv+0x14>
    Serial.print(length);
    Serial.print(',');
  }

  static boolean sendWifiFrameStop(){
    s_restartWifiIfNoResponseAutomatically = false;
    2c3a:	10 92 05 01 	sts	0x0105, r1
    boolean rez = wifiExecuteCommand();
    2c3e:	80 e0       	ldi	r24, 0x00	; 0
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	68 ee       	ldi	r22, 0xE8	; 232
    2c44:	73 e0       	ldi	r23, 0x03	; 3
    2c46:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <_ZN15GB_SerialHelper18wifiExecuteCommandEPK19__FlashStringHelperi>
    s_restartWifiIfNoResponseAutomatically = true;
    2c4a:	91 e0       	ldi	r25, 0x01	; 1
    2c4c:	90 93 05 01 	sts	0x0105, r25
      while (s_sendWifiDataFrameSize < WIFI_MAX_SEND_FRAME_SIZE){
        s_sendWifiDataFrameSize += Serial.write(0x00); // Filler 0x00
      }
    }
    return sendWifiFrameStop();
  } 
    2c50:	df 91       	pop	r29
    2c52:	cf 91       	pop	r28
    2c54:	08 95       	ret

00002c56 <_ZL8sendDataRK6String>:
    2c56:	df 92       	push	r13
    2c58:	ef 92       	push	r14
    2c5a:	ff 92       	push	r15
    2c5c:	0f 93       	push	r16
    2c5e:	1f 93       	push	r17
    2c60:	cf 93       	push	r28
    2c62:	df 93       	push	r29
    2c64:	7c 01       	movw	r14, r24
    2c66:	80 91 4b 01 	lds	r24, 0x014B
    2c6a:	90 91 4c 01 	lds	r25, 0x014C
    2c6e:	04 97       	sbiw	r24, 0x04	; 4
    2c70:	09 f0       	breq	.+2      	; 0x2c74 <_ZL8sendDataRK6String+0x1e>
    2c72:	67 c0       	rjmp	.+206    	; 0x2d42 <_ZL8sendDataRK6String+0xec>
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
    2c74:	f7 01       	movw	r30, r14
    2c76:	84 81       	ldd	r24, Z+4	; 0x04
    2c78:	95 81       	ldd	r25, Z+5	; 0x05
    return isSendOK;
  }  

  static boolean sendHttpOK_Data(const byte &wifiPortDescriptor, const String &data){
    boolean isSendOK = true;
    if (data.length() == 0){
    2c7a:	00 97       	sbiw	r24, 0x00	; 0
    2c7c:	09 f4       	brne	.+2      	; 0x2c80 <_ZL8sendDataRK6String+0x2a>
    2c7e:	66 c0       	rjmp	.+204    	; 0x2d4c <_ZL8sendDataRK6String+0xf6>
      return isSendOK;
    }
    if (s_sendWifiDataFrameSize + data.length() < WIFI_MAX_SEND_FRAME_SIZE){
    2c80:	c0 91 bf 01 	lds	r28, 0x01BF
    2c84:	d0 91 c0 01 	lds	r29, 0x01C0
    2c88:	8c 0f       	add	r24, r28
    2c8a:	9d 1f       	adc	r25, r29
    2c8c:	88 57       	subi	r24, 0x78	; 120
    2c8e:	95 40       	sbci	r25, 0x05	; 5
    2c90:	18 f0       	brcs	.+6      	; 0x2c98 <_ZL8sendDataRK6String+0x42>
    2c92:	c0 e0       	ldi	r28, 0x00	; 0
    2c94:	d0 e0       	ldi	r29, 0x00	; 0
    2c96:	20 c0       	rjmp	.+64     	; 0x2cd8 <_ZL8sendDataRK6String+0x82>
      s_sendWifiDataFrameSize += Serial.print(data);
    2c98:	88 eb       	ldi	r24, 0xB8	; 184
    2c9a:	93 e0       	ldi	r25, 0x03	; 3
    2c9c:	b7 01       	movw	r22, r14
    2c9e:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <_ZN5Print5printERK6String>
    2ca2:	c8 0f       	add	r28, r24
    2ca4:	d9 1f       	adc	r29, r25
    2ca6:	d0 93 c0 01 	sts	0x01C0, r29
    2caa:	c0 93 bf 01 	sts	0x01BF, r28
    2cae:	4e c0       	rjmp	.+156    	; 0x2d4c <_ZL8sendDataRK6String+0xf6>
    2cb0:	be 01       	movw	r22, r28
    } 
    else {
      int index = 0;
      while (s_sendWifiDataFrameSize < WIFI_MAX_SEND_FRAME_SIZE){
        char c = data[index++];
    2cb2:	21 96       	adiw	r28, 0x01	; 1
    2cb4:	c7 01       	movw	r24, r14
    2cb6:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <_ZNK6StringixEj>
    2cba:	68 2f       	mov	r22, r24
        s_sendWifiDataFrameSize += Serial.print(c);
    2cbc:	00 91 bf 01 	lds	r16, 0x01BF
    2cc0:	10 91 c0 01 	lds	r17, 0x01C0
    2cc4:	88 eb       	ldi	r24, 0xB8	; 184
    2cc6:	93 e0       	ldi	r25, 0x03	; 3
    2cc8:	0e 94 71 36 	call	0x6ce2	; 0x6ce2 <_ZN5Print5printEc>
    2ccc:	08 0f       	add	r16, r24
    2cce:	19 1f       	adc	r17, r25
    2cd0:	10 93 c0 01 	sts	0x01C0, r17
    2cd4:	00 93 bf 01 	sts	0x01BF, r16
    if (s_sendWifiDataFrameSize + data.length() < WIFI_MAX_SEND_FRAME_SIZE){
      s_sendWifiDataFrameSize += Serial.print(data);
    } 
    else {
      int index = 0;
      while (s_sendWifiDataFrameSize < WIFI_MAX_SEND_FRAME_SIZE){
    2cd8:	80 91 bf 01 	lds	r24, 0x01BF
    2cdc:	90 91 c0 01 	lds	r25, 0x01C0
    2ce0:	88 57       	subi	r24, 0x78	; 120
    2ce2:	95 40       	sbci	r25, 0x05	; 5
    2ce4:	2c f3       	brlt	.-54     	; 0x2cb0 <_ZL8sendDataRK6String+0x5a>
        char c = data[index++];
        s_sendWifiDataFrameSize += Serial.print(c);
      }
      isSendOK = sendWifiDataStop();
    2ce6:	0e 94 00 16 	call	0x2c00	; 0x2c00 <_ZN15GB_SerialHelper16sendWifiDataStopEv>
    2cea:	d8 2e       	mov	r13, r24
    Serial.print(data);
    sendWifiFrameStop();
  }

  static void sendWifiDataStart(const byte &wifiPortDescriptor){
    sendWifiFrameStart(wifiPortDescriptor, WIFI_MAX_SEND_FRAME_SIZE);
    2cec:	80 91 04 01 	lds	r24, 0x0104
    2cf0:	68 e7       	ldi	r22, 0x78	; 120
    2cf2:	75 e0       	ldi	r23, 0x05	; 5
    2cf4:	0e 94 43 0b 	call	0x1686	; 0x1686 <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>
    s_sendWifiDataFrameSize = 0;
    2cf8:	10 92 c0 01 	sts	0x01C0, r1
    2cfc:	10 92 bf 01 	sts	0x01BF, r1
    2d00:	13 c0       	rjmp	.+38     	; 0x2d28 <_ZL8sendDataRK6String+0xd2>
      }
      isSendOK = sendWifiDataStop();
      sendWifiDataStart(wifiPortDescriptor); 

      while (index < data.length()){
        char c = data[index++];
    2d02:	21 96       	adiw	r28, 0x01	; 1
    2d04:	c7 01       	movw	r24, r14
    2d06:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <_ZNK6StringixEj>
    2d0a:	68 2f       	mov	r22, r24
        s_sendWifiDataFrameSize += Serial.print(c);
    2d0c:	00 91 bf 01 	lds	r16, 0x01BF
    2d10:	10 91 c0 01 	lds	r17, 0x01C0
    2d14:	88 eb       	ldi	r24, 0xB8	; 184
    2d16:	93 e0       	ldi	r25, 0x03	; 3
    2d18:	0e 94 71 36 	call	0x6ce2	; 0x6ce2 <_ZN5Print5printEc>
    2d1c:	08 0f       	add	r16, r24
    2d1e:	19 1f       	adc	r17, r25
    2d20:	10 93 c0 01 	sts	0x01C0, r17
    2d24:	00 93 bf 01 	sts	0x01BF, r16
    2d28:	be 01       	movw	r22, r28
        s_sendWifiDataFrameSize += Serial.print(c);
      }
      isSendOK = sendWifiDataStop();
      sendWifiDataStart(wifiPortDescriptor); 

      while (index < data.length()){
    2d2a:	f7 01       	movw	r30, r14
    2d2c:	84 81       	ldd	r24, Z+4	; 0x04
    2d2e:	95 81       	ldd	r25, Z+5	; 0x05
    2d30:	c8 17       	cp	r28, r24
    2d32:	d9 07       	cpc	r29, r25
    2d34:	30 f3       	brcs	.-52     	; 0x2d02 <_ZL8sendDataRK6String+0xac>
    2d36:	dd 20       	and	r13, r13
    2d38:	49 f4       	brne	.+18     	; 0x2d4c <_ZL8sendDataRK6String+0xf6>
    2d3a:	81 e0       	ldi	r24, 0x01	; 1
    2d3c:	80 93 4d 01 	sts	0x014D, r24
    2d40:	05 c0       	rjmp	.+10     	; 0x2d4c <_ZL8sendDataRK6String+0xf6>
    2d42:	88 eb       	ldi	r24, 0xB8	; 184
    2d44:	93 e0       	ldi	r25, 0x03	; 3
    2d46:	b7 01       	movw	r22, r14
    2d48:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <_ZN5Print5printERK6String>
    2d4c:	df 91       	pop	r29
    2d4e:	cf 91       	pop	r28
    2d50:	1f 91       	pop	r17
    2d52:	0f 91       	pop	r16
    2d54:	ff 90       	pop	r15
    2d56:	ef 90       	pop	r14
    2d58:	df 90       	pop	r13
    2d5a:	08 95       	ret

00002d5c <_ZL8sendDatac>:
    2d5c:	ff 92       	push	r15
    2d5e:	0f 93       	push	r16
    2d60:	1f 93       	push	r17
    2d62:	df 93       	push	r29
    2d64:	cf 93       	push	r28
    2d66:	cd b7       	in	r28, 0x3d	; 61
    2d68:	de b7       	in	r29, 0x3e	; 62
    2d6a:	27 97       	sbiw	r28, 0x07	; 7
    2d6c:	0f b6       	in	r0, 0x3f	; 63
    2d6e:	f8 94       	cli
    2d70:	de bf       	out	0x3e, r29	; 62
    2d72:	0f be       	out	0x3f, r0	; 63
    2d74:	cd bf       	out	0x3d, r28	; 61
    2d76:	f8 2e       	mov	r15, r24
    2d78:	8e 01       	movw	r16, r28
    2d7a:	0f 5f       	subi	r16, 0xFF	; 255
    2d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d7e:	c8 01       	movw	r24, r16
    2d80:	60 e0       	ldi	r22, 0x00	; 0
    2d82:	71 e0       	ldi	r23, 0x01	; 1
    2d84:	0e 94 8f 39 	call	0x731e	; 0x731e <_ZN6StringC1EPKc>
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    2d88:	c8 01       	movw	r24, r16
    2d8a:	6f 2d       	mov	r22, r15
    2d8c:	0e 94 2b 39 	call	0x7256	; 0x7256 <_ZN6String6concatEc>
    2d90:	c8 01       	movw	r24, r16
    2d92:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <_ZL8sendDataRK6String>
    2d96:	c8 01       	movw	r24, r16
    2d98:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
    2d9c:	27 96       	adiw	r28, 0x07	; 7
    2d9e:	0f b6       	in	r0, 0x3f	; 63
    2da0:	f8 94       	cli
    2da2:	de bf       	out	0x3e, r29	; 62
    2da4:	0f be       	out	0x3f, r0	; 63
    2da6:	cd bf       	out	0x3d, r28	; 61
    2da8:	cf 91       	pop	r28
    2daa:	df 91       	pop	r29
    2dac:	1f 91       	pop	r17
    2dae:	0f 91       	pop	r16
    2db0:	ff 90       	pop	r15
    2db2:	08 95       	ret

00002db4 <_ZL13sendTag_Begin8HTTP_TAG>:
    2db4:	0f 93       	push	r16
    2db6:	1f 93       	push	r17
    2db8:	8c 01       	movw	r16, r24
    2dba:	8c e3       	ldi	r24, 0x3C	; 60
    2dbc:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <_ZL8sendDatac>
    2dc0:	01 30       	cpi	r16, 0x01	; 1
    2dc2:	11 05       	cpc	r17, r1
    2dc4:	19 f4       	brne	.+6      	; 0x2dcc <_ZL13sendTag_Begin8HTTP_TAG+0x18>
    2dc6:	8f e2       	ldi	r24, 0x2F	; 47
    2dc8:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <_ZL8sendDatac>
    2dcc:	1f 91       	pop	r17
    2dce:	0f 91       	pop	r16
    2dd0:	08 95       	ret

00002dd2 <_ZL11sendTag_End8HTTP_TAG>:
    2dd2:	02 97       	sbiw	r24, 0x02	; 2
    2dd4:	19 f4       	brne	.+6      	; 0x2ddc <_ZL11sendTag_End8HTTP_TAG+0xa>
    2dd6:	8f e2       	ldi	r24, 0x2F	; 47
    2dd8:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <_ZL8sendDatac>
    2ddc:	8e e3       	ldi	r24, 0x3E	; 62
    2dde:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <_ZL8sendDatac>
    2de2:	08 95       	ret

00002de4 <_ZL7sendTagc8HTTP_TAG>:
    2de4:	ff 92       	push	r15
    2de6:	0f 93       	push	r16
    2de8:	1f 93       	push	r17
    2dea:	f8 2e       	mov	r15, r24
    2dec:	8b 01       	movw	r16, r22
    2dee:	cb 01       	movw	r24, r22
    2df0:	0e 94 da 16 	call	0x2db4	; 0x2db4 <_ZL13sendTag_Begin8HTTP_TAG>
    2df4:	8f 2d       	mov	r24, r15
    2df6:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <_ZL8sendDatac>
    2dfa:	c8 01       	movw	r24, r16
    2dfc:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <_ZL11sendTag_End8HTTP_TAG>
    2e00:	1f 91       	pop	r17
    2e02:	0f 91       	pop	r16
    2e04:	ff 90       	pop	r15
    2e06:	08 95       	ret

00002e08 <_ZL8sendDatai>:
    2e08:	ef 92       	push	r14
    2e0a:	ff 92       	push	r15
    2e0c:	0f 93       	push	r16
    2e0e:	1f 93       	push	r17
    2e10:	df 93       	push	r29
    2e12:	cf 93       	push	r28
    2e14:	cd b7       	in	r28, 0x3d	; 61
    2e16:	de b7       	in	r29, 0x3e	; 62
    2e18:	27 97       	sbiw	r28, 0x07	; 7
    2e1a:	0f b6       	in	r0, 0x3f	; 63
    2e1c:	f8 94       	cli
    2e1e:	de bf       	out	0x3e, r29	; 62
    2e20:	0f be       	out	0x3f, r0	; 63
    2e22:	cd bf       	out	0x3d, r28	; 61
    2e24:	7c 01       	movw	r14, r24
    2e26:	8e 01       	movw	r16, r28
    2e28:	0f 5f       	subi	r16, 0xFF	; 255
    2e2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e2c:	c8 01       	movw	r24, r16
    2e2e:	60 e0       	ldi	r22, 0x00	; 0
    2e30:	71 e0       	ldi	r23, 0x01	; 1
    2e32:	0e 94 8f 39 	call	0x731e	; 0x731e <_ZN6StringC1EPKc>
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
    2e36:	c8 01       	movw	r24, r16
    2e38:	b7 01       	movw	r22, r14
    2e3a:	0e 94 ce 38 	call	0x719c	; 0x719c <_ZN6String6concatEi>
    2e3e:	c8 01       	movw	r24, r16
    2e40:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <_ZL8sendDataRK6String>
    2e44:	c8 01       	movw	r24, r16
    2e46:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
    2e4a:	27 96       	adiw	r28, 0x07	; 7
    2e4c:	0f b6       	in	r0, 0x3f	; 63
    2e4e:	f8 94       	cli
    2e50:	de bf       	out	0x3e, r29	; 62
    2e52:	0f be       	out	0x3f, r0	; 63
    2e54:	cd bf       	out	0x3d, r28	; 61
    2e56:	cf 91       	pop	r28
    2e58:	df 91       	pop	r29
    2e5a:	1f 91       	pop	r17
    2e5c:	0f 91       	pop	r16
    2e5e:	ff 90       	pop	r15
    2e60:	ef 90       	pop	r14
    2e62:	08 95       	ret

00002e64 <_ZL8sendDatam>:
    2e64:	0f 93       	push	r16
    2e66:	1f 93       	push	r17
    2e68:	df 93       	push	r29
    2e6a:	cf 93       	push	r28
    2e6c:	cd b7       	in	r28, 0x3d	; 61
    2e6e:	de b7       	in	r29, 0x3e	; 62
    2e70:	27 97       	sbiw	r28, 0x07	; 7
    2e72:	0f b6       	in	r0, 0x3f	; 63
    2e74:	f8 94       	cli
    2e76:	de bf       	out	0x3e, r29	; 62
    2e78:	0f be       	out	0x3f, r0	; 63
    2e7a:	cd bf       	out	0x3d, r28	; 61
    2e7c:	ab 01       	movw	r20, r22
    2e7e:	bc 01       	movw	r22, r24
    2e80:	8e 01       	movw	r16, r28
    2e82:	0f 5f       	subi	r16, 0xFF	; 255
    2e84:	1f 4f       	sbci	r17, 0xFF	; 255
    2e86:	c8 01       	movw	r24, r16
    2e88:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <_ZN13GB_PrintDirty13getTimeStringEm>
    2e8c:	c8 01       	movw	r24, r16
    2e8e:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <_ZL8sendDataRK6String>
    2e92:	c8 01       	movw	r24, r16
    2e94:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
    2e98:	27 96       	adiw	r28, 0x07	; 7
    2e9a:	0f b6       	in	r0, 0x3f	; 63
    2e9c:	f8 94       	cli
    2e9e:	de bf       	out	0x3e, r29	; 62
    2ea0:	0f be       	out	0x3f, r0	; 63
    2ea2:	cd bf       	out	0x3d, r28	; 61
    2ea4:	cf 91       	pop	r28
    2ea6:	df 91       	pop	r29
    2ea8:	1f 91       	pop	r17
    2eaa:	0f 91       	pop	r16
    2eac:	08 95       	ret

00002eae <_ZL8sendDataf>:
    2eae:	af 92       	push	r10
    2eb0:	bf 92       	push	r11
    2eb2:	cf 92       	push	r12
    2eb4:	df 92       	push	r13
    2eb6:	ef 92       	push	r14
    2eb8:	ff 92       	push	r15
    2eba:	0f 93       	push	r16
    2ebc:	1f 93       	push	r17
    2ebe:	df 93       	push	r29
    2ec0:	cf 93       	push	r28
    2ec2:	cd b7       	in	r28, 0x3d	; 61
    2ec4:	de b7       	in	r29, 0x3e	; 62
    2ec6:	2e 97       	sbiw	r28, 0x0e	; 14
    2ec8:	0f b6       	in	r0, 0x3f	; 63
    2eca:	f8 94       	cli
    2ecc:	de bf       	out	0x3e, r29	; 62
    2ece:	0f be       	out	0x3f, r0	; 63
    2ed0:	cd bf       	out	0x3d, r28	; 61
    2ed2:	7b 01       	movw	r14, r22
    2ed4:	8c 01       	movw	r16, r24
    }
    return out;
  }
  
  static String floatToString(float number){
    String out;
    2ed6:	5e 01       	movw	r10, r28
    2ed8:	08 94       	sec
    2eda:	a1 1c       	adc	r10, r1
    2edc:	b1 1c       	adc	r11, r1
    2ede:	c5 01       	movw	r24, r10
    2ee0:	60 e0       	ldi	r22, 0x00	; 0
    2ee2:	71 e0       	ldi	r23, 0x01	; 1
    2ee4:	0e 94 8f 39 	call	0x731e	; 0x731e <_ZN6StringC1EPKc>

    int temp = number*100;
    2ee8:	c8 01       	movw	r24, r16
    2eea:	b7 01       	movw	r22, r14
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	48 ec       	ldi	r20, 0xC8	; 200
    2ef2:	52 e4       	ldi	r21, 0x42	; 66
    2ef4:	0e 94 27 3d 	call	0x7a4e	; 0x7a4e <__mulsf3>
    2ef8:	0e 94 40 3c 	call	0x7880	; 0x7880 <__fixsfsi>
    2efc:	6b 01       	movw	r12, r22
    2efe:	7c 01       	movw	r14, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	64 e6       	ldi	r22, 0x64	; 100
    2f04:	70 e0       	ldi	r23, 0x00	; 0
    2f06:	0e 94 bd 3d 	call	0x7b7a	; 0x7b7a <__divmodhi4>
    2f0a:	c5 01       	movw	r24, r10
    2f0c:	0e 94 ce 38 	call	0x719c	; 0x719c <_ZN6String6concatEi>
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    2f10:	c5 01       	movw	r24, r10
    2f12:	6e e2       	ldi	r22, 0x2E	; 46
    2f14:	0e 94 2b 39 	call	0x7256	; 0x7256 <_ZN6String6concatEc>
    int whole = temp/100;
    int fract = temp%100;

    out += whole;
    out += '.';
    out += getFixedDigitsString(temp,2);
    2f18:	8e 01       	movw	r16, r28
    2f1a:	08 5f       	subi	r16, 0xF8	; 248
    2f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f1e:	c8 01       	movw	r24, r16
    2f20:	b6 01       	movw	r22, r12
    2f22:	42 e0       	ldi	r20, 0x02	; 2
    2f24:	0e 94 08 0c 	call	0x1810	; 0x1810 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    2f28:	c5 01       	movw	r24, r10
    2f2a:	b8 01       	movw	r22, r16
    2f2c:	0e 94 3e 39 	call	0x727c	; 0x727c <_ZN6String6concatERKS_>
    2f30:	c8 01       	movw	r24, r16
    2f32:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
    2f36:	c5 01       	movw	r24, r10
    2f38:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <_ZL8sendDataRK6String>
    2f3c:	c5 01       	movw	r24, r10
    2f3e:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
    2f42:	2e 96       	adiw	r28, 0x0e	; 14
    2f44:	0f b6       	in	r0, 0x3f	; 63
    2f46:	f8 94       	cli
    2f48:	de bf       	out	0x3e, r29	; 62
    2f4a:	0f be       	out	0x3f, r0	; 63
    2f4c:	cd bf       	out	0x3d, r28	; 61
    2f4e:	cf 91       	pop	r28
    2f50:	df 91       	pop	r29
    2f52:	1f 91       	pop	r17
    2f54:	0f 91       	pop	r16
    2f56:	ff 90       	pop	r15
    2f58:	ef 90       	pop	r14
    2f5a:	df 90       	pop	r13
    2f5c:	cf 90       	pop	r12
    2f5e:	bf 90       	pop	r11
    2f60:	af 90       	pop	r10
    2f62:	08 95       	ret

00002f64 <_ZL8sendDataj>:
    2f64:	ef 92       	push	r14
    2f66:	ff 92       	push	r15
    2f68:	0f 93       	push	r16
    2f6a:	1f 93       	push	r17
    2f6c:	df 93       	push	r29
    2f6e:	cf 93       	push	r28
    2f70:	cd b7       	in	r28, 0x3d	; 61
    2f72:	de b7       	in	r29, 0x3e	; 62
    2f74:	27 97       	sbiw	r28, 0x07	; 7
    2f76:	0f b6       	in	r0, 0x3f	; 63
    2f78:	f8 94       	cli
    2f7a:	de bf       	out	0x3e, r29	; 62
    2f7c:	0f be       	out	0x3f, r0	; 63
    2f7e:	cd bf       	out	0x3d, r28	; 61
    2f80:	7c 01       	movw	r14, r24
    2f82:	8e 01       	movw	r16, r28
    2f84:	0f 5f       	subi	r16, 0xFF	; 255
    2f86:	1f 4f       	sbci	r17, 0xFF	; 255
    2f88:	c8 01       	movw	r24, r16
    2f8a:	60 e0       	ldi	r22, 0x00	; 0
    2f8c:	71 e0       	ldi	r23, 0x01	; 1
    2f8e:	0e 94 8f 39 	call	0x731e	; 0x731e <_ZN6StringC1EPKc>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
	String & operator += (unsigned int num)		{concat(num); return (*this);}
    2f92:	c8 01       	movw	r24, r16
    2f94:	b7 01       	movw	r22, r14
    2f96:	0e 94 a0 38 	call	0x7140	; 0x7140 <_ZN6String6concatEj>
    2f9a:	c8 01       	movw	r24, r16
    2f9c:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <_ZL8sendDataRK6String>
    2fa0:	c8 01       	movw	r24, r16
    2fa2:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
    2fa6:	27 96       	adiw	r28, 0x07	; 7
    2fa8:	0f b6       	in	r0, 0x3f	; 63
    2faa:	f8 94       	cli
    2fac:	de bf       	out	0x3e, r29	; 62
    2fae:	0f be       	out	0x3f, r0	; 63
    2fb0:	cd bf       	out	0x3d, r28	; 61
    2fb2:	cf 91       	pop	r28
    2fb4:	df 91       	pop	r29
    2fb6:	1f 91       	pop	r17
    2fb8:	0f 91       	pop	r16
    2fba:	ff 90       	pop	r15
    2fbc:	ef 90       	pop	r14
    2fbe:	08 95       	ret

00002fc0 <_ZL8sendDataPK19__FlashStringHelper>:
    2fc0:	9f 92       	push	r9
    2fc2:	af 92       	push	r10
    2fc4:	bf 92       	push	r11
    2fc6:	cf 92       	push	r12
    2fc8:	df 92       	push	r13
    2fca:	ef 92       	push	r14
    2fcc:	ff 92       	push	r15
    2fce:	0f 93       	push	r16
    2fd0:	1f 93       	push	r17
    2fd2:	cf 93       	push	r28
    2fd4:	df 93       	push	r29
    2fd6:	b8 2e       	mov	r11, r24
    2fd8:	a9 2e       	mov	r10, r25
    2fda:	80 91 4b 01 	lds	r24, 0x014B
    2fde:	90 91 4c 01 	lds	r25, 0x014C
    2fe2:	04 97       	sbiw	r24, 0x04	; 4
    2fe4:	09 f0       	breq	.+2      	; 0x2fe8 <_ZL8sendDataPK19__FlashStringHelper+0x28>
    2fe6:	70 c0       	rjmp	.+224    	; 0x30c8 <_ZL8sendDataPK19__FlashStringHelper+0x108>
    sendWifiDataStart(wifiPortDescriptor);
  }

  static boolean sendHttpOK_Data(const byte &wifiPortDescriptor, const __FlashStringHelper* data){
    boolean isSendOK = true;
    if (s_sendWifiDataFrameSize + flashStringLength(data) < WIFI_MAX_SEND_FRAME_SIZE){
    2fe8:	c0 91 bf 01 	lds	r28, 0x01BF
    2fec:	d0 91 c0 01 	lds	r29, 0x01C0
  /////////////////////////////////////////////////////////////////////
  //                         FALASH STRINGS                          //
  /////////////////////////////////////////////////////////////////////

static int flashStringLength(const char PROGMEM* pstr){ 
  return strlen_P(pstr);
    2ff0:	8b 2d       	mov	r24, r11
    2ff2:	9a 2d       	mov	r25, r10
    2ff4:	0e 94 94 04 	call	0x928	; 0x928 <strlen_P>
    2ff8:	6c 01       	movw	r12, r24
    2ffa:	8c 0f       	add	r24, r28
    2ffc:	9d 1f       	adc	r25, r29
    2ffe:	88 57       	subi	r24, 0x78	; 120
    3000:	95 40       	sbci	r25, 0x05	; 5
    3002:	1c f0       	brlt	.+6      	; 0x300a <_ZL8sendDataPK19__FlashStringHelper+0x4a>
    3004:	c0 e0       	ldi	r28, 0x00	; 0
    3006:	d0 e0       	ldi	r29, 0x00	; 0
    3008:	27 c0       	rjmp	.+78     	; 0x3058 <_ZL8sendDataPK19__FlashStringHelper+0x98>
      s_sendWifiDataFrameSize += Serial.print(data);
    300a:	88 eb       	ldi	r24, 0xB8	; 184
    300c:	93 e0       	ldi	r25, 0x03	; 3
    300e:	6b 2d       	mov	r22, r11
    3010:	7a 2d       	mov	r23, r10
    3012:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_ZN5Print5printEPK19__FlashStringHelper>
    3016:	c8 0f       	add	r28, r24
    3018:	d9 1f       	adc	r29, r25
    301a:	d0 93 c0 01 	sts	0x01C0, r29
    301e:	c0 93 bf 01 	sts	0x01BF, r28
    3022:	58 c0       	rjmp	.+176    	; 0x30d4 <_ZL8sendDataPK19__FlashStringHelper+0x114>
    } 
    else {
      int index = 0;
      while (s_sendWifiDataFrameSize < WIFI_MAX_SEND_FRAME_SIZE){
        char c = flashStringCharAt(data, index++);
    3024:	7e 01       	movw	r14, r28
    3026:	08 94       	sec
    3028:	e1 1c       	adc	r14, r1
    302a:	f1 1c       	adc	r15, r1
}
static int flashStringLength(const __FlashStringHelper* fstr){ 
  return flashStringLength((const char PROGMEM *) fstr);
}
static char flashStringCharAt(const __FlashStringHelper* fstr, int index){ 
  return flashStringCharAt((const char PROGMEM*) fstr, index);
    302c:	8b 2d       	mov	r24, r11
    302e:	9a 2d       	mov	r25, r10
    3030:	be 01       	movw	r22, r28
    3032:	41 e0       	ldi	r20, 0x01	; 1
    3034:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZL17flashStringCharAtPKcih>
    3038:	68 2f       	mov	r22, r24
        s_sendWifiDataFrameSize += Serial.print(c);
    303a:	00 91 bf 01 	lds	r16, 0x01BF
    303e:	10 91 c0 01 	lds	r17, 0x01C0
    3042:	88 eb       	ldi	r24, 0xB8	; 184
    3044:	93 e0       	ldi	r25, 0x03	; 3
    3046:	0e 94 71 36 	call	0x6ce2	; 0x6ce2 <_ZN5Print5printEc>
    304a:	08 0f       	add	r16, r24
    304c:	19 1f       	adc	r17, r25
    304e:	10 93 c0 01 	sts	0x01C0, r17
    3052:	00 93 bf 01 	sts	0x01BF, r16
    3056:	e7 01       	movw	r28, r14
    if (s_sendWifiDataFrameSize + flashStringLength(data) < WIFI_MAX_SEND_FRAME_SIZE){
      s_sendWifiDataFrameSize += Serial.print(data);
    } 
    else {
      int index = 0;
      while (s_sendWifiDataFrameSize < WIFI_MAX_SEND_FRAME_SIZE){
    3058:	80 91 bf 01 	lds	r24, 0x01BF
    305c:	90 91 c0 01 	lds	r25, 0x01C0
    3060:	88 57       	subi	r24, 0x78	; 120
    3062:	95 40       	sbci	r25, 0x05	; 5
    3064:	fc f2       	brlt	.-66     	; 0x3024 <_ZL8sendDataPK19__FlashStringHelper+0x64>
        char c = flashStringCharAt(data, index++);
        s_sendWifiDataFrameSize += Serial.print(c);
      }
      isSendOK = sendWifiDataStop();
    3066:	0e 94 00 16 	call	0x2c00	; 0x2c00 <_ZN15GB_SerialHelper16sendWifiDataStopEv>
    306a:	98 2e       	mov	r9, r24
    Serial.print(data);
    sendWifiFrameStop();
  }

  static void sendWifiDataStart(const byte &wifiPortDescriptor){
    sendWifiFrameStart(wifiPortDescriptor, WIFI_MAX_SEND_FRAME_SIZE);
    306c:	80 91 04 01 	lds	r24, 0x0104
    3070:	68 e7       	ldi	r22, 0x78	; 120
    3072:	75 e0       	ldi	r23, 0x05	; 5
    3074:	0e 94 43 0b 	call	0x1686	; 0x1686 <_ZN15GB_SerialHelper18sendWifiFrameStartEhj>
    s_sendWifiDataFrameSize = 0;
    3078:	10 92 c0 01 	sts	0x01C0, r1
    307c:	10 92 bf 01 	sts	0x01BF, r1
    3080:	1a c0       	rjmp	.+52     	; 0x30b6 <_ZL8sendDataPK19__FlashStringHelper+0xf6>
        s_sendWifiDataFrameSize += Serial.print(c);
      }
      isSendOK = sendWifiDataStop();
      sendWifiDataStart(wifiPortDescriptor);   
      while (index < flashStringLength(data)){
        char c = flashStringCharAt(data, index++);
    3082:	7e 01       	movw	r14, r28
    3084:	08 94       	sec
    3086:	e1 1c       	adc	r14, r1
    3088:	f1 1c       	adc	r15, r1
    308a:	8b 2d       	mov	r24, r11
    308c:	9a 2d       	mov	r25, r10
    308e:	be 01       	movw	r22, r28
    3090:	41 e0       	ldi	r20, 0x01	; 1
    3092:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZL17flashStringCharAtPKcih>
    3096:	68 2f       	mov	r22, r24
        s_sendWifiDataFrameSize += Serial.print(c);
    3098:	00 91 bf 01 	lds	r16, 0x01BF
    309c:	10 91 c0 01 	lds	r17, 0x01C0
    30a0:	88 eb       	ldi	r24, 0xB8	; 184
    30a2:	93 e0       	ldi	r25, 0x03	; 3
    30a4:	0e 94 71 36 	call	0x6ce2	; 0x6ce2 <_ZN5Print5printEc>
    30a8:	08 0f       	add	r16, r24
    30aa:	19 1f       	adc	r17, r25
    30ac:	10 93 c0 01 	sts	0x01C0, r17
    30b0:	00 93 bf 01 	sts	0x01BF, r16
    30b4:	e7 01       	movw	r28, r14
        char c = flashStringCharAt(data, index++);
        s_sendWifiDataFrameSize += Serial.print(c);
      }
      isSendOK = sendWifiDataStop();
      sendWifiDataStart(wifiPortDescriptor);   
      while (index < flashStringLength(data)){
    30b6:	cc 15       	cp	r28, r12
    30b8:	dd 05       	cpc	r29, r13
    30ba:	1c f3       	brlt	.-58     	; 0x3082 <_ZL8sendDataPK19__FlashStringHelper+0xc2>
    30bc:	99 20       	and	r9, r9
    30be:	51 f4       	brne	.+20     	; 0x30d4 <_ZL8sendDataPK19__FlashStringHelper+0x114>
    30c0:	81 e0       	ldi	r24, 0x01	; 1
    30c2:	80 93 4d 01 	sts	0x014D, r24
    30c6:	06 c0       	rjmp	.+12     	; 0x30d4 <_ZL8sendDataPK19__FlashStringHelper+0x114>
    30c8:	88 eb       	ldi	r24, 0xB8	; 184
    30ca:	93 e0       	ldi	r25, 0x03	; 3
    30cc:	6b 2d       	mov	r22, r11
    30ce:	7a 2d       	mov	r23, r10
    30d0:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_ZN5Print5printEPK19__FlashStringHelper>
    30d4:	df 91       	pop	r29
    30d6:	cf 91       	pop	r28
    30d8:	1f 91       	pop	r17
    30da:	0f 91       	pop	r16
    30dc:	ff 90       	pop	r15
    30de:	ef 90       	pop	r14
    30e0:	df 90       	pop	r13
    30e2:	cf 90       	pop	r12
    30e4:	bf 90       	pop	r11
    30e6:	af 90       	pop	r10
    30e8:	9f 90       	pop	r9
    30ea:	08 95       	ret

000030ec <_ZL7sendTagPKc8HTTP_TAG>:
    30ec:	ef 92       	push	r14
    30ee:	ff 92       	push	r15
    30f0:	0f 93       	push	r16
    30f2:	1f 93       	push	r17
    30f4:	7c 01       	movw	r14, r24
    30f6:	8b 01       	movw	r16, r22
    30f8:	cb 01       	movw	r24, r22
    30fa:	0e 94 da 16 	call	0x2db4	; 0x2db4 <_ZL13sendTag_Begin8HTTP_TAG>
    30fe:	c7 01       	movw	r24, r14
    3100:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    3104:	c8 01       	movw	r24, r16
    3106:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <_ZL11sendTag_End8HTTP_TAG>
    310a:	1f 91       	pop	r17
    310c:	0f 91       	pop	r16
    310e:	ff 90       	pop	r15
    3110:	ef 90       	pop	r14
    3112:	08 95       	ret

00003114 <_Z15sendStorageDumpv>:
    3114:	bf 92       	push	r11
    3116:	cf 92       	push	r12
    3118:	df 92       	push	r13
    311a:	ef 92       	push	r14
    311c:	ff 92       	push	r15
    311e:	0f 93       	push	r16
    3120:	1f 93       	push	r17
    3122:	df 93       	push	r29
    3124:	cf 93       	push	r28
    3126:	cd b7       	in	r28, 0x3d	; 61
    3128:	de b7       	in	r29, 0x3e	; 62
    312a:	65 97       	sbiw	r28, 0x15	; 21
    312c:	0f b6       	in	r0, 0x3f	; 63
    312e:	f8 94       	cli
    3130:	de bf       	out	0x3e, r29	; 62
    3132:	0f be       	out	0x3f, r0	; 63
    3134:	cd bf       	out	0x3d, r28	; 61
    3136:	88 e6       	ldi	r24, 0x68	; 104
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	60 e0       	ldi	r22, 0x00	; 0
    313c:	70 e0       	ldi	r23, 0x00	; 0
    313e:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    3142:	8e e6       	ldi	r24, 0x6E	; 110
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	60 e0       	ldi	r22, 0x00	; 0
    3148:	70 e0       	ldi	r23, 0x00	; 0
    314a:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    314e:	81 e7       	ldi	r24, 0x71	; 113
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	60 e0       	ldi	r22, 0x00	; 0
    3154:	70 e0       	ldi	r23, 0x00	; 0
    3156:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    315a:	81 e7       	ldi	r24, 0x71	; 113
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	61 e0       	ldi	r22, 0x01	; 1
    3160:	70 e0       	ldi	r23, 0x00	; 0
    3162:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    3166:	10 e0       	ldi	r17, 0x00	; 0
    3168:	7e 01       	movw	r14, r28
    316a:	08 94       	sec
    316c:	e1 1c       	adc	r14, r1
    316e:	f1 1c       	adc	r15, r1
    3170:	81 e7       	ldi	r24, 0x71	; 113
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	60 e0       	ldi	r22, 0x00	; 0
    3176:	70 e0       	ldi	r23, 0x00	; 0
    3178:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    317c:	82 e6       	ldi	r24, 0x62	; 98
    317e:	60 e0       	ldi	r22, 0x00	; 0
    3180:	70 e0       	ldi	r23, 0x00	; 0
    3182:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <_ZL7sendTagc8HTTP_TAG>
    3186:	c7 01       	movw	r24, r14
    3188:	61 2f       	mov	r22, r17
    318a:	40 e0       	ldi	r20, 0x00	; 0
    318c:	0e 94 87 06 	call	0xd0e	; 0xd0e <_ZN13GB_PrintDirty6getHEXEhh>
    3190:	c7 01       	movw	r24, r14
    3192:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <_ZL8sendDataRK6String>
    3196:	c7 01       	movw	r24, r14
    3198:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
    319c:	82 e6       	ldi	r24, 0x62	; 98
    319e:	61 e0       	ldi	r22, 0x01	; 1
    31a0:	70 e0       	ldi	r23, 0x00	; 0
    31a2:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <_ZL7sendTagc8HTTP_TAG>
    31a6:	81 e7       	ldi	r24, 0x71	; 113
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	61 e0       	ldi	r22, 0x01	; 1
    31ac:	70 e0       	ldi	r23, 0x00	; 0
    31ae:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    31b2:	1f 5f       	subi	r17, 0xFF	; 255
    31b4:	10 31       	cpi	r17, 0x10	; 16
    31b6:	e1 f6       	brne	.-72     	; 0x3170 <_Z15sendStorageDumpv+0x5c>
    31b8:	8e e6       	ldi	r24, 0x6E	; 110
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	61 e0       	ldi	r22, 0x01	; 1
    31be:	70 e0       	ldi	r23, 0x00	; 0
    31c0:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    31c4:	00 e0       	ldi	r16, 0x00	; 0
    31c6:	10 e0       	ldi	r17, 0x00	; 0
    31c8:	78 e0       	ldi	r23, 0x08	; 8
    31ca:	c7 2e       	mov	r12, r23
    31cc:	d1 2c       	mov	r13, r1
    31ce:	cc 0e       	add	r12, r28
    31d0:	dd 1e       	adc	r13, r29
    31d2:	6f e0       	ldi	r22, 0x0F	; 15
    31d4:	e6 2e       	mov	r14, r22
    31d6:	f1 2c       	mov	r15, r1
    31d8:	ec 0e       	add	r14, r28
    31da:	fd 1e       	adc	r15, r29
    31dc:	c8 01       	movw	r24, r16
    31de:	0e 94 00 06 	call	0xc00	; 0xc00 <_ZN10GB_Storage4readEj>
    31e2:	b8 2e       	mov	r11, r24
    31e4:	c8 01       	movw	r24, r16
    31e6:	8f 70       	andi	r24, 0x0F	; 15
    31e8:	90 70       	andi	r25, 0x00	; 0
    31ea:	89 2b       	or	r24, r25
    31ec:	a9 f5       	brne	.+106    	; 0x3258 <_Z15sendStorageDumpv+0x144>
    31ee:	01 15       	cp	r16, r1
    31f0:	11 05       	cpc	r17, r1
    31f2:	31 f0       	breq	.+12     	; 0x3200 <_Z15sendStorageDumpv+0xec>
    31f4:	8e e6       	ldi	r24, 0x6E	; 110
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	61 e0       	ldi	r22, 0x01	; 1
    31fa:	70 e0       	ldi	r23, 0x00	; 0
    31fc:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    3200:	8e e6       	ldi	r24, 0x6E	; 110
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	60 e0       	ldi	r22, 0x00	; 0
    3206:	70 e0       	ldi	r23, 0x00	; 0
    3208:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    320c:	81 e7       	ldi	r24, 0x71	; 113
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	60 e0       	ldi	r22, 0x00	; 0
    3212:	70 e0       	ldi	r23, 0x00	; 0
    3214:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    3218:	82 e6       	ldi	r24, 0x62	; 98
    321a:	60 e0       	ldi	r22, 0x00	; 0
    321c:	70 e0       	ldi	r23, 0x00	; 0
    321e:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <_ZL7sendTagc8HTTP_TAG>
    3222:	b8 01       	movw	r22, r16
    3224:	54 e0       	ldi	r21, 0x04	; 4
    3226:	76 95       	lsr	r23
    3228:	67 95       	ror	r22
    322a:	5a 95       	dec	r21
    322c:	e1 f7       	brne	.-8      	; 0x3226 <_Z15sendStorageDumpv+0x112>
    322e:	c6 01       	movw	r24, r12
    3230:	40 e0       	ldi	r20, 0x00	; 0
    3232:	0e 94 87 06 	call	0xd0e	; 0xd0e <_ZN13GB_PrintDirty6getHEXEhh>
    3236:	c6 01       	movw	r24, r12
    3238:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <_ZL8sendDataRK6String>
    323c:	c6 01       	movw	r24, r12
    323e:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
    3242:	82 e6       	ldi	r24, 0x62	; 98
    3244:	61 e0       	ldi	r22, 0x01	; 1
    3246:	70 e0       	ldi	r23, 0x00	; 0
    3248:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <_ZL7sendTagc8HTTP_TAG>
    324c:	81 e7       	ldi	r24, 0x71	; 113
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	61 e0       	ldi	r22, 0x01	; 1
    3252:	70 e0       	ldi	r23, 0x00	; 0
    3254:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    3258:	81 e7       	ldi	r24, 0x71	; 113
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	60 e0       	ldi	r22, 0x00	; 0
    325e:	70 e0       	ldi	r23, 0x00	; 0
    3260:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    3264:	c7 01       	movw	r24, r14
    3266:	6b 2d       	mov	r22, r11
    3268:	40 e0       	ldi	r20, 0x00	; 0
    326a:	0e 94 87 06 	call	0xd0e	; 0xd0e <_ZN13GB_PrintDirty6getHEXEhh>
    326e:	c7 01       	movw	r24, r14
    3270:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <_ZL8sendDataRK6String>
    3274:	c7 01       	movw	r24, r14
    3276:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
    327a:	81 e7       	ldi	r24, 0x71	; 113
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	61 e0       	ldi	r22, 0x01	; 1
    3280:	70 e0       	ldi	r23, 0x00	; 0
    3282:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    3286:	80 91 4d 01 	lds	r24, 0x014D
    328a:	88 23       	and	r24, r24
    328c:	99 f4       	brne	.+38     	; 0x32b4 <_Z15sendStorageDumpv+0x1a0>
    328e:	0f 5f       	subi	r16, 0xFF	; 255
    3290:	1f 4f       	sbci	r17, 0xFF	; 255
    3292:	80 e1       	ldi	r24, 0x10	; 16
    3294:	00 30       	cpi	r16, 0x00	; 0
    3296:	18 07       	cpc	r17, r24
    3298:	09 f0       	breq	.+2      	; 0x329c <_Z15sendStorageDumpv+0x188>
    329a:	a0 cf       	rjmp	.-192    	; 0x31dc <_Z15sendStorageDumpv+0xc8>
    329c:	8e e6       	ldi	r24, 0x6E	; 110
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	61 e0       	ldi	r22, 0x01	; 1
    32a2:	70 e0       	ldi	r23, 0x00	; 0
    32a4:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    32a8:	88 e6       	ldi	r24, 0x68	; 104
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	61 e0       	ldi	r22, 0x01	; 1
    32ae:	70 e0       	ldi	r23, 0x00	; 0
    32b0:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    32b4:	65 96       	adiw	r28, 0x15	; 21
    32b6:	0f b6       	in	r0, 0x3f	; 63
    32b8:	f8 94       	cli
    32ba:	de bf       	out	0x3e, r29	; 62
    32bc:	0f be       	out	0x3f, r0	; 63
    32be:	cd bf       	out	0x3d, r28	; 61
    32c0:	cf 91       	pop	r28
    32c2:	df 91       	pop	r29
    32c4:	1f 91       	pop	r17
    32c6:	0f 91       	pop	r16
    32c8:	ff 90       	pop	r15
    32ca:	ef 90       	pop	r14
    32cc:	df 90       	pop	r13
    32ce:	cf 90       	pop	r12
    32d0:	bf 90       	pop	r11
    32d2:	08 95       	ret

000032d4 <_ZL13sendTagButtonPKcPK19__FlashStringHelper>:
    32d4:	ef 92       	push	r14
    32d6:	ff 92       	push	r15
    32d8:	0f 93       	push	r16
    32da:	1f 93       	push	r17
    32dc:	8c 01       	movw	r16, r24
    32de:	7b 01       	movw	r14, r22
    32e0:	88 e6       	ldi	r24, 0x68	; 104
    32e2:	93 e0       	ldi	r25, 0x03	; 3
    32e4:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    32e8:	c8 01       	movw	r24, r16
    32ea:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    32ee:	8d e5       	ldi	r24, 0x5D	; 93
    32f0:	93 e0       	ldi	r25, 0x03	; 3
    32f2:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    32f6:	c7 01       	movw	r24, r14
    32f8:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    32fc:	89 e5       	ldi	r24, 0x59	; 89
    32fe:	93 e0       	ldi	r25, 0x03	; 3
    3300:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    3304:	1f 91       	pop	r17
    3306:	0f 91       	pop	r16
    3308:	ff 90       	pop	r15
    330a:	ef 90       	pop	r14
    330c:	08 95       	ret

0000330e <_ZL30printSendConfigurationControlsv>:
    330e:	8d ea       	ldi	r24, 0xAD	; 173
    3310:	94 e0       	ldi	r25, 0x04	; 4
    3312:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    3316:	88 e8       	ldi	r24, 0x88	; 136
    3318:	94 e0       	ldi	r25, 0x04	; 4
    331a:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    331e:	80 e8       	ldi	r24, 0x80	; 128
    3320:	94 e0       	ldi	r25, 0x04	; 4
    3322:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    3326:	08 95       	ret

00003328 <_Z14sendFreeMemoryv>:
    3328:	80 ec       	ldi	r24, 0xC0	; 192
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    3330:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <freeMemory>
    3334:	0e 94 04 17 	call	0x2e08	; 0x2e08 <_ZL8sendDatai>
    3338:	8e ec       	ldi	r24, 0xCE	; 206
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    3340:	8a e7       	ldi	r24, 0x7A	; 122
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    3348:	08 95       	ret

0000334a <_ZL14sendTimeStatusv>:
    334a:	8e e1       	ldi	r24, 0x1E	; 30
    334c:	94 e0       	ldi	r25, 0x04	; 4
    334e:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    3352:	82 e6       	ldi	r24, 0x62	; 98
    3354:	60 e0       	ldi	r22, 0x00	; 0
    3356:	70 e0       	ldi	r23, 0x00	; 0
    3358:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <_ZL7sendTagc8HTTP_TAG>
    335c:	80 91 03 01 	lds	r24, 0x0103
    3360:	88 23       	and	r24, r24
    3362:	19 f0       	breq	.+6      	; 0x336a <_ZL14sendTimeStatusv+0x20>
    3364:	8a e1       	ldi	r24, 0x1A	; 26
    3366:	94 e0       	ldi	r25, 0x04	; 4
    3368:	02 c0       	rjmp	.+4      	; 0x336e <_ZL14sendTimeStatusv+0x24>
    336a:	84 e1       	ldi	r24, 0x14	; 20
    336c:	94 e0       	ldi	r25, 0x04	; 4
    336e:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    3372:	82 e6       	ldi	r24, 0x62	; 98
    3374:	61 e0       	ldi	r22, 0x01	; 1
    3376:	70 e0       	ldi	r23, 0x00	; 0
    3378:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <_ZL7sendTagc8HTTP_TAG>
    337c:	87 e0       	ldi	r24, 0x07	; 7
    337e:	94 e0       	ldi	r25, 0x04	; 4
    3380:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    3384:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <_Z3nowv>
    3388:	0e 94 32 17 	call	0x2e64	; 0x2e64 <_ZL8sendDatam>
    338c:	8b ef       	ldi	r24, 0xFB	; 251
    338e:	93 e0       	ldi	r25, 0x03	; 3
    3390:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    3394:	81 e0       	ldi	r24, 0x01	; 1
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	0e 94 04 17 	call	0x2e08	; 0x2e08 <_ZL8sendDatai>
    339c:	89 ee       	ldi	r24, 0xE9	; 233
    339e:	93 e0       	ldi	r25, 0x03	; 3
    33a0:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    33a4:	89 e0       	ldi	r24, 0x09	; 9
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	0e 94 04 17 	call	0x2e08	; 0x2e08 <_ZL8sendDatai>
    33ac:	82 ee       	ldi	r24, 0xE2	; 226
    33ae:	93 e0       	ldi	r25, 0x03	; 3
    33b0:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    33b4:	08 95       	ret

000033b6 <_ZL21sendTemperatureStatusv>:
    33b6:	af 92       	push	r10
    33b8:	bf 92       	push	r11
    33ba:	cf 92       	push	r12
    33bc:	df 92       	push	r13
    33be:	ef 92       	push	r14
    33c0:	ff 92       	push	r15
    33c2:	0f 93       	push	r16
    33c4:	1f 93       	push	r17
    33c6:	cf 93       	push	r28
    33c8:	df 93       	push	r29
  /////////////////////////////////////////////////////////////////////
  //                        GROWBOX COMMANDS                         //
  /////////////////////////////////////////////////////////////////////

  static void getStatistics(float &_workingTemperature, float &_statisticsTemperature, int &_statisticsTemperatureCount){
    _workingTemperature = workingTemperature;
    33ca:	00 91 fc 01 	lds	r16, 0x01FC
    33ce:	f0 90 fd 01 	lds	r15, 0x01FD
    33d2:	e0 90 fe 01 	lds	r14, 0x01FE
    33d6:	d0 90 ff 01 	lds	r13, 0x01FF

    if (statisticsTemperatureCount != 0){
    33da:	c0 91 04 02 	lds	r28, 0x0204
    33de:	d0 91 05 02 	lds	r29, 0x0205
    33e2:	20 97       	sbiw	r28, 0x00	; 0
    33e4:	29 f4       	brne	.+10     	; 0x33f0 <_ZL21sendTemperatureStatusv+0x3a>
    33e6:	a0 2e       	mov	r10, r16
    33e8:	bf 2c       	mov	r11, r15
    33ea:	ce 2c       	mov	r12, r14
    33ec:	1d 2d       	mov	r17, r13
    33ee:	16 c0       	rjmp	.+44     	; 0x341c <_ZL21sendTemperatureStatusv+0x66>
      _statisticsTemperature = statisticsTemperatureSumm/statisticsTemperatureCount;
    33f0:	be 01       	movw	r22, r28
    33f2:	88 27       	eor	r24, r24
    33f4:	77 fd       	sbrc	r23, 7
    33f6:	80 95       	com	r24
    33f8:	98 2f       	mov	r25, r24
    33fa:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <__floatsisf>
    33fe:	9b 01       	movw	r18, r22
    3400:	ac 01       	movw	r20, r24
    3402:	60 91 00 02 	lds	r22, 0x0200
    3406:	70 91 01 02 	lds	r23, 0x0201
    340a:	80 91 02 02 	lds	r24, 0x0202
    340e:	90 91 03 02 	lds	r25, 0x0203
    3412:	0e 94 d8 3b 	call	0x77b0	; 0x77b0 <__divsf3>
    3416:	5b 01       	movw	r10, r22
    3418:	c8 2e       	mov	r12, r24
    341a:	19 2f       	mov	r17, r25
    341c:	8b e3       	ldi	r24, 0x3B	; 59
    341e:	92 e0       	ldi	r25, 0x02	; 2
    3420:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    3424:	88 e5       	ldi	r24, 0x58	; 88
    3426:	94 e0       	ldi	r25, 0x04	; 4
    3428:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    342c:	20 2f       	mov	r18, r16
    342e:	3f 2d       	mov	r19, r15
    3430:	4e 2d       	mov	r20, r14
    3432:	5d 2d       	mov	r21, r13
    3434:	b9 01       	movw	r22, r18
    3436:	ca 01       	movw	r24, r20
    3438:	0e 94 57 17 	call	0x2eae	; 0x2eae <_ZL8sendDataf>
    343c:	80 e5       	ldi	r24, 0x50	; 80
    343e:	94 e0       	ldi	r25, 0x04	; 4
    3440:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    3444:	4c 2d       	mov	r20, r12
    3446:	51 2f       	mov	r21, r17
    3448:	b5 01       	movw	r22, r10
    344a:	ca 01       	movw	r24, r20
    344c:	0e 94 57 17 	call	0x2eae	; 0x2eae <_ZL8sendDataf>
    3450:	87 e4       	ldi	r24, 0x47	; 71
    3452:	94 e0       	ldi	r25, 0x04	; 4
    3454:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    3458:	ce 01       	movw	r24, r28
    345a:	0e 94 04 17 	call	0x2e08	; 0x2e08 <_ZL8sendDatai>
    345e:	8f e3       	ldi	r24, 0x3F	; 63
    3460:	94 e0       	ldi	r25, 0x04	; 4
    3462:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    3466:	60 e0       	ldi	r22, 0x00	; 0
    3468:	70 e0       	ldi	r23, 0x00	; 0
    346a:	80 ed       	ldi	r24, 0xD0	; 208
    346c:	91 e4       	ldi	r25, 0x41	; 65
    346e:	0e 94 57 17 	call	0x2eae	; 0x2eae <_ZL8sendDataf>
    3472:	86 e2       	ldi	r24, 0x26	; 38
    3474:	94 e0       	ldi	r25, 0x04	; 4
    3476:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    347a:	60 e0       	ldi	r22, 0x00	; 0
    347c:	70 e0       	ldi	r23, 0x00	; 0
    347e:	80 e4       	ldi	r24, 0x40	; 64
    3480:	90 e4       	ldi	r25, 0x40	; 64
    3482:	0e 94 57 17 	call	0x2eae	; 0x2eae <_ZL8sendDataf>
    3486:	86 e3       	ldi	r24, 0x36	; 54
    3488:	94 e0       	ldi	r25, 0x04	; 4
    348a:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    348e:	60 e0       	ldi	r22, 0x00	; 0
    3490:	70 e0       	ldi	r23, 0x00	; 0
    3492:	80 eb       	ldi	r24, 0xB0	; 176
    3494:	91 e4       	ldi	r25, 0x41	; 65
    3496:	0e 94 57 17 	call	0x2eae	; 0x2eae <_ZL8sendDataf>
    349a:	86 e2       	ldi	r24, 0x26	; 38
    349c:	94 e0       	ldi	r25, 0x04	; 4
    349e:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    34a2:	60 e0       	ldi	r22, 0x00	; 0
    34a4:	70 e0       	ldi	r23, 0x00	; 0
    34a6:	80 ec       	ldi	r24, 0xC0	; 192
    34a8:	90 e4       	ldi	r25, 0x40	; 64
    34aa:	0e 94 57 17 	call	0x2eae	; 0x2eae <_ZL8sendDataf>
    34ae:	8a e2       	ldi	r24, 0x2A	; 42
    34b0:	94 e0       	ldi	r25, 0x04	; 4
    34b2:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    34b6:	60 e0       	ldi	r22, 0x00	; 0
    34b8:	70 e0       	ldi	r23, 0x00	; 0
    34ba:	8c e0       	ldi	r24, 0x0C	; 12
    34bc:	92 e4       	ldi	r25, 0x42	; 66
    34be:	0e 94 57 17 	call	0x2eae	; 0x2eae <_ZL8sendDataf>
    34c2:	8a e7       	ldi	r24, 0x7A	; 122
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    34ca:	df 91       	pop	r29
    34cc:	cf 91       	pop	r28
    34ce:	1f 91       	pop	r17
    34d0:	0f 91       	pop	r16
    34d2:	ff 90       	pop	r15
    34d4:	ef 90       	pop	r14
    34d6:	df 90       	pop	r13
    34d8:	cf 90       	pop	r12
    34da:	bf 90       	pop	r11
    34dc:	af 90       	pop	r10
    34de:	08 95       	ret

000034e0 <_ZL16printSendFullLoghhh>:
    34e0:	2f 92       	push	r2
    34e2:	3f 92       	push	r3
    34e4:	4f 92       	push	r4
    34e6:	5f 92       	push	r5
    34e8:	6f 92       	push	r6
    34ea:	7f 92       	push	r7
    34ec:	8f 92       	push	r8
    34ee:	9f 92       	push	r9
    34f0:	af 92       	push	r10
    34f2:	bf 92       	push	r11
    34f4:	cf 92       	push	r12
    34f6:	df 92       	push	r13
    34f8:	ef 92       	push	r14
    34fa:	ff 92       	push	r15
    34fc:	0f 93       	push	r16
    34fe:	1f 93       	push	r17
    3500:	df 93       	push	r29
    3502:	cf 93       	push	r28
    3504:	cd b7       	in	r28, 0x3d	; 61
    3506:	de b7       	in	r29, 0x3e	; 62
    3508:	af 97       	sbiw	r28, 0x2f	; 47
    350a:	0f b6       	in	r0, 0x3f	; 63
    350c:	f8 94       	cli
    350e:	de bf       	out	0x3e, r29	; 62
    3510:	0f be       	out	0x3f, r0	; 63
    3512:	cd bf       	out	0x3d, r28	; 61
    3514:	8b a7       	std	Y+43, r24	; 0x2b
    3516:	6c a7       	std	Y+44, r22	; 0x2c
    3518:	4d a7       	std	Y+45, r20	; 0x2d
    351a:	88 e6       	ldi	r24, 0x68	; 104
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	60 e0       	ldi	r22, 0x00	; 0
    3520:	70 e0       	ldi	r23, 0x00	; 0
    3522:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    3526:	21 e0       	ldi	r18, 0x01	; 1
    3528:	2a a7       	std	Y+42, r18	; 0x2a
    352a:	cc 24       	eor	r12, r12
    352c:	dd 24       	eor	r13, r13
    352e:	aa 24       	eor	r10, r10
    3530:	bb 24       	eor	r11, r11
    3532:	ce 01       	movw	r24, r28
    3534:	0b 96       	adiw	r24, 0x0b	; 11
    3536:	9f a7       	std	Y+47, r25	; 0x2f
    3538:	8e a7       	std	Y+46, r24	; 0x2e
    353a:	1e 01       	movw	r2, r28
    353c:	08 94       	sec
    353e:	21 1c       	adc	r2, r1
    3540:	31 1c       	adc	r3, r1
    3542:	b5 e1       	ldi	r27, 0x15	; 21
    3544:	4b 2e       	mov	r4, r27
    3546:	51 2c       	mov	r5, r1
    3548:	4c 0e       	add	r4, r28
    354a:	5d 1e       	adc	r5, r29
    354c:	ac e1       	ldi	r26, 0x1C	; 28
    354e:	6a 2e       	mov	r6, r26
    3550:	71 2c       	mov	r7, r1
    3552:	6c 0e       	add	r6, r28
    3554:	7d 1e       	adc	r7, r29
    3556:	f3 e2       	ldi	r31, 0x23	; 35
    3558:	8f 2e       	mov	r8, r31
    355a:	91 2c       	mov	r9, r1
    355c:	8c 0e       	add	r8, r28
    355e:	9d 1e       	adc	r9, r29
    3560:	6b c0       	rjmp	.+214    	; 0x3638 <_ZL16printSendFullLoghhh+0x158>
  static boolean isLogOverflow(){
    return bootRecord.boolPreferencies.isLogOverflow;
  }

  static word getLogRecordsCount(){
    if (bootRecord.boolPreferencies.isLogOverflow){
    3562:	44 23       	and	r20, r20
    3564:	19 f0       	breq	.+6      	; 0x356c <_ZL16printSendFullLoghhh+0x8c>
    3566:	8c e2       	ldi	r24, 0x2C	; 44
    3568:	93 e0       	ldi	r25, 0x03	; 3
    356a:	0a c0       	rjmp	.+20     	; 0x3580 <_ZL16printSendFullLoghhh+0xa0>
      return LOG_CAPACITY; 
    } 
    else {
      return (bootRecord.nextLogRecordAddress - sizeof(BootRecord))/sizeof(LogRecord);
    356c:	80 91 cb 01 	lds	r24, 0x01CB
    3570:	90 91 cc 01 	lds	r25, 0x01CC
    3574:	80 97       	sbiw	r24, 0x20	; 32
    3576:	65 e0       	ldi	r22, 0x05	; 5
    3578:	70 e0       	ldi	r23, 0x00	; 0
    357a:	0e 94 a9 3d 	call	0x7b52	; 0x7b52 <__udivmodhi4>
    357e:	cb 01       	movw	r24, r22
    }
  }
  static boolean getLogRecordByIndex(word index, LogRecord &logRecord){
    if (index >= getLogRecordsCount()){
    3580:	c8 16       	cp	r12, r24
    3582:	d9 06       	cpc	r13, r25
    3584:	40 f5       	brcc	.+80     	; 0x35d6 <_ZL16printSendFullLoghhh+0xf6>
      return false;
    }

    word logRecordOffset = 0;
    if (bootRecord.boolPreferencies.isLogOverflow){
    3586:	44 23       	and	r20, r20
    3588:	19 f4       	brne	.+6      	; 0x3590 <_ZL16printSendFullLoghhh+0xb0>
    358a:	80 e0       	ldi	r24, 0x00	; 0
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	05 c0       	rjmp	.+10     	; 0x359a <_ZL16printSendFullLoghhh+0xba>
      logRecordOffset = bootRecord.nextLogRecordAddress - sizeof(BootRecord);
    3590:	80 91 cb 01 	lds	r24, 0x01CB
    3594:	90 91 cc 01 	lds	r25, 0x01CC
    3598:	80 97       	sbiw	r24, 0x20	; 32
    }
    //Serial.print("logRecordOffset"); Serial.println(logRecordOffset);
    logRecordOffset += index * sizeof(LogRecord);
    359a:	8a 0d       	add	r24, r10
    359c:	9b 1d       	adc	r25, r11

    //Serial.print("logRecordOffset"); Serial.println(logRecordOffset);
    if (logRecordOffset >= LOG_RECORD_OVERFLOW_OFFSET){
    359e:	ef e0       	ldi	r30, 0x0F	; 15
    35a0:	8c 3d       	cpi	r24, 0xDC	; 220
    35a2:	9e 07       	cpc	r25, r30
    35a4:	10 f0       	brcs	.+4      	; 0x35aa <_ZL16printSendFullLoghhh+0xca>
      logRecordOffset -= LOG_RECORD_OVERFLOW_OFFSET;
    35a6:	8c 5d       	subi	r24, 0xDC	; 220
    35a8:	9f 40       	sbci	r25, 0x0F	; 15
    }
    //Serial.print("logRecordOffset"); Serial.println(logRecordOffset);
    word address = sizeof(BootRecord) + logRecordOffset; 
    35aa:	e0 e2       	ldi	r30, 0x20	; 32
    35ac:	ee 2e       	mov	r14, r30
    35ae:	f1 2c       	mov	r15, r1
    35b0:	e8 0e       	add	r14, r24
    35b2:	f9 1e       	adc	r15, r25
    35b4:	8e 01       	movw	r16, r28
    35b6:	0a 5f       	subi	r16, 0xFA	; 250
    35b8:	1f 4f       	sbci	r17, 0xFF	; 255
      byte value =  read(address + c);
    35ba:	c7 01       	movw	r24, r14
    35bc:	0e 94 00 06 	call	0xc00	; 0xc00 <_ZN10GB_Storage4readEj>
      ((byte*)data)[c] = value;
    35c0:	f8 01       	movw	r30, r16
    35c2:	81 93       	st	Z+, r24
    35c4:	8f 01       	movw	r16, r30
    35c6:	08 94       	sec
    35c8:	e1 1c       	adc	r14, r1
    35ca:	f1 1c       	adc	r15, r1
      write(address + c, value);
    }
  }

  static void read(word address, void *data, const byte sizeofData) {
    for (word c = 0; c < sizeofData; c++){
    35cc:	8e a5       	ldd	r24, Y+46	; 0x2e
    35ce:	9f a5       	ldd	r25, Y+47	; 0x2f
    35d0:	e8 17       	cp	r30, r24
    35d2:	f9 07       	cpc	r31, r25
    35d4:	91 f7       	brne	.-28     	; 0x35ba <_ZL16printSendFullLoghhh+0xda>
  }  

  static LogRecord getLogRecordByIndex(int index){
    LogRecord logRecord;
    GB_StorageHelper::getLogRecordByIndex(index, logRecord);
    return logRecord;
    35d6:	de 01       	movw	r26, r28
    35d8:	50 96       	adiw	r26, 0x10	; 16
    35da:	fe 01       	movw	r30, r28
    35dc:	36 96       	adiw	r30, 0x06	; 6
    35de:	85 e0       	ldi	r24, 0x05	; 5
    35e0:	01 90       	ld	r0, Z+
    35e2:	0d 92       	st	X+, r0
    35e4:	81 50       	subi	r24, 0x01	; 1
    35e6:	e1 f7       	brne	.-8      	; 0x35e0 <_ZL16printSendFullLoghhh+0x100>
    35e8:	de 01       	movw	r26, r28
    35ea:	1b 96       	adiw	r26, 0x0b	; 11
    35ec:	fe 01       	movw	r30, r28
    35ee:	70 96       	adiw	r30, 0x10	; 16
    35f0:	85 e0       	ldi	r24, 0x05	; 5
    35f2:	01 90       	ld	r0, Z+
    35f4:	0d 92       	st	X+, r0
    35f6:	81 50       	subi	r24, 0x01	; 1
    35f8:	e1 f7       	brne	.-8      	; 0x35f2 <_ZL16printSendFullLoghhh+0x112>
    35fa:	d1 01       	movw	r26, r2
    35fc:	fe 01       	movw	r30, r28
    35fe:	3b 96       	adiw	r30, 0x0b	; 11
    3600:	85 e0       	ldi	r24, 0x05	; 5
    3602:	01 90       	ld	r0, Z+
    3604:	0d 92       	st	X+, r0
    3606:	81 50       	subi	r24, 0x01	; 1
    3608:	e1 f7       	brne	.-8      	; 0x3602 <_ZL16printSendFullLoghhh+0x122>
    360a:	9b a5       	ldd	r25, Y+43	; 0x2b
    360c:	99 23       	and	r25, r25
    360e:	d1 f5       	brne	.+116    	; 0x3684 <_ZL16printSendFullLoghhh+0x1a4>
    3610:	8d 81       	ldd	r24, Y+5	; 0x05
    3612:	80 7c       	andi	r24, 0xC0	; 192
    3614:	b9 f5       	brne	.+110    	; 0x3684 <_ZL16printSendFullLoghhh+0x1a4>
    3616:	09 c0       	rjmp	.+18     	; 0x362a <_ZL16printSendFullLoghhh+0x14a>
    3618:	8d 81       	ldd	r24, Y+5	; 0x05
    361a:	80 7c       	andi	r24, 0xC0	; 192
    361c:	80 34       	cpi	r24, 0x40	; 64
    361e:	a9 f5       	brne	.+106    	; 0x368a <_ZL16printSendFullLoghhh+0x1aa>
    3620:	04 c0       	rjmp	.+8      	; 0x362a <_ZL16printSendFullLoghhh+0x14a>
    3622:	8d 81       	ldd	r24, Y+5	; 0x05
    3624:	80 7c       	andi	r24, 0xC0	; 192
    3626:	80 3c       	cpi	r24, 0xC0	; 192
    3628:	99 f5       	brne	.+102    	; 0x3690 <_ZL16printSendFullLoghhh+0x1b0>
    362a:	08 94       	sec
    362c:	c1 1c       	adc	r12, r1
    362e:	d1 1c       	adc	r13, r1
    3630:	e5 e0       	ldi	r30, 0x05	; 5
    3632:	f0 e0       	ldi	r31, 0x00	; 0
    3634:	ae 0e       	add	r10, r30
    3636:	bf 1e       	adc	r11, r31
  static boolean isLogOverflow(){
    return bootRecord.boolPreferencies.isLogOverflow;
  }

  static word getLogRecordsCount(){
    if (bootRecord.boolPreferencies.isLogOverflow){
    3638:	80 91 cd 01 	lds	r24, 0x01CD
    363c:	48 2f       	mov	r20, r24
    363e:	41 70       	andi	r20, 0x01	; 1
    3640:	80 ff       	sbrs	r24, 0
    3642:	03 c0       	rjmp	.+6      	; 0x364a <_ZL16printSendFullLoghhh+0x16a>
    3644:	8c e2       	ldi	r24, 0x2C	; 44
    3646:	93 e0       	ldi	r25, 0x03	; 3
    3648:	0a c0       	rjmp	.+20     	; 0x365e <_ZL16printSendFullLoghhh+0x17e>
      return LOG_CAPACITY; 
    } 
    else {
      return (bootRecord.nextLogRecordAddress - sizeof(BootRecord))/sizeof(LogRecord);
    364a:	80 91 cb 01 	lds	r24, 0x01CB
    364e:	90 91 cc 01 	lds	r25, 0x01CC
    3652:	80 97       	sbiw	r24, 0x20	; 32
    3654:	65 e0       	ldi	r22, 0x05	; 5
    3656:	70 e0       	ldi	r23, 0x00	; 0
    3658:	0e 94 a9 3d 	call	0x7b52	; 0x7b52 <__udivmodhi4>
    365c:	cb 01       	movw	r24, r22
    365e:	c8 16       	cp	r12, r24
    3660:	d9 06       	cpc	r13, r25
    3662:	0c f4       	brge	.+2      	; 0x3666 <_ZL16printSendFullLoghhh+0x186>
    3664:	7e cf       	rjmp	.-260    	; 0x3562 <_ZL16printSendFullLoghhh+0x82>
    3666:	88 e6       	ldi	r24, 0x68	; 104
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	61 e0       	ldi	r22, 0x01	; 1
    366c:	70 e0       	ldi	r23, 0x00	; 0
    366e:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    3672:	fa a5       	ldd	r31, Y+42	; 0x2a
    3674:	ff 23       	and	r31, r31
    3676:	09 f4       	brne	.+2      	; 0x367a <_ZL16printSendFullLoghhh+0x19a>
    3678:	78 c0       	rjmp	.+240    	; 0x376a <_ZL16printSendFullLoghhh+0x28a>
    367a:	8d ec       	ldi	r24, 0xCD	; 205
    367c:	94 e0       	ldi	r25, 0x04	; 4
    367e:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    3682:	73 c0       	rjmp	.+230    	; 0x376a <_ZL16printSendFullLoghhh+0x28a>
    3684:	2c a5       	ldd	r18, Y+44	; 0x2c
    3686:	22 23       	and	r18, r18
    3688:	39 f2       	breq	.-114    	; 0x3618 <_ZL16printSendFullLoghhh+0x138>
    368a:	8d a5       	ldd	r24, Y+45	; 0x2d
    368c:	88 23       	and	r24, r24
    368e:	49 f2       	breq	.-110    	; 0x3622 <_ZL16printSendFullLoghhh+0x142>
    3690:	8e e6       	ldi	r24, 0x6E	; 110
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	60 e0       	ldi	r22, 0x00	; 0
    3696:	70 e0       	ldi	r23, 0x00	; 0
    3698:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    369c:	81 e7       	ldi	r24, 0x71	; 113
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	60 e0       	ldi	r22, 0x00	; 0
    36a2:	70 e0       	ldi	r23, 0x00	; 0
    36a4:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    36a8:	c6 01       	movw	r24, r12
    36aa:	01 96       	adiw	r24, 0x01	; 1
    36ac:	0e 94 04 17 	call	0x2e08	; 0x2e08 <_ZL8sendDatai>
    36b0:	81 e7       	ldi	r24, 0x71	; 113
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	61 e0       	ldi	r22, 0x01	; 1
    36b6:	70 e0       	ldi	r23, 0x00	; 0
    36b8:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    36bc:	81 e7       	ldi	r24, 0x71	; 113
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	60 e0       	ldi	r22, 0x00	; 0
    36c2:	70 e0       	ldi	r23, 0x00	; 0
    36c4:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    36c8:	49 81       	ldd	r20, Y+1	; 0x01
    36ca:	5a 81       	ldd	r21, Y+2	; 0x02
    36cc:	6b 81       	ldd	r22, Y+3	; 0x03
    36ce:	7c 81       	ldd	r23, Y+4	; 0x04
    36d0:	c2 01       	movw	r24, r4
    36d2:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <_ZN13GB_PrintDirty13getTimeStringEm>
    36d6:	c2 01       	movw	r24, r4
    36d8:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <_ZL8sendDataRK6String>
    36dc:	c2 01       	movw	r24, r4
    36de:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
    36e2:	81 e7       	ldi	r24, 0x71	; 113
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	61 e0       	ldi	r22, 0x01	; 1
    36e8:	70 e0       	ldi	r23, 0x00	; 0
    36ea:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    36ee:	81 e7       	ldi	r24, 0x71	; 113
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	60 e0       	ldi	r22, 0x00	; 0
    36f4:	70 e0       	ldi	r23, 0x00	; 0
    36f6:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    36fa:	c3 01       	movw	r24, r6
    36fc:	6d 81       	ldd	r22, Y+5	; 0x05
    36fe:	41 e0       	ldi	r20, 0x01	; 1
    3700:	0e 94 87 06 	call	0xd0e	; 0xd0e <_ZN13GB_PrintDirty6getHEXEhh>
    3704:	c3 01       	movw	r24, r6
    3706:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <_ZL8sendDataRK6String>
    370a:	c3 01       	movw	r24, r6
    370c:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
    3710:	81 e7       	ldi	r24, 0x71	; 113
    3712:	90 e0       	ldi	r25, 0x00	; 0
    3714:	61 e0       	ldi	r22, 0x01	; 1
    3716:	70 e0       	ldi	r23, 0x00	; 0
    3718:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    371c:	81 e7       	ldi	r24, 0x71	; 113
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	60 e0       	ldi	r22, 0x00	; 0
    3722:	70 e0       	ldi	r23, 0x00	; 0
    3724:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    3728:	c1 01       	movw	r24, r2
    372a:	0e 94 13 05 	call	0xa26	; 0xa26 <_ZN9GB_Logger23getLogRecordDescriptionER9LogRecord>
    372e:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    3732:	c4 01       	movw	r24, r8
    3734:	b1 01       	movw	r22, r2
    3736:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_ZN9GB_Logger18getLogRecordSuffixERK9LogRecord>
    373a:	c4 01       	movw	r24, r8
    373c:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <_ZL8sendDataRK6String>
    3740:	c4 01       	movw	r24, r8
    3742:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
    3746:	81 e7       	ldi	r24, 0x71	; 113
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	61 e0       	ldi	r22, 0x01	; 1
    374c:	70 e0       	ldi	r23, 0x00	; 0
    374e:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    3752:	8e e6       	ldi	r24, 0x6E	; 110
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	61 e0       	ldi	r22, 0x01	; 1
    3758:	70 e0       	ldi	r23, 0x00	; 0
    375a:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    375e:	80 91 4d 01 	lds	r24, 0x014D
    3762:	88 23       	and	r24, r24
    3764:	11 f4       	brne	.+4      	; 0x376a <_ZL16printSendFullLoghhh+0x28a>
    3766:	1a a6       	std	Y+42, r1	; 0x2a
    3768:	60 cf       	rjmp	.-320    	; 0x362a <_ZL16printSendFullLoghhh+0x14a>
    376a:	af 96       	adiw	r28, 0x2f	; 47
    376c:	0f b6       	in	r0, 0x3f	; 63
    376e:	f8 94       	cli
    3770:	de bf       	out	0x3e, r29	; 62
    3772:	0f be       	out	0x3f, r0	; 63
    3774:	cd bf       	out	0x3d, r28	; 61
    3776:	cf 91       	pop	r28
    3778:	df 91       	pop	r29
    377a:	1f 91       	pop	r17
    377c:	0f 91       	pop	r16
    377e:	ff 90       	pop	r15
    3780:	ef 90       	pop	r14
    3782:	df 90       	pop	r13
    3784:	cf 90       	pop	r12
    3786:	bf 90       	pop	r11
    3788:	af 90       	pop	r10
    378a:	9f 90       	pop	r9
    378c:	8f 90       	pop	r8
    378e:	7f 90       	pop	r7
    3790:	6f 90       	pop	r6
    3792:	5f 90       	pop	r5
    3794:	4f 90       	pop	r4
    3796:	3f 90       	pop	r3
    3798:	2f 90       	pop	r2
    379a:	08 95       	ret

0000379c <_ZL14sendBootStatusv>:
    379c:	8c ec       	ldi	r24, 0xCC	; 204
    379e:	93 e0       	ldi	r25, 0x03	; 3
    37a0:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    37a4:	60 91 c7 01 	lds	r22, 0x01C7
    37a8:	70 91 c8 01 	lds	r23, 0x01C8
    37ac:	80 91 c9 01 	lds	r24, 0x01C9
    37b0:	90 91 ca 01 	lds	r25, 0x01CA
    37b4:	0e 94 32 17 	call	0x2e64	; 0x2e64 <_ZL8sendDatam>
    37b8:	8a eb       	ldi	r24, 0xBA	; 186
    37ba:	93 e0       	ldi	r25, 0x03	; 3
    37bc:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    37c0:	60 91 c3 01 	lds	r22, 0x01C3
    37c4:	70 91 c4 01 	lds	r23, 0x01C4
    37c8:	80 91 c5 01 	lds	r24, 0x01C5
    37cc:	90 91 c6 01 	lds	r25, 0x01C6
    37d0:	0e 94 32 17 	call	0x2e64	; 0x2e64 <_ZL8sendDatam>
    37d4:	80 eb       	ldi	r24, 0xB0	; 176
    37d6:	93 e0       	ldi	r25, 0x03	; 3
    37d8:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    37dc:	80 91 cd 01 	lds	r24, 0x01CD
    37e0:	86 95       	lsr	r24
    37e2:	83 70       	andi	r24, 0x03	; 3
    37e4:	19 f0       	breq	.+6      	; 0x37ec <_ZL14sendBootStatusv+0x50>
    37e6:	82 e0       	ldi	r24, 0x02	; 2
    37e8:	91 e0       	ldi	r25, 0x01	; 1
    37ea:	02 c0       	rjmp	.+4      	; 0x37f0 <_ZL14sendBootStatusv+0x54>
    37ec:	8b e0       	ldi	r24, 0x0B	; 11
    37ee:	91 e0       	ldi	r25, 0x01	; 1
    37f0:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    37f4:	85 ea       	ldi	r24, 0xA5	; 165
    37f6:	93 e0       	ldi	r25, 0x03	; 3
    37f8:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
  static boolean isLogOverflow(){
    return bootRecord.boolPreferencies.isLogOverflow;
  }

  static word getLogRecordsCount(){
    if (bootRecord.boolPreferencies.isLogOverflow){
    37fc:	80 91 cd 01 	lds	r24, 0x01CD
    3800:	80 ff       	sbrs	r24, 0
    3802:	03 c0       	rjmp	.+6      	; 0x380a <_ZL14sendBootStatusv+0x6e>
    3804:	8c e2       	ldi	r24, 0x2C	; 44
    3806:	93 e0       	ldi	r25, 0x03	; 3
    3808:	0a c0       	rjmp	.+20     	; 0x381e <_ZL14sendBootStatusv+0x82>
      return LOG_CAPACITY; 
    } 
    else {
      return (bootRecord.nextLogRecordAddress - sizeof(BootRecord))/sizeof(LogRecord);
    380a:	80 91 cb 01 	lds	r24, 0x01CB
    380e:	90 91 cc 01 	lds	r25, 0x01CC
    3812:	80 97       	sbiw	r24, 0x20	; 32
    3814:	65 e0       	ldi	r22, 0x05	; 5
    3816:	70 e0       	ldi	r23, 0x00	; 0
    3818:	0e 94 a9 3d 	call	0x7b52	; 0x7b52 <__udivmodhi4>
    381c:	cb 01       	movw	r24, r22
    381e:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <_ZL8sendDataj>
    3822:	8f e2       	ldi	r24, 0x2F	; 47
    3824:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <_ZL8sendDatac>
    3828:	8c e2       	ldi	r24, 0x2C	; 44
    382a:	93 e0       	ldi	r25, 0x03	; 3
    382c:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <_ZL8sendDataj>
    3830:	80 91 cd 01 	lds	r24, 0x01CD
    3834:	80 ff       	sbrs	r24, 0
    3836:	04 c0       	rjmp	.+8      	; 0x3840 <_ZL14sendBootStatusv+0xa4>
    3838:	8a e9       	ldi	r24, 0x9A	; 154
    383a:	93 e0       	ldi	r25, 0x03	; 3
    383c:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    3840:	8a e7       	ldi	r24, 0x7A	; 122
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    3848:	08 95       	ret

0000384a <_ZL19printSendPinsStatusv>:
    384a:	2f 92       	push	r2
    384c:	3f 92       	push	r3
    384e:	4f 92       	push	r4
    3850:	5f 92       	push	r5
    3852:	6f 92       	push	r6
    3854:	7f 92       	push	r7
    3856:	8f 92       	push	r8
    3858:	9f 92       	push	r9
    385a:	af 92       	push	r10
    385c:	bf 92       	push	r11
    385e:	cf 92       	push	r12
    3860:	df 92       	push	r13
    3862:	ef 92       	push	r14
    3864:	ff 92       	push	r15
    3866:	0f 93       	push	r16
    3868:	1f 93       	push	r17
    386a:	df 93       	push	r29
    386c:	cf 93       	push	r28
    386e:	cd b7       	in	r28, 0x3d	; 61
    3870:	de b7       	in	r29, 0x3e	; 62
    3872:	cd 54       	subi	r28, 0x4D	; 77
    3874:	d0 40       	sbci	r29, 0x00	; 0
    3876:	0f b6       	in	r0, 0x3f	; 63
    3878:	f8 94       	cli
    387a:	de bf       	out	0x3e, r29	; 62
    387c:	0f be       	out	0x3f, r0	; 63
    387e:	cd bf       	out	0x3d, r28	; 61
    3880:	8e 01       	movw	r16, r28
    3882:	0f 5f       	subi	r16, 0xFF	; 255
    3884:	1f 4f       	sbci	r17, 0xFF	; 255
    3886:	c8 01       	movw	r24, r16
    3888:	60 e0       	ldi	r22, 0x00	; 0
    388a:	70 e0       	ldi	r23, 0x00	; 0
    388c:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZL16EEPROMStringLoadj>
    3890:	c8 01       	movw	r24, r16
    3892:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <_ZL8sendDataRK6String>
    3896:	c8 01       	movw	r24, r16
    3898:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
    389c:	8a e7       	ldi	r24, 0x7A	; 122
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    38a4:	00 e0       	ldi	r16, 0x00	; 0
    38a6:	10 e0       	ldi	r17, 0x00	; 0
    38a8:	52 ef       	ldi	r21, 0xF2	; 242
    38aa:	c5 2e       	mov	r12, r21
    38ac:	5f ef       	ldi	r21, 0xFF	; 255
    38ae:	d5 2e       	mov	r13, r21
    38b0:	49 e3       	ldi	r20, 0x39	; 57
    38b2:	24 2e       	mov	r2, r20
    38b4:	31 2c       	mov	r3, r1
    38b6:	2c 0e       	add	r2, r28
    38b8:	3d 1e       	adc	r3, r29
    38ba:	36 e1       	ldi	r19, 0x16	; 22
    38bc:	43 2e       	mov	r4, r19
    38be:	51 2c       	mov	r5, r1
    38c0:	4c 0e       	add	r4, r28
    38c2:	5d 1e       	adc	r5, r29
    38c4:	2d e1       	ldi	r18, 0x1D	; 29
    38c6:	62 2e       	mov	r6, r18
    38c8:	71 2c       	mov	r7, r1
    38ca:	6c 0e       	add	r6, r28
    38cc:	7d 1e       	adc	r7, r29
    38ce:	94 e2       	ldi	r25, 0x24	; 36
    38d0:	89 2e       	mov	r8, r25
    38d2:	91 2c       	mov	r9, r1
    38d4:	8c 0e       	add	r8, r28
    38d6:	9d 1e       	adc	r9, r29
    38d8:	8f e0       	ldi	r24, 0x0F	; 15
    38da:	a8 2e       	mov	r10, r24
    38dc:	b1 2c       	mov	r11, r1
    38de:	ac 0e       	add	r10, r28
    38e0:	bd 1e       	adc	r11, r29
    38e2:	80 e2       	ldi	r24, 0x20	; 32
    38e4:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <_ZL8sendDatac>
    38e8:	0e 30       	cpi	r16, 0x0E	; 14
    38ea:	11 05       	cpc	r17, r1
    38ec:	3c f0       	brlt	.+14     	; 0x38fc <_ZL19printSendPinsStatusv+0xb2>
    38ee:	81 e4       	ldi	r24, 0x41	; 65
    38f0:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <_ZL8sendDatac>
    38f4:	c6 01       	movw	r24, r12
    38f6:	0e 94 04 17 	call	0x2e08	; 0x2e08 <_ZL8sendDatai>
    38fa:	0e c0       	rjmp	.+28     	; 0x3918 <_ZL19printSendPinsStatusv+0xce>
    38fc:	ce 01       	movw	r24, r28
    38fe:	08 96       	adiw	r24, 0x08	; 8
    3900:	b8 01       	movw	r22, r16
    3902:	42 e0       	ldi	r20, 0x02	; 2
    3904:	0e 94 08 0c 	call	0x1810	; 0x1810 <_ZN13GB_PrintDirty20getFixedDigitsStringEih>
    3908:	ce 01       	movw	r24, r28
    390a:	08 96       	adiw	r24, 0x08	; 8
    390c:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <_ZL8sendDataRK6String>
    3910:	ce 01       	movw	r24, r28
    3912:	08 96       	adiw	r24, 0x08	; 8
    3914:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
    3918:	8d e7       	ldi	r24, 0x7D	; 125
    391a:	94 e0       	ldi	r25, 0x04	; 4
    391c:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    3920:	08 30       	cpi	r16, 0x08	; 8
    3922:	11 05       	cpc	r17, r1
    3924:	f4 f4       	brge	.+60     	; 0x3962 <_ZL19printSendPinsStatusv+0x118>
    3926:	8a b1       	in	r24, 0x0a	; 10
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	00 2e       	mov	r0, r16
    392c:	02 c0       	rjmp	.+4      	; 0x3932 <_ZL19printSendPinsStatusv+0xe8>
    392e:	95 95       	asr	r25
    3930:	87 95       	ror	r24
    3932:	0a 94       	dec	r0
    3934:	e2 f7       	brpl	.-8      	; 0x392e <_ZL19printSendPinsStatusv+0xe4>
    3936:	38 2f       	mov	r19, r24
    3938:	31 70       	andi	r19, 0x01	; 1
    393a:	8b b1       	in	r24, 0x0b	; 11
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	00 2e       	mov	r0, r16
    3940:	02 c0       	rjmp	.+4      	; 0x3946 <_ZL19printSendPinsStatusv+0xfc>
    3942:	95 95       	asr	r25
    3944:	87 95       	ror	r24
    3946:	0a 94       	dec	r0
    3948:	e2 f7       	brpl	.-8      	; 0x3942 <_ZL19printSendPinsStatusv+0xf8>
    394a:	ee 24       	eor	r14, r14
    394c:	e3 94       	inc	r14
    394e:	e8 22       	and	r14, r24
    3950:	89 b1       	in	r24, 0x09	; 9
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	00 2e       	mov	r0, r16
    3956:	02 c0       	rjmp	.+4      	; 0x395c <_ZL19printSendPinsStatusv+0x112>
    3958:	95 95       	asr	r25
    395a:	87 95       	ror	r24
    395c:	0a 94       	dec	r0
    395e:	e2 f7       	brpl	.-8      	; 0x3958 <_ZL19printSendPinsStatusv+0x10e>
    3960:	3a c0       	rjmp	.+116    	; 0x39d6 <_ZL19printSendPinsStatusv+0x18c>
    3962:	0e 30       	cpi	r16, 0x0E	; 14
    3964:	11 05       	cpc	r17, r1
    3966:	d4 f4       	brge	.+52     	; 0x399c <_ZL19printSendPinsStatusv+0x152>
    3968:	84 b1       	in	r24, 0x04	; 4
    396a:	98 01       	movw	r18, r16
    396c:	28 50       	subi	r18, 0x08	; 8
    396e:	30 40       	sbci	r19, 0x00	; 0
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	02 2e       	mov	r0, r18
    3974:	02 c0       	rjmp	.+4      	; 0x397a <_ZL19printSendPinsStatusv+0x130>
    3976:	95 95       	asr	r25
    3978:	87 95       	ror	r24
    397a:	0a 94       	dec	r0
    397c:	e2 f7       	brpl	.-8      	; 0x3976 <_ZL19printSendPinsStatusv+0x12c>
    397e:	38 2f       	mov	r19, r24
    3980:	31 70       	andi	r19, 0x01	; 1
    3982:	85 b1       	in	r24, 0x05	; 5
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	02 2e       	mov	r0, r18
    3988:	02 c0       	rjmp	.+4      	; 0x398e <_ZL19printSendPinsStatusv+0x144>
    398a:	95 95       	asr	r25
    398c:	87 95       	ror	r24
    398e:	0a 94       	dec	r0
    3990:	e2 f7       	brpl	.-8      	; 0x398a <_ZL19printSendPinsStatusv+0x140>
    3992:	ee 24       	eor	r14, r14
    3994:	e3 94       	inc	r14
    3996:	e8 22       	and	r14, r24
    3998:	83 b1       	in	r24, 0x03	; 3
    399a:	17 c0       	rjmp	.+46     	; 0x39ca <_ZL19printSendPinsStatusv+0x180>
    399c:	87 b1       	in	r24, 0x07	; 7
    399e:	2c 2d       	mov	r18, r12
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	0c 2c       	mov	r0, r12
    39a4:	02 c0       	rjmp	.+4      	; 0x39aa <_ZL19printSendPinsStatusv+0x160>
    39a6:	95 95       	asr	r25
    39a8:	87 95       	ror	r24
    39aa:	0a 94       	dec	r0
    39ac:	e2 f7       	brpl	.-8      	; 0x39a6 <_ZL19printSendPinsStatusv+0x15c>
    39ae:	38 2f       	mov	r19, r24
    39b0:	31 70       	andi	r19, 0x01	; 1
    39b2:	88 b1       	in	r24, 0x08	; 8
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	0c 2c       	mov	r0, r12
    39b8:	02 c0       	rjmp	.+4      	; 0x39be <_ZL19printSendPinsStatusv+0x174>
    39ba:	95 95       	asr	r25
    39bc:	87 95       	ror	r24
    39be:	0a 94       	dec	r0
    39c0:	e2 f7       	brpl	.-8      	; 0x39ba <_ZL19printSendPinsStatusv+0x170>
    39c2:	ee 24       	eor	r14, r14
    39c4:	e3 94       	inc	r14
    39c6:	e8 22       	and	r14, r24
    39c8:	86 b1       	in	r24, 0x06	; 6
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	02 c0       	rjmp	.+4      	; 0x39d2 <_ZL19printSendPinsStatusv+0x188>
    39ce:	95 95       	asr	r25
    39d0:	87 95       	ror	r24
    39d2:	2a 95       	dec	r18
    39d4:	e2 f7       	brpl	.-8      	; 0x39ce <_ZL19printSendPinsStatusv+0x184>
    39d6:	ff 24       	eor	r15, r15
    39d8:	f3 94       	inc	r15
    39da:	f8 22       	and	r15, r24
    39dc:	31 30       	cpi	r19, 0x01	; 1
    39de:	59 f4       	brne	.+22     	; 0x39f6 <_ZL19printSendPinsStatusv+0x1ac>
    39e0:	8a e7       	ldi	r24, 0x7A	; 122
    39e2:	94 e0       	ldi	r25, 0x04	; 4
    39e4:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    39e8:	8e 2d       	mov	r24, r14
    39ea:	90 e0       	ldi	r25, 0x00	; 0
    39ec:	0e 94 04 17 	call	0x2e08	; 0x2e08 <_ZL8sendDatai>
    39f0:	80 e7       	ldi	r24, 0x70	; 112
    39f2:	94 e0       	ldi	r25, 0x04	; 4
    39f4:	0a c0       	rjmp	.+20     	; 0x3a0a <_ZL19printSendPinsStatusv+0x1c0>
    39f6:	87 e6       	ldi	r24, 0x67	; 103
    39f8:	94 e0       	ldi	r25, 0x04	; 4
    39fa:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    39fe:	8f 2d       	mov	r24, r15
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	0e 94 04 17 	call	0x2e08	; 0x2e08 <_ZL8sendDatai>
    3a06:	83 e6       	ldi	r24, 0x63	; 99
    3a08:	94 e0       	ldi	r25, 0x04	; 4
    3a0a:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    3a0e:	08 30       	cpi	r16, 0x08	; 8
    3a10:	11 05       	cpc	r17, r1
    3a12:	09 f4       	brne	.+2      	; 0x3a16 <_ZL19printSendPinsStatusv+0x1cc>
    3a14:	54 c0       	rjmp	.+168    	; 0x3abe <_ZL19printSendPinsStatusv+0x274>
    3a16:	09 30       	cpi	r16, 0x09	; 9
    3a18:	11 05       	cpc	r17, r1
    3a1a:	9c f4       	brge	.+38     	; 0x3a42 <_ZL19printSendPinsStatusv+0x1f8>
    3a1c:	03 30       	cpi	r16, 0x03	; 3
    3a1e:	11 05       	cpc	r17, r1
    3a20:	81 f1       	breq	.+96     	; 0x3a82 <_ZL19printSendPinsStatusv+0x238>
    3a22:	04 30       	cpi	r16, 0x04	; 4
    3a24:	11 05       	cpc	r17, r1
    3a26:	2c f4       	brge	.+10     	; 0x3a32 <_ZL19printSendPinsStatusv+0x1e8>
    3a28:	02 30       	cpi	r16, 0x02	; 2
    3a2a:	11 05       	cpc	r17, r1
    3a2c:	08 f0       	brcs	.+2      	; 0x3a30 <_ZL19printSendPinsStatusv+0x1e6>
    3a2e:	8c c0       	rjmp	.+280    	; 0x3b48 <_ZL19printSendPinsStatusv+0x2fe>
    3a30:	1e c0       	rjmp	.+60     	; 0x3a6e <_ZL19printSendPinsStatusv+0x224>
    3a32:	04 30       	cpi	r16, 0x04	; 4
    3a34:	11 05       	cpc	r17, r1
    3a36:	79 f1       	breq	.+94     	; 0x3a96 <_ZL19printSendPinsStatusv+0x24c>
    3a38:	05 30       	cpi	r16, 0x05	; 5
    3a3a:	11 05       	cpc	r17, r1
    3a3c:	09 f0       	breq	.+2      	; 0x3a40 <_ZL19printSendPinsStatusv+0x1f6>
    3a3e:	84 c0       	rjmp	.+264    	; 0x3b48 <_ZL19printSendPinsStatusv+0x2fe>
    3a40:	34 c0       	rjmp	.+104    	; 0x3aaa <_ZL19printSendPinsStatusv+0x260>
    3a42:	0d 30       	cpi	r16, 0x0D	; 13
    3a44:	11 05       	cpc	r17, r1
    3a46:	09 f4       	brne	.+2      	; 0x3a4a <_ZL19printSendPinsStatusv+0x200>
    3a48:	5e c0       	rjmp	.+188    	; 0x3b06 <_ZL19printSendPinsStatusv+0x2bc>
    3a4a:	0e 30       	cpi	r16, 0x0E	; 14
    3a4c:	11 05       	cpc	r17, r1
    3a4e:	4c f4       	brge	.+18     	; 0x3a62 <_ZL19printSendPinsStatusv+0x218>
    3a50:	0b 30       	cpi	r16, 0x0B	; 11
    3a52:	11 05       	cpc	r17, r1
    3a54:	09 f4       	brne	.+2      	; 0x3a58 <_ZL19printSendPinsStatusv+0x20e>
    3a56:	40 c0       	rjmp	.+128    	; 0x3ad8 <_ZL19printSendPinsStatusv+0x28e>
    3a58:	0c 30       	cpi	r16, 0x0C	; 12
    3a5a:	11 05       	cpc	r17, r1
    3a5c:	09 f0       	breq	.+2      	; 0x3a60 <_ZL19printSendPinsStatusv+0x216>
    3a5e:	74 c0       	rjmp	.+232    	; 0x3b48 <_ZL19printSendPinsStatusv+0x2fe>
    3a60:	48 c0       	rjmp	.+144    	; 0x3af2 <_ZL19printSendPinsStatusv+0x2a8>
    3a62:	c8 01       	movw	r24, r16
    3a64:	42 97       	sbiw	r24, 0x12	; 18
    3a66:	02 97       	sbiw	r24, 0x02	; 2
    3a68:	08 f0       	brcs	.+2      	; 0x3a6c <_ZL19printSendPinsStatusv+0x222>
    3a6a:	6e c0       	rjmp	.+220    	; 0x3b48 <_ZL19printSendPinsStatusv+0x2fe>
    3a6c:	5c c0       	rjmp	.+184    	; 0x3b26 <_ZL19printSendPinsStatusv+0x2dc>
    3a6e:	c5 01       	movw	r24, r10
    3a70:	61 e1       	ldi	r22, 0x11	; 17
    3a72:	70 e0       	ldi	r23, 0x00	; 0
    3a74:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZL16EEPROMStringLoadj>
    3a78:	c5 01       	movw	r24, r10
    3a7a:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <_ZL8sendDataRK6String>
    3a7e:	c5 01       	movw	r24, r10
    3a80:	61 c0       	rjmp	.+194    	; 0x3b44 <_ZL19printSendPinsStatusv+0x2fa>
    3a82:	c2 01       	movw	r24, r4
    3a84:	67 e5       	ldi	r22, 0x57	; 87
    3a86:	70 e0       	ldi	r23, 0x00	; 0
    3a88:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZL16EEPROMStringLoadj>
    3a8c:	c2 01       	movw	r24, r4
    3a8e:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <_ZL8sendDataRK6String>
    3a92:	c2 01       	movw	r24, r4
    3a94:	57 c0       	rjmp	.+174    	; 0x3b44 <_ZL19printSendPinsStatusv+0x2fa>
    3a96:	c3 01       	movw	r24, r6
    3a98:	61 e7       	ldi	r22, 0x71	; 113
    3a9a:	70 e0       	ldi	r23, 0x00	; 0
    3a9c:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZL16EEPROMStringLoadj>
    3aa0:	c3 01       	movw	r24, r6
    3aa2:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <_ZL8sendDataRK6String>
    3aa6:	c3 01       	movw	r24, r6
    3aa8:	4d c0       	rjmp	.+154    	; 0x3b44 <_ZL19printSendPinsStatusv+0x2fa>
    3aaa:	c4 01       	movw	r24, r8
    3aac:	67 e9       	ldi	r22, 0x97	; 151
    3aae:	70 e0       	ldi	r23, 0x00	; 0
    3ab0:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZL16EEPROMStringLoadj>
    3ab4:	c4 01       	movw	r24, r8
    3ab6:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <_ZL8sendDataRK6String>
    3aba:	c4 01       	movw	r24, r8
    3abc:	43 c0       	rjmp	.+134    	; 0x3b44 <_ZL19printSendPinsStatusv+0x2fa>
    3abe:	ce 01       	movw	r24, r28
    3ac0:	8b 96       	adiw	r24, 0x2b	; 43
    3ac2:	6d eb       	ldi	r22, 0xBD	; 189
    3ac4:	70 e0       	ldi	r23, 0x00	; 0
    3ac6:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZL16EEPROMStringLoadj>
    3aca:	ce 01       	movw	r24, r28
    3acc:	8b 96       	adiw	r24, 0x2b	; 43
    3ace:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <_ZL8sendDataRK6String>
    3ad2:	ce 01       	movw	r24, r28
    3ad4:	8b 96       	adiw	r24, 0x2b	; 43
    3ad6:	36 c0       	rjmp	.+108    	; 0x3b44 <_ZL19printSendPinsStatusv+0x2fa>
    3ad8:	ce 01       	movw	r24, r28
    3ada:	c2 96       	adiw	r24, 0x32	; 50
    3adc:	60 ed       	ldi	r22, 0xD0	; 208
    3ade:	70 e0       	ldi	r23, 0x00	; 0
    3ae0:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZL16EEPROMStringLoadj>
    3ae4:	ce 01       	movw	r24, r28
    3ae6:	c2 96       	adiw	r24, 0x32	; 50
    3ae8:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <_ZL8sendDataRK6String>
    3aec:	ce 01       	movw	r24, r28
    3aee:	c2 96       	adiw	r24, 0x32	; 50
    3af0:	29 c0       	rjmp	.+82     	; 0x3b44 <_ZL19printSendPinsStatusv+0x2fa>
    3af2:	c1 01       	movw	r24, r2
    3af4:	60 ef       	ldi	r22, 0xF0	; 240
    3af6:	70 e0       	ldi	r23, 0x00	; 0
    3af8:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZL16EEPROMStringLoadj>
    3afc:	c1 01       	movw	r24, r2
    3afe:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <_ZL8sendDataRK6String>
    3b02:	c1 01       	movw	r24, r2
    3b04:	1f c0       	rjmp	.+62     	; 0x3b44 <_ZL19printSendPinsStatusv+0x2fa>
    3b06:	ce 01       	movw	r24, r28
    3b08:	80 5c       	subi	r24, 0xC0	; 192
    3b0a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b0c:	6d ef       	ldi	r22, 0xFD	; 253
    3b0e:	70 e0       	ldi	r23, 0x00	; 0
    3b10:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZL16EEPROMStringLoadj>
    3b14:	ce 01       	movw	r24, r28
    3b16:	80 5c       	subi	r24, 0xC0	; 192
    3b18:	9f 4f       	sbci	r25, 0xFF	; 255
    3b1a:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <_ZL8sendDataRK6String>
    3b1e:	ce 01       	movw	r24, r28
    3b20:	80 5c       	subi	r24, 0xC0	; 192
    3b22:	9f 4f       	sbci	r25, 0xFF	; 255
    3b24:	0f c0       	rjmp	.+30     	; 0x3b44 <_ZL19printSendPinsStatusv+0x2fa>
    3b26:	ce 01       	movw	r24, r28
    3b28:	89 5b       	subi	r24, 0xB9	; 185
    3b2a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b2c:	64 e0       	ldi	r22, 0x04	; 4
    3b2e:	71 e0       	ldi	r23, 0x01	; 1
    3b30:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZL16EEPROMStringLoadj>
    3b34:	ce 01       	movw	r24, r28
    3b36:	89 5b       	subi	r24, 0xB9	; 185
    3b38:	9f 4f       	sbci	r25, 0xFF	; 255
    3b3a:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <_ZL8sendDataRK6String>
    3b3e:	ce 01       	movw	r24, r28
    3b40:	89 5b       	subi	r24, 0xB9	; 185
    3b42:	9f 4f       	sbci	r25, 0xFF	; 255
    3b44:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
    3b48:	8a e7       	ldi	r24, 0x7A	; 122
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    3b50:	0f 5f       	subi	r16, 0xFF	; 255
    3b52:	1f 4f       	sbci	r17, 0xFF	; 255
    3b54:	08 94       	sec
    3b56:	c1 1c       	adc	r12, r1
    3b58:	d1 1c       	adc	r13, r1
    3b5a:	04 31       	cpi	r16, 0x14	; 20
    3b5c:	11 05       	cpc	r17, r1
    3b5e:	09 f0       	breq	.+2      	; 0x3b62 <_ZL19printSendPinsStatusv+0x318>
    3b60:	c0 ce       	rjmp	.-640    	; 0x38e2 <_ZL19printSendPinsStatusv+0x98>
    3b62:	c3 5b       	subi	r28, 0xB3	; 179
    3b64:	df 4f       	sbci	r29, 0xFF	; 255
    3b66:	0f b6       	in	r0, 0x3f	; 63
    3b68:	f8 94       	cli
    3b6a:	de bf       	out	0x3e, r29	; 62
    3b6c:	0f be       	out	0x3f, r0	; 63
    3b6e:	cd bf       	out	0x3d, r28	; 61
    3b70:	cf 91       	pop	r28
    3b72:	df 91       	pop	r29
    3b74:	1f 91       	pop	r17
    3b76:	0f 91       	pop	r16
    3b78:	ff 90       	pop	r15
    3b7a:	ef 90       	pop	r14
    3b7c:	df 90       	pop	r13
    3b7e:	cf 90       	pop	r12
    3b80:	bf 90       	pop	r11
    3b82:	af 90       	pop	r10
    3b84:	9f 90       	pop	r9
    3b86:	8f 90       	pop	r8
    3b88:	7f 90       	pop	r7
    3b8a:	6f 90       	pop	r6
    3b8c:	5f 90       	pop	r5
    3b8e:	4f 90       	pop	r4
    3b90:	3f 90       	pop	r3
    3b92:	2f 90       	pop	r2
    3b94:	08 95       	ret

00003b96 <_ZL24generateHttpResponsePageRK6String>:
    3b96:	cf 93       	push	r28
    3b98:	df 93       	push	r29
    3b9a:	ec 01       	movw	r28, r24
    3b9c:	80 91 4b 01 	lds	r24, 0x014B
    3ba0:	90 91 4c 01 	lds	r25, 0x014C
    3ba4:	04 97       	sbiw	r24, 0x04	; 4
    3ba6:	09 f0       	breq	.+2      	; 0x3baa <_ZL24generateHttpResponsePageRK6String+0x14>
    3ba8:	4c c0       	rjmp	.+152    	; 0x3c42 <_ZL24generateHttpResponsePageRK6String+0xac>
    3baa:	89 e1       	ldi	r24, 0x19	; 25
    3bac:	93 e0       	ldi	r25, 0x03	; 3
    3bae:	60 e0       	ldi	r22, 0x00	; 0
    3bb0:	70 e0       	ldi	r23, 0x00	; 0
    3bb2:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    3bb6:	88 e6       	ldi	r24, 0x68	; 104
    3bb8:	60 e0       	ldi	r22, 0x00	; 0
    3bba:	70 e0       	ldi	r23, 0x00	; 0
    3bbc:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <_ZL7sendTagc8HTTP_TAG>
    3bc0:	81 e5       	ldi	r24, 0x51	; 81
    3bc2:	93 e0       	ldi	r25, 0x03	; 3
    3bc4:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZL8sendDataPK19__FlashStringHelper>
    3bc8:	88 e6       	ldi	r24, 0x68	; 104
    3bca:	61 e0       	ldi	r22, 0x01	; 1
    3bcc:	70 e0       	ldi	r23, 0x00	; 0
    3bce:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <_ZL7sendTagc8HTTP_TAG>
    3bd2:	87 e4       	ldi	r24, 0x47	; 71
    3bd4:	92 e0       	ldi	r25, 0x02	; 2
    3bd6:	6a e4       	ldi	r22, 0x4A	; 74
    3bd8:	73 e0       	ldi	r23, 0x03	; 3
    3bda:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZL13sendTagButtonPKcPK19__FlashStringHelper>
    3bde:	89 e4       	ldi	r24, 0x49	; 73
    3be0:	92 e0       	ldi	r25, 0x02	; 2
    3be2:	60 e4       	ldi	r22, 0x40	; 64
    3be4:	73 e0       	ldi	r23, 0x03	; 3
    3be6:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZL13sendTagButtonPKcPK19__FlashStringHelper>
    3bea:	8e e4       	ldi	r24, 0x4E	; 78
    3bec:	92 e0       	ldi	r25, 0x02	; 2
    3bee:	62 e3       	ldi	r22, 0x32	; 50
    3bf0:	73 e0       	ldi	r23, 0x03	; 3
    3bf2:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZL13sendTagButtonPKcPK19__FlashStringHelper>
    3bf6:	84 e5       	ldi	r24, 0x54	; 84
    3bf8:	92 e0       	ldi	r25, 0x02	; 2
    3bfa:	65 e2       	ldi	r22, 0x25	; 37
    3bfc:	73 e0       	ldi	r23, 0x03	; 3
    3bfe:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZL13sendTagButtonPKcPK19__FlashStringHelper>
    3c02:	8e e1       	ldi	r24, 0x1E	; 30
    3c04:	93 e0       	ldi	r25, 0x03	; 3
    3c06:	62 e0       	ldi	r22, 0x02	; 2
    3c08:	70 e0       	ldi	r23, 0x00	; 0
    3c0a:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    3c0e:	81 e2       	ldi	r24, 0x21	; 33
    3c10:	93 e0       	ldi	r25, 0x03	; 3
    3c12:	60 e0       	ldi	r22, 0x00	; 0
    3c14:	70 e0       	ldi	r23, 0x00	; 0
    3c16:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    3c1a:	0e 94 94 19 	call	0x3328	; 0x3328 <_Z14sendFreeMemoryv>
    3c1e:	0e 94 ce 1b 	call	0x379c	; 0x379c <_ZL14sendBootStatusv>
    3c22:	0e 94 a5 19 	call	0x334a	; 0x334a <_ZL14sendTimeStatusv>
    3c26:	0e 94 db 19 	call	0x33b6	; 0x33b6 <_ZL21sendTemperatureStatusv>
    3c2a:	8e e1       	ldi	r24, 0x1E	; 30
    3c2c:	93 e0       	ldi	r25, 0x03	; 3
    3c2e:	62 e0       	ldi	r22, 0x02	; 2
    3c30:	70 e0       	ldi	r23, 0x00	; 0
    3c32:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    3c36:	81 e2       	ldi	r24, 0x21	; 33
    3c38:	93 e0       	ldi	r25, 0x03	; 3
    3c3a:	61 e0       	ldi	r22, 0x01	; 1
    3c3c:	70 e0       	ldi	r23, 0x00	; 0
    3c3e:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    3c42:	81 e2       	ldi	r24, 0x21	; 33
    3c44:	93 e0       	ldi	r25, 0x03	; 3
    3c46:	60 e0       	ldi	r22, 0x00	; 0
    3c48:	70 e0       	ldi	r23, 0x00	; 0
    3c4a:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    3c4e:	ce 01       	movw	r24, r28
    3c50:	67 e4       	ldi	r22, 0x47	; 71
    3c52:	72 e0       	ldi	r23, 0x02	; 2
    3c54:	0e 94 6c 07 	call	0xed8	; 0xed8 <_ZL17flashStringEqualsRK6StringPKc>
    3c58:	88 23       	and	r24, r24
    3c5a:	19 f0       	breq	.+6      	; 0x3c62 <_ZL24generateHttpResponsePageRK6String+0xcc>
    3c5c:	0e 94 25 1c 	call	0x384a	; 0x384a <_ZL19printSendPinsStatusv>
    3c60:	20 c0       	rjmp	.+64     	; 0x3ca2 <_ZL24generateHttpResponsePageRK6String+0x10c>
    3c62:	ce 01       	movw	r24, r28
    3c64:	6e e4       	ldi	r22, 0x4E	; 78
    3c66:	72 e0       	ldi	r23, 0x02	; 2
    3c68:	0e 94 6c 07 	call	0xed8	; 0xed8 <_ZL17flashStringEqualsRK6StringPKc>
    3c6c:	88 23       	and	r24, r24
    3c6e:	19 f0       	breq	.+6      	; 0x3c76 <_ZL24generateHttpResponsePageRK6String+0xe0>
    3c70:	0e 94 87 19 	call	0x330e	; 0x330e <_ZL30printSendConfigurationControlsv>
    3c74:	16 c0       	rjmp	.+44     	; 0x3ca2 <_ZL24generateHttpResponsePageRK6String+0x10c>
    3c76:	ce 01       	movw	r24, r28
    3c78:	69 e4       	ldi	r22, 0x49	; 73
    3c7a:	72 e0       	ldi	r23, 0x02	; 2
    3c7c:	0e 94 6c 07 	call	0xed8	; 0xed8 <_ZL17flashStringEqualsRK6StringPKc>
    3c80:	88 23       	and	r24, r24
    3c82:	31 f0       	breq	.+12     	; 0x3c90 <_ZL24generateHttpResponsePageRK6String+0xfa>
    3c84:	81 e0       	ldi	r24, 0x01	; 1
    3c86:	61 e0       	ldi	r22, 0x01	; 1
    3c88:	41 e0       	ldi	r20, 0x01	; 1
    3c8a:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <_ZL16printSendFullLoghhh>
    3c8e:	09 c0       	rjmp	.+18     	; 0x3ca2 <_ZL24generateHttpResponsePageRK6String+0x10c>
    3c90:	ce 01       	movw	r24, r28
    3c92:	64 e5       	ldi	r22, 0x54	; 84
    3c94:	72 e0       	ldi	r23, 0x02	; 2
    3c96:	0e 94 6c 07 	call	0xed8	; 0xed8 <_ZL17flashStringEqualsRK6StringPKc>
    3c9a:	88 23       	and	r24, r24
    3c9c:	11 f0       	breq	.+4      	; 0x3ca2 <_ZL24generateHttpResponsePageRK6String+0x10c>
    3c9e:	0e 94 8a 18 	call	0x3114	; 0x3114 <_Z15sendStorageDumpv>
    3ca2:	80 91 4d 01 	lds	r24, 0x014D
    3ca6:	88 23       	and	r24, r24
    3ca8:	61 f4       	brne	.+24     	; 0x3cc2 <_ZL24generateHttpResponsePageRK6String+0x12c>
    3caa:	81 e2       	ldi	r24, 0x21	; 33
    3cac:	93 e0       	ldi	r25, 0x03	; 3
    3cae:	61 e0       	ldi	r22, 0x01	; 1
    3cb0:	70 e0       	ldi	r23, 0x00	; 0
    3cb2:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    3cb6:	89 e1       	ldi	r24, 0x19	; 25
    3cb8:	93 e0       	ldi	r25, 0x03	; 3
    3cba:	61 e0       	ldi	r22, 0x01	; 1
    3cbc:	70 e0       	ldi	r23, 0x00	; 0
    3cbe:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZL7sendTagPKc8HTTP_TAG>
    3cc2:	df 91       	pop	r29
    3cc4:	cf 91       	pop	r28
    3cc6:	08 95       	ret

00003cc8 <_Z11serialEventv>:
    3cc8:	ef 92       	push	r14
    3cca:	ff 92       	push	r15
    3ccc:	0f 93       	push	r16
    3cce:	1f 93       	push	r17
    3cd0:	df 93       	push	r29
    3cd2:	cf 93       	push	r28
    3cd4:	cd b7       	in	r28, 0x3d	; 61
    3cd6:	de b7       	in	r29, 0x3e	; 62
    3cd8:	2e 97       	sbiw	r28, 0x0e	; 14
    3cda:	0f b6       	in	r0, 0x3f	; 63
    3cdc:	f8 94       	cli
    3cde:	de bf       	out	0x3e, r29	; 62
    3ce0:	0f be       	out	0x3f, r0	; 63
    3ce2:	cd bf       	out	0x3d, r28	; 61
    3ce4:	80 91 4a 01 	lds	r24, 0x014A
    3ce8:	88 23       	and	r24, r24
    3cea:	19 f4       	brne	.+6      	; 0x3cf2 <_Z11serialEventv+0x2a>
    3cec:	0e 94 63 08 	call	0x10c6	; 0x10c6 <_ZN15GB_SerialHelper13printDirtyEndEv>
    3cf0:	76 c0       	rjmp	.+236    	; 0x3dde <_Z11serialEventv+0x116>
    3cf2:	7e 01       	movw	r14, r28
    3cf4:	08 94       	sec
    3cf6:	e1 1c       	adc	r14, r1
    3cf8:	f1 1c       	adc	r15, r1
    3cfa:	c7 01       	movw	r24, r14
    3cfc:	60 e0       	ldi	r22, 0x00	; 0
    3cfe:	71 e0       	ldi	r23, 0x01	; 1
    3d00:	0e 94 8f 39 	call	0x731e	; 0x731e <_ZN6StringC1EPKc>
    3d04:	8e 01       	movw	r16, r28
    3d06:	08 5f       	subi	r16, 0xF8	; 248
    3d08:	1f 4f       	sbci	r17, 0xFF	; 255
    3d0a:	c8 01       	movw	r24, r16
    3d0c:	60 e0       	ldi	r22, 0x00	; 0
    3d0e:	71 e0       	ldi	r23, 0x01	; 1
    3d10:	0e 94 8f 39 	call	0x731e	; 0x731e <_ZN6StringC1EPKc>
    3d14:	c7 01       	movw	r24, r14
    3d16:	64 e0       	ldi	r22, 0x04	; 4
    3d18:	71 e0       	ldi	r23, 0x01	; 1
    3d1a:	a8 01       	movw	r20, r16
    3d1c:	0e 94 19 12 	call	0x2432	; 0x2432 <_ZN15GB_SerialHelper17handleSerialEventER6StringRhS1_>
    3d20:	90 93 4c 01 	sts	0x014C, r25
    3d24:	80 93 4b 01 	sts	0x014B, r24
    3d28:	84 30       	cpi	r24, 0x04	; 4
    3d2a:	91 05       	cpc	r25, r1
    3d2c:	51 f0       	breq	.+20     	; 0x3d42 <_Z11serialEventv+0x7a>
    3d2e:	05 97       	sbiw	r24, 0x05	; 5
    3d30:	09 f0       	breq	.+2      	; 0x3d34 <_Z11serialEventv+0x6c>
    3d32:	47 c0       	rjmp	.+142    	; 0x3dc2 <_Z11serialEventv+0xfa>
    3d34:	84 e0       	ldi	r24, 0x04	; 4
    3d36:	91 e0       	ldi	r25, 0x01	; 1
    3d38:	67 e4       	ldi	r22, 0x47	; 71
    3d3a:	72 e0       	ldi	r23, 0x02	; 2
    3d3c:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <_ZN15GB_SerialHelper16sendHTTPRedirectERKhPK19__FlashStringHelper>
    3d40:	40 c0       	rjmp	.+128    	; 0x3dc2 <_Z11serialEventv+0xfa>
    3d42:	c7 01       	movw	r24, r14
    3d44:	67 e4       	ldi	r22, 0x47	; 71
    3d46:	72 e0       	ldi	r23, 0x02	; 2
    3d48:	0e 94 6c 07 	call	0xed8	; 0xed8 <_ZL17flashStringEqualsRK6StringPKc>
    3d4c:	88 23       	and	r24, r24
    3d4e:	a9 f4       	brne	.+42     	; 0x3d7a <_Z11serialEventv+0xb2>
    3d50:	c7 01       	movw	r24, r14
    3d52:	69 e4       	ldi	r22, 0x49	; 73
    3d54:	72 e0       	ldi	r23, 0x02	; 2
    3d56:	0e 94 6c 07 	call	0xed8	; 0xed8 <_ZL17flashStringEqualsRK6StringPKc>
    3d5a:	88 23       	and	r24, r24
    3d5c:	71 f4       	brne	.+28     	; 0x3d7a <_Z11serialEventv+0xb2>
    3d5e:	c7 01       	movw	r24, r14
    3d60:	6e e4       	ldi	r22, 0x4E	; 78
    3d62:	72 e0       	ldi	r23, 0x02	; 2
    3d64:	0e 94 6c 07 	call	0xed8	; 0xed8 <_ZL17flashStringEqualsRK6StringPKc>
    3d68:	88 23       	and	r24, r24
    3d6a:	39 f4       	brne	.+14     	; 0x3d7a <_Z11serialEventv+0xb2>
    3d6c:	c7 01       	movw	r24, r14
    3d6e:	64 e5       	ldi	r22, 0x54	; 84
    3d70:	72 e0       	ldi	r23, 0x02	; 2
    3d72:	0e 94 6c 07 	call	0xed8	; 0xed8 <_ZL17flashStringEqualsRK6StringPKc>
    3d76:	88 23       	and	r24, r24
    3d78:	69 f1       	breq	.+90     	; 0x3dd4 <_Z11serialEventv+0x10c>
    3d7a:	80 91 04 01 	lds	r24, 0x0104
    3d7e:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <_ZN15GB_SerialHelper17sendHttpOK_HeaderEh>
    3d82:	ce 01       	movw	r24, r28
    3d84:	01 96       	adiw	r24, 0x01	; 1
    3d86:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <_ZL24generateHttpResponsePageRK6String>
    }
    return isSendOK;
  }

  static void sendHttpOK_PageComplete(const byte &wifiPortDescriptor){  
    sendWifiDataStop();
    3d8a:	0e 94 00 16 	call	0x2c00	; 0x2c00 <_ZN15GB_SerialHelper16sendWifiDataStopEv>
    sendWifiCloseConnection(wifiPortDescriptor);
    3d8e:	80 91 04 01 	lds	r24, 0x0104
    3d92:	0e 94 28 0b 	call	0x1650	; 0x1650 <_ZN15GB_SerialHelper23sendWifiCloseConnectionEh>
    3d96:	80 91 ae 01 	lds	r24, 0x01AE
    3d9a:	88 23       	and	r24, r24
    3d9c:	91 f0       	breq	.+36     	; 0x3dc2 <_Z11serialEventv+0xfa>
    3d9e:	80 91 4d 01 	lds	r24, 0x014D
    3da2:	88 23       	and	r24, r24
    3da4:	71 f0       	breq	.+28     	; 0x3dc2 <_Z11serialEventv+0xfa>
    3da6:	88 eb       	ldi	r24, 0xB8	; 184
    3da8:	93 e0       	ldi	r25, 0x03	; 3
    3daa:	65 ea       	ldi	r22, 0xA5	; 165
    3dac:	70 e0       	ldi	r23, 0x00	; 0
    3dae:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_ZN5Print5printEPK19__FlashStringHelper>
    3db2:	88 eb       	ldi	r24, 0xB8	; 184
    3db4:	93 e0       	ldi	r25, 0x03	; 3
    3db6:	6d e5       	ldi	r22, 0x5D	; 93
    3db8:	72 e0       	ldi	r23, 0x02	; 2
    3dba:	0e 94 99 36 	call	0x6d32	; 0x6d32 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3dbe:	0e 94 63 08 	call	0x10c6	; 0x10c6 <_ZN15GB_SerialHelper13printDirtyEndEv>
    3dc2:	ce 01       	movw	r24, r28
    3dc4:	08 96       	adiw	r24, 0x08	; 8
    3dc6:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
    3dca:	ce 01       	movw	r24, r28
    3dcc:	01 96       	adiw	r24, 0x01	; 1
    3dce:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
    3dd2:	05 c0       	rjmp	.+10     	; 0x3dde <_Z11serialEventv+0x116>
    3dd4:	80 91 04 01 	lds	r24, 0x0104
    3dd8:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <_ZN15GB_SerialHelper16sendHttpNotFoundEh>
    3ddc:	f2 cf       	rjmp	.-28     	; 0x3dc2 <_Z11serialEventv+0xfa>
    3dde:	2e 96       	adiw	r28, 0x0e	; 14
    3de0:	0f b6       	in	r0, 0x3f	; 63
    3de2:	f8 94       	cli
    3de4:	de bf       	out	0x3e, r29	; 62
    3de6:	0f be       	out	0x3f, r0	; 63
    3de8:	cd bf       	out	0x3d, r28	; 61
    3dea:	cf 91       	pop	r28
    3dec:	df 91       	pop	r29
    3dee:	1f 91       	pop	r17
    3df0:	0f 91       	pop	r16
    3df2:	ff 90       	pop	r15
    3df4:	ef 90       	pop	r14
    3df6:	08 95       	ret

00003df8 <_Z15initLoggerModelv>:
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    3df8:	10 92 54 01 	sts	0x0154, r1
    this->sequenceSize = sequenceSize;
    3dfc:	42 e0       	ldi	r20, 0x02	; 2
    3dfe:	40 93 55 01 	sts	0x0155, r20
EVENT_SERIAL_UNKNOWN_COMMAND;

void initLoggerModel(){
  
  // Use F macro to reduce requirements to memory. We can't use F macro in constructors.
  ERROR_TIMER_NOT_SET.init(B00, 2, F("Error: Timer not set"));
    3e02:	82 e5       	ldi	r24, 0x52	; 82
    3e04:	97 e0       	ldi	r25, 0x07	; 7
    3e06:	90 93 57 01 	sts	0x0157, r25
    3e0a:	80 93 56 01 	sts	0x0156, r24
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    3e0e:	31 e0       	ldi	r19, 0x01	; 1
    3e10:	30 93 5b 01 	sts	0x015B, r19
    this->sequenceSize = sequenceSize;
    3e14:	23 e0       	ldi	r18, 0x03	; 3
    3e16:	20 93 5c 01 	sts	0x015C, r18
  ERROR_TIMER_NEEDS_SYNC.init(B001, 3, F("Error: Timer needs sync"));
    3e1a:	8a e3       	ldi	r24, 0x3A	; 58
    3e1c:	97 e0       	ldi	r25, 0x07	; 7
    3e1e:	90 93 5e 01 	sts	0x015E, r25
    3e22:	80 93 5d 01 	sts	0x015D, r24
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    3e26:	30 93 62 01 	sts	0x0162, r19
    this->sequenceSize = sequenceSize;
    3e2a:	40 93 63 01 	sts	0x0163, r20
  ERROR_TERMOMETER_DISCONNECTED.init(B01, 2, F("Error: Termometer disconnected"));
    3e2e:	8b e1       	ldi	r24, 0x1B	; 27
    3e30:	97 e0       	ldi	r25, 0x07	; 7
    3e32:	90 93 65 01 	sts	0x0165, r25
    3e36:	80 93 64 01 	sts	0x0164, r24
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    3e3a:	40 93 69 01 	sts	0x0169, r20
    this->sequenceSize = sequenceSize;
    3e3e:	20 93 6a 01 	sts	0x016A, r18
  ERROR_TERMOMETER_ZERO_VALUE.init(B010, 3, F("Error: Termometer returned ZERO value"));
    3e42:	85 ef       	ldi	r24, 0xF5	; 245
    3e44:	96 e0       	ldi	r25, 0x06	; 6
    3e46:	90 93 6c 01 	sts	0x016C, r25
    3e4a:	80 93 6b 01 	sts	0x016B, r24
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    3e4e:	10 92 70 01 	sts	0x0170, r1
    this->sequenceSize = sequenceSize;
    3e52:	20 93 71 01 	sts	0x0171, r18
  ERROR_TERMOMETER_CRITICAL_VALUE.init(B000, 3, F("Error: Termometer returned CRITICAL value"));
    3e56:	8b ec       	ldi	r24, 0xCB	; 203
    3e58:	96 e0       	ldi	r25, 0x06	; 6
    3e5a:	90 93 73 01 	sts	0x0173, r25
    3e5e:	80 93 72 01 	sts	0x0172, r24
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    lastAddedItem = this;
  }

  void init(byte sequence, byte sequenceSize, const __FlashStringHelper* description) {
    this->sequence = sequence;
    3e62:	57 e0       	ldi	r21, 0x07	; 7
    3e64:	50 93 77 01 	sts	0x0177, r21
    this->sequenceSize = sequenceSize;
    3e68:	20 93 78 01 	sts	0x0178, r18
  ERROR_MEMORY_LOW.init(B111, 3, F("Error: Memory remained less 200 bytes"));
    3e6c:	85 ea       	ldi	r24, 0xA5	; 165
    3e6e:	96 e0       	ldi	r25, 0x06	; 6
    3e70:	90 93 7a 01 	sts	0x017A, r25
    3e74:	80 93 79 01 	sts	0x0179, r24
  nextEvent(lastAddedEvent), index(0xFF) {
    lastAddedEvent = this;
  }

  void init(byte index, const __FlashStringHelper* description) {
    this->index = index;
    3e78:	30 93 7e 01 	sts	0x017E, r19

  EVENT_FIRST_START_UP.init(1, F("FIRST STARTUP")), 
    3e7c:	87 e9       	ldi	r24, 0x97	; 151
    3e7e:	96 e0       	ldi	r25, 0x06	; 6
    3e80:	90 93 80 01 	sts	0x0180, r25
    3e84:	80 93 7f 01 	sts	0x017F, r24
    3e88:	40 93 83 01 	sts	0x0183, r20
  EVENT_RESTART.init(2, F("RESTARTED")), 
    3e8c:	8d e8       	ldi	r24, 0x8D	; 141
    3e8e:	96 e0       	ldi	r25, 0x06	; 6
    3e90:	90 93 85 01 	sts	0x0185, r25
    3e94:	80 93 84 01 	sts	0x0184, r24
    3e98:	20 93 88 01 	sts	0x0188, r18
  EVENT_MODE_DAY.init(3, F("Growbox switched to DAY mode")), 
    3e9c:	80 e7       	ldi	r24, 0x70	; 112
    3e9e:	96 e0       	ldi	r25, 0x06	; 6
    3ea0:	90 93 8a 01 	sts	0x018A, r25
    3ea4:	80 93 89 01 	sts	0x0189, r24
    3ea8:	84 e0       	ldi	r24, 0x04	; 4
    3eaa:	80 93 8d 01 	sts	0x018D, r24
  EVENT_MODE_NIGHT.init(4, F("Growbox switched to NIGHT mode")), 
    3eae:	81 e5       	ldi	r24, 0x51	; 81
    3eb0:	96 e0       	ldi	r25, 0x06	; 6
    3eb2:	90 93 8f 01 	sts	0x018F, r25
    3eb6:	80 93 8e 01 	sts	0x018E, r24
    3eba:	85 e0       	ldi	r24, 0x05	; 5
    3ebc:	80 93 92 01 	sts	0x0192, r24
  EVENT_LIGHT_OFF.init(5, F("LIGHT turned OFF")), 
    3ec0:	80 e4       	ldi	r24, 0x40	; 64
    3ec2:	96 e0       	ldi	r25, 0x06	; 6
    3ec4:	90 93 94 01 	sts	0x0194, r25
    3ec8:	80 93 93 01 	sts	0x0193, r24
    3ecc:	86 e0       	ldi	r24, 0x06	; 6
    3ece:	80 93 97 01 	sts	0x0197, r24
  EVENT_LIGHT_ON.init(6, F("LIGHT turned ON")), 
    3ed2:	80 e3       	ldi	r24, 0x30	; 48
    3ed4:	96 e0       	ldi	r25, 0x06	; 6
    3ed6:	90 93 99 01 	sts	0x0199, r25
    3eda:	80 93 98 01 	sts	0x0198, r24
    3ede:	50 93 9c 01 	sts	0x019C, r21
  EVENT_FAN_OFF.init(7, F("FAN turned OFF")), 
    3ee2:	81 e2       	ldi	r24, 0x21	; 33
    3ee4:	96 e0       	ldi	r25, 0x06	; 6
    3ee6:	90 93 9e 01 	sts	0x019E, r25
    3eea:	80 93 9d 01 	sts	0x019D, r24
    3eee:	88 e0       	ldi	r24, 0x08	; 8
    3ef0:	80 93 a1 01 	sts	0x01A1, r24
  EVENT_FAN_ON_MIN.init(8, F("FAN turned ON MIN speed")), 
    3ef4:	89 e0       	ldi	r24, 0x09	; 9
    3ef6:	96 e0       	ldi	r25, 0x06	; 6
    3ef8:	90 93 a3 01 	sts	0x01A3, r25
    3efc:	80 93 a2 01 	sts	0x01A2, r24
    3f00:	89 e0       	ldi	r24, 0x09	; 9
    3f02:	80 93 a6 01 	sts	0x01A6, r24
  EVENT_FAN_ON_MAX.init(9, F("FAN turned ON MAX speed")),
    3f06:	81 ef       	ldi	r24, 0xF1	; 241
    3f08:	95 e0       	ldi	r25, 0x05	; 5
    3f0a:	90 93 a8 01 	sts	0x01A8, r25
    3f0e:	80 93 a7 01 	sts	0x01A7, r24
    3f12:	8a e0       	ldi	r24, 0x0A	; 10
    3f14:	80 93 ab 01 	sts	0x01AB, r24
  EVENT_SERIAL_UNKNOWN_COMMAND.init(10, F("Unknown serial command"));
    3f18:	8a ed       	ldi	r24, 0xDA	; 218
    3f1a:	95 e0       	ldi	r25, 0x05	; 5
    3f1c:	90 93 ad 01 	sts	0x01AD, r25
    3f20:	80 93 ac 01 	sts	0x01AC, r24
}
    3f24:	08 95       	ret

00003f26 <_GLOBAL__I__ZN5Error13lastAddedItemE>:
  byte sequenceSize;
  const __FlashStringHelper* description; // FLASH
  boolean isStored; // should be stored in Log only once, but notification should repeated

    Error() : 
  nextError(lastAddedItem), sequence(0xFF), sequenceSize(0xFF), isStored(false) {
    3f26:	80 91 4e 01 	lds	r24, 0x014E
    3f2a:	90 91 4f 01 	lds	r25, 0x014F
    3f2e:	90 93 53 01 	sts	0x0153, r25
    3f32:	80 93 52 01 	sts	0x0152, r24
    3f36:	2f ef       	ldi	r18, 0xFF	; 255
    3f38:	20 93 54 01 	sts	0x0154, r18
    3f3c:	20 93 55 01 	sts	0x0155, r18
    3f40:	10 92 58 01 	sts	0x0158, r1
    lastAddedItem = this;
    3f44:	82 e5       	ldi	r24, 0x52	; 82
    3f46:	91 e0       	ldi	r25, 0x01	; 1
    3f48:	90 93 5a 01 	sts	0x015A, r25
    3f4c:	80 93 59 01 	sts	0x0159, r24
    3f50:	20 93 5b 01 	sts	0x015B, r18
    3f54:	20 93 5c 01 	sts	0x015C, r18
    3f58:	10 92 5f 01 	sts	0x015F, r1
    3f5c:	89 e5       	ldi	r24, 0x59	; 89
    3f5e:	91 e0       	ldi	r25, 0x01	; 1
    3f60:	90 93 61 01 	sts	0x0161, r25
    3f64:	80 93 60 01 	sts	0x0160, r24
    3f68:	20 93 62 01 	sts	0x0162, r18
    3f6c:	20 93 63 01 	sts	0x0163, r18
    3f70:	10 92 66 01 	sts	0x0166, r1
    3f74:	80 e6       	ldi	r24, 0x60	; 96
    3f76:	91 e0       	ldi	r25, 0x01	; 1
    3f78:	90 93 68 01 	sts	0x0168, r25
    3f7c:	80 93 67 01 	sts	0x0167, r24
    3f80:	20 93 69 01 	sts	0x0169, r18
    3f84:	20 93 6a 01 	sts	0x016A, r18
    3f88:	10 92 6d 01 	sts	0x016D, r1
    3f8c:	87 e6       	ldi	r24, 0x67	; 103
    3f8e:	91 e0       	ldi	r25, 0x01	; 1
    3f90:	90 93 6f 01 	sts	0x016F, r25
    3f94:	80 93 6e 01 	sts	0x016E, r24
    3f98:	20 93 70 01 	sts	0x0170, r18
    3f9c:	20 93 71 01 	sts	0x0171, r18
    3fa0:	10 92 74 01 	sts	0x0174, r1
    3fa4:	8e e6       	ldi	r24, 0x6E	; 110
    3fa6:	91 e0       	ldi	r25, 0x01	; 1
    3fa8:	90 93 76 01 	sts	0x0176, r25
    3fac:	80 93 75 01 	sts	0x0175, r24
    3fb0:	20 93 77 01 	sts	0x0177, r18
    3fb4:	20 93 78 01 	sts	0x0178, r18
    3fb8:	10 92 7b 01 	sts	0x017B, r1
    3fbc:	85 e7       	ldi	r24, 0x75	; 117
    3fbe:	91 e0       	ldi	r25, 0x01	; 1
    3fc0:	90 93 4f 01 	sts	0x014F, r25
    3fc4:	80 93 4e 01 	sts	0x014E, r24
public:
  byte index;
  const __FlashStringHelper* description; // FLASH

  Event() : 
  nextEvent(lastAddedEvent), index(0xFF) {
    3fc8:	80 91 50 01 	lds	r24, 0x0150
    3fcc:	90 91 51 01 	lds	r25, 0x0151
    3fd0:	90 93 7d 01 	sts	0x017D, r25
    3fd4:	80 93 7c 01 	sts	0x017C, r24
    3fd8:	20 93 7e 01 	sts	0x017E, r18
    lastAddedEvent = this;
    3fdc:	8c e7       	ldi	r24, 0x7C	; 124
    3fde:	91 e0       	ldi	r25, 0x01	; 1
    3fe0:	90 93 82 01 	sts	0x0182, r25
    3fe4:	80 93 81 01 	sts	0x0181, r24
    3fe8:	20 93 83 01 	sts	0x0183, r18
    3fec:	81 e8       	ldi	r24, 0x81	; 129
    3fee:	91 e0       	ldi	r25, 0x01	; 1
    3ff0:	90 93 87 01 	sts	0x0187, r25
    3ff4:	80 93 86 01 	sts	0x0186, r24
    3ff8:	20 93 88 01 	sts	0x0188, r18
    3ffc:	86 e8       	ldi	r24, 0x86	; 134
    3ffe:	91 e0       	ldi	r25, 0x01	; 1
    4000:	90 93 8c 01 	sts	0x018C, r25
    4004:	80 93 8b 01 	sts	0x018B, r24
    4008:	20 93 8d 01 	sts	0x018D, r18
    400c:	8b e8       	ldi	r24, 0x8B	; 139
    400e:	91 e0       	ldi	r25, 0x01	; 1
    4010:	90 93 91 01 	sts	0x0191, r25
    4014:	80 93 90 01 	sts	0x0190, r24
    4018:	20 93 92 01 	sts	0x0192, r18
    401c:	80 e9       	ldi	r24, 0x90	; 144
    401e:	91 e0       	ldi	r25, 0x01	; 1
    4020:	90 93 96 01 	sts	0x0196, r25
    4024:	80 93 95 01 	sts	0x0195, r24
    4028:	20 93 97 01 	sts	0x0197, r18
    402c:	85 e9       	ldi	r24, 0x95	; 149
    402e:	91 e0       	ldi	r25, 0x01	; 1
    4030:	90 93 9b 01 	sts	0x019B, r25
    4034:	80 93 9a 01 	sts	0x019A, r24
    4038:	20 93 9c 01 	sts	0x019C, r18
    403c:	8a e9       	ldi	r24, 0x9A	; 154
    403e:	91 e0       	ldi	r25, 0x01	; 1
    4040:	90 93 a0 01 	sts	0x01A0, r25
    4044:	80 93 9f 01 	sts	0x019F, r24
    4048:	20 93 a1 01 	sts	0x01A1, r18
    404c:	8f e9       	ldi	r24, 0x9F	; 159
    404e:	91 e0       	ldi	r25, 0x01	; 1
    4050:	90 93 a5 01 	sts	0x01A5, r25
    4054:	80 93 a4 01 	sts	0x01A4, r24
    4058:	20 93 a6 01 	sts	0x01A6, r18
    405c:	84 ea       	ldi	r24, 0xA4	; 164
    405e:	91 e0       	ldi	r25, 0x01	; 1
    4060:	90 93 aa 01 	sts	0x01AA, r25
    4064:	80 93 a9 01 	sts	0x01A9, r24
    4068:	20 93 ab 01 	sts	0x01AB, r18
    406c:	89 ea       	ldi	r24, 0xA9	; 169
    406e:	91 e0       	ldi	r25, 0x01	; 1
    4070:	90 93 51 01 	sts	0x0151, r25
    4074:	80 93 50 01 	sts	0x0150, r24
    4078:	08 95       	ret

0000407a <_Z41__static_initialization_and_destruction_0ii>:
boolean GB_SerialHelper::s_restartWifiIfNoResponseAutomatically = true;

String GB_SerialHelper::s_wifiSID;
String GB_SerialHelper::s_wifiPass;

int GB_SerialHelper::s_sendWifiDataFrameSize;
    407a:	81 30       	cpi	r24, 0x01	; 1
    407c:	91 05       	cpc	r25, r1
    407e:	81 f4       	brne	.+32     	; 0x40a0 <_Z41__static_initialization_and_destruction_0ii+0x26>
    4080:	6f 5f       	subi	r22, 0xFF	; 255
    4082:	7f 4f       	sbci	r23, 0xFF	; 255
    4084:	d1 f4       	brne	.+52     	; 0x40ba <_Z41__static_initialization_and_destruction_0ii+0x40>
/*volatile*/boolean GB_SerialHelper::useSerialMonitor = false;
/*volatile*/boolean GB_SerialHelper::useSerialWifi = false;
boolean GB_SerialHelper::s_restartWifi = false;
boolean GB_SerialHelper::s_restartWifiIfNoResponseAutomatically = true;

String GB_SerialHelper::s_wifiSID;
    4086:	81 eb       	ldi	r24, 0xB1	; 177
    4088:	91 e0       	ldi	r25, 0x01	; 1
    408a:	61 e0       	ldi	r22, 0x01	; 1
    408c:	71 e0       	ldi	r23, 0x01	; 1
    408e:	0e 94 8f 39 	call	0x731e	; 0x731e <_ZN6StringC1EPKc>
String GB_SerialHelper::s_wifiPass;
    4092:	88 eb       	ldi	r24, 0xB8	; 184
    4094:	91 e0       	ldi	r25, 0x01	; 1
    4096:	61 e0       	ldi	r22, 0x01	; 1
    4098:	71 e0       	ldi	r23, 0x01	; 1
    409a:	0e 94 8f 39 	call	0x731e	; 0x731e <_ZN6StringC1EPKc>
    409e:	08 95       	ret
    40a0:	89 2b       	or	r24, r25
    40a2:	59 f4       	brne	.+22     	; 0x40ba <_Z41__static_initialization_and_destruction_0ii+0x40>
    40a4:	6f 5f       	subi	r22, 0xFF	; 255
    40a6:	7f 4f       	sbci	r23, 0xFF	; 255
    40a8:	41 f4       	brne	.+16     	; 0x40ba <_Z41__static_initialization_and_destruction_0ii+0x40>
    40aa:	88 eb       	ldi	r24, 0xB8	; 184
    40ac:	91 e0       	ldi	r25, 0x01	; 1
    40ae:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
/*volatile*/boolean GB_SerialHelper::useSerialMonitor = false;
/*volatile*/boolean GB_SerialHelper::useSerialWifi = false;
boolean GB_SerialHelper::s_restartWifi = false;
boolean GB_SerialHelper::s_restartWifiIfNoResponseAutomatically = true;

String GB_SerialHelper::s_wifiSID;
    40b2:	81 eb       	ldi	r24, 0xB1	; 177
    40b4:	91 e0       	ldi	r25, 0x01	; 1
    40b6:	0e 94 82 3a 	call	0x7504	; 0x7504 <_ZN6StringD1Ev>
    40ba:	08 95       	ret

000040bc <_GLOBAL__D__ZN15GB_SerialHelper16useSerialMonitorE>:
String GB_SerialHelper::s_wifiPass;

int GB_SerialHelper::s_sendWifiDataFrameSize;
    40bc:	80 e0       	ldi	r24, 0x00	; 0
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	6f ef       	ldi	r22, 0xFF	; 255
    40c2:	7f ef       	ldi	r23, 0xFF	; 255
    40c4:	0e 94 3d 20 	call	0x407a	; 0x407a <_Z41__static_initialization_and_destruction_0ii>
    40c8:	08 95       	ret

000040ca <_GLOBAL__I__ZN15GB_SerialHelper16useSerialMonitorE>:
    40ca:	81 e0       	ldi	r24, 0x01	; 1
    40cc:	90 e0       	ldi	r25, 0x00	; 0
    40ce:	6f ef       	ldi	r22, 0xFF	; 255
    40d0:	7f ef       	ldi	r23, 0xFF	; 255
    40d2:	0e 94 3d 20 	call	0x407a	; 0x407a <_Z41__static_initialization_and_destruction_0ii>
    40d6:	08 95       	ret

000040d8 <_GLOBAL__I__ZN14GB_Thermometer17dallasTemperatureE>:
#include "Thermometer.h"

// Pass our oneWire reference to Dallas Temperature. 
DallasTemperature GB_Thermometer::dallasTemperature(&g_oneWirePin);
    40d8:	81 ee       	ldi	r24, 0xE1	; 225
    40da:	91 e0       	ldi	r25, 0x01	; 1
    40dc:	6c e3       	ldi	r22, 0x3C	; 60
    40de:	71 e0       	ldi	r23, 0x01	; 1
    40e0:	0e 94 58 2d 	call	0x5ab0	; 0x5ab0 <_ZN17DallasTemperatureC1EP7OneWire>
DeviceAddress GB_Thermometer::oneWireAddress;

// Visible only in this file
float GB_Thermometer::workingTemperature = 0.0;
double GB_Thermometer::statisticsTemperatureSumm = 0.0;
int GB_Thermometer::statisticsTemperatureCount = 0;
    40e4:	08 95       	ret

000040e6 <_ZN11EEPROMClass4readEi>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    40e6:	f9 99       	sbic	0x1f, 1	; 31
    40e8:	fe cf       	rjmp	.-4      	; 0x40e6 <_ZN11EEPROMClass4readEi>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    40ea:	72 bd       	out	0x22, r23	; 34
    40ec:	61 bd       	out	0x21, r22	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    40ee:	f8 9a       	sbi	0x1f, 0	; 31
    40f0:	80 b5       	in	r24, 0x20	; 32
 ******************************************************************************/

uint8_t EEPROMClass::read(int address)
{
	return eeprom_read_byte((unsigned char *) address);
}
    40f2:	08 95       	ret

000040f4 <freeMemory>:

int freeMemory() {
    40f4:	df 93       	push	r29
    40f6:	cf 93       	push	r28
    40f8:	00 d0       	rcall	.+0      	; 0x40fa <freeMemory+0x6>
    40fa:	cd b7       	in	r28, 0x3d	; 61
    40fc:	de b7       	in	r29, 0x3e	; 62
  int free_memory;

  if ((int)__brkval == 0) {
    40fe:	20 91 db 03 	lds	r18, 0x03DB
    4102:	30 91 dc 03 	lds	r19, 0x03DC
    4106:	ce 01       	movw	r24, r28
    4108:	01 96       	adiw	r24, 0x01	; 1
    410a:	21 15       	cp	r18, r1
    410c:	31 05       	cpc	r19, r1
    410e:	29 f4       	brne	.+10     	; 0x411a <freeMemory+0x26>
    free_memory = ((int)&free_memory) - ((int)&__heap_start);
    4110:	8f 5d       	subi	r24, 0xDF	; 223
    4112:	93 40       	sbci	r25, 0x03	; 3
    4114:	9a 83       	std	Y+2, r25	; 0x02
    4116:	89 83       	std	Y+1, r24	; 0x01
    4118:	18 c0       	rjmp	.+48     	; 0x414a <freeMemory+0x56>
  } else {
    free_memory = ((int)&free_memory) - ((int)__brkval);
    411a:	ac 01       	movw	r20, r24
    411c:	42 1b       	sub	r20, r18
    411e:	53 0b       	sbc	r21, r19
/* Calculates the size of the free list */
int freeListSize() {
  struct __freelist* current;
  int total = 0;

  for (current = __flp; current; current = current->nx) {
    4120:	e0 91 dd 03 	lds	r30, 0x03DD
    4124:	f0 91 de 03 	lds	r31, 0x03DE
    4128:	20 e0       	ldi	r18, 0x00	; 0
    412a:	30 e0       	ldi	r19, 0x00	; 0
    412c:	08 c0       	rjmp	.+16     	; 0x413e <freeMemory+0x4a>
    total += 2; /* Add two bytes for the memory block's header  */
    412e:	80 81       	ld	r24, Z
    4130:	91 81       	ldd	r25, Z+1	; 0x01
    4132:	02 96       	adiw	r24, 0x02	; 2
    total += (int) current->sz;
    4134:	28 0f       	add	r18, r24
    4136:	39 1f       	adc	r19, r25
/* Calculates the size of the free list */
int freeListSize() {
  struct __freelist* current;
  int total = 0;

  for (current = __flp; current; current = current->nx) {
    4138:	02 80       	ldd	r0, Z+2	; 0x02
    413a:	f3 81       	ldd	r31, Z+3	; 0x03
    413c:	e0 2d       	mov	r30, r0
    413e:	30 97       	sbiw	r30, 0x00	; 0
    4140:	b1 f7       	brne	.-20     	; 0x412e <freeMemory+0x3a>

  if ((int)__brkval == 0) {
    free_memory = ((int)&free_memory) - ((int)&__heap_start);
  } else {
    free_memory = ((int)&free_memory) - ((int)__brkval);
    free_memory += freeListSize();
    4142:	24 0f       	add	r18, r20
    4144:	35 1f       	adc	r19, r21
    4146:	3a 83       	std	Y+2, r19	; 0x02
    4148:	29 83       	std	Y+1, r18	; 0x01
  }
  return free_memory;
    414a:	89 81       	ldd	r24, Y+1	; 0x01
    414c:	9a 81       	ldd	r25, Y+2	; 0x02
    414e:	0f 90       	pop	r0
    4150:	0f 90       	pop	r0
    4152:	cf 91       	pop	r28
    4154:	df 91       	pop	r29
    4156:	08 95       	ret

00004158 <_Z9breakTimemR12tmElements_t>:
// leap year calulator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+Y)>0) && !((1970+Y)%4) && ( ((1970+Y)%100) || !((1970+Y)%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    4158:	8f 92       	push	r8
    415a:	9f 92       	push	r9
    415c:	af 92       	push	r10
    415e:	bf 92       	push	r11
    4160:	cf 92       	push	r12
    4162:	df 92       	push	r13
    4164:	ef 92       	push	r14
    4166:	ff 92       	push	r15
    4168:	0f 93       	push	r16
    416a:	1f 93       	push	r17
    416c:	cf 93       	push	r28
    416e:	df 93       	push	r29
    4170:	7b 01       	movw	r14, r22
    4172:	8c 01       	movw	r16, r24
    4174:	ea 01       	movw	r28, r20
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    4176:	2c e3       	ldi	r18, 0x3C	; 60
    4178:	30 e0       	ldi	r19, 0x00	; 0
    417a:	40 e0       	ldi	r20, 0x00	; 0
    417c:	50 e0       	ldi	r21, 0x00	; 0
    417e:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <__udivmodsi4>
    4182:	68 83       	st	Y, r22
  time /= 60; // now it is minutes
    4184:	c8 01       	movw	r24, r16
    4186:	b7 01       	movw	r22, r14
    4188:	2c e3       	ldi	r18, 0x3C	; 60
    418a:	30 e0       	ldi	r19, 0x00	; 0
    418c:	40 e0       	ldi	r20, 0x00	; 0
    418e:	50 e0       	ldi	r21, 0x00	; 0
    4190:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <__udivmodsi4>
    4194:	12 2f       	mov	r17, r18
    4196:	03 2f       	mov	r16, r19
    4198:	f4 2e       	mov	r15, r20
    419a:	e5 2e       	mov	r14, r21
  tm.Minute = time % 60;
    419c:	62 2f       	mov	r22, r18
    419e:	73 2f       	mov	r23, r19
    41a0:	84 2f       	mov	r24, r20
    41a2:	95 2f       	mov	r25, r21
    41a4:	2c e3       	ldi	r18, 0x3C	; 60
    41a6:	30 e0       	ldi	r19, 0x00	; 0
    41a8:	40 e0       	ldi	r20, 0x00	; 0
    41aa:	50 e0       	ldi	r21, 0x00	; 0
    41ac:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <__udivmodsi4>
    41b0:	69 83       	std	Y+1, r22	; 0x01
  time /= 60; // now it is hours
    41b2:	61 2f       	mov	r22, r17
    41b4:	70 2f       	mov	r23, r16
    41b6:	8f 2d       	mov	r24, r15
    41b8:	9e 2d       	mov	r25, r14
    41ba:	2c e3       	ldi	r18, 0x3C	; 60
    41bc:	30 e0       	ldi	r19, 0x00	; 0
    41be:	40 e0       	ldi	r20, 0x00	; 0
    41c0:	50 e0       	ldi	r21, 0x00	; 0
    41c2:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <__udivmodsi4>
    41c6:	12 2f       	mov	r17, r18
    41c8:	03 2f       	mov	r16, r19
    41ca:	f4 2e       	mov	r15, r20
    41cc:	e5 2e       	mov	r14, r21
  tm.Hour = time % 24;
    41ce:	62 2f       	mov	r22, r18
    41d0:	73 2f       	mov	r23, r19
    41d2:	84 2f       	mov	r24, r20
    41d4:	95 2f       	mov	r25, r21
    41d6:	28 e1       	ldi	r18, 0x18	; 24
    41d8:	30 e0       	ldi	r19, 0x00	; 0
    41da:	40 e0       	ldi	r20, 0x00	; 0
    41dc:	50 e0       	ldi	r21, 0x00	; 0
    41de:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <__udivmodsi4>
    41e2:	6a 83       	std	Y+2, r22	; 0x02
  time /= 24; // now it is days
    41e4:	61 2f       	mov	r22, r17
    41e6:	70 2f       	mov	r23, r16
    41e8:	8f 2d       	mov	r24, r15
    41ea:	9e 2d       	mov	r25, r14
    41ec:	28 e1       	ldi	r18, 0x18	; 24
    41ee:	30 e0       	ldi	r19, 0x00	; 0
    41f0:	40 e0       	ldi	r20, 0x00	; 0
    41f2:	50 e0       	ldi	r21, 0x00	; 0
    41f4:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <__udivmodsi4>
    41f8:	79 01       	movw	r14, r18
    41fa:	8a 01       	movw	r16, r20
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    41fc:	c8 01       	movw	r24, r16
    41fe:	b7 01       	movw	r22, r14
    4200:	6c 5f       	subi	r22, 0xFC	; 252
    4202:	7f 4f       	sbci	r23, 0xFF	; 255
    4204:	8f 4f       	sbci	r24, 0xFF	; 255
    4206:	9f 4f       	sbci	r25, 0xFF	; 255
    4208:	27 e0       	ldi	r18, 0x07	; 7
    420a:	30 e0       	ldi	r19, 0x00	; 0
    420c:	40 e0       	ldi	r20, 0x00	; 0
    420e:	50 e0       	ldi	r21, 0x00	; 0
    4210:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <__udivmodsi4>
    4214:	6f 5f       	subi	r22, 0xFF	; 255
    4216:	6b 83       	std	Y+3, r22	; 0x03
    4218:	20 e0       	ldi	r18, 0x00	; 0
    421a:	aa 24       	eor	r10, r10
    421c:	bb 24       	eor	r11, r11
    421e:	65 01       	movw	r12, r10
    4220:	01 c0       	rjmp	.+2      	; 0x4224 <_Z9breakTimemR12tmElements_t+0xcc>
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
    4222:	2f 5f       	subi	r18, 0xFF	; 255
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    4224:	82 2e       	mov	r8, r18
    4226:	99 24       	eor	r9, r9
    4228:	f4 01       	movw	r30, r8
    422a:	ee 54       	subi	r30, 0x4E	; 78
    422c:	f8 4f       	sbci	r31, 0xF8	; 248
    422e:	cf 01       	movw	r24, r30
    4230:	83 70       	andi	r24, 0x03	; 3
    4232:	90 70       	andi	r25, 0x00	; 0
    4234:	89 2b       	or	r24, r25
    4236:	99 f4       	brne	.+38     	; 0x425e <_Z9breakTimemR12tmElements_t+0x106>
    4238:	cf 01       	movw	r24, r30
    423a:	64 e6       	ldi	r22, 0x64	; 100
    423c:	70 e0       	ldi	r23, 0x00	; 0
    423e:	0e 94 bd 3d 	call	0x7b7a	; 0x7b7a <__divmodhi4>
    4242:	89 2b       	or	r24, r25
    4244:	39 f4       	brne	.+14     	; 0x4254 <_Z9breakTimemR12tmElements_t+0xfc>
    4246:	cf 01       	movw	r24, r30
    4248:	60 e9       	ldi	r22, 0x90	; 144
    424a:	71 e0       	ldi	r23, 0x01	; 1
    424c:	0e 94 bd 3d 	call	0x7b7a	; 0x7b7a <__divmodhi4>
    4250:	89 2b       	or	r24, r25
    4252:	29 f4       	brne	.+10     	; 0x425e <_Z9breakTimemR12tmElements_t+0x106>
    4254:	8e e6       	ldi	r24, 0x6E	; 110
    4256:	91 e0       	ldi	r25, 0x01	; 1
    4258:	a0 e0       	ldi	r26, 0x00	; 0
    425a:	b0 e0       	ldi	r27, 0x00	; 0
    425c:	04 c0       	rjmp	.+8      	; 0x4266 <_Z9breakTimemR12tmElements_t+0x10e>
    425e:	8d e6       	ldi	r24, 0x6D	; 109
    4260:	91 e0       	ldi	r25, 0x01	; 1
    4262:	a0 e0       	ldi	r26, 0x00	; 0
    4264:	b0 e0       	ldi	r27, 0x00	; 0
    4266:	a8 0e       	add	r10, r24
    4268:	b9 1e       	adc	r11, r25
    426a:	ca 1e       	adc	r12, r26
    426c:	db 1e       	adc	r13, r27
    426e:	c5 01       	movw	r24, r10
    4270:	a0 e0       	ldi	r26, 0x00	; 0
    4272:	b0 e0       	ldi	r27, 0x00	; 0
    4274:	e8 16       	cp	r14, r24
    4276:	f9 06       	cpc	r15, r25
    4278:	0a 07       	cpc	r16, r26
    427a:	1b 07       	cpc	r17, r27
    427c:	90 f6       	brcc	.-92     	; 0x4222 <_Z9breakTimemR12tmElements_t+0xca>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    427e:	2e 83       	std	Y+6, r18	; 0x06
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    4280:	f4 01       	movw	r30, r8
    4282:	ee 54       	subi	r30, 0x4E	; 78
    4284:	f8 4f       	sbci	r31, 0xF8	; 248
    4286:	83 e0       	ldi	r24, 0x03	; 3
    4288:	88 2e       	mov	r8, r24
    428a:	91 2c       	mov	r9, r1
    428c:	8e 22       	and	r8, r30
    428e:	9f 22       	and	r9, r31
    4290:	81 14       	cp	r8, r1
    4292:	91 04       	cpc	r9, r1
    4294:	99 f4       	brne	.+38     	; 0x42bc <_Z9breakTimemR12tmElements_t+0x164>
    4296:	cf 01       	movw	r24, r30
    4298:	64 e6       	ldi	r22, 0x64	; 100
    429a:	70 e0       	ldi	r23, 0x00	; 0
    429c:	0e 94 bd 3d 	call	0x7b7a	; 0x7b7a <__divmodhi4>
    42a0:	89 2b       	or	r24, r25
    42a2:	39 f4       	brne	.+14     	; 0x42b2 <_Z9breakTimemR12tmElements_t+0x15a>
    42a4:	cf 01       	movw	r24, r30
    42a6:	60 e9       	ldi	r22, 0x90	; 144
    42a8:	71 e0       	ldi	r23, 0x01	; 1
    42aa:	0e 94 bd 3d 	call	0x7b7a	; 0x7b7a <__divmodhi4>
    42ae:	89 2b       	or	r24, r25
    42b0:	29 f4       	brne	.+10     	; 0x42bc <_Z9breakTimemR12tmElements_t+0x164>
    42b2:	8e e6       	ldi	r24, 0x6E	; 110
    42b4:	91 e0       	ldi	r25, 0x01	; 1
    42b6:	a0 e0       	ldi	r26, 0x00	; 0
    42b8:	b0 e0       	ldi	r27, 0x00	; 0
    42ba:	04 c0       	rjmp	.+8      	; 0x42c4 <_Z9breakTimemR12tmElements_t+0x16c>
    42bc:	8d e6       	ldi	r24, 0x6D	; 109
    42be:	91 e0       	ldi	r25, 0x01	; 1
    42c0:	a0 e0       	ldi	r26, 0x00	; 0
    42c2:	b0 e0       	ldi	r27, 0x00	; 0
  time  -= days; // now it is days in this year, starting at 0
    42c4:	a8 1a       	sub	r10, r24
    42c6:	b9 0a       	sbc	r11, r25
    42c8:	ca 0a       	sbc	r12, r26
    42ca:	db 0a       	sbc	r13, r27
    42cc:	98 01       	movw	r18, r16
    42ce:	87 01       	movw	r16, r14
    42d0:	0a 19       	sub	r16, r10
    42d2:	1b 09       	sbc	r17, r11
    42d4:	2c 09       	sbc	r18, r12
    42d6:	3d 09       	sbc	r19, r13
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    42d8:	cf 01       	movw	r24, r30
    42da:	64 e6       	ldi	r22, 0x64	; 100
    42dc:	70 e0       	ldi	r23, 0x00	; 0
    42de:	0e 94 bd 3d 	call	0x7b7a	; 0x7b7a <__divmodhi4>
    42e2:	7c 01       	movw	r14, r24
    42e4:	cf 01       	movw	r24, r30
    42e6:	60 e9       	ldi	r22, 0x90	; 144
    42e8:	71 e0       	ldi	r23, 0x01	; 1
    42ea:	0e 94 bd 3d 	call	0x7b7a	; 0x7b7a <__divmodhi4>
    42ee:	ac 01       	movw	r20, r24
    42f0:	e0 e1       	ldi	r30, 0x10	; 16
    42f2:	f1 e0       	ldi	r31, 0x01	; 1
    42f4:	60 e0       	ldi	r22, 0x00	; 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    42f6:	61 30       	cpi	r22, 0x01	; 1
    42f8:	51 f4       	brne	.+20     	; 0x430e <_Z9breakTimemR12tmElements_t+0x1b6>
      if (LEAP_YEAR(year)) {
    42fa:	81 14       	cp	r8, r1
    42fc:	91 04       	cpc	r9, r1
    42fe:	49 f4       	brne	.+18     	; 0x4312 <_Z9breakTimemR12tmElements_t+0x1ba>
    4300:	e1 14       	cp	r14, r1
    4302:	f1 04       	cpc	r15, r1
    4304:	41 f4       	brne	.+16     	; 0x4316 <_Z9breakTimemR12tmElements_t+0x1be>
    4306:	41 15       	cp	r20, r1
    4308:	51 05       	cpc	r21, r1
    430a:	29 f0       	breq	.+10     	; 0x4316 <_Z9breakTimemR12tmElements_t+0x1be>
    430c:	02 c0       	rjmp	.+4      	; 0x4312 <_Z9breakTimemR12tmElements_t+0x1ba>
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    430e:	80 81       	ld	r24, Z
    4310:	03 c0       	rjmp	.+6      	; 0x4318 <_Z9breakTimemR12tmElements_t+0x1c0>
    4312:	8c e1       	ldi	r24, 0x1C	; 28
    4314:	01 c0       	rjmp	.+2      	; 0x4318 <_Z9breakTimemR12tmElements_t+0x1c0>
    4316:	8d e1       	ldi	r24, 0x1D	; 29
    }
    
    if (time >= monthLength) {
    4318:	90 e0       	ldi	r25, 0x00	; 0
    431a:	a0 e0       	ldi	r26, 0x00	; 0
    431c:	b0 e0       	ldi	r27, 0x00	; 0
    431e:	08 17       	cp	r16, r24
    4320:	19 07       	cpc	r17, r25
    4322:	2a 07       	cpc	r18, r26
    4324:	3b 07       	cpc	r19, r27
    4326:	40 f0       	brcs	.+16     	; 0x4338 <_Z9breakTimemR12tmElements_t+0x1e0>
      time -= monthLength;
    4328:	08 1b       	sub	r16, r24
    432a:	19 0b       	sbc	r17, r25
    432c:	2a 0b       	sbc	r18, r26
    432e:	3b 0b       	sbc	r19, r27
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    4330:	6f 5f       	subi	r22, 0xFF	; 255
    4332:	31 96       	adiw	r30, 0x01	; 1
    4334:	6c 30       	cpi	r22, 0x0C	; 12
    4336:	f9 f6       	brne	.-66     	; 0x42f6 <_Z9breakTimemR12tmElements_t+0x19e>
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    4338:	6f 5f       	subi	r22, 0xFF	; 255
    433a:	6d 83       	std	Y+5, r22	; 0x05
  tm.Day = time + 1;     // day of month
    433c:	80 2f       	mov	r24, r16
    433e:	8f 5f       	subi	r24, 0xFF	; 255
    4340:	8c 83       	std	Y+4, r24	; 0x04
}
    4342:	df 91       	pop	r29
    4344:	cf 91       	pop	r28
    4346:	1f 91       	pop	r17
    4348:	0f 91       	pop	r16
    434a:	ff 90       	pop	r15
    434c:	ef 90       	pop	r14
    434e:	df 90       	pop	r13
    4350:	cf 90       	pop	r12
    4352:	bf 90       	pop	r11
    4354:	af 90       	pop	r10
    4356:	9f 90       	pop	r9
    4358:	8f 90       	pop	r8
    435a:	08 95       	ret

0000435c <_Z12refreshCachem>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    435c:	ef 92       	push	r14
    435e:	ff 92       	push	r15
    4360:	0f 93       	push	r16
    4362:	1f 93       	push	r17
    4364:	7b 01       	movw	r14, r22
    4366:	8c 01       	movw	r16, r24
  if (t != cacheTime) {
    4368:	80 91 1e 02 	lds	r24, 0x021E
    436c:	90 91 1f 02 	lds	r25, 0x021F
    4370:	a0 91 20 02 	lds	r26, 0x0220
    4374:	b0 91 21 02 	lds	r27, 0x0221
    4378:	e8 16       	cp	r14, r24
    437a:	f9 06       	cpc	r15, r25
    437c:	0a 07       	cpc	r16, r26
    437e:	1b 07       	cpc	r17, r27
    4380:	71 f0       	breq	.+28     	; 0x439e <_Z12refreshCachem+0x42>
    breakTime(t, tm); 
    4382:	c8 01       	movw	r24, r16
    4384:	b7 01       	movw	r22, r14
    4386:	43 e1       	ldi	r20, 0x13	; 19
    4388:	52 e0       	ldi	r21, 0x02	; 2
    438a:	0e 94 ac 20 	call	0x4158	; 0x4158 <_Z9breakTimemR12tmElements_t>
    cacheTime = t; 
    438e:	e0 92 1e 02 	sts	0x021E, r14
    4392:	f0 92 1f 02 	sts	0x021F, r15
    4396:	00 93 20 02 	sts	0x0220, r16
    439a:	10 93 21 02 	sts	0x0221, r17
  }
}
    439e:	1f 91       	pop	r17
    43a0:	0f 91       	pop	r16
    43a2:	ff 90       	pop	r15
    43a4:	ef 90       	pop	r14
    43a6:	08 95       	ret

000043a8 <_Z4yearm>:
int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
    43a8:	0e 94 ae 21 	call	0x435c	; 0x435c <_Z12refreshCachem>
    43ac:	20 91 19 02 	lds	r18, 0x0219
    43b0:	30 e0       	ldi	r19, 0x00	; 0
    43b2:	2e 54       	subi	r18, 0x4E	; 78
    43b4:	38 4f       	sbci	r19, 0xF8	; 248
  return tmYearToCalendar(tm.Year);
}
    43b6:	c9 01       	movw	r24, r18
    43b8:	08 95       	ret

000043ba <_Z8makeTimeR12tmElements_t>:
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
}

time_t makeTime(tmElements_t &tm){   
    43ba:	4f 92       	push	r4
    43bc:	5f 92       	push	r5
    43be:	6f 92       	push	r6
    43c0:	7f 92       	push	r7
    43c2:	8f 92       	push	r8
    43c4:	9f 92       	push	r9
    43c6:	af 92       	push	r10
    43c8:	bf 92       	push	r11
    43ca:	cf 92       	push	r12
    43cc:	df 92       	push	r13
    43ce:	ef 92       	push	r14
    43d0:	ff 92       	push	r15
    43d2:	0f 93       	push	r16
    43d4:	1f 93       	push	r17
    43d6:	cf 93       	push	r28
    43d8:	df 93       	push	r29
    43da:	4c 01       	movw	r8, r24
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
    43dc:	dc 01       	movw	r26, r24
    43de:	16 96       	adiw	r26, 0x06	; 6
    43e0:	1c 91       	ld	r17, X
    43e2:	61 2f       	mov	r22, r17
    43e4:	70 e0       	ldi	r23, 0x00	; 0
    43e6:	80 e0       	ldi	r24, 0x00	; 0
    43e8:	90 e0       	ldi	r25, 0x00	; 0
    43ea:	20 e8       	ldi	r18, 0x80	; 128
    43ec:	33 e3       	ldi	r19, 0x33	; 51
    43ee:	41 ee       	ldi	r20, 0xE1	; 225
    43f0:	51 e0       	ldi	r21, 0x01	; 1
    43f2:	0e 94 8a 3d 	call	0x7b14	; 0x7b14 <__mulsi3>
    43f6:	5b 01       	movw	r10, r22
    43f8:	6c 01       	movw	r12, r24
    43fa:	22 eb       	ldi	r18, 0xB2	; 178
    43fc:	37 e0       	ldi	r19, 0x07	; 7
  for (i = 0; i < tm.Year; i++) {
    43fe:	e1 2f       	mov	r30, r17
    4400:	f0 e0       	ldi	r31, 0x00	; 0
    4402:	ee 54       	subi	r30, 0x4E	; 78
    4404:	f8 4f       	sbci	r31, 0xF8	; 248
    4406:	1d c0       	rjmp	.+58     	; 0x4442 <_Z8makeTimeR12tmElements_t+0x88>
    if (LEAP_YEAR(i)) {
    4408:	c9 01       	movw	r24, r18
    440a:	83 70       	andi	r24, 0x03	; 3
    440c:	90 70       	andi	r25, 0x00	; 0
    440e:	89 2b       	or	r24, r25
    4410:	b1 f4       	brne	.+44     	; 0x443e <_Z8makeTimeR12tmElements_t+0x84>
    4412:	c9 01       	movw	r24, r18
    4414:	64 e6       	ldi	r22, 0x64	; 100
    4416:	70 e0       	ldi	r23, 0x00	; 0
    4418:	0e 94 bd 3d 	call	0x7b7a	; 0x7b7a <__divmodhi4>
    441c:	89 2b       	or	r24, r25
    441e:	39 f4       	brne	.+14     	; 0x442e <_Z8makeTimeR12tmElements_t+0x74>
    4420:	c9 01       	movw	r24, r18
    4422:	60 e9       	ldi	r22, 0x90	; 144
    4424:	71 e0       	ldi	r23, 0x01	; 1
    4426:	0e 94 bd 3d 	call	0x7b7a	; 0x7b7a <__divmodhi4>
    442a:	89 2b       	or	r24, r25
    442c:	41 f4       	brne	.+16     	; 0x443e <_Z8makeTimeR12tmElements_t+0x84>
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    442e:	80 e8       	ldi	r24, 0x80	; 128
    4430:	91 e5       	ldi	r25, 0x51	; 81
    4432:	a1 e0       	ldi	r26, 0x01	; 1
    4434:	b0 e0       	ldi	r27, 0x00	; 0
    4436:	a8 0e       	add	r10, r24
    4438:	b9 1e       	adc	r11, r25
    443a:	ca 1e       	adc	r12, r26
    443c:	db 1e       	adc	r13, r27
    443e:	2f 5f       	subi	r18, 0xFF	; 255
    4440:	3f 4f       	sbci	r19, 0xFF	; 255
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    4442:	2e 17       	cp	r18, r30
    4444:	3f 07       	cpc	r19, r31
    4446:	01 f7       	brne	.-64     	; 0x4408 <_Z8makeTimeR12tmElements_t+0x4e>
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    4448:	d4 01       	movw	r26, r8
    444a:	15 96       	adiw	r26, 0x05	; 5
    444c:	8c 91       	ld	r24, X
    444e:	48 2e       	mov	r4, r24
    4450:	55 24       	eor	r5, r5
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    4452:	c9 01       	movw	r24, r18
    4454:	64 e6       	ldi	r22, 0x64	; 100
    4456:	70 e0       	ldi	r23, 0x00	; 0
    4458:	0e 94 bd 3d 	call	0x7b7a	; 0x7b7a <__divmodhi4>
    445c:	7c 01       	movw	r14, r24
    445e:	c9 01       	movw	r24, r18
    4460:	60 e9       	ldi	r22, 0x90	; 144
    4462:	71 e0       	ldi	r23, 0x01	; 1
    4464:	0e 94 bd 3d 	call	0x7b7a	; 0x7b7a <__divmodhi4>
    4468:	8c 01       	movw	r16, r24
    446a:	c1 e0       	ldi	r28, 0x01	; 1
    446c:	d0 e0       	ldi	r29, 0x00	; 0
    446e:	93 e0       	ldi	r25, 0x03	; 3
    4470:	69 2e       	mov	r6, r25
    4472:	71 2c       	mov	r7, r1
    4474:	62 22       	and	r6, r18
    4476:	73 22       	and	r7, r19
    4478:	27 c0       	rjmp	.+78     	; 0x44c8 <_Z8makeTimeR12tmElements_t+0x10e>
    447a:	c2 30       	cpi	r28, 0x02	; 2
    447c:	d1 05       	cpc	r29, r1
    447e:	91 f4       	brne	.+36     	; 0x44a4 <_Z8makeTimeR12tmElements_t+0xea>
    4480:	61 14       	cp	r6, r1
    4482:	71 04       	cpc	r7, r1
    4484:	79 f4       	brne	.+30     	; 0x44a4 <_Z8makeTimeR12tmElements_t+0xea>
    4486:	e1 14       	cp	r14, r1
    4488:	f1 04       	cpc	r15, r1
    448a:	19 f4       	brne	.+6      	; 0x4492 <_Z8makeTimeR12tmElements_t+0xd8>
    448c:	01 15       	cp	r16, r1
    448e:	11 05       	cpc	r17, r1
    4490:	49 f4       	brne	.+18     	; 0x44a4 <_Z8makeTimeR12tmElements_t+0xea>
      seconds += SECS_PER_DAY * 29;
    4492:	80 e8       	ldi	r24, 0x80	; 128
    4494:	9b e3       	ldi	r25, 0x3B	; 59
    4496:	a6 e2       	ldi	r26, 0x26	; 38
    4498:	b0 e0       	ldi	r27, 0x00	; 0
    449a:	a8 0e       	add	r10, r24
    449c:	b9 1e       	adc	r11, r25
    449e:	ca 1e       	adc	r12, r26
    44a0:	db 1e       	adc	r13, r27
    44a2:	11 c0       	rjmp	.+34     	; 0x44c6 <_Z8makeTimeR12tmElements_t+0x10c>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    44a4:	fe 01       	movw	r30, r28
    44a6:	e1 5f       	subi	r30, 0xF1	; 241
    44a8:	fe 4f       	sbci	r31, 0xFE	; 254
    44aa:	60 81       	ld	r22, Z
    44ac:	70 e0       	ldi	r23, 0x00	; 0
    44ae:	80 e0       	ldi	r24, 0x00	; 0
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	20 e8       	ldi	r18, 0x80	; 128
    44b4:	31 e5       	ldi	r19, 0x51	; 81
    44b6:	41 e0       	ldi	r20, 0x01	; 1
    44b8:	50 e0       	ldi	r21, 0x00	; 0
    44ba:	0e 94 8a 3d 	call	0x7b14	; 0x7b14 <__mulsi3>
    44be:	a6 0e       	add	r10, r22
    44c0:	b7 1e       	adc	r11, r23
    44c2:	c8 1e       	adc	r12, r24
    44c4:	d9 1e       	adc	r13, r25
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    44c6:	21 96       	adiw	r28, 0x01	; 1
    44c8:	c4 15       	cp	r28, r4
    44ca:	d5 05       	cpc	r29, r5
    44cc:	b4 f2       	brlt	.-84     	; 0x447a <_Z8makeTimeR12tmElements_t+0xc0>
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    }
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
    44ce:	d4 01       	movw	r26, r8
    44d0:	12 96       	adiw	r26, 0x02	; 2
    44d2:	6c 91       	ld	r22, X
    44d4:	70 e0       	ldi	r23, 0x00	; 0
    44d6:	80 e0       	ldi	r24, 0x00	; 0
    44d8:	90 e0       	ldi	r25, 0x00	; 0
    44da:	20 e1       	ldi	r18, 0x10	; 16
    44dc:	3e e0       	ldi	r19, 0x0E	; 14
    44de:	40 e0       	ldi	r20, 0x00	; 0
    44e0:	50 e0       	ldi	r21, 0x00	; 0
    44e2:	0e 94 8a 3d 	call	0x7b14	; 0x7b14 <__mulsi3>
    44e6:	7b 01       	movw	r14, r22
    44e8:	8c 01       	movw	r16, r24
    44ea:	f4 01       	movw	r30, r8
    44ec:	61 81       	ldd	r22, Z+1	; 0x01
    44ee:	70 e0       	ldi	r23, 0x00	; 0
    44f0:	80 e0       	ldi	r24, 0x00	; 0
    44f2:	90 e0       	ldi	r25, 0x00	; 0
    44f4:	2c e3       	ldi	r18, 0x3C	; 60
    44f6:	30 e0       	ldi	r19, 0x00	; 0
    44f8:	40 e0       	ldi	r20, 0x00	; 0
    44fa:	50 e0       	ldi	r21, 0x00	; 0
    44fc:	0e 94 8a 3d 	call	0x7b14	; 0x7b14 <__mulsi3>
    4500:	e6 0e       	add	r14, r22
    4502:	f7 1e       	adc	r15, r23
    4504:	08 1f       	adc	r16, r24
    4506:	19 1f       	adc	r17, r25
  seconds+= tm.Hour * SECS_PER_HOUR;
    4508:	d4 01       	movw	r26, r8
    450a:	8c 91       	ld	r24, X
    450c:	e8 0e       	add	r14, r24
    450e:	f1 1c       	adc	r15, r1
    4510:	01 1d       	adc	r16, r1
    4512:	11 1d       	adc	r17, r1
  seconds+= tm.Minute * SECS_PER_MIN;
    4514:	14 96       	adiw	r26, 0x04	; 4
    4516:	6c 91       	ld	r22, X
    4518:	70 e0       	ldi	r23, 0x00	; 0
    451a:	61 50       	subi	r22, 0x01	; 1
    451c:	70 40       	sbci	r23, 0x00	; 0
    451e:	88 27       	eor	r24, r24
    4520:	77 fd       	sbrc	r23, 7
    4522:	80 95       	com	r24
    4524:	98 2f       	mov	r25, r24
    4526:	20 e8       	ldi	r18, 0x80	; 128
    4528:	31 e5       	ldi	r19, 0x51	; 81
    452a:	41 e0       	ldi	r20, 0x01	; 1
    452c:	50 e0       	ldi	r21, 0x00	; 0
    452e:	0e 94 8a 3d 	call	0x7b14	; 0x7b14 <__mulsi3>
    4532:	e6 0e       	add	r14, r22
    4534:	f7 1e       	adc	r15, r23
    4536:	08 1f       	adc	r16, r24
    4538:	19 1f       	adc	r17, r25
    453a:	ea 0c       	add	r14, r10
    453c:	fb 1c       	adc	r15, r11
    453e:	0c 1d       	adc	r16, r12
    4540:	1d 1d       	adc	r17, r13
  seconds+= tm.Second;
  return (time_t)seconds; 
}
    4542:	b7 01       	movw	r22, r14
    4544:	c8 01       	movw	r24, r16
    4546:	df 91       	pop	r29
    4548:	cf 91       	pop	r28
    454a:	1f 91       	pop	r17
    454c:	0f 91       	pop	r16
    454e:	ff 90       	pop	r15
    4550:	ef 90       	pop	r14
    4552:	df 90       	pop	r13
    4554:	cf 90       	pop	r12
    4556:	bf 90       	pop	r11
    4558:	af 90       	pop	r10
    455a:	9f 90       	pop	r9
    455c:	8f 90       	pop	r8
    455e:	7f 90       	pop	r7
    4560:	6f 90       	pop	r6
    4562:	5f 90       	pop	r5
    4564:	4f 90       	pop	r4
    4566:	08 95       	ret

00004568 <_Z7setTimem>:
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    4568:	60 93 09 02 	sts	0x0209, r22
    456c:	70 93 0a 02 	sts	0x020A, r23
    4570:	80 93 0b 02 	sts	0x020B, r24
    4574:	90 93 0c 02 	sts	0x020C, r25
  nextSyncTime = (uint32_t)t + syncInterval;
    4578:	20 91 06 01 	lds	r18, 0x0106
    457c:	30 91 07 01 	lds	r19, 0x0107
    4580:	40 91 08 01 	lds	r20, 0x0108
    4584:	50 91 09 01 	lds	r21, 0x0109
    4588:	26 0f       	add	r18, r22
    458a:	37 1f       	adc	r19, r23
    458c:	48 1f       	adc	r20, r24
    458e:	59 1f       	adc	r21, r25
    4590:	20 93 0d 02 	sts	0x020D, r18
    4594:	30 93 0e 02 	sts	0x020E, r19
    4598:	40 93 0f 02 	sts	0x020F, r20
    459c:	50 93 10 02 	sts	0x0210, r21
  Status = timeSet;
    45a0:	82 e0       	ldi	r24, 0x02	; 2
    45a2:	90 e0       	ldi	r25, 0x00	; 0
    45a4:	90 93 12 02 	sts	0x0212, r25
    45a8:	80 93 11 02 	sts	0x0211, r24
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    45ac:	0e 94 0b 32 	call	0x6416	; 0x6416 <millis>
    45b0:	60 93 1a 02 	sts	0x021A, r22
    45b4:	70 93 1b 02 	sts	0x021B, r23
    45b8:	80 93 1c 02 	sts	0x021C, r24
    45bc:	90 93 1d 02 	sts	0x021D, r25
} 
    45c0:	08 95       	ret

000045c2 <_Z3nowv>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    45c2:	ef 92       	push	r14
    45c4:	ff 92       	push	r15
    45c6:	0f 93       	push	r16
    45c8:	1f 93       	push	r17
    45ca:	1c c0       	rjmp	.+56     	; 0x4604 <_Z3nowv+0x42>
  while (millis() - prevMillis >= 1000){      
    sysTime++;
    45cc:	2f 5f       	subi	r18, 0xFF	; 255
    45ce:	3f 4f       	sbci	r19, 0xFF	; 255
    45d0:	4f 4f       	sbci	r20, 0xFF	; 255
    45d2:	5f 4f       	sbci	r21, 0xFF	; 255
    45d4:	20 93 09 02 	sts	0x0209, r18
    45d8:	30 93 0a 02 	sts	0x020A, r19
    45dc:	40 93 0b 02 	sts	0x020B, r20
    45e0:	50 93 0c 02 	sts	0x020C, r21
    prevMillis += 1000;	
    45e4:	88 ee       	ldi	r24, 0xE8	; 232
    45e6:	93 e0       	ldi	r25, 0x03	; 3
    45e8:	a0 e0       	ldi	r26, 0x00	; 0
    45ea:	b0 e0       	ldi	r27, 0x00	; 0
    45ec:	e8 0e       	add	r14, r24
    45ee:	f9 1e       	adc	r15, r25
    45f0:	0a 1f       	adc	r16, r26
    45f2:	1b 1f       	adc	r17, r27
    45f4:	e0 92 1a 02 	sts	0x021A, r14
    45f8:	f0 92 1b 02 	sts	0x021B, r15
    45fc:	00 93 1c 02 	sts	0x021C, r16
    4600:	10 93 1d 02 	sts	0x021D, r17
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
  while (millis() - prevMillis >= 1000){      
    4604:	0e 94 0b 32 	call	0x6416	; 0x6416 <millis>
    4608:	e0 90 1a 02 	lds	r14, 0x021A
    460c:	f0 90 1b 02 	lds	r15, 0x021B
    4610:	00 91 1c 02 	lds	r16, 0x021C
    4614:	10 91 1d 02 	lds	r17, 0x021D
    4618:	6e 19       	sub	r22, r14
    461a:	7f 09       	sbc	r23, r15
    461c:	80 0b       	sbc	r24, r16
    461e:	91 0b       	sbc	r25, r17
    4620:	20 91 09 02 	lds	r18, 0x0209
    4624:	30 91 0a 02 	lds	r19, 0x020A
    4628:	40 91 0b 02 	lds	r20, 0x020B
    462c:	50 91 0c 02 	lds	r21, 0x020C
    4630:	68 5e       	subi	r22, 0xE8	; 232
    4632:	73 40       	sbci	r23, 0x03	; 3
    4634:	80 40       	sbci	r24, 0x00	; 0
    4636:	90 40       	sbci	r25, 0x00	; 0
    4638:	48 f6       	brcc	.-110    	; 0x45cc <_Z3nowv+0xa>
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    463a:	80 91 0d 02 	lds	r24, 0x020D
    463e:	90 91 0e 02 	lds	r25, 0x020E
    4642:	a0 91 0f 02 	lds	r26, 0x020F
    4646:	b0 91 10 02 	lds	r27, 0x0210
    464a:	28 17       	cp	r18, r24
    464c:	39 07       	cpc	r19, r25
    464e:	4a 07       	cpc	r20, r26
    4650:	5b 07       	cpc	r21, r27
    4652:	c8 f1       	brcs	.+114    	; 0x46c6 <_Z3nowv+0x104>
    if (getTimePtr != 0) {
    4654:	e0 91 07 02 	lds	r30, 0x0207
    4658:	f0 91 08 02 	lds	r31, 0x0208
    465c:	30 97       	sbiw	r30, 0x00	; 0
    465e:	99 f1       	breq	.+102    	; 0x46c6 <_Z3nowv+0x104>
      time_t t = getTimePtr();
    4660:	09 95       	icall
      if (t != 0) {
    4662:	61 15       	cp	r22, r1
    4664:	71 05       	cpc	r23, r1
    4666:	81 05       	cpc	r24, r1
    4668:	91 05       	cpc	r25, r1
    466a:	19 f0       	breq	.+6      	; 0x4672 <_Z3nowv+0xb0>
        setTime(t);
    466c:	0e 94 b4 22 	call	0x4568	; 0x4568 <_Z7setTimem>
    4670:	2a c0       	rjmp	.+84     	; 0x46c6 <_Z3nowv+0x104>
      } else {
        nextSyncTime = sysTime + syncInterval;
    4672:	80 91 06 01 	lds	r24, 0x0106
    4676:	90 91 07 01 	lds	r25, 0x0107
    467a:	a0 91 08 01 	lds	r26, 0x0108
    467e:	b0 91 09 01 	lds	r27, 0x0109
    4682:	20 91 09 02 	lds	r18, 0x0209
    4686:	30 91 0a 02 	lds	r19, 0x020A
    468a:	40 91 0b 02 	lds	r20, 0x020B
    468e:	50 91 0c 02 	lds	r21, 0x020C
    4692:	82 0f       	add	r24, r18
    4694:	93 1f       	adc	r25, r19
    4696:	a4 1f       	adc	r26, r20
    4698:	b5 1f       	adc	r27, r21
    469a:	80 93 0d 02 	sts	0x020D, r24
    469e:	90 93 0e 02 	sts	0x020E, r25
    46a2:	a0 93 0f 02 	sts	0x020F, r26
    46a6:	b0 93 10 02 	sts	0x0210, r27
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    46aa:	20 e0       	ldi	r18, 0x00	; 0
    46ac:	30 e0       	ldi	r19, 0x00	; 0
    46ae:	80 91 11 02 	lds	r24, 0x0211
    46b2:	90 91 12 02 	lds	r25, 0x0212
    46b6:	89 2b       	or	r24, r25
    46b8:	11 f0       	breq	.+4      	; 0x46be <_Z3nowv+0xfc>
    46ba:	21 e0       	ldi	r18, 0x01	; 1
    46bc:	30 e0       	ldi	r19, 0x00	; 0
    46be:	30 93 12 02 	sts	0x0212, r19
    46c2:	20 93 11 02 	sts	0x0211, r18
    46c6:	60 91 09 02 	lds	r22, 0x0209
    46ca:	70 91 0a 02 	lds	r23, 0x020A
      }
    }
  }  
  return (time_t)sysTime;
}
    46ce:	80 91 0b 02 	lds	r24, 0x020B
    46d2:	90 91 0c 02 	lds	r25, 0x020C
    46d6:	1f 91       	pop	r17
    46d8:	0f 91       	pop	r16
    46da:	ff 90       	pop	r15
    46dc:	ef 90       	pop	r14
    46de:	08 95       	ret

000046e0 <_Z15setSyncProviderPFmvE>:
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    46e0:	90 93 08 02 	sts	0x0208, r25
    46e4:	80 93 07 02 	sts	0x0207, r24
  nextSyncTime = sysTime;
    46e8:	80 91 09 02 	lds	r24, 0x0209
    46ec:	90 91 0a 02 	lds	r25, 0x020A
    46f0:	a0 91 0b 02 	lds	r26, 0x020B
    46f4:	b0 91 0c 02 	lds	r27, 0x020C
    46f8:	80 93 0d 02 	sts	0x020D, r24
    46fc:	90 93 0e 02 	sts	0x020E, r25
    4700:	a0 93 0f 02 	sts	0x020F, r26
    4704:	b0 93 10 02 	sts	0x0210, r27
  now(); // this will sync the clock
    4708:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <_Z3nowv>
}
    470c:	08 95       	ret

0000470e <_Z10timeStatusv>:
  sysTime += adjustment;
}

// indicates if time has been set and recently synchronized
timeStatus_t timeStatus() {
  now(); // required to actually update the status
    470e:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <_Z3nowv>
  return Status;
}
    4712:	80 91 11 02 	lds	r24, 0x0211
    4716:	90 91 12 02 	lds	r25, 0x0212
    471a:	08 95       	ret

0000471c <_Z4yearv>:
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    471c:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <_Z3nowv>
    4720:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <_Z4yearm>
}
    4724:	08 95       	ret

00004726 <_Z4hourv>:
    cacheTime = t; 
  }
}

int hour() { // the hour now 
  return hour(now()); 
    4726:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <_Z3nowv>
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
    472a:	0e 94 ae 21 	call	0x435c	; 0x435c <_Z12refreshCachem>
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    472e:	80 91 15 02 	lds	r24, 0x0215
    4732:	90 e0       	ldi	r25, 0x00	; 0
    4734:	08 95       	ret

00004736 <_ZN15TimeAlarmsClassC1Ev>:
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    4736:	cf 93       	push	r28
    4738:	df 93       	push	r29
    473a:	dc 01       	movw	r26, r24
    473c:	fc 01       	movw	r30, r24
    473e:	20 e0       	ldi	r18, 0x00	; 0
    4740:	30 e0       	ldi	r19, 0x00	; 0
//**************************************************************
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
    4742:	82 85       	ldd	r24, Z+10	; 0x0a
  Mode.alarmType = dtNotAllocated;
    4744:	80 7c       	andi	r24, 0xC0	; 192
    4746:	82 87       	std	Z+10, r24	; 0x0a
  value = nextTrigger = 0;
    4748:	16 82       	std	Z+6, r1	; 0x06
    474a:	17 82       	std	Z+7, r1	; 0x07
    474c:	10 86       	std	Z+8, r1	; 0x08
    474e:	11 86       	std	Z+9, r1	; 0x09
    4750:	12 82       	std	Z+2, r1	; 0x02
    4752:	13 82       	std	Z+3, r1	; 0x03
    4754:	14 82       	std	Z+4, r1	; 0x04
    4756:	15 82       	std	Z+5, r1	; 0x05
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set 
    4758:	11 82       	std	Z+1, r1	; 0x01
    475a:	10 82       	st	Z, r1
    475c:	25 5f       	subi	r18, 0xF5	; 245
    475e:	3f 4f       	sbci	r19, 0xFF	; 255
    4760:	3b 96       	adiw	r30, 0x0b	; 11
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    4762:	22 34       	cpi	r18, 0x42	; 66
    4764:	31 05       	cpc	r19, r1
    4766:	69 f7       	brne	.-38     	; 0x4742 <_ZN15TimeAlarmsClassC1Ev+0xc>
{
  isServicing = false;
    4768:	ae 5b       	subi	r26, 0xBE	; 190
    476a:	bf 4f       	sbci	r27, 0xFF	; 255
    476c:	1c 92       	st	X, r1
    476e:	a2 54       	subi	r26, 0x42	; 66
    4770:	b0 40       	sbci	r27, 0x00	; 0
    4772:	ed 01       	movw	r28, r26
    4774:	20 e0       	ldi	r18, 0x00	; 0
    4776:	30 e0       	ldi	r19, 0x00	; 0
     }
     
     // returns true if this id is allocated
     bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
     {
        return( ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated );
    4778:	4b e0       	ldi	r20, 0x0B	; 11
    477a:	50 e0       	ldi	r21, 0x00	; 0
    477c:	24 9f       	mul	r18, r20
    477e:	f0 01       	movw	r30, r0
    4780:	25 9f       	mul	r18, r21
    4782:	f0 0d       	add	r31, r0
    4784:	34 9f       	mul	r19, r20
    4786:	f0 0d       	add	r31, r0
    4788:	11 24       	eor	r1, r1
    478a:	ea 0f       	add	r30, r26
    478c:	fb 1f       	adc	r31, r27
    478e:	92 85       	ldd	r25, Z+10	; 0x0a
    4790:	89 2f       	mov	r24, r25
    4792:	8f 70       	andi	r24, 0x0F	; 15
    4794:	61 f0       	breq	.+24     	; 0x47ae <_ZN15TimeAlarmsClassC1Ev+0x78>
    void TimeAlarmsClass::free(AlarmID_t ID)
    {
      if(isAllocated(ID))
      {
        Alarm[ID].Mode.isEnabled = false;
    	Alarm[ID].Mode.alarmType = dtNotAllocated;
    4796:	90 7e       	andi	r25, 0xE0	; 224
    4798:	92 87       	std	Z+10, r25	; 0x0a
        Alarm[ID].onTickHandler = 0;
    479a:	19 82       	std	Y+1, r1	; 0x01
    479c:	18 82       	st	Y, r1
    	Alarm[ID].value = 0;
    479e:	1a 82       	std	Y+2, r1	; 0x02
    47a0:	1b 82       	std	Y+3, r1	; 0x03
    47a2:	1c 82       	std	Y+4, r1	; 0x04
    47a4:	1d 82       	std	Y+5, r1	; 0x05
    	Alarm[ID].nextTrigger = 0;   	
    47a6:	1e 82       	std	Y+6, r1	; 0x06
    47a8:	1f 82       	std	Y+7, r1	; 0x07
    47aa:	18 86       	std	Y+8, r1	; 0x08
    47ac:	19 86       	std	Y+9, r1	; 0x09
    47ae:	2f 5f       	subi	r18, 0xFF	; 255
    47b0:	3f 4f       	sbci	r19, 0xFF	; 255
    47b2:	2b 96       	adiw	r28, 0x0b	; 11
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
  for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
    47b4:	26 30       	cpi	r18, 0x06	; 6
    47b6:	31 05       	cpc	r19, r1
    47b8:	09 f7       	brne	.-62     	; 0x477c <_ZN15TimeAlarmsClassC1Ev+0x46>
     free(id);   // ensure  all Alarms are cleared and available for allocation  
}
    47ba:	df 91       	pop	r29
    47bc:	cf 91       	pop	r28
    47be:	08 95       	ret

000047c0 <_GLOBAL__I__ZN10AlarmClassC2Ev>:
      }
      return dtINVALID_ALARM_ID; // no IDs available or time is invalid
    }
    
    // make one instance for the user to use
    TimeAlarmsClass Alarm = TimeAlarmsClass() ;
    47c0:	82 e2       	ldi	r24, 0x22	; 34
    47c2:	92 e0       	ldi	r25, 0x02	; 2
    47c4:	0e 94 9b 23 	call	0x4736	; 0x4736 <_ZN15TimeAlarmsClassC1Ev>
    47c8:	08 95       	ret

000047ca <_ZN10AlarmClass17updateNextTriggerEv>:

//**************************************************************
//* Private Methods

 
void AlarmClass::updateNextTrigger()
    47ca:	2f 92       	push	r2
    47cc:	3f 92       	push	r3
    47ce:	4f 92       	push	r4
    47d0:	5f 92       	push	r5
    47d2:	6f 92       	push	r6
    47d4:	7f 92       	push	r7
    47d6:	8f 92       	push	r8
    47d8:	9f 92       	push	r9
    47da:	af 92       	push	r10
    47dc:	bf 92       	push	r11
    47de:	cf 92       	push	r12
    47e0:	df 92       	push	r13
    47e2:	ef 92       	push	r14
    47e4:	ff 92       	push	r15
    47e6:	0f 93       	push	r16
    47e8:	1f 93       	push	r17
    47ea:	df 93       	push	r29
    47ec:	cf 93       	push	r28
    47ee:	00 d0       	rcall	.+0      	; 0x47f0 <_ZN10AlarmClass17updateNextTriggerEv+0x26>
    47f0:	00 d0       	rcall	.+0      	; 0x47f2 <_ZN10AlarmClass17updateNextTriggerEv+0x28>
    47f2:	00 d0       	rcall	.+0      	; 0x47f4 <_ZN10AlarmClass17updateNextTriggerEv+0x2a>
    47f4:	cd b7       	in	r28, 0x3d	; 61
    47f6:	de b7       	in	r29, 0x3e	; 62
    47f8:	9e 83       	std	Y+6, r25	; 0x06
    47fa:	8d 83       	std	Y+5, r24	; 0x05
{  
  if( (value != 0) && Mode.isEnabled )
    47fc:	fc 01       	movw	r30, r24
    47fe:	82 81       	ldd	r24, Z+2	; 0x02
    4800:	93 81       	ldd	r25, Z+3	; 0x03
    4802:	a4 81       	ldd	r26, Z+4	; 0x04
    4804:	b5 81       	ldd	r27, Z+5	; 0x05
    4806:	00 97       	sbiw	r24, 0x00	; 0
    4808:	a1 05       	cpc	r26, r1
    480a:	b1 05       	cpc	r27, r1
    480c:	09 f4       	brne	.+2      	; 0x4810 <_ZN10AlarmClass17updateNextTriggerEv+0x46>
    480e:	5b c1       	rjmp	.+694    	; 0x4ac6 <_ZN10AlarmClass17updateNextTriggerEv+0x2fc>
    4810:	82 85       	ldd	r24, Z+10	; 0x0a
    4812:	84 ff       	sbrs	r24, 4
    4814:	58 c1       	rjmp	.+688    	; 0x4ac6 <_ZN10AlarmClass17updateNextTriggerEv+0x2fc>
  {
    time_t time = now();
    4816:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <_Z3nowv>
    481a:	69 83       	std	Y+1, r22	; 0x01
    481c:	7a 83       	std	Y+2, r23	; 0x02
    481e:	8b 83       	std	Y+3, r24	; 0x03
    4820:	9c 83       	std	Y+4, r25	; 0x04
    if( dtIsAlarm(Mode.alarmType) && nextTrigger <= time )   // update alarm if next trigger is not yet in the future
    4822:	ad 81       	ldd	r26, Y+5	; 0x05
    4824:	be 81       	ldd	r27, Y+6	; 0x06
    4826:	1a 96       	adiw	r26, 0x0a	; 10
    4828:	3c 91       	ld	r19, X
    482a:	1a 97       	sbiw	r26, 0x0a	; 10
    482c:	23 2f       	mov	r18, r19
    482e:	2f 70       	andi	r18, 0x0F	; 15
    4830:	82 2f       	mov	r24, r18
    4832:	82 5f       	subi	r24, 0xF2	; 242
    4834:	8f 70       	andi	r24, 0x0F	; 15
    4836:	83 30       	cpi	r24, 0x03	; 3
    4838:	08 f0       	brcs	.+2      	; 0x483c <_ZN10AlarmClass17updateNextTriggerEv+0x72>
    483a:	28 c1       	rjmp	.+592    	; 0x4a8c <_ZN10AlarmClass17updateNextTriggerEv+0x2c2>
    483c:	16 96       	adiw	r26, 0x06	; 6
    483e:	8d 91       	ld	r24, X+
    4840:	9d 91       	ld	r25, X+
    4842:	0d 90       	ld	r0, X+
    4844:	bc 91       	ld	r27, X
    4846:	a0 2d       	mov	r26, r0
    4848:	49 81       	ldd	r20, Y+1	; 0x01
    484a:	5a 81       	ldd	r21, Y+2	; 0x02
    484c:	6b 81       	ldd	r22, Y+3	; 0x03
    484e:	7c 81       	ldd	r23, Y+4	; 0x04
    4850:	48 17       	cp	r20, r24
    4852:	59 07       	cpc	r21, r25
    4854:	6a 07       	cpc	r22, r26
    4856:	7b 07       	cpc	r23, r27
    4858:	08 f4       	brcc	.+2      	; 0x485c <_ZN10AlarmClass17updateNextTriggerEv+0x92>
    485a:	18 c1       	rjmp	.+560    	; 0x4a8c <_ZN10AlarmClass17updateNextTriggerEv+0x2c2>
    {      
      if(Mode.alarmType == dtExplicitAlarm ) // is the value a specific date and time in the future
    485c:	22 30       	cpi	r18, 0x02	; 2
    485e:	59 f4       	brne	.+22     	; 0x4876 <_ZN10AlarmClass17updateNextTriggerEv+0xac>
      {
        nextTrigger = value;  // yes, trigger on this value   
    4860:	ed 81       	ldd	r30, Y+5	; 0x05
    4862:	fe 81       	ldd	r31, Y+6	; 0x06
    4864:	82 81       	ldd	r24, Z+2	; 0x02
    4866:	93 81       	ldd	r25, Z+3	; 0x03
    4868:	a4 81       	ldd	r26, Z+4	; 0x04
    486a:	b5 81       	ldd	r27, Z+5	; 0x05
    486c:	86 83       	std	Z+6, r24	; 0x06
    486e:	97 83       	std	Z+7, r25	; 0x07
    4870:	a0 87       	std	Z+8, r26	; 0x08
    4872:	b1 87       	std	Z+9, r27	; 0x09
    4874:	0b c1       	rjmp	.+534    	; 0x4a8c <_ZN10AlarmClass17updateNextTriggerEv+0x2c2>
      }
      else if(Mode.alarmType == dtDailyAlarm)  //if this is a daily alarm
    4876:	23 30       	cpi	r18, 0x03	; 3
    4878:	09 f0       	breq	.+2      	; 0x487c <_ZN10AlarmClass17updateNextTriggerEv+0xb2>
    487a:	61 c0       	rjmp	.+194    	; 0x493e <_ZN10AlarmClass17updateNextTriggerEv+0x174>
      {
        if( value + previousMidnight(now()) <= time)
    487c:	ad 81       	ldd	r26, Y+5	; 0x05
    487e:	be 81       	ldd	r27, Y+6	; 0x06
    4880:	12 96       	adiw	r26, 0x02	; 2
    4882:	ed 90       	ld	r14, X+
    4884:	fd 90       	ld	r15, X+
    4886:	0d 91       	ld	r16, X+
    4888:	1c 91       	ld	r17, X
    488a:	15 97       	sbiw	r26, 0x05	; 5
    488c:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <_Z3nowv>
    4890:	20 e8       	ldi	r18, 0x80	; 128
    4892:	31 e5       	ldi	r19, 0x51	; 81
    4894:	41 e0       	ldi	r20, 0x01	; 1
    4896:	50 e0       	ldi	r21, 0x00	; 0
    4898:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <__udivmodsi4>
    489c:	ca 01       	movw	r24, r20
    489e:	b9 01       	movw	r22, r18
    48a0:	20 e8       	ldi	r18, 0x80	; 128
    48a2:	31 e5       	ldi	r19, 0x51	; 81
    48a4:	41 e0       	ldi	r20, 0x01	; 1
    48a6:	50 e0       	ldi	r21, 0x00	; 0
    48a8:	0e 94 8a 3d 	call	0x7b14	; 0x7b14 <__mulsi3>
    48ac:	e6 0e       	add	r14, r22
    48ae:	f7 1e       	adc	r15, r23
    48b0:	08 1f       	adc	r16, r24
    48b2:	19 1f       	adc	r17, r25
    48b4:	ed 81       	ldd	r30, Y+5	; 0x05
    48b6:	fe 81       	ldd	r31, Y+6	; 0x06
    48b8:	a2 80       	ldd	r10, Z+2	; 0x02
    48ba:	b3 80       	ldd	r11, Z+3	; 0x03
    48bc:	c4 80       	ldd	r12, Z+4	; 0x04
    48be:	d5 80       	ldd	r13, Z+5	; 0x05
    48c0:	29 81       	ldd	r18, Y+1	; 0x01
    48c2:	3a 81       	ldd	r19, Y+2	; 0x02
    48c4:	4b 81       	ldd	r20, Y+3	; 0x03
    48c6:	5c 81       	ldd	r21, Y+4	; 0x04
    48c8:	2e 15       	cp	r18, r14
    48ca:	3f 05       	cpc	r19, r15
    48cc:	40 07       	cpc	r20, r16
    48ce:	51 07       	cpc	r21, r17
    48d0:	c8 f0       	brcs	.+50     	; 0x4904 <_ZN10AlarmClass17updateNextTriggerEv+0x13a>
        {
          nextTrigger = value + nextMidnight(time); // if time has passed then set for tomorrow
    48d2:	ca 01       	movw	r24, r20
    48d4:	b9 01       	movw	r22, r18
    48d6:	20 e8       	ldi	r18, 0x80	; 128
    48d8:	31 e5       	ldi	r19, 0x51	; 81
    48da:	41 e0       	ldi	r20, 0x01	; 1
    48dc:	50 e0       	ldi	r21, 0x00	; 0
    48de:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <__udivmodsi4>
    48e2:	2f 5f       	subi	r18, 0xFF	; 255
    48e4:	3f 4f       	sbci	r19, 0xFF	; 255
    48e6:	4f 4f       	sbci	r20, 0xFF	; 255
    48e8:	5f 4f       	sbci	r21, 0xFF	; 255
    48ea:	ca 01       	movw	r24, r20
    48ec:	b9 01       	movw	r22, r18
    48ee:	20 e8       	ldi	r18, 0x80	; 128
    48f0:	31 e5       	ldi	r19, 0x51	; 81
    48f2:	41 e0       	ldi	r20, 0x01	; 1
    48f4:	50 e0       	ldi	r21, 0x00	; 0
    48f6:	0e 94 8a 3d 	call	0x7b14	; 0x7b14 <__mulsi3>
    48fa:	a6 0e       	add	r10, r22
    48fc:	b7 1e       	adc	r11, r23
    48fe:	c8 1e       	adc	r12, r24
    4900:	d9 1e       	adc	r13, r25
    4902:	ac c0       	rjmp	.+344    	; 0x4a5c <_ZN10AlarmClass17updateNextTriggerEv+0x292>
        }
        else
        {
          nextTrigger = value + previousMidnight(time);  // set the date to today and add the time given in value   
    4904:	69 81       	ldd	r22, Y+1	; 0x01
    4906:	7a 81       	ldd	r23, Y+2	; 0x02
    4908:	8b 81       	ldd	r24, Y+3	; 0x03
    490a:	9c 81       	ldd	r25, Y+4	; 0x04
    490c:	20 e8       	ldi	r18, 0x80	; 128
    490e:	31 e5       	ldi	r19, 0x51	; 81
    4910:	41 e0       	ldi	r20, 0x01	; 1
    4912:	50 e0       	ldi	r21, 0x00	; 0
    4914:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <__udivmodsi4>
    4918:	ca 01       	movw	r24, r20
    491a:	b9 01       	movw	r22, r18
    491c:	20 e8       	ldi	r18, 0x80	; 128
    491e:	31 e5       	ldi	r19, 0x51	; 81
    4920:	41 e0       	ldi	r20, 0x01	; 1
    4922:	50 e0       	ldi	r21, 0x00	; 0
    4924:	0e 94 8a 3d 	call	0x7b14	; 0x7b14 <__mulsi3>
    4928:	a6 0e       	add	r10, r22
    492a:	b7 1e       	adc	r11, r23
    492c:	c8 1e       	adc	r12, r24
    492e:	d9 1e       	adc	r13, r25
    4930:	ed 81       	ldd	r30, Y+5	; 0x05
    4932:	fe 81       	ldd	r31, Y+6	; 0x06
    4934:	a6 82       	std	Z+6, r10	; 0x06
    4936:	b7 82       	std	Z+7, r11	; 0x07
    4938:	c0 86       	std	Z+8, r12	; 0x08
    493a:	d1 86       	std	Z+9, r13	; 0x09
    493c:	a7 c0       	rjmp	.+334    	; 0x4a8c <_ZN10AlarmClass17updateNextTriggerEv+0x2c2>
        }
      }
      else if(Mode.alarmType == dtWeeklyAlarm)  // if this is a weekly alarm
    493e:	24 30       	cpi	r18, 0x04	; 4
    4940:	09 f0       	breq	.+2      	; 0x4944 <_ZN10AlarmClass17updateNextTriggerEv+0x17a>
    4942:	a0 c0       	rjmp	.+320    	; 0x4a84 <_ZN10AlarmClass17updateNextTriggerEv+0x2ba>
      {
        if( (value + previousSunday(now())) <= time)
    4944:	ad 81       	ldd	r26, Y+5	; 0x05
    4946:	be 81       	ldd	r27, Y+6	; 0x06
    4948:	12 96       	adiw	r26, 0x02	; 2
    494a:	6d 90       	ld	r6, X+
    494c:	7d 90       	ld	r7, X+
    494e:	8d 90       	ld	r8, X+
    4950:	9c 90       	ld	r9, X
    4952:	15 97       	sbiw	r26, 0x05	; 5
    4954:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <_Z3nowv>
    4958:	7b 01       	movw	r14, r22
    495a:	8c 01       	movw	r16, r24
    495c:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <_Z3nowv>
    4960:	5b 01       	movw	r10, r22
    4962:	6c 01       	movw	r12, r24
    4964:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <_Z3nowv>
    4968:	1b 01       	movw	r2, r22
    496a:	2c 01       	movw	r4, r24
    496c:	e6 0c       	add	r14, r6
    496e:	f7 1c       	adc	r15, r7
    4970:	08 1d       	adc	r16, r8
    4972:	19 1d       	adc	r17, r9
    4974:	c6 01       	movw	r24, r12
    4976:	b5 01       	movw	r22, r10
    4978:	20 e8       	ldi	r18, 0x80	; 128
    497a:	31 e5       	ldi	r19, 0x51	; 81
    497c:	41 e0       	ldi	r20, 0x01	; 1
    497e:	50 e0       	ldi	r21, 0x00	; 0
    4980:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <__udivmodsi4>
    4984:	e6 1a       	sub	r14, r22
    4986:	f7 0a       	sbc	r15, r23
    4988:	08 0b       	sbc	r16, r24
    498a:	19 0b       	sbc	r17, r25
    498c:	c2 01       	movw	r24, r4
    498e:	b1 01       	movw	r22, r2
    4990:	20 e8       	ldi	r18, 0x80	; 128
    4992:	31 e5       	ldi	r19, 0x51	; 81
    4994:	41 e0       	ldi	r20, 0x01	; 1
    4996:	50 e0       	ldi	r21, 0x00	; 0
    4998:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <__udivmodsi4>
    499c:	2c 5f       	subi	r18, 0xFC	; 252
    499e:	3f 4f       	sbci	r19, 0xFF	; 255
    49a0:	4f 4f       	sbci	r20, 0xFF	; 255
    49a2:	5f 4f       	sbci	r21, 0xFF	; 255
    49a4:	ca 01       	movw	r24, r20
    49a6:	b9 01       	movw	r22, r18
    49a8:	27 e0       	ldi	r18, 0x07	; 7
    49aa:	30 e0       	ldi	r19, 0x00	; 0
    49ac:	40 e0       	ldi	r20, 0x00	; 0
    49ae:	50 e0       	ldi	r21, 0x00	; 0
    49b0:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <__udivmodsi4>
    49b4:	20 e8       	ldi	r18, 0x80	; 128
    49b6:	31 e5       	ldi	r19, 0x51	; 81
    49b8:	41 e0       	ldi	r20, 0x01	; 1
    49ba:	50 e0       	ldi	r21, 0x00	; 0
    49bc:	0e 94 8a 3d 	call	0x7b14	; 0x7b14 <__mulsi3>
    49c0:	e6 1a       	sub	r14, r22
    49c2:	f7 0a       	sbc	r15, r23
    49c4:	08 0b       	sbc	r16, r24
    49c6:	19 0b       	sbc	r17, r25
    49c8:	ed 81       	ldd	r30, Y+5	; 0x05
    49ca:	fe 81       	ldd	r31, Y+6	; 0x06
    49cc:	a2 80       	ldd	r10, Z+2	; 0x02
    49ce:	b3 80       	ldd	r11, Z+3	; 0x03
    49d0:	c4 80       	ldd	r12, Z+4	; 0x04
    49d2:	d5 80       	ldd	r13, Z+5	; 0x05
    49d4:	29 81       	ldd	r18, Y+1	; 0x01
    49d6:	3a 81       	ldd	r19, Y+2	; 0x02
    49d8:	4b 81       	ldd	r20, Y+3	; 0x03
    49da:	5c 81       	ldd	r21, Y+4	; 0x04
    49dc:	2e 15       	cp	r18, r14
    49de:	3f 05       	cpc	r19, r15
    49e0:	40 07       	cpc	r20, r16
    49e2:	51 07       	cpc	r21, r17
    49e4:	08 f4       	brcc	.+2      	; 0x49e8 <_ZN10AlarmClass17updateNextTriggerEv+0x21e>
    49e6:	43 c0       	rjmp	.+134    	; 0x4a6e <_ZN10AlarmClass17updateNextTriggerEv+0x2a4>
        {
          nextTrigger = value + nextSunday(time); // if day has passed then set for the next week.
    49e8:	40 e8       	ldi	r20, 0x80	; 128
    49ea:	5a e3       	ldi	r21, 0x3A	; 58
    49ec:	69 e0       	ldi	r22, 0x09	; 9
    49ee:	70 e0       	ldi	r23, 0x00	; 0
    49f0:	a4 0e       	add	r10, r20
    49f2:	b5 1e       	adc	r11, r21
    49f4:	c6 1e       	adc	r12, r22
    49f6:	d7 1e       	adc	r13, r23
    49f8:	69 81       	ldd	r22, Y+1	; 0x01
    49fa:	7a 81       	ldd	r23, Y+2	; 0x02
    49fc:	8b 81       	ldd	r24, Y+3	; 0x03
    49fe:	9c 81       	ldd	r25, Y+4	; 0x04
    4a00:	a6 0e       	add	r10, r22
    4a02:	b7 1e       	adc	r11, r23
    4a04:	c8 1e       	adc	r12, r24
    4a06:	d9 1e       	adc	r13, r25
    4a08:	20 e8       	ldi	r18, 0x80	; 128
    4a0a:	31 e5       	ldi	r19, 0x51	; 81
    4a0c:	41 e0       	ldi	r20, 0x01	; 1
    4a0e:	50 e0       	ldi	r21, 0x00	; 0
    4a10:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <__udivmodsi4>
    4a14:	a6 1a       	sub	r10, r22
    4a16:	b7 0a       	sbc	r11, r23
    4a18:	c8 0a       	sbc	r12, r24
    4a1a:	d9 0a       	sbc	r13, r25
    4a1c:	69 81       	ldd	r22, Y+1	; 0x01
    4a1e:	7a 81       	ldd	r23, Y+2	; 0x02
    4a20:	8b 81       	ldd	r24, Y+3	; 0x03
    4a22:	9c 81       	ldd	r25, Y+4	; 0x04
    4a24:	20 e8       	ldi	r18, 0x80	; 128
    4a26:	31 e5       	ldi	r19, 0x51	; 81
    4a28:	41 e0       	ldi	r20, 0x01	; 1
    4a2a:	50 e0       	ldi	r21, 0x00	; 0
    4a2c:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <__udivmodsi4>
    4a30:	2c 5f       	subi	r18, 0xFC	; 252
    4a32:	3f 4f       	sbci	r19, 0xFF	; 255
    4a34:	4f 4f       	sbci	r20, 0xFF	; 255
    4a36:	5f 4f       	sbci	r21, 0xFF	; 255
    4a38:	ca 01       	movw	r24, r20
    4a3a:	b9 01       	movw	r22, r18
    4a3c:	27 e0       	ldi	r18, 0x07	; 7
    4a3e:	30 e0       	ldi	r19, 0x00	; 0
    4a40:	40 e0       	ldi	r20, 0x00	; 0
    4a42:	50 e0       	ldi	r21, 0x00	; 0
    4a44:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <__udivmodsi4>
    4a48:	20 e8       	ldi	r18, 0x80	; 128
    4a4a:	31 e5       	ldi	r19, 0x51	; 81
    4a4c:	41 e0       	ldi	r20, 0x01	; 1
    4a4e:	50 e0       	ldi	r21, 0x00	; 0
    4a50:	0e 94 8a 3d 	call	0x7b14	; 0x7b14 <__mulsi3>
    4a54:	a6 1a       	sub	r10, r22
    4a56:	b7 0a       	sbc	r11, r23
    4a58:	c8 0a       	sbc	r12, r24
    4a5a:	d9 0a       	sbc	r13, r25
    4a5c:	ad 81       	ldd	r26, Y+5	; 0x05
    4a5e:	be 81       	ldd	r27, Y+6	; 0x06
    4a60:	16 96       	adiw	r26, 0x06	; 6
    4a62:	ad 92       	st	X+, r10
    4a64:	bd 92       	st	X+, r11
    4a66:	cd 92       	st	X+, r12
    4a68:	dc 92       	st	X, r13
    4a6a:	19 97       	sbiw	r26, 0x09	; 9
    4a6c:	0f c0       	rjmp	.+30     	; 0x4a8c <_ZN10AlarmClass17updateNextTriggerEv+0x2c2>
        }
        else
        {
          nextTrigger = value + previousSunday(time);  // set the date to this week today and add the time given in value 
    4a6e:	29 81       	ldd	r18, Y+1	; 0x01
    4a70:	3a 81       	ldd	r19, Y+2	; 0x02
    4a72:	4b 81       	ldd	r20, Y+3	; 0x03
    4a74:	5c 81       	ldd	r21, Y+4	; 0x04
    4a76:	a2 0e       	add	r10, r18
    4a78:	b3 1e       	adc	r11, r19
    4a7a:	c4 1e       	adc	r12, r20
    4a7c:	d5 1e       	adc	r13, r21
    4a7e:	ca 01       	movw	r24, r20
    4a80:	b9 01       	movw	r22, r18
    4a82:	c2 cf       	rjmp	.-124    	; 0x4a08 <_ZN10AlarmClass17updateNextTriggerEv+0x23e>
        } 
      }
      else  // its not a recognized alarm type - this should not happen 
      {
        Mode.isEnabled = 0;  // Disable the alarm
    4a84:	3f 7e       	andi	r19, 0xEF	; 239
    4a86:	ed 81       	ldd	r30, Y+5	; 0x05
    4a88:	fe 81       	ldd	r31, Y+6	; 0x06
    4a8a:	32 87       	std	Z+10, r19	; 0x0a
      }	  
    }
    if( Mode.alarmType == dtTimer)
    4a8c:	ad 81       	ldd	r26, Y+5	; 0x05
    4a8e:	be 81       	ldd	r27, Y+6	; 0x06
    4a90:	1a 96       	adiw	r26, 0x0a	; 10
    4a92:	8c 91       	ld	r24, X
    4a94:	1a 97       	sbiw	r26, 0x0a	; 10
    4a96:	8f 70       	andi	r24, 0x0F	; 15
    4a98:	81 30       	cpi	r24, 0x01	; 1
    4a9a:	e9 f4       	brne	.+58     	; 0x4ad6 <_ZN10AlarmClass17updateNextTriggerEv+0x30c>
    {
      // its a timer
      nextTrigger = time + value;  // add the value to previous time (this ensures delay always at least Value seconds)
    4a9c:	12 96       	adiw	r26, 0x02	; 2
    4a9e:	8d 91       	ld	r24, X+
    4aa0:	9d 91       	ld	r25, X+
    4aa2:	0d 90       	ld	r0, X+
    4aa4:	bc 91       	ld	r27, X
    4aa6:	a0 2d       	mov	r26, r0
    4aa8:	29 81       	ldd	r18, Y+1	; 0x01
    4aaa:	3a 81       	ldd	r19, Y+2	; 0x02
    4aac:	4b 81       	ldd	r20, Y+3	; 0x03
    4aae:	5c 81       	ldd	r21, Y+4	; 0x04
    4ab0:	82 0f       	add	r24, r18
    4ab2:	93 1f       	adc	r25, r19
    4ab4:	a4 1f       	adc	r26, r20
    4ab6:	b5 1f       	adc	r27, r21
    4ab8:	ed 81       	ldd	r30, Y+5	; 0x05
    4aba:	fe 81       	ldd	r31, Y+6	; 0x06
    4abc:	86 83       	std	Z+6, r24	; 0x06
    4abe:	97 83       	std	Z+7, r25	; 0x07
    4ac0:	a0 87       	std	Z+8, r26	; 0x08
    4ac2:	b1 87       	std	Z+9, r27	; 0x09
    4ac4:	08 c0       	rjmp	.+16     	; 0x4ad6 <_ZN10AlarmClass17updateNextTriggerEv+0x30c>
    }
  }
  else
  {
    Mode.isEnabled = 0;  // Disable if the value is 0
    4ac6:	ad 81       	ldd	r26, Y+5	; 0x05
    4ac8:	be 81       	ldd	r27, Y+6	; 0x06
    4aca:	1a 96       	adiw	r26, 0x0a	; 10
    4acc:	8c 91       	ld	r24, X
    4ace:	1a 97       	sbiw	r26, 0x0a	; 10
    4ad0:	8f 7e       	andi	r24, 0xEF	; 239
    4ad2:	1a 96       	adiw	r26, 0x0a	; 10
    4ad4:	8c 93       	st	X, r24
  }
}
    4ad6:	26 96       	adiw	r28, 0x06	; 6
    4ad8:	0f b6       	in	r0, 0x3f	; 63
    4ada:	f8 94       	cli
    4adc:	de bf       	out	0x3e, r29	; 62
    4ade:	0f be       	out	0x3f, r0	; 63
    4ae0:	cd bf       	out	0x3d, r28	; 61
    4ae2:	cf 91       	pop	r28
    4ae4:	df 91       	pop	r29
    4ae6:	1f 91       	pop	r17
    4ae8:	0f 91       	pop	r16
    4aea:	ff 90       	pop	r15
    4aec:	ef 90       	pop	r14
    4aee:	df 90       	pop	r13
    4af0:	cf 90       	pop	r12
    4af2:	bf 90       	pop	r11
    4af4:	af 90       	pop	r10
    4af6:	9f 90       	pop	r9
    4af8:	8f 90       	pop	r8
    4afa:	7f 90       	pop	r7
    4afc:	6f 90       	pop	r6
    4afe:	5f 90       	pop	r5
    4b00:	4f 90       	pop	r4
    4b02:	3f 90       	pop	r3
    4b04:	2f 90       	pop	r2
    4b06:	08 95       	ret

00004b08 <_ZN15TimeAlarmsClass6enableEh>:
    
    AlarmID_t TimeAlarmsClass::timerRepeat(const int H,  const int M,  const int S, OnTick_t onTickHandler){ // trigger after the given number of seconds continuously
         return create( AlarmHMS(H,M,S), onTickHandler, IS_REPEAT, dtTimer);
    }
    
    void TimeAlarmsClass::enable(AlarmID_t ID)
    4b08:	ac 01       	movw	r20, r24
     }
     
     // returns true if this id is allocated
     bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
     {
        return( ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated );
    4b0a:	66 30       	cpi	r22, 0x06	; 6
    4b0c:	98 f5       	brcc	.+102    	; 0x4b74 <_ZN15TimeAlarmsClass6enableEh+0x6c>
    4b0e:	70 e0       	ldi	r23, 0x00	; 0
    4b10:	8b e0       	ldi	r24, 0x0B	; 11
    4b12:	90 e0       	ldi	r25, 0x00	; 0
    4b14:	68 9f       	mul	r22, r24
    4b16:	f0 01       	movw	r30, r0
    4b18:	69 9f       	mul	r22, r25
    4b1a:	f0 0d       	add	r31, r0
    4b1c:	78 9f       	mul	r23, r24
    4b1e:	f0 0d       	add	r31, r0
    4b20:	11 24       	eor	r1, r1
    4b22:	e4 0f       	add	r30, r20
    4b24:	f5 1f       	adc	r31, r21
    4b26:	82 85       	ldd	r24, Z+10	; 0x0a
    4b28:	8f 70       	andi	r24, 0x0F	; 15
    4b2a:	21 f1       	breq	.+72     	; 0x4b74 <_ZN15TimeAlarmsClass6enableEh+0x6c>
    }
    
    void TimeAlarmsClass::enable(AlarmID_t ID)
    {
      if(isAllocated(ID)) {
        Alarm[ID].Mode.isEnabled = (Alarm[ID].value != 0) && (Alarm[ID].onTickHandler != 0) ;  // only enable if value is non zero and a tick handler has been set
    4b2c:	82 81       	ldd	r24, Z+2	; 0x02
    4b2e:	93 81       	ldd	r25, Z+3	; 0x03
    4b30:	a4 81       	ldd	r26, Z+4	; 0x04
    4b32:	b5 81       	ldd	r27, Z+5	; 0x05
    4b34:	00 97       	sbiw	r24, 0x00	; 0
    4b36:	a1 05       	cpc	r26, r1
    4b38:	b1 05       	cpc	r27, r1
    4b3a:	11 f4       	brne	.+4      	; 0x4b40 <_ZN15TimeAlarmsClass6enableEh+0x38>
    4b3c:	20 e0       	ldi	r18, 0x00	; 0
    4b3e:	06 c0       	rjmp	.+12     	; 0x4b4c <_ZN15TimeAlarmsClass6enableEh+0x44>
    4b40:	20 e0       	ldi	r18, 0x00	; 0
    4b42:	80 81       	ld	r24, Z
    4b44:	91 81       	ldd	r25, Z+1	; 0x01
    4b46:	89 2b       	or	r24, r25
    4b48:	09 f0       	breq	.+2      	; 0x4b4c <_ZN15TimeAlarmsClass6enableEh+0x44>
    4b4a:	21 e0       	ldi	r18, 0x01	; 1
    4b4c:	8b e0       	ldi	r24, 0x0B	; 11
    4b4e:	90 e0       	ldi	r25, 0x00	; 0
    4b50:	68 9f       	mul	r22, r24
    4b52:	f0 01       	movw	r30, r0
    4b54:	69 9f       	mul	r22, r25
    4b56:	f0 0d       	add	r31, r0
    4b58:	78 9f       	mul	r23, r24
    4b5a:	f0 0d       	add	r31, r0
    4b5c:	11 24       	eor	r1, r1
    4b5e:	e4 0f       	add	r30, r20
    4b60:	f5 1f       	adc	r31, r21
    4b62:	22 95       	swap	r18
    4b64:	20 7f       	andi	r18, 0xF0	; 240
    4b66:	82 85       	ldd	r24, Z+10	; 0x0a
    4b68:	8f 7e       	andi	r24, 0xEF	; 239
    4b6a:	82 2b       	or	r24, r18
    4b6c:	82 87       	std	Z+10, r24	; 0x0a
        Alarm[ID].updateNextTrigger(); // trigger is updated whenever  this is called, even if already enabled	 
    4b6e:	cf 01       	movw	r24, r30
    4b70:	0e 94 e5 23 	call	0x47ca	; 0x47ca <_ZN10AlarmClass17updateNextTriggerEv>
    4b74:	08 95       	ret

00004b76 <_ZN15TimeAlarmsClass13serviceAlarmsEv>:
    }
    
    //***********************************************************
    //* Private Methods
    
    void TimeAlarmsClass::serviceAlarms()
    4b76:	cf 92       	push	r12
    4b78:	df 92       	push	r13
    4b7a:	ef 92       	push	r14
    4b7c:	ff 92       	push	r15
    4b7e:	0f 93       	push	r16
    4b80:	1f 93       	push	r17
    4b82:	cf 93       	push	r28
    4b84:	df 93       	push	r29
    4b86:	ec 01       	movw	r28, r24
    {
      if(! isServicing)
    4b88:	fc 01       	movw	r30, r24
    4b8a:	ee 5b       	subi	r30, 0xBE	; 190
    4b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b8e:	80 81       	ld	r24, Z
    4b90:	88 23       	and	r24, r24
    4b92:	09 f0       	breq	.+2      	; 0x4b96 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0x20>
    4b94:	5b c0       	rjmp	.+182    	; 0x4c4c <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xd6>
      {
        isServicing = true;
    4b96:	81 e0       	ldi	r24, 0x01	; 1
    4b98:	80 83       	st	Z, r24
        for( servicedAlarmId = 0; servicedAlarmId < dtNBR_ALARMS; servicedAlarmId++)
    4b9a:	fe 01       	movw	r30, r28
    4b9c:	ed 5b       	subi	r30, 0xBD	; 189
    4b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba0:	10 82       	st	Z, r1
    4ba2:	8f 01       	movw	r16, r30
        {
          if( Alarm[servicedAlarmId].Mode.isEnabled && (now() >= Alarm[servicedAlarmId].nextTrigger)  )
    4ba4:	9b e0       	ldi	r25, 0x0B	; 11
    4ba6:	c9 2e       	mov	r12, r25
    4ba8:	d1 2c       	mov	r13, r1
    4baa:	48 c0       	rjmp	.+144    	; 0x4c3c <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xc6>
    4bac:	90 e0       	ldi	r25, 0x00	; 0
    4bae:	8c 9d       	mul	r24, r12
    4bb0:	f0 01       	movw	r30, r0
    4bb2:	8d 9d       	mul	r24, r13
    4bb4:	f0 0d       	add	r31, r0
    4bb6:	9c 9d       	mul	r25, r12
    4bb8:	f0 0d       	add	r31, r0
    4bba:	11 24       	eor	r1, r1
    4bbc:	ec 0f       	add	r30, r28
    4bbe:	fd 1f       	adc	r31, r29
    4bc0:	82 85       	ldd	r24, Z+10	; 0x0a
    4bc2:	84 ff       	sbrs	r24, 4
    4bc4:	37 c0       	rjmp	.+110    	; 0x4c34 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xbe>
    4bc6:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <_Z3nowv>
    4bca:	f8 01       	movw	r30, r16
    4bcc:	a0 81       	ld	r26, Z
    4bce:	2a 2f       	mov	r18, r26
    4bd0:	30 e0       	ldi	r19, 0x00	; 0
    4bd2:	2c 9d       	mul	r18, r12
    4bd4:	f0 01       	movw	r30, r0
    4bd6:	2d 9d       	mul	r18, r13
    4bd8:	f0 0d       	add	r31, r0
    4bda:	3c 9d       	mul	r19, r12
    4bdc:	f0 0d       	add	r31, r0
    4bde:	11 24       	eor	r1, r1
    4be0:	ec 0f       	add	r30, r28
    4be2:	fd 1f       	adc	r31, r29
    4be4:	26 81       	ldd	r18, Z+6	; 0x06
    4be6:	37 81       	ldd	r19, Z+7	; 0x07
    4be8:	40 85       	ldd	r20, Z+8	; 0x08
    4bea:	51 85       	ldd	r21, Z+9	; 0x09
    4bec:	62 17       	cp	r22, r18
    4bee:	73 07       	cpc	r23, r19
    4bf0:	84 07       	cpc	r24, r20
    4bf2:	95 07       	cpc	r25, r21
    4bf4:	f8 f0       	brcs	.+62     	; 0x4c34 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xbe>
          {
            OnTick_t TickHandler = Alarm[servicedAlarmId].onTickHandler;
    4bf6:	e0 80       	ld	r14, Z
    4bf8:	f1 80       	ldd	r15, Z+1	; 0x01
            if(Alarm[servicedAlarmId].Mode.isOneShot)
    4bfa:	92 85       	ldd	r25, Z+10	; 0x0a
    4bfc:	95 ff       	sbrs	r25, 5
    4bfe:	12 c0       	rjmp	.+36     	; 0x4c24 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xae>
     }
     
     // returns true if this id is allocated
     bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
     {
        return( ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated );
    4c00:	a6 30       	cpi	r26, 0x06	; 6
    4c02:	98 f4       	brcc	.+38     	; 0x4c2a <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xb4>
    4c04:	89 2f       	mov	r24, r25
    4c06:	8f 70       	andi	r24, 0x0F	; 15
    4c08:	81 f0       	breq	.+32     	; 0x4c2a <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xb4>
    void TimeAlarmsClass::free(AlarmID_t ID)
    {
      if(isAllocated(ID))
      {
        Alarm[ID].Mode.isEnabled = false;
    	Alarm[ID].Mode.alarmType = dtNotAllocated;
    4c0a:	90 7e       	andi	r25, 0xE0	; 224
    4c0c:	92 87       	std	Z+10, r25	; 0x0a
        Alarm[ID].onTickHandler = 0;
    4c0e:	11 82       	std	Z+1, r1	; 0x01
    4c10:	10 82       	st	Z, r1
    	Alarm[ID].value = 0;
    4c12:	12 82       	std	Z+2, r1	; 0x02
    4c14:	13 82       	std	Z+3, r1	; 0x03
    4c16:	14 82       	std	Z+4, r1	; 0x04
    4c18:	15 82       	std	Z+5, r1	; 0x05
    	Alarm[ID].nextTrigger = 0;   	
    4c1a:	16 82       	std	Z+6, r1	; 0x06
    4c1c:	17 82       	std	Z+7, r1	; 0x07
    4c1e:	10 86       	std	Z+8, r1	; 0x08
    4c20:	11 86       	std	Z+9, r1	; 0x09
    4c22:	03 c0       	rjmp	.+6      	; 0x4c2a <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xb4>
          {
            OnTick_t TickHandler = Alarm[servicedAlarmId].onTickHandler;
            if(Alarm[servicedAlarmId].Mode.isOneShot)
               free(servicedAlarmId);  // free the ID if mode is OnShot		
            else   
               Alarm[servicedAlarmId].updateNextTrigger();
    4c24:	cf 01       	movw	r24, r30
    4c26:	0e 94 e5 23 	call	0x47ca	; 0x47ca <_ZN10AlarmClass17updateNextTriggerEv>
            if( TickHandler != NULL) {        
    4c2a:	e1 14       	cp	r14, r1
    4c2c:	f1 04       	cpc	r15, r1
    4c2e:	11 f0       	breq	.+4      	; 0x4c34 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xbe>
              (*TickHandler)();     // call the handler  
    4c30:	f7 01       	movw	r30, r14
    4c32:	09 95       	icall
    void TimeAlarmsClass::serviceAlarms()
    {
      if(! isServicing)
      {
        isServicing = true;
        for( servicedAlarmId = 0; servicedAlarmId < dtNBR_ALARMS; servicedAlarmId++)
    4c34:	f8 01       	movw	r30, r16
    4c36:	80 81       	ld	r24, Z
    4c38:	8f 5f       	subi	r24, 0xFF	; 255
    4c3a:	80 83       	st	Z, r24
    4c3c:	f8 01       	movw	r30, r16
    4c3e:	80 81       	ld	r24, Z
    4c40:	86 30       	cpi	r24, 0x06	; 6
    4c42:	08 f4       	brcc	.+2      	; 0x4c46 <_ZN15TimeAlarmsClass13serviceAlarmsEv+0xd0>
    4c44:	b3 cf       	rjmp	.-154    	; 0x4bac <_ZN15TimeAlarmsClass13serviceAlarmsEv+0x36>
            if( TickHandler != NULL) {        
              (*TickHandler)();     // call the handler  
            }
          }
        }
        isServicing = false;
    4c46:	ce 5b       	subi	r28, 0xBE	; 190
    4c48:	df 4f       	sbci	r29, 0xFF	; 255
    4c4a:	18 82       	st	Y, r1
      }
    }
    4c4c:	df 91       	pop	r29
    4c4e:	cf 91       	pop	r28
    4c50:	1f 91       	pop	r17
    4c52:	0f 91       	pop	r16
    4c54:	ff 90       	pop	r15
    4c56:	ef 90       	pop	r14
    4c58:	df 90       	pop	r13
    4c5a:	cf 90       	pop	r12
    4c5c:	08 95       	ret

00004c5e <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th>:
    	}
        return nextTrigger == 0xffffffff ? 0 : nextTrigger;  	
     }
    
    // attempt to create an alarm and return true if successful
    AlarmID_t TimeAlarmsClass::create( time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType, uint8_t isEnabled) 
    4c5e:	4f 92       	push	r4
    4c60:	5f 92       	push	r5
    4c62:	6f 92       	push	r6
    4c64:	7f 92       	push	r7
    4c66:	8f 92       	push	r8
    4c68:	9f 92       	push	r9
    4c6a:	af 92       	push	r10
    4c6c:	bf 92       	push	r11
    4c6e:	cf 92       	push	r12
    4c70:	ef 92       	push	r14
    4c72:	ff 92       	push	r15
    4c74:	0f 93       	push	r16
    4c76:	1f 93       	push	r17
    4c78:	cf 93       	push	r28
    4c7a:	df 93       	push	r29
    4c7c:	2c 01       	movw	r4, r24
    4c7e:	4a 01       	movw	r8, r20
    4c80:	5b 01       	movw	r10, r22
    4c82:	39 01       	movw	r6, r18
    4c84:	e7 01       	movw	r28, r14
    {
      if( ! (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR)) // only create alarm ids if the time is at least Jan 1 1971
    4c86:	c7 01       	movw	r24, r14
    4c88:	02 97       	sbiw	r24, 0x02	; 2
    4c8a:	03 97       	sbiw	r24, 0x03	; 3
    4c8c:	38 f4       	brcc	.+14     	; 0x4c9c <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0x3e>
    4c8e:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <_Z3nowv>
    4c92:	60 50       	subi	r22, 0x00	; 0
    4c94:	72 4e       	sbci	r23, 0xE2	; 226
    4c96:	8f 4d       	sbci	r24, 0xDF	; 223
    4c98:	91 40       	sbci	r25, 0x01	; 1
    4c9a:	c0 f1       	brcs	.+112    	; 0x4d0c <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xae>
    4c9c:	60 e0       	ldi	r22, 0x00	; 0
    4c9e:	70 e0       	ldi	r23, 0x00	; 0
      {  
    	for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
        {
          if( Alarm[id].Mode.alarmType == dtNotAllocated )
    4ca0:	2b e0       	ldi	r18, 0x0B	; 11
    4ca2:	30 e0       	ldi	r19, 0x00	; 0
     }
    
    // attempt to create an alarm and return true if successful
    AlarmID_t TimeAlarmsClass::create( time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType, uint8_t isEnabled) 
    {
      if( ! (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR)) // only create alarm ids if the time is at least Jan 1 1971
    4ca4:	16 2f       	mov	r17, r22
      {  
    	for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
        {
          if( Alarm[id].Mode.alarmType == dtNotAllocated )
    4ca6:	62 9f       	mul	r22, r18
    4ca8:	f0 01       	movw	r30, r0
    4caa:	63 9f       	mul	r22, r19
    4cac:	f0 0d       	add	r31, r0
    4cae:	72 9f       	mul	r23, r18
    4cb0:	f0 0d       	add	r31, r0
    4cb2:	11 24       	eor	r1, r1
    4cb4:	e4 0d       	add	r30, r4
    4cb6:	f5 1d       	adc	r31, r5
    4cb8:	df 01       	movw	r26, r30
    4cba:	1a 96       	adiw	r26, 0x0a	; 10
    4cbc:	82 85       	ldd	r24, Z+10	; 0x0a
    4cbe:	8f 70       	andi	r24, 0x0F	; 15
    4cc0:	01 f5       	brne	.+64     	; 0x4d02 <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xa4>
    	  {
    	  // here if there is an Alarm id that is not allocated
      	    Alarm[id].onTickHandler = onTickHandler;
    4cc2:	71 82       	std	Z+1, r7	; 0x01
    4cc4:	60 82       	st	Z, r6
    	    Alarm[id].Mode.isOneShot = isOneShot;
    4cc6:	01 70       	andi	r16, 0x01	; 1
    4cc8:	02 95       	swap	r16
    4cca:	00 0f       	add	r16, r16
    4ccc:	00 7e       	andi	r16, 0xE0	; 224
    4cce:	8c 91       	ld	r24, X
    4cd0:	80 7d       	andi	r24, 0xD0	; 208
    	    Alarm[id].Mode.alarmType = alarmType;
    4cd2:	9e 01       	movw	r18, r28
    4cd4:	2f 70       	andi	r18, 0x0F	; 15
    4cd6:	80 2b       	or	r24, r16
    4cd8:	82 2b       	or	r24, r18
    4cda:	8c 93       	st	X, r24
    	    Alarm[id].value = value;
    4cdc:	82 82       	std	Z+2, r8	; 0x02
    4cde:	93 82       	std	Z+3, r9	; 0x03
    4ce0:	a4 82       	std	Z+4, r10	; 0x04
    4ce2:	b5 82       	std	Z+5, r11	; 0x05
    	    isEnabled ?  enable(id) : disable(id);   
    4ce4:	cc 20       	and	r12, r12
    4ce6:	21 f0       	breq	.+8      	; 0x4cf0 <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0x92>
    4ce8:	c2 01       	movw	r24, r4
    4cea:	0e 94 84 25 	call	0x4b08	; 0x4b08 <_ZN15TimeAlarmsClass6enableEh>
    4cee:	0f c0       	rjmp	.+30     	; 0x4d0e <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xb0>
     }
     
     // returns true if this id is allocated
     bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
     {
        return( ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated );
    4cf0:	66 30       	cpi	r22, 0x06	; 6
    4cf2:	68 f4       	brcc	.+26     	; 0x4d0e <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xb0>
    4cf4:	9c 91       	ld	r25, X
    4cf6:	89 2f       	mov	r24, r25
    4cf8:	8f 70       	andi	r24, 0x0F	; 15
    4cfa:	49 f0       	breq	.+18     	; 0x4d0e <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xb0>
    }
    
    void TimeAlarmsClass::disable(AlarmID_t ID)
    {
      if(isAllocated(ID))
        Alarm[ID].Mode.isEnabled = false;
    4cfc:	9f 7e       	andi	r25, 0xEF	; 239
    4cfe:	9c 93       	st	X, r25
    4d00:	06 c0       	rjmp	.+12     	; 0x4d0e <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0xb0>
    4d02:	6f 5f       	subi	r22, 0xFF	; 255
    4d04:	7f 4f       	sbci	r23, 0xFF	; 255
    // attempt to create an alarm and return true if successful
    AlarmID_t TimeAlarmsClass::create( time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType, uint8_t isEnabled) 
    {
      if( ! (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR)) // only create alarm ids if the time is at least Jan 1 1971
      {  
    	for(uint8_t id = 0; id < dtNBR_ALARMS; id++)
    4d06:	66 30       	cpi	r22, 0x06	; 6
    4d08:	71 05       	cpc	r23, r1
    4d0a:	61 f6       	brne	.-104    	; 0x4ca4 <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th+0x46>
    4d0c:	1f ef       	ldi	r17, 0xFF	; 255
            return id;  // alarm created ok
    	  }  
        }
      }
      return dtINVALID_ALARM_ID; // no IDs available or time is invalid
    }
    4d0e:	81 2f       	mov	r24, r17
    4d10:	df 91       	pop	r29
    4d12:	cf 91       	pop	r28
    4d14:	1f 91       	pop	r17
    4d16:	0f 91       	pop	r16
    4d18:	ff 90       	pop	r15
    4d1a:	ef 90       	pop	r14
    4d1c:	cf 90       	pop	r12
    4d1e:	bf 90       	pop	r11
    4d20:	af 90       	pop	r10
    4d22:	9f 90       	pop	r9
    4d24:	8f 90       	pop	r8
    4d26:	7f 90       	pop	r7
    4d28:	6f 90       	pop	r6
    4d2a:	5f 90       	pop	r5
    4d2c:	4f 90       	pop	r4
    4d2e:	08 95       	ret

00004d30 <_ZN15TimeAlarmsClass11timerRepeatEmPFvvE>:
    
    AlarmID_t TimeAlarmsClass::timerOnce(const int H,  const int M,  const int S, OnTick_t onTickHandler){   // As above with HMS arguments
      return create( AlarmHMS(H,M,S), onTickHandler, IS_ONESHOT, dtTimer );
    }
      
    AlarmID_t TimeAlarmsClass::timerRepeat(time_t value, OnTick_t onTickHandler){ // trigger after the given number of seconds continuously
    4d30:	cf 92       	push	r12
    4d32:	ef 92       	push	r14
    4d34:	ff 92       	push	r15
    4d36:	0f 93       	push	r16
         return create( value, onTickHandler, IS_REPEAT, dtTimer);
    4d38:	00 e0       	ldi	r16, 0x00	; 0
    4d3a:	f1 e0       	ldi	r31, 0x01	; 1
    4d3c:	ef 2e       	mov	r14, r31
    4d3e:	f1 2c       	mov	r15, r1
    4d40:	cc 24       	eor	r12, r12
    4d42:	c3 94       	inc	r12
    4d44:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th>
    }
    4d48:	0f 91       	pop	r16
    4d4a:	ff 90       	pop	r15
    4d4c:	ef 90       	pop	r14
    4d4e:	cf 90       	pop	r12
    4d50:	08 95       	ret

00004d52 <_ZN15TimeAlarmsClass11alarmRepeatEiiiPFvvE>:
       return create( value, onTickHandler, IS_REPEAT, dtDailyAlarm );
    else
       return dtINVALID_ALARM_ID; // dont't allocate if the time is greater than one day 	  
    }
    
    AlarmID_t TimeAlarmsClass::alarmRepeat(const int H,  const int M,  const int S, OnTick_t onTickHandler){ // as above with HMS arguments
    4d52:	2f 92       	push	r2
    4d54:	3f 92       	push	r3
    4d56:	4f 92       	push	r4
    4d58:	5f 92       	push	r5
    4d5a:	6f 92       	push	r6
    4d5c:	7f 92       	push	r7
    4d5e:	8f 92       	push	r8
    4d60:	9f 92       	push	r9
    4d62:	af 92       	push	r10
    4d64:	bf 92       	push	r11
    4d66:	cf 92       	push	r12
    4d68:	df 92       	push	r13
    4d6a:	ef 92       	push	r14
    4d6c:	ff 92       	push	r15
    4d6e:	0f 93       	push	r16
    4d70:	1f 93       	push	r17
    4d72:	1c 01       	movw	r2, r24
    4d74:	2b 01       	movw	r4, r22
    4d76:	49 01       	movw	r8, r18
         return create( AlarmHMS(H,M,S), onTickHandler, IS_REPEAT, dtDailyAlarm );
    4d78:	66 27       	eor	r22, r22
    4d7a:	57 fd       	sbrc	r21, 7
    4d7c:	60 95       	com	r22
    4d7e:	76 2f       	mov	r23, r22
    4d80:	cb 01       	movw	r24, r22
    4d82:	ba 01       	movw	r22, r20
    4d84:	2c e3       	ldi	r18, 0x3C	; 60
    4d86:	30 e0       	ldi	r19, 0x00	; 0
    4d88:	40 e0       	ldi	r20, 0x00	; 0
    4d8a:	50 e0       	ldi	r21, 0x00	; 0
    4d8c:	0e 94 8a 3d 	call	0x7b14	; 0x7b14 <__mulsi3>
    4d90:	6b 01       	movw	r12, r22
    4d92:	7c 01       	movw	r14, r24
    4d94:	aa 24       	eor	r10, r10
    4d96:	97 fc       	sbrc	r9, 7
    4d98:	a0 94       	com	r10
    4d9a:	ba 2c       	mov	r11, r10
    4d9c:	c8 0c       	add	r12, r8
    4d9e:	d9 1c       	adc	r13, r9
    4da0:	ea 1c       	adc	r14, r10
    4da2:	fb 1c       	adc	r15, r11
    4da4:	66 24       	eor	r6, r6
    4da6:	57 fc       	sbrc	r5, 7
    4da8:	60 94       	com	r6
    4daa:	76 2c       	mov	r7, r6
    4dac:	c3 01       	movw	r24, r6
    4dae:	b2 01       	movw	r22, r4
    4db0:	20 e1       	ldi	r18, 0x10	; 16
    4db2:	3e e0       	ldi	r19, 0x0E	; 14
    4db4:	40 e0       	ldi	r20, 0x00	; 0
    4db6:	50 e0       	ldi	r21, 0x00	; 0
    4db8:	0e 94 8a 3d 	call	0x7b14	; 0x7b14 <__mulsi3>
    4dbc:	c6 0e       	add	r12, r22
    4dbe:	d7 1e       	adc	r13, r23
    4dc0:	e8 1e       	adc	r14, r24
    4dc2:	f9 1e       	adc	r15, r25
    4dc4:	c1 01       	movw	r24, r2
    4dc6:	b7 01       	movw	r22, r14
    4dc8:	a6 01       	movw	r20, r12
    4dca:	98 01       	movw	r18, r16
    4dcc:	00 e0       	ldi	r16, 0x00	; 0
    4dce:	e3 e0       	ldi	r30, 0x03	; 3
    4dd0:	ee 2e       	mov	r14, r30
    4dd2:	f1 2c       	mov	r15, r1
    4dd4:	cc 24       	eor	r12, r12
    4dd6:	c3 94       	inc	r12
    4dd8:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <_ZN15TimeAlarmsClass6createEmPFvvEh15dtAlarmPeriod_th>
    }
    4ddc:	1f 91       	pop	r17
    4dde:	0f 91       	pop	r16
    4de0:	ff 90       	pop	r15
    4de2:	ef 90       	pop	r14
    4de4:	df 90       	pop	r13
    4de6:	cf 90       	pop	r12
    4de8:	bf 90       	pop	r11
    4dea:	af 90       	pop	r10
    4dec:	9f 90       	pop	r9
    4dee:	8f 90       	pop	r8
    4df0:	7f 90       	pop	r7
    4df2:	6f 90       	pop	r6
    4df4:	5f 90       	pop	r5
    4df6:	4f 90       	pop	r4
    4df8:	3f 90       	pop	r3
    4dfa:	2f 90       	pop	r2
    4dfc:	08 95       	ret

00004dfe <_ZN15TimeAlarmsClass5delayEm>:
      else
         return dtINVALID_ALARM_ID; // valid ids only available when servicing a callback
    }
     
    // following functions are not Alarm ID specific.
    void TimeAlarmsClass::delay(unsigned long ms)
    4dfe:	af 92       	push	r10
    4e00:	bf 92       	push	r11
    4e02:	cf 92       	push	r12
    4e04:	df 92       	push	r13
    4e06:	ef 92       	push	r14
    4e08:	ff 92       	push	r15
    4e0a:	0f 93       	push	r16
    4e0c:	1f 93       	push	r17
    4e0e:	cf 93       	push	r28
    4e10:	df 93       	push	r29
    4e12:	ec 01       	movw	r28, r24
    4e14:	5a 01       	movw	r10, r20
    4e16:	6b 01       	movw	r12, r22
    {
      unsigned long start = millis();
    4e18:	0e 94 0b 32 	call	0x6416	; 0x6416 <millis>
    4e1c:	7b 01       	movw	r14, r22
    4e1e:	8c 01       	movw	r16, r24
    4e20:	03 c0       	rjmp	.+6      	; 0x4e28 <_ZN15TimeAlarmsClass5delayEm+0x2a>
      while( millis() - start  <= ms)
        serviceAlarms();
    4e22:	ce 01       	movw	r24, r28
    4e24:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <_ZN15TimeAlarmsClass13serviceAlarmsEv>
     
    // following functions are not Alarm ID specific.
    void TimeAlarmsClass::delay(unsigned long ms)
    {
      unsigned long start = millis();
      while( millis() - start  <= ms)
    4e28:	0e 94 0b 32 	call	0x6416	; 0x6416 <millis>
    4e2c:	6e 19       	sub	r22, r14
    4e2e:	7f 09       	sbc	r23, r15
    4e30:	80 0b       	sbc	r24, r16
    4e32:	91 0b       	sbc	r25, r17
    4e34:	a6 16       	cp	r10, r22
    4e36:	b7 06       	cpc	r11, r23
    4e38:	c8 06       	cpc	r12, r24
    4e3a:	d9 06       	cpc	r13, r25
    4e3c:	90 f7       	brcc	.-28     	; 0x4e22 <_ZN15TimeAlarmsClass5delayEm+0x24>
        serviceAlarms();
    }
    4e3e:	df 91       	pop	r29
    4e40:	cf 91       	pop	r28
    4e42:	1f 91       	pop	r17
    4e44:	0f 91       	pop	r16
    4e46:	ff 90       	pop	r15
    4e48:	ef 90       	pop	r14
    4e4a:	df 90       	pop	r13
    4e4c:	cf 90       	pop	r12
    4e4e:	bf 90       	pop	r11
    4e50:	af 90       	pop	r10
    4e52:	08 95       	ret

00004e54 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    4e54:	81 e0       	ldi	r24, 0x01	; 1
    4e56:	80 93 ab 02 	sts	0x02AB, r24
  // set address of targeted slave
  txAddress = address;
    4e5a:	60 93 88 02 	sts	0x0288, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    4e5e:	10 92 a9 02 	sts	0x02A9, r1
  txBufferLength = 0;
    4e62:	10 92 aa 02 	sts	0x02AA, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
    4e66:	08 95       	ret

00004e68 <_ZN7TwoWire9availableEv>:
}

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
    4e68:	20 91 87 02 	lds	r18, 0x0287
    4e6c:	30 e0       	ldi	r19, 0x00	; 0
    4e6e:	80 91 86 02 	lds	r24, 0x0286
    4e72:	28 1b       	sub	r18, r24
    4e74:	31 09       	sbc	r19, r1
{
  return rxBufferLength - rxBufferIndex;
}
    4e76:	c9 01       	movw	r24, r18
    4e78:	08 95       	ret

00004e7a <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    4e7a:	40 91 86 02 	lds	r20, 0x0286
    4e7e:	80 91 87 02 	lds	r24, 0x0287
    4e82:	48 17       	cp	r20, r24
    4e84:	18 f0       	brcs	.+6      	; 0x4e8c <_ZN7TwoWire4readEv+0x12>
    4e86:	2f ef       	ldi	r18, 0xFF	; 255
    4e88:	3f ef       	ldi	r19, 0xFF	; 255
    4e8a:	0a c0       	rjmp	.+20     	; 0x4ea0 <_ZN7TwoWire4readEv+0x26>
    value = rxBuffer[rxBufferIndex];
    4e8c:	e4 2f       	mov	r30, r20
    4e8e:	f0 e0       	ldi	r31, 0x00	; 0
    4e90:	ea 59       	subi	r30, 0x9A	; 154
    4e92:	fd 4f       	sbci	r31, 0xFD	; 253
    4e94:	80 81       	ld	r24, Z
    4e96:	28 2f       	mov	r18, r24
    4e98:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    4e9a:	4f 5f       	subi	r20, 0xFF	; 255
    4e9c:	40 93 86 02 	sts	0x0286, r20
  }

  return value;
}
    4ea0:	c9 01       	movw	r24, r18
    4ea2:	08 95       	ret

00004ea4 <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    4ea4:	e0 91 86 02 	lds	r30, 0x0286
    4ea8:	80 91 87 02 	lds	r24, 0x0287
    4eac:	e8 17       	cp	r30, r24
    4eae:	18 f0       	brcs	.+6      	; 0x4eb6 <_ZN7TwoWire4peekEv+0x12>
    4eb0:	ef ef       	ldi	r30, 0xFF	; 255
    4eb2:	ff ef       	ldi	r31, 0xFF	; 255
    4eb4:	06 c0       	rjmp	.+12     	; 0x4ec2 <_ZN7TwoWire4peekEv+0x1e>
    value = rxBuffer[rxBufferIndex];
    4eb6:	f0 e0       	ldi	r31, 0x00	; 0
    4eb8:	ea 59       	subi	r30, 0x9A	; 154
    4eba:	fd 4f       	sbci	r31, 0xFD	; 253
    4ebc:	80 81       	ld	r24, Z
    4ebe:	e8 2f       	mov	r30, r24
    4ec0:	f0 e0       	ldi	r31, 0x00	; 0
  }

  return value;
}
    4ec2:	cf 01       	movw	r24, r30
    4ec4:	08 95       	ret

00004ec6 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    4ec6:	08 95       	ret

00004ec8 <_GLOBAL__I__ZN7TwoWire8rxBufferE>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    4ec8:	10 92 af 02 	sts	0x02AF, r1
    4ecc:	10 92 ae 02 	sts	0x02AE, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    4ed0:	88 ee       	ldi	r24, 0xE8	; 232
    4ed2:	93 e0       	ldi	r25, 0x03	; 3
    4ed4:	a0 e0       	ldi	r26, 0x00	; 0
    4ed6:	b0 e0       	ldi	r27, 0x00	; 0
    4ed8:	80 93 b0 02 	sts	0x02B0, r24
    4edc:	90 93 b1 02 	sts	0x02B1, r25
    4ee0:	a0 93 b2 02 	sts	0x02B2, r26
    4ee4:	b0 93 b3 02 	sts	0x02B3, r27
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    4ee8:	80 e2       	ldi	r24, 0x20	; 32
    4eea:	91 e0       	ldi	r25, 0x01	; 1
    4eec:	90 93 ad 02 	sts	0x02AD, r25
    4ef0:	80 93 ac 02 	sts	0x02AC, r24
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    4ef4:	08 95       	ret

00004ef6 <_ZN7TwoWire5writeEPKhj>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
    4ef6:	cf 92       	push	r12
    4ef8:	df 92       	push	r13
    4efa:	ef 92       	push	r14
    4efc:	ff 92       	push	r15
    4efe:	0f 93       	push	r16
    4f00:	1f 93       	push	r17
    4f02:	cf 93       	push	r28
    4f04:	df 93       	push	r29
    4f06:	7c 01       	movw	r14, r24
    4f08:	6b 01       	movw	r12, r22
    4f0a:	8a 01       	movw	r16, r20
{
  if(transmitting){
    4f0c:	80 91 ab 02 	lds	r24, 0x02AB
    4f10:	88 23       	and	r24, r24
    4f12:	a1 f0       	breq	.+40     	; 0x4f3c <_ZN7TwoWire5writeEPKhj+0x46>
    4f14:	c0 e0       	ldi	r28, 0x00	; 0
    4f16:	d0 e0       	ldi	r29, 0x00	; 0
    4f18:	0d c0       	rjmp	.+26     	; 0x4f34 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
      write(data[i]);
    4f1a:	d7 01       	movw	r26, r14
    4f1c:	ed 91       	ld	r30, X+
    4f1e:	fc 91       	ld	r31, X
    4f20:	d6 01       	movw	r26, r12
    4f22:	ac 0f       	add	r26, r28
    4f24:	bd 1f       	adc	r27, r29
    4f26:	01 90       	ld	r0, Z+
    4f28:	f0 81       	ld	r31, Z
    4f2a:	e0 2d       	mov	r30, r0
    4f2c:	c7 01       	movw	r24, r14
    4f2e:	6c 91       	ld	r22, X
    4f30:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    4f32:	21 96       	adiw	r28, 0x01	; 1
    4f34:	c0 17       	cp	r28, r16
    4f36:	d1 07       	cpc	r29, r17
    4f38:	80 f3       	brcs	.-32     	; 0x4f1a <_ZN7TwoWire5writeEPKhj+0x24>
    4f3a:	04 c0       	rjmp	.+8      	; 0x4f44 <_ZN7TwoWire5writeEPKhj+0x4e>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    4f3c:	cb 01       	movw	r24, r22
    4f3e:	64 2f       	mov	r22, r20
    4f40:	0e 94 ad 28 	call	0x515a	; 0x515a <twi_transmit>
  }
  return quantity;
}
    4f44:	c8 01       	movw	r24, r16
    4f46:	df 91       	pop	r29
    4f48:	cf 91       	pop	r28
    4f4a:	1f 91       	pop	r17
    4f4c:	0f 91       	pop	r16
    4f4e:	ff 90       	pop	r15
    4f50:	ef 90       	pop	r14
    4f52:	df 90       	pop	r13
    4f54:	cf 90       	pop	r12
    4f56:	08 95       	ret

00004f58 <_ZN7TwoWire5writeEh>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
    4f58:	df 93       	push	r29
    4f5a:	cf 93       	push	r28
    4f5c:	0f 92       	push	r0
    4f5e:	cd b7       	in	r28, 0x3d	; 61
    4f60:	de b7       	in	r29, 0x3e	; 62
    4f62:	fc 01       	movw	r30, r24
    4f64:	69 83       	std	Y+1, r22	; 0x01
{
  if(transmitting){
    4f66:	80 91 ab 02 	lds	r24, 0x02AB
    4f6a:	88 23       	and	r24, r24
    4f6c:	c9 f0       	breq	.+50     	; 0x4fa0 <_ZN7TwoWire5writeEh+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    4f6e:	80 91 aa 02 	lds	r24, 0x02AA
    4f72:	80 32       	cpi	r24, 0x20	; 32
    4f74:	38 f0       	brcs	.+14     	; 0x4f84 <_ZN7TwoWire5writeEh+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    4f76:	81 e0       	ldi	r24, 0x01	; 1
    4f78:	90 e0       	ldi	r25, 0x00	; 0
    4f7a:	93 83       	std	Z+3, r25	; 0x03
    4f7c:	82 83       	std	Z+2, r24	; 0x02
    4f7e:	20 e0       	ldi	r18, 0x00	; 0
    4f80:	30 e0       	ldi	r19, 0x00	; 0
    4f82:	15 c0       	rjmp	.+42     	; 0x4fae <_ZN7TwoWire5writeEh+0x56>
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    4f84:	80 91 a9 02 	lds	r24, 0x02A9
    4f88:	e8 2f       	mov	r30, r24
    4f8a:	f0 e0       	ldi	r31, 0x00	; 0
    4f8c:	e7 57       	subi	r30, 0x77	; 119
    4f8e:	fd 4f       	sbci	r31, 0xFD	; 253
    4f90:	99 81       	ldd	r25, Y+1	; 0x01
    4f92:	90 83       	st	Z, r25
    ++txBufferIndex;
    4f94:	8f 5f       	subi	r24, 0xFF	; 255
    4f96:	80 93 a9 02 	sts	0x02A9, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    4f9a:	80 93 aa 02 	sts	0x02AA, r24
    4f9e:	05 c0       	rjmp	.+10     	; 0x4faa <_ZN7TwoWire5writeEh+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    4fa0:	ce 01       	movw	r24, r28
    4fa2:	01 96       	adiw	r24, 0x01	; 1
    4fa4:	61 e0       	ldi	r22, 0x01	; 1
    4fa6:	0e 94 ad 28 	call	0x515a	; 0x515a <twi_transmit>
    4faa:	21 e0       	ldi	r18, 0x01	; 1
    4fac:	30 e0       	ldi	r19, 0x00	; 0
  }
  return 1;
}
    4fae:	c9 01       	movw	r24, r18
    4fb0:	0f 90       	pop	r0
    4fb2:	cf 91       	pop	r28
    4fb4:	df 91       	pop	r29
    4fb6:	08 95       	ret

00004fb8 <_ZN7TwoWire15endTransmissionEh>:
//	the bus tenure has been properly ended with a STOP. It
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
    4fb8:	0f 93       	push	r16
    4fba:	06 2f       	mov	r16, r22
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    4fbc:	80 91 88 02 	lds	r24, 0x0288
    4fc0:	69 e8       	ldi	r22, 0x89	; 137
    4fc2:	72 e0       	ldi	r23, 0x02	; 2
    4fc4:	40 91 aa 02 	lds	r20, 0x02AA
    4fc8:	21 e0       	ldi	r18, 0x01	; 1
    4fca:	0e 94 58 28 	call	0x50b0	; 0x50b0 <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    4fce:	10 92 a9 02 	sts	0x02A9, r1
  txBufferLength = 0;
    4fd2:	10 92 aa 02 	sts	0x02AA, r1
  // indicate that we are done transmitting
  transmitting = 0;
    4fd6:	10 92 ab 02 	sts	0x02AB, r1
  return ret;
}
    4fda:	0f 91       	pop	r16
    4fdc:	08 95       	ret

00004fde <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    4fde:	61 e0       	ldi	r22, 0x01	; 1
    4fe0:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <_ZN7TwoWire15endTransmissionEh>
}
    4fe4:	08 95       	ret

00004fe6 <_ZN7TwoWire11requestFromEhhh>:
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    4fe6:	41 32       	cpi	r20, 0x21	; 33
    4fe8:	08 f0       	brcs	.+2      	; 0x4fec <_ZN7TwoWire11requestFromEhhh+0x6>
    4fea:	40 e2       	ldi	r20, 0x20	; 32
    4fec:	86 2f       	mov	r24, r22
    4fee:	66 e6       	ldi	r22, 0x66	; 102
    4ff0:	72 e0       	ldi	r23, 0x02	; 2
    4ff2:	0e 94 0f 28 	call	0x501e	; 0x501e <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    4ff6:	10 92 86 02 	sts	0x0286, r1
  rxBufferLength = read;
    4ffa:	80 93 87 02 	sts	0x0287, r24

  return read;
}
    4ffe:	08 95       	ret

00005000 <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    5000:	21 e0       	ldi	r18, 0x01	; 1
    5002:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <_ZN7TwoWire11requestFromEhhh>
}
    5006:	08 95       	ret

00005008 <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    5008:	10 92 86 02 	sts	0x0286, r1
  rxBufferLength = 0;
    500c:	10 92 87 02 	sts	0x0287, r1

  txBufferIndex = 0;
    5010:	10 92 a9 02 	sts	0x02A9, r1
  txBufferLength = 0;
    5014:	10 92 aa 02 	sts	0x02AA, r1

  twi_init();
    5018:	0e 94 59 2a 	call	0x54b2	; 0x54b2 <twi_init>
}
    501c:	08 95       	ret

0000501e <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    501e:	38 2f       	mov	r19, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    5020:	41 32       	cpi	r20, 0x21	; 33
    5022:	10 f0       	brcs	.+4      	; 0x5028 <twi_readFrom+0xa>
    5024:	40 e0       	ldi	r20, 0x00	; 0
    5026:	42 c0       	rjmp	.+132    	; 0x50ac <twi_readFrom+0x8e>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    5028:	80 91 b8 02 	lds	r24, 0x02B8
    502c:	88 23       	and	r24, r24
    502e:	e1 f7       	brne	.-8      	; 0x5028 <twi_readFrom+0xa>
    continue;
  }
  twi_state = TWI_MRX;
    5030:	91 e0       	ldi	r25, 0x01	; 1
    5032:	90 93 b8 02 	sts	0x02B8, r25
  twi_sendStop = sendStop;
    5036:	20 93 ba 02 	sts	0x02BA, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    503a:	8f ef       	ldi	r24, 0xFF	; 255
    503c:	80 93 25 03 	sts	0x0325, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    5040:	10 92 e0 02 	sts	0x02E0, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    5044:	41 50       	subi	r20, 0x01	; 1
    5046:	40 93 e1 02 	sts	0x02E1, r20
    504a:	4f 5f       	subi	r20, 0xFF	; 255
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    504c:	90 93 b9 02 	sts	0x02B9, r25
  twi_slarw |= address << 1;
    5050:	80 91 b9 02 	lds	r24, 0x02B9
    5054:	33 0f       	add	r19, r19
    5056:	83 2b       	or	r24, r19
    5058:	80 93 b9 02 	sts	0x02B9, r24

  if (true == twi_inRepStart) {
    505c:	80 91 bb 02 	lds	r24, 0x02BB
    5060:	81 30       	cpi	r24, 0x01	; 1
    5062:	41 f4       	brne	.+16     	; 0x5074 <twi_readFrom+0x56>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    5064:	10 92 bb 02 	sts	0x02BB, r1
    TWDR = twi_slarw;
    5068:	80 91 b9 02 	lds	r24, 0x02B9
    506c:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    5070:	85 ec       	ldi	r24, 0xC5	; 197
    5072:	01 c0       	rjmp	.+2      	; 0x5076 <twi_readFrom+0x58>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    5074:	85 ee       	ldi	r24, 0xE5	; 229
    5076:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    507a:	80 91 b8 02 	lds	r24, 0x02B8
    507e:	81 30       	cpi	r24, 0x01	; 1
    5080:	e1 f3       	breq	.-8      	; 0x507a <twi_readFrom+0x5c>
    continue;
  }

  if (twi_masterBufferIndex < length)
    5082:	80 91 e0 02 	lds	r24, 0x02E0
    5086:	84 17       	cp	r24, r20
    5088:	10 f4       	brcc	.+4      	; 0x508e <twi_readFrom+0x70>
    length = twi_masterBufferIndex;
    508a:	40 91 e0 02 	lds	r20, 0x02E0
    508e:	20 e0       	ldi	r18, 0x00	; 0
    5090:	30 e0       	ldi	r19, 0x00	; 0
    5092:	0a c0       	rjmp	.+20     	; 0x50a8 <twi_readFrom+0x8a>

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    5094:	fb 01       	movw	r30, r22
    5096:	e2 0f       	add	r30, r18
    5098:	f3 1f       	adc	r31, r19
    509a:	d9 01       	movw	r26, r18
    509c:	a0 54       	subi	r26, 0x40	; 64
    509e:	bd 4f       	sbci	r27, 0xFD	; 253
    50a0:	8c 91       	ld	r24, X
    50a2:	80 83       	st	Z, r24
    50a4:	2f 5f       	subi	r18, 0xFF	; 255
    50a6:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    50a8:	24 17       	cp	r18, r20
    50aa:	a0 f3       	brcs	.-24     	; 0x5094 <twi_readFrom+0x76>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    50ac:	84 2f       	mov	r24, r20
    50ae:	08 95       	ret

000050b0 <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    50b0:	0f 93       	push	r16
    50b2:	1f 93       	push	r17
    50b4:	58 2f       	mov	r21, r24
    50b6:	12 2f       	mov	r17, r18
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    50b8:	41 32       	cpi	r20, 0x21	; 33
    50ba:	10 f0       	brcs	.+4      	; 0x50c0 <twi_writeTo+0x10>
    50bc:	81 e0       	ldi	r24, 0x01	; 1
    50be:	4a c0       	rjmp	.+148    	; 0x5154 <twi_writeTo+0xa4>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    50c0:	80 91 b8 02 	lds	r24, 0x02B8
    50c4:	88 23       	and	r24, r24
    50c6:	e1 f7       	brne	.-8      	; 0x50c0 <twi_writeTo+0x10>
    continue;
  }
  twi_state = TWI_MTX;
    50c8:	82 e0       	ldi	r24, 0x02	; 2
    50ca:	80 93 b8 02 	sts	0x02B8, r24
  twi_sendStop = sendStop;
    50ce:	00 93 ba 02 	sts	0x02BA, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    50d2:	8f ef       	ldi	r24, 0xFF	; 255
    50d4:	80 93 25 03 	sts	0x0325, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    50d8:	10 92 e0 02 	sts	0x02E0, r1
  twi_masterBufferLength = length;
    50dc:	40 93 e1 02 	sts	0x02E1, r20
    50e0:	a0 ec       	ldi	r26, 0xC0	; 192
    50e2:	b2 e0       	ldi	r27, 0x02	; 2
    50e4:	fb 01       	movw	r30, r22
    50e6:	02 c0       	rjmp	.+4      	; 0x50ec <twi_writeTo+0x3c>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    50e8:	81 91       	ld	r24, Z+
    50ea:	8d 93       	st	X+, r24
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    50ec:	8e 2f       	mov	r24, r30
    50ee:	86 1b       	sub	r24, r22
    50f0:	84 17       	cp	r24, r20
    50f2:	d0 f3       	brcs	.-12     	; 0x50e8 <twi_writeTo+0x38>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    50f4:	10 92 b9 02 	sts	0x02B9, r1
  twi_slarw |= address << 1;
    50f8:	80 91 b9 02 	lds	r24, 0x02B9
    50fc:	55 0f       	add	r21, r21
    50fe:	85 2b       	or	r24, r21
    5100:	80 93 b9 02 	sts	0x02B9, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    5104:	80 91 bb 02 	lds	r24, 0x02BB
    5108:	81 30       	cpi	r24, 0x01	; 1
    510a:	41 f4       	brne	.+16     	; 0x511c <twi_writeTo+0x6c>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    510c:	10 92 bb 02 	sts	0x02BB, r1
    TWDR = twi_slarw;				
    5110:	80 91 b9 02 	lds	r24, 0x02B9
    5114:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    5118:	85 ec       	ldi	r24, 0xC5	; 197
    511a:	01 c0       	rjmp	.+2      	; 0x511e <twi_writeTo+0x6e>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    511c:	85 ee       	ldi	r24, 0xE5	; 229
    511e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    5122:	11 23       	and	r17, r17
    5124:	21 f0       	breq	.+8      	; 0x512e <twi_writeTo+0x7e>
    5126:	80 91 b8 02 	lds	r24, 0x02B8
    512a:	82 30       	cpi	r24, 0x02	; 2
    512c:	e1 f3       	breq	.-8      	; 0x5126 <twi_writeTo+0x76>
    continue;
  }
  
  if (twi_error == 0xFF)
    512e:	80 91 25 03 	lds	r24, 0x0325
    5132:	8f 3f       	cpi	r24, 0xFF	; 255
    5134:	11 f4       	brne	.+4      	; 0x513a <twi_writeTo+0x8a>
    5136:	80 e0       	ldi	r24, 0x00	; 0
    5138:	0d c0       	rjmp	.+26     	; 0x5154 <twi_writeTo+0xa4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    513a:	80 91 25 03 	lds	r24, 0x0325
    513e:	80 32       	cpi	r24, 0x20	; 32
    5140:	11 f4       	brne	.+4      	; 0x5146 <twi_writeTo+0x96>
    5142:	82 e0       	ldi	r24, 0x02	; 2
    5144:	07 c0       	rjmp	.+14     	; 0x5154 <twi_writeTo+0xa4>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    5146:	80 91 25 03 	lds	r24, 0x0325
    514a:	80 33       	cpi	r24, 0x30	; 48
    514c:	11 f0       	breq	.+4      	; 0x5152 <twi_writeTo+0xa2>
    514e:	84 e0       	ldi	r24, 0x04	; 4
    5150:	01 c0       	rjmp	.+2      	; 0x5154 <twi_writeTo+0xa4>
    5152:	83 e0       	ldi	r24, 0x03	; 3
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    5154:	1f 91       	pop	r17
    5156:	0f 91       	pop	r16
    5158:	08 95       	ret

0000515a <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    515a:	48 2f       	mov	r20, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    515c:	61 32       	cpi	r22, 0x21	; 33
    515e:	10 f0       	brcs	.+4      	; 0x5164 <twi_transmit+0xa>
    5160:	81 e0       	ldi	r24, 0x01	; 1
    5162:	08 95       	ret
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    5164:	80 91 b8 02 	lds	r24, 0x02B8
    5168:	84 30       	cpi	r24, 0x04	; 4
    516a:	11 f0       	breq	.+4      	; 0x5170 <twi_transmit+0x16>
    516c:	82 e0       	ldi	r24, 0x02	; 2
    516e:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    5170:	60 93 03 03 	sts	0x0303, r22
    5174:	a2 ee       	ldi	r26, 0xE2	; 226
    5176:	b2 e0       	ldi	r27, 0x02	; 2
    5178:	84 2f       	mov	r24, r20
    517a:	9c 01       	movw	r18, r24
    517c:	f9 01       	movw	r30, r18
    517e:	02 c0       	rjmp	.+4      	; 0x5184 <twi_transmit+0x2a>
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
    5180:	81 91       	ld	r24, Z+
    5182:	8d 93       	st	X+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    5184:	8e 2f       	mov	r24, r30
    5186:	84 1b       	sub	r24, r20
    5188:	86 17       	cp	r24, r22
    518a:	d0 f3       	brcs	.-12     	; 0x5180 <twi_transmit+0x26>
    518c:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    518e:	08 95       	ret

00005190 <__vector_24>:
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    5190:	1f 92       	push	r1
    5192:	0f 92       	push	r0
    5194:	0f b6       	in	r0, 0x3f	; 63
    5196:	0f 92       	push	r0
    5198:	11 24       	eor	r1, r1
    519a:	2f 93       	push	r18
    519c:	3f 93       	push	r19
    519e:	4f 93       	push	r20
    51a0:	5f 93       	push	r21
    51a2:	6f 93       	push	r22
    51a4:	7f 93       	push	r23
    51a6:	8f 93       	push	r24
    51a8:	9f 93       	push	r25
    51aa:	af 93       	push	r26
    51ac:	bf 93       	push	r27
    51ae:	ef 93       	push	r30
    51b0:	ff 93       	push	r31
  switch(TW_STATUS){
    51b2:	80 91 b9 00 	lds	r24, 0x00B9
    51b6:	90 e0       	ldi	r25, 0x00	; 0
    51b8:	88 7f       	andi	r24, 0xF8	; 248
    51ba:	90 70       	andi	r25, 0x00	; 0
    51bc:	80 36       	cpi	r24, 0x60	; 96
    51be:	91 05       	cpc	r25, r1
    51c0:	09 f4       	brne	.+2      	; 0x51c4 <__vector_24+0x34>
    51c2:	f2 c0       	rjmp	.+484    	; 0x53a8 <__vector_24+0x218>
    51c4:	81 36       	cpi	r24, 0x61	; 97
    51c6:	91 05       	cpc	r25, r1
    51c8:	cc f5       	brge	.+114    	; 0x523c <__vector_24+0xac>
    51ca:	88 32       	cpi	r24, 0x28	; 40
    51cc:	91 05       	cpc	r25, r1
    51ce:	09 f4       	brne	.+2      	; 0x51d2 <__vector_24+0x42>
    51d0:	7b c0       	rjmp	.+246    	; 0x52c8 <__vector_24+0x138>
    51d2:	89 32       	cpi	r24, 0x29	; 41
    51d4:	91 05       	cpc	r25, r1
    51d6:	b4 f4       	brge	.+44     	; 0x5204 <__vector_24+0x74>
    51d8:	80 31       	cpi	r24, 0x10	; 16
    51da:	91 05       	cpc	r25, r1
    51dc:	09 f4       	brne	.+2      	; 0x51e0 <__vector_24+0x50>
    51de:	6f c0       	rjmp	.+222    	; 0x52be <__vector_24+0x12e>
    51e0:	81 31       	cpi	r24, 0x11	; 17
    51e2:	91 05       	cpc	r25, r1
    51e4:	3c f4       	brge	.+14     	; 0x51f4 <__vector_24+0x64>
    51e6:	00 97       	sbiw	r24, 0x00	; 0
    51e8:	09 f4       	brne	.+2      	; 0x51ec <__vector_24+0x5c>
    51ea:	47 c1       	rjmp	.+654    	; 0x547a <__vector_24+0x2ea>
    51ec:	08 97       	sbiw	r24, 0x08	; 8
    51ee:	09 f0       	breq	.+2      	; 0x51f2 <__vector_24+0x62>
    51f0:	4f c1       	rjmp	.+670    	; 0x5490 <__vector_24+0x300>
    51f2:	65 c0       	rjmp	.+202    	; 0x52be <__vector_24+0x12e>
    51f4:	88 31       	cpi	r24, 0x18	; 24
    51f6:	91 05       	cpc	r25, r1
    51f8:	09 f4       	brne	.+2      	; 0x51fc <__vector_24+0x6c>
    51fa:	66 c0       	rjmp	.+204    	; 0x52c8 <__vector_24+0x138>
    51fc:	80 97       	sbiw	r24, 0x20	; 32
    51fe:	09 f0       	breq	.+2      	; 0x5202 <__vector_24+0x72>
    5200:	47 c1       	rjmp	.+654    	; 0x5490 <__vector_24+0x300>
    5202:	82 c0       	rjmp	.+260    	; 0x5308 <__vector_24+0x178>
    5204:	80 34       	cpi	r24, 0x40	; 64
    5206:	91 05       	cpc	r25, r1
    5208:	09 f4       	brne	.+2      	; 0x520c <__vector_24+0x7c>
    520a:	a4 c0       	rjmp	.+328    	; 0x5354 <__vector_24+0x1c4>
    520c:	81 34       	cpi	r24, 0x41	; 65
    520e:	91 05       	cpc	r25, r1
    5210:	44 f4       	brge	.+16     	; 0x5222 <__vector_24+0x92>
    5212:	80 33       	cpi	r24, 0x30	; 48
    5214:	91 05       	cpc	r25, r1
    5216:	09 f4       	brne	.+2      	; 0x521a <__vector_24+0x8a>
    5218:	82 c0       	rjmp	.+260    	; 0x531e <__vector_24+0x18e>
    521a:	c8 97       	sbiw	r24, 0x38	; 56
    521c:	09 f0       	breq	.+2      	; 0x5220 <__vector_24+0x90>
    521e:	38 c1       	rjmp	.+624    	; 0x5490 <__vector_24+0x300>
    5220:	89 c0       	rjmp	.+274    	; 0x5334 <__vector_24+0x1a4>
    5222:	80 35       	cpi	r24, 0x50	; 80
    5224:	91 05       	cpc	r25, r1
    5226:	09 f4       	brne	.+2      	; 0x522a <__vector_24+0x9a>
    5228:	89 c0       	rjmp	.+274    	; 0x533c <__vector_24+0x1ac>
    522a:	88 35       	cpi	r24, 0x58	; 88
    522c:	91 05       	cpc	r25, r1
    522e:	09 f4       	brne	.+2      	; 0x5232 <__vector_24+0xa2>
    5230:	96 c0       	rjmp	.+300    	; 0x535e <__vector_24+0x1ce>
    5232:	88 34       	cpi	r24, 0x48	; 72
    5234:	91 05       	cpc	r25, r1
    5236:	09 f0       	breq	.+2      	; 0x523a <__vector_24+0xaa>
    5238:	2b c1       	rjmp	.+598    	; 0x5490 <__vector_24+0x300>
    523a:	ae c0       	rjmp	.+348    	; 0x5398 <__vector_24+0x208>
    523c:	88 39       	cpi	r24, 0x98	; 152
    523e:	91 05       	cpc	r25, r1
    5240:	09 f4       	brne	.+2      	; 0x5244 <__vector_24+0xb4>
    5242:	13 c1       	rjmp	.+550    	; 0x546a <__vector_24+0x2da>
    5244:	89 39       	cpi	r24, 0x99	; 153
    5246:	91 05       	cpc	r25, r1
    5248:	ec f4       	brge	.+58     	; 0x5284 <__vector_24+0xf4>
    524a:	88 37       	cpi	r24, 0x78	; 120
    524c:	91 05       	cpc	r25, r1
    524e:	09 f4       	brne	.+2      	; 0x5252 <__vector_24+0xc2>
    5250:	ab c0       	rjmp	.+342    	; 0x53a8 <__vector_24+0x218>
    5252:	89 37       	cpi	r24, 0x79	; 121
    5254:	91 05       	cpc	r25, r1
    5256:	4c f4       	brge	.+18     	; 0x526a <__vector_24+0xda>
    5258:	88 36       	cpi	r24, 0x68	; 104
    525a:	91 05       	cpc	r25, r1
    525c:	09 f4       	brne	.+2      	; 0x5260 <__vector_24+0xd0>
    525e:	a4 c0       	rjmp	.+328    	; 0x53a8 <__vector_24+0x218>
    5260:	80 37       	cpi	r24, 0x70	; 112
    5262:	91 05       	cpc	r25, r1
    5264:	09 f0       	breq	.+2      	; 0x5268 <__vector_24+0xd8>
    5266:	14 c1       	rjmp	.+552    	; 0x5490 <__vector_24+0x300>
    5268:	9f c0       	rjmp	.+318    	; 0x53a8 <__vector_24+0x218>
    526a:	88 38       	cpi	r24, 0x88	; 136
    526c:	91 05       	cpc	r25, r1
    526e:	09 f4       	brne	.+2      	; 0x5272 <__vector_24+0xe2>
    5270:	fc c0       	rjmp	.+504    	; 0x546a <__vector_24+0x2da>
    5272:	80 39       	cpi	r24, 0x90	; 144
    5274:	91 05       	cpc	r25, r1
    5276:	09 f4       	brne	.+2      	; 0x527a <__vector_24+0xea>
    5278:	9d c0       	rjmp	.+314    	; 0x53b4 <__vector_24+0x224>
    527a:	80 38       	cpi	r24, 0x80	; 128
    527c:	91 05       	cpc	r25, r1
    527e:	09 f0       	breq	.+2      	; 0x5282 <__vector_24+0xf2>
    5280:	07 c1       	rjmp	.+526    	; 0x5490 <__vector_24+0x300>
    5282:	98 c0       	rjmp	.+304    	; 0x53b4 <__vector_24+0x224>
    5284:	80 3b       	cpi	r24, 0xB0	; 176
    5286:	91 05       	cpc	r25, r1
    5288:	09 f4       	brne	.+2      	; 0x528c <__vector_24+0xfc>
    528a:	c6 c0       	rjmp	.+396    	; 0x5418 <__vector_24+0x288>
    528c:	81 3b       	cpi	r24, 0xB1	; 177
    528e:	91 05       	cpc	r25, r1
    5290:	4c f4       	brge	.+18     	; 0x52a4 <__vector_24+0x114>
    5292:	80 3a       	cpi	r24, 0xA0	; 160
    5294:	91 05       	cpc	r25, r1
    5296:	09 f4       	brne	.+2      	; 0x529a <__vector_24+0x10a>
    5298:	9f c0       	rjmp	.+318    	; 0x53d8 <__vector_24+0x248>
    529a:	88 3a       	cpi	r24, 0xA8	; 168
    529c:	91 05       	cpc	r25, r1
    529e:	09 f0       	breq	.+2      	; 0x52a2 <__vector_24+0x112>
    52a0:	f7 c0       	rjmp	.+494    	; 0x5490 <__vector_24+0x300>
    52a2:	ba c0       	rjmp	.+372    	; 0x5418 <__vector_24+0x288>
    52a4:	80 3c       	cpi	r24, 0xC0	; 192
    52a6:	91 05       	cpc	r25, r1
    52a8:	09 f4       	brne	.+2      	; 0x52ac <__vector_24+0x11c>
    52aa:	e3 c0       	rjmp	.+454    	; 0x5472 <__vector_24+0x2e2>
    52ac:	88 3c       	cpi	r24, 0xC8	; 200
    52ae:	91 05       	cpc	r25, r1
    52b0:	09 f4       	brne	.+2      	; 0x52b4 <__vector_24+0x124>
    52b2:	df c0       	rjmp	.+446    	; 0x5472 <__vector_24+0x2e2>
    52b4:	88 3b       	cpi	r24, 0xB8	; 184
    52b6:	91 05       	cpc	r25, r1
    52b8:	09 f0       	breq	.+2      	; 0x52bc <__vector_24+0x12c>
    52ba:	ea c0       	rjmp	.+468    	; 0x5490 <__vector_24+0x300>
    52bc:	c2 c0       	rjmp	.+388    	; 0x5442 <__vector_24+0x2b2>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    52be:	80 91 b9 02 	lds	r24, 0x02B9
    52c2:	80 93 bb 00 	sts	0x00BB, r24
    52c6:	cf c0       	rjmp	.+414    	; 0x5466 <__vector_24+0x2d6>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    52c8:	90 91 e0 02 	lds	r25, 0x02E0
    52cc:	80 91 e1 02 	lds	r24, 0x02E1
    52d0:	98 17       	cp	r25, r24
    52d2:	68 f4       	brcc	.+26     	; 0x52ee <__vector_24+0x15e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    52d4:	90 91 e0 02 	lds	r25, 0x02E0
    52d8:	e9 2f       	mov	r30, r25
    52da:	f0 e0       	ldi	r31, 0x00	; 0
    52dc:	e0 54       	subi	r30, 0x40	; 64
    52de:	fd 4f       	sbci	r31, 0xFD	; 253
    52e0:	80 81       	ld	r24, Z
    52e2:	80 93 bb 00 	sts	0x00BB, r24
    52e6:	9f 5f       	subi	r25, 0xFF	; 255
    52e8:	90 93 e0 02 	sts	0x02E0, r25
    52ec:	bc c0       	rjmp	.+376    	; 0x5466 <__vector_24+0x2d6>
        twi_reply(1);
      }else{
	if (twi_sendStop)
    52ee:	80 91 ba 02 	lds	r24, 0x02BA
    52f2:	88 23       	and	r24, r24
    52f4:	09 f4       	brne	.+2      	; 0x52f8 <__vector_24+0x168>
    52f6:	4b c0       	rjmp	.+150    	; 0x538e <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    52f8:	85 ed       	ldi	r24, 0xD5	; 213
    52fa:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    52fe:	80 91 bc 00 	lds	r24, 0x00BC
    5302:	84 fd       	sbrc	r24, 4
    5304:	fc cf       	rjmp	.-8      	; 0x52fe <__vector_24+0x16e>
    5306:	c2 c0       	rjmp	.+388    	; 0x548c <__vector_24+0x2fc>
	  twi_state = TWI_READY;
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    5308:	80 e2       	ldi	r24, 0x20	; 32
    530a:	80 93 25 03 	sts	0x0325, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    530e:	85 ed       	ldi	r24, 0xD5	; 213
    5310:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    5314:	80 91 bc 00 	lds	r24, 0x00BC
    5318:	84 fd       	sbrc	r24, 4
    531a:	fc cf       	rjmp	.-8      	; 0x5314 <__vector_24+0x184>
    531c:	b7 c0       	rjmp	.+366    	; 0x548c <__vector_24+0x2fc>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    531e:	80 e3       	ldi	r24, 0x30	; 48
    5320:	80 93 25 03 	sts	0x0325, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    5324:	85 ed       	ldi	r24, 0xD5	; 213
    5326:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    532a:	80 91 bc 00 	lds	r24, 0x00BC
    532e:	84 fd       	sbrc	r24, 4
    5330:	fc cf       	rjmp	.-8      	; 0x532a <__vector_24+0x19a>
    5332:	ac c0       	rjmp	.+344    	; 0x548c <__vector_24+0x2fc>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    5334:	88 e3       	ldi	r24, 0x38	; 56
    5336:	80 93 25 03 	sts	0x0325, r24
    533a:	9b c0       	rjmp	.+310    	; 0x5472 <__vector_24+0x2e2>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    533c:	80 91 e0 02 	lds	r24, 0x02E0
    5340:	90 91 bb 00 	lds	r25, 0x00BB
    5344:	e8 2f       	mov	r30, r24
    5346:	f0 e0       	ldi	r31, 0x00	; 0
    5348:	e0 54       	subi	r30, 0x40	; 64
    534a:	fd 4f       	sbci	r31, 0xFD	; 253
    534c:	90 83       	st	Z, r25
    534e:	8f 5f       	subi	r24, 0xFF	; 255
    5350:	80 93 e0 02 	sts	0x02E0, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5354:	90 91 e0 02 	lds	r25, 0x02E0
    5358:	80 91 e1 02 	lds	r24, 0x02E1
    535c:	82 c0       	rjmp	.+260    	; 0x5462 <__vector_24+0x2d2>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    535e:	80 91 e0 02 	lds	r24, 0x02E0
    5362:	90 91 bb 00 	lds	r25, 0x00BB
    5366:	e8 2f       	mov	r30, r24
    5368:	f0 e0       	ldi	r31, 0x00	; 0
    536a:	e0 54       	subi	r30, 0x40	; 64
    536c:	fd 4f       	sbci	r31, 0xFD	; 253
    536e:	90 83       	st	Z, r25
    5370:	8f 5f       	subi	r24, 0xFF	; 255
    5372:	80 93 e0 02 	sts	0x02E0, r24
	if (twi_sendStop)
    5376:	80 91 ba 02 	lds	r24, 0x02BA
    537a:	88 23       	and	r24, r24
    537c:	41 f0       	breq	.+16     	; 0x538e <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    537e:	85 ed       	ldi	r24, 0xD5	; 213
    5380:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    5384:	80 91 bc 00 	lds	r24, 0x00BC
    5388:	84 fd       	sbrc	r24, 4
    538a:	fc cf       	rjmp	.-8      	; 0x5384 <__vector_24+0x1f4>
    538c:	7f c0       	rjmp	.+254    	; 0x548c <__vector_24+0x2fc>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    538e:	81 e0       	ldi	r24, 0x01	; 1
    5390:	80 93 bb 02 	sts	0x02BB, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    5394:	84 ea       	ldi	r24, 0xA4	; 164
    5396:	6e c0       	rjmp	.+220    	; 0x5474 <__vector_24+0x2e4>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    5398:	85 ed       	ldi	r24, 0xD5	; 213
    539a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    539e:	80 91 bc 00 	lds	r24, 0x00BC
    53a2:	84 fd       	sbrc	r24, 4
    53a4:	fc cf       	rjmp	.-8      	; 0x539e <__vector_24+0x20e>
    53a6:	72 c0       	rjmp	.+228    	; 0x548c <__vector_24+0x2fc>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    53a8:	83 e0       	ldi	r24, 0x03	; 3
    53aa:	80 93 b8 02 	sts	0x02B8, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    53ae:	10 92 24 03 	sts	0x0324, r1
    53b2:	59 c0       	rjmp	.+178    	; 0x5466 <__vector_24+0x2d6>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    53b4:	80 91 24 03 	lds	r24, 0x0324
    53b8:	80 32       	cpi	r24, 0x20	; 32
    53ba:	08 f0       	brcs	.+2      	; 0x53be <__vector_24+0x22e>
    53bc:	56 c0       	rjmp	.+172    	; 0x546a <__vector_24+0x2da>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    53be:	80 91 24 03 	lds	r24, 0x0324
    53c2:	90 91 bb 00 	lds	r25, 0x00BB
    53c6:	e8 2f       	mov	r30, r24
    53c8:	f0 e0       	ldi	r31, 0x00	; 0
    53ca:	ec 5f       	subi	r30, 0xFC	; 252
    53cc:	fc 4f       	sbci	r31, 0xFC	; 252
    53ce:	90 83       	st	Z, r25
    53d0:	8f 5f       	subi	r24, 0xFF	; 255
    53d2:	80 93 24 03 	sts	0x0324, r24
    53d6:	47 c0       	rjmp	.+142    	; 0x5466 <__vector_24+0x2d6>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    53d8:	80 91 24 03 	lds	r24, 0x0324
    53dc:	80 32       	cpi	r24, 0x20	; 32
    53de:	30 f4       	brcc	.+12     	; 0x53ec <__vector_24+0x25c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    53e0:	e0 91 24 03 	lds	r30, 0x0324
    53e4:	f0 e0       	ldi	r31, 0x00	; 0
    53e6:	ec 5f       	subi	r30, 0xFC	; 252
    53e8:	fc 4f       	sbci	r31, 0xFC	; 252
    53ea:	10 82       	st	Z, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    53ec:	85 ed       	ldi	r24, 0xD5	; 213
    53ee:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    53f2:	80 91 bc 00 	lds	r24, 0x00BC
    53f6:	84 fd       	sbrc	r24, 4
    53f8:	fc cf       	rjmp	.-8      	; 0x53f2 <__vector_24+0x262>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    53fa:	10 92 b8 02 	sts	0x02B8, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    53fe:	60 91 24 03 	lds	r22, 0x0324
    5402:	e0 91 be 02 	lds	r30, 0x02BE
    5406:	f0 91 bf 02 	lds	r31, 0x02BF
    540a:	84 e0       	ldi	r24, 0x04	; 4
    540c:	93 e0       	ldi	r25, 0x03	; 3
    540e:	70 e0       	ldi	r23, 0x00	; 0
    5410:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    5412:	10 92 24 03 	sts	0x0324, r1
    5416:	2d c0       	rjmp	.+90     	; 0x5472 <__vector_24+0x2e2>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    5418:	84 e0       	ldi	r24, 0x04	; 4
    541a:	80 93 b8 02 	sts	0x02B8, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    541e:	10 92 02 03 	sts	0x0302, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    5422:	10 92 03 03 	sts	0x0303, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    5426:	e0 91 bc 02 	lds	r30, 0x02BC
    542a:	f0 91 bd 02 	lds	r31, 0x02BD
    542e:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    5430:	80 91 03 03 	lds	r24, 0x0303
    5434:	88 23       	and	r24, r24
    5436:	29 f4       	brne	.+10     	; 0x5442 <__vector_24+0x2b2>
        twi_txBufferLength = 1;
    5438:	81 e0       	ldi	r24, 0x01	; 1
    543a:	80 93 03 03 	sts	0x0303, r24
        twi_txBuffer[0] = 0x00;
    543e:	10 92 e2 02 	sts	0x02E2, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    5442:	90 91 02 03 	lds	r25, 0x0302
    5446:	e9 2f       	mov	r30, r25
    5448:	f0 e0       	ldi	r31, 0x00	; 0
    544a:	ee 51       	subi	r30, 0x1E	; 30
    544c:	fd 4f       	sbci	r31, 0xFD	; 253
    544e:	80 81       	ld	r24, Z
    5450:	80 93 bb 00 	sts	0x00BB, r24
    5454:	9f 5f       	subi	r25, 0xFF	; 255
    5456:	90 93 02 03 	sts	0x0302, r25
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    545a:	90 91 02 03 	lds	r25, 0x0302
    545e:	80 91 03 03 	lds	r24, 0x0303
    5462:	98 17       	cp	r25, r24
    5464:	10 f4       	brcc	.+4      	; 0x546a <__vector_24+0x2da>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5466:	85 ec       	ldi	r24, 0xC5	; 197
    5468:	01 c0       	rjmp	.+2      	; 0x546c <__vector_24+0x2dc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    546a:	85 e8       	ldi	r24, 0x85	; 133
    546c:	80 93 bc 00 	sts	0x00BC, r24
    5470:	0f c0       	rjmp	.+30     	; 0x5490 <__vector_24+0x300>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5472:	85 ec       	ldi	r24, 0xC5	; 197
    5474:	80 93 bc 00 	sts	0x00BC, r24
    5478:	09 c0       	rjmp	.+18     	; 0x548c <__vector_24+0x2fc>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    547a:	10 92 25 03 	sts	0x0325, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    547e:	85 ed       	ldi	r24, 0xD5	; 213
    5480:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    5484:	80 91 bc 00 	lds	r24, 0x00BC
    5488:	84 fd       	sbrc	r24, 4
    548a:	fc cf       	rjmp	.-8      	; 0x5484 <__vector_24+0x2f4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    548c:	10 92 b8 02 	sts	0x02B8, r1
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    5490:	ff 91       	pop	r31
    5492:	ef 91       	pop	r30
    5494:	bf 91       	pop	r27
    5496:	af 91       	pop	r26
    5498:	9f 91       	pop	r25
    549a:	8f 91       	pop	r24
    549c:	7f 91       	pop	r23
    549e:	6f 91       	pop	r22
    54a0:	5f 91       	pop	r21
    54a2:	4f 91       	pop	r20
    54a4:	3f 91       	pop	r19
    54a6:	2f 91       	pop	r18
    54a8:	0f 90       	pop	r0
    54aa:	0f be       	out	0x3f, r0	; 63
    54ac:	0f 90       	pop	r0
    54ae:	1f 90       	pop	r1
    54b0:	18 95       	reti

000054b2 <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    54b2:	10 92 b8 02 	sts	0x02B8, r1
  twi_sendStop = true;		// default value
    54b6:	81 e0       	ldi	r24, 0x01	; 1
    54b8:	80 93 ba 02 	sts	0x02BA, r24
  twi_inRepStart = false;
    54bc:	10 92 bb 02 	sts	0x02BB, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    54c0:	82 e1       	ldi	r24, 0x12	; 18
    54c2:	61 e0       	ldi	r22, 0x01	; 1
    54c4:	0e 94 f6 32 	call	0x65ec	; 0x65ec <digitalWrite>
  digitalWrite(SCL, 1);
    54c8:	83 e1       	ldi	r24, 0x13	; 19
    54ca:	61 e0       	ldi	r22, 0x01	; 1
    54cc:	0e 94 f6 32 	call	0x65ec	; 0x65ec <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    54d0:	e9 eb       	ldi	r30, 0xB9	; 185
    54d2:	f0 e0       	ldi	r31, 0x00	; 0
    54d4:	80 81       	ld	r24, Z
    54d6:	8e 7f       	andi	r24, 0xFE	; 254
    54d8:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    54da:	80 81       	ld	r24, Z
    54dc:	8d 7f       	andi	r24, 0xFD	; 253
    54de:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    54e0:	88 e4       	ldi	r24, 0x48	; 72
    54e2:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    54e6:	85 e4       	ldi	r24, 0x45	; 69
    54e8:	80 93 bc 00 	sts	0x00BC, r24
}
    54ec:	08 95       	ret

000054ee <_ZN9DS1307RTC4readER12tmElements_t>:
  tm.Second &= 0x7f;  // start the clock
  write(tm); 
}

// Aquire data from the RTC chip in BCD format
bool DS1307RTC::read(tmElements_t &tm)
    54ee:	0f 93       	push	r16
    54f0:	1f 93       	push	r17
    54f2:	cf 93       	push	r28
    54f4:	df 93       	push	r29
    54f6:	ec 01       	movw	r28, r24
{
  uint8_t sec;
  Wire.beginTransmission(DS1307_CTRL_ID);
    54f8:	8c ea       	ldi	r24, 0xAC	; 172
    54fa:	92 e0       	ldi	r25, 0x02	; 2
    54fc:	68 e6       	ldi	r22, 0x68	; 104
    54fe:	70 e0       	ldi	r23, 0x00	; 0
    5500:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <_ZN7TwoWire17beginTransmissionEi>
#if ARDUINO >= 100  
  Wire.write((uint8_t)0x00); 
    5504:	8c ea       	ldi	r24, 0xAC	; 172
    5506:	92 e0       	ldi	r25, 0x02	; 2
    5508:	60 e0       	ldi	r22, 0x00	; 0
    550a:	0e 94 ac 27 	call	0x4f58	; 0x4f58 <_ZN7TwoWire5writeEh>
#else
  Wire.send(0x00);
#endif  
  if (Wire.endTransmission() != 0) {
    550e:	8c ea       	ldi	r24, 0xAC	; 172
    5510:	92 e0       	ldi	r25, 0x02	; 2
    5512:	0e 94 ef 27 	call	0x4fde	; 0x4fde <_ZN7TwoWire15endTransmissionEv>
    5516:	88 23       	and	r24, r24
    5518:	19 f0       	breq	.+6      	; 0x5520 <_ZN9DS1307RTC4readER12tmElements_t+0x32>
    exists = false;
    551a:	10 92 26 03 	sts	0x0326, r1
    551e:	11 c0       	rjmp	.+34     	; 0x5542 <_ZN9DS1307RTC4readER12tmElements_t+0x54>
    return false;
  }
  exists = true;
    5520:	81 e0       	ldi	r24, 0x01	; 1
    5522:	80 93 26 03 	sts	0x0326, r24

  // request the 7 data fields   (secs, min, hr, dow, date, mth, yr)
  Wire.requestFrom(DS1307_CTRL_ID, tmNbrFields);
    5526:	8c ea       	ldi	r24, 0xAC	; 172
    5528:	92 e0       	ldi	r25, 0x02	; 2
    552a:	68 e6       	ldi	r22, 0x68	; 104
    552c:	70 e0       	ldi	r23, 0x00	; 0
    552e:	47 e0       	ldi	r20, 0x07	; 7
    5530:	50 e0       	ldi	r21, 0x00	; 0
    5532:	0e 94 00 28 	call	0x5000	; 0x5000 <_ZN7TwoWire11requestFromEii>
  if (Wire.available() < tmNbrFields) return false;
    5536:	8c ea       	ldi	r24, 0xAC	; 172
    5538:	92 e0       	ldi	r25, 0x02	; 2
    553a:	0e 94 34 27 	call	0x4e68	; 0x4e68 <_ZN7TwoWire9availableEv>
    553e:	07 97       	sbiw	r24, 0x07	; 7
    5540:	14 f4       	brge	.+4      	; 0x5546 <_ZN9DS1307RTC4readER12tmElements_t+0x58>
    5542:	80 e0       	ldi	r24, 0x00	; 0
    5544:	65 c0       	rjmp	.+202    	; 0x5610 <_ZN9DS1307RTC4readER12tmElements_t+0x122>
#if ARDUINO >= 100
  sec = Wire.read();
    5546:	8c ea       	ldi	r24, 0xAC	; 172
    5548:	92 e0       	ldi	r25, 0x02	; 2
    554a:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <_ZN7TwoWire4readEv>
    554e:	08 2f       	mov	r16, r24
  tm.Second = bcd2dec(sec & 0x7f);   
    5550:	8f 77       	andi	r24, 0x7F	; 127
    5552:	82 95       	swap	r24
    5554:	8f 70       	andi	r24, 0x0F	; 15
    5556:	1a e0       	ldi	r17, 0x0A	; 10
    5558:	81 9f       	mul	r24, r17
    555a:	c0 01       	movw	r24, r0
    555c:	11 24       	eor	r1, r1
    555e:	20 2f       	mov	r18, r16
    5560:	2f 70       	andi	r18, 0x0F	; 15
    5562:	28 0f       	add	r18, r24
    5564:	28 83       	st	Y, r18
  tm.Minute = bcd2dec(Wire.read() );
    5566:	8c ea       	ldi	r24, 0xAC	; 172
    5568:	92 e0       	ldi	r25, 0x02	; 2
    556a:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <_ZN7TwoWire4readEv>
    556e:	28 2f       	mov	r18, r24
    5570:	22 95       	swap	r18
    5572:	2f 70       	andi	r18, 0x0F	; 15
    5574:	21 9f       	mul	r18, r17
    5576:	90 01       	movw	r18, r0
    5578:	11 24       	eor	r1, r1
    557a:	8f 70       	andi	r24, 0x0F	; 15
    557c:	82 0f       	add	r24, r18
    557e:	89 83       	std	Y+1, r24	; 0x01
  tm.Hour =   bcd2dec(Wire.read() & 0x3f);  // mask assumes 24hr clock
    5580:	8c ea       	ldi	r24, 0xAC	; 172
    5582:	92 e0       	ldi	r25, 0x02	; 2
    5584:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <_ZN7TwoWire4readEv>
    5588:	28 2f       	mov	r18, r24
    558a:	2f 73       	andi	r18, 0x3F	; 63
    558c:	22 95       	swap	r18
    558e:	2f 70       	andi	r18, 0x0F	; 15
    5590:	21 9f       	mul	r18, r17
    5592:	90 01       	movw	r18, r0
    5594:	11 24       	eor	r1, r1
    5596:	8f 70       	andi	r24, 0x0F	; 15
    5598:	82 0f       	add	r24, r18
    559a:	8a 83       	std	Y+2, r24	; 0x02
  tm.Wday = bcd2dec(Wire.read() );
    559c:	8c ea       	ldi	r24, 0xAC	; 172
    559e:	92 e0       	ldi	r25, 0x02	; 2
    55a0:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <_ZN7TwoWire4readEv>
    55a4:	28 2f       	mov	r18, r24
    55a6:	22 95       	swap	r18
    55a8:	2f 70       	andi	r18, 0x0F	; 15
    55aa:	21 9f       	mul	r18, r17
    55ac:	90 01       	movw	r18, r0
    55ae:	11 24       	eor	r1, r1
    55b0:	8f 70       	andi	r24, 0x0F	; 15
    55b2:	82 0f       	add	r24, r18
    55b4:	8b 83       	std	Y+3, r24	; 0x03
  tm.Day = bcd2dec(Wire.read() );
    55b6:	8c ea       	ldi	r24, 0xAC	; 172
    55b8:	92 e0       	ldi	r25, 0x02	; 2
    55ba:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <_ZN7TwoWire4readEv>
    55be:	28 2f       	mov	r18, r24
    55c0:	22 95       	swap	r18
    55c2:	2f 70       	andi	r18, 0x0F	; 15
    55c4:	21 9f       	mul	r18, r17
    55c6:	90 01       	movw	r18, r0
    55c8:	11 24       	eor	r1, r1
    55ca:	8f 70       	andi	r24, 0x0F	; 15
    55cc:	82 0f       	add	r24, r18
    55ce:	8c 83       	std	Y+4, r24	; 0x04
  tm.Month = bcd2dec(Wire.read() );
    55d0:	8c ea       	ldi	r24, 0xAC	; 172
    55d2:	92 e0       	ldi	r25, 0x02	; 2
    55d4:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <_ZN7TwoWire4readEv>
    55d8:	28 2f       	mov	r18, r24
    55da:	22 95       	swap	r18
    55dc:	2f 70       	andi	r18, 0x0F	; 15
    55de:	21 9f       	mul	r18, r17
    55e0:	90 01       	movw	r18, r0
    55e2:	11 24       	eor	r1, r1
    55e4:	8f 70       	andi	r24, 0x0F	; 15
    55e6:	82 0f       	add	r24, r18
    55e8:	8d 83       	std	Y+5, r24	; 0x05
  tm.Year = y2kYearToTm((bcd2dec(Wire.read())));
    55ea:	8c ea       	ldi	r24, 0xAC	; 172
    55ec:	92 e0       	ldi	r25, 0x02	; 2
    55ee:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <_ZN7TwoWire4readEv>
    55f2:	28 2f       	mov	r18, r24
    55f4:	2f 70       	andi	r18, 0x0F	; 15
    55f6:	22 5e       	subi	r18, 0xE2	; 226
    55f8:	82 95       	swap	r24
    55fa:	8f 70       	andi	r24, 0x0F	; 15
    55fc:	81 9f       	mul	r24, r17
    55fe:	c0 01       	movw	r24, r0
    5600:	11 24       	eor	r1, r1
    5602:	28 0f       	add	r18, r24
    5604:	2e 83       	std	Y+6, r18	; 0x06
    5606:	80 2f       	mov	r24, r16
    5608:	80 95       	com	r24
    560a:	88 1f       	adc	r24, r24
    560c:	88 27       	eor	r24, r24
    560e:	88 1f       	adc	r24, r24
  tm.Month = bcd2dec(Wire.receive() );
  tm.Year = y2kYearToTm((bcd2dec(Wire.receive())));
#endif
  if (sec & 0x80) return false; // clock is halted
  return true;
}
    5610:	df 91       	pop	r29
    5612:	cf 91       	pop	r28
    5614:	1f 91       	pop	r17
    5616:	0f 91       	pop	r16
    5618:	08 95       	ret

0000561a <_ZN9DS1307RTC3getEv>:
{
  Wire.begin();
}
  
// PUBLIC FUNCTIONS
time_t DS1307RTC::get()   // Aquire data from buffer and convert to time_t
    561a:	0f 93       	push	r16
    561c:	1f 93       	push	r17
    561e:	df 93       	push	r29
    5620:	cf 93       	push	r28
    5622:	cd b7       	in	r28, 0x3d	; 61
    5624:	de b7       	in	r29, 0x3e	; 62
    5626:	27 97       	sbiw	r28, 0x07	; 7
    5628:	0f b6       	in	r0, 0x3f	; 63
    562a:	f8 94       	cli
    562c:	de bf       	out	0x3e, r29	; 62
    562e:	0f be       	out	0x3f, r0	; 63
    5630:	cd bf       	out	0x3d, r28	; 61
{
  tmElements_t tm;
  if (read(tm) == false) return 0;
    5632:	8e 01       	movw	r16, r28
    5634:	0f 5f       	subi	r16, 0xFF	; 255
    5636:	1f 4f       	sbci	r17, 0xFF	; 255
    5638:	c8 01       	movw	r24, r16
    563a:	0e 94 77 2a 	call	0x54ee	; 0x54ee <_ZN9DS1307RTC4readER12tmElements_t>
    563e:	88 23       	and	r24, r24
    5640:	29 f4       	brne	.+10     	; 0x564c <_ZN9DS1307RTC3getEv+0x32>
    5642:	20 e0       	ldi	r18, 0x00	; 0
    5644:	30 e0       	ldi	r19, 0x00	; 0
    5646:	40 e0       	ldi	r20, 0x00	; 0
    5648:	50 e0       	ldi	r21, 0x00	; 0
    564a:	05 c0       	rjmp	.+10     	; 0x5656 <_ZN9DS1307RTC3getEv+0x3c>
  return(makeTime(tm));
    564c:	c8 01       	movw	r24, r16
    564e:	0e 94 dd 21 	call	0x43ba	; 0x43ba <_Z8makeTimeR12tmElements_t>
    5652:	9b 01       	movw	r18, r22
    5654:	ac 01       	movw	r20, r24
}
    5656:	b9 01       	movw	r22, r18
    5658:	ca 01       	movw	r24, r20
    565a:	27 96       	adiw	r28, 0x07	; 7
    565c:	0f b6       	in	r0, 0x3f	; 63
    565e:	f8 94       	cli
    5660:	de bf       	out	0x3e, r29	; 62
    5662:	0f be       	out	0x3f, r0	; 63
    5664:	cd bf       	out	0x3d, r28	; 61
    5666:	cf 91       	pop	r28
    5668:	df 91       	pop	r29
    566a:	1f 91       	pop	r17
    566c:	0f 91       	pop	r16
    566e:	08 95       	ret

00005670 <_GLOBAL__I__ZN9DS1307RTCC2Ev>:

#define DS1307_CTRL_ID 0x68 

DS1307RTC::DS1307RTC()
{
  Wire.begin();
    5670:	8c ea       	ldi	r24, 0xAC	; 172
    5672:	92 e0       	ldi	r25, 0x02	; 2
    5674:	0e 94 04 28 	call	0x5008	; 0x5008 <_ZN7TwoWire5beginEv>
  return ((num/16 * 10) + (num % 16));
}

bool DS1307RTC::exists = false;

DS1307RTC RTC = DS1307RTC(); // create an instance for the user
    5678:	08 95       	ret

0000567a <_ZN7OneWire12reset_searchEv>:

//
// You need to use this function to start a search again from the beginning.
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
    567a:	fc 01       	movw	r30, r24
{
  // reset the search state
  LastDiscrepancy = 0;
    567c:	13 86       	std	Z+11, r1	; 0x0b
  LastDeviceFlag = FALSE;
    567e:	15 86       	std	Z+13, r1	; 0x0d
  LastFamilyDiscrepancy = 0;
    5680:	14 86       	std	Z+12, r1	; 0x0c
    5682:	87 e0       	ldi	r24, 0x07	; 7
    5684:	90 e0       	ldi	r25, 0x00	; 0
  for(int i = 7; ; i--) {
    ROM_NO[i] = 0;
    5686:	12 86       	std	Z+10, r1	; 0x0a
    5688:	31 97       	sbiw	r30, 0x01	; 1
    if ( i == 0) break;
    568a:	00 97       	sbiw	r24, 0x00	; 0
    568c:	11 f0       	breq	.+4      	; 0x5692 <_ZN7OneWire12reset_searchEv+0x18>
{
  // reset the search state
  LastDiscrepancy = 0;
  LastDeviceFlag = FALSE;
  LastFamilyDiscrepancy = 0;
  for(int i = 7; ; i--) {
    568e:	01 97       	sbiw	r24, 0x01	; 1
    5690:	fa cf       	rjmp	.-12     	; 0x5686 <_ZN7OneWire12reset_searchEv+0xc>
    5692:	08 95       	ret

00005694 <_ZN7OneWire4crc8EPKhh>:
// and the registers.  (note: this might better be done without to
// table, it would probably be smaller and certainly fast enough
// compared to all those delayMicrosecond() calls.  But I got
// confused, so I use this table from the examples.)
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
    5694:	dc 01       	movw	r26, r24
    5696:	80 e0       	ldi	r24, 0x00	; 0
    5698:	0b c0       	rjmp	.+22     	; 0x56b0 <_ZN7OneWire4crc8EPKhh+0x1c>
{
	uint8_t crc = 0;

	while (len--) {
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
    569a:	e8 2f       	mov	r30, r24
    569c:	f0 e0       	ldi	r31, 0x00	; 0
    569e:	8d 91       	ld	r24, X+
    56a0:	90 e0       	ldi	r25, 0x00	; 0
    56a2:	e8 27       	eor	r30, r24
    56a4:	f9 27       	eor	r31, r25
    56a6:	e9 59       	subi	r30, 0x99	; 153
    56a8:	f8 4f       	sbci	r31, 0xF8	; 248
    56aa:	e4 91       	lpm	r30, Z+
    56ac:	61 50       	subi	r22, 0x01	; 1
    56ae:	8e 2f       	mov	r24, r30
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;

	while (len--) {
    56b0:	66 23       	and	r22, r22
    56b2:	99 f7       	brne	.-26     	; 0x569a <_ZN7OneWire4crc8EPKhh+0x6>
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
	}
	return crc;
}
    56b4:	08 95       	ret

000056b6 <_ZN7OneWire8read_bitEv>:

//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
    56b6:	df 92       	push	r13
    56b8:	ef 92       	push	r14
    56ba:	ff 92       	push	r15
    56bc:	0f 93       	push	r16
    56be:	1f 93       	push	r17
    56c0:	fc 01       	movw	r30, r24
{
	IO_REG_TYPE mask=bitmask;
    56c2:	e0 80       	ld	r14, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    56c4:	01 81       	ldd	r16, Z+1	; 0x01
    56c6:	12 81       	ldd	r17, Z+2	; 0x02
	uint8_t r;

	noInterrupts();
    56c8:	f8 94       	cli
	DIRECT_MODE_OUTPUT(reg, mask);
    56ca:	f8 01       	movw	r30, r16
    56cc:	81 81       	ldd	r24, Z+1	; 0x01
    56ce:	8e 29       	or	r24, r14
    56d0:	81 83       	std	Z+1, r24	; 0x01
	DIRECT_WRITE_LOW(reg, mask);
    56d2:	82 81       	ldd	r24, Z+2	; 0x02
    56d4:	de 2c       	mov	r13, r14
    56d6:	d0 94       	com	r13
    56d8:	8d 21       	and	r24, r13
    56da:	82 83       	std	Z+2, r24	; 0x02
	delayMicroseconds(3);
    56dc:	83 e0       	ldi	r24, 0x03	; 3
    56de:	90 e0       	ldi	r25, 0x00	; 0
    56e0:	0e 94 72 32 	call	0x64e4	; 0x64e4 <delayMicroseconds>
	DIRECT_MODE_INPUT(reg, mask);	// let pin float, pull up will raise
    56e4:	f8 01       	movw	r30, r16
    56e6:	81 81       	ldd	r24, Z+1	; 0x01
    56e8:	8d 21       	and	r24, r13
    56ea:	81 83       	std	Z+1, r24	; 0x01
	delayMicroseconds(10);
    56ec:	8a e0       	ldi	r24, 0x0A	; 10
    56ee:	90 e0       	ldi	r25, 0x00	; 0
    56f0:	0e 94 72 32 	call	0x64e4	; 0x64e4 <delayMicroseconds>
	r = DIRECT_READ(reg, mask);
    56f4:	f8 01       	movw	r30, r16
    56f6:	00 81       	ld	r16, Z
	interrupts();
    56f8:	78 94       	sei
	delayMicroseconds(53);
    56fa:	85 e3       	ldi	r24, 0x35	; 53
    56fc:	90 e0       	ldi	r25, 0x00	; 0
    56fe:	0e 94 72 32 	call	0x64e4	; 0x64e4 <delayMicroseconds>
    5702:	80 e0       	ldi	r24, 0x00	; 0
    5704:	10 e0       	ldi	r17, 0x00	; 0
    5706:	ff 24       	eor	r15, r15
    5708:	0e 21       	and	r16, r14
    570a:	1f 21       	and	r17, r15
    570c:	01 2b       	or	r16, r17
    570e:	09 f0       	breq	.+2      	; 0x5712 <_ZN7OneWire8read_bitEv+0x5c>
    5710:	81 e0       	ldi	r24, 0x01	; 1
	return r;
}
    5712:	1f 91       	pop	r17
    5714:	0f 91       	pop	r16
    5716:	ff 90       	pop	r15
    5718:	ef 90       	pop	r14
    571a:	df 90       	pop	r13
    571c:	08 95       	ret

0000571e <_ZN7OneWire4readEv>:
}

//
// Read a byte
//
uint8_t OneWire::read() {
    571e:	ef 92       	push	r14
    5720:	ff 92       	push	r15
    5722:	0f 93       	push	r16
    5724:	1f 93       	push	r17
    5726:	cf 93       	push	r28
    5728:	df 93       	push	r29
    572a:	7c 01       	movw	r14, r24
    572c:	01 e0       	ldi	r16, 0x01	; 1
    572e:	10 e0       	ldi	r17, 0x00	; 0
    5730:	c0 e0       	ldi	r28, 0x00	; 0
    5732:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
	if ( OneWire::read_bit()) r |= bitMask;
    5734:	c7 01       	movw	r24, r14
    5736:	0e 94 5b 2b 	call	0x56b6	; 0x56b6 <_ZN7OneWire8read_bitEv>
    573a:	81 11       	cpse	r24, r1
    573c:	10 2b       	or	r17, r16
//
uint8_t OneWire::read() {
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    573e:	00 0f       	add	r16, r16
    5740:	21 96       	adiw	r28, 0x01	; 1
    5742:	c8 30       	cpi	r28, 0x08	; 8
    5744:	d1 05       	cpc	r29, r1
    5746:	b1 f7       	brne	.-20     	; 0x5734 <_ZN7OneWire4readEv+0x16>
	if ( OneWire::read_bit()) r |= bitMask;
    }
    return r;
}
    5748:	81 2f       	mov	r24, r17
    574a:	df 91       	pop	r29
    574c:	cf 91       	pop	r28
    574e:	1f 91       	pop	r17
    5750:	0f 91       	pop	r16
    5752:	ff 90       	pop	r15
    5754:	ef 90       	pop	r14
    5756:	08 95       	ret

00005758 <_ZN7OneWire9write_bitEh>:

//
// Write a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
void OneWire::write_bit(uint8_t v)
    5758:	1f 93       	push	r17
    575a:	cf 93       	push	r28
    575c:	df 93       	push	r29
    575e:	fc 01       	movw	r30, r24
{
	IO_REG_TYPE mask=bitmask;
    5760:	10 81       	ld	r17, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    5762:	c1 81       	ldd	r28, Z+1	; 0x01
    5764:	d2 81       	ldd	r29, Z+2	; 0x02
    5766:	91 2f       	mov	r25, r17
    5768:	90 95       	com	r25

	if (v & 1) {
    576a:	60 ff       	sbrs	r22, 0
    576c:	12 c0       	rjmp	.+36     	; 0x5792 <_ZN7OneWire9write_bitEh+0x3a>
		noInterrupts();
    576e:	f8 94       	cli
		DIRECT_WRITE_LOW(reg, mask);
    5770:	8a 81       	ldd	r24, Y+2	; 0x02
    5772:	89 23       	and	r24, r25
    5774:	8a 83       	std	Y+2, r24	; 0x02
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    5776:	89 81       	ldd	r24, Y+1	; 0x01
    5778:	81 2b       	or	r24, r17
    577a:	89 83       	std	Y+1, r24	; 0x01
		delayMicroseconds(10);
    577c:	8a e0       	ldi	r24, 0x0A	; 10
    577e:	90 e0       	ldi	r25, 0x00	; 0
    5780:	0e 94 72 32 	call	0x64e4	; 0x64e4 <delayMicroseconds>
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
    5784:	8a 81       	ldd	r24, Y+2	; 0x02
    5786:	81 2b       	or	r24, r17
    5788:	8a 83       	std	Y+2, r24	; 0x02
		interrupts();
    578a:	78 94       	sei
		delayMicroseconds(55);
    578c:	87 e3       	ldi	r24, 0x37	; 55
    578e:	90 e0       	ldi	r25, 0x00	; 0
    5790:	11 c0       	rjmp	.+34     	; 0x57b4 <_ZN7OneWire9write_bitEh+0x5c>
	} else {
		noInterrupts();
    5792:	f8 94       	cli
		DIRECT_WRITE_LOW(reg, mask);
    5794:	8a 81       	ldd	r24, Y+2	; 0x02
    5796:	89 23       	and	r24, r25
    5798:	8a 83       	std	Y+2, r24	; 0x02
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    579a:	89 81       	ldd	r24, Y+1	; 0x01
    579c:	81 2b       	or	r24, r17
    579e:	89 83       	std	Y+1, r24	; 0x01
		delayMicroseconds(65);
    57a0:	81 e4       	ldi	r24, 0x41	; 65
    57a2:	90 e0       	ldi	r25, 0x00	; 0
    57a4:	0e 94 72 32 	call	0x64e4	; 0x64e4 <delayMicroseconds>
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
    57a8:	8a 81       	ldd	r24, Y+2	; 0x02
    57aa:	81 2b       	or	r24, r17
    57ac:	8a 83       	std	Y+2, r24	; 0x02
		interrupts();
    57ae:	78 94       	sei
		delayMicroseconds(5);
    57b0:	85 e0       	ldi	r24, 0x05	; 5
    57b2:	90 e0       	ldi	r25, 0x00	; 0
    57b4:	0e 94 72 32 	call	0x64e4	; 0x64e4 <delayMicroseconds>
	}
}
    57b8:	df 91       	pop	r29
    57ba:	cf 91       	pop	r28
    57bc:	1f 91       	pop	r17
    57be:	08 95       	ret

000057c0 <_ZN7OneWire5writeEhh>:
// pin high, if you need power after the write (e.g. DS18S20 in
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) {
    57c0:	cf 92       	push	r12
    57c2:	df 92       	push	r13
    57c4:	ef 92       	push	r14
    57c6:	ff 92       	push	r15
    57c8:	0f 93       	push	r16
    57ca:	1f 93       	push	r17
    57cc:	cf 93       	push	r28
    57ce:	df 93       	push	r29
    57d0:	8c 01       	movw	r16, r24
    57d2:	e4 2e       	mov	r14, r20
    57d4:	ff 24       	eor	r15, r15
    57d6:	f3 94       	inc	r15
    57d8:	c0 e0       	ldi	r28, 0x00	; 0
    57da:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
	OneWire::write_bit( (bitMask & v)?1:0);
    57dc:	c6 2e       	mov	r12, r22
    57de:	dd 24       	eor	r13, r13
    57e0:	60 e0       	ldi	r22, 0x00	; 0
    57e2:	8f 2d       	mov	r24, r15
    57e4:	90 e0       	ldi	r25, 0x00	; 0
    57e6:	8c 21       	and	r24, r12
    57e8:	9d 21       	and	r25, r13
    57ea:	89 2b       	or	r24, r25
    57ec:	09 f0       	breq	.+2      	; 0x57f0 <_ZN7OneWire5writeEhh+0x30>
    57ee:	61 e0       	ldi	r22, 0x01	; 1
    57f0:	c8 01       	movw	r24, r16
    57f2:	0e 94 ac 2b 	call	0x5758	; 0x5758 <_ZN7OneWire9write_bitEh>
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) {
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    57f6:	ff 0c       	add	r15, r15
    57f8:	21 96       	adiw	r28, 0x01	; 1
    57fa:	c8 30       	cpi	r28, 0x08	; 8
    57fc:	d1 05       	cpc	r29, r1
    57fe:	81 f7       	brne	.-32     	; 0x57e0 <_ZN7OneWire5writeEhh+0x20>
	OneWire::write_bit( (bitMask & v)?1:0);
    }
    if ( !power) {
    5800:	ee 20       	and	r14, r14
    5802:	a9 f4       	brne	.+42     	; 0x582e <_ZN7OneWire5writeEhh+0x6e>
	noInterrupts();
    5804:	f8 94       	cli
	DIRECT_MODE_INPUT(baseReg, bitmask);
    5806:	d8 01       	movw	r26, r16
    5808:	11 96       	adiw	r26, 0x01	; 1
    580a:	ed 91       	ld	r30, X+
    580c:	fc 91       	ld	r31, X
    580e:	12 97       	sbiw	r26, 0x02	; 2
    5810:	91 81       	ldd	r25, Z+1	; 0x01
    5812:	8c 91       	ld	r24, X
    5814:	80 95       	com	r24
    5816:	98 23       	and	r25, r24
    5818:	91 83       	std	Z+1, r25	; 0x01
	DIRECT_WRITE_LOW(baseReg, bitmask);
    581a:	11 96       	adiw	r26, 0x01	; 1
    581c:	ed 91       	ld	r30, X+
    581e:	fc 91       	ld	r31, X
    5820:	12 97       	sbiw	r26, 0x02	; 2
    5822:	92 81       	ldd	r25, Z+2	; 0x02
    5824:	8c 91       	ld	r24, X
    5826:	80 95       	com	r24
    5828:	98 23       	and	r25, r24
    582a:	92 83       	std	Z+2, r25	; 0x02
	interrupts();
    582c:	78 94       	sei
    }
}
    582e:	df 91       	pop	r29
    5830:	cf 91       	pop	r28
    5832:	1f 91       	pop	r17
    5834:	0f 91       	pop	r16
    5836:	ff 90       	pop	r15
    5838:	ef 90       	pop	r14
    583a:	df 90       	pop	r13
    583c:	cf 90       	pop	r12
    583e:	08 95       	ret

00005840 <_ZN7OneWire6selectEPKh>:
}

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
    5840:	ef 92       	push	r14
    5842:	ff 92       	push	r15
    5844:	0f 93       	push	r16
    5846:	1f 93       	push	r17
    5848:	cf 93       	push	r28
    584a:	df 93       	push	r29
    584c:	8c 01       	movw	r16, r24
    584e:	7b 01       	movw	r14, r22
{
    uint8_t i;

    write(0x55);           // Choose ROM
    5850:	65 e5       	ldi	r22, 0x55	; 85
    5852:	40 e0       	ldi	r20, 0x00	; 0
    5854:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <_ZN7OneWire5writeEhh>
    5858:	c0 e0       	ldi	r28, 0x00	; 0
    585a:	d0 e0       	ldi	r29, 0x00	; 0

    for (i = 0; i < 8; i++) write(rom[i]);
    585c:	f7 01       	movw	r30, r14
    585e:	ec 0f       	add	r30, r28
    5860:	fd 1f       	adc	r31, r29
    5862:	c8 01       	movw	r24, r16
    5864:	60 81       	ld	r22, Z
    5866:	40 e0       	ldi	r20, 0x00	; 0
    5868:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <_ZN7OneWire5writeEhh>
    586c:	21 96       	adiw	r28, 0x01	; 1
    586e:	c8 30       	cpi	r28, 0x08	; 8
    5870:	d1 05       	cpc	r29, r1
    5872:	a1 f7       	brne	.-24     	; 0x585c <_ZN7OneWire6selectEPKh+0x1c>
}
    5874:	df 91       	pop	r29
    5876:	cf 91       	pop	r28
    5878:	1f 91       	pop	r17
    587a:	0f 91       	pop	r16
    587c:	ff 90       	pop	r15
    587e:	ef 90       	pop	r14
    5880:	08 95       	ret

00005882 <_ZN7OneWire5resetEv>:
// the bus to come high, if it doesn't then it is broken or shorted
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
    5882:	df 92       	push	r13
    5884:	ef 92       	push	r14
    5886:	ff 92       	push	r15
    5888:	0f 93       	push	r16
    588a:	1f 93       	push	r17
    588c:	cf 93       	push	r28
    588e:	df 93       	push	r29
    5890:	fc 01       	movw	r30, r24
{
	IO_REG_TYPE mask = bitmask;
    5892:	00 81       	ld	r16, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    5894:	c1 81       	ldd	r28, Z+1	; 0x01
    5896:	d2 81       	ldd	r29, Z+2	; 0x02
	uint8_t r;
	uint8_t retries = 125;

	noInterrupts();
    5898:	f8 94       	cli
	DIRECT_MODE_INPUT(reg, mask);
    589a:	89 81       	ldd	r24, Y+1	; 0x01
    589c:	d0 2e       	mov	r13, r16
    589e:	d0 94       	com	r13
    58a0:	8d 21       	and	r24, r13
    58a2:	89 83       	std	Y+1, r24	; 0x01
	interrupts();
    58a4:	78 94       	sei
    58a6:	1d e7       	ldi	r17, 0x7D	; 125
	// wait until the wire is high... just in case
	do {
    58a8:	e0 2e       	mov	r14, r16
    58aa:	ff 24       	eor	r15, r15
		if (--retries == 0) return 0;
    58ac:	11 50       	subi	r17, 0x01	; 1
    58ae:	59 f1       	breq	.+86     	; 0x5906 <_ZN7OneWire5resetEv+0x84>
		delayMicroseconds(2);
    58b0:	82 e0       	ldi	r24, 0x02	; 2
    58b2:	90 e0       	ldi	r25, 0x00	; 0
    58b4:	0e 94 72 32 	call	0x64e4	; 0x64e4 <delayMicroseconds>

	noInterrupts();
	DIRECT_MODE_INPUT(reg, mask);
	interrupts();
	// wait until the wire is high... just in case
	do {
    58b8:	88 81       	ld	r24, Y
    58ba:	90 e0       	ldi	r25, 0x00	; 0
    58bc:	8e 21       	and	r24, r14
    58be:	9f 21       	and	r25, r15
    58c0:	89 2b       	or	r24, r25
    58c2:	a1 f3       	breq	.-24     	; 0x58ac <_ZN7OneWire5resetEv+0x2a>
		if (--retries == 0) return 0;
		delayMicroseconds(2);
	} while ( !DIRECT_READ(reg, mask));

	noInterrupts();
    58c4:	f8 94       	cli
	DIRECT_WRITE_LOW(reg, mask);
    58c6:	8a 81       	ldd	r24, Y+2	; 0x02
    58c8:	8d 21       	and	r24, r13
    58ca:	8a 83       	std	Y+2, r24	; 0x02
	DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    58cc:	89 81       	ldd	r24, Y+1	; 0x01
    58ce:	80 2b       	or	r24, r16
    58d0:	89 83       	std	Y+1, r24	; 0x01
	interrupts();
    58d2:	78 94       	sei
	delayMicroseconds(480);
    58d4:	80 ee       	ldi	r24, 0xE0	; 224
    58d6:	91 e0       	ldi	r25, 0x01	; 1
    58d8:	0e 94 72 32 	call	0x64e4	; 0x64e4 <delayMicroseconds>
	noInterrupts();
    58dc:	f8 94       	cli
	DIRECT_MODE_INPUT(reg, mask);	// allow it to float
    58de:	89 81       	ldd	r24, Y+1	; 0x01
    58e0:	8d 21       	and	r24, r13
    58e2:	89 83       	std	Y+1, r24	; 0x01
	delayMicroseconds(70);
    58e4:	86 e4       	ldi	r24, 0x46	; 70
    58e6:	90 e0       	ldi	r25, 0x00	; 0
    58e8:	0e 94 72 32 	call	0x64e4	; 0x64e4 <delayMicroseconds>
	r = !DIRECT_READ(reg, mask);
    58ec:	88 81       	ld	r24, Y
    58ee:	10 e0       	ldi	r17, 0x00	; 0
    58f0:	90 e0       	ldi	r25, 0x00	; 0
    58f2:	e8 22       	and	r14, r24
    58f4:	f9 22       	and	r15, r25
    58f6:	ef 28       	or	r14, r15
    58f8:	09 f4       	brne	.+2      	; 0x58fc <_ZN7OneWire5resetEv+0x7a>
    58fa:	11 e0       	ldi	r17, 0x01	; 1
	interrupts();
    58fc:	78 94       	sei
	delayMicroseconds(410);
    58fe:	8a e9       	ldi	r24, 0x9A	; 154
    5900:	91 e0       	ldi	r25, 0x01	; 1
    5902:	0e 94 72 32 	call	0x64e4	; 0x64e4 <delayMicroseconds>
	return r;
}
    5906:	81 2f       	mov	r24, r17
    5908:	df 91       	pop	r29
    590a:	cf 91       	pop	r28
    590c:	1f 91       	pop	r17
    590e:	0f 91       	pop	r16
    5910:	ff 90       	pop	r15
    5912:	ef 90       	pop	r14
    5914:	df 90       	pop	r13
    5916:	08 95       	ret

00005918 <_ZN7OneWire6searchEPh>:
// Perform the 1-Wire Search Algorithm on the 1-Wire bus using the existing
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
    5918:	af 92       	push	r10
    591a:	bf 92       	push	r11
    591c:	df 92       	push	r13
    591e:	ef 92       	push	r14
    5920:	ff 92       	push	r15
    5922:	0f 93       	push	r16
    5924:	1f 93       	push	r17
    5926:	cf 93       	push	r28
    5928:	df 93       	push	r29
    592a:	ec 01       	movw	r28, r24
    592c:	5b 01       	movw	r10, r22
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = 0;

   // if the last call was not the last one
   if (!LastDeviceFlag)
    592e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5930:	88 23       	and	r24, r24
    5932:	09 f0       	breq	.+2      	; 0x5936 <_ZN7OneWire6searchEPh+0x1e>
    5934:	61 c0       	rjmp	.+194    	; 0x59f8 <_ZN7OneWire6searchEPh+0xe0>
   {
      // 1-Wire reset
      if (!reset())
    5936:	ce 01       	movw	r24, r28
    5938:	0e 94 41 2c 	call	0x5882	; 0x5882 <_ZN7OneWire5resetEv>
    593c:	88 23       	and	r24, r24
    593e:	29 f4       	brne	.+10     	; 0x594a <_ZN7OneWire6searchEPh+0x32>
      {
         // reset the search
         LastDiscrepancy = 0;
    5940:	1b 86       	std	Y+11, r1	; 0x0b
         LastDeviceFlag = FALSE;
    5942:	1d 86       	std	Y+13, r1	; 0x0d
         LastFamilyDiscrepancy = 0;
    5944:	1c 86       	std	Y+12, r1	; 0x0c
    5946:	90 e0       	ldi	r25, 0x00	; 0
    5948:	6b c0       	rjmp	.+214    	; 0x5a20 <_ZN7OneWire6searchEPh+0x108>
         return FALSE;
      }

      // issue the search command
      write(0xF0);
    594a:	ce 01       	movw	r24, r28
    594c:	60 ef       	ldi	r22, 0xF0	; 240
    594e:	40 e0       	ldi	r20, 0x00	; 0
    5950:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <_ZN7OneWire5writeEhh>
    5954:	01 e0       	ldi	r16, 0x01	; 1
    5956:	dd 24       	eor	r13, r13
    5958:	ee 24       	eor	r14, r14
    595a:	ff 24       	eor	r15, r15
    595c:	f3 94       	inc	r15

      // loop to do the search
      do
      {
         // read a bit and its complement
         id_bit = read_bit();
    595e:	ce 01       	movw	r24, r28
    5960:	0e 94 5b 2b 	call	0x56b6	; 0x56b6 <_ZN7OneWire8read_bitEv>
    5964:	18 2f       	mov	r17, r24
         cmp_id_bit = read_bit();
    5966:	ce 01       	movw	r24, r28
    5968:	0e 94 5b 2b 	call	0x56b6	; 0x56b6 <_ZN7OneWire8read_bitEv>

         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1))
    596c:	11 30       	cpi	r17, 0x01	; 1
    596e:	19 f4       	brne	.+6      	; 0x5976 <_ZN7OneWire6searchEPh+0x5e>
    5970:	81 30       	cpi	r24, 0x01	; 1
    5972:	e1 f4       	brne	.+56     	; 0x59ac <_ZN7OneWire6searchEPh+0x94>
    5974:	39 c0       	rjmp	.+114    	; 0x59e8 <_ZN7OneWire6searchEPh+0xd0>
            break;
         else
         {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit)
    5976:	18 17       	cp	r17, r24
    5978:	09 f5       	brne	.+66     	; 0x59bc <_ZN7OneWire6searchEPh+0xa4>
               search_direction = id_bit;  // bit write value for search
            else
            {
               // if this discrepancy if before the Last Discrepancy
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy)
    597a:	8b 85       	ldd	r24, Y+11	; 0x0b
    597c:	08 17       	cp	r16, r24
    597e:	70 f4       	brcc	.+28     	; 0x599c <_ZN7OneWire6searchEPh+0x84>
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
    5980:	60 e0       	ldi	r22, 0x00	; 0
    5982:	fe 01       	movw	r30, r28
    5984:	ee 0d       	add	r30, r14
    5986:	f1 1d       	adc	r31, r1
    5988:	83 81       	ldd	r24, Z+3	; 0x03
    598a:	90 e0       	ldi	r25, 0x00	; 0
    598c:	2f 2d       	mov	r18, r15
    598e:	30 e0       	ldi	r19, 0x00	; 0
    5990:	82 23       	and	r24, r18
    5992:	93 23       	and	r25, r19
    5994:	18 16       	cp	r1, r24
    5996:	19 06       	cpc	r1, r25
    5998:	4c f0       	brlt	.+18     	; 0x59ac <_ZN7OneWire6searchEPh+0x94>
    599a:	03 c0       	rjmp	.+6      	; 0x59a2 <_ZN7OneWire6searchEPh+0x8a>
               else
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    599c:	60 e0       	ldi	r22, 0x00	; 0
    599e:	08 17       	cp	r16, r24
    59a0:	29 f0       	breq	.+10     	; 0x59ac <_ZN7OneWire6searchEPh+0x94>
               if (search_direction == 0)
               {
                  last_zero = id_bit_number;

                  // check for Last discrepancy in family
                  if (last_zero < 9)
    59a2:	09 30       	cpi	r16, 0x09	; 9
    59a4:	08 f0       	brcs	.+2      	; 0x59a8 <_ZN7OneWire6searchEPh+0x90>
    59a6:	4c c0       	rjmp	.+152    	; 0x5a40 <_ZN7OneWire6searchEPh+0x128>
                     LastFamilyDiscrepancy = last_zero;
    59a8:	0c 87       	std	Y+12, r16	; 0x0c
    59aa:	4a c0       	rjmp	.+148    	; 0x5a40 <_ZN7OneWire6searchEPh+0x128>
            }

            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
    59ac:	fe 01       	movw	r30, r28
    59ae:	ee 0d       	add	r30, r14
    59b0:	f1 1d       	adc	r31, r1
    59b2:	83 81       	ldd	r24, Z+3	; 0x03
    59b4:	8f 29       	or	r24, r15
    59b6:	83 83       	std	Z+3, r24	; 0x03
    59b8:	61 e0       	ldi	r22, 0x01	; 1
    59ba:	09 c0       	rjmp	.+18     	; 0x59ce <_ZN7OneWire6searchEPh+0xb6>
    59bc:	61 2f       	mov	r22, r17
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;
    59be:	fe 01       	movw	r30, r28
    59c0:	ee 0d       	add	r30, r14
    59c2:	f1 1d       	adc	r31, r1
    59c4:	9f 2d       	mov	r25, r15
    59c6:	90 95       	com	r25
    59c8:	83 81       	ldd	r24, Z+3	; 0x03
    59ca:	89 23       	and	r24, r25
    59cc:	83 83       	std	Z+3, r24	; 0x03

            // serial number search direction write bit
            write_bit(search_direction);
    59ce:	ce 01       	movw	r24, r28
    59d0:	0e 94 ac 2b 	call	0x5758	; 0x5758 <_ZN7OneWire9write_bitEh>

            // increment the byte counter id_bit_number
            // and shift the mask rom_byte_mask
            id_bit_number++;
    59d4:	0f 5f       	subi	r16, 0xFF	; 255
            rom_byte_mask <<= 1;
    59d6:	ff 0c       	add	r15, r15

            // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
            if (rom_byte_mask == 0)
    59d8:	19 f4       	brne	.+6      	; 0x59e0 <_ZN7OneWire6searchEPh+0xc8>
            {
                rom_byte_number++;
    59da:	e3 94       	inc	r14
    59dc:	ff 24       	eor	r15, r15
    59de:	f3 94       	inc	r15

      // issue the search command
      write(0xF0);

      // loop to do the search
      do
    59e0:	87 e0       	ldi	r24, 0x07	; 7
    59e2:	8e 15       	cp	r24, r14
    59e4:	08 f0       	brcs	.+2      	; 0x59e8 <_ZN7OneWire6searchEPh+0xd0>
    59e6:	bb cf       	rjmp	.-138    	; 0x595e <_ZN7OneWire6searchEPh+0x46>
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7

      // if the search was successful then
      if (!(id_bit_number < 65))
    59e8:	01 34       	cpi	r16, 0x41	; 65
    59ea:	30 f0       	brcs	.+12     	; 0x59f8 <_ZN7OneWire6searchEPh+0xe0>
      {
         // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
         LastDiscrepancy = last_zero;
    59ec:	db 86       	std	Y+11, r13	; 0x0b

         // check for last device
         if (LastDiscrepancy == 0)
    59ee:	dd 20       	and	r13, r13
    59f0:	11 f5       	brne	.+68     	; 0x5a36 <_ZN7OneWire6searchEPh+0x11e>
            LastDeviceFlag = TRUE;
    59f2:	81 e0       	ldi	r24, 0x01	; 1
    59f4:	8d 87       	std	Y+13, r24	; 0x0d
    59f6:	1f c0       	rjmp	.+62     	; 0x5a36 <_ZN7OneWire6searchEPh+0x11e>
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
   {
      LastDiscrepancy = 0;
    59f8:	1b 86       	std	Y+11, r1	; 0x0b
      LastDeviceFlag = FALSE;
    59fa:	1d 86       	std	Y+13, r1	; 0x0d
      LastFamilyDiscrepancy = 0;
    59fc:	1c 86       	std	Y+12, r1	; 0x0c
    59fe:	90 e0       	ldi	r25, 0x00	; 0
    5a00:	de 01       	movw	r26, r28
    5a02:	20 e0       	ldi	r18, 0x00	; 0
    5a04:	30 e0       	ldi	r19, 0x00	; 0
      search_result = FALSE;
   }
   for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
    5a06:	f5 01       	movw	r30, r10
    5a08:	e2 0f       	add	r30, r18
    5a0a:	f3 1f       	adc	r31, r19
    5a0c:	13 96       	adiw	r26, 0x03	; 3
    5a0e:	8c 91       	ld	r24, X
    5a10:	13 97       	sbiw	r26, 0x03	; 3
    5a12:	80 83       	st	Z, r24
    5a14:	2f 5f       	subi	r18, 0xFF	; 255
    5a16:	3f 4f       	sbci	r19, 0xFF	; 255
    5a18:	11 96       	adiw	r26, 0x01	; 1
    5a1a:	28 30       	cpi	r18, 0x08	; 8
    5a1c:	31 05       	cpc	r19, r1
    5a1e:	99 f7       	brne	.-26     	; 0x5a06 <_ZN7OneWire6searchEPh+0xee>
   return search_result;
  }
    5a20:	89 2f       	mov	r24, r25
    5a22:	df 91       	pop	r29
    5a24:	cf 91       	pop	r28
    5a26:	1f 91       	pop	r17
    5a28:	0f 91       	pop	r16
    5a2a:	ff 90       	pop	r15
    5a2c:	ef 90       	pop	r14
    5a2e:	df 90       	pop	r13
    5a30:	bf 90       	pop	r11
    5a32:	af 90       	pop	r10
    5a34:	08 95       	ret
         search_result = TRUE;
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
    5a36:	8b 81       	ldd	r24, Y+3	; 0x03
    5a38:	88 23       	and	r24, r24
    5a3a:	f1 f2       	breq	.-68     	; 0x59f8 <_ZN7OneWire6searchEPh+0xe0>
    5a3c:	91 e0       	ldi	r25, 0x01	; 1
    5a3e:	e0 cf       	rjmp	.-64     	; 0x5a00 <_ZN7OneWire6searchEPh+0xe8>
    5a40:	d0 2e       	mov	r13, r16
    5a42:	bd cf       	rjmp	.-134    	; 0x59be <_ZN7OneWire6searchEPh+0xa6>

00005a44 <_ZN7OneWireC1Eh>:
*/

#include "OneWire.h"


OneWire::OneWire(uint8_t pin)
    5a44:	ff 92       	push	r15
    5a46:	0f 93       	push	r16
    5a48:	1f 93       	push	r17
    5a4a:	8c 01       	movw	r16, r24
    5a4c:	f6 2e       	mov	r15, r22
{
	pinMode(pin, INPUT);
    5a4e:	86 2f       	mov	r24, r22
    5a50:	60 e0       	ldi	r22, 0x00	; 0
    5a52:	0e 94 b7 32 	call	0x656e	; 0x656e <pinMode>
	bitmask = PIN_TO_BITMASK(pin);
    5a56:	8f 2d       	mov	r24, r15
    5a58:	90 e0       	ldi	r25, 0x00	; 0
    5a5a:	fc 01       	movw	r30, r24
    5a5c:	e7 56       	subi	r30, 0x67	; 103
    5a5e:	f7 4f       	sbci	r31, 0xF7	; 247
    5a60:	e4 91       	lpm	r30, Z+
    5a62:	d8 01       	movw	r26, r16
    5a64:	ec 93       	st	X, r30
	baseReg = PIN_TO_BASEREG(pin);
    5a66:	8b 57       	subi	r24, 0x7B	; 123
    5a68:	97 4f       	sbci	r25, 0xF7	; 247
    5a6a:	fc 01       	movw	r30, r24
    5a6c:	64 91       	lpm	r22, Z+
    5a6e:	e6 2f       	mov	r30, r22
    5a70:	f0 e0       	ldi	r31, 0x00	; 0
    5a72:	ee 0f       	add	r30, r30
    5a74:	ff 1f       	adc	r31, r31
    5a76:	e5 58       	subi	r30, 0x85	; 133
    5a78:	f7 4f       	sbci	r31, 0xF7	; 247
    5a7a:	85 91       	lpm	r24, Z+
    5a7c:	94 91       	lpm	r25, Z+
    5a7e:	12 96       	adiw	r26, 0x02	; 2
    5a80:	9c 93       	st	X, r25
    5a82:	8e 93       	st	-X, r24
    5a84:	11 97       	sbiw	r26, 0x01	; 1
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
  // reset the search state
  LastDiscrepancy = 0;
    5a86:	1b 96       	adiw	r26, 0x0b	; 11
    5a88:	1c 92       	st	X, r1
    5a8a:	1b 97       	sbiw	r26, 0x0b	; 11
  LastDeviceFlag = FALSE;
    5a8c:	1d 96       	adiw	r26, 0x0d	; 13
    5a8e:	1c 92       	st	X, r1
    5a90:	1d 97       	sbiw	r26, 0x0d	; 13
  LastFamilyDiscrepancy = 0;
    5a92:	1c 96       	adiw	r26, 0x0c	; 12
    5a94:	1c 92       	st	X, r1
    5a96:	f8 01       	movw	r30, r16
    5a98:	87 e0       	ldi	r24, 0x07	; 7
    5a9a:	90 e0       	ldi	r25, 0x00	; 0
  for(int i = 7; ; i--) {
    ROM_NO[i] = 0;
    5a9c:	12 86       	std	Z+10, r1	; 0x0a
    5a9e:	31 97       	sbiw	r30, 0x01	; 1
    if ( i == 0) break;
    5aa0:	00 97       	sbiw	r24, 0x00	; 0
    5aa2:	11 f0       	breq	.+4      	; 0x5aa8 <_ZN7OneWireC1Eh+0x64>
{
  // reset the search state
  LastDiscrepancy = 0;
  LastDeviceFlag = FALSE;
  LastFamilyDiscrepancy = 0;
  for(int i = 7; ; i--) {
    5aa4:	01 97       	sbiw	r24, 0x01	; 1
    5aa6:	fa cf       	rjmp	.-12     	; 0x5a9c <_ZN7OneWireC1Eh+0x58>
	bitmask = PIN_TO_BITMASK(pin);
	baseReg = PIN_TO_BASEREG(pin);
#if ONEWIRE_SEARCH
	reset_search();
#endif
}
    5aa8:	1f 91       	pop	r17
    5aaa:	0f 91       	pop	r16
    5aac:	ff 90       	pop	r15
    5aae:	08 95       	ret

00005ab0 <_ZN17DallasTemperatureC1EP7OneWire>:
extern "C" {
    #include "WConstants.h"
}
#endif

DallasTemperature::DallasTemperature(OneWire* _oneWire)
    5ab0:	fc 01       	movw	r30, r24
  #if REQUIRESALARMS
  : _AlarmHandler(&defaultAlarmHandler)
    5ab2:	81 e2       	ldi	r24, 0x21	; 33
    5ab4:	9e e2       	ldi	r25, 0x2E	; 46
    5ab6:	92 8b       	std	Z+18, r25	; 0x12
    5ab8:	81 8b       	std	Z+17, r24	; 0x11
  #endif
{
  _wire = _oneWire;
    5aba:	76 83       	std	Z+6, r23	; 0x06
    5abc:	65 83       	std	Z+5, r22	; 0x05
  devices = 0;
    5abe:	14 82       	std	Z+4, r1	; 0x04
  parasite = false;
    5ac0:	10 82       	st	Z, r1
  bitResolution = 9;
    5ac2:	89 e0       	ldi	r24, 0x09	; 9
    5ac4:	81 83       	std	Z+1, r24	; 0x01
  waitForConversion = true;
    5ac6:	81 e0       	ldi	r24, 0x01	; 1
    5ac8:	82 83       	std	Z+2, r24	; 0x02
  checkForConversion = true;
    5aca:	83 83       	std	Z+3, r24	; 0x03
}
    5acc:	08 95       	ret

00005ace <_ZN17DallasTemperature14getDeviceCountEv>:

// returns the number of devices found on the bus
uint8_t DallasTemperature::getDeviceCount(void)
{
  return devices;
}
    5ace:	fc 01       	movw	r30, r24
    5ad0:	84 81       	ldd	r24, Z+4	; 0x04
    5ad2:	08 95       	ret

00005ad4 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>:
{
  return toFahrenheit(getTempCByIndex(deviceIndex));
}

// reads scratchpad and returns the temperature in degrees C
float DallasTemperature::calculateTemperature(uint8_t* deviceAddress, uint8_t* scratchPad)
    5ad4:	6f 92       	push	r6
    5ad6:	7f 92       	push	r7
    5ad8:	8f 92       	push	r8
    5ada:	9f 92       	push	r9
    5adc:	af 92       	push	r10
    5ade:	bf 92       	push	r11
    5ae0:	cf 92       	push	r12
    5ae2:	df 92       	push	r13
    5ae4:	ef 92       	push	r14
    5ae6:	ff 92       	push	r15
    5ae8:	0f 93       	push	r16
    5aea:	1f 93       	push	r17
    5aec:	cf 93       	push	r28
    5aee:	df 93       	push	r29
    5af0:	fb 01       	movw	r30, r22
    5af2:	ea 01       	movw	r28, r20
{
  int16_t rawTemperature = (((int16_t)scratchPad[TEMP_MSB]) << 8) | scratchPad[TEMP_LSB];
    5af4:	99 81       	ldd	r25, Y+1	; 0x01
    5af6:	80 e0       	ldi	r24, 0x00	; 0
    5af8:	28 81       	ld	r18, Y
    5afa:	30 e0       	ldi	r19, 0x00	; 0
    5afc:	28 2b       	or	r18, r24
    5afe:	39 2b       	or	r19, r25

  switch (deviceAddress[0])
    5b00:	e0 81       	ld	r30, Z
    5b02:	e2 32       	cpi	r30, 0x22	; 34
    5b04:	31 f0       	breq	.+12     	; 0x5b12 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3e>
    5b06:	e8 32       	cpi	r30, 0x28	; 40
    5b08:	21 f0       	breq	.+8      	; 0x5b12 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3e>
    5b0a:	e0 31       	cpi	r30, 0x10	; 16
    5b0c:	09 f0       	breq	.+2      	; 0x5b10 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3c>
    5b0e:	84 c0       	rjmp	.+264    	; 0x5c18 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
    5b10:	4b c0       	rjmp	.+150    	; 0x5ba8 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xd4>
  {
    case DS18B20MODEL:
    case DS1822MODEL:
      switch (scratchPad[CONFIGURATION])
    5b12:	4c 81       	ldd	r20, Y+4	; 0x04
    5b14:	4f 33       	cpi	r20, 0x3F	; 63
    5b16:	29 f1       	breq	.+74     	; 0x5b62 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x8e>
    5b18:	40 34       	cpi	r20, 0x40	; 64
    5b1a:	20 f4       	brcc	.+8      	; 0x5b24 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x50>
    5b1c:	4f 31       	cpi	r20, 0x1F	; 31
    5b1e:	09 f0       	breq	.+2      	; 0x5b22 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x4e>
    5b20:	7b c0       	rjmp	.+246    	; 0x5c18 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
    5b22:	2f c0       	rjmp	.+94     	; 0x5b82 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xae>
    5b24:	4f 35       	cpi	r20, 0x5F	; 95
    5b26:	79 f0       	breq	.+30     	; 0x5b46 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x72>
    5b28:	4f 37       	cpi	r20, 0x7F	; 127
    5b2a:	09 f0       	breq	.+2      	; 0x5b2e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x5a>
    5b2c:	75 c0       	rjmp	.+234    	; 0x5c18 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
      {
        case TEMP_12_BIT:
          return (float)rawTemperature * 0.0625;
    5b2e:	b9 01       	movw	r22, r18
    5b30:	88 27       	eor	r24, r24
    5b32:	77 fd       	sbrc	r23, 7
    5b34:	80 95       	com	r24
    5b36:	98 2f       	mov	r25, r24
    5b38:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <__floatsisf>
    5b3c:	20 e0       	ldi	r18, 0x00	; 0
    5b3e:	30 e0       	ldi	r19, 0x00	; 0
    5b40:	40 e8       	ldi	r20, 0x80	; 128
    5b42:	5d e3       	ldi	r21, 0x3D	; 61
    5b44:	2e c0       	rjmp	.+92     	; 0x5ba2 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xce>
          break;
        case TEMP_11_BIT:
          return (float)(rawTemperature >> 1) * 0.125;
    5b46:	35 95       	asr	r19
    5b48:	27 95       	ror	r18
    5b4a:	b9 01       	movw	r22, r18
    5b4c:	88 27       	eor	r24, r24
    5b4e:	77 fd       	sbrc	r23, 7
    5b50:	80 95       	com	r24
    5b52:	98 2f       	mov	r25, r24
    5b54:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <__floatsisf>
    5b58:	20 e0       	ldi	r18, 0x00	; 0
    5b5a:	30 e0       	ldi	r19, 0x00	; 0
    5b5c:	40 e0       	ldi	r20, 0x00	; 0
    5b5e:	5e e3       	ldi	r21, 0x3E	; 62
    5b60:	20 c0       	rjmp	.+64     	; 0x5ba2 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xce>
          break;
        case TEMP_10_BIT:
          return (float)(rawTemperature >> 2) * 0.25;
    5b62:	35 95       	asr	r19
    5b64:	27 95       	ror	r18
    5b66:	35 95       	asr	r19
    5b68:	27 95       	ror	r18
    5b6a:	b9 01       	movw	r22, r18
    5b6c:	88 27       	eor	r24, r24
    5b6e:	77 fd       	sbrc	r23, 7
    5b70:	80 95       	com	r24
    5b72:	98 2f       	mov	r25, r24
    5b74:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <__floatsisf>
    5b78:	20 e0       	ldi	r18, 0x00	; 0
    5b7a:	30 e0       	ldi	r19, 0x00	; 0
    5b7c:	40 e8       	ldi	r20, 0x80	; 128
    5b7e:	5e e3       	ldi	r21, 0x3E	; 62
    5b80:	10 c0       	rjmp	.+32     	; 0x5ba2 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xce>
          break;
        case TEMP_9_BIT:
          return (float)(rawTemperature >> 3) * 0.5;
    5b82:	93 e0       	ldi	r25, 0x03	; 3
    5b84:	35 95       	asr	r19
    5b86:	27 95       	ror	r18
    5b88:	9a 95       	dec	r25
    5b8a:	e1 f7       	brne	.-8      	; 0x5b84 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xb0>
    5b8c:	b9 01       	movw	r22, r18
    5b8e:	88 27       	eor	r24, r24
    5b90:	77 fd       	sbrc	r23, 7
    5b92:	80 95       	com	r24
    5b94:	98 2f       	mov	r25, r24
    5b96:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <__floatsisf>
    5b9a:	20 e0       	ldi	r18, 0x00	; 0
    5b9c:	30 e0       	ldi	r19, 0x00	; 0
    5b9e:	40 e0       	ldi	r20, 0x00	; 0
    5ba0:	5f e3       	ldi	r21, 0x3F	; 63
    5ba2:	0e 94 27 3d 	call	0x7a4e	; 0x7a4e <__mulsf3>
    5ba6:	32 c0       	rjmp	.+100    	; 0x5c0c <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x138>
      TEMPERATURE = TEMP_READ - 0.25 + --------------------------
                                               COUNT_PER_C
      */

      // Good spot. Thanks Nic Johns for your contribution
      return (float)(rawTemperature >> 1) - 0.25 +((float)(scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) / (float)scratchPad[COUNT_PER_C] );
    5ba8:	ef 80       	ldd	r14, Y+7	; 0x07
    5baa:	35 95       	asr	r19
    5bac:	27 95       	ror	r18
    5bae:	b9 01       	movw	r22, r18
    5bb0:	88 27       	eor	r24, r24
    5bb2:	77 fd       	sbrc	r23, 7
    5bb4:	80 95       	com	r24
    5bb6:	98 2f       	mov	r25, r24
    5bb8:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <__floatsisf>
    5bbc:	20 e0       	ldi	r18, 0x00	; 0
    5bbe:	30 e0       	ldi	r19, 0x00	; 0
    5bc0:	40 e8       	ldi	r20, 0x80	; 128
    5bc2:	5e e3       	ldi	r21, 0x3E	; 62
    5bc4:	0e 94 6f 3b 	call	0x76de	; 0x76de <__subsf3>
    5bc8:	3b 01       	movw	r6, r22
    5bca:	4c 01       	movw	r8, r24
    5bcc:	6e 2d       	mov	r22, r14
    5bce:	70 e0       	ldi	r23, 0x00	; 0
    5bd0:	2e 81       	ldd	r18, Y+6	; 0x06
    5bd2:	62 1b       	sub	r22, r18
    5bd4:	71 09       	sbc	r23, r1
    5bd6:	88 27       	eor	r24, r24
    5bd8:	77 fd       	sbrc	r23, 7
    5bda:	80 95       	com	r24
    5bdc:	98 2f       	mov	r25, r24
    5bde:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <__floatsisf>
    5be2:	5b 01       	movw	r10, r22
    5be4:	6c 01       	movw	r12, r24
    5be6:	ff 24       	eor	r15, r15
    5be8:	00 e0       	ldi	r16, 0x00	; 0
    5bea:	10 e0       	ldi	r17, 0x00	; 0
    5bec:	c8 01       	movw	r24, r16
    5bee:	b7 01       	movw	r22, r14
    5bf0:	0e 94 71 3c 	call	0x78e2	; 0x78e2 <__floatunsisf>
    5bf4:	9b 01       	movw	r18, r22
    5bf6:	ac 01       	movw	r20, r24
    5bf8:	c6 01       	movw	r24, r12
    5bfa:	b5 01       	movw	r22, r10
    5bfc:	0e 94 d8 3b 	call	0x77b0	; 0x77b0 <__divsf3>
    5c00:	9b 01       	movw	r18, r22
    5c02:	ac 01       	movw	r20, r24
    5c04:	c4 01       	movw	r24, r8
    5c06:	b3 01       	movw	r22, r6
    5c08:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__addsf3>
    5c0c:	9b 01       	movw	r18, r22
    5c0e:	ac 01       	movw	r20, r24
      break;
  }
}
    5c10:	83 2f       	mov	r24, r19
    5c12:	94 2f       	mov	r25, r20
    5c14:	75 2f       	mov	r23, r21
    5c16:	00 c0       	rjmp	.+0      	; 0x5c18 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
    5c18:	26 2f       	mov	r18, r22
    5c1a:	38 2f       	mov	r19, r24
    5c1c:	49 2f       	mov	r20, r25
    5c1e:	57 2f       	mov	r21, r23
    5c20:	b9 01       	movw	r22, r18
    5c22:	ca 01       	movw	r24, r20
    5c24:	df 91       	pop	r29
    5c26:	cf 91       	pop	r28
    5c28:	1f 91       	pop	r17
    5c2a:	0f 91       	pop	r16
    5c2c:	ff 90       	pop	r15
    5c2e:	ef 90       	pop	r14
    5c30:	df 90       	pop	r13
    5c32:	cf 90       	pop	r12
    5c34:	bf 90       	pop	r11
    5c36:	af 90       	pop	r10
    5c38:	9f 90       	pop	r9
    5c3a:	8f 90       	pop	r8
    5c3c:	7f 90       	pop	r7
    5c3e:	6f 90       	pop	r6
    5c40:	08 95       	ret

00005c42 <_ZN17DallasTemperature19defaultAlarmHandlerEPh>:
}

// The default alarm handler
void DallasTemperature::defaultAlarmHandler(uint8_t* deviceAddress)
{
}
    5c42:	08 95       	ret

00005c44 <_ZN17DallasTemperature15readPowerSupplyEPh>:
  if (parasite) delay(10); // 10ms delay
  _wire->reset();
}

// reads the device's power requirements
bool DallasTemperature::readPowerSupply(uint8_t* deviceAddress)
    5c44:	ef 92       	push	r14
    5c46:	ff 92       	push	r15
    5c48:	0f 93       	push	r16
    5c4a:	1f 93       	push	r17
    5c4c:	8c 01       	movw	r16, r24
    5c4e:	7b 01       	movw	r14, r22
{
  bool ret = false;
  _wire->reset();
    5c50:	fc 01       	movw	r30, r24
    5c52:	85 81       	ldd	r24, Z+5	; 0x05
    5c54:	96 81       	ldd	r25, Z+6	; 0x06
    5c56:	0e 94 41 2c 	call	0x5882	; 0x5882 <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
    5c5a:	f8 01       	movw	r30, r16
    5c5c:	85 81       	ldd	r24, Z+5	; 0x05
    5c5e:	96 81       	ldd	r25, Z+6	; 0x06
    5c60:	b7 01       	movw	r22, r14
    5c62:	0e 94 20 2c 	call	0x5840	; 0x5840 <_ZN7OneWire6selectEPKh>
  _wire->write(READPOWERSUPPLY);
    5c66:	f8 01       	movw	r30, r16
    5c68:	85 81       	ldd	r24, Z+5	; 0x05
    5c6a:	96 81       	ldd	r25, Z+6	; 0x06
    5c6c:	64 eb       	ldi	r22, 0xB4	; 180
    5c6e:	40 e0       	ldi	r20, 0x00	; 0
    5c70:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <_ZN7OneWire5writeEhh>
  if (_wire->read_bit() == 0) ret = true;
    5c74:	f8 01       	movw	r30, r16
    5c76:	85 81       	ldd	r24, Z+5	; 0x05
    5c78:	96 81       	ldd	r25, Z+6	; 0x06
    5c7a:	0e 94 5b 2b 	call	0x56b6	; 0x56b6 <_ZN7OneWire8read_bitEv>
    5c7e:	f8 2e       	mov	r15, r24
  _wire->reset();
    5c80:	f8 01       	movw	r30, r16
    5c82:	85 81       	ldd	r24, Z+5	; 0x05
    5c84:	96 81       	ldd	r25, Z+6	; 0x06
    5c86:	0e 94 41 2c 	call	0x5882	; 0x5882 <_ZN7OneWire5resetEv>
    5c8a:	80 e0       	ldi	r24, 0x00	; 0
    5c8c:	ff 20       	and	r15, r15
    5c8e:	09 f4       	brne	.+2      	; 0x5c92 <_ZN17DallasTemperature15readPowerSupplyEPh+0x4e>
    5c90:	81 e0       	ldi	r24, 0x01	; 1
  return ret;
}
    5c92:	1f 91       	pop	r17
    5c94:	0f 91       	pop	r16
    5c96:	ff 90       	pop	r15
    5c98:	ef 90       	pop	r14
    5c9a:	08 95       	ret

00005c9c <_ZN17DallasTemperature14readScratchPadEPhS0_>:
  readScratchPad(deviceAddress, scratchPad);
  return (_wire->crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]);
}

// read device's scratch pad
void DallasTemperature::readScratchPad(uint8_t* deviceAddress, uint8_t* scratchPad)
    5c9c:	cf 92       	push	r12
    5c9e:	df 92       	push	r13
    5ca0:	ef 92       	push	r14
    5ca2:	ff 92       	push	r15
    5ca4:	0f 93       	push	r16
    5ca6:	1f 93       	push	r17
    5ca8:	8c 01       	movw	r16, r24
    5caa:	6b 01       	movw	r12, r22
    5cac:	7a 01       	movw	r14, r20
{
  // send the command
  _wire->reset();
    5cae:	fc 01       	movw	r30, r24
    5cb0:	85 81       	ldd	r24, Z+5	; 0x05
    5cb2:	96 81       	ldd	r25, Z+6	; 0x06
    5cb4:	0e 94 41 2c 	call	0x5882	; 0x5882 <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
    5cb8:	f8 01       	movw	r30, r16
    5cba:	85 81       	ldd	r24, Z+5	; 0x05
    5cbc:	96 81       	ldd	r25, Z+6	; 0x06
    5cbe:	b6 01       	movw	r22, r12
    5cc0:	0e 94 20 2c 	call	0x5840	; 0x5840 <_ZN7OneWire6selectEPKh>
  _wire->write(READSCRATCH);
    5cc4:	f8 01       	movw	r30, r16
    5cc6:	85 81       	ldd	r24, Z+5	; 0x05
    5cc8:	96 81       	ldd	r25, Z+6	; 0x06
    5cca:	6e eb       	ldi	r22, 0xBE	; 190
    5ccc:	40 e0       	ldi	r20, 0x00	; 0
    5cce:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <_ZN7OneWire5writeEhh>

  
  // read the response

  // byte 0: temperature LSB
  scratchPad[TEMP_LSB] = _wire->read();
    5cd2:	f8 01       	movw	r30, r16
    5cd4:	85 81       	ldd	r24, Z+5	; 0x05
    5cd6:	96 81       	ldd	r25, Z+6	; 0x06
    5cd8:	0e 94 8f 2b 	call	0x571e	; 0x571e <_ZN7OneWire4readEv>
    5cdc:	f7 01       	movw	r30, r14
    5cde:	80 83       	st	Z, r24

  // byte 1: temperature MSB
  scratchPad[TEMP_MSB] = _wire->read();
    5ce0:	f8 01       	movw	r30, r16
    5ce2:	85 81       	ldd	r24, Z+5	; 0x05
    5ce4:	96 81       	ldd	r25, Z+6	; 0x06
    5ce6:	0e 94 8f 2b 	call	0x571e	; 0x571e <_ZN7OneWire4readEv>
    5cea:	f7 01       	movw	r30, r14
    5cec:	81 83       	std	Z+1, r24	; 0x01

  // byte 2: high alarm temp
  scratchPad[HIGH_ALARM_TEMP] = _wire->read();
    5cee:	f8 01       	movw	r30, r16
    5cf0:	85 81       	ldd	r24, Z+5	; 0x05
    5cf2:	96 81       	ldd	r25, Z+6	; 0x06
    5cf4:	0e 94 8f 2b 	call	0x571e	; 0x571e <_ZN7OneWire4readEv>
    5cf8:	f7 01       	movw	r30, r14
    5cfa:	82 83       	std	Z+2, r24	; 0x02

  // byte 3: low alarm temp
  scratchPad[LOW_ALARM_TEMP] = _wire->read();
    5cfc:	f8 01       	movw	r30, r16
    5cfe:	85 81       	ldd	r24, Z+5	; 0x05
    5d00:	96 81       	ldd	r25, Z+6	; 0x06
    5d02:	0e 94 8f 2b 	call	0x571e	; 0x571e <_ZN7OneWire4readEv>
    5d06:	f7 01       	movw	r30, r14
    5d08:	83 83       	std	Z+3, r24	; 0x03

  // byte 4:
  // DS18S20: store for crc
  // DS18B20 & DS1822: configuration register
  scratchPad[CONFIGURATION] = _wire->read();
    5d0a:	f8 01       	movw	r30, r16
    5d0c:	85 81       	ldd	r24, Z+5	; 0x05
    5d0e:	96 81       	ldd	r25, Z+6	; 0x06
    5d10:	0e 94 8f 2b 	call	0x571e	; 0x571e <_ZN7OneWire4readEv>
    5d14:	f7 01       	movw	r30, r14
    5d16:	84 83       	std	Z+4, r24	; 0x04

  // byte 5:
  // internal use & crc
  scratchPad[INTERNAL_BYTE] = _wire->read();
    5d18:	f8 01       	movw	r30, r16
    5d1a:	85 81       	ldd	r24, Z+5	; 0x05
    5d1c:	96 81       	ldd	r25, Z+6	; 0x06
    5d1e:	0e 94 8f 2b 	call	0x571e	; 0x571e <_ZN7OneWire4readEv>
    5d22:	f7 01       	movw	r30, r14
    5d24:	85 83       	std	Z+5, r24	; 0x05

  // byte 6:
  // DS18S20: COUNT_REMAIN
  // DS18B20 & DS1822: store for crc
  scratchPad[COUNT_REMAIN] = _wire->read();
    5d26:	f8 01       	movw	r30, r16
    5d28:	85 81       	ldd	r24, Z+5	; 0x05
    5d2a:	96 81       	ldd	r25, Z+6	; 0x06
    5d2c:	0e 94 8f 2b 	call	0x571e	; 0x571e <_ZN7OneWire4readEv>
    5d30:	f7 01       	movw	r30, r14
    5d32:	86 83       	std	Z+6, r24	; 0x06

  // byte 7:
  // DS18S20: COUNT_PER_C
  // DS18B20 & DS1822: store for crc
  scratchPad[COUNT_PER_C] = _wire->read();
    5d34:	f8 01       	movw	r30, r16
    5d36:	85 81       	ldd	r24, Z+5	; 0x05
    5d38:	96 81       	ldd	r25, Z+6	; 0x06
    5d3a:	0e 94 8f 2b 	call	0x571e	; 0x571e <_ZN7OneWire4readEv>
    5d3e:	f7 01       	movw	r30, r14
    5d40:	87 83       	std	Z+7, r24	; 0x07

  // byte 8:
  // SCTRACHPAD_CRC
  scratchPad[SCRATCHPAD_CRC] = _wire->read();
    5d42:	f8 01       	movw	r30, r16
    5d44:	85 81       	ldd	r24, Z+5	; 0x05
    5d46:	96 81       	ldd	r25, Z+6	; 0x06
    5d48:	0e 94 8f 2b 	call	0x571e	; 0x571e <_ZN7OneWire4readEv>
    5d4c:	f7 01       	movw	r30, r14
    5d4e:	80 87       	std	Z+8, r24	; 0x08

  _wire->reset();
    5d50:	f8 01       	movw	r30, r16
    5d52:	85 81       	ldd	r24, Z+5	; 0x05
    5d54:	96 81       	ldd	r25, Z+6	; 0x06
    5d56:	0e 94 41 2c 	call	0x5882	; 0x5882 <_ZN7OneWire5resetEv>
}
    5d5a:	1f 91       	pop	r17
    5d5c:	0f 91       	pop	r16
    5d5e:	ff 90       	pop	r15
    5d60:	ef 90       	pop	r14
    5d62:	df 90       	pop	r13
    5d64:	cf 90       	pop	r12
    5d66:	08 95       	ret

00005d68 <_ZN17DallasTemperature21isConversionAvailableEPh>:
bool DallasTemperature::getCheckForConversion()
{
	return checkForConversion;
}

bool DallasTemperature::isConversionAvailable(uint8_t* deviceAddress)
    5d68:	df 93       	push	r29
    5d6a:	cf 93       	push	r28
    5d6c:	cd b7       	in	r28, 0x3d	; 61
    5d6e:	de b7       	in	r29, 0x3e	; 62
    5d70:	29 97       	sbiw	r28, 0x09	; 9
    5d72:	0f b6       	in	r0, 0x3f	; 63
    5d74:	f8 94       	cli
    5d76:	de bf       	out	0x3e, r29	; 62
    5d78:	0f be       	out	0x3f, r0	; 63
    5d7a:	cd bf       	out	0x3d, r28	; 61
{
	// Check if the clock has been raised indicating the conversion is complete
  	ScratchPad scratchPad;
  	readScratchPad(deviceAddress, scratchPad);
    5d7c:	ae 01       	movw	r20, r28
    5d7e:	4f 5f       	subi	r20, 0xFF	; 255
    5d80:	5f 4f       	sbci	r21, 0xFF	; 255
    5d82:	0e 94 4e 2e 	call	0x5c9c	; 0x5c9c <_ZN17DallasTemperature14readScratchPadEPhS0_>
    5d86:	89 81       	ldd	r24, Y+1	; 0x01
    5d88:	81 11       	cpse	r24, r1
    5d8a:	81 e0       	ldi	r24, 0x01	; 1
	return scratchPad[0];
}	
    5d8c:	29 96       	adiw	r28, 0x09	; 9
    5d8e:	0f b6       	in	r0, 0x3f	; 63
    5d90:	f8 94       	cli
    5d92:	de bf       	out	0x3e, r29	; 62
    5d94:	0f be       	out	0x3f, r0	; 63
    5d96:	cd bf       	out	0x3d, r28	; 61
    5d98:	cf 91       	pop	r28
    5d9a:	df 91       	pop	r29
    5d9c:	08 95       	ret

00005d9e <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>:
  
  return true;
}


void DallasTemperature::blockTillConversionComplete(uint8_t* bitResolution, uint8_t* deviceAddress)
    5d9e:	cf 92       	push	r12
    5da0:	df 92       	push	r13
    5da2:	ef 92       	push	r14
    5da4:	ff 92       	push	r15
    5da6:	0f 93       	push	r16
    5da8:	1f 93       	push	r17
    5daa:	cf 93       	push	r28
    5dac:	df 93       	push	r29
    5dae:	ec 01       	movw	r28, r24
    5db0:	6b 01       	movw	r12, r22
{
	if(deviceAddress != 0 && checkForConversion && !parasite)
    5db2:	45 2b       	or	r20, r21
    5db4:	e1 f0       	breq	.+56     	; 0x5dee <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
    5db6:	8b 81       	ldd	r24, Y+3	; 0x03
    5db8:	88 23       	and	r24, r24
    5dba:	c9 f0       	breq	.+50     	; 0x5dee <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
    5dbc:	88 81       	ld	r24, Y
    5dbe:	88 23       	and	r24, r24
    5dc0:	b1 f4       	brne	.+44     	; 0x5dee <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
	{
	  	// Continue to check if the IC has responded with a temperature
	  	// NB: Could cause issues with multiple devices (one device may respond faster)
	  	unsigned long start = millis();
    5dc2:	0e 94 0b 32 	call	0x6416	; 0x6416 <millis>
    5dc6:	7b 01       	movw	r14, r22
    5dc8:	8c 01       	movw	r16, r24
		while(!isConversionAvailable(0) && ((millis() - start) < 750));	
    5dca:	ce 01       	movw	r24, r28
    5dcc:	60 e0       	ldi	r22, 0x00	; 0
    5dce:	70 e0       	ldi	r23, 0x00	; 0
    5dd0:	0e 94 b4 2e 	call	0x5d68	; 0x5d68 <_ZN17DallasTemperature21isConversionAvailableEPh>
    5dd4:	88 23       	and	r24, r24
    5dd6:	59 f4       	brne	.+22     	; 0x5dee <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
    5dd8:	0e 94 0b 32 	call	0x6416	; 0x6416 <millis>
    5ddc:	6e 19       	sub	r22, r14
    5dde:	7f 09       	sbc	r23, r15
    5de0:	80 0b       	sbc	r24, r16
    5de2:	91 0b       	sbc	r25, r17
    5de4:	6e 5e       	subi	r22, 0xEE	; 238
    5de6:	72 40       	sbci	r23, 0x02	; 2
    5de8:	80 40       	sbci	r24, 0x00	; 0
    5dea:	90 40       	sbci	r25, 0x00	; 0
    5dec:	70 f3       	brcs	.-36     	; 0x5dca <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x2c>
	}
	
  	// Wait a fix number of cycles till conversion is complete (based on IC datasheet)
	  switch (*bitResolution)
    5dee:	f6 01       	movw	r30, r12
    5df0:	60 81       	ld	r22, Z
    5df2:	69 30       	cpi	r22, 0x09	; 9
    5df4:	39 f0       	breq	.+14     	; 0x5e04 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x66>
    5df6:	69 30       	cpi	r22, 0x09	; 9
    5df8:	a0 f0       	brcs	.+40     	; 0x5e22 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x84>
    5dfa:	6a 30       	cpi	r22, 0x0A	; 10
    5dfc:	41 f0       	breq	.+16     	; 0x5e0e <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x70>
    5dfe:	6b 30       	cpi	r22, 0x0B	; 11
    5e00:	81 f4       	brne	.+32     	; 0x5e22 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x84>
    5e02:	0a c0       	rjmp	.+20     	; 0x5e18 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x7a>
	  {
	    case 9:
	      delay(94);
    5e04:	6e e5       	ldi	r22, 0x5E	; 94
    5e06:	70 e0       	ldi	r23, 0x00	; 0
    5e08:	80 e0       	ldi	r24, 0x00	; 0
    5e0a:	90 e0       	ldi	r25, 0x00	; 0
    5e0c:	0e c0       	rjmp	.+28     	; 0x5e2a <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x8c>
	      break;
	    case 10:
	      delay(188);
    5e0e:	6c eb       	ldi	r22, 0xBC	; 188
    5e10:	70 e0       	ldi	r23, 0x00	; 0
    5e12:	80 e0       	ldi	r24, 0x00	; 0
    5e14:	90 e0       	ldi	r25, 0x00	; 0
    5e16:	09 c0       	rjmp	.+18     	; 0x5e2a <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x8c>
	      break;
	    case 11:
	      delay(375);
    5e18:	67 e7       	ldi	r22, 0x77	; 119
    5e1a:	71 e0       	ldi	r23, 0x01	; 1
    5e1c:	80 e0       	ldi	r24, 0x00	; 0
    5e1e:	90 e0       	ldi	r25, 0x00	; 0
    5e20:	04 c0       	rjmp	.+8      	; 0x5e2a <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x8c>
	      break;
	    case 12:
	    default:
	      delay(750);
    5e22:	6e ee       	ldi	r22, 0xEE	; 238
    5e24:	72 e0       	ldi	r23, 0x02	; 2
    5e26:	80 e0       	ldi	r24, 0x00	; 0
    5e28:	90 e0       	ldi	r25, 0x00	; 0
    5e2a:	0e 94 19 32 	call	0x6432	; 0x6432 <delay>
	      break;
	  }

}
    5e2e:	df 91       	pop	r29
    5e30:	cf 91       	pop	r28
    5e32:	1f 91       	pop	r17
    5e34:	0f 91       	pop	r16
    5e36:	ff 90       	pop	r15
    5e38:	ef 90       	pop	r14
    5e3a:	df 90       	pop	r13
    5e3c:	cf 90       	pop	r12
    5e3e:	08 95       	ret

00005e40 <_ZN17DallasTemperature11isConnectedEPhS0_>:
  return isConnected(deviceAddress, scratchPad);
}

// attempt to determine if the device at the given address is connected to the bus
// also allows for updating the read scratchpad
bool DallasTemperature::isConnected(uint8_t* deviceAddress, uint8_t* scratchPad)
    5e40:	0f 93       	push	r16
    5e42:	1f 93       	push	r17
    5e44:	8a 01       	movw	r16, r20
{
  readScratchPad(deviceAddress, scratchPad);
    5e46:	0e 94 4e 2e 	call	0x5c9c	; 0x5c9c <_ZN17DallasTemperature14readScratchPadEPhS0_>
  return (_wire->crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]);
    5e4a:	c8 01       	movw	r24, r16
    5e4c:	68 e0       	ldi	r22, 0x08	; 8
    5e4e:	0e 94 4a 2b 	call	0x5694	; 0x5694 <_ZN7OneWire4crc8EPKhh>
    5e52:	20 e0       	ldi	r18, 0x00	; 0
    5e54:	f8 01       	movw	r30, r16
    5e56:	90 85       	ldd	r25, Z+8	; 0x08
    5e58:	89 17       	cp	r24, r25
    5e5a:	09 f4       	brne	.+2      	; 0x5e5e <_ZN17DallasTemperature11isConnectedEPhS0_+0x1e>
    5e5c:	21 e0       	ldi	r18, 0x01	; 1
}
    5e5e:	82 2f       	mov	r24, r18
    5e60:	1f 91       	pop	r17
    5e62:	0f 91       	pop	r16
    5e64:	08 95       	ret

00005e66 <_ZN17DallasTemperature8getTempCEPh>:
// returns temperature in degrees C or DEVICE_DISCONNECTED if the
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DallasTemperature::getTempC(uint8_t* deviceAddress)
    5e66:	cf 92       	push	r12
    5e68:	df 92       	push	r13
    5e6a:	ef 92       	push	r14
    5e6c:	ff 92       	push	r15
    5e6e:	0f 93       	push	r16
    5e70:	1f 93       	push	r17
    5e72:	df 93       	push	r29
    5e74:	cf 93       	push	r28
    5e76:	cd b7       	in	r28, 0x3d	; 61
    5e78:	de b7       	in	r29, 0x3e	; 62
    5e7a:	29 97       	sbiw	r28, 0x09	; 9
    5e7c:	0f b6       	in	r0, 0x3f	; 63
    5e7e:	f8 94       	cli
    5e80:	de bf       	out	0x3e, r29	; 62
    5e82:	0f be       	out	0x3f, r0	; 63
    5e84:	cd bf       	out	0x3d, r28	; 61
    5e86:	8c 01       	movw	r16, r24
    5e88:	7b 01       	movw	r14, r22
  // TODO: Multiple devices (up to 64) on the same bus may take 
  //       some time to negotiate a response
  // What happens in case of collision?

  ScratchPad scratchPad;
  if (isConnected(deviceAddress, scratchPad)) return calculateTemperature(deviceAddress, scratchPad);
    5e8a:	6e 01       	movw	r12, r28
    5e8c:	08 94       	sec
    5e8e:	c1 1c       	adc	r12, r1
    5e90:	d1 1c       	adc	r13, r1
    5e92:	a6 01       	movw	r20, r12
    5e94:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <_ZN17DallasTemperature11isConnectedEPhS0_>
    5e98:	88 23       	and	r24, r24
    5e9a:	29 f4       	brne	.+10     	; 0x5ea6 <_ZN17DallasTemperature8getTempCEPh+0x40>
    5e9c:	60 e0       	ldi	r22, 0x00	; 0
    5e9e:	70 e0       	ldi	r23, 0x00	; 0
    5ea0:	8e ef       	ldi	r24, 0xFE	; 254
    5ea2:	92 ec       	ldi	r25, 0xC2	; 194
    5ea4:	05 c0       	rjmp	.+10     	; 0x5eb0 <_ZN17DallasTemperature8getTempCEPh+0x4a>
    5ea6:	c8 01       	movw	r24, r16
    5ea8:	b7 01       	movw	r22, r14
    5eaa:	a6 01       	movw	r20, r12
    5eac:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>
  return DEVICE_DISCONNECTED;
}
    5eb0:	29 96       	adiw	r28, 0x09	; 9
    5eb2:	0f b6       	in	r0, 0x3f	; 63
    5eb4:	f8 94       	cli
    5eb6:	de bf       	out	0x3e, r29	; 62
    5eb8:	0f be       	out	0x3f, r0	; 63
    5eba:	cd bf       	out	0x3d, r28	; 61
    5ebc:	cf 91       	pop	r28
    5ebe:	df 91       	pop	r29
    5ec0:	1f 91       	pop	r17
    5ec2:	0f 91       	pop	r16
    5ec4:	ff 90       	pop	r15
    5ec6:	ef 90       	pop	r14
    5ec8:	df 90       	pop	r13
    5eca:	cf 90       	pop	r12
    5ecc:	08 95       	ret

00005ece <_ZN17DallasTemperature13getResolutionEPh>:
	return bitResolution;
}

// returns the current resolution of the device, 9-12
// returns 0 if device not found
uint8_t DallasTemperature::getResolution(uint8_t* deviceAddress)
    5ece:	df 93       	push	r29
    5ed0:	cf 93       	push	r28
    5ed2:	cd b7       	in	r28, 0x3d	; 61
    5ed4:	de b7       	in	r29, 0x3e	; 62
    5ed6:	29 97       	sbiw	r28, 0x09	; 9
    5ed8:	0f b6       	in	r0, 0x3f	; 63
    5eda:	f8 94       	cli
    5edc:	de bf       	out	0x3e, r29	; 62
    5ede:	0f be       	out	0x3f, r0	; 63
    5ee0:	cd bf       	out	0x3d, r28	; 61
    5ee2:	9c 01       	movw	r18, r24
    5ee4:	fb 01       	movw	r30, r22
{
  if (deviceAddress[0] == DS18S20MODEL) return 9; // this model has a fixed resolution
    5ee6:	80 81       	ld	r24, Z
    5ee8:	80 31       	cpi	r24, 0x10	; 16
    5eea:	d9 f0       	breq	.+54     	; 0x5f22 <_ZN17DallasTemperature13getResolutionEPh+0x54>

  ScratchPad scratchPad;
  if (isConnected(deviceAddress, scratchPad))
    5eec:	c9 01       	movw	r24, r18
    5eee:	ae 01       	movw	r20, r28
    5ef0:	4f 5f       	subi	r20, 0xFF	; 255
    5ef2:	5f 4f       	sbci	r21, 0xFF	; 255
    5ef4:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <_ZN17DallasTemperature11isConnectedEPhS0_>
    5ef8:	88 23       	and	r24, r24
    5efa:	a9 f0       	breq	.+42     	; 0x5f26 <_ZN17DallasTemperature13getResolutionEPh+0x58>
  {
	switch (scratchPad[CONFIGURATION])
    5efc:	8d 81       	ldd	r24, Y+5	; 0x05
    5efe:	8f 33       	cpi	r24, 0x3F	; 63
    5f00:	71 f0       	breq	.+28     	; 0x5f1e <_ZN17DallasTemperature13getResolutionEPh+0x50>
    5f02:	80 34       	cpi	r24, 0x40	; 64
    5f04:	18 f4       	brcc	.+6      	; 0x5f0c <_ZN17DallasTemperature13getResolutionEPh+0x3e>
    5f06:	8f 31       	cpi	r24, 0x1F	; 31
    5f08:	71 f4       	brne	.+28     	; 0x5f26 <_ZN17DallasTemperature13getResolutionEPh+0x58>
    5f0a:	0b c0       	rjmp	.+22     	; 0x5f22 <_ZN17DallasTemperature13getResolutionEPh+0x54>
    5f0c:	8f 35       	cpi	r24, 0x5F	; 95
    5f0e:	19 f0       	breq	.+6      	; 0x5f16 <_ZN17DallasTemperature13getResolutionEPh+0x48>
    5f10:	8f 37       	cpi	r24, 0x7F	; 127
    5f12:	49 f4       	brne	.+18     	; 0x5f26 <_ZN17DallasTemperature13getResolutionEPh+0x58>
    5f14:	02 c0       	rjmp	.+4      	; 0x5f1a <_ZN17DallasTemperature13getResolutionEPh+0x4c>
    5f16:	8b e0       	ldi	r24, 0x0B	; 11
    5f18:	07 c0       	rjmp	.+14     	; 0x5f28 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
    5f1a:	8c e0       	ldi	r24, 0x0C	; 12
    5f1c:	05 c0       	rjmp	.+10     	; 0x5f28 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
    5f1e:	8a e0       	ldi	r24, 0x0A	; 10
    5f20:	03 c0       	rjmp	.+6      	; 0x5f28 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
        
      case TEMP_11_BIT:
        return 11;
        
      case TEMP_10_BIT:
        return 10;
    5f22:	89 e0       	ldi	r24, 0x09	; 9
    5f24:	01 c0       	rjmp	.+2      	; 0x5f28 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
    5f26:	80 e0       	ldi	r24, 0x00	; 0
        return 9;
        
	}
  }
  return 0;
}
    5f28:	29 96       	adiw	r28, 0x09	; 9
    5f2a:	0f b6       	in	r0, 0x3f	; 63
    5f2c:	f8 94       	cli
    5f2e:	de bf       	out	0x3e, r29	; 62
    5f30:	0f be       	out	0x3f, r0	; 63
    5f32:	cd bf       	out	0x3d, r28	; 61
    5f34:	cf 91       	pop	r28
    5f36:	df 91       	pop	r29
    5f38:	08 95       	ret

00005f3a <_ZN17DallasTemperature28requestTemperaturesByAddressEPh>:
}

// sends command for one device to perform a temperature by address
// returns FALSE if device is disconnected
// returns TRUE  otherwise
bool DallasTemperature::requestTemperaturesByAddress(uint8_t* deviceAddress)
    5f3a:	ef 92       	push	r14
    5f3c:	ff 92       	push	r15
    5f3e:	0f 93       	push	r16
    5f40:	1f 93       	push	r17
    5f42:	df 93       	push	r29
    5f44:	cf 93       	push	r28
    5f46:	cd b7       	in	r28, 0x3d	; 61
    5f48:	de b7       	in	r29, 0x3e	; 62
    5f4a:	2a 97       	sbiw	r28, 0x0a	; 10
    5f4c:	0f b6       	in	r0, 0x3f	; 63
    5f4e:	f8 94       	cli
    5f50:	de bf       	out	0x3e, r29	; 62
    5f52:	0f be       	out	0x3f, r0	; 63
    5f54:	cd bf       	out	0x3d, r28	; 61
    5f56:	8c 01       	movw	r16, r24
    5f58:	7b 01       	movw	r14, r22
{

  _wire->reset();
    5f5a:	fc 01       	movw	r30, r24
    5f5c:	85 81       	ldd	r24, Z+5	; 0x05
    5f5e:	96 81       	ldd	r25, Z+6	; 0x06
    5f60:	0e 94 41 2c 	call	0x5882	; 0x5882 <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
    5f64:	f8 01       	movw	r30, r16
    5f66:	85 81       	ldd	r24, Z+5	; 0x05
    5f68:	96 81       	ldd	r25, Z+6	; 0x06
    5f6a:	b7 01       	movw	r22, r14
    5f6c:	0e 94 20 2c 	call	0x5840	; 0x5840 <_ZN7OneWire6selectEPKh>
  _wire->write(STARTCONVO, parasite);
    5f70:	f8 01       	movw	r30, r16
    5f72:	85 81       	ldd	r24, Z+5	; 0x05
    5f74:	96 81       	ldd	r25, Z+6	; 0x06
    5f76:	64 e4       	ldi	r22, 0x44	; 68
    5f78:	40 81       	ld	r20, Z
    5f7a:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <_ZN7OneWire5writeEhh>
  
    // check device
  ScratchPad scratchPad;
  if (!isConnected(deviceAddress, scratchPad)) return false;
    5f7e:	c8 01       	movw	r24, r16
    5f80:	b7 01       	movw	r22, r14
    5f82:	ae 01       	movw	r20, r28
    5f84:	4e 5f       	subi	r20, 0xFE	; 254
    5f86:	5f 4f       	sbci	r21, 0xFF	; 255
    5f88:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <_ZN17DallasTemperature11isConnectedEPhS0_>
    5f8c:	88 23       	and	r24, r24
    5f8e:	89 f0       	breq	.+34     	; 0x5fb2 <_ZN17DallasTemperature28requestTemperaturesByAddressEPh+0x78>
  
  
  // ASYNC mode?
  if (!waitForConversion) return true;   
    5f90:	f8 01       	movw	r30, r16
    5f92:	82 81       	ldd	r24, Z+2	; 0x02
    5f94:	88 23       	and	r24, r24
    5f96:	61 f0       	breq	.+24     	; 0x5fb0 <_ZN17DallasTemperature28requestTemperaturesByAddressEPh+0x76>
  uint8_t bitResolution = getResolution(deviceAddress);
    5f98:	c8 01       	movw	r24, r16
    5f9a:	b7 01       	movw	r22, r14
    5f9c:	0e 94 67 2f 	call	0x5ece	; 0x5ece <_ZN17DallasTemperature13getResolutionEPh>
    5fa0:	89 83       	std	Y+1, r24	; 0x01
  blockTillConversionComplete(&bitResolution, deviceAddress);
    5fa2:	c8 01       	movw	r24, r16
    5fa4:	be 01       	movw	r22, r28
    5fa6:	6f 5f       	subi	r22, 0xFF	; 255
    5fa8:	7f 4f       	sbci	r23, 0xFF	; 255
    5faa:	a7 01       	movw	r20, r14
    5fac:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>
    5fb0:	81 e0       	ldi	r24, 0x01	; 1
  
  return true;
}
    5fb2:	2a 96       	adiw	r28, 0x0a	; 10
    5fb4:	0f b6       	in	r0, 0x3f	; 63
    5fb6:	f8 94       	cli
    5fb8:	de bf       	out	0x3e, r29	; 62
    5fba:	0f be       	out	0x3f, r0	; 63
    5fbc:	cd bf       	out	0x3d, r28	; 61
    5fbe:	cf 91       	pop	r28
    5fc0:	df 91       	pop	r29
    5fc2:	1f 91       	pop	r17
    5fc4:	0f 91       	pop	r16
    5fc6:	ff 90       	pop	r15
    5fc8:	ef 90       	pop	r14
    5fca:	08 95       	ret

00005fcc <_ZN17DallasTemperature12validAddressEPh>:
{
  return devices;
}

// returns true if address is valid
bool DallasTemperature::validAddress(uint8_t* deviceAddress)
    5fcc:	0f 93       	push	r16
    5fce:	1f 93       	push	r17
    5fd0:	8b 01       	movw	r16, r22
{
  return (_wire->crc8(deviceAddress, 7) == deviceAddress[7]);
    5fd2:	cb 01       	movw	r24, r22
    5fd4:	67 e0       	ldi	r22, 0x07	; 7
    5fd6:	0e 94 4a 2b 	call	0x5694	; 0x5694 <_ZN7OneWire4crc8EPKhh>
    5fda:	20 e0       	ldi	r18, 0x00	; 0
    5fdc:	f8 01       	movw	r30, r16
    5fde:	97 81       	ldd	r25, Z+7	; 0x07
    5fe0:	89 17       	cp	r24, r25
    5fe2:	09 f4       	brne	.+2      	; 0x5fe6 <_ZN17DallasTemperature12validAddressEPh+0x1a>
    5fe4:	21 e0       	ldi	r18, 0x01	; 1
}
    5fe6:	82 2f       	mov	r24, r18
    5fe8:	1f 91       	pop	r17
    5fea:	0f 91       	pop	r16
    5fec:	08 95       	ret

00005fee <_ZN17DallasTemperature10getAddressEPhh>:

// finds an address at a given index on the bus
// returns true if the device was found
bool DallasTemperature::getAddress(uint8_t* deviceAddress, uint8_t index)
    5fee:	ef 92       	push	r14
    5ff0:	ff 92       	push	r15
    5ff2:	0f 93       	push	r16
    5ff4:	1f 93       	push	r17
    5ff6:	cf 93       	push	r28
    5ff8:	df 93       	push	r29
    5ffa:	ec 01       	movw	r28, r24
    5ffc:	7b 01       	movw	r14, r22
    5ffe:	04 2f       	mov	r16, r20
{
  uint8_t depth = 0;

  _wire->reset_search();
    6000:	8d 81       	ldd	r24, Y+5	; 0x05
    6002:	9e 81       	ldd	r25, Y+6	; 0x06
    6004:	0e 94 3d 2b 	call	0x567a	; 0x567a <_ZN7OneWire12reset_searchEv>
    6008:	10 e0       	ldi	r17, 0x00	; 0
    600a:	07 c0       	rjmp	.+14     	; 0x601a <_ZN17DallasTemperature10getAddressEPhh+0x2c>

  while (depth <= index && _wire->search(deviceAddress))
  {
    if (depth == index && validAddress(deviceAddress)) return true;
    600c:	ce 01       	movw	r24, r28
    600e:	b7 01       	movw	r22, r14
    6010:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <_ZN17DallasTemperature12validAddressEPh>
    6014:	88 23       	and	r24, r24
    6016:	a9 f0       	breq	.+42     	; 0x6042 <_ZN17DallasTemperature10getAddressEPhh+0x54>
    6018:	0a c0       	rjmp	.+20     	; 0x602e <_ZN17DallasTemperature10getAddressEPhh+0x40>
{
  uint8_t depth = 0;

  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
    601a:	8d 81       	ldd	r24, Y+5	; 0x05
    601c:	9e 81       	ldd	r25, Y+6	; 0x06
    601e:	b7 01       	movw	r22, r14
    6020:	0e 94 8c 2c 	call	0x5918	; 0x5918 <_ZN7OneWire6searchEPh>
    6024:	88 23       	and	r24, r24
    6026:	29 f0       	breq	.+10     	; 0x6032 <_ZN17DallasTemperature10getAddressEPhh+0x44>
  {
    if (depth == index && validAddress(deviceAddress)) return true;
    6028:	10 17       	cp	r17, r16
    602a:	59 f4       	brne	.+22     	; 0x6042 <_ZN17DallasTemperature10getAddressEPhh+0x54>
    602c:	ef cf       	rjmp	.-34     	; 0x600c <_ZN17DallasTemperature10getAddressEPhh+0x1e>
    602e:	81 e0       	ldi	r24, 0x01	; 1
    6030:	01 c0       	rjmp	.+2      	; 0x6034 <_ZN17DallasTemperature10getAddressEPhh+0x46>
    6032:	80 e0       	ldi	r24, 0x00	; 0
    depth++;
  }

  return false;
}
    6034:	df 91       	pop	r29
    6036:	cf 91       	pop	r28
    6038:	1f 91       	pop	r17
    603a:	0f 91       	pop	r16
    603c:	ff 90       	pop	r15
    603e:	ef 90       	pop	r14
    6040:	08 95       	ret
  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
  {
    if (depth == index && validAddress(deviceAddress)) return true;
    depth++;
    6042:	1f 5f       	subi	r17, 0xFF	; 255
{
  uint8_t depth = 0;

  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
    6044:	01 17       	cp	r16, r17
    6046:	a8 f3       	brcs	.-22     	; 0x6032 <_ZN17DallasTemperature10getAddressEPhh+0x44>
    6048:	e8 cf       	rjmp	.-48     	; 0x601a <_ZN17DallasTemperature10getAddressEPhh+0x2c>

0000604a <_ZN17DallasTemperature5beginEv>:
  waitForConversion = true;
  checkForConversion = true;
}

// initialise the bus
void DallasTemperature::begin(void)
    604a:	af 92       	push	r10
    604c:	bf 92       	push	r11
    604e:	cf 92       	push	r12
    6050:	df 92       	push	r13
    6052:	ef 92       	push	r14
    6054:	ff 92       	push	r15
    6056:	0f 93       	push	r16
    6058:	1f 93       	push	r17
    605a:	df 93       	push	r29
    605c:	cf 93       	push	r28
    605e:	cd b7       	in	r28, 0x3d	; 61
    6060:	de b7       	in	r29, 0x3e	; 62
    6062:	61 97       	sbiw	r28, 0x11	; 17
    6064:	0f b6       	in	r0, 0x3f	; 63
    6066:	f8 94       	cli
    6068:	de bf       	out	0x3e, r29	; 62
    606a:	0f be       	out	0x3f, r0	; 63
    606c:	cd bf       	out	0x3d, r28	; 61
    606e:	7c 01       	movw	r14, r24
{
  DeviceAddress deviceAddress;

  _wire->reset_search();
    6070:	fc 01       	movw	r30, r24
    6072:	85 81       	ldd	r24, Z+5	; 0x05
    6074:	96 81       	ldd	r25, Z+6	; 0x06
    6076:	0e 94 3d 2b 	call	0x567a	; 0x567a <_ZN7OneWire12reset_searchEv>
  devices = 0; // Reset the number of devices when we enumerate wire devices
    607a:	f7 01       	movw	r30, r14
    607c:	14 82       	std	Z+4, r1	; 0x04

  while (_wire->search(deviceAddress))
    607e:	6e 01       	movw	r12, r28
    6080:	08 94       	sec
    6082:	c1 1c       	adc	r12, r1
    6084:	d1 1c       	adc	r13, r1
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;

      ScratchPad scratchPad;

      readScratchPad(deviceAddress, scratchPad);
    6086:	79 e0       	ldi	r23, 0x09	; 9
    6088:	a7 2e       	mov	r10, r23
    608a:	b1 2c       	mov	r11, r1
    608c:	ac 0e       	add	r10, r28
    608e:	bd 1e       	adc	r11, r29

  while (_wire->search(deviceAddress))
  {
    if (validAddress(deviceAddress))
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;
    6090:	01 e0       	ldi	r16, 0x01	; 1
    6092:	2b c0       	rjmp	.+86     	; 0x60ea <_ZN17DallasTemperature5beginEv+0xa0>
  _wire->reset_search();
  devices = 0; // Reset the number of devices when we enumerate wire devices

  while (_wire->search(deviceAddress))
  {
    if (validAddress(deviceAddress))
    6094:	c7 01       	movw	r24, r14
    6096:	b6 01       	movw	r22, r12
    6098:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <_ZN17DallasTemperature12validAddressEPh>
    609c:	88 23       	and	r24, r24
    609e:	29 f1       	breq	.+74     	; 0x60ea <_ZN17DallasTemperature5beginEv+0xa0>
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;
    60a0:	f7 01       	movw	r30, r14
    60a2:	80 81       	ld	r24, Z
    60a4:	88 23       	and	r24, r24
    60a6:	41 f4       	brne	.+16     	; 0x60b8 <_ZN17DallasTemperature5beginEv+0x6e>
    60a8:	c7 01       	movw	r24, r14
    60aa:	b6 01       	movw	r22, r12
    60ac:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <_ZN17DallasTemperature15readPowerSupplyEPh>
    60b0:	88 23       	and	r24, r24
    60b2:	11 f0       	breq	.+4      	; 0x60b8 <_ZN17DallasTemperature5beginEv+0x6e>
    60b4:	f7 01       	movw	r30, r14
    60b6:	00 83       	st	Z, r16

      ScratchPad scratchPad;

      readScratchPad(deviceAddress, scratchPad);
    60b8:	c7 01       	movw	r24, r14
    60ba:	b6 01       	movw	r22, r12
    60bc:	a5 01       	movw	r20, r10
    60be:	0e 94 4e 2e 	call	0x5c9c	; 0x5c9c <_ZN17DallasTemperature14readScratchPadEPhS0_>

	  bitResolution = max(bitResolution, getResolution(deviceAddress));
    60c2:	f7 01       	movw	r30, r14
    60c4:	11 81       	ldd	r17, Z+1	; 0x01
    60c6:	c7 01       	movw	r24, r14
    60c8:	b6 01       	movw	r22, r12
    60ca:	0e 94 67 2f 	call	0x5ece	; 0x5ece <_ZN17DallasTemperature13getResolutionEPh>
    60ce:	81 17       	cp	r24, r17
    60d0:	18 f4       	brcc	.+6      	; 0x60d8 <_ZN17DallasTemperature5beginEv+0x8e>
    60d2:	f7 01       	movw	r30, r14
    60d4:	81 81       	ldd	r24, Z+1	; 0x01
    60d6:	04 c0       	rjmp	.+8      	; 0x60e0 <_ZN17DallasTemperature5beginEv+0x96>
    60d8:	c7 01       	movw	r24, r14
    60da:	b6 01       	movw	r22, r12
    60dc:	0e 94 67 2f 	call	0x5ece	; 0x5ece <_ZN17DallasTemperature13getResolutionEPh>
    60e0:	f7 01       	movw	r30, r14
    60e2:	81 83       	std	Z+1, r24	; 0x01

      devices++;
    60e4:	84 81       	ldd	r24, Z+4	; 0x04
    60e6:	8f 5f       	subi	r24, 0xFF	; 255
    60e8:	84 83       	std	Z+4, r24	; 0x04
  DeviceAddress deviceAddress;

  _wire->reset_search();
  devices = 0; // Reset the number of devices when we enumerate wire devices

  while (_wire->search(deviceAddress))
    60ea:	f7 01       	movw	r30, r14
    60ec:	85 81       	ldd	r24, Z+5	; 0x05
    60ee:	96 81       	ldd	r25, Z+6	; 0x06
    60f0:	b6 01       	movw	r22, r12
    60f2:	0e 94 8c 2c 	call	0x5918	; 0x5918 <_ZN7OneWire6searchEPh>
    60f6:	88 23       	and	r24, r24
    60f8:	69 f6       	brne	.-102    	; 0x6094 <_ZN17DallasTemperature5beginEv+0x4a>
	  bitResolution = max(bitResolution, getResolution(deviceAddress));

      devices++;
    }
  }
}
    60fa:	61 96       	adiw	r28, 0x11	; 17
    60fc:	0f b6       	in	r0, 0x3f	; 63
    60fe:	f8 94       	cli
    6100:	de bf       	out	0x3e, r29	; 62
    6102:	0f be       	out	0x3f, r0	; 63
    6104:	cd bf       	out	0x3d, r28	; 61
    6106:	cf 91       	pop	r28
    6108:	df 91       	pop	r29
    610a:	1f 91       	pop	r17
    610c:	0f 91       	pop	r16
    610e:	ff 90       	pop	r15
    6110:	ef 90       	pop	r14
    6112:	df 90       	pop	r13
    6114:	cf 90       	pop	r12
    6116:	bf 90       	pop	r11
    6118:	af 90       	pop	r10
    611a:	08 95       	ret

0000611c <malloc>:
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	if (len < sizeof(struct __freelist) - sizeof(size_t))
    611c:	0f 93       	push	r16
    611e:	1f 93       	push	r17
    6120:	cf 93       	push	r28
    6122:	df 93       	push	r29
    6124:	bc 01       	movw	r22, r24
    6126:	82 30       	cpi	r24, 0x02	; 2
    6128:	91 05       	cpc	r25, r1
    612a:	10 f4       	brcc	.+4      	; 0x6130 <malloc+0x14>
    612c:	62 e0       	ldi	r22, 0x02	; 2
    612e:	70 e0       	ldi	r23, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    6130:	e0 91 dd 03 	lds	r30, 0x03DD
    6134:	f0 91 de 03 	lds	r31, 0x03DE
    6138:	a0 e0       	ldi	r26, 0x00	; 0
    613a:	b0 e0       	ldi	r27, 0x00	; 0
    613c:	40 e0       	ldi	r20, 0x00	; 0
    613e:	50 e0       	ldi	r21, 0x00	; 0
    6140:	24 c0       	rjmp	.+72     	; 0x618a <malloc+0x6e>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    6142:	80 81       	ld	r24, Z
    6144:	91 81       	ldd	r25, Z+1	; 0x01
    6146:	86 17       	cp	r24, r22
    6148:	97 07       	cpc	r25, r23
    614a:	d0 f0       	brcs	.+52     	; 0x6180 <malloc+0x64>
			continue;
		if (fp1->sz == len) {
    614c:	86 17       	cp	r24, r22
    614e:	97 07       	cpc	r25, r23
    6150:	71 f4       	brne	.+28     	; 0x616e <malloc+0x52>
    6152:	82 81       	ldd	r24, Z+2	; 0x02
    6154:	93 81       	ldd	r25, Z+3	; 0x03
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    6156:	10 97       	sbiw	r26, 0x00	; 0
    6158:	29 f0       	breq	.+10     	; 0x6164 <malloc+0x48>
				fp2->nx = fp1->nx;
    615a:	13 96       	adiw	r26, 0x03	; 3
    615c:	9c 93       	st	X, r25
    615e:	8e 93       	st	-X, r24
    6160:	12 97       	sbiw	r26, 0x02	; 2
    6162:	2c c0       	rjmp	.+88     	; 0x61bc <malloc+0xa0>
			else
				__flp = fp1->nx;
    6164:	90 93 de 03 	sts	0x03DE, r25
    6168:	80 93 dd 03 	sts	0x03DD, r24
    616c:	27 c0       	rjmp	.+78     	; 0x61bc <malloc+0xa0>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    616e:	41 15       	cp	r20, r1
    6170:	51 05       	cpc	r21, r1
    6172:	19 f0       	breq	.+6      	; 0x617a <malloc+0x5e>
    6174:	84 17       	cp	r24, r20
    6176:	95 07       	cpc	r25, r21
    6178:	18 f4       	brcc	.+6      	; 0x6180 <malloc+0x64>
    617a:	ef 01       	movw	r28, r30
    617c:	8d 01       	movw	r16, r26
    617e:	ac 01       	movw	r20, r24
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    6180:	df 01       	movw	r26, r30
    6182:	82 81       	ldd	r24, Z+2	; 0x02
    6184:	93 81       	ldd	r25, Z+3	; 0x03
    6186:	9c 01       	movw	r18, r24
    6188:	f9 01       	movw	r30, r18
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
    618a:	30 97       	sbiw	r30, 0x00	; 0
    618c:	d1 f6       	brne	.-76     	; 0x6142 <malloc+0x26>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    618e:	41 15       	cp	r20, r1
    6190:	51 05       	cpc	r21, r1
    6192:	f9 f0       	breq	.+62     	; 0x61d2 <malloc+0xb6>
		if (s - len < sizeof(struct __freelist)) {
    6194:	ca 01       	movw	r24, r20
    6196:	86 1b       	sub	r24, r22
    6198:	97 0b       	sbc	r25, r23
    619a:	84 30       	cpi	r24, 0x04	; 4
    619c:	91 05       	cpc	r25, r1
    619e:	80 f4       	brcc	.+32     	; 0x61c0 <malloc+0xa4>
    61a0:	8a 81       	ldd	r24, Y+2	; 0x02
    61a2:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    61a4:	01 15       	cp	r16, r1
    61a6:	11 05       	cpc	r17, r1
    61a8:	21 f0       	breq	.+8      	; 0x61b2 <malloc+0x96>
				sfp2->nx = sfp1->nx;
    61aa:	f8 01       	movw	r30, r16
    61ac:	93 83       	std	Z+3, r25	; 0x03
    61ae:	82 83       	std	Z+2, r24	; 0x02
    61b0:	04 c0       	rjmp	.+8      	; 0x61ba <malloc+0x9e>
			else
				__flp = sfp1->nx;
    61b2:	90 93 de 03 	sts	0x03DE, r25
    61b6:	80 93 dd 03 	sts	0x03DD, r24
			return &(sfp1->nx);
    61ba:	fe 01       	movw	r30, r28
    61bc:	32 96       	adiw	r30, 0x02	; 2
    61be:	45 c0       	rjmp	.+138    	; 0x624a <malloc+0x12e>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    61c0:	fe 01       	movw	r30, r28
    61c2:	e8 0f       	add	r30, r24
    61c4:	f9 1f       	adc	r31, r25
    61c6:	61 93       	st	Z+, r22
    61c8:	71 93       	st	Z+, r23
		sfp1->sz = s - sizeof(size_t);
    61ca:	02 97       	sbiw	r24, 0x02	; 2
    61cc:	99 83       	std	Y+1, r25	; 0x01
    61ce:	88 83       	st	Y, r24
    61d0:	3c c0       	rjmp	.+120    	; 0x624a <malloc+0x12e>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
    61d2:	80 91 db 03 	lds	r24, 0x03DB
    61d6:	90 91 dc 03 	lds	r25, 0x03DC
    61da:	89 2b       	or	r24, r25
    61dc:	41 f4       	brne	.+16     	; 0x61ee <malloc+0xd2>
		__brkval = __malloc_heap_start;
    61de:	80 91 0c 01 	lds	r24, 0x010C
    61e2:	90 91 0d 01 	lds	r25, 0x010D
    61e6:	90 93 dc 03 	sts	0x03DC, r25
    61ea:	80 93 db 03 	sts	0x03DB, r24
	cp = __malloc_heap_end;
    61ee:	40 91 0e 01 	lds	r20, 0x010E
    61f2:	50 91 0f 01 	lds	r21, 0x010F
	if (cp == 0)
    61f6:	41 15       	cp	r20, r1
    61f8:	51 05       	cpc	r21, r1
    61fa:	41 f4       	brne	.+16     	; 0x620c <malloc+0xf0>
		cp = STACK_POINTER() - __malloc_margin;
    61fc:	4d b7       	in	r20, 0x3d	; 61
    61fe:	5e b7       	in	r21, 0x3e	; 62
    6200:	80 91 0a 01 	lds	r24, 0x010A
    6204:	90 91 0b 01 	lds	r25, 0x010B
    6208:	48 1b       	sub	r20, r24
    620a:	59 0b       	sbc	r21, r25
	if (cp <= __brkval)
    620c:	20 91 db 03 	lds	r18, 0x03DB
    6210:	30 91 dc 03 	lds	r19, 0x03DC
    6214:	24 17       	cp	r18, r20
    6216:	35 07       	cpc	r19, r21
    6218:	b0 f4       	brcc	.+44     	; 0x6246 <malloc+0x12a>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    621a:	ca 01       	movw	r24, r20
    621c:	82 1b       	sub	r24, r18
    621e:	93 0b       	sbc	r25, r19
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    6220:	86 17       	cp	r24, r22
    6222:	97 07       	cpc	r25, r23
    6224:	80 f0       	brcs	.+32     	; 0x6246 <malloc+0x12a>
    6226:	ab 01       	movw	r20, r22
    6228:	4e 5f       	subi	r20, 0xFE	; 254
    622a:	5f 4f       	sbci	r21, 0xFF	; 255
    622c:	84 17       	cp	r24, r20
    622e:	95 07       	cpc	r25, r21
    6230:	50 f0       	brcs	.+20     	; 0x6246 <malloc+0x12a>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    6232:	42 0f       	add	r20, r18
    6234:	53 1f       	adc	r21, r19
    6236:	50 93 dc 03 	sts	0x03DC, r21
    623a:	40 93 db 03 	sts	0x03DB, r20
		fp1->sz = len;
    623e:	f9 01       	movw	r30, r18
    6240:	61 93       	st	Z+, r22
    6242:	71 93       	st	Z+, r23
    6244:	02 c0       	rjmp	.+4      	; 0x624a <malloc+0x12e>
		return &(fp1->nx);
    6246:	e0 e0       	ldi	r30, 0x00	; 0
    6248:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
    624a:	cf 01       	movw	r24, r30
    624c:	df 91       	pop	r29
    624e:	cf 91       	pop	r28
    6250:	1f 91       	pop	r17
    6252:	0f 91       	pop	r16
    6254:	08 95       	ret

00006256 <free>:
{
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    6256:	cf 93       	push	r28
    6258:	df 93       	push	r29
    625a:	9c 01       	movw	r18, r24
    625c:	00 97       	sbiw	r24, 0x00	; 0
    625e:	09 f4       	brne	.+2      	; 0x6262 <free+0xc>
    6260:	8f c0       	rjmp	.+286    	; 0x6380 <free+0x12a>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    6262:	ec 01       	movw	r28, r24
    6264:	22 97       	sbiw	r28, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    6266:	1b 82       	std	Y+3, r1	; 0x03
    6268:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    626a:	60 91 dd 03 	lds	r22, 0x03DD
    626e:	70 91 de 03 	lds	r23, 0x03DE
    6272:	61 15       	cp	r22, r1
    6274:	71 05       	cpc	r23, r1
    6276:	81 f4       	brne	.+32     	; 0x6298 <free+0x42>
		if ((char *)p + fpnew->sz == __brkval)
    6278:	88 81       	ld	r24, Y
    627a:	99 81       	ldd	r25, Y+1	; 0x01
    627c:	82 0f       	add	r24, r18
    627e:	93 1f       	adc	r25, r19
    6280:	20 91 db 03 	lds	r18, 0x03DB
    6284:	30 91 dc 03 	lds	r19, 0x03DC
    6288:	28 17       	cp	r18, r24
    628a:	39 07       	cpc	r19, r25
    628c:	39 f5       	brne	.+78     	; 0x62dc <free+0x86>
			__brkval = cpnew;
    628e:	d0 93 dc 03 	sts	0x03DC, r29
    6292:	c0 93 db 03 	sts	0x03DB, r28
    6296:	74 c0       	rjmp	.+232    	; 0x6380 <free+0x12a>
		else
			__flp = fpnew;
    6298:	db 01       	movw	r26, r22
    629a:	40 e0       	ldi	r20, 0x00	; 0
    629c:	50 e0       	ldi	r21, 0x00	; 0
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    629e:	ac 17       	cp	r26, r28
    62a0:	bd 07       	cpc	r27, r29
    62a2:	08 f1       	brcs	.+66     	; 0x62e6 <free+0x90>
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    62a4:	bb 83       	std	Y+3, r27	; 0x03
    62a6:	aa 83       	std	Y+2, r26	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    62a8:	fe 01       	movw	r30, r28
    62aa:	21 91       	ld	r18, Z+
    62ac:	31 91       	ld	r19, Z+
    62ae:	e2 0f       	add	r30, r18
    62b0:	f3 1f       	adc	r31, r19
    62b2:	ae 17       	cp	r26, r30
    62b4:	bf 07       	cpc	r27, r31
    62b6:	79 f4       	brne	.+30     	; 0x62d6 <free+0x80>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    62b8:	8d 91       	ld	r24, X+
    62ba:	9c 91       	ld	r25, X
    62bc:	11 97       	sbiw	r26, 0x01	; 1
    62be:	28 0f       	add	r18, r24
    62c0:	39 1f       	adc	r19, r25
    62c2:	2e 5f       	subi	r18, 0xFE	; 254
    62c4:	3f 4f       	sbci	r19, 0xFF	; 255
    62c6:	39 83       	std	Y+1, r19	; 0x01
    62c8:	28 83       	st	Y, r18
			fpnew->nx = fp1->nx;
    62ca:	12 96       	adiw	r26, 0x02	; 2
    62cc:	8d 91       	ld	r24, X+
    62ce:	9c 91       	ld	r25, X
    62d0:	13 97       	sbiw	r26, 0x03	; 3
    62d2:	9b 83       	std	Y+3, r25	; 0x03
    62d4:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (fp2 == 0) {
    62d6:	41 15       	cp	r20, r1
    62d8:	51 05       	cpc	r21, r1
    62da:	71 f4       	brne	.+28     	; 0x62f8 <free+0xa2>
			/* new head of freelist */
			__flp = fpnew;
    62dc:	d0 93 de 03 	sts	0x03DE, r29
    62e0:	c0 93 dd 03 	sts	0x03DD, r28
    62e4:	4d c0       	rjmp	.+154    	; 0x6380 <free+0x12a>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    62e6:	12 96       	adiw	r26, 0x02	; 2
    62e8:	8d 91       	ld	r24, X+
    62ea:	9c 91       	ld	r25, X
    62ec:	13 97       	sbiw	r26, 0x03	; 3
    62ee:	ad 01       	movw	r20, r26
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
    62f0:	00 97       	sbiw	r24, 0x00	; 0
    62f2:	11 f0       	breq	.+4      	; 0x62f8 <free+0xa2>
    62f4:	dc 01       	movw	r26, r24
    62f6:	d3 cf       	rjmp	.-90     	; 0x629e <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    62f8:	da 01       	movw	r26, r20
    62fa:	13 96       	adiw	r26, 0x03	; 3
    62fc:	dc 93       	st	X, r29
    62fe:	ce 93       	st	-X, r28
    6300:	12 97       	sbiw	r26, 0x02	; 2
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    6302:	fa 01       	movw	r30, r20
    6304:	21 91       	ld	r18, Z+
    6306:	31 91       	ld	r19, Z+
    6308:	e2 0f       	add	r30, r18
    630a:	f3 1f       	adc	r31, r19
    630c:	ce 17       	cp	r28, r30
    630e:	df 07       	cpc	r29, r31
    6310:	69 f4       	brne	.+26     	; 0x632c <free+0xd6>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    6312:	88 81       	ld	r24, Y
    6314:	99 81       	ldd	r25, Y+1	; 0x01
    6316:	28 0f       	add	r18, r24
    6318:	39 1f       	adc	r19, r25
    631a:	2e 5f       	subi	r18, 0xFE	; 254
    631c:	3f 4f       	sbci	r19, 0xFF	; 255
    631e:	fa 01       	movw	r30, r20
    6320:	31 83       	std	Z+1, r19	; 0x01
    6322:	20 83       	st	Z, r18
		fp2->nx = fpnew->nx;
    6324:	8a 81       	ldd	r24, Y+2	; 0x02
    6326:	9b 81       	ldd	r25, Y+3	; 0x03
    6328:	93 83       	std	Z+3, r25	; 0x03
    632a:	82 83       	std	Z+2, r24	; 0x02
    632c:	e0 e0       	ldi	r30, 0x00	; 0
    632e:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1->nx != 0;
    6330:	db 01       	movw	r26, r22
    6332:	12 96       	adiw	r26, 0x02	; 2
    6334:	8d 91       	ld	r24, X+
    6336:	9c 91       	ld	r25, X
    6338:	13 97       	sbiw	r26, 0x03	; 3
    633a:	00 97       	sbiw	r24, 0x00	; 0
    633c:	19 f0       	breq	.+6      	; 0x6344 <free+0xee>
    633e:	bc 01       	movw	r22, r24
    6340:	fd 01       	movw	r30, r26
    6342:	f6 cf       	rjmp	.-20     	; 0x6330 <free+0xda>
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
    6344:	ab 01       	movw	r20, r22
    6346:	4e 5f       	subi	r20, 0xFE	; 254
    6348:	5f 4f       	sbci	r21, 0xFF	; 255
	if (cp2 + fp1->sz == __brkval) {
    634a:	db 01       	movw	r26, r22
    634c:	8d 91       	ld	r24, X+
    634e:	9c 91       	ld	r25, X
    6350:	84 0f       	add	r24, r20
    6352:	95 1f       	adc	r25, r21
    6354:	20 91 db 03 	lds	r18, 0x03DB
    6358:	30 91 dc 03 	lds	r19, 0x03DC
    635c:	28 17       	cp	r18, r24
    635e:	39 07       	cpc	r19, r25
    6360:	79 f4       	brne	.+30     	; 0x6380 <free+0x12a>
		if (fp2 == NULL)
    6362:	30 97       	sbiw	r30, 0x00	; 0
    6364:	29 f4       	brne	.+10     	; 0x6370 <free+0x11a>
			/* Freelist is empty now. */
			__flp = NULL;
    6366:	10 92 de 03 	sts	0x03DE, r1
    636a:	10 92 dd 03 	sts	0x03DD, r1
    636e:	02 c0       	rjmp	.+4      	; 0x6374 <free+0x11e>
		else
			fp2->nx = NULL;
    6370:	13 82       	std	Z+3, r1	; 0x03
    6372:	12 82       	std	Z+2, r1	; 0x02
		__brkval = cp2 - sizeof(size_t);
    6374:	42 50       	subi	r20, 0x02	; 2
    6376:	50 40       	sbci	r21, 0x00	; 0
    6378:	50 93 dc 03 	sts	0x03DC, r21
    637c:	40 93 db 03 	sts	0x03DB, r20
	}
}
    6380:	df 91       	pop	r29
    6382:	cf 91       	pop	r28
    6384:	08 95       	ret

00006386 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    6386:	1f 92       	push	r1
    6388:	0f 92       	push	r0
    638a:	0f b6       	in	r0, 0x3f	; 63
    638c:	0f 92       	push	r0
    638e:	11 24       	eor	r1, r1
    6390:	2f 93       	push	r18
    6392:	3f 93       	push	r19
    6394:	8f 93       	push	r24
    6396:	9f 93       	push	r25
    6398:	af 93       	push	r26
    639a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    639c:	80 91 2b 03 	lds	r24, 0x032B
    63a0:	90 91 2c 03 	lds	r25, 0x032C
    63a4:	a0 91 2d 03 	lds	r26, 0x032D
    63a8:	b0 91 2e 03 	lds	r27, 0x032E
	unsigned char f = timer0_fract;
    63ac:	30 91 2f 03 	lds	r19, 0x032F

	m += MILLIS_INC;
    63b0:	01 96       	adiw	r24, 0x01	; 1
    63b2:	a1 1d       	adc	r26, r1
    63b4:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    63b6:	23 2f       	mov	r18, r19
    63b8:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    63ba:	2d 37       	cpi	r18, 0x7D	; 125
    63bc:	20 f0       	brcs	.+8      	; 0x63c6 <__vector_16+0x40>
		f -= FRACT_MAX;
    63be:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    63c0:	01 96       	adiw	r24, 0x01	; 1
    63c2:	a1 1d       	adc	r26, r1
    63c4:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    63c6:	20 93 2f 03 	sts	0x032F, r18
	timer0_millis = m;
    63ca:	80 93 2b 03 	sts	0x032B, r24
    63ce:	90 93 2c 03 	sts	0x032C, r25
    63d2:	a0 93 2d 03 	sts	0x032D, r26
    63d6:	b0 93 2e 03 	sts	0x032E, r27
	timer0_overflow_count++;
    63da:	80 91 27 03 	lds	r24, 0x0327
    63de:	90 91 28 03 	lds	r25, 0x0328
    63e2:	a0 91 29 03 	lds	r26, 0x0329
    63e6:	b0 91 2a 03 	lds	r27, 0x032A
    63ea:	01 96       	adiw	r24, 0x01	; 1
    63ec:	a1 1d       	adc	r26, r1
    63ee:	b1 1d       	adc	r27, r1
    63f0:	80 93 27 03 	sts	0x0327, r24
    63f4:	90 93 28 03 	sts	0x0328, r25
    63f8:	a0 93 29 03 	sts	0x0329, r26
    63fc:	b0 93 2a 03 	sts	0x032A, r27
}
    6400:	bf 91       	pop	r27
    6402:	af 91       	pop	r26
    6404:	9f 91       	pop	r25
    6406:	8f 91       	pop	r24
    6408:	3f 91       	pop	r19
    640a:	2f 91       	pop	r18
    640c:	0f 90       	pop	r0
    640e:	0f be       	out	0x3f, r0	; 63
    6410:	0f 90       	pop	r0
    6412:	1f 90       	pop	r1
    6414:	18 95       	reti

00006416 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    6416:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    6418:	f8 94       	cli
	m = timer0_millis;
    641a:	20 91 2b 03 	lds	r18, 0x032B
    641e:	30 91 2c 03 	lds	r19, 0x032C
    6422:	40 91 2d 03 	lds	r20, 0x032D
    6426:	50 91 2e 03 	lds	r21, 0x032E
	SREG = oldSREG;
    642a:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    642c:	b9 01       	movw	r22, r18
    642e:	ca 01       	movw	r24, r20
    6430:	08 95       	ret

00006432 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    6432:	9b 01       	movw	r18, r22
    6434:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    6436:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    6438:	f8 94       	cli
	m = timer0_overflow_count;
    643a:	80 91 27 03 	lds	r24, 0x0327
    643e:	90 91 28 03 	lds	r25, 0x0328
    6442:	a0 91 29 03 	lds	r26, 0x0329
    6446:	b0 91 2a 03 	lds	r27, 0x032A
#if defined(TCNT0)
	t = TCNT0;
    644a:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    644c:	a8 9b       	sbis	0x15, 0	; 21
    644e:	05 c0       	rjmp	.+10     	; 0x645a <delay+0x28>
    6450:	6f 3f       	cpi	r22, 0xFF	; 255
    6452:	19 f0       	breq	.+6      	; 0x645a <delay+0x28>
		m++;
    6454:	01 96       	adiw	r24, 0x01	; 1
    6456:	a1 1d       	adc	r26, r1
    6458:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    645a:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    645c:	ba 2f       	mov	r27, r26
    645e:	a9 2f       	mov	r26, r25
    6460:	98 2f       	mov	r25, r24
    6462:	88 27       	eor	r24, r24
    6464:	86 0f       	add	r24, r22
    6466:	91 1d       	adc	r25, r1
    6468:	a1 1d       	adc	r26, r1
    646a:	b1 1d       	adc	r27, r1
    646c:	62 e0       	ldi	r22, 0x02	; 2
    646e:	88 0f       	add	r24, r24
    6470:	99 1f       	adc	r25, r25
    6472:	aa 1f       	adc	r26, r26
    6474:	bb 1f       	adc	r27, r27
    6476:	6a 95       	dec	r22
    6478:	d1 f7       	brne	.-12     	; 0x646e <delay+0x3c>
    647a:	bc 01       	movw	r22, r24
    647c:	2d c0       	rjmp	.+90     	; 0x64d8 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    647e:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    6480:	f8 94       	cli
	m = timer0_overflow_count;
    6482:	80 91 27 03 	lds	r24, 0x0327
    6486:	90 91 28 03 	lds	r25, 0x0328
    648a:	a0 91 29 03 	lds	r26, 0x0329
    648e:	b0 91 2a 03 	lds	r27, 0x032A
#if defined(TCNT0)
	t = TCNT0;
    6492:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    6494:	a8 9b       	sbis	0x15, 0	; 21
    6496:	05 c0       	rjmp	.+10     	; 0x64a2 <delay+0x70>
    6498:	ef 3f       	cpi	r30, 0xFF	; 255
    649a:	19 f0       	breq	.+6      	; 0x64a2 <delay+0x70>
		m++;
    649c:	01 96       	adiw	r24, 0x01	; 1
    649e:	a1 1d       	adc	r26, r1
    64a0:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    64a2:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    64a4:	ba 2f       	mov	r27, r26
    64a6:	a9 2f       	mov	r26, r25
    64a8:	98 2f       	mov	r25, r24
    64aa:	88 27       	eor	r24, r24
    64ac:	8e 0f       	add	r24, r30
    64ae:	91 1d       	adc	r25, r1
    64b0:	a1 1d       	adc	r26, r1
    64b2:	b1 1d       	adc	r27, r1
    64b4:	e2 e0       	ldi	r30, 0x02	; 2
    64b6:	88 0f       	add	r24, r24
    64b8:	99 1f       	adc	r25, r25
    64ba:	aa 1f       	adc	r26, r26
    64bc:	bb 1f       	adc	r27, r27
    64be:	ea 95       	dec	r30
    64c0:	d1 f7       	brne	.-12     	; 0x64b6 <delay+0x84>
    64c2:	86 1b       	sub	r24, r22
    64c4:	97 0b       	sbc	r25, r23
    64c6:	88 5e       	subi	r24, 0xE8	; 232
    64c8:	93 40       	sbci	r25, 0x03	; 3
    64ca:	c8 f2       	brcs	.-78     	; 0x647e <delay+0x4c>
			ms--;
    64cc:	21 50       	subi	r18, 0x01	; 1
    64ce:	30 40       	sbci	r19, 0x00	; 0
    64d0:	40 40       	sbci	r20, 0x00	; 0
    64d2:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    64d4:	68 51       	subi	r22, 0x18	; 24
    64d6:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    64d8:	21 15       	cp	r18, r1
    64da:	31 05       	cpc	r19, r1
    64dc:	41 05       	cpc	r20, r1
    64de:	51 05       	cpc	r21, r1
    64e0:	71 f6       	brne	.-100    	; 0x647e <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    64e2:	08 95       	ret

000064e4 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    64e4:	01 97       	sbiw	r24, 0x01	; 1
    64e6:	39 f0       	breq	.+14     	; 0x64f6 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    64e8:	88 0f       	add	r24, r24
    64ea:	99 1f       	adc	r25, r25
    64ec:	88 0f       	add	r24, r24
    64ee:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    64f0:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    64f2:	01 97       	sbiw	r24, 0x01	; 1
    64f4:	f1 f7       	brne	.-4      	; 0x64f2 <delayMicroseconds+0xe>
    64f6:	08 95       	ret

000064f8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    64f8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    64fa:	84 b5       	in	r24, 0x24	; 36
    64fc:	82 60       	ori	r24, 0x02	; 2
    64fe:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    6500:	84 b5       	in	r24, 0x24	; 36
    6502:	81 60       	ori	r24, 0x01	; 1
    6504:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    6506:	85 b5       	in	r24, 0x25	; 37
    6508:	82 60       	ori	r24, 0x02	; 2
    650a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    650c:	85 b5       	in	r24, 0x25	; 37
    650e:	81 60       	ori	r24, 0x01	; 1
    6510:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    6512:	ee e6       	ldi	r30, 0x6E	; 110
    6514:	f0 e0       	ldi	r31, 0x00	; 0
    6516:	80 81       	ld	r24, Z
    6518:	81 60       	ori	r24, 0x01	; 1
    651a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    651c:	e1 e8       	ldi	r30, 0x81	; 129
    651e:	f0 e0       	ldi	r31, 0x00	; 0
    6520:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    6522:	80 81       	ld	r24, Z
    6524:	82 60       	ori	r24, 0x02	; 2
    6526:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    6528:	80 81       	ld	r24, Z
    652a:	81 60       	ori	r24, 0x01	; 1
    652c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    652e:	e0 e8       	ldi	r30, 0x80	; 128
    6530:	f0 e0       	ldi	r31, 0x00	; 0
    6532:	80 81       	ld	r24, Z
    6534:	81 60       	ori	r24, 0x01	; 1
    6536:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    6538:	e1 eb       	ldi	r30, 0xB1	; 177
    653a:	f0 e0       	ldi	r31, 0x00	; 0
    653c:	80 81       	ld	r24, Z
    653e:	84 60       	ori	r24, 0x04	; 4
    6540:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    6542:	e0 eb       	ldi	r30, 0xB0	; 176
    6544:	f0 e0       	ldi	r31, 0x00	; 0
    6546:	80 81       	ld	r24, Z
    6548:	81 60       	ori	r24, 0x01	; 1
    654a:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    654c:	ea e7       	ldi	r30, 0x7A	; 122
    654e:	f0 e0       	ldi	r31, 0x00	; 0
    6550:	80 81       	ld	r24, Z
    6552:	84 60       	ori	r24, 0x04	; 4
    6554:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    6556:	80 81       	ld	r24, Z
    6558:	82 60       	ori	r24, 0x02	; 2
    655a:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    655c:	80 81       	ld	r24, Z
    655e:	81 60       	ori	r24, 0x01	; 1
    6560:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    6562:	80 81       	ld	r24, Z
    6564:	80 68       	ori	r24, 0x80	; 128
    6566:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    6568:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    656c:	08 95       	ret

0000656e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    656e:	cf 93       	push	r28
    6570:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    6572:	48 2f       	mov	r20, r24
    6574:	50 e0       	ldi	r21, 0x00	; 0
    6576:	ca 01       	movw	r24, r20
    6578:	87 56       	subi	r24, 0x67	; 103
    657a:	97 4f       	sbci	r25, 0xF7	; 247
    657c:	fc 01       	movw	r30, r24
    657e:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    6580:	4b 57       	subi	r20, 0x7B	; 123
    6582:	57 4f       	sbci	r21, 0xF7	; 247
    6584:	fa 01       	movw	r30, r20
    6586:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    6588:	88 23       	and	r24, r24
    658a:	69 f1       	breq	.+90     	; 0x65e6 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    658c:	90 e0       	ldi	r25, 0x00	; 0
    658e:	88 0f       	add	r24, r24
    6590:	99 1f       	adc	r25, r25
    6592:	fc 01       	movw	r30, r24
    6594:	e9 59       	subi	r30, 0x99	; 153
    6596:	f7 4f       	sbci	r31, 0xF7	; 247
    6598:	a5 91       	lpm	r26, Z+
    659a:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    659c:	fc 01       	movw	r30, r24
    659e:	ef 58       	subi	r30, 0x8F	; 143
    65a0:	f7 4f       	sbci	r31, 0xF7	; 247
    65a2:	c5 91       	lpm	r28, Z+
    65a4:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    65a6:	66 23       	and	r22, r22
    65a8:	51 f4       	brne	.+20     	; 0x65be <pinMode+0x50>
		uint8_t oldSREG = SREG;
    65aa:	2f b7       	in	r18, 0x3f	; 63
                cli();
    65ac:	f8 94       	cli
		*reg &= ~bit;
    65ae:	8c 91       	ld	r24, X
    65b0:	93 2f       	mov	r25, r19
    65b2:	90 95       	com	r25
    65b4:	89 23       	and	r24, r25
    65b6:	8c 93       	st	X, r24
		*out &= ~bit;
    65b8:	88 81       	ld	r24, Y
    65ba:	89 23       	and	r24, r25
    65bc:	0b c0       	rjmp	.+22     	; 0x65d4 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    65be:	62 30       	cpi	r22, 0x02	; 2
    65c0:	61 f4       	brne	.+24     	; 0x65da <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    65c2:	2f b7       	in	r18, 0x3f	; 63
                cli();
    65c4:	f8 94       	cli
		*reg &= ~bit;
    65c6:	8c 91       	ld	r24, X
    65c8:	93 2f       	mov	r25, r19
    65ca:	90 95       	com	r25
    65cc:	89 23       	and	r24, r25
    65ce:	8c 93       	st	X, r24
		*out |= bit;
    65d0:	88 81       	ld	r24, Y
    65d2:	83 2b       	or	r24, r19
    65d4:	88 83       	st	Y, r24
		SREG = oldSREG;
    65d6:	2f bf       	out	0x3f, r18	; 63
    65d8:	06 c0       	rjmp	.+12     	; 0x65e6 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    65da:	9f b7       	in	r25, 0x3f	; 63
                cli();
    65dc:	f8 94       	cli
		*reg |= bit;
    65de:	8c 91       	ld	r24, X
    65e0:	83 2b       	or	r24, r19
    65e2:	8c 93       	st	X, r24
		SREG = oldSREG;
    65e4:	9f bf       	out	0x3f, r25	; 63
	}
}
    65e6:	df 91       	pop	r29
    65e8:	cf 91       	pop	r28
    65ea:	08 95       	ret

000065ec <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    65ec:	48 2f       	mov	r20, r24
    65ee:	50 e0       	ldi	r21, 0x00	; 0
    65f0:	ca 01       	movw	r24, r20
    65f2:	83 55       	subi	r24, 0x53	; 83
    65f4:	97 4f       	sbci	r25, 0xF7	; 247
    65f6:	fc 01       	movw	r30, r24
    65f8:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    65fa:	ca 01       	movw	r24, r20
    65fc:	87 56       	subi	r24, 0x67	; 103
    65fe:	97 4f       	sbci	r25, 0xF7	; 247
    6600:	fc 01       	movw	r30, r24
    6602:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    6604:	4b 57       	subi	r20, 0x7B	; 123
    6606:	57 4f       	sbci	r21, 0xF7	; 247
    6608:	fa 01       	movw	r30, r20
    660a:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    660c:	33 23       	and	r19, r19
    660e:	09 f4       	brne	.+2      	; 0x6612 <digitalWrite+0x26>
    6610:	40 c0       	rjmp	.+128    	; 0x6692 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6612:	22 23       	and	r18, r18
    6614:	51 f1       	breq	.+84     	; 0x666a <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    6616:	23 30       	cpi	r18, 0x03	; 3
    6618:	71 f0       	breq	.+28     	; 0x6636 <digitalWrite+0x4a>
    661a:	24 30       	cpi	r18, 0x04	; 4
    661c:	28 f4       	brcc	.+10     	; 0x6628 <digitalWrite+0x3c>
    661e:	21 30       	cpi	r18, 0x01	; 1
    6620:	a1 f0       	breq	.+40     	; 0x664a <digitalWrite+0x5e>
    6622:	22 30       	cpi	r18, 0x02	; 2
    6624:	11 f5       	brne	.+68     	; 0x666a <digitalWrite+0x7e>
    6626:	14 c0       	rjmp	.+40     	; 0x6650 <digitalWrite+0x64>
    6628:	26 30       	cpi	r18, 0x06	; 6
    662a:	b1 f0       	breq	.+44     	; 0x6658 <digitalWrite+0x6c>
    662c:	27 30       	cpi	r18, 0x07	; 7
    662e:	c1 f0       	breq	.+48     	; 0x6660 <digitalWrite+0x74>
    6630:	24 30       	cpi	r18, 0x04	; 4
    6632:	d9 f4       	brne	.+54     	; 0x666a <digitalWrite+0x7e>
    6634:	04 c0       	rjmp	.+8      	; 0x663e <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    6636:	80 91 80 00 	lds	r24, 0x0080
    663a:	8f 77       	andi	r24, 0x7F	; 127
    663c:	03 c0       	rjmp	.+6      	; 0x6644 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    663e:	80 91 80 00 	lds	r24, 0x0080
    6642:	8f 7d       	andi	r24, 0xDF	; 223
    6644:	80 93 80 00 	sts	0x0080, r24
    6648:	10 c0       	rjmp	.+32     	; 0x666a <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    664a:	84 b5       	in	r24, 0x24	; 36
    664c:	8f 77       	andi	r24, 0x7F	; 127
    664e:	02 c0       	rjmp	.+4      	; 0x6654 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    6650:	84 b5       	in	r24, 0x24	; 36
    6652:	8f 7d       	andi	r24, 0xDF	; 223
    6654:	84 bd       	out	0x24, r24	; 36
    6656:	09 c0       	rjmp	.+18     	; 0x666a <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    6658:	80 91 b0 00 	lds	r24, 0x00B0
    665c:	8f 77       	andi	r24, 0x7F	; 127
    665e:	03 c0       	rjmp	.+6      	; 0x6666 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    6660:	80 91 b0 00 	lds	r24, 0x00B0
    6664:	8f 7d       	andi	r24, 0xDF	; 223
    6666:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    666a:	e3 2f       	mov	r30, r19
    666c:	f0 e0       	ldi	r31, 0x00	; 0
    666e:	ee 0f       	add	r30, r30
    6670:	ff 1f       	adc	r31, r31
    6672:	ef 58       	subi	r30, 0x8F	; 143
    6674:	f7 4f       	sbci	r31, 0xF7	; 247
    6676:	a5 91       	lpm	r26, Z+
    6678:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    667a:	2f b7       	in	r18, 0x3f	; 63
	cli();
    667c:	f8 94       	cli

	if (val == LOW) {
    667e:	66 23       	and	r22, r22
    6680:	21 f4       	brne	.+8      	; 0x668a <digitalWrite+0x9e>
		*out &= ~bit;
    6682:	8c 91       	ld	r24, X
    6684:	90 95       	com	r25
    6686:	89 23       	and	r24, r25
    6688:	02 c0       	rjmp	.+4      	; 0x668e <digitalWrite+0xa2>
	} else {
		*out |= bit;
    668a:	8c 91       	ld	r24, X
    668c:	89 2b       	or	r24, r25
    668e:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    6690:	2f bf       	out	0x3f, r18	; 63
    6692:	08 95       	ret

00006694 <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    6694:	68 2f       	mov	r22, r24
    6696:	70 e0       	ldi	r23, 0x00	; 0
    6698:	cb 01       	movw	r24, r22
    669a:	83 55       	subi	r24, 0x53	; 83
    669c:	97 4f       	sbci	r25, 0xF7	; 247
    669e:	fc 01       	movw	r30, r24
    66a0:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    66a2:	cb 01       	movw	r24, r22
    66a4:	87 56       	subi	r24, 0x67	; 103
    66a6:	97 4f       	sbci	r25, 0xF7	; 247
    66a8:	fc 01       	movw	r30, r24
    66aa:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    66ac:	6b 57       	subi	r22, 0x7B	; 123
    66ae:	77 4f       	sbci	r23, 0xF7	; 247
    66b0:	fb 01       	movw	r30, r22
    66b2:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
    66b4:	99 23       	and	r25, r25
    66b6:	19 f4       	brne	.+6      	; 0x66be <digitalRead+0x2a>
    66b8:	20 e0       	ldi	r18, 0x00	; 0
    66ba:	30 e0       	ldi	r19, 0x00	; 0
    66bc:	3c c0       	rjmp	.+120    	; 0x6736 <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    66be:	22 23       	and	r18, r18
    66c0:	51 f1       	breq	.+84     	; 0x6716 <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    66c2:	23 30       	cpi	r18, 0x03	; 3
    66c4:	71 f0       	breq	.+28     	; 0x66e2 <digitalRead+0x4e>
    66c6:	24 30       	cpi	r18, 0x04	; 4
    66c8:	28 f4       	brcc	.+10     	; 0x66d4 <digitalRead+0x40>
    66ca:	21 30       	cpi	r18, 0x01	; 1
    66cc:	a1 f0       	breq	.+40     	; 0x66f6 <digitalRead+0x62>
    66ce:	22 30       	cpi	r18, 0x02	; 2
    66d0:	11 f5       	brne	.+68     	; 0x6716 <digitalRead+0x82>
    66d2:	14 c0       	rjmp	.+40     	; 0x66fc <digitalRead+0x68>
    66d4:	26 30       	cpi	r18, 0x06	; 6
    66d6:	b1 f0       	breq	.+44     	; 0x6704 <digitalRead+0x70>
    66d8:	27 30       	cpi	r18, 0x07	; 7
    66da:	c1 f0       	breq	.+48     	; 0x670c <digitalRead+0x78>
    66dc:	24 30       	cpi	r18, 0x04	; 4
    66de:	d9 f4       	brne	.+54     	; 0x6716 <digitalRead+0x82>
    66e0:	04 c0       	rjmp	.+8      	; 0x66ea <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    66e2:	80 91 80 00 	lds	r24, 0x0080
    66e6:	8f 77       	andi	r24, 0x7F	; 127
    66e8:	03 c0       	rjmp	.+6      	; 0x66f0 <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    66ea:	80 91 80 00 	lds	r24, 0x0080
    66ee:	8f 7d       	andi	r24, 0xDF	; 223
    66f0:	80 93 80 00 	sts	0x0080, r24
    66f4:	10 c0       	rjmp	.+32     	; 0x6716 <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    66f6:	84 b5       	in	r24, 0x24	; 36
    66f8:	8f 77       	andi	r24, 0x7F	; 127
    66fa:	02 c0       	rjmp	.+4      	; 0x6700 <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    66fc:	84 b5       	in	r24, 0x24	; 36
    66fe:	8f 7d       	andi	r24, 0xDF	; 223
    6700:	84 bd       	out	0x24, r24	; 36
    6702:	09 c0       	rjmp	.+18     	; 0x6716 <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    6704:	80 91 b0 00 	lds	r24, 0x00B0
    6708:	8f 77       	andi	r24, 0x7F	; 127
    670a:	03 c0       	rjmp	.+6      	; 0x6712 <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    670c:	80 91 b0 00 	lds	r24, 0x00B0
    6710:	8f 7d       	andi	r24, 0xDF	; 223
    6712:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    6716:	89 2f       	mov	r24, r25
    6718:	90 e0       	ldi	r25, 0x00	; 0
    671a:	88 0f       	add	r24, r24
    671c:	99 1f       	adc	r25, r25
    671e:	85 58       	subi	r24, 0x85	; 133
    6720:	97 4f       	sbci	r25, 0xF7	; 247
    6722:	fc 01       	movw	r30, r24
    6724:	a5 91       	lpm	r26, Z+
    6726:	b4 91       	lpm	r27, Z+
    6728:	8c 91       	ld	r24, X
    672a:	20 e0       	ldi	r18, 0x00	; 0
    672c:	30 e0       	ldi	r19, 0x00	; 0
    672e:	84 23       	and	r24, r20
    6730:	11 f0       	breq	.+4      	; 0x6736 <digitalRead+0xa2>
    6732:	21 e0       	ldi	r18, 0x01	; 1
    6734:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    6736:	c9 01       	movw	r24, r18
    6738:	08 95       	ret

0000673a <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
    673a:	1f 92       	push	r1
    673c:	0f 92       	push	r0
    673e:	0f b6       	in	r0, 0x3f	; 63
    6740:	0f 92       	push	r0
    6742:	11 24       	eor	r1, r1
    6744:	2f 93       	push	r18
    6746:	3f 93       	push	r19
    6748:	4f 93       	push	r20
    674a:	8f 93       	push	r24
    674c:	9f 93       	push	r25
    674e:	ef 93       	push	r30
    6750:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    6752:	80 91 c0 00 	lds	r24, 0x00C0
    6756:	82 fd       	sbrc	r24, 2
    6758:	1d c0       	rjmp	.+58     	; 0x6794 <__vector_18+0x5a>
      unsigned char c = UDR0;
    675a:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    675e:	20 91 70 03 	lds	r18, 0x0370
    6762:	30 91 71 03 	lds	r19, 0x0371

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    6766:	2f 5f       	subi	r18, 0xFF	; 255
    6768:	3f 4f       	sbci	r19, 0xFF	; 255
    676a:	2f 73       	andi	r18, 0x3F	; 63
    676c:	30 70       	andi	r19, 0x00	; 0
    676e:	80 91 72 03 	lds	r24, 0x0372
    6772:	90 91 73 03 	lds	r25, 0x0373
    6776:	28 17       	cp	r18, r24
    6778:	39 07       	cpc	r19, r25
    677a:	71 f0       	breq	.+28     	; 0x6798 <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    677c:	e0 91 70 03 	lds	r30, 0x0370
    6780:	f0 91 71 03 	lds	r31, 0x0371
    6784:	e0 5d       	subi	r30, 0xD0	; 208
    6786:	fc 4f       	sbci	r31, 0xFC	; 252
    6788:	40 83       	st	Z, r20
    buffer->head = i;
    678a:	30 93 71 03 	sts	0x0371, r19
    678e:	20 93 70 03 	sts	0x0370, r18
    6792:	02 c0       	rjmp	.+4      	; 0x6798 <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    6794:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    6798:	ff 91       	pop	r31
    679a:	ef 91       	pop	r30
    679c:	9f 91       	pop	r25
    679e:	8f 91       	pop	r24
    67a0:	4f 91       	pop	r20
    67a2:	3f 91       	pop	r19
    67a4:	2f 91       	pop	r18
    67a6:	0f 90       	pop	r0
    67a8:	0f be       	out	0x3f, r0	; 63
    67aa:	0f 90       	pop	r0
    67ac:	1f 90       	pop	r1
    67ae:	18 95       	reti

000067b0 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    67b0:	e0 91 c4 03 	lds	r30, 0x03C4
    67b4:	f0 91 c5 03 	lds	r31, 0x03C5
    67b8:	e0 5c       	subi	r30, 0xC0	; 192
    67ba:	ff 4f       	sbci	r31, 0xFF	; 255
    67bc:	81 91       	ld	r24, Z+
    67be:	91 91       	ld	r25, Z+
    67c0:	20 81       	ld	r18, Z
    67c2:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    67c4:	82 1b       	sub	r24, r18
    67c6:	93 0b       	sbc	r25, r19
    67c8:	8f 73       	andi	r24, 0x3F	; 63
    67ca:	90 70       	andi	r25, 0x00	; 0
    67cc:	89 2b       	or	r24, r25
    67ce:	11 f0       	breq	.+4      	; 0x67d4 <_Z14serialEventRunv+0x24>
    67d0:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <_Z11serialEventv>
    67d4:	08 95       	ret

000067d6 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    67d6:	1f 92       	push	r1
    67d8:	0f 92       	push	r0
    67da:	0f b6       	in	r0, 0x3f	; 63
    67dc:	0f 92       	push	r0
    67de:	11 24       	eor	r1, r1
    67e0:	2f 93       	push	r18
    67e2:	3f 93       	push	r19
    67e4:	8f 93       	push	r24
    67e6:	9f 93       	push	r25
    67e8:	ef 93       	push	r30
    67ea:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    67ec:	20 91 b4 03 	lds	r18, 0x03B4
    67f0:	30 91 b5 03 	lds	r19, 0x03B5
    67f4:	80 91 b6 03 	lds	r24, 0x03B6
    67f8:	90 91 b7 03 	lds	r25, 0x03B7
    67fc:	28 17       	cp	r18, r24
    67fe:	39 07       	cpc	r19, r25
    6800:	31 f4       	brne	.+12     	; 0x680e <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    6802:	80 91 c1 00 	lds	r24, 0x00C1
    6806:	8f 7d       	andi	r24, 0xDF	; 223
    6808:	80 93 c1 00 	sts	0x00C1, r24
    680c:	14 c0       	rjmp	.+40     	; 0x6836 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    680e:	e0 91 b6 03 	lds	r30, 0x03B6
    6812:	f0 91 b7 03 	lds	r31, 0x03B7
    6816:	ec 58       	subi	r30, 0x8C	; 140
    6818:	fc 4f       	sbci	r31, 0xFC	; 252
    681a:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    681c:	80 91 b6 03 	lds	r24, 0x03B6
    6820:	90 91 b7 03 	lds	r25, 0x03B7
    6824:	01 96       	adiw	r24, 0x01	; 1
    6826:	8f 73       	andi	r24, 0x3F	; 63
    6828:	90 70       	andi	r25, 0x00	; 0
    682a:	90 93 b7 03 	sts	0x03B7, r25
    682e:	80 93 b6 03 	sts	0x03B6, r24
	
  #if defined(UDR0)
    UDR0 = c;
    6832:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    6836:	ff 91       	pop	r31
    6838:	ef 91       	pop	r30
    683a:	9f 91       	pop	r25
    683c:	8f 91       	pop	r24
    683e:	3f 91       	pop	r19
    6840:	2f 91       	pop	r18
    6842:	0f 90       	pop	r0
    6844:	0f be       	out	0x3f, r0	; 63
    6846:	0f 90       	pop	r0
    6848:	1f 90       	pop	r1
    684a:	18 95       	reti

0000684c <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    684c:	af 92       	push	r10
    684e:	bf 92       	push	r11
    6850:	df 92       	push	r13
    6852:	ef 92       	push	r14
    6854:	ff 92       	push	r15
    6856:	0f 93       	push	r16
    6858:	1f 93       	push	r17
    685a:	cf 93       	push	r28
    685c:	df 93       	push	r29
    685e:	ec 01       	movw	r28, r24
    6860:	7a 01       	movw	r14, r20
    6862:	8b 01       	movw	r16, r22
    6864:	dd 24       	eor	r13, r13
    6866:	40 30       	cpi	r20, 0x00	; 0
    6868:	81 ee       	ldi	r24, 0xE1	; 225
    686a:	58 07       	cpc	r21, r24
    686c:	80 e0       	ldi	r24, 0x00	; 0
    686e:	68 07       	cpc	r22, r24
    6870:	80 e0       	ldi	r24, 0x00	; 0
    6872:	78 07       	cpc	r23, r24
    6874:	11 f0       	breq	.+4      	; 0x687a <_ZN14HardwareSerial5beginEm+0x2e>
    6876:	dd 24       	eor	r13, r13
    6878:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    687a:	91 e0       	ldi	r25, 0x01	; 1
    687c:	a9 2e       	mov	r10, r25
    687e:	b1 2c       	mov	r11, r1
    6880:	ec 89       	ldd	r30, Y+20	; 0x14
    6882:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    6884:	dd 20       	and	r13, r13
    6886:	69 f0       	breq	.+26     	; 0x68a2 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    6888:	c5 01       	movw	r24, r10
    688a:	08 a0       	ldd	r0, Y+32	; 0x20
    688c:	02 c0       	rjmp	.+4      	; 0x6892 <_ZN14HardwareSerial5beginEm+0x46>
    688e:	88 0f       	add	r24, r24
    6890:	99 1f       	adc	r25, r25
    6892:	0a 94       	dec	r0
    6894:	e2 f7       	brpl	.-8      	; 0x688e <_ZN14HardwareSerial5beginEm+0x42>
    6896:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    6898:	60 e0       	ldi	r22, 0x00	; 0
    689a:	79 e0       	ldi	r23, 0x09	; 9
    689c:	8d e3       	ldi	r24, 0x3D	; 61
    689e:	90 e0       	ldi	r25, 0x00	; 0
    68a0:	05 c0       	rjmp	.+10     	; 0x68ac <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    68a2:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    68a4:	60 e8       	ldi	r22, 0x80	; 128
    68a6:	74 e8       	ldi	r23, 0x84	; 132
    68a8:	8e e1       	ldi	r24, 0x1E	; 30
    68aa:	90 e0       	ldi	r25, 0x00	; 0
    68ac:	a8 01       	movw	r20, r16
    68ae:	97 01       	movw	r18, r14
    68b0:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <__udivmodsi4>
    68b4:	21 50       	subi	r18, 0x01	; 1
    68b6:	30 40       	sbci	r19, 0x00	; 0
    68b8:	40 40       	sbci	r20, 0x00	; 0
    68ba:	50 40       	sbci	r21, 0x00	; 0
    68bc:	56 95       	lsr	r21
    68be:	47 95       	ror	r20
    68c0:	37 95       	ror	r19
    68c2:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    68c4:	80 e1       	ldi	r24, 0x10	; 16
    68c6:	20 30       	cpi	r18, 0x00	; 0
    68c8:	38 07       	cpc	r19, r24
    68ca:	20 f0       	brcs	.+8      	; 0x68d4 <_ZN14HardwareSerial5beginEm+0x88>
    68cc:	dd 20       	and	r13, r13
    68ce:	11 f0       	breq	.+4      	; 0x68d4 <_ZN14HardwareSerial5beginEm+0x88>
    68d0:	dd 24       	eor	r13, r13
    68d2:	d6 cf       	rjmp	.-84     	; 0x6880 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    68d4:	e8 89       	ldd	r30, Y+16	; 0x10
    68d6:	f9 89       	ldd	r31, Y+17	; 0x11
    68d8:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    68da:	ea 89       	ldd	r30, Y+18	; 0x12
    68dc:	fb 89       	ldd	r31, Y+19	; 0x13
    68de:	20 83       	st	Z, r18

  transmitting = false;
    68e0:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    68e2:	ee 89       	ldd	r30, Y+22	; 0x16
    68e4:	ff 89       	ldd	r31, Y+23	; 0x17
    68e6:	40 81       	ld	r20, Z
    68e8:	21 e0       	ldi	r18, 0x01	; 1
    68ea:	30 e0       	ldi	r19, 0x00	; 0
    68ec:	c9 01       	movw	r24, r18
    68ee:	0c 8c       	ldd	r0, Y+28	; 0x1c
    68f0:	02 c0       	rjmp	.+4      	; 0x68f6 <_ZN14HardwareSerial5beginEm+0xaa>
    68f2:	88 0f       	add	r24, r24
    68f4:	99 1f       	adc	r25, r25
    68f6:	0a 94       	dec	r0
    68f8:	e2 f7       	brpl	.-8      	; 0x68f2 <_ZN14HardwareSerial5beginEm+0xa6>
    68fa:	48 2b       	or	r20, r24
    68fc:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    68fe:	ee 89       	ldd	r30, Y+22	; 0x16
    6900:	ff 89       	ldd	r31, Y+23	; 0x17
    6902:	40 81       	ld	r20, Z
    6904:	c9 01       	movw	r24, r18
    6906:	0d 8c       	ldd	r0, Y+29	; 0x1d
    6908:	02 c0       	rjmp	.+4      	; 0x690e <_ZN14HardwareSerial5beginEm+0xc2>
    690a:	88 0f       	add	r24, r24
    690c:	99 1f       	adc	r25, r25
    690e:	0a 94       	dec	r0
    6910:	e2 f7       	brpl	.-8      	; 0x690a <_ZN14HardwareSerial5beginEm+0xbe>
    6912:	48 2b       	or	r20, r24
    6914:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    6916:	ee 89       	ldd	r30, Y+22	; 0x16
    6918:	ff 89       	ldd	r31, Y+23	; 0x17
    691a:	40 81       	ld	r20, Z
    691c:	c9 01       	movw	r24, r18
    691e:	0e 8c       	ldd	r0, Y+30	; 0x1e
    6920:	02 c0       	rjmp	.+4      	; 0x6926 <_ZN14HardwareSerial5beginEm+0xda>
    6922:	88 0f       	add	r24, r24
    6924:	99 1f       	adc	r25, r25
    6926:	0a 94       	dec	r0
    6928:	e2 f7       	brpl	.-8      	; 0x6922 <_ZN14HardwareSerial5beginEm+0xd6>
    692a:	48 2b       	or	r20, r24
    692c:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    692e:	ee 89       	ldd	r30, Y+22	; 0x16
    6930:	ff 89       	ldd	r31, Y+23	; 0x17
    6932:	80 81       	ld	r24, Z
    6934:	0f 8c       	ldd	r0, Y+31	; 0x1f
    6936:	02 c0       	rjmp	.+4      	; 0x693c <_ZN14HardwareSerial5beginEm+0xf0>
    6938:	22 0f       	add	r18, r18
    693a:	33 1f       	adc	r19, r19
    693c:	0a 94       	dec	r0
    693e:	e2 f7       	brpl	.-8      	; 0x6938 <_ZN14HardwareSerial5beginEm+0xec>
    6940:	20 95       	com	r18
    6942:	28 23       	and	r18, r24
    6944:	20 83       	st	Z, r18
}
    6946:	df 91       	pop	r29
    6948:	cf 91       	pop	r28
    694a:	1f 91       	pop	r17
    694c:	0f 91       	pop	r16
    694e:	ff 90       	pop	r15
    6950:	ef 90       	pop	r14
    6952:	df 90       	pop	r13
    6954:	bf 90       	pop	r11
    6956:	af 90       	pop	r10
    6958:	08 95       	ret

0000695a <_ZN14HardwareSerial3endEv>:
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
  cbi(*_ucsrb, _udrie);
}

void HardwareSerial::end()
    695a:	cf 93       	push	r28
    695c:	df 93       	push	r29
    695e:	dc 01       	movw	r26, r24
{
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    6960:	1e 96       	adiw	r26, 0x0e	; 14
    6962:	8d 91       	ld	r24, X+
    6964:	9c 91       	ld	r25, X
    6966:	1f 97       	sbiw	r26, 0x0f	; 15
    6968:	ec 01       	movw	r28, r24
    696a:	c0 5c       	subi	r28, 0xC0	; 192
    696c:	df 4f       	sbci	r29, 0xFF	; 255
    696e:	fc 01       	movw	r30, r24
    6970:	ee 5b       	subi	r30, 0xBE	; 190
    6972:	ff 4f       	sbci	r31, 0xFF	; 255
    6974:	28 81       	ld	r18, Y
    6976:	39 81       	ldd	r19, Y+1	; 0x01
    6978:	80 81       	ld	r24, Z
    697a:	91 81       	ldd	r25, Z+1	; 0x01
    697c:	28 17       	cp	r18, r24
    697e:	39 07       	cpc	r19, r25
    6980:	c9 f7       	brne	.-14     	; 0x6974 <_ZN14HardwareSerial3endEv+0x1a>
    ;

  cbi(*_ucsrb, _rxen);
    6982:	56 96       	adiw	r26, 0x16	; 22
    6984:	ed 91       	ld	r30, X+
    6986:	fc 91       	ld	r31, X
    6988:	57 97       	sbiw	r26, 0x17	; 23
    698a:	40 81       	ld	r20, Z
    698c:	21 e0       	ldi	r18, 0x01	; 1
    698e:	30 e0       	ldi	r19, 0x00	; 0
    6990:	c9 01       	movw	r24, r18
    6992:	5c 96       	adiw	r26, 0x1c	; 28
    6994:	0c 90       	ld	r0, X
    6996:	5c 97       	sbiw	r26, 0x1c	; 28
    6998:	02 c0       	rjmp	.+4      	; 0x699e <_ZN14HardwareSerial3endEv+0x44>
    699a:	88 0f       	add	r24, r24
    699c:	99 1f       	adc	r25, r25
    699e:	0a 94       	dec	r0
    69a0:	e2 f7       	brpl	.-8      	; 0x699a <_ZN14HardwareSerial3endEv+0x40>
    69a2:	80 95       	com	r24
    69a4:	84 23       	and	r24, r20
    69a6:	80 83       	st	Z, r24
  cbi(*_ucsrb, _txen);
    69a8:	56 96       	adiw	r26, 0x16	; 22
    69aa:	ed 91       	ld	r30, X+
    69ac:	fc 91       	ld	r31, X
    69ae:	57 97       	sbiw	r26, 0x17	; 23
    69b0:	40 81       	ld	r20, Z
    69b2:	c9 01       	movw	r24, r18
    69b4:	5d 96       	adiw	r26, 0x1d	; 29
    69b6:	0c 90       	ld	r0, X
    69b8:	5d 97       	sbiw	r26, 0x1d	; 29
    69ba:	02 c0       	rjmp	.+4      	; 0x69c0 <_ZN14HardwareSerial3endEv+0x66>
    69bc:	88 0f       	add	r24, r24
    69be:	99 1f       	adc	r25, r25
    69c0:	0a 94       	dec	r0
    69c2:	e2 f7       	brpl	.-8      	; 0x69bc <_ZN14HardwareSerial3endEv+0x62>
    69c4:	80 95       	com	r24
    69c6:	84 23       	and	r24, r20
    69c8:	80 83       	st	Z, r24
  cbi(*_ucsrb, _rxcie);  
    69ca:	56 96       	adiw	r26, 0x16	; 22
    69cc:	ed 91       	ld	r30, X+
    69ce:	fc 91       	ld	r31, X
    69d0:	57 97       	sbiw	r26, 0x17	; 23
    69d2:	40 81       	ld	r20, Z
    69d4:	c9 01       	movw	r24, r18
    69d6:	5e 96       	adiw	r26, 0x1e	; 30
    69d8:	0c 90       	ld	r0, X
    69da:	5e 97       	sbiw	r26, 0x1e	; 30
    69dc:	02 c0       	rjmp	.+4      	; 0x69e2 <_ZN14HardwareSerial3endEv+0x88>
    69de:	88 0f       	add	r24, r24
    69e0:	99 1f       	adc	r25, r25
    69e2:	0a 94       	dec	r0
    69e4:	e2 f7       	brpl	.-8      	; 0x69de <_ZN14HardwareSerial3endEv+0x84>
    69e6:	80 95       	com	r24
    69e8:	84 23       	and	r24, r20
    69ea:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
    69ec:	56 96       	adiw	r26, 0x16	; 22
    69ee:	ed 91       	ld	r30, X+
    69f0:	fc 91       	ld	r31, X
    69f2:	57 97       	sbiw	r26, 0x17	; 23
    69f4:	80 81       	ld	r24, Z
    69f6:	5f 96       	adiw	r26, 0x1f	; 31
    69f8:	0c 90       	ld	r0, X
    69fa:	5f 97       	sbiw	r26, 0x1f	; 31
    69fc:	02 c0       	rjmp	.+4      	; 0x6a02 <_ZN14HardwareSerial3endEv+0xa8>
    69fe:	22 0f       	add	r18, r18
    6a00:	33 1f       	adc	r19, r19
    6a02:	0a 94       	dec	r0
    6a04:	e2 f7       	brpl	.-8      	; 0x69fe <_ZN14HardwareSerial3endEv+0xa4>
    6a06:	20 95       	com	r18
    6a08:	28 23       	and	r18, r24
    6a0a:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    6a0c:	1c 96       	adiw	r26, 0x0c	; 12
    6a0e:	ed 91       	ld	r30, X+
    6a10:	fc 91       	ld	r31, X
    6a12:	1d 97       	sbiw	r26, 0x0d	; 13
    6a14:	ee 5b       	subi	r30, 0xBE	; 190
    6a16:	ff 4f       	sbci	r31, 0xFF	; 255
    6a18:	80 81       	ld	r24, Z
    6a1a:	91 81       	ldd	r25, Z+1	; 0x01
    6a1c:	92 93       	st	-Z, r25
    6a1e:	82 93       	st	-Z, r24
}
    6a20:	df 91       	pop	r29
    6a22:	cf 91       	pop	r28
    6a24:	08 95       	ret

00006a26 <_ZN14HardwareSerial9availableEv>:

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    6a26:	dc 01       	movw	r26, r24
    6a28:	1c 96       	adiw	r26, 0x0c	; 12
    6a2a:	ed 91       	ld	r30, X+
    6a2c:	fc 91       	ld	r31, X
    6a2e:	1d 97       	sbiw	r26, 0x0d	; 13
    6a30:	e0 5c       	subi	r30, 0xC0	; 192
    6a32:	ff 4f       	sbci	r31, 0xFF	; 255
    6a34:	21 91       	ld	r18, Z+
    6a36:	31 91       	ld	r19, Z+
    6a38:	80 81       	ld	r24, Z
    6a3a:	91 81       	ldd	r25, Z+1	; 0x01
    6a3c:	28 1b       	sub	r18, r24
    6a3e:	39 0b       	sbc	r19, r25
    6a40:	2f 73       	andi	r18, 0x3F	; 63
    6a42:	30 70       	andi	r19, 0x00	; 0
}
    6a44:	c9 01       	movw	r24, r18
    6a46:	08 95       	ret

00006a48 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    6a48:	dc 01       	movw	r26, r24
    6a4a:	1c 96       	adiw	r26, 0x0c	; 12
    6a4c:	ed 91       	ld	r30, X+
    6a4e:	fc 91       	ld	r31, X
    6a50:	1d 97       	sbiw	r26, 0x0d	; 13
    6a52:	e0 5c       	subi	r30, 0xC0	; 192
    6a54:	ff 4f       	sbci	r31, 0xFF	; 255
    6a56:	20 81       	ld	r18, Z
    6a58:	31 81       	ldd	r19, Z+1	; 0x01
    6a5a:	e0 54       	subi	r30, 0x40	; 64
    6a5c:	f0 40       	sbci	r31, 0x00	; 0
    6a5e:	df 01       	movw	r26, r30
    6a60:	ae 5b       	subi	r26, 0xBE	; 190
    6a62:	bf 4f       	sbci	r27, 0xFF	; 255
    6a64:	8d 91       	ld	r24, X+
    6a66:	9c 91       	ld	r25, X
    6a68:	11 97       	sbiw	r26, 0x01	; 1
    6a6a:	28 17       	cp	r18, r24
    6a6c:	39 07       	cpc	r19, r25
    6a6e:	19 f4       	brne	.+6      	; 0x6a76 <_ZN14HardwareSerial4peekEv+0x2e>
    6a70:	2f ef       	ldi	r18, 0xFF	; 255
    6a72:	3f ef       	ldi	r19, 0xFF	; 255
    6a74:	07 c0       	rjmp	.+14     	; 0x6a84 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    6a76:	8d 91       	ld	r24, X+
    6a78:	9c 91       	ld	r25, X
    6a7a:	e8 0f       	add	r30, r24
    6a7c:	f9 1f       	adc	r31, r25
    6a7e:	80 81       	ld	r24, Z
    6a80:	28 2f       	mov	r18, r24
    6a82:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    6a84:	c9 01       	movw	r24, r18
    6a86:	08 95       	ret

00006a88 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    6a88:	dc 01       	movw	r26, r24
    6a8a:	1c 96       	adiw	r26, 0x0c	; 12
    6a8c:	ed 91       	ld	r30, X+
    6a8e:	fc 91       	ld	r31, X
    6a90:	1d 97       	sbiw	r26, 0x0d	; 13
    6a92:	e0 5c       	subi	r30, 0xC0	; 192
    6a94:	ff 4f       	sbci	r31, 0xFF	; 255
    6a96:	20 81       	ld	r18, Z
    6a98:	31 81       	ldd	r19, Z+1	; 0x01
    6a9a:	e0 54       	subi	r30, 0x40	; 64
    6a9c:	f0 40       	sbci	r31, 0x00	; 0
    6a9e:	df 01       	movw	r26, r30
    6aa0:	ae 5b       	subi	r26, 0xBE	; 190
    6aa2:	bf 4f       	sbci	r27, 0xFF	; 255
    6aa4:	8d 91       	ld	r24, X+
    6aa6:	9c 91       	ld	r25, X
    6aa8:	11 97       	sbiw	r26, 0x01	; 1
    6aaa:	28 17       	cp	r18, r24
    6aac:	39 07       	cpc	r19, r25
    6aae:	19 f4       	brne	.+6      	; 0x6ab6 <_ZN14HardwareSerial4readEv+0x2e>
    6ab0:	2f ef       	ldi	r18, 0xFF	; 255
    6ab2:	3f ef       	ldi	r19, 0xFF	; 255
    6ab4:	10 c0       	rjmp	.+32     	; 0x6ad6 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    6ab6:	8d 91       	ld	r24, X+
    6ab8:	9c 91       	ld	r25, X
    6aba:	11 97       	sbiw	r26, 0x01	; 1
    6abc:	e8 0f       	add	r30, r24
    6abe:	f9 1f       	adc	r31, r25
    6ac0:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    6ac2:	8d 91       	ld	r24, X+
    6ac4:	9c 91       	ld	r25, X
    6ac6:	11 97       	sbiw	r26, 0x01	; 1
    6ac8:	01 96       	adiw	r24, 0x01	; 1
    6aca:	8f 73       	andi	r24, 0x3F	; 63
    6acc:	90 70       	andi	r25, 0x00	; 0
    6ace:	11 96       	adiw	r26, 0x01	; 1
    6ad0:	9c 93       	st	X, r25
    6ad2:	8e 93       	st	-X, r24
    return c;
    6ad4:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    6ad6:	c9 01       	movw	r24, r18
    6ad8:	08 95       	ret

00006ada <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
    6ada:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    6adc:	91 96       	adiw	r26, 0x21	; 33
    6ade:	8c 91       	ld	r24, X
    6ae0:	91 97       	sbiw	r26, 0x21	; 33
    6ae2:	88 23       	and	r24, r24
    6ae4:	39 f0       	breq	.+14     	; 0x6af4 <_ZN14HardwareSerial5flushEv+0x1a>
    6ae6:	54 96       	adiw	r26, 0x14	; 20
    6ae8:	ed 91       	ld	r30, X+
    6aea:	fc 91       	ld	r31, X
    6aec:	55 97       	sbiw	r26, 0x15	; 21
    6aee:	80 81       	ld	r24, Z
    6af0:	86 ff       	sbrs	r24, 6
    6af2:	f9 cf       	rjmp	.-14     	; 0x6ae6 <_ZN14HardwareSerial5flushEv+0xc>
  transmitting = false;
    6af4:	91 96       	adiw	r26, 0x21	; 33
    6af6:	1c 92       	st	X, r1
}
    6af8:	08 95       	ret

00006afa <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    6afa:	cf 93       	push	r28
    6afc:	df 93       	push	r29
    6afe:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    6b00:	ee 85       	ldd	r30, Y+14	; 0x0e
    6b02:	ff 85       	ldd	r31, Y+15	; 0x0f
    6b04:	e0 5c       	subi	r30, 0xC0	; 192
    6b06:	ff 4f       	sbci	r31, 0xFF	; 255
    6b08:	20 81       	ld	r18, Z
    6b0a:	31 81       	ldd	r19, Z+1	; 0x01
    6b0c:	e0 54       	subi	r30, 0x40	; 64
    6b0e:	f0 40       	sbci	r31, 0x00	; 0
    6b10:	2f 5f       	subi	r18, 0xFF	; 255
    6b12:	3f 4f       	sbci	r19, 0xFF	; 255
    6b14:	2f 73       	andi	r18, 0x3F	; 63
    6b16:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    6b18:	df 01       	movw	r26, r30
    6b1a:	ae 5b       	subi	r26, 0xBE	; 190
    6b1c:	bf 4f       	sbci	r27, 0xFF	; 255
    6b1e:	8d 91       	ld	r24, X+
    6b20:	9c 91       	ld	r25, X
    6b22:	11 97       	sbiw	r26, 0x01	; 1
    6b24:	28 17       	cp	r18, r24
    6b26:	39 07       	cpc	r19, r25
    6b28:	d1 f3       	breq	.-12     	; 0x6b1e <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    6b2a:	e0 5c       	subi	r30, 0xC0	; 192
    6b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    6b2e:	80 81       	ld	r24, Z
    6b30:	91 81       	ldd	r25, Z+1	; 0x01
    6b32:	e0 54       	subi	r30, 0x40	; 64
    6b34:	f0 40       	sbci	r31, 0x00	; 0
    6b36:	e8 0f       	add	r30, r24
    6b38:	f9 1f       	adc	r31, r25
    6b3a:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    6b3c:	ee 85       	ldd	r30, Y+14	; 0x0e
    6b3e:	ff 85       	ldd	r31, Y+15	; 0x0f
    6b40:	e0 5c       	subi	r30, 0xC0	; 192
    6b42:	ff 4f       	sbci	r31, 0xFF	; 255
    6b44:	31 83       	std	Z+1, r19	; 0x01
    6b46:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    6b48:	ee 89       	ldd	r30, Y+22	; 0x16
    6b4a:	ff 89       	ldd	r31, Y+23	; 0x17
    6b4c:	20 81       	ld	r18, Z
    6b4e:	81 e0       	ldi	r24, 0x01	; 1
    6b50:	90 e0       	ldi	r25, 0x00	; 0
    6b52:	0f 8c       	ldd	r0, Y+31	; 0x1f
    6b54:	02 c0       	rjmp	.+4      	; 0x6b5a <_ZN14HardwareSerial5writeEh+0x60>
    6b56:	88 0f       	add	r24, r24
    6b58:	99 1f       	adc	r25, r25
    6b5a:	0a 94       	dec	r0
    6b5c:	e2 f7       	brpl	.-8      	; 0x6b56 <_ZN14HardwareSerial5writeEh+0x5c>
    6b5e:	28 2b       	or	r18, r24
    6b60:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    6b62:	81 e0       	ldi	r24, 0x01	; 1
    6b64:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    6b66:	ec 89       	ldd	r30, Y+20	; 0x14
    6b68:	fd 89       	ldd	r31, Y+21	; 0x15
    6b6a:	80 81       	ld	r24, Z
    6b6c:	80 64       	ori	r24, 0x40	; 64
    6b6e:	80 83       	st	Z, r24
  
  return 1;
}
    6b70:	81 e0       	ldi	r24, 0x01	; 1
    6b72:	90 e0       	ldi	r25, 0x00	; 0
    6b74:	df 91       	pop	r29
    6b76:	cf 91       	pop	r28
    6b78:	08 95       	ret

00006b7a <_ZN14HardwareSerialcvbEv>:

HardwareSerial::operator bool() {
	return true;
}
    6b7a:	81 e0       	ldi	r24, 0x01	; 1
    6b7c:	08 95       	ret

00006b7e <_GLOBAL__I_rx_buffer>:
  public:
    Print() : write_error(0) {}
    6b7e:	10 92 bb 03 	sts	0x03BB, r1
    6b82:	10 92 ba 03 	sts	0x03BA, r1
    6b86:	88 ee       	ldi	r24, 0xE8	; 232
    6b88:	93 e0       	ldi	r25, 0x03	; 3
    6b8a:	a0 e0       	ldi	r26, 0x00	; 0
    6b8c:	b0 e0       	ldi	r27, 0x00	; 0
    6b8e:	80 93 bc 03 	sts	0x03BC, r24
    6b92:	90 93 bd 03 	sts	0x03BD, r25
    6b96:	a0 93 be 03 	sts	0x03BE, r26
    6b9a:	b0 93 bf 03 	sts	0x03BF, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    6b9e:	80 e3       	ldi	r24, 0x30	; 48
    6ba0:	91 e0       	ldi	r25, 0x01	; 1
    6ba2:	90 93 b9 03 	sts	0x03B9, r25
    6ba6:	80 93 b8 03 	sts	0x03B8, r24
{
  _rx_buffer = rx_buffer;
    6baa:	80 e3       	ldi	r24, 0x30	; 48
    6bac:	93 e0       	ldi	r25, 0x03	; 3
    6bae:	90 93 c5 03 	sts	0x03C5, r25
    6bb2:	80 93 c4 03 	sts	0x03C4, r24
  _tx_buffer = tx_buffer;
    6bb6:	84 e7       	ldi	r24, 0x74	; 116
    6bb8:	93 e0       	ldi	r25, 0x03	; 3
    6bba:	90 93 c7 03 	sts	0x03C7, r25
    6bbe:	80 93 c6 03 	sts	0x03C6, r24
  _ubrrh = ubrrh;
    6bc2:	85 ec       	ldi	r24, 0xC5	; 197
    6bc4:	90 e0       	ldi	r25, 0x00	; 0
    6bc6:	90 93 c9 03 	sts	0x03C9, r25
    6bca:	80 93 c8 03 	sts	0x03C8, r24
  _ubrrl = ubrrl;
    6bce:	84 ec       	ldi	r24, 0xC4	; 196
    6bd0:	90 e0       	ldi	r25, 0x00	; 0
    6bd2:	90 93 cb 03 	sts	0x03CB, r25
    6bd6:	80 93 ca 03 	sts	0x03CA, r24
  _ucsra = ucsra;
    6bda:	80 ec       	ldi	r24, 0xC0	; 192
    6bdc:	90 e0       	ldi	r25, 0x00	; 0
    6bde:	90 93 cd 03 	sts	0x03CD, r25
    6be2:	80 93 cc 03 	sts	0x03CC, r24
  _ucsrb = ucsrb;
    6be6:	81 ec       	ldi	r24, 0xC1	; 193
    6be8:	90 e0       	ldi	r25, 0x00	; 0
    6bea:	90 93 cf 03 	sts	0x03CF, r25
    6bee:	80 93 ce 03 	sts	0x03CE, r24
  _ucsrc = ucsrc;
    6bf2:	82 ec       	ldi	r24, 0xC2	; 194
    6bf4:	90 e0       	ldi	r25, 0x00	; 0
    6bf6:	90 93 d1 03 	sts	0x03D1, r25
    6bfa:	80 93 d0 03 	sts	0x03D0, r24
  _udr = udr;
    6bfe:	86 ec       	ldi	r24, 0xC6	; 198
    6c00:	90 e0       	ldi	r25, 0x00	; 0
    6c02:	90 93 d3 03 	sts	0x03D3, r25
    6c06:	80 93 d2 03 	sts	0x03D2, r24
  _rxen = rxen;
    6c0a:	84 e0       	ldi	r24, 0x04	; 4
    6c0c:	80 93 d4 03 	sts	0x03D4, r24
  _txen = txen;
    6c10:	83 e0       	ldi	r24, 0x03	; 3
    6c12:	80 93 d5 03 	sts	0x03D5, r24
  _rxcie = rxcie;
    6c16:	87 e0       	ldi	r24, 0x07	; 7
    6c18:	80 93 d6 03 	sts	0x03D6, r24
  _udrie = udrie;
    6c1c:	85 e0       	ldi	r24, 0x05	; 5
    6c1e:	80 93 d7 03 	sts	0x03D7, r24
  _u2x = u2x;
    6c22:	81 e0       	ldi	r24, 0x01	; 1
    6c24:	80 93 d8 03 	sts	0x03D8, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    6c28:	08 95       	ret

00006c2a <main>:
#include <Arduino.h>

int main(void)
    6c2a:	cf 93       	push	r28
    6c2c:	df 93       	push	r29
{
	init();
    6c2e:	0e 94 7c 32 	call	0x64f8	; 0x64f8 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    6c32:	0e 94 f7 13 	call	0x27ee	; 0x27ee <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    6c36:	c8 ed       	ldi	r28, 0xD8	; 216
    6c38:	d3 e3       	ldi	r29, 0x33	; 51
#endif
	
	setup();
    
	for (;;) {
		loop();
    6c3a:	0e 94 bd 13 	call	0x277a	; 0x277a <loop>
		if (serialEventRun) serialEventRun();
    6c3e:	20 97       	sbiw	r28, 0x00	; 0
    6c40:	e1 f3       	breq	.-8      	; 0x6c3a <main+0x10>
    6c42:	0e 94 d8 33 	call	0x67b0	; 0x67b0 <_Z14serialEventRunv>
    6c46:	f9 cf       	rjmp	.-14     	; 0x6c3a <main+0x10>

00006c48 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    6c48:	cf 92       	push	r12
    6c4a:	df 92       	push	r13
    6c4c:	ef 92       	push	r14
    6c4e:	ff 92       	push	r15
    6c50:	0f 93       	push	r16
    6c52:	1f 93       	push	r17
    6c54:	cf 93       	push	r28
    6c56:	df 93       	push	r29
    6c58:	7c 01       	movw	r14, r24
    6c5a:	6b 01       	movw	r12, r22
    6c5c:	8a 01       	movw	r16, r20
    6c5e:	c0 e0       	ldi	r28, 0x00	; 0
    6c60:	d0 e0       	ldi	r29, 0x00	; 0
    6c62:	0f c0       	rjmp	.+30     	; 0x6c82 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    6c64:	d6 01       	movw	r26, r12
    6c66:	6d 91       	ld	r22, X+
    6c68:	6d 01       	movw	r12, r26
    6c6a:	d7 01       	movw	r26, r14
    6c6c:	ed 91       	ld	r30, X+
    6c6e:	fc 91       	ld	r31, X
    6c70:	01 90       	ld	r0, Z+
    6c72:	f0 81       	ld	r31, Z
    6c74:	e0 2d       	mov	r30, r0
    6c76:	c7 01       	movw	r24, r14
    6c78:	09 95       	icall
    6c7a:	c8 0f       	add	r28, r24
    6c7c:	d9 1f       	adc	r29, r25
    6c7e:	01 50       	subi	r16, 0x01	; 1
    6c80:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    6c82:	01 15       	cp	r16, r1
    6c84:	11 05       	cpc	r17, r1
    6c86:	71 f7       	brne	.-36     	; 0x6c64 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    6c88:	ce 01       	movw	r24, r28
    6c8a:	df 91       	pop	r29
    6c8c:	cf 91       	pop	r28
    6c8e:	1f 91       	pop	r17
    6c90:	0f 91       	pop	r16
    6c92:	ff 90       	pop	r15
    6c94:	ef 90       	pop	r14
    6c96:	df 90       	pop	r13
    6c98:	cf 90       	pop	r12
    6c9a:	08 95       	ret

00006c9c <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
    6c9c:	ef 92       	push	r14
    6c9e:	ff 92       	push	r15
    6ca0:	0f 93       	push	r16
    6ca2:	1f 93       	push	r17
    6ca4:	cf 93       	push	r28
    6ca6:	df 93       	push	r29
    6ca8:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    6caa:	8b 01       	movw	r16, r22
    6cac:	c0 e0       	ldi	r28, 0x00	; 0
    6cae:	d0 e0       	ldi	r29, 0x00	; 0
    6cb0:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    6cb2:	0f 5f       	subi	r16, 0xFF	; 255
    6cb4:	1f 4f       	sbci	r17, 0xFF	; 255
    6cb6:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    6cb8:	66 23       	and	r22, r22
    6cba:	59 f0       	breq	.+22     	; 0x6cd2 <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    n += write(c);
    6cbc:	d7 01       	movw	r26, r14
    6cbe:	ed 91       	ld	r30, X+
    6cc0:	fc 91       	ld	r31, X
    6cc2:	01 90       	ld	r0, Z+
    6cc4:	f0 81       	ld	r31, Z
    6cc6:	e0 2d       	mov	r30, r0
    6cc8:	c7 01       	movw	r24, r14
    6cca:	09 95       	icall
    6ccc:	c8 0f       	add	r28, r24
    6cce:	d9 1f       	adc	r29, r25
    6cd0:	ef cf       	rjmp	.-34     	; 0x6cb0 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
  }
  return n;
}
    6cd2:	ce 01       	movw	r24, r28
    6cd4:	df 91       	pop	r29
    6cd6:	cf 91       	pop	r28
    6cd8:	1f 91       	pop	r17
    6cda:	0f 91       	pop	r16
    6cdc:	ff 90       	pop	r15
    6cde:	ef 90       	pop	r14
    6ce0:	08 95       	ret

00006ce2 <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    6ce2:	dc 01       	movw	r26, r24
{
  return write(c);
    6ce4:	ed 91       	ld	r30, X+
    6ce6:	fc 91       	ld	r31, X
    6ce8:	01 90       	ld	r0, Z+
    6cea:	f0 81       	ld	r31, Z
    6cec:	e0 2d       	mov	r30, r0
    6cee:	09 95       	icall
}
    6cf0:	08 95       	ret

00006cf2 <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    6cf2:	ef 92       	push	r14
    6cf4:	ff 92       	push	r15
    6cf6:	0f 93       	push	r16
    6cf8:	1f 93       	push	r17
    6cfa:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    6cfc:	dc 01       	movw	r26, r24
    6cfe:	ed 91       	ld	r30, X+
    6d00:	fc 91       	ld	r31, X
    6d02:	01 90       	ld	r0, Z+
    6d04:	f0 81       	ld	r31, Z
    6d06:	e0 2d       	mov	r30, r0
    6d08:	6d e0       	ldi	r22, 0x0D	; 13
    6d0a:	09 95       	icall
    6d0c:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    6d0e:	d8 01       	movw	r26, r16
    6d10:	ed 91       	ld	r30, X+
    6d12:	fc 91       	ld	r31, X
    6d14:	01 90       	ld	r0, Z+
    6d16:	f0 81       	ld	r31, Z
    6d18:	e0 2d       	mov	r30, r0
    6d1a:	c8 01       	movw	r24, r16
    6d1c:	6a e0       	ldi	r22, 0x0A	; 10
    6d1e:	09 95       	icall
    6d20:	9c 01       	movw	r18, r24
    6d22:	2e 0d       	add	r18, r14
    6d24:	3f 1d       	adc	r19, r15
    6d26:	c9 01       	movw	r24, r18
    6d28:	1f 91       	pop	r17
    6d2a:	0f 91       	pop	r16
    6d2c:	ff 90       	pop	r15
    6d2e:	ef 90       	pop	r14
    6d30:	08 95       	ret

00006d32 <_ZN5Print7printlnEPK19__FlashStringHelper>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    6d32:	ef 92       	push	r14
    6d34:	ff 92       	push	r15
    6d36:	0f 93       	push	r16
    6d38:	1f 93       	push	r17
    6d3a:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    6d3c:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <_ZN5Print5printEPK19__FlashStringHelper>
    6d40:	8c 01       	movw	r16, r24
  n += println();
    6d42:	c7 01       	movw	r24, r14
    6d44:	0e 94 79 36 	call	0x6cf2	; 0x6cf2 <_ZN5Print7printlnEv>
    6d48:	9c 01       	movw	r18, r24
    6d4a:	20 0f       	add	r18, r16
    6d4c:	31 1f       	adc	r19, r17
  return n;
}
    6d4e:	c9 01       	movw	r24, r18
    6d50:	1f 91       	pop	r17
    6d52:	0f 91       	pop	r16
    6d54:	ff 90       	pop	r15
    6d56:	ef 90       	pop	r14
    6d58:	08 95       	ret

00006d5a <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    6d5a:	cf 93       	push	r28
    6d5c:	df 93       	push	r29
    6d5e:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    6d60:	61 15       	cp	r22, r1
    6d62:	71 05       	cpc	r23, r1
    6d64:	19 f4       	brne	.+6      	; 0x6d6c <_ZN5Print5writeEPKc+0x12>
    6d66:	20 e0       	ldi	r18, 0x00	; 0
    6d68:	30 e0       	ldi	r19, 0x00	; 0
    6d6a:	0f c0       	rjmp	.+30     	; 0x6d8a <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
    6d6c:	db 01       	movw	r26, r22
    6d6e:	0d 90       	ld	r0, X+
    6d70:	00 20       	and	r0, r0
    6d72:	e9 f7       	brne	.-6      	; 0x6d6e <_ZN5Print5writeEPKc+0x14>
    6d74:	11 97       	sbiw	r26, 0x01	; 1
    6d76:	a6 1b       	sub	r26, r22
    6d78:	b7 0b       	sbc	r27, r23
    6d7a:	e8 81       	ld	r30, Y
    6d7c:	f9 81       	ldd	r31, Y+1	; 0x01
    6d7e:	02 80       	ldd	r0, Z+2	; 0x02
    6d80:	f3 81       	ldd	r31, Z+3	; 0x03
    6d82:	e0 2d       	mov	r30, r0
    6d84:	ad 01       	movw	r20, r26
    6d86:	09 95       	icall
    6d88:	9c 01       	movw	r18, r24
    }
    6d8a:	c9 01       	movw	r24, r18
    6d8c:	df 91       	pop	r29
    6d8e:	cf 91       	pop	r28
    6d90:	08 95       	ret

00006d92 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    6d92:	4f 92       	push	r4
    6d94:	5f 92       	push	r5
    6d96:	7f 92       	push	r7
    6d98:	8f 92       	push	r8
    6d9a:	9f 92       	push	r9
    6d9c:	af 92       	push	r10
    6d9e:	bf 92       	push	r11
    6da0:	cf 92       	push	r12
    6da2:	df 92       	push	r13
    6da4:	ef 92       	push	r14
    6da6:	ff 92       	push	r15
    6da8:	0f 93       	push	r16
    6daa:	1f 93       	push	r17
    6dac:	df 93       	push	r29
    6dae:	cf 93       	push	r28
    6db0:	cd b7       	in	r28, 0x3d	; 61
    6db2:	de b7       	in	r29, 0x3e	; 62
    6db4:	a1 97       	sbiw	r28, 0x21	; 33
    6db6:	0f b6       	in	r0, 0x3f	; 63
    6db8:	f8 94       	cli
    6dba:	de bf       	out	0x3e, r29	; 62
    6dbc:	0f be       	out	0x3f, r0	; 63
    6dbe:	cd bf       	out	0x3d, r28	; 61
    6dc0:	2c 01       	movw	r4, r24
    6dc2:	74 2e       	mov	r7, r20
    6dc4:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    6dc6:	22 30       	cpi	r18, 0x02	; 2
    6dc8:	08 f4       	brcc	.+2      	; 0x6dcc <_ZN5Print11printNumberEmh+0x3a>
    6dca:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    6dcc:	19 a2       	std	Y+33, r1	; 0x21
    6dce:	31 e2       	ldi	r19, 0x21	; 33
    6dd0:	c3 2e       	mov	r12, r19
    6dd2:	d1 2c       	mov	r13, r1
    6dd4:	cc 0e       	add	r12, r28
    6dd6:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    6dd8:	82 2e       	mov	r8, r18
    6dda:	99 24       	eor	r9, r9
    6ddc:	aa 24       	eor	r10, r10
    6dde:	bb 24       	eor	r11, r11
    6de0:	67 2d       	mov	r22, r7
    6de2:	75 2f       	mov	r23, r21
    6de4:	a5 01       	movw	r20, r10
    6de6:	94 01       	movw	r18, r8
    6de8:	0e 94 d0 3d 	call	0x7ba0	; 0x7ba0 <__udivmodsi4>
    6dec:	79 01       	movw	r14, r18
    6dee:	8a 01       	movw	r16, r20
    char c = m - base * n;
    6df0:	c8 01       	movw	r24, r16
    6df2:	b7 01       	movw	r22, r14
    6df4:	a5 01       	movw	r20, r10
    6df6:	94 01       	movw	r18, r8
    6df8:	0e 94 8a 3d 	call	0x7b14	; 0x7b14 <__mulsi3>
    6dfc:	47 2d       	mov	r20, r7
    6dfe:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    6e00:	08 94       	sec
    6e02:	c1 08       	sbc	r12, r1
    6e04:	d1 08       	sbc	r13, r1
    6e06:	4a 30       	cpi	r20, 0x0A	; 10
    6e08:	14 f4       	brge	.+4      	; 0x6e0e <_ZN5Print11printNumberEmh+0x7c>
    6e0a:	40 5d       	subi	r20, 0xD0	; 208
    6e0c:	01 c0       	rjmp	.+2      	; 0x6e10 <_ZN5Print11printNumberEmh+0x7e>
    6e0e:	49 5c       	subi	r20, 0xC9	; 201
    6e10:	f6 01       	movw	r30, r12
    6e12:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    6e14:	e1 14       	cp	r14, r1
    6e16:	f1 04       	cpc	r15, r1
    6e18:	01 05       	cpc	r16, r1
    6e1a:	11 05       	cpc	r17, r1
    6e1c:	21 f0       	breq	.+8      	; 0x6e26 <_ZN5Print11printNumberEmh+0x94>
    6e1e:	7e 2c       	mov	r7, r14
    6e20:	5f 2d       	mov	r21, r15
    6e22:	c8 01       	movw	r24, r16
    6e24:	dd cf       	rjmp	.-70     	; 0x6de0 <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    6e26:	c2 01       	movw	r24, r4
    6e28:	b6 01       	movw	r22, r12
    6e2a:	0e 94 ad 36 	call	0x6d5a	; 0x6d5a <_ZN5Print5writeEPKc>
}
    6e2e:	a1 96       	adiw	r28, 0x21	; 33
    6e30:	0f b6       	in	r0, 0x3f	; 63
    6e32:	f8 94       	cli
    6e34:	de bf       	out	0x3e, r29	; 62
    6e36:	0f be       	out	0x3f, r0	; 63
    6e38:	cd bf       	out	0x3d, r28	; 61
    6e3a:	cf 91       	pop	r28
    6e3c:	df 91       	pop	r29
    6e3e:	1f 91       	pop	r17
    6e40:	0f 91       	pop	r16
    6e42:	ff 90       	pop	r15
    6e44:	ef 90       	pop	r14
    6e46:	df 90       	pop	r13
    6e48:	cf 90       	pop	r12
    6e4a:	bf 90       	pop	r11
    6e4c:	af 90       	pop	r10
    6e4e:	9f 90       	pop	r9
    6e50:	8f 90       	pop	r8
    6e52:	7f 90       	pop	r7
    6e54:	5f 90       	pop	r5
    6e56:	4f 90       	pop	r4
    6e58:	08 95       	ret

00006e5a <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    6e5a:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    6e5c:	21 15       	cp	r18, r1
    6e5e:	31 05       	cpc	r19, r1
    6e60:	41 f4       	brne	.+16     	; 0x6e72 <_ZN5Print5printEmi+0x18>
    6e62:	ed 91       	ld	r30, X+
    6e64:	fc 91       	ld	r31, X
    6e66:	01 90       	ld	r0, Z+
    6e68:	f0 81       	ld	r31, Z
    6e6a:	e0 2d       	mov	r30, r0
    6e6c:	64 2f       	mov	r22, r20
    6e6e:	09 95       	icall
    6e70:	08 95       	ret
  else return printNumber(n, base);
    6e72:	0e 94 c9 36 	call	0x6d92	; 0x6d92 <_ZN5Print11printNumberEmh>
}
    6e76:	08 95       	ret

00006e78 <_ZN5Print5printEji>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
    6e78:	ef 92       	push	r14
    6e7a:	ff 92       	push	r15
    6e7c:	0f 93       	push	r16
    6e7e:	1f 93       	push	r17
    6e80:	9a 01       	movw	r18, r20
{
  return print((unsigned long) n, base);
    6e82:	7b 01       	movw	r14, r22
    6e84:	00 e0       	ldi	r16, 0x00	; 0
    6e86:	10 e0       	ldi	r17, 0x00	; 0
    6e88:	b8 01       	movw	r22, r16
    6e8a:	a7 01       	movw	r20, r14
    6e8c:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN5Print5printEmi>
}
    6e90:	1f 91       	pop	r17
    6e92:	0f 91       	pop	r16
    6e94:	ff 90       	pop	r15
    6e96:	ef 90       	pop	r14
    6e98:	08 95       	ret

00006e9a <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    6e9a:	ef 92       	push	r14
    6e9c:	ff 92       	push	r15
    6e9e:	0f 93       	push	r16
    6ea0:	1f 93       	push	r17
    6ea2:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    6ea4:	e6 2e       	mov	r14, r22
    6ea6:	ff 24       	eor	r15, r15
    6ea8:	00 e0       	ldi	r16, 0x00	; 0
    6eaa:	10 e0       	ldi	r17, 0x00	; 0
    6eac:	b8 01       	movw	r22, r16
    6eae:	a7 01       	movw	r20, r14
    6eb0:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <_ZN5Print5printEmi>
}
    6eb4:	1f 91       	pop	r17
    6eb6:	0f 91       	pop	r16
    6eb8:	ff 90       	pop	r15
    6eba:	ef 90       	pop	r14
    6ebc:	08 95       	ret

00006ebe <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    6ebe:	cf 92       	push	r12
    6ec0:	df 92       	push	r13
    6ec2:	ef 92       	push	r14
    6ec4:	ff 92       	push	r15
    6ec6:	0f 93       	push	r16
    6ec8:	1f 93       	push	r17
    6eca:	cf 93       	push	r28
    6ecc:	df 93       	push	r29
    6ece:	ec 01       	movw	r28, r24
    6ed0:	6a 01       	movw	r12, r20
    6ed2:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    6ed4:	21 15       	cp	r18, r1
    6ed6:	31 05       	cpc	r19, r1
    6ed8:	41 f4       	brne	.+16     	; 0x6eea <_ZN5Print5printEli+0x2c>
    return write(n);
    6eda:	e8 81       	ld	r30, Y
    6edc:	f9 81       	ldd	r31, Y+1	; 0x01
    6ede:	01 90       	ld	r0, Z+
    6ee0:	f0 81       	ld	r31, Z
    6ee2:	e0 2d       	mov	r30, r0
    6ee4:	64 2f       	mov	r22, r20
    6ee6:	09 95       	icall
    6ee8:	1f c0       	rjmp	.+62     	; 0x6f28 <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    6eea:	2a 30       	cpi	r18, 0x0A	; 10
    6eec:	31 05       	cpc	r19, r1
    6eee:	d1 f4       	brne	.+52     	; 0x6f24 <_ZN5Print5printEli+0x66>
    if (n < 0) {
    6ef0:	77 ff       	sbrs	r23, 7
    6ef2:	17 c0       	rjmp	.+46     	; 0x6f22 <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    6ef4:	e8 81       	ld	r30, Y
    6ef6:	f9 81       	ldd	r31, Y+1	; 0x01
    6ef8:	01 90       	ld	r0, Z+
    6efa:	f0 81       	ld	r31, Z
    6efc:	e0 2d       	mov	r30, r0
    6efe:	6d e2       	ldi	r22, 0x2D	; 45
    6f00:	09 95       	icall
    6f02:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    6f04:	44 27       	eor	r20, r20
    6f06:	55 27       	eor	r21, r21
    6f08:	ba 01       	movw	r22, r20
    6f0a:	4c 19       	sub	r20, r12
    6f0c:	5d 09       	sbc	r21, r13
    6f0e:	6e 09       	sbc	r22, r14
    6f10:	7f 09       	sbc	r23, r15
    6f12:	ce 01       	movw	r24, r28
    6f14:	2a e0       	ldi	r18, 0x0A	; 10
    6f16:	0e 94 c9 36 	call	0x6d92	; 0x6d92 <_ZN5Print11printNumberEmh>
    6f1a:	98 01       	movw	r18, r16
    6f1c:	28 0f       	add	r18, r24
    6f1e:	39 1f       	adc	r19, r25
    6f20:	04 c0       	rjmp	.+8      	; 0x6f2a <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    6f22:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    6f24:	0e 94 c9 36 	call	0x6d92	; 0x6d92 <_ZN5Print11printNumberEmh>
    6f28:	9c 01       	movw	r18, r24
  }
}
    6f2a:	c9 01       	movw	r24, r18
    6f2c:	df 91       	pop	r29
    6f2e:	cf 91       	pop	r28
    6f30:	1f 91       	pop	r17
    6f32:	0f 91       	pop	r16
    6f34:	ff 90       	pop	r15
    6f36:	ef 90       	pop	r14
    6f38:	df 90       	pop	r13
    6f3a:	cf 90       	pop	r12
    6f3c:	08 95       	ret

00006f3e <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    6f3e:	ef 92       	push	r14
    6f40:	ff 92       	push	r15
    6f42:	0f 93       	push	r16
    6f44:	1f 93       	push	r17
    6f46:	7b 01       	movw	r14, r22
    6f48:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    6f4a:	00 27       	eor	r16, r16
    6f4c:	f7 fc       	sbrc	r15, 7
    6f4e:	00 95       	com	r16
    6f50:	10 2f       	mov	r17, r16
    6f52:	b8 01       	movw	r22, r16
    6f54:	a7 01       	movw	r20, r14
    6f56:	0e 94 5f 37 	call	0x6ebe	; 0x6ebe <_ZN5Print5printEli>
}
    6f5a:	1f 91       	pop	r17
    6f5c:	0f 91       	pop	r16
    6f5e:	ff 90       	pop	r15
    6f60:	ef 90       	pop	r14
    6f62:	08 95       	ret

00006f64 <_ZN5Print5printERK6String>:
    n += write(c);
  }
  return n;
}

size_t Print::print(const String &s)
    6f64:	af 92       	push	r10
    6f66:	bf 92       	push	r11
    6f68:	cf 92       	push	r12
    6f6a:	df 92       	push	r13
    6f6c:	ef 92       	push	r14
    6f6e:	ff 92       	push	r15
    6f70:	0f 93       	push	r16
    6f72:	1f 93       	push	r17
    6f74:	cf 93       	push	r28
    6f76:	df 93       	push	r29
    6f78:	5c 01       	movw	r10, r24
    6f7a:	6b 01       	movw	r12, r22
    6f7c:	ee 24       	eor	r14, r14
    6f7e:	ff 24       	eor	r15, r15
    6f80:	c0 e0       	ldi	r28, 0x00	; 0
    6f82:	d0 e0       	ldi	r29, 0x00	; 0
    6f84:	10 c0       	rjmp	.+32     	; 0x6fa6 <_ZN5Print5printERK6String+0x42>
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    n += write(s[i]);
    6f86:	d5 01       	movw	r26, r10
    6f88:	ed 91       	ld	r30, X+
    6f8a:	fc 91       	ld	r31, X
    6f8c:	00 81       	ld	r16, Z
    6f8e:	11 81       	ldd	r17, Z+1	; 0x01
    6f90:	c6 01       	movw	r24, r12
    6f92:	be 01       	movw	r22, r28
    6f94:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <_ZNK6StringixEj>
    6f98:	68 2f       	mov	r22, r24
    6f9a:	c5 01       	movw	r24, r10
    6f9c:	f8 01       	movw	r30, r16
    6f9e:	09 95       	icall
    6fa0:	e8 0e       	add	r14, r24
    6fa2:	f9 1e       	adc	r15, r25
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    6fa4:	21 96       	adiw	r28, 0x01	; 1
    6fa6:	f6 01       	movw	r30, r12
    6fa8:	84 81       	ldd	r24, Z+4	; 0x04
    6faa:	95 81       	ldd	r25, Z+5	; 0x05
    6fac:	c8 17       	cp	r28, r24
    6fae:	d9 07       	cpc	r29, r25
    6fb0:	50 f3       	brcs	.-44     	; 0x6f86 <_ZN5Print5printERK6String+0x22>
    n += write(s[i]);
  }
  return n;
}
    6fb2:	c7 01       	movw	r24, r14
    6fb4:	df 91       	pop	r29
    6fb6:	cf 91       	pop	r28
    6fb8:	1f 91       	pop	r17
    6fba:	0f 91       	pop	r16
    6fbc:	ff 90       	pop	r15
    6fbe:	ef 90       	pop	r14
    6fc0:	df 90       	pop	r13
    6fc2:	cf 90       	pop	r12
    6fc4:	bf 90       	pop	r11
    6fc6:	af 90       	pop	r10
    6fc8:	08 95       	ret

00006fca <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
    6fca:	fc 01       	movw	r30, r24
    6fcc:	9b 01       	movw	r18, r22
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    6fce:	84 81       	ldd	r24, Z+4	; 0x04
    6fd0:	95 81       	ldd	r25, Z+5	; 0x05
    6fd2:	68 17       	cp	r22, r24
    6fd4:	79 07       	cpc	r23, r25
    6fd6:	28 f4       	brcc	.+10     	; 0x6fe2 <_ZN6StringixEj+0x18>
    6fd8:	60 81       	ld	r22, Z
    6fda:	71 81       	ldd	r23, Z+1	; 0x01
    6fdc:	61 15       	cp	r22, r1
    6fde:	71 05       	cpc	r23, r1
    6fe0:	29 f4       	brne	.+10     	; 0x6fec <_ZN6StringixEj+0x22>
		dummy_writable_char = 0;
    6fe2:	10 92 da 03 	sts	0x03DA, r1
    6fe6:	6a ed       	ldi	r22, 0xDA	; 218
    6fe8:	73 e0       	ldi	r23, 0x03	; 3
    6fea:	02 c0       	rjmp	.+4      	; 0x6ff0 <_ZN6StringixEj+0x26>
		return dummy_writable_char;
	}
	return buffer[index];
    6fec:	62 0f       	add	r22, r18
    6fee:	73 1f       	adc	r23, r19
}
    6ff0:	cb 01       	movw	r24, r22
    6ff2:	08 95       	ret

00006ff4 <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
    6ff4:	fc 01       	movw	r30, r24
{
	if (index >= len || !buffer) return 0;
    6ff6:	84 81       	ldd	r24, Z+4	; 0x04
    6ff8:	95 81       	ldd	r25, Z+5	; 0x05
    6ffa:	68 17       	cp	r22, r24
    6ffc:	79 07       	cpc	r23, r25
    6ffe:	48 f4       	brcc	.+18     	; 0x7012 <_ZNK6StringixEj+0x1e>
    7000:	01 90       	ld	r0, Z+
    7002:	f0 81       	ld	r31, Z
    7004:	e0 2d       	mov	r30, r0
    7006:	30 97       	sbiw	r30, 0x00	; 0
    7008:	21 f0       	breq	.+8      	; 0x7012 <_ZNK6StringixEj+0x1e>
	return buffer[index];
    700a:	e6 0f       	add	r30, r22
    700c:	f7 1f       	adc	r31, r23
    700e:	80 81       	ld	r24, Z
    7010:	08 95       	ret
    7012:	80 e0       	ldi	r24, 0x00	; 0
}
    7014:	08 95       	ret

00007016 <_ZN6String11toUpperCaseEv>:
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}

void String::toUpperCase(void)
    7016:	cf 93       	push	r28
    7018:	df 93       	push	r29
    701a:	fc 01       	movw	r30, r24
{
	if (!buffer) return;
    701c:	c0 81       	ld	r28, Z
    701e:	d1 81       	ldd	r29, Z+1	; 0x01
    7020:	20 97       	sbiw	r28, 0x00	; 0
    7022:	39 f4       	brne	.+14     	; 0x7032 <_ZN6String11toUpperCaseEv+0x1c>
    7024:	09 c0       	rjmp	.+18     	; 0x7038 <_ZN6String11toUpperCaseEv+0x22>
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
    7026:	99 27       	eor	r25, r25
    7028:	87 fd       	sbrc	r24, 7
    702a:	90 95       	com	r25
    702c:	0e 94 f8 3d 	call	0x7bf0	; 0x7bf0 <toupper>
    7030:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    7032:	88 81       	ld	r24, Y
    7034:	88 23       	and	r24, r24
    7036:	b9 f7       	brne	.-18     	; 0x7026 <_ZN6String11toUpperCaseEv+0x10>
		*p = toupper(*p);
	}
}
    7038:	df 91       	pop	r29
    703a:	cf 91       	pop	r28
    703c:	08 95       	ret

0000703e <_ZNK6String7indexOfEcj>:
int String::indexOf(char c) const
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
    703e:	cf 93       	push	r28
    7040:	df 93       	push	r29
    7042:	fc 01       	movw	r30, r24
{
	if (fromIndex >= len) return -1;
    7044:	84 81       	ldd	r24, Z+4	; 0x04
    7046:	95 81       	ldd	r25, Z+5	; 0x05
    7048:	48 17       	cp	r20, r24
    704a:	59 07       	cpc	r21, r25
    704c:	68 f4       	brcc	.+26     	; 0x7068 <_ZNK6String7indexOfEcj+0x2a>
	const char* temp = strchr(buffer + fromIndex, ch);
    704e:	c0 81       	ld	r28, Z
    7050:	d1 81       	ldd	r29, Z+1	; 0x01
    7052:	77 27       	eor	r23, r23
    7054:	67 fd       	sbrc	r22, 7
    7056:	70 95       	com	r23
    7058:	ce 01       	movw	r24, r28
    705a:	84 0f       	add	r24, r20
    705c:	95 1f       	adc	r25, r21
    705e:	0e 94 b4 04 	call	0x968	; 0x968 <strchr>
    7062:	9c 01       	movw	r18, r24
	if (temp == NULL) return -1;
    7064:	00 97       	sbiw	r24, 0x00	; 0
    7066:	19 f4       	brne	.+6      	; 0x706e <_ZNK6String7indexOfEcj+0x30>
    7068:	2f ef       	ldi	r18, 0xFF	; 255
    706a:	3f ef       	ldi	r19, 0xFF	; 255
    706c:	02 c0       	rjmp	.+4      	; 0x7072 <_ZNK6String7indexOfEcj+0x34>
	return temp - buffer;
    706e:	2c 1b       	sub	r18, r28
    7070:	3d 0b       	sbc	r19, r29
}
    7072:	c9 01       	movw	r24, r18
    7074:	df 91       	pop	r29
    7076:	cf 91       	pop	r28
    7078:	08 95       	ret

0000707a <_ZN6String12changeBufferEj>:
		return 1;
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
    707a:	0f 93       	push	r16
    707c:	1f 93       	push	r17
    707e:	cf 93       	push	r28
    7080:	df 93       	push	r29
    7082:	ec 01       	movw	r28, r24
    7084:	8b 01       	movw	r16, r22
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    7086:	6f 5f       	subi	r22, 0xFF	; 255
    7088:	7f 4f       	sbci	r23, 0xFF	; 255
    708a:	88 81       	ld	r24, Y
    708c:	99 81       	ldd	r25, Y+1	; 0x01
    708e:	0e 94 8e 3a 	call	0x751c	; 0x751c <realloc>
	if (newbuffer) {
    7092:	00 97       	sbiw	r24, 0x00	; 0
    7094:	11 f4       	brne	.+4      	; 0x709a <_ZN6String12changeBufferEj+0x20>
    7096:	80 e0       	ldi	r24, 0x00	; 0
    7098:	05 c0       	rjmp	.+10     	; 0x70a4 <_ZN6String12changeBufferEj+0x2a>
		buffer = newbuffer;
    709a:	99 83       	std	Y+1, r25	; 0x01
    709c:	88 83       	st	Y, r24
		capacity = maxStrLen;
    709e:	1b 83       	std	Y+3, r17	; 0x03
    70a0:	0a 83       	std	Y+2, r16	; 0x02
    70a2:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    70a4:	df 91       	pop	r29
    70a6:	cf 91       	pop	r28
    70a8:	1f 91       	pop	r17
    70aa:	0f 91       	pop	r16
    70ac:	08 95       	ret

000070ae <_ZN6String7reserveEj>:
	if (buffer) free(buffer);
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
    70ae:	cf 93       	push	r28
    70b0:	df 93       	push	r29
    70b2:	ec 01       	movw	r28, r24
{
	if (buffer && capacity >= size) return 1;
    70b4:	88 81       	ld	r24, Y
    70b6:	99 81       	ldd	r25, Y+1	; 0x01
    70b8:	89 2b       	or	r24, r25
    70ba:	29 f0       	breq	.+10     	; 0x70c6 <_ZN6String7reserveEj+0x18>
    70bc:	8a 81       	ldd	r24, Y+2	; 0x02
    70be:	9b 81       	ldd	r25, Y+3	; 0x03
    70c0:	86 17       	cp	r24, r22
    70c2:	97 07       	cpc	r25, r23
    70c4:	60 f4       	brcc	.+24     	; 0x70de <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    70c6:	ce 01       	movw	r24, r28
    70c8:	0e 94 3d 38 	call	0x707a	; 0x707a <_ZN6String12changeBufferEj>
    70cc:	88 23       	and	r24, r24
    70ce:	41 f0       	breq	.+16     	; 0x70e0 <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    70d0:	8c 81       	ldd	r24, Y+4	; 0x04
    70d2:	9d 81       	ldd	r25, Y+5	; 0x05
    70d4:	89 2b       	or	r24, r25
    70d6:	19 f4       	brne	.+6      	; 0x70de <_ZN6String7reserveEj+0x30>
    70d8:	e8 81       	ld	r30, Y
    70da:	f9 81       	ldd	r31, Y+1	; 0x01
    70dc:	10 82       	st	Z, r1
    70de:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    70e0:	df 91       	pop	r29
    70e2:	cf 91       	pop	r28
    70e4:	08 95       	ret

000070e6 <_ZN6String6concatEPKcj>:
unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
    70e6:	ef 92       	push	r14
    70e8:	ff 92       	push	r15
    70ea:	0f 93       	push	r16
    70ec:	1f 93       	push	r17
    70ee:	cf 93       	push	r28
    70f0:	df 93       	push	r29
    70f2:	ec 01       	movw	r28, r24
    70f4:	7b 01       	movw	r14, r22
{
	unsigned int newlen = len + length;
    70f6:	6c 81       	ldd	r22, Y+4	; 0x04
    70f8:	7d 81       	ldd	r23, Y+5	; 0x05
	if (!cstr) return 0;
    70fa:	e1 14       	cp	r14, r1
    70fc:	f1 04       	cpc	r15, r1
    70fe:	c1 f0       	breq	.+48     	; 0x7130 <_ZN6String6concatEPKcj+0x4a>
	if (length == 0) return 1;
    7100:	41 15       	cp	r20, r1
    7102:	51 05       	cpc	r21, r1
    7104:	99 f0       	breq	.+38     	; 0x712c <_ZN6String6concatEPKcj+0x46>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    7106:	8a 01       	movw	r16, r20
    7108:	06 0f       	add	r16, r22
    710a:	17 1f       	adc	r17, r23
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
    710c:	b8 01       	movw	r22, r16
    710e:	0e 94 57 38 	call	0x70ae	; 0x70ae <_ZN6String7reserveEj>
    7112:	88 23       	and	r24, r24
    7114:	69 f0       	breq	.+26     	; 0x7130 <_ZN6String6concatEPKcj+0x4a>
	strcpy(buffer + len, cstr);
    7116:	88 81       	ld	r24, Y
    7118:	99 81       	ldd	r25, Y+1	; 0x01
    711a:	2c 81       	ldd	r18, Y+4	; 0x04
    711c:	3d 81       	ldd	r19, Y+5	; 0x05
    711e:	82 0f       	add	r24, r18
    7120:	93 1f       	adc	r25, r19
    7122:	b7 01       	movw	r22, r14
    7124:	0e 94 bf 04 	call	0x97e	; 0x97e <strcpy>
	len = newlen;
    7128:	1d 83       	std	Y+5, r17	; 0x05
    712a:	0c 83       	std	Y+4, r16	; 0x04
    712c:	81 e0       	ldi	r24, 0x01	; 1
    712e:	01 c0       	rjmp	.+2      	; 0x7132 <_ZN6String6concatEPKcj+0x4c>
	return 1;
    7130:	80 e0       	ldi	r24, 0x00	; 0
}
    7132:	df 91       	pop	r29
    7134:	cf 91       	pop	r28
    7136:	1f 91       	pop	r17
    7138:	0f 91       	pop	r16
    713a:	ff 90       	pop	r15
    713c:	ef 90       	pop	r14
    713e:	08 95       	ret

00007140 <_ZN6String6concatEj>:
	char buf[7];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(unsigned int num)
    7140:	ef 92       	push	r14
    7142:	ff 92       	push	r15
    7144:	0f 93       	push	r16
    7146:	1f 93       	push	r17
    7148:	df 93       	push	r29
    714a:	cf 93       	push	r28
    714c:	00 d0       	rcall	.+0      	; 0x714e <_ZN6String6concatEj+0xe>
    714e:	00 d0       	rcall	.+0      	; 0x7150 <_ZN6String6concatEj+0x10>
    7150:	00 d0       	rcall	.+0      	; 0x7152 <_ZN6String6concatEj+0x12>
    7152:	cd b7       	in	r28, 0x3d	; 61
    7154:	de b7       	in	r29, 0x3e	; 62
    7156:	7c 01       	movw	r14, r24
    7158:	cb 01       	movw	r24, r22
{
	char buf[6];
	utoa(num, buf, 10);
    715a:	8e 01       	movw	r16, r28
    715c:	0f 5f       	subi	r16, 0xFF	; 255
    715e:	1f 4f       	sbci	r17, 0xFF	; 255
    7160:	b8 01       	movw	r22, r16
    7162:	4a e0       	ldi	r20, 0x0A	; 10
    7164:	50 e0       	ldi	r21, 0x00	; 0
    7166:	0e 94 e7 04 	call	0x9ce	; 0x9ce <utoa>
	return concat(buf, strlen(buf));
    716a:	f8 01       	movw	r30, r16
    716c:	01 90       	ld	r0, Z+
    716e:	00 20       	and	r0, r0
    7170:	e9 f7       	brne	.-6      	; 0x716c <_ZN6String6concatEj+0x2c>
    7172:	31 97       	sbiw	r30, 0x01	; 1
    7174:	e0 1b       	sub	r30, r16
    7176:	f1 0b       	sbc	r31, r17
    7178:	c7 01       	movw	r24, r14
    717a:	b8 01       	movw	r22, r16
    717c:	af 01       	movw	r20, r30
    717e:	0e 94 73 38 	call	0x70e6	; 0x70e6 <_ZN6String6concatEPKcj>
}
    7182:	26 96       	adiw	r28, 0x06	; 6
    7184:	0f b6       	in	r0, 0x3f	; 63
    7186:	f8 94       	cli
    7188:	de bf       	out	0x3e, r29	; 62
    718a:	0f be       	out	0x3f, r0	; 63
    718c:	cd bf       	out	0x3d, r28	; 61
    718e:	cf 91       	pop	r28
    7190:	df 91       	pop	r29
    7192:	1f 91       	pop	r17
    7194:	0f 91       	pop	r16
    7196:	ff 90       	pop	r15
    7198:	ef 90       	pop	r14
    719a:	08 95       	ret

0000719c <_ZN6String6concatEi>:
	char buf[4];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
    719c:	ef 92       	push	r14
    719e:	ff 92       	push	r15
    71a0:	0f 93       	push	r16
    71a2:	1f 93       	push	r17
    71a4:	df 93       	push	r29
    71a6:	cf 93       	push	r28
    71a8:	cd b7       	in	r28, 0x3d	; 61
    71aa:	de b7       	in	r29, 0x3e	; 62
    71ac:	27 97       	sbiw	r28, 0x07	; 7
    71ae:	0f b6       	in	r0, 0x3f	; 63
    71b0:	f8 94       	cli
    71b2:	de bf       	out	0x3e, r29	; 62
    71b4:	0f be       	out	0x3f, r0	; 63
    71b6:	cd bf       	out	0x3d, r28	; 61
    71b8:	7c 01       	movw	r14, r24
    71ba:	cb 01       	movw	r24, r22
{
	char buf[7];
	itoa(num, buf, 10);
    71bc:	8e 01       	movw	r16, r28
    71be:	0f 5f       	subi	r16, 0xFF	; 255
    71c0:	1f 4f       	sbci	r17, 0xFF	; 255
    71c2:	b8 01       	movw	r22, r16
    71c4:	4a e0       	ldi	r20, 0x0A	; 10
    71c6:	50 e0       	ldi	r21, 0x00	; 0
    71c8:	0e 94 c6 04 	call	0x98c	; 0x98c <itoa>
	return concat(buf, strlen(buf));
    71cc:	f8 01       	movw	r30, r16
    71ce:	01 90       	ld	r0, Z+
    71d0:	00 20       	and	r0, r0
    71d2:	e9 f7       	brne	.-6      	; 0x71ce <_ZN6String6concatEi+0x32>
    71d4:	31 97       	sbiw	r30, 0x01	; 1
    71d6:	e0 1b       	sub	r30, r16
    71d8:	f1 0b       	sbc	r31, r17
    71da:	c7 01       	movw	r24, r14
    71dc:	b8 01       	movw	r22, r16
    71de:	af 01       	movw	r20, r30
    71e0:	0e 94 73 38 	call	0x70e6	; 0x70e6 <_ZN6String6concatEPKcj>
}
    71e4:	27 96       	adiw	r28, 0x07	; 7
    71e6:	0f b6       	in	r0, 0x3f	; 63
    71e8:	f8 94       	cli
    71ea:	de bf       	out	0x3e, r29	; 62
    71ec:	0f be       	out	0x3f, r0	; 63
    71ee:	cd bf       	out	0x3d, r28	; 61
    71f0:	cf 91       	pop	r28
    71f2:	df 91       	pop	r29
    71f4:	1f 91       	pop	r17
    71f6:	0f 91       	pop	r16
    71f8:	ff 90       	pop	r15
    71fa:	ef 90       	pop	r14
    71fc:	08 95       	ret

000071fe <_ZN6String6concatEh>:
	buf[0] = c;
	buf[1] = 0;
	return concat(buf, 1);
}

unsigned char String::concat(unsigned char num)
    71fe:	ef 92       	push	r14
    7200:	ff 92       	push	r15
    7202:	0f 93       	push	r16
    7204:	1f 93       	push	r17
    7206:	df 93       	push	r29
    7208:	cf 93       	push	r28
    720a:	00 d0       	rcall	.+0      	; 0x720c <_ZN6String6concatEh+0xe>
    720c:	00 d0       	rcall	.+0      	; 0x720e <_ZN6String6concatEh+0x10>
    720e:	cd b7       	in	r28, 0x3d	; 61
    7210:	de b7       	in	r29, 0x3e	; 62
    7212:	7c 01       	movw	r14, r24
    7214:	86 2f       	mov	r24, r22
{
	char buf[4];
	itoa(num, buf, 10);
    7216:	90 e0       	ldi	r25, 0x00	; 0
    7218:	8e 01       	movw	r16, r28
    721a:	0f 5f       	subi	r16, 0xFF	; 255
    721c:	1f 4f       	sbci	r17, 0xFF	; 255
    721e:	b8 01       	movw	r22, r16
    7220:	4a e0       	ldi	r20, 0x0A	; 10
    7222:	50 e0       	ldi	r21, 0x00	; 0
    7224:	0e 94 c6 04 	call	0x98c	; 0x98c <itoa>
	return concat(buf, strlen(buf));
    7228:	f8 01       	movw	r30, r16
    722a:	01 90       	ld	r0, Z+
    722c:	00 20       	and	r0, r0
    722e:	e9 f7       	brne	.-6      	; 0x722a <_ZN6String6concatEh+0x2c>
    7230:	31 97       	sbiw	r30, 0x01	; 1
    7232:	e0 1b       	sub	r30, r16
    7234:	f1 0b       	sbc	r31, r17
    7236:	c7 01       	movw	r24, r14
    7238:	b8 01       	movw	r22, r16
    723a:	af 01       	movw	r20, r30
    723c:	0e 94 73 38 	call	0x70e6	; 0x70e6 <_ZN6String6concatEPKcj>
}
    7240:	0f 90       	pop	r0
    7242:	0f 90       	pop	r0
    7244:	0f 90       	pop	r0
    7246:	0f 90       	pop	r0
    7248:	cf 91       	pop	r28
    724a:	df 91       	pop	r29
    724c:	1f 91       	pop	r17
    724e:	0f 91       	pop	r16
    7250:	ff 90       	pop	r15
    7252:	ef 90       	pop	r14
    7254:	08 95       	ret

00007256 <_ZN6String6concatEc>:
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}

unsigned char String::concat(char c)
    7256:	df 93       	push	r29
    7258:	cf 93       	push	r28
    725a:	00 d0       	rcall	.+0      	; 0x725c <_ZN6String6concatEc+0x6>
    725c:	cd b7       	in	r28, 0x3d	; 61
    725e:	de b7       	in	r29, 0x3e	; 62
{
	char buf[2];
	buf[0] = c;
    7260:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    7262:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
    7264:	be 01       	movw	r22, r28
    7266:	6f 5f       	subi	r22, 0xFF	; 255
    7268:	7f 4f       	sbci	r23, 0xFF	; 255
    726a:	41 e0       	ldi	r20, 0x01	; 1
    726c:	50 e0       	ldi	r21, 0x00	; 0
    726e:	0e 94 73 38 	call	0x70e6	; 0x70e6 <_ZN6String6concatEPKcj>
}
    7272:	0f 90       	pop	r0
    7274:	0f 90       	pop	r0
    7276:	cf 91       	pop	r28
    7278:	df 91       	pop	r29
    727a:	08 95       	ret

0000727c <_ZN6String6concatERKS_>:

/*********************************************/
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
    727c:	fb 01       	movw	r30, r22
{
	return concat(s.buffer, s.len);
    727e:	60 81       	ld	r22, Z
    7280:	71 81       	ldd	r23, Z+1	; 0x01
    7282:	44 81       	ldd	r20, Z+4	; 0x04
    7284:	55 81       	ldd	r21, Z+5	; 0x05
    7286:	0e 94 73 38 	call	0x70e6	; 0x70e6 <_ZN6String6concatEPKcj>
}
    728a:	08 95       	ret

0000728c <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
	flags = 0;
}

void String::invalidate(void)
    728c:	cf 93       	push	r28
    728e:	df 93       	push	r29
    7290:	ec 01       	movw	r28, r24
{
	if (buffer) free(buffer);
    7292:	88 81       	ld	r24, Y
    7294:	99 81       	ldd	r25, Y+1	; 0x01
    7296:	00 97       	sbiw	r24, 0x00	; 0
    7298:	11 f0       	breq	.+4      	; 0x729e <_ZN6String10invalidateEv+0x12>
    729a:	0e 94 2b 31 	call	0x6256	; 0x6256 <free>
	buffer = NULL;
    729e:	19 82       	std	Y+1, r1	; 0x01
    72a0:	18 82       	st	Y, r1
	capacity = len = 0;
    72a2:	1d 82       	std	Y+5, r1	; 0x05
    72a4:	1c 82       	std	Y+4, r1	; 0x04
    72a6:	1b 82       	std	Y+3, r1	; 0x03
    72a8:	1a 82       	std	Y+2, r1	; 0x02
}
    72aa:	df 91       	pop	r29
    72ac:	cf 91       	pop	r28
    72ae:	08 95       	ret

000072b0 <_ZplRK15StringSumHelperRK6String>:

/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
    72b0:	0f 93       	push	r16
    72b2:	1f 93       	push	r17
    72b4:	18 2f       	mov	r17, r24
    72b6:	09 2f       	mov	r16, r25
    72b8:	fb 01       	movw	r30, r22
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    72ba:	60 81       	ld	r22, Z
    72bc:	71 81       	ldd	r23, Z+1	; 0x01
    72be:	44 81       	ldd	r20, Z+4	; 0x04
    72c0:	55 81       	ldd	r21, Z+5	; 0x05
    72c2:	0e 94 73 38 	call	0x70e6	; 0x70e6 <_ZN6String6concatEPKcj>
    72c6:	88 23       	and	r24, r24
    72c8:	21 f4       	brne	.+8      	; 0x72d2 <_ZplRK15StringSumHelperRK6String+0x22>
    72ca:	81 2f       	mov	r24, r17
    72cc:	90 2f       	mov	r25, r16
    72ce:	0e 94 46 39 	call	0x728c	; 0x728c <_ZN6String10invalidateEv>
	return a;
}
    72d2:	81 2f       	mov	r24, r17
    72d4:	90 2f       	mov	r25, r16
    72d6:	1f 91       	pop	r17
    72d8:	0f 91       	pop	r16
    72da:	08 95       	ret

000072dc <_ZN6String4copyEPKcj>:

/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
    72dc:	ef 92       	push	r14
    72de:	ff 92       	push	r15
    72e0:	0f 93       	push	r16
    72e2:	1f 93       	push	r17
    72e4:	cf 93       	push	r28
    72e6:	df 93       	push	r29
    72e8:	ec 01       	movw	r28, r24
    72ea:	7b 01       	movw	r14, r22
    72ec:	8a 01       	movw	r16, r20
{
	if (!reserve(length)) {
    72ee:	ba 01       	movw	r22, r20
    72f0:	0e 94 57 38 	call	0x70ae	; 0x70ae <_ZN6String7reserveEj>
    72f4:	88 23       	and	r24, r24
    72f6:	21 f4       	brne	.+8      	; 0x7300 <_ZN6String4copyEPKcj+0x24>
		invalidate();
    72f8:	ce 01       	movw	r24, r28
    72fa:	0e 94 46 39 	call	0x728c	; 0x728c <_ZN6String10invalidateEv>
    72fe:	07 c0       	rjmp	.+14     	; 0x730e <_ZN6String4copyEPKcj+0x32>
		return *this;
	}
	len = length;
    7300:	1d 83       	std	Y+5, r17	; 0x05
    7302:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    7304:	88 81       	ld	r24, Y
    7306:	99 81       	ldd	r25, Y+1	; 0x01
    7308:	b7 01       	movw	r22, r14
    730a:	0e 94 bf 04 	call	0x97e	; 0x97e <strcpy>
	return *this;
}
    730e:	ce 01       	movw	r24, r28
    7310:	df 91       	pop	r29
    7312:	cf 91       	pop	r28
    7314:	1f 91       	pop	r17
    7316:	0f 91       	pop	r16
    7318:	ff 90       	pop	r15
    731a:	ef 90       	pop	r14
    731c:	08 95       	ret

0000731e <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    731e:	cf 93       	push	r28
    7320:	df 93       	push	r29
    7322:	ec 01       	movw	r28, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    7324:	19 82       	std	Y+1, r1	; 0x01
    7326:	18 82       	st	Y, r1
	capacity = 0;
    7328:	1b 82       	std	Y+3, r1	; 0x03
    732a:	1a 82       	std	Y+2, r1	; 0x02
	len = 0;
    732c:	1d 82       	std	Y+5, r1	; 0x05
    732e:	1c 82       	std	Y+4, r1	; 0x04
	flags = 0;
    7330:	1e 82       	std	Y+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    7332:	61 15       	cp	r22, r1
    7334:	71 05       	cpc	r23, r1
    7336:	51 f0       	breq	.+20     	; 0x734c <_ZN6StringC1EPKc+0x2e>
    7338:	db 01       	movw	r26, r22
    733a:	0d 90       	ld	r0, X+
    733c:	00 20       	and	r0, r0
    733e:	e9 f7       	brne	.-6      	; 0x733a <_ZN6StringC1EPKc+0x1c>
    7340:	11 97       	sbiw	r26, 0x01	; 1
    7342:	a6 1b       	sub	r26, r22
    7344:	b7 0b       	sbc	r27, r23
    7346:	ad 01       	movw	r20, r26
    7348:	0e 94 6e 39 	call	0x72dc	; 0x72dc <_ZN6String4copyEPKcj>
}
    734c:	df 91       	pop	r29
    734e:	cf 91       	pop	r28
    7350:	08 95       	ret

00007352 <_ZN6StringaSEPKc>:
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    7352:	0f 93       	push	r16
    7354:	1f 93       	push	r17
    7356:	18 2f       	mov	r17, r24
    7358:	09 2f       	mov	r16, r25
{
	if (cstr) copy(cstr, strlen(cstr));
    735a:	61 15       	cp	r22, r1
    735c:	71 05       	cpc	r23, r1
    735e:	59 f0       	breq	.+22     	; 0x7376 <_ZN6StringaSEPKc+0x24>
    7360:	db 01       	movw	r26, r22
    7362:	0d 90       	ld	r0, X+
    7364:	00 20       	and	r0, r0
    7366:	e9 f7       	brne	.-6      	; 0x7362 <_ZN6StringaSEPKc+0x10>
    7368:	11 97       	sbiw	r26, 0x01	; 1
    736a:	a6 1b       	sub	r26, r22
    736c:	b7 0b       	sbc	r27, r23
    736e:	ad 01       	movw	r20, r26
    7370:	0e 94 6e 39 	call	0x72dc	; 0x72dc <_ZN6String4copyEPKcj>
    7374:	02 c0       	rjmp	.+4      	; 0x737a <_ZN6StringaSEPKc+0x28>
	else invalidate();
    7376:	0e 94 46 39 	call	0x728c	; 0x728c <_ZN6String10invalidateEv>
	
	return *this;
}
    737a:	81 2f       	mov	r24, r17
    737c:	90 2f       	mov	r25, r16
    737e:	1f 91       	pop	r17
    7380:	0f 91       	pop	r16
    7382:	08 95       	ret

00007384 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    7384:	ef 92       	push	r14
    7386:	ff 92       	push	r15
    7388:	0f 93       	push	r16
    738a:	1f 93       	push	r17
    738c:	df 93       	push	r29
    738e:	cf 93       	push	r28
    7390:	cd b7       	in	r28, 0x3d	; 61
    7392:	de b7       	in	r29, 0x3e	; 62
    7394:	29 97       	sbiw	r28, 0x09	; 9
    7396:	0f b6       	in	r0, 0x3f	; 63
    7398:	f8 94       	cli
    739a:	de bf       	out	0x3e, r29	; 62
    739c:	0f be       	out	0x3f, r0	; 63
    739e:	cd bf       	out	0x3d, r28	; 61
    73a0:	8c 01       	movw	r16, r24
    73a2:	86 2f       	mov	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    73a4:	f8 01       	movw	r30, r16
    73a6:	11 82       	std	Z+1, r1	; 0x01
    73a8:	10 82       	st	Z, r1
	capacity = 0;
    73aa:	13 82       	std	Z+3, r1	; 0x03
    73ac:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    73ae:	15 82       	std	Z+5, r1	; 0x05
    73b0:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    73b2:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned char value, unsigned char base)
{
	init();
	char buf[9];
	utoa(value, buf, base);
    73b4:	90 e0       	ldi	r25, 0x00	; 0
    73b6:	7e 01       	movw	r14, r28
    73b8:	08 94       	sec
    73ba:	e1 1c       	adc	r14, r1
    73bc:	f1 1c       	adc	r15, r1
    73be:	b7 01       	movw	r22, r14
    73c0:	50 e0       	ldi	r21, 0x00	; 0
    73c2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <utoa>
	*this = buf;
    73c6:	c8 01       	movw	r24, r16
    73c8:	b7 01       	movw	r22, r14
    73ca:	0e 94 a9 39 	call	0x7352	; 0x7352 <_ZN6StringaSEPKc>
}
    73ce:	29 96       	adiw	r28, 0x09	; 9
    73d0:	0f b6       	in	r0, 0x3f	; 63
    73d2:	f8 94       	cli
    73d4:	de bf       	out	0x3e, r29	; 62
    73d6:	0f be       	out	0x3f, r0	; 63
    73d8:	cd bf       	out	0x3d, r28	; 61
    73da:	cf 91       	pop	r28
    73dc:	df 91       	pop	r29
    73de:	1f 91       	pop	r17
    73e0:	0f 91       	pop	r16
    73e2:	ff 90       	pop	r15
    73e4:	ef 90       	pop	r14
    73e6:	08 95       	ret

000073e8 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
    73e8:	df 93       	push	r29
    73ea:	cf 93       	push	r28
    73ec:	00 d0       	rcall	.+0      	; 0x73ee <_ZN6StringC1Ec+0x6>
    73ee:	cd b7       	in	r28, 0x3d	; 61
    73f0:	de b7       	in	r29, 0x3e	; 62
    73f2:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    73f4:	11 82       	std	Z+1, r1	; 0x01
    73f6:	10 82       	st	Z, r1
	capacity = 0;
    73f8:	13 82       	std	Z+3, r1	; 0x03
    73fa:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    73fc:	15 82       	std	Z+5, r1	; 0x05
    73fe:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    7400:	16 82       	std	Z+6, r1	; 0x06

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
    7402:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    7404:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
    7406:	be 01       	movw	r22, r28
    7408:	6f 5f       	subi	r22, 0xFF	; 255
    740a:	7f 4f       	sbci	r23, 0xFF	; 255
    740c:	0e 94 a9 39 	call	0x7352	; 0x7352 <_ZN6StringaSEPKc>
}
    7410:	0f 90       	pop	r0
    7412:	0f 90       	pop	r0
    7414:	cf 91       	pop	r28
    7416:	df 91       	pop	r29
    7418:	08 95       	ret

0000741a <_ZNK6String9substringEjj>:
String String::substring( unsigned int left ) const
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
    741a:	bf 92       	push	r11
    741c:	cf 92       	push	r12
    741e:	df 92       	push	r13
    7420:	ef 92       	push	r14
    7422:	ff 92       	push	r15
    7424:	0f 93       	push	r16
    7426:	1f 93       	push	r17
    7428:	cf 93       	push	r28
    742a:	df 93       	push	r29
    742c:	08 2f       	mov	r16, r24
    742e:	b9 2e       	mov	r11, r25
    7430:	6b 01       	movw	r12, r22
    7432:	7a 01       	movw	r14, r20
    7434:	e9 01       	movw	r28, r18
{
	if (left > right) {
    7436:	24 17       	cp	r18, r20
    7438:	35 07       	cpc	r19, r21
    743a:	10 f4       	brcc	.+4      	; 0x7440 <_ZNK6String9substringEjj+0x26>
    743c:	ea 01       	movw	r28, r20
    743e:	79 01       	movw	r14, r18
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    7440:	80 2f       	mov	r24, r16
    7442:	9b 2d       	mov	r25, r11
    7444:	62 e0       	ldi	r22, 0x02	; 2
    7446:	71 e0       	ldi	r23, 0x01	; 1
    7448:	0e 94 8f 39 	call	0x731e	; 0x731e <_ZN6StringC1EPKc>
	if (left > len) return out;
    744c:	d6 01       	movw	r26, r12
    744e:	14 96       	adiw	r26, 0x04	; 4
    7450:	8d 91       	ld	r24, X+
    7452:	9c 91       	ld	r25, X
    7454:	15 97       	sbiw	r26, 0x05	; 5
    7456:	8e 15       	cp	r24, r14
    7458:	9f 05       	cpc	r25, r15
    745a:	d0 f0       	brcs	.+52     	; 0x7490 <_ZNK6String9substringEjj+0x76>
    745c:	8c 17       	cp	r24, r28
    745e:	9d 07       	cpc	r25, r29
    7460:	08 f4       	brcc	.+2      	; 0x7464 <_ZNK6String9substringEjj+0x4a>
    7462:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    7464:	d6 01       	movw	r26, r12
    7466:	ed 91       	ld	r30, X+
    7468:	fc 91       	ld	r31, X
    746a:	11 97       	sbiw	r26, 0x01	; 1
    746c:	ec 0f       	add	r30, r28
    746e:	fd 1f       	adc	r31, r29
    7470:	10 81       	ld	r17, Z
	buffer[right] = '\0';	
    7472:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    7474:	6d 91       	ld	r22, X+
    7476:	7c 91       	ld	r23, X
    7478:	6e 0d       	add	r22, r14
    747a:	7f 1d       	adc	r23, r15
    747c:	80 2f       	mov	r24, r16
    747e:	9b 2d       	mov	r25, r11
    7480:	0e 94 a9 39 	call	0x7352	; 0x7352 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    7484:	d6 01       	movw	r26, r12
    7486:	ed 91       	ld	r30, X+
    7488:	fc 91       	ld	r31, X
    748a:	ec 0f       	add	r30, r28
    748c:	fd 1f       	adc	r31, r29
    748e:	10 83       	st	Z, r17
	return out;
}
    7490:	80 2f       	mov	r24, r16
    7492:	9b 2d       	mov	r25, r11
    7494:	df 91       	pop	r29
    7496:	cf 91       	pop	r28
    7498:	1f 91       	pop	r17
    749a:	0f 91       	pop	r16
    749c:	ff 90       	pop	r15
    749e:	ef 90       	pop	r14
    74a0:	df 90       	pop	r13
    74a2:	cf 90       	pop	r12
    74a4:	bf 90       	pop	r11
    74a6:	08 95       	ret

000074a8 <_ZNK6String9substringEj>:
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}

String String::substring( unsigned int left ) const
    74a8:	0f 93       	push	r16
    74aa:	1f 93       	push	r17
    74ac:	8c 01       	movw	r16, r24
    74ae:	fb 01       	movw	r30, r22
{
	return substring(left, len);
    74b0:	24 81       	ldd	r18, Z+4	; 0x04
    74b2:	35 81       	ldd	r19, Z+5	; 0x05
    74b4:	0e 94 0d 3a 	call	0x741a	; 0x741a <_ZNK6String9substringEjj>
}
    74b8:	c8 01       	movw	r24, r16
    74ba:	1f 91       	pop	r17
    74bc:	0f 91       	pop	r16
    74be:	08 95       	ret

000074c0 <_ZN6StringaSERKS_>:
	rhs.capacity = 0;
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
    74c0:	cf 93       	push	r28
    74c2:	df 93       	push	r29
    74c4:	ec 01       	movw	r28, r24
    74c6:	fb 01       	movw	r30, r22
{
	if (this == &rhs) return *this;
    74c8:	86 17       	cp	r24, r22
    74ca:	97 07       	cpc	r25, r23
    74cc:	61 f0       	breq	.+24     	; 0x74e6 <_ZN6StringaSERKS_+0x26>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    74ce:	60 81       	ld	r22, Z
    74d0:	71 81       	ldd	r23, Z+1	; 0x01
    74d2:	61 15       	cp	r22, r1
    74d4:	71 05       	cpc	r23, r1
    74d6:	29 f0       	breq	.+10     	; 0x74e2 <_ZN6StringaSERKS_+0x22>
    74d8:	44 81       	ldd	r20, Z+4	; 0x04
    74da:	55 81       	ldd	r21, Z+5	; 0x05
    74dc:	0e 94 6e 39 	call	0x72dc	; 0x72dc <_ZN6String4copyEPKcj>
    74e0:	02 c0       	rjmp	.+4      	; 0x74e6 <_ZN6StringaSERKS_+0x26>
	else invalidate();
    74e2:	0e 94 46 39 	call	0x728c	; 0x728c <_ZN6String10invalidateEv>
	
	return *this;
}
    74e6:	ce 01       	movw	r24, r28
    74e8:	df 91       	pop	r29
    74ea:	cf 91       	pop	r28
    74ec:	08 95       	ret

000074ee <_ZN6StringC2ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    74ee:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    74f0:	11 82       	std	Z+1, r1	; 0x01
    74f2:	10 82       	st	Z, r1
	capacity = 0;
    74f4:	13 82       	std	Z+3, r1	; 0x03
    74f6:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    74f8:	15 82       	std	Z+5, r1	; 0x05
    74fa:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    74fc:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
    74fe:	0e 94 60 3a 	call	0x74c0	; 0x74c0 <_ZN6StringaSERKS_>
}
    7502:	08 95       	ret

00007504 <_ZN6StringD1Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    7504:	fc 01       	movw	r30, r24
{
	free(buffer);
    7506:	80 81       	ld	r24, Z
    7508:	91 81       	ldd	r25, Z+1	; 0x01
    750a:	0e 94 2b 31 	call	0x6256	; 0x6256 <free>
}
    750e:	08 95       	ret

00007510 <_ZN6StringD2Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    7510:	fc 01       	movw	r30, r24
{
	free(buffer);
    7512:	80 81       	ld	r24, Z
    7514:	91 81       	ldd	r25, Z+1	; 0x01
    7516:	0e 94 2b 31 	call	0x6256	; 0x6256 <free>
}
    751a:	08 95       	ret

0000751c <realloc>:
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
    751c:	6f 92       	push	r6
    751e:	7f 92       	push	r7
    7520:	8f 92       	push	r8
    7522:	9f 92       	push	r9
    7524:	af 92       	push	r10
    7526:	bf 92       	push	r11
    7528:	cf 92       	push	r12
    752a:	df 92       	push	r13
    752c:	ef 92       	push	r14
    752e:	ff 92       	push	r15
    7530:	0f 93       	push	r16
    7532:	1f 93       	push	r17
    7534:	cf 93       	push	r28
    7536:	df 93       	push	r29
    7538:	8c 01       	movw	r16, r24
    753a:	00 97       	sbiw	r24, 0x00	; 0
    753c:	29 f4       	brne	.+10     	; 0x7548 <realloc+0x2c>
		return malloc(len);
    753e:	cb 01       	movw	r24, r22
    7540:	0e 94 8e 30 	call	0x611c	; 0x611c <malloc>
    7544:	8c 01       	movw	r16, r24
    7546:	bb c0       	rjmp	.+374    	; 0x76be <realloc+0x1a2>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
    7548:	8e ef       	ldi	r24, 0xFE	; 254
    754a:	e8 2e       	mov	r14, r24
    754c:	8f ef       	ldi	r24, 0xFF	; 255
    754e:	f8 2e       	mov	r15, r24
    7550:	e0 0e       	add	r14, r16
    7552:	f1 1e       	adc	r15, r17
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
    7554:	48 01       	movw	r8, r16
    7556:	86 0e       	add	r8, r22
    7558:	97 1e       	adc	r9, r23
	if (cp < cp1)
    755a:	8e 14       	cp	r8, r14
    755c:	9f 04       	cpc	r9, r15
    755e:	08 f4       	brcc	.+2      	; 0x7562 <realloc+0x46>
    7560:	ac c0       	rjmp	.+344    	; 0x76ba <realloc+0x19e>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
    7562:	d7 01       	movw	r26, r14
    7564:	4d 91       	ld	r20, X+
    7566:	5c 91       	ld	r21, X
    7568:	11 97       	sbiw	r26, 0x01	; 1
    756a:	46 17       	cp	r20, r22
    756c:	57 07       	cpc	r21, r23
    756e:	b8 f0       	brcs	.+46     	; 0x759e <realloc+0x82>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    7570:	45 30       	cpi	r20, 0x05	; 5
    7572:	51 05       	cpc	r21, r1
    7574:	08 f4       	brcc	.+2      	; 0x7578 <realloc+0x5c>
    7576:	a3 c0       	rjmp	.+326    	; 0x76be <realloc+0x1a2>
    7578:	ca 01       	movw	r24, r20
    757a:	04 97       	sbiw	r24, 0x04	; 4
    757c:	86 17       	cp	r24, r22
    757e:	97 07       	cpc	r25, r23
    7580:	08 f4       	brcc	.+2      	; 0x7584 <realloc+0x68>
    7582:	9d c0       	rjmp	.+314    	; 0x76be <realloc+0x1a2>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
    7584:	42 50       	subi	r20, 0x02	; 2
    7586:	50 40       	sbci	r21, 0x00	; 0
    7588:	46 1b       	sub	r20, r22
    758a:	57 0b       	sbc	r21, r23
    758c:	f4 01       	movw	r30, r8
    758e:	41 93       	st	Z+, r20
    7590:	51 93       	st	Z+, r21
		fp1->sz = len;
    7592:	6d 93       	st	X+, r22
    7594:	7c 93       	st	X, r23
		free(&(fp2->nx));
    7596:	cf 01       	movw	r24, r30
    7598:	0e 94 2b 31 	call	0x6256	; 0x6256 <free>
    759c:	90 c0       	rjmp	.+288    	; 0x76be <realloc+0x1a2>

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
    759e:	5b 01       	movw	r10, r22
    75a0:	a4 1a       	sub	r10, r20
    75a2:	b5 0a       	sbc	r11, r21
	cp = (char *)ptr + fp1->sz;
    75a4:	38 01       	movw	r6, r16
    75a6:	64 0e       	add	r6, r20
    75a8:	75 1e       	adc	r7, r21
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
    75aa:	a0 91 dd 03 	lds	r26, 0x03DD
    75ae:	b0 91 de 03 	lds	r27, 0x03DE
    75b2:	cc 24       	eor	r12, r12
    75b4:	dd 24       	eor	r13, r13
    75b6:	e0 e0       	ldi	r30, 0x00	; 0
    75b8:	f0 e0       	ldi	r31, 0x00	; 0
    75ba:	47 c0       	rjmp	.+142    	; 0x764a <realloc+0x12e>
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
    75bc:	a6 15       	cp	r26, r6
    75be:	b7 05       	cpc	r27, r7
    75c0:	a9 f5       	brne	.+106    	; 0x762c <realloc+0x110>
    75c2:	cd 91       	ld	r28, X+
    75c4:	dc 91       	ld	r29, X
    75c6:	11 97       	sbiw	r26, 0x01	; 1
    75c8:	ce 01       	movw	r24, r28
    75ca:	02 96       	adiw	r24, 0x02	; 2
    75cc:	8a 15       	cp	r24, r10
    75ce:	9b 05       	cpc	r25, r11
    75d0:	68 f1       	brcs	.+90     	; 0x762c <realloc+0x110>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
    75d2:	ce 01       	movw	r24, r28
    75d4:	8a 19       	sub	r24, r10
    75d6:	9b 09       	sbc	r25, r11
    75d8:	02 96       	adiw	r24, 0x02	; 2
    75da:	12 96       	adiw	r26, 0x02	; 2
    75dc:	2c 91       	ld	r18, X
    75de:	12 97       	sbiw	r26, 0x02	; 2
    75e0:	13 96       	adiw	r26, 0x03	; 3
    75e2:	3c 91       	ld	r19, X
    75e4:	05 97       	sbiw	r24, 0x05	; 5
    75e6:	58 f0       	brcs	.+22     	; 0x75fe <realloc+0xe2>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
    75e8:	f4 01       	movw	r30, r8
				fp2->nx = fp3->nx;
    75ea:	22 83       	std	Z+2, r18	; 0x02
    75ec:	33 83       	std	Z+3, r19	; 0x03
				fp2->sz = fp3->sz - incr;
    75ee:	ca 19       	sub	r28, r10
    75f0:	db 09       	sbc	r29, r11
    75f2:	d1 83       	std	Z+1, r29	; 0x01
    75f4:	c0 83       	st	Z, r28
				fp1->sz = len;
    75f6:	d7 01       	movw	r26, r14
    75f8:	6d 93       	st	X+, r22
    75fa:	7c 93       	st	X, r23
    75fc:	09 c0       	rjmp	.+18     	; 0x7610 <realloc+0xf4>
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
    75fe:	4e 5f       	subi	r20, 0xFE	; 254
    7600:	5f 4f       	sbci	r21, 0xFF	; 255
    7602:	4c 0f       	add	r20, r28
    7604:	5d 1f       	adc	r21, r29
    7606:	f7 01       	movw	r30, r14
    7608:	51 83       	std	Z+1, r21	; 0x01
    760a:	40 83       	st	Z, r20
				fp2 = fp3->nx;
    760c:	c9 01       	movw	r24, r18
    760e:	fc 01       	movw	r30, r24
			}
			if (ofp3)
    7610:	c1 14       	cp	r12, r1
    7612:	d1 04       	cpc	r13, r1
    7614:	31 f0       	breq	.+12     	; 0x7622 <realloc+0x106>
				ofp3->nx = fp2;
    7616:	d6 01       	movw	r26, r12
    7618:	13 96       	adiw	r26, 0x03	; 3
    761a:	fc 93       	st	X, r31
    761c:	ee 93       	st	-X, r30
    761e:	12 97       	sbiw	r26, 0x02	; 2
    7620:	4e c0       	rjmp	.+156    	; 0x76be <realloc+0x1a2>
			else
				__flp = fp2;
    7622:	f0 93 de 03 	sts	0x03DE, r31
    7626:	e0 93 dd 03 	sts	0x03DD, r30
    762a:	49 c0       	rjmp	.+146    	; 0x76be <realloc+0x1a2>
    762c:	8d 91       	ld	r24, X+
    762e:	9c 91       	ld	r25, X
    7630:	11 97       	sbiw	r26, 0x01	; 1
    7632:	e8 17       	cp	r30, r24
    7634:	f9 07       	cpc	r31, r25
    7636:	08 f4       	brcc	.+2      	; 0x763a <realloc+0x11e>
    7638:	fc 01       	movw	r30, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
    763a:	6d 01       	movw	r12, r26
    763c:	12 96       	adiw	r26, 0x02	; 2
    763e:	8c 91       	ld	r24, X
    7640:	12 97       	sbiw	r26, 0x02	; 2
    7642:	13 96       	adiw	r26, 0x03	; 3
    7644:	9c 91       	ld	r25, X
    7646:	9c 01       	movw	r18, r24
    7648:	d9 01       	movw	r26, r18
	 */
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
    764a:	10 97       	sbiw	r26, 0x00	; 0
    764c:	09 f0       	breq	.+2      	; 0x7650 <realloc+0x134>
    764e:	b6 cf       	rjmp	.-148    	; 0x75bc <realloc+0xa0>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
    7650:	80 91 db 03 	lds	r24, 0x03DB
    7654:	90 91 dc 03 	lds	r25, 0x03DC
    7658:	86 15       	cp	r24, r6
    765a:	97 05       	cpc	r25, r7
    765c:	e9 f4       	brne	.+58     	; 0x7698 <realloc+0x17c>
    765e:	e6 17       	cp	r30, r22
    7660:	f7 07       	cpc	r31, r23
    7662:	d0 f4       	brcc	.+52     	; 0x7698 <realloc+0x17c>
		cp1 = __malloc_heap_end;
    7664:	20 91 0e 01 	lds	r18, 0x010E
    7668:	30 91 0f 01 	lds	r19, 0x010F
		cp = (char *)ptr + len;
		if (cp1 == 0)
    766c:	21 15       	cp	r18, r1
    766e:	31 05       	cpc	r19, r1
    7670:	41 f4       	brne	.+16     	; 0x7682 <realloc+0x166>
			cp1 = STACK_POINTER() - __malloc_margin;
    7672:	2d b7       	in	r18, 0x3d	; 61
    7674:	3e b7       	in	r19, 0x3e	; 62
    7676:	80 91 0a 01 	lds	r24, 0x010A
    767a:	90 91 0b 01 	lds	r25, 0x010B
    767e:	28 1b       	sub	r18, r24
    7680:	39 0b       	sbc	r19, r25
		if (cp < cp1) {
    7682:	82 16       	cp	r8, r18
    7684:	93 06       	cpc	r9, r19
    7686:	c8 f4       	brcc	.+50     	; 0x76ba <realloc+0x19e>
			__brkval = cp;
    7688:	90 92 dc 03 	sts	0x03DC, r9
    768c:	80 92 db 03 	sts	0x03DB, r8
			fp1->sz = len;
    7690:	f7 01       	movw	r30, r14
    7692:	71 83       	std	Z+1, r23	; 0x01
    7694:	60 83       	st	Z, r22
    7696:	13 c0       	rjmp	.+38     	; 0x76be <realloc+0x1a2>

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
    7698:	cb 01       	movw	r24, r22
    769a:	0e 94 8e 30 	call	0x611c	; 0x611c <malloc>
    769e:	ec 01       	movw	r28, r24
    76a0:	00 97       	sbiw	r24, 0x00	; 0
    76a2:	59 f0       	breq	.+22     	; 0x76ba <realloc+0x19e>
		return 0;
	memcpy(memp, ptr, fp1->sz);
    76a4:	d7 01       	movw	r26, r14
    76a6:	4d 91       	ld	r20, X+
    76a8:	5c 91       	ld	r21, X
    76aa:	b8 01       	movw	r22, r16
    76ac:	0e 94 ab 04 	call	0x956	; 0x956 <memcpy>
	free(ptr);
    76b0:	c8 01       	movw	r24, r16
    76b2:	0e 94 2b 31 	call	0x6256	; 0x6256 <free>
    76b6:	8e 01       	movw	r16, r28
    76b8:	02 c0       	rjmp	.+4      	; 0x76be <realloc+0x1a2>
	return memp;
    76ba:	00 e0       	ldi	r16, 0x00	; 0
    76bc:	10 e0       	ldi	r17, 0x00	; 0
}
    76be:	c8 01       	movw	r24, r16
    76c0:	df 91       	pop	r29
    76c2:	cf 91       	pop	r28
    76c4:	1f 91       	pop	r17
    76c6:	0f 91       	pop	r16
    76c8:	ff 90       	pop	r15
    76ca:	ef 90       	pop	r14
    76cc:	df 90       	pop	r13
    76ce:	cf 90       	pop	r12
    76d0:	bf 90       	pop	r11
    76d2:	af 90       	pop	r10
    76d4:	9f 90       	pop	r9
    76d6:	8f 90       	pop	r8
    76d8:	7f 90       	pop	r7
    76da:	6f 90       	pop	r6
    76dc:	08 95       	ret

000076de <__subsf3>:
    76de:	50 58       	subi	r21, 0x80	; 128

000076e0 <__addsf3>:
    76e0:	bb 27       	eor	r27, r27
    76e2:	aa 27       	eor	r26, r26
    76e4:	0e d0       	rcall	.+28     	; 0x7702 <__addsf3x>
    76e6:	75 c1       	rjmp	.+746    	; 0x79d2 <__fp_round>
    76e8:	66 d1       	rcall	.+716    	; 0x79b6 <__fp_pscA>
    76ea:	30 f0       	brcs	.+12     	; 0x76f8 <__addsf3+0x18>
    76ec:	6b d1       	rcall	.+726    	; 0x79c4 <__fp_pscB>
    76ee:	20 f0       	brcs	.+8      	; 0x76f8 <__addsf3+0x18>
    76f0:	31 f4       	brne	.+12     	; 0x76fe <__addsf3+0x1e>
    76f2:	9f 3f       	cpi	r25, 0xFF	; 255
    76f4:	11 f4       	brne	.+4      	; 0x76fa <__addsf3+0x1a>
    76f6:	1e f4       	brtc	.+6      	; 0x76fe <__addsf3+0x1e>
    76f8:	5b c1       	rjmp	.+694    	; 0x79b0 <__fp_nan>
    76fa:	0e f4       	brtc	.+2      	; 0x76fe <__addsf3+0x1e>
    76fc:	e0 95       	com	r30
    76fe:	e7 fb       	bst	r30, 7
    7700:	51 c1       	rjmp	.+674    	; 0x79a4 <__fp_inf>

00007702 <__addsf3x>:
    7702:	e9 2f       	mov	r30, r25
    7704:	77 d1       	rcall	.+750    	; 0x79f4 <__fp_split3>
    7706:	80 f3       	brcs	.-32     	; 0x76e8 <__addsf3+0x8>
    7708:	ba 17       	cp	r27, r26
    770a:	62 07       	cpc	r22, r18
    770c:	73 07       	cpc	r23, r19
    770e:	84 07       	cpc	r24, r20
    7710:	95 07       	cpc	r25, r21
    7712:	18 f0       	brcs	.+6      	; 0x771a <__addsf3x+0x18>
    7714:	71 f4       	brne	.+28     	; 0x7732 <__addsf3x+0x30>
    7716:	9e f5       	brtc	.+102    	; 0x777e <__addsf3x+0x7c>
    7718:	8f c1       	rjmp	.+798    	; 0x7a38 <__fp_zero>
    771a:	0e f4       	brtc	.+2      	; 0x771e <__addsf3x+0x1c>
    771c:	e0 95       	com	r30
    771e:	0b 2e       	mov	r0, r27
    7720:	ba 2f       	mov	r27, r26
    7722:	a0 2d       	mov	r26, r0
    7724:	0b 01       	movw	r0, r22
    7726:	b9 01       	movw	r22, r18
    7728:	90 01       	movw	r18, r0
    772a:	0c 01       	movw	r0, r24
    772c:	ca 01       	movw	r24, r20
    772e:	a0 01       	movw	r20, r0
    7730:	11 24       	eor	r1, r1
    7732:	ff 27       	eor	r31, r31
    7734:	59 1b       	sub	r21, r25
    7736:	99 f0       	breq	.+38     	; 0x775e <__addsf3x+0x5c>
    7738:	59 3f       	cpi	r21, 0xF9	; 249
    773a:	50 f4       	brcc	.+20     	; 0x7750 <__addsf3x+0x4e>
    773c:	50 3e       	cpi	r21, 0xE0	; 224
    773e:	68 f1       	brcs	.+90     	; 0x779a <__addsf3x+0x98>
    7740:	1a 16       	cp	r1, r26
    7742:	f0 40       	sbci	r31, 0x00	; 0
    7744:	a2 2f       	mov	r26, r18
    7746:	23 2f       	mov	r18, r19
    7748:	34 2f       	mov	r19, r20
    774a:	44 27       	eor	r20, r20
    774c:	58 5f       	subi	r21, 0xF8	; 248
    774e:	f3 cf       	rjmp	.-26     	; 0x7736 <__addsf3x+0x34>
    7750:	46 95       	lsr	r20
    7752:	37 95       	ror	r19
    7754:	27 95       	ror	r18
    7756:	a7 95       	ror	r26
    7758:	f0 40       	sbci	r31, 0x00	; 0
    775a:	53 95       	inc	r21
    775c:	c9 f7       	brne	.-14     	; 0x7750 <__addsf3x+0x4e>
    775e:	7e f4       	brtc	.+30     	; 0x777e <__addsf3x+0x7c>
    7760:	1f 16       	cp	r1, r31
    7762:	ba 0b       	sbc	r27, r26
    7764:	62 0b       	sbc	r22, r18
    7766:	73 0b       	sbc	r23, r19
    7768:	84 0b       	sbc	r24, r20
    776a:	ba f0       	brmi	.+46     	; 0x779a <__addsf3x+0x98>
    776c:	91 50       	subi	r25, 0x01	; 1
    776e:	a1 f0       	breq	.+40     	; 0x7798 <__addsf3x+0x96>
    7770:	ff 0f       	add	r31, r31
    7772:	bb 1f       	adc	r27, r27
    7774:	66 1f       	adc	r22, r22
    7776:	77 1f       	adc	r23, r23
    7778:	88 1f       	adc	r24, r24
    777a:	c2 f7       	brpl	.-16     	; 0x776c <__addsf3x+0x6a>
    777c:	0e c0       	rjmp	.+28     	; 0x779a <__addsf3x+0x98>
    777e:	ba 0f       	add	r27, r26
    7780:	62 1f       	adc	r22, r18
    7782:	73 1f       	adc	r23, r19
    7784:	84 1f       	adc	r24, r20
    7786:	48 f4       	brcc	.+18     	; 0x779a <__addsf3x+0x98>
    7788:	87 95       	ror	r24
    778a:	77 95       	ror	r23
    778c:	67 95       	ror	r22
    778e:	b7 95       	ror	r27
    7790:	f7 95       	ror	r31
    7792:	9e 3f       	cpi	r25, 0xFE	; 254
    7794:	08 f0       	brcs	.+2      	; 0x7798 <__addsf3x+0x96>
    7796:	b3 cf       	rjmp	.-154    	; 0x76fe <__addsf3+0x1e>
    7798:	93 95       	inc	r25
    779a:	88 0f       	add	r24, r24
    779c:	08 f0       	brcs	.+2      	; 0x77a0 <__addsf3x+0x9e>
    779e:	99 27       	eor	r25, r25
    77a0:	ee 0f       	add	r30, r30
    77a2:	97 95       	ror	r25
    77a4:	87 95       	ror	r24
    77a6:	08 95       	ret

000077a8 <__cmpsf2>:
    77a8:	d9 d0       	rcall	.+434    	; 0x795c <__fp_cmp>
    77aa:	08 f4       	brcc	.+2      	; 0x77ae <__cmpsf2+0x6>
    77ac:	81 e0       	ldi	r24, 0x01	; 1
    77ae:	08 95       	ret

000077b0 <__divsf3>:
    77b0:	0c d0       	rcall	.+24     	; 0x77ca <__divsf3x>
    77b2:	0f c1       	rjmp	.+542    	; 0x79d2 <__fp_round>
    77b4:	07 d1       	rcall	.+526    	; 0x79c4 <__fp_pscB>
    77b6:	40 f0       	brcs	.+16     	; 0x77c8 <__divsf3+0x18>
    77b8:	fe d0       	rcall	.+508    	; 0x79b6 <__fp_pscA>
    77ba:	30 f0       	brcs	.+12     	; 0x77c8 <__divsf3+0x18>
    77bc:	21 f4       	brne	.+8      	; 0x77c6 <__divsf3+0x16>
    77be:	5f 3f       	cpi	r21, 0xFF	; 255
    77c0:	19 f0       	breq	.+6      	; 0x77c8 <__divsf3+0x18>
    77c2:	f0 c0       	rjmp	.+480    	; 0x79a4 <__fp_inf>
    77c4:	51 11       	cpse	r21, r1
    77c6:	39 c1       	rjmp	.+626    	; 0x7a3a <__fp_szero>
    77c8:	f3 c0       	rjmp	.+486    	; 0x79b0 <__fp_nan>

000077ca <__divsf3x>:
    77ca:	14 d1       	rcall	.+552    	; 0x79f4 <__fp_split3>
    77cc:	98 f3       	brcs	.-26     	; 0x77b4 <__divsf3+0x4>

000077ce <__divsf3_pse>:
    77ce:	99 23       	and	r25, r25
    77d0:	c9 f3       	breq	.-14     	; 0x77c4 <__divsf3+0x14>
    77d2:	55 23       	and	r21, r21
    77d4:	b1 f3       	breq	.-20     	; 0x77c2 <__divsf3+0x12>
    77d6:	95 1b       	sub	r25, r21
    77d8:	55 0b       	sbc	r21, r21
    77da:	bb 27       	eor	r27, r27
    77dc:	aa 27       	eor	r26, r26
    77de:	62 17       	cp	r22, r18
    77e0:	73 07       	cpc	r23, r19
    77e2:	84 07       	cpc	r24, r20
    77e4:	38 f0       	brcs	.+14     	; 0x77f4 <__divsf3_pse+0x26>
    77e6:	9f 5f       	subi	r25, 0xFF	; 255
    77e8:	5f 4f       	sbci	r21, 0xFF	; 255
    77ea:	22 0f       	add	r18, r18
    77ec:	33 1f       	adc	r19, r19
    77ee:	44 1f       	adc	r20, r20
    77f0:	aa 1f       	adc	r26, r26
    77f2:	a9 f3       	breq	.-22     	; 0x77de <__divsf3_pse+0x10>
    77f4:	33 d0       	rcall	.+102    	; 0x785c <__divsf3_pse+0x8e>
    77f6:	0e 2e       	mov	r0, r30
    77f8:	3a f0       	brmi	.+14     	; 0x7808 <__divsf3_pse+0x3a>
    77fa:	e0 e8       	ldi	r30, 0x80	; 128
    77fc:	30 d0       	rcall	.+96     	; 0x785e <__divsf3_pse+0x90>
    77fe:	91 50       	subi	r25, 0x01	; 1
    7800:	50 40       	sbci	r21, 0x00	; 0
    7802:	e6 95       	lsr	r30
    7804:	00 1c       	adc	r0, r0
    7806:	ca f7       	brpl	.-14     	; 0x77fa <__divsf3_pse+0x2c>
    7808:	29 d0       	rcall	.+82     	; 0x785c <__divsf3_pse+0x8e>
    780a:	fe 2f       	mov	r31, r30
    780c:	27 d0       	rcall	.+78     	; 0x785c <__divsf3_pse+0x8e>
    780e:	66 0f       	add	r22, r22
    7810:	77 1f       	adc	r23, r23
    7812:	88 1f       	adc	r24, r24
    7814:	bb 1f       	adc	r27, r27
    7816:	26 17       	cp	r18, r22
    7818:	37 07       	cpc	r19, r23
    781a:	48 07       	cpc	r20, r24
    781c:	ab 07       	cpc	r26, r27
    781e:	b0 e8       	ldi	r27, 0x80	; 128
    7820:	09 f0       	breq	.+2      	; 0x7824 <__divsf3_pse+0x56>
    7822:	bb 0b       	sbc	r27, r27
    7824:	80 2d       	mov	r24, r0
    7826:	bf 01       	movw	r22, r30
    7828:	ff 27       	eor	r31, r31
    782a:	93 58       	subi	r25, 0x83	; 131
    782c:	5f 4f       	sbci	r21, 0xFF	; 255
    782e:	2a f0       	brmi	.+10     	; 0x783a <__divsf3_pse+0x6c>
    7830:	9e 3f       	cpi	r25, 0xFE	; 254
    7832:	51 05       	cpc	r21, r1
    7834:	68 f0       	brcs	.+26     	; 0x7850 <__divsf3_pse+0x82>
    7836:	b6 c0       	rjmp	.+364    	; 0x79a4 <__fp_inf>
    7838:	00 c1       	rjmp	.+512    	; 0x7a3a <__fp_szero>
    783a:	5f 3f       	cpi	r21, 0xFF	; 255
    783c:	ec f3       	brlt	.-6      	; 0x7838 <__divsf3_pse+0x6a>
    783e:	98 3e       	cpi	r25, 0xE8	; 232
    7840:	dc f3       	brlt	.-10     	; 0x7838 <__divsf3_pse+0x6a>
    7842:	86 95       	lsr	r24
    7844:	77 95       	ror	r23
    7846:	67 95       	ror	r22
    7848:	b7 95       	ror	r27
    784a:	f7 95       	ror	r31
    784c:	9f 5f       	subi	r25, 0xFF	; 255
    784e:	c9 f7       	brne	.-14     	; 0x7842 <__divsf3_pse+0x74>
    7850:	88 0f       	add	r24, r24
    7852:	91 1d       	adc	r25, r1
    7854:	96 95       	lsr	r25
    7856:	87 95       	ror	r24
    7858:	97 f9       	bld	r25, 7
    785a:	08 95       	ret
    785c:	e1 e0       	ldi	r30, 0x01	; 1
    785e:	66 0f       	add	r22, r22
    7860:	77 1f       	adc	r23, r23
    7862:	88 1f       	adc	r24, r24
    7864:	bb 1f       	adc	r27, r27
    7866:	62 17       	cp	r22, r18
    7868:	73 07       	cpc	r23, r19
    786a:	84 07       	cpc	r24, r20
    786c:	ba 07       	cpc	r27, r26
    786e:	20 f0       	brcs	.+8      	; 0x7878 <__divsf3_pse+0xaa>
    7870:	62 1b       	sub	r22, r18
    7872:	73 0b       	sbc	r23, r19
    7874:	84 0b       	sbc	r24, r20
    7876:	ba 0b       	sbc	r27, r26
    7878:	ee 1f       	adc	r30, r30
    787a:	88 f7       	brcc	.-30     	; 0x785e <__divsf3_pse+0x90>
    787c:	e0 95       	com	r30
    787e:	08 95       	ret

00007880 <__fixsfsi>:
    7880:	04 d0       	rcall	.+8      	; 0x788a <__fixunssfsi>
    7882:	68 94       	set
    7884:	b1 11       	cpse	r27, r1
    7886:	d9 c0       	rjmp	.+434    	; 0x7a3a <__fp_szero>
    7888:	08 95       	ret

0000788a <__fixunssfsi>:
    788a:	bc d0       	rcall	.+376    	; 0x7a04 <__fp_splitA>
    788c:	88 f0       	brcs	.+34     	; 0x78b0 <__fixunssfsi+0x26>
    788e:	9f 57       	subi	r25, 0x7F	; 127
    7890:	90 f0       	brcs	.+36     	; 0x78b6 <__fixunssfsi+0x2c>
    7892:	b9 2f       	mov	r27, r25
    7894:	99 27       	eor	r25, r25
    7896:	b7 51       	subi	r27, 0x17	; 23
    7898:	a0 f0       	brcs	.+40     	; 0x78c2 <__fixunssfsi+0x38>
    789a:	d1 f0       	breq	.+52     	; 0x78d0 <__fixunssfsi+0x46>
    789c:	66 0f       	add	r22, r22
    789e:	77 1f       	adc	r23, r23
    78a0:	88 1f       	adc	r24, r24
    78a2:	99 1f       	adc	r25, r25
    78a4:	1a f0       	brmi	.+6      	; 0x78ac <__fixunssfsi+0x22>
    78a6:	ba 95       	dec	r27
    78a8:	c9 f7       	brne	.-14     	; 0x789c <__fixunssfsi+0x12>
    78aa:	12 c0       	rjmp	.+36     	; 0x78d0 <__fixunssfsi+0x46>
    78ac:	b1 30       	cpi	r27, 0x01	; 1
    78ae:	81 f0       	breq	.+32     	; 0x78d0 <__fixunssfsi+0x46>
    78b0:	c3 d0       	rcall	.+390    	; 0x7a38 <__fp_zero>
    78b2:	b1 e0       	ldi	r27, 0x01	; 1
    78b4:	08 95       	ret
    78b6:	c0 c0       	rjmp	.+384    	; 0x7a38 <__fp_zero>
    78b8:	67 2f       	mov	r22, r23
    78ba:	78 2f       	mov	r23, r24
    78bc:	88 27       	eor	r24, r24
    78be:	b8 5f       	subi	r27, 0xF8	; 248
    78c0:	39 f0       	breq	.+14     	; 0x78d0 <__fixunssfsi+0x46>
    78c2:	b9 3f       	cpi	r27, 0xF9	; 249
    78c4:	cc f3       	brlt	.-14     	; 0x78b8 <__fixunssfsi+0x2e>
    78c6:	86 95       	lsr	r24
    78c8:	77 95       	ror	r23
    78ca:	67 95       	ror	r22
    78cc:	b3 95       	inc	r27
    78ce:	d9 f7       	brne	.-10     	; 0x78c6 <__fixunssfsi+0x3c>
    78d0:	3e f4       	brtc	.+14     	; 0x78e0 <__fixunssfsi+0x56>
    78d2:	90 95       	com	r25
    78d4:	80 95       	com	r24
    78d6:	70 95       	com	r23
    78d8:	61 95       	neg	r22
    78da:	7f 4f       	sbci	r23, 0xFF	; 255
    78dc:	8f 4f       	sbci	r24, 0xFF	; 255
    78de:	9f 4f       	sbci	r25, 0xFF	; 255
    78e0:	08 95       	ret

000078e2 <__floatunsisf>:
    78e2:	e8 94       	clt
    78e4:	09 c0       	rjmp	.+18     	; 0x78f8 <__floatsisf+0x12>

000078e6 <__floatsisf>:
    78e6:	97 fb       	bst	r25, 7
    78e8:	3e f4       	brtc	.+14     	; 0x78f8 <__floatsisf+0x12>
    78ea:	90 95       	com	r25
    78ec:	80 95       	com	r24
    78ee:	70 95       	com	r23
    78f0:	61 95       	neg	r22
    78f2:	7f 4f       	sbci	r23, 0xFF	; 255
    78f4:	8f 4f       	sbci	r24, 0xFF	; 255
    78f6:	9f 4f       	sbci	r25, 0xFF	; 255
    78f8:	99 23       	and	r25, r25
    78fa:	a9 f0       	breq	.+42     	; 0x7926 <__floatsisf+0x40>
    78fc:	f9 2f       	mov	r31, r25
    78fe:	96 e9       	ldi	r25, 0x96	; 150
    7900:	bb 27       	eor	r27, r27
    7902:	93 95       	inc	r25
    7904:	f6 95       	lsr	r31
    7906:	87 95       	ror	r24
    7908:	77 95       	ror	r23
    790a:	67 95       	ror	r22
    790c:	b7 95       	ror	r27
    790e:	f1 11       	cpse	r31, r1
    7910:	f8 cf       	rjmp	.-16     	; 0x7902 <__floatsisf+0x1c>
    7912:	fa f4       	brpl	.+62     	; 0x7952 <__floatsisf+0x6c>
    7914:	bb 0f       	add	r27, r27
    7916:	11 f4       	brne	.+4      	; 0x791c <__floatsisf+0x36>
    7918:	60 ff       	sbrs	r22, 0
    791a:	1b c0       	rjmp	.+54     	; 0x7952 <__floatsisf+0x6c>
    791c:	6f 5f       	subi	r22, 0xFF	; 255
    791e:	7f 4f       	sbci	r23, 0xFF	; 255
    7920:	8f 4f       	sbci	r24, 0xFF	; 255
    7922:	9f 4f       	sbci	r25, 0xFF	; 255
    7924:	16 c0       	rjmp	.+44     	; 0x7952 <__floatsisf+0x6c>
    7926:	88 23       	and	r24, r24
    7928:	11 f0       	breq	.+4      	; 0x792e <__floatsisf+0x48>
    792a:	96 e9       	ldi	r25, 0x96	; 150
    792c:	11 c0       	rjmp	.+34     	; 0x7950 <__floatsisf+0x6a>
    792e:	77 23       	and	r23, r23
    7930:	21 f0       	breq	.+8      	; 0x793a <__floatsisf+0x54>
    7932:	9e e8       	ldi	r25, 0x8E	; 142
    7934:	87 2f       	mov	r24, r23
    7936:	76 2f       	mov	r23, r22
    7938:	05 c0       	rjmp	.+10     	; 0x7944 <__floatsisf+0x5e>
    793a:	66 23       	and	r22, r22
    793c:	71 f0       	breq	.+28     	; 0x795a <__floatsisf+0x74>
    793e:	96 e8       	ldi	r25, 0x86	; 134
    7940:	86 2f       	mov	r24, r22
    7942:	70 e0       	ldi	r23, 0x00	; 0
    7944:	60 e0       	ldi	r22, 0x00	; 0
    7946:	2a f0       	brmi	.+10     	; 0x7952 <__floatsisf+0x6c>
    7948:	9a 95       	dec	r25
    794a:	66 0f       	add	r22, r22
    794c:	77 1f       	adc	r23, r23
    794e:	88 1f       	adc	r24, r24
    7950:	da f7       	brpl	.-10     	; 0x7948 <__floatsisf+0x62>
    7952:	88 0f       	add	r24, r24
    7954:	96 95       	lsr	r25
    7956:	87 95       	ror	r24
    7958:	97 f9       	bld	r25, 7
    795a:	08 95       	ret

0000795c <__fp_cmp>:
    795c:	99 0f       	add	r25, r25
    795e:	00 08       	sbc	r0, r0
    7960:	55 0f       	add	r21, r21
    7962:	aa 0b       	sbc	r26, r26
    7964:	e0 e8       	ldi	r30, 0x80	; 128
    7966:	fe ef       	ldi	r31, 0xFE	; 254
    7968:	16 16       	cp	r1, r22
    796a:	17 06       	cpc	r1, r23
    796c:	e8 07       	cpc	r30, r24
    796e:	f9 07       	cpc	r31, r25
    7970:	c0 f0       	brcs	.+48     	; 0x79a2 <__fp_cmp+0x46>
    7972:	12 16       	cp	r1, r18
    7974:	13 06       	cpc	r1, r19
    7976:	e4 07       	cpc	r30, r20
    7978:	f5 07       	cpc	r31, r21
    797a:	98 f0       	brcs	.+38     	; 0x79a2 <__fp_cmp+0x46>
    797c:	62 1b       	sub	r22, r18
    797e:	73 0b       	sbc	r23, r19
    7980:	84 0b       	sbc	r24, r20
    7982:	95 0b       	sbc	r25, r21
    7984:	39 f4       	brne	.+14     	; 0x7994 <__fp_cmp+0x38>
    7986:	0a 26       	eor	r0, r26
    7988:	61 f0       	breq	.+24     	; 0x79a2 <__fp_cmp+0x46>
    798a:	23 2b       	or	r18, r19
    798c:	24 2b       	or	r18, r20
    798e:	25 2b       	or	r18, r21
    7990:	21 f4       	brne	.+8      	; 0x799a <__fp_cmp+0x3e>
    7992:	08 95       	ret
    7994:	0a 26       	eor	r0, r26
    7996:	09 f4       	brne	.+2      	; 0x799a <__fp_cmp+0x3e>
    7998:	a1 40       	sbci	r26, 0x01	; 1
    799a:	a6 95       	lsr	r26
    799c:	8f ef       	ldi	r24, 0xFF	; 255
    799e:	81 1d       	adc	r24, r1
    79a0:	81 1d       	adc	r24, r1
    79a2:	08 95       	ret

000079a4 <__fp_inf>:
    79a4:	97 f9       	bld	r25, 7
    79a6:	9f 67       	ori	r25, 0x7F	; 127
    79a8:	80 e8       	ldi	r24, 0x80	; 128
    79aa:	70 e0       	ldi	r23, 0x00	; 0
    79ac:	60 e0       	ldi	r22, 0x00	; 0
    79ae:	08 95       	ret

000079b0 <__fp_nan>:
    79b0:	9f ef       	ldi	r25, 0xFF	; 255
    79b2:	80 ec       	ldi	r24, 0xC0	; 192
    79b4:	08 95       	ret

000079b6 <__fp_pscA>:
    79b6:	00 24       	eor	r0, r0
    79b8:	0a 94       	dec	r0
    79ba:	16 16       	cp	r1, r22
    79bc:	17 06       	cpc	r1, r23
    79be:	18 06       	cpc	r1, r24
    79c0:	09 06       	cpc	r0, r25
    79c2:	08 95       	ret

000079c4 <__fp_pscB>:
    79c4:	00 24       	eor	r0, r0
    79c6:	0a 94       	dec	r0
    79c8:	12 16       	cp	r1, r18
    79ca:	13 06       	cpc	r1, r19
    79cc:	14 06       	cpc	r1, r20
    79ce:	05 06       	cpc	r0, r21
    79d0:	08 95       	ret

000079d2 <__fp_round>:
    79d2:	09 2e       	mov	r0, r25
    79d4:	03 94       	inc	r0
    79d6:	00 0c       	add	r0, r0
    79d8:	11 f4       	brne	.+4      	; 0x79de <__fp_round+0xc>
    79da:	88 23       	and	r24, r24
    79dc:	52 f0       	brmi	.+20     	; 0x79f2 <__fp_round+0x20>
    79de:	bb 0f       	add	r27, r27
    79e0:	40 f4       	brcc	.+16     	; 0x79f2 <__fp_round+0x20>
    79e2:	bf 2b       	or	r27, r31
    79e4:	11 f4       	brne	.+4      	; 0x79ea <__fp_round+0x18>
    79e6:	60 ff       	sbrs	r22, 0
    79e8:	04 c0       	rjmp	.+8      	; 0x79f2 <__fp_round+0x20>
    79ea:	6f 5f       	subi	r22, 0xFF	; 255
    79ec:	7f 4f       	sbci	r23, 0xFF	; 255
    79ee:	8f 4f       	sbci	r24, 0xFF	; 255
    79f0:	9f 4f       	sbci	r25, 0xFF	; 255
    79f2:	08 95       	ret

000079f4 <__fp_split3>:
    79f4:	57 fd       	sbrc	r21, 7
    79f6:	90 58       	subi	r25, 0x80	; 128
    79f8:	44 0f       	add	r20, r20
    79fa:	55 1f       	adc	r21, r21
    79fc:	59 f0       	breq	.+22     	; 0x7a14 <__fp_splitA+0x10>
    79fe:	5f 3f       	cpi	r21, 0xFF	; 255
    7a00:	71 f0       	breq	.+28     	; 0x7a1e <__fp_splitA+0x1a>
    7a02:	47 95       	ror	r20

00007a04 <__fp_splitA>:
    7a04:	88 0f       	add	r24, r24
    7a06:	97 fb       	bst	r25, 7
    7a08:	99 1f       	adc	r25, r25
    7a0a:	61 f0       	breq	.+24     	; 0x7a24 <__fp_splitA+0x20>
    7a0c:	9f 3f       	cpi	r25, 0xFF	; 255
    7a0e:	79 f0       	breq	.+30     	; 0x7a2e <__fp_splitA+0x2a>
    7a10:	87 95       	ror	r24
    7a12:	08 95       	ret
    7a14:	12 16       	cp	r1, r18
    7a16:	13 06       	cpc	r1, r19
    7a18:	14 06       	cpc	r1, r20
    7a1a:	55 1f       	adc	r21, r21
    7a1c:	f2 cf       	rjmp	.-28     	; 0x7a02 <__fp_split3+0xe>
    7a1e:	46 95       	lsr	r20
    7a20:	f1 df       	rcall	.-30     	; 0x7a04 <__fp_splitA>
    7a22:	08 c0       	rjmp	.+16     	; 0x7a34 <__fp_splitA+0x30>
    7a24:	16 16       	cp	r1, r22
    7a26:	17 06       	cpc	r1, r23
    7a28:	18 06       	cpc	r1, r24
    7a2a:	99 1f       	adc	r25, r25
    7a2c:	f1 cf       	rjmp	.-30     	; 0x7a10 <__fp_splitA+0xc>
    7a2e:	86 95       	lsr	r24
    7a30:	71 05       	cpc	r23, r1
    7a32:	61 05       	cpc	r22, r1
    7a34:	08 94       	sec
    7a36:	08 95       	ret

00007a38 <__fp_zero>:
    7a38:	e8 94       	clt

00007a3a <__fp_szero>:
    7a3a:	bb 27       	eor	r27, r27
    7a3c:	66 27       	eor	r22, r22
    7a3e:	77 27       	eor	r23, r23
    7a40:	cb 01       	movw	r24, r22
    7a42:	97 f9       	bld	r25, 7
    7a44:	08 95       	ret

00007a46 <__gesf2>:
    7a46:	8a df       	rcall	.-236    	; 0x795c <__fp_cmp>
    7a48:	08 f4       	brcc	.+2      	; 0x7a4c <__gesf2+0x6>
    7a4a:	8f ef       	ldi	r24, 0xFF	; 255
    7a4c:	08 95       	ret

00007a4e <__mulsf3>:
    7a4e:	0b d0       	rcall	.+22     	; 0x7a66 <__mulsf3x>
    7a50:	c0 cf       	rjmp	.-128    	; 0x79d2 <__fp_round>
    7a52:	b1 df       	rcall	.-158    	; 0x79b6 <__fp_pscA>
    7a54:	28 f0       	brcs	.+10     	; 0x7a60 <__mulsf3+0x12>
    7a56:	b6 df       	rcall	.-148    	; 0x79c4 <__fp_pscB>
    7a58:	18 f0       	brcs	.+6      	; 0x7a60 <__mulsf3+0x12>
    7a5a:	95 23       	and	r25, r21
    7a5c:	09 f0       	breq	.+2      	; 0x7a60 <__mulsf3+0x12>
    7a5e:	a2 cf       	rjmp	.-188    	; 0x79a4 <__fp_inf>
    7a60:	a7 cf       	rjmp	.-178    	; 0x79b0 <__fp_nan>
    7a62:	11 24       	eor	r1, r1
    7a64:	ea cf       	rjmp	.-44     	; 0x7a3a <__fp_szero>

00007a66 <__mulsf3x>:
    7a66:	c6 df       	rcall	.-116    	; 0x79f4 <__fp_split3>
    7a68:	a0 f3       	brcs	.-24     	; 0x7a52 <__mulsf3+0x4>

00007a6a <__mulsf3_pse>:
    7a6a:	95 9f       	mul	r25, r21
    7a6c:	d1 f3       	breq	.-12     	; 0x7a62 <__mulsf3+0x14>
    7a6e:	95 0f       	add	r25, r21
    7a70:	50 e0       	ldi	r21, 0x00	; 0
    7a72:	55 1f       	adc	r21, r21
    7a74:	62 9f       	mul	r22, r18
    7a76:	f0 01       	movw	r30, r0
    7a78:	72 9f       	mul	r23, r18
    7a7a:	bb 27       	eor	r27, r27
    7a7c:	f0 0d       	add	r31, r0
    7a7e:	b1 1d       	adc	r27, r1
    7a80:	63 9f       	mul	r22, r19
    7a82:	aa 27       	eor	r26, r26
    7a84:	f0 0d       	add	r31, r0
    7a86:	b1 1d       	adc	r27, r1
    7a88:	aa 1f       	adc	r26, r26
    7a8a:	64 9f       	mul	r22, r20
    7a8c:	66 27       	eor	r22, r22
    7a8e:	b0 0d       	add	r27, r0
    7a90:	a1 1d       	adc	r26, r1
    7a92:	66 1f       	adc	r22, r22
    7a94:	82 9f       	mul	r24, r18
    7a96:	22 27       	eor	r18, r18
    7a98:	b0 0d       	add	r27, r0
    7a9a:	a1 1d       	adc	r26, r1
    7a9c:	62 1f       	adc	r22, r18
    7a9e:	73 9f       	mul	r23, r19
    7aa0:	b0 0d       	add	r27, r0
    7aa2:	a1 1d       	adc	r26, r1
    7aa4:	62 1f       	adc	r22, r18
    7aa6:	83 9f       	mul	r24, r19
    7aa8:	a0 0d       	add	r26, r0
    7aaa:	61 1d       	adc	r22, r1
    7aac:	22 1f       	adc	r18, r18
    7aae:	74 9f       	mul	r23, r20
    7ab0:	33 27       	eor	r19, r19
    7ab2:	a0 0d       	add	r26, r0
    7ab4:	61 1d       	adc	r22, r1
    7ab6:	23 1f       	adc	r18, r19
    7ab8:	84 9f       	mul	r24, r20
    7aba:	60 0d       	add	r22, r0
    7abc:	21 1d       	adc	r18, r1
    7abe:	82 2f       	mov	r24, r18
    7ac0:	76 2f       	mov	r23, r22
    7ac2:	6a 2f       	mov	r22, r26
    7ac4:	11 24       	eor	r1, r1
    7ac6:	9f 57       	subi	r25, 0x7F	; 127
    7ac8:	50 40       	sbci	r21, 0x00	; 0
    7aca:	8a f0       	brmi	.+34     	; 0x7aee <__mulsf3_pse+0x84>
    7acc:	e1 f0       	breq	.+56     	; 0x7b06 <__mulsf3_pse+0x9c>
    7ace:	88 23       	and	r24, r24
    7ad0:	4a f0       	brmi	.+18     	; 0x7ae4 <__mulsf3_pse+0x7a>
    7ad2:	ee 0f       	add	r30, r30
    7ad4:	ff 1f       	adc	r31, r31
    7ad6:	bb 1f       	adc	r27, r27
    7ad8:	66 1f       	adc	r22, r22
    7ada:	77 1f       	adc	r23, r23
    7adc:	88 1f       	adc	r24, r24
    7ade:	91 50       	subi	r25, 0x01	; 1
    7ae0:	50 40       	sbci	r21, 0x00	; 0
    7ae2:	a9 f7       	brne	.-22     	; 0x7ace <__mulsf3_pse+0x64>
    7ae4:	9e 3f       	cpi	r25, 0xFE	; 254
    7ae6:	51 05       	cpc	r21, r1
    7ae8:	70 f0       	brcs	.+28     	; 0x7b06 <__mulsf3_pse+0x9c>
    7aea:	5c cf       	rjmp	.-328    	; 0x79a4 <__fp_inf>
    7aec:	a6 cf       	rjmp	.-180    	; 0x7a3a <__fp_szero>
    7aee:	5f 3f       	cpi	r21, 0xFF	; 255
    7af0:	ec f3       	brlt	.-6      	; 0x7aec <__mulsf3_pse+0x82>
    7af2:	98 3e       	cpi	r25, 0xE8	; 232
    7af4:	dc f3       	brlt	.-10     	; 0x7aec <__mulsf3_pse+0x82>
    7af6:	86 95       	lsr	r24
    7af8:	77 95       	ror	r23
    7afa:	67 95       	ror	r22
    7afc:	b7 95       	ror	r27
    7afe:	f7 95       	ror	r31
    7b00:	e7 95       	ror	r30
    7b02:	9f 5f       	subi	r25, 0xFF	; 255
    7b04:	c1 f7       	brne	.-16     	; 0x7af6 <__mulsf3_pse+0x8c>
    7b06:	fe 2b       	or	r31, r30
    7b08:	88 0f       	add	r24, r24
    7b0a:	91 1d       	adc	r25, r1
    7b0c:	96 95       	lsr	r25
    7b0e:	87 95       	ror	r24
    7b10:	97 f9       	bld	r25, 7
    7b12:	08 95       	ret

00007b14 <__mulsi3>:
    7b14:	62 9f       	mul	r22, r18
    7b16:	d0 01       	movw	r26, r0
    7b18:	73 9f       	mul	r23, r19
    7b1a:	f0 01       	movw	r30, r0
    7b1c:	82 9f       	mul	r24, r18
    7b1e:	e0 0d       	add	r30, r0
    7b20:	f1 1d       	adc	r31, r1
    7b22:	64 9f       	mul	r22, r20
    7b24:	e0 0d       	add	r30, r0
    7b26:	f1 1d       	adc	r31, r1
    7b28:	92 9f       	mul	r25, r18
    7b2a:	f0 0d       	add	r31, r0
    7b2c:	83 9f       	mul	r24, r19
    7b2e:	f0 0d       	add	r31, r0
    7b30:	74 9f       	mul	r23, r20
    7b32:	f0 0d       	add	r31, r0
    7b34:	65 9f       	mul	r22, r21
    7b36:	f0 0d       	add	r31, r0
    7b38:	99 27       	eor	r25, r25
    7b3a:	72 9f       	mul	r23, r18
    7b3c:	b0 0d       	add	r27, r0
    7b3e:	e1 1d       	adc	r30, r1
    7b40:	f9 1f       	adc	r31, r25
    7b42:	63 9f       	mul	r22, r19
    7b44:	b0 0d       	add	r27, r0
    7b46:	e1 1d       	adc	r30, r1
    7b48:	f9 1f       	adc	r31, r25
    7b4a:	bd 01       	movw	r22, r26
    7b4c:	cf 01       	movw	r24, r30
    7b4e:	11 24       	eor	r1, r1
    7b50:	08 95       	ret

00007b52 <__udivmodhi4>:
    7b52:	aa 1b       	sub	r26, r26
    7b54:	bb 1b       	sub	r27, r27
    7b56:	51 e1       	ldi	r21, 0x11	; 17
    7b58:	07 c0       	rjmp	.+14     	; 0x7b68 <__udivmodhi4_ep>

00007b5a <__udivmodhi4_loop>:
    7b5a:	aa 1f       	adc	r26, r26
    7b5c:	bb 1f       	adc	r27, r27
    7b5e:	a6 17       	cp	r26, r22
    7b60:	b7 07       	cpc	r27, r23
    7b62:	10 f0       	brcs	.+4      	; 0x7b68 <__udivmodhi4_ep>
    7b64:	a6 1b       	sub	r26, r22
    7b66:	b7 0b       	sbc	r27, r23

00007b68 <__udivmodhi4_ep>:
    7b68:	88 1f       	adc	r24, r24
    7b6a:	99 1f       	adc	r25, r25
    7b6c:	5a 95       	dec	r21
    7b6e:	a9 f7       	brne	.-22     	; 0x7b5a <__udivmodhi4_loop>
    7b70:	80 95       	com	r24
    7b72:	90 95       	com	r25
    7b74:	bc 01       	movw	r22, r24
    7b76:	cd 01       	movw	r24, r26
    7b78:	08 95       	ret

00007b7a <__divmodhi4>:
    7b7a:	97 fb       	bst	r25, 7
    7b7c:	09 2e       	mov	r0, r25
    7b7e:	07 26       	eor	r0, r23
    7b80:	0a d0       	rcall	.+20     	; 0x7b96 <__divmodhi4_neg1>
    7b82:	77 fd       	sbrc	r23, 7
    7b84:	04 d0       	rcall	.+8      	; 0x7b8e <__divmodhi4_neg2>
    7b86:	e5 df       	rcall	.-54     	; 0x7b52 <__udivmodhi4>
    7b88:	06 d0       	rcall	.+12     	; 0x7b96 <__divmodhi4_neg1>
    7b8a:	00 20       	and	r0, r0
    7b8c:	1a f4       	brpl	.+6      	; 0x7b94 <__divmodhi4_exit>

00007b8e <__divmodhi4_neg2>:
    7b8e:	70 95       	com	r23
    7b90:	61 95       	neg	r22
    7b92:	7f 4f       	sbci	r23, 0xFF	; 255

00007b94 <__divmodhi4_exit>:
    7b94:	08 95       	ret

00007b96 <__divmodhi4_neg1>:
    7b96:	f6 f7       	brtc	.-4      	; 0x7b94 <__divmodhi4_exit>
    7b98:	90 95       	com	r25
    7b9a:	81 95       	neg	r24
    7b9c:	9f 4f       	sbci	r25, 0xFF	; 255
    7b9e:	08 95       	ret

00007ba0 <__udivmodsi4>:
    7ba0:	a1 e2       	ldi	r26, 0x21	; 33
    7ba2:	1a 2e       	mov	r1, r26
    7ba4:	aa 1b       	sub	r26, r26
    7ba6:	bb 1b       	sub	r27, r27
    7ba8:	fd 01       	movw	r30, r26
    7baa:	0d c0       	rjmp	.+26     	; 0x7bc6 <__udivmodsi4_ep>

00007bac <__udivmodsi4_loop>:
    7bac:	aa 1f       	adc	r26, r26
    7bae:	bb 1f       	adc	r27, r27
    7bb0:	ee 1f       	adc	r30, r30
    7bb2:	ff 1f       	adc	r31, r31
    7bb4:	a2 17       	cp	r26, r18
    7bb6:	b3 07       	cpc	r27, r19
    7bb8:	e4 07       	cpc	r30, r20
    7bba:	f5 07       	cpc	r31, r21
    7bbc:	20 f0       	brcs	.+8      	; 0x7bc6 <__udivmodsi4_ep>
    7bbe:	a2 1b       	sub	r26, r18
    7bc0:	b3 0b       	sbc	r27, r19
    7bc2:	e4 0b       	sbc	r30, r20
    7bc4:	f5 0b       	sbc	r31, r21

00007bc6 <__udivmodsi4_ep>:
    7bc6:	66 1f       	adc	r22, r22
    7bc8:	77 1f       	adc	r23, r23
    7bca:	88 1f       	adc	r24, r24
    7bcc:	99 1f       	adc	r25, r25
    7bce:	1a 94       	dec	r1
    7bd0:	69 f7       	brne	.-38     	; 0x7bac <__udivmodsi4_loop>
    7bd2:	60 95       	com	r22
    7bd4:	70 95       	com	r23
    7bd6:	80 95       	com	r24
    7bd8:	90 95       	com	r25
    7bda:	9b 01       	movw	r18, r22
    7bdc:	ac 01       	movw	r20, r24
    7bde:	bd 01       	movw	r22, r26
    7be0:	cf 01       	movw	r24, r30
    7be2:	08 95       	ret

00007be4 <__tablejump2__>:
    7be4:	ee 0f       	add	r30, r30
    7be6:	ff 1f       	adc	r31, r31

00007be8 <__tablejump__>:
    7be8:	05 90       	lpm	r0, Z+
    7bea:	f4 91       	lpm	r31, Z+
    7bec:	e0 2d       	mov	r30, r0
    7bee:	09 94       	ijmp

00007bf0 <toupper>:
    7bf0:	91 11       	cpse	r25, r1
    7bf2:	08 95       	ret
    7bf4:	81 56       	subi	r24, 0x61	; 97
    7bf6:	8a 51       	subi	r24, 0x1A	; 26
    7bf8:	08 f4       	brcc	.+2      	; 0x7bfc <toupper+0xc>
    7bfa:	80 52       	subi	r24, 0x20	; 32
    7bfc:	85 58       	subi	r24, 0x85	; 133
    7bfe:	08 95       	ret

00007c00 <__do_global_dtors>:
    7c00:	18 e0       	ldi	r17, 0x08	; 8
    7c02:	c2 ed       	ldi	r28, 0xD2	; 210
    7c04:	d8 e0       	ldi	r29, 0x08	; 8
    7c06:	04 c0       	rjmp	.+8      	; 0x7c10 <.do_global_dtors_start>

00007c08 <.do_global_dtors_loop>:
    7c08:	fe 01       	movw	r30, r28
    7c0a:	0e 94 f4 3d 	call	0x7be8	; 0x7be8 <__tablejump__>
    7c0e:	22 96       	adiw	r28, 0x02	; 2

00007c10 <.do_global_dtors_start>:
    7c10:	c4 3d       	cpi	r28, 0xD4	; 212
    7c12:	d1 07       	cpc	r29, r17
    7c14:	c9 f7       	brne	.-14     	; 0x7c08 <.do_global_dtors_loop>
    7c16:	f8 94       	cli

00007c18 <__stop_program>:
    7c18:	ff cf       	rjmp	.-2      	; 0x7c18 <__stop_program>

GrowboxStringsLoader.cpp.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
 ******************************************************************************/

uint8_t EEPROMClass::read(int address)
{
	return eeprom_read_byte((unsigned char *) address);
}
   0:	0c 94 ac 00 	jmp	0x158	; 0x158 <__ctors_end>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
   4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
   8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
   c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  14:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  40:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__vector_16>
  44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  48:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__vector_18>
  4c:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__vector_19>
  50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>

00000068 <_ZZ11writeStringPcS_E3__c_1>:
  68:	3b 20 2f 2f 20 00                                   ; // .

0000006e <_ZZ11writeStringPcS_E3__c_0>:
  6e:	20 3d 20 30 78 00                                    = 0x.

00000074 <_ZZ11writeStringPcS_E3__c>:
  74:	63 6f 6e 73 74 20 77 6f 72 64 20 00                 const word .

00000080 <_ZZ5setupE3__c_4>:
  80:	23 65 6e 64 69 66 00                                #endif.

00000087 <_ZZ5setupE3__c_3>:
  87:	23 69 6e 63 6c 75 64 65 20 3c 45 45 50 52 4f 4d     #include <EEPROM
  97:	2e 68 3e 00                                         .h>.

0000009b <_ZZ5setupE3__c_2>:
  9b:	2f 2f 20 41 75 74 6f 20 67 65 6e 65 72 61 74 65     // Auto generate
  ab:	64 20 62 79 20 2e 2e 2f 47 72 6f 77 62 6f 78 53     d by ../GrowboxS
  bb:	74 72 69 6e 67 73 4c 6f 61 64 65 72 2f 47 72 6f     tringsLoader/Gro
  cb:	77 62 6f 78 53 74 72 69 6e 67 73 4c 6f 61 64 65     wboxStringsLoade
  db:	72 2e 69 6e 6f 20 64 6f 20 6e 6f 74 20 65 64 69     r.ino do not edi
  eb:	74 20 64 69 72 65 63 74 6c 79 00                    t directly.

000000f6 <_ZZ5setupE3__c_1>:
  f6:	23 64 65 66 69 6e 65 20 47 42 5f 45 45 50 52 4f     #define GB_EEPRO
 106:	4d 53 74 72 69 6e 67 73 5f 68 00                    MStrings_h.

00000111 <_ZZ5setupE3__c_0>:
 111:	23 69 66 6e 64 65 66 20 47 42 5f 45 45 50 52 4f     #ifndef GB_EEPRO
 121:	4d 53 74 72 69 6e 67 73 5f 68 00                    MStrings_h.

0000012c <_ZZ5setupE3__c>:
 12c:	53 61 76 65 20 6f 75 74 70 75 74 20 61 73 20 2e     Save output as .
 13c:	2e 2f 47 72 6f 77 62 6f 78 2f 45 45 50 52 4f 4d     ./Growbox/EEPROM
 14c:	53 74 72 69 6e 67 73 2e 68 00                       Strings.h.

00000156 <__ctors_start>:
 156:	ac 03       	fmulsu	r18, r20

00000158 <__ctors_end>:
 158:	11 24       	eor	r1, r1
 15a:	1f be       	out	0x3f, r1	; 63
 15c:	cf ef       	ldi	r28, 0xFF	; 255
 15e:	d8 e0       	ldi	r29, 0x08	; 8
 160:	de bf       	out	0x3e, r29	; 62
 162:	cd bf       	out	0x3d, r28	; 61

00000164 <__do_copy_data>:
 164:	14 e0       	ldi	r17, 0x04	; 4
 166:	a0 e0       	ldi	r26, 0x00	; 0
 168:	b1 e0       	ldi	r27, 0x01	; 1
 16a:	e8 e2       	ldi	r30, 0x28	; 40
 16c:	fc e0       	ldi	r31, 0x0C	; 12
 16e:	02 c0       	rjmp	.+4      	; 0x174 <.do_copy_data_start>

00000170 <.do_copy_data_loop>:
 170:	05 90       	lpm	r0, Z+
 172:	0d 92       	st	X+, r0

00000174 <.do_copy_data_start>:
 174:	a4 35       	cpi	r26, 0x54	; 84
 176:	b1 07       	cpc	r27, r17
 178:	d9 f7       	brne	.-10     	; 0x170 <.do_copy_data_loop>

0000017a <__do_clear_bss>:
 17a:	15 e0       	ldi	r17, 0x05	; 5
 17c:	a4 e5       	ldi	r26, 0x54	; 84
 17e:	b4 e0       	ldi	r27, 0x04	; 4
 180:	01 c0       	rjmp	.+2      	; 0x184 <.do_clear_bss_start>

00000182 <.do_clear_bss_loop>:
 182:	1d 92       	st	X+, r1

00000184 <.do_clear_bss_start>:
 184:	aa 30       	cpi	r26, 0x0A	; 10
 186:	b1 07       	cpc	r27, r17
 188:	e1 f7       	brne	.-8      	; 0x182 <.do_clear_bss_loop>

0000018a <__do_global_ctors>:
 18a:	11 e0       	ldi	r17, 0x01	; 1
 18c:	c8 e5       	ldi	r28, 0x58	; 88
 18e:	d1 e0       	ldi	r29, 0x01	; 1
 190:	04 c0       	rjmp	.+8      	; 0x19a <.do_global_ctors_start>

00000192 <.do_global_ctors_loop>:
 192:	22 97       	sbiw	r28, 0x02	; 2
 194:	fe 01       	movw	r30, r28
 196:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__tablejump__>

0000019a <.do_global_ctors_start>:
 19a:	c6 35       	cpi	r28, 0x56	; 86
 19c:	d1 07       	cpc	r29, r17
 19e:	c9 f7       	brne	.-14     	; 0x192 <.do_global_ctors_loop>
 1a0:	0e 94 02 04 	call	0x804	; 0x804 <main>
 1a4:	0c 94 12 06 	jmp	0xc24	; 0xc24 <_exit>

000001a8 <__bad_interrupt>:
 1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <loop>:
 1ac:	08 95       	ret

000001ae <_Z11writeStringPcS_>:
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	8c 01       	movw	r16, r24
 1b8:	eb 01       	movw	r28, r22
 1ba:	8f ed       	ldi	r24, 0xDF	; 223
 1bc:	94 e0       	ldi	r25, 0x04	; 4
 1be:	64 e7       	ldi	r22, 0x74	; 116
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	0e 94 3b 04 	call	0x876	; 0x876 <_ZN5Print5printEPK19__FlashStringHelper>
 1c6:	8f ed       	ldi	r24, 0xDF	; 223
 1c8:	94 e0       	ldi	r25, 0x04	; 4
 1ca:	b8 01       	movw	r22, r16
 1cc:	0e 94 32 05 	call	0xa64	; 0xa64 <_ZN5Print5printEPKc>
 1d0:	8f ed       	ldi	r24, 0xDF	; 223
 1d2:	94 e0       	ldi	r25, 0x04	; 4
 1d4:	6e e6       	ldi	r22, 0x6E	; 110
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	0e 94 3b 04 	call	0x876	; 0x876 <_ZN5Print5printEPK19__FlashStringHelper>
 1dc:	60 91 54 04 	lds	r22, 0x0454
 1e0:	70 91 55 04 	lds	r23, 0x0455
 1e4:	8f ed       	ldi	r24, 0xDF	; 223
 1e6:	94 e0       	ldi	r25, 0x04	; 4
 1e8:	40 e1       	ldi	r20, 0x10	; 16
 1ea:	50 e0       	ldi	r21, 0x00	; 0
 1ec:	0e 94 21 05 	call	0xa42	; 0xa42 <_ZN5Print5printEji>
 1f0:	8f ed       	ldi	r24, 0xDF	; 223
 1f2:	94 e0       	ldi	r25, 0x04	; 4
 1f4:	68 e6       	ldi	r22, 0x68	; 104
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	0e 94 3b 04 	call	0x876	; 0x876 <_ZN5Print5printEPK19__FlashStringHelper>
 1fc:	8f ed       	ldi	r24, 0xDF	; 223
 1fe:	94 e0       	ldi	r25, 0x04	; 4
 200:	be 01       	movw	r22, r28
 202:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZN5Print7printlnEPKc>
 206:	0d c0       	rjmp	.+26     	; 0x222 <_Z11writeStringPcS_+0x74>
 208:	6f 5f       	subi	r22, 0xFF	; 255
 20a:	7f 4f       	sbci	r23, 0xFF	; 255
 20c:	70 93 55 04 	sts	0x0455, r23
 210:	60 93 54 04 	sts	0x0454, r22
 214:	61 50       	subi	r22, 0x01	; 1
 216:	70 40       	sbci	r23, 0x00	; 0
 218:	49 91       	ld	r20, Y+
 21a:	86 e5       	ldi	r24, 0x56	; 86
 21c:	94 e0       	ldi	r25, 0x04	; 4
 21e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_ZN11EEPROMClass5writeEih>
 222:	88 81       	ld	r24, Y
 224:	60 91 54 04 	lds	r22, 0x0454
 228:	70 91 55 04 	lds	r23, 0x0455
 22c:	88 23       	and	r24, r24
 22e:	61 f7       	brne	.-40     	; 0x208 <_Z11writeStringPcS_+0x5a>
 230:	6f 5f       	subi	r22, 0xFF	; 255
 232:	7f 4f       	sbci	r23, 0xFF	; 255
 234:	70 93 55 04 	sts	0x0455, r23
 238:	60 93 54 04 	sts	0x0454, r22
 23c:	61 50       	subi	r22, 0x01	; 1
 23e:	70 40       	sbci	r23, 0x00	; 0
 240:	86 e5       	ldi	r24, 0x56	; 86
 242:	94 e0       	ldi	r25, 0x04	; 4
 244:	40 e0       	ldi	r20, 0x00	; 0
 246:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_ZN11EEPROMClass5writeEih>
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	1f 91       	pop	r17
 250:	0f 91       	pop	r16
 252:	08 95       	ret

00000254 <setup>:
 254:	8f ed       	ldi	r24, 0xDF	; 223
 256:	94 e0       	ldi	r25, 0x04	; 4
 258:	40 e0       	ldi	r20, 0x00	; 0
 25a:	52 ec       	ldi	r21, 0xC2	; 194
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	0e 94 79 02 	call	0x4f2	; 0x4f2 <_ZN14HardwareSerial5beginEm>
 264:	8f ed       	ldi	r24, 0xDF	; 223
 266:	94 e0       	ldi	r25, 0x04	; 4
 268:	0e 94 aa 03 	call	0x754	; 0x754 <_ZN14HardwareSerialcvbEv>
 26c:	88 23       	and	r24, r24
 26e:	d1 f3       	breq	.-12     	; 0x264 <setup+0x10>
 270:	8f ed       	ldi	r24, 0xDF	; 223
 272:	94 e0       	ldi	r25, 0x04	; 4
 274:	6c e2       	ldi	r22, 0x2C	; 44
 276:	71 e0       	ldi	r23, 0x01	; 1
 278:	0e 94 7e 04 	call	0x8fc	; 0x8fc <_ZN5Print7printlnEPK19__FlashStringHelper>
 27c:	8f ed       	ldi	r24, 0xDF	; 223
 27e:	94 e0       	ldi	r25, 0x04	; 4
 280:	0e 94 5e 04 	call	0x8bc	; 0x8bc <_ZN5Print7printlnEv>
 284:	8f ed       	ldi	r24, 0xDF	; 223
 286:	94 e0       	ldi	r25, 0x04	; 4
 288:	0e 94 5e 04 	call	0x8bc	; 0x8bc <_ZN5Print7printlnEv>
 28c:	8f ed       	ldi	r24, 0xDF	; 223
 28e:	94 e0       	ldi	r25, 0x04	; 4
 290:	61 e1       	ldi	r22, 0x11	; 17
 292:	71 e0       	ldi	r23, 0x01	; 1
 294:	0e 94 7e 04 	call	0x8fc	; 0x8fc <_ZN5Print7printlnEPK19__FlashStringHelper>
 298:	8f ed       	ldi	r24, 0xDF	; 223
 29a:	94 e0       	ldi	r25, 0x04	; 4
 29c:	66 ef       	ldi	r22, 0xF6	; 246
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	0e 94 7e 04 	call	0x8fc	; 0x8fc <_ZN5Print7printlnEPK19__FlashStringHelper>
 2a4:	8f ed       	ldi	r24, 0xDF	; 223
 2a6:	94 e0       	ldi	r25, 0x04	; 4
 2a8:	6b e9       	ldi	r22, 0x9B	; 155
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	0e 94 7e 04 	call	0x8fc	; 0x8fc <_ZN5Print7printlnEPK19__FlashStringHelper>
 2b0:	8f ed       	ldi	r24, 0xDF	; 223
 2b2:	94 e0       	ldi	r25, 0x04	; 4
 2b4:	0e 94 5e 04 	call	0x8bc	; 0x8bc <_ZN5Print7printlnEv>
 2b8:	8f ed       	ldi	r24, 0xDF	; 223
 2ba:	94 e0       	ldi	r25, 0x04	; 4
 2bc:	67 e8       	ldi	r22, 0x87	; 135
 2be:	70 e0       	ldi	r23, 0x00	; 0
 2c0:	0e 94 7e 04 	call	0x8fc	; 0x8fc <_ZN5Print7printlnEPK19__FlashStringHelper>
 2c4:	8f ed       	ldi	r24, 0xDF	; 223
 2c6:	94 e0       	ldi	r25, 0x04	; 4
 2c8:	0e 94 5e 04 	call	0x8bc	; 0x8bc <_ZN5Print7printlnEv>
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	66 e2       	ldi	r22, 0x26	; 38
 2d2:	71 e0       	ldi	r23, 0x01	; 1
 2d4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z11writeStringPcS_>
 2d8:	87 e3       	ldi	r24, 0x37	; 55
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	62 e6       	ldi	r22, 0x62	; 98
 2de:	71 e0       	ldi	r23, 0x01	; 1
 2e0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z11writeStringPcS_>
 2e4:	88 ea       	ldi	r24, 0xA8	; 168
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	6a ec       	ldi	r22, 0xCA	; 202
 2ea:	71 e0       	ldi	r23, 0x01	; 1
 2ec:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z11writeStringPcS_>
 2f0:	84 ee       	ldi	r24, 0xE4	; 228
 2f2:	91 e0       	ldi	r25, 0x01	; 1
 2f4:	64 e0       	ldi	r22, 0x04	; 4
 2f6:	72 e0       	ldi	r23, 0x02	; 2
 2f8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z11writeStringPcS_>
 2fc:	8a e2       	ldi	r24, 0x2A	; 42
 2fe:	92 e0       	ldi	r25, 0x02	; 2
 300:	60 e5       	ldi	r22, 0x50	; 80
 302:	72 e0       	ldi	r23, 0x02	; 2
 304:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z11writeStringPcS_>
 308:	86 e7       	ldi	r24, 0x76	; 118
 30a:	92 e0       	ldi	r25, 0x02	; 2
 30c:	63 e9       	ldi	r22, 0x93	; 147
 30e:	72 e0       	ldi	r23, 0x02	; 2
 310:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z11writeStringPcS_>
 314:	86 ea       	ldi	r24, 0xA6	; 166
 316:	92 e0       	ldi	r25, 0x02	; 2
 318:	6b ec       	ldi	r22, 0xCB	; 203
 31a:	72 e0       	ldi	r23, 0x02	; 2
 31c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z11writeStringPcS_>
 320:	8b ee       	ldi	r24, 0xEB	; 235
 322:	92 e0       	ldi	r25, 0x02	; 2
 324:	6e e0       	ldi	r22, 0x0E	; 14
 326:	73 e0       	ldi	r23, 0x03	; 3
 328:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z11writeStringPcS_>
 32c:	8b e1       	ldi	r24, 0x1B	; 27
 32e:	93 e0       	ldi	r25, 0x03	; 3
 330:	69 e3       	ldi	r22, 0x39	; 57
 332:	73 e0       	ldi	r23, 0x03	; 3
 334:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z11writeStringPcS_>
 338:	80 e4       	ldi	r24, 0x40	; 64
 33a:	93 e0       	ldi	r25, 0x03	; 3
 33c:	6b e5       	ldi	r22, 0x5B	; 91
 33e:	73 e0       	ldi	r23, 0x03	; 3
 340:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z11writeStringPcS_>
 344:	8f ed       	ldi	r24, 0xDF	; 223
 346:	94 e0       	ldi	r25, 0x04	; 4
 348:	0e 94 5e 04 	call	0x8bc	; 0x8bc <_ZN5Print7printlnEv>
 34c:	8f ed       	ldi	r24, 0xDF	; 223
 34e:	94 e0       	ldi	r25, 0x04	; 4
 350:	67 e9       	ldi	r22, 0x97	; 151
 352:	73 e0       	ldi	r23, 0x03	; 3
 354:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZN5Print7printlnEPKc>
 358:	8f ed       	ldi	r24, 0xDF	; 223
 35a:	94 e0       	ldi	r25, 0x04	; 4
 35c:	65 ec       	ldi	r22, 0xC5	; 197
 35e:	73 e0       	ldi	r23, 0x03	; 3
 360:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZN5Print7printlnEPKc>
 364:	8f ed       	ldi	r24, 0xDF	; 223
 366:	94 e0       	ldi	r25, 0x04	; 4
 368:	63 ed       	ldi	r22, 0xD3	; 211
 36a:	73 e0       	ldi	r23, 0x03	; 3
 36c:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZN5Print7printlnEPKc>
 370:	8f ed       	ldi	r24, 0xDF	; 223
 372:	94 e0       	ldi	r25, 0x04	; 4
 374:	65 ef       	ldi	r22, 0xF5	; 245
 376:	73 e0       	ldi	r23, 0x03	; 3
 378:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZN5Print7printlnEPKc>
 37c:	8f ed       	ldi	r24, 0xDF	; 223
 37e:	94 e0       	ldi	r25, 0x04	; 4
 380:	62 e0       	ldi	r22, 0x02	; 2
 382:	74 e0       	ldi	r23, 0x04	; 4
 384:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZN5Print7printlnEPKc>
 388:	8f ed       	ldi	r24, 0xDF	; 223
 38a:	94 e0       	ldi	r25, 0x04	; 4
 38c:	60 e1       	ldi	r22, 0x10	; 16
 38e:	74 e0       	ldi	r23, 0x04	; 4
 390:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZN5Print7printlnEPKc>
 394:	8f ed       	ldi	r24, 0xDF	; 223
 396:	94 e0       	ldi	r25, 0x04	; 4
 398:	6f e2       	ldi	r22, 0x2F	; 47
 39a:	74 e0       	ldi	r23, 0x04	; 4
 39c:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZN5Print7printlnEPKc>
 3a0:	8f ed       	ldi	r24, 0xDF	; 223
 3a2:	94 e0       	ldi	r25, 0x04	; 4
 3a4:	63 e3       	ldi	r22, 0x33	; 51
 3a6:	74 e0       	ldi	r23, 0x04	; 4
 3a8:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZN5Print7printlnEPKc>
 3ac:	8f ed       	ldi	r24, 0xDF	; 223
 3ae:	94 e0       	ldi	r25, 0x04	; 4
 3b0:	61 e4       	ldi	r22, 0x41	; 65
 3b2:	74 e0       	ldi	r23, 0x04	; 4
 3b4:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZN5Print7printlnEPKc>
 3b8:	8f ed       	ldi	r24, 0xDF	; 223
 3ba:	94 e0       	ldi	r25, 0x04	; 4
 3bc:	60 e8       	ldi	r22, 0x80	; 128
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	0e 94 7e 04 	call	0x8fc	; 0x8fc <_ZN5Print7printlnEPK19__FlashStringHelper>
 3c4:	08 95       	ret

000003c6 <_ZN11EEPROMClass5writeEih>:
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
 3c6:	f9 99       	sbic	0x1f, 1	; 31
 3c8:	fe cf       	rjmp	.-4      	; 0x3c6 <_ZN11EEPROMClass5writeEih>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
 3ca:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 3cc:	72 bd       	out	0x22, r23	; 34
 3ce:	61 bd       	out	0x21, r22	; 33
#endif
    EEDR = __value;
 3d0:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	f8 94       	cli
 3d6:	fa 9a       	sbi	0x1f, 2	; 31
 3d8:	f9 9a       	sbi	0x1f, 1	; 31
 3da:	0f be       	out	0x3f, r0	; 63

void EEPROMClass::write(int address, uint8_t value)
{
	eeprom_write_byte((unsigned char *) address, value);
}
 3dc:	08 95       	ret

000003de <_Z11serialEventv>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
 3de:	08 95       	ret

000003e0 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
 3e0:	1f 92       	push	r1
 3e2:	0f 92       	push	r0
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	0f 92       	push	r0
 3e8:	11 24       	eor	r1, r1
 3ea:	2f 93       	push	r18
 3ec:	3f 93       	push	r19
 3ee:	4f 93       	push	r20
 3f0:	8f 93       	push	r24
 3f2:	9f 93       	push	r25
 3f4:	ef 93       	push	r30
 3f6:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
 3f8:	80 91 c0 00 	lds	r24, 0x00C0
 3fc:	82 fd       	sbrc	r24, 2
 3fe:	1d c0       	rjmp	.+58     	; 0x43a <__vector_18+0x5a>
      unsigned char c = UDR0;
 400:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
 404:	20 91 97 04 	lds	r18, 0x0497
 408:	30 91 98 04 	lds	r19, 0x0498

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
 40c:	2f 5f       	subi	r18, 0xFF	; 255
 40e:	3f 4f       	sbci	r19, 0xFF	; 255
 410:	2f 73       	andi	r18, 0x3F	; 63
 412:	30 70       	andi	r19, 0x00	; 0
 414:	80 91 99 04 	lds	r24, 0x0499
 418:	90 91 9a 04 	lds	r25, 0x049A
 41c:	28 17       	cp	r18, r24
 41e:	39 07       	cpc	r19, r25
 420:	71 f0       	breq	.+28     	; 0x43e <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
 422:	e0 91 97 04 	lds	r30, 0x0497
 426:	f0 91 98 04 	lds	r31, 0x0498
 42a:	e9 5a       	subi	r30, 0xA9	; 169
 42c:	fb 4f       	sbci	r31, 0xFB	; 251
 42e:	40 83       	st	Z, r20
    buffer->head = i;
 430:	30 93 98 04 	sts	0x0498, r19
 434:	20 93 97 04 	sts	0x0497, r18
 438:	02 c0       	rjmp	.+4      	; 0x43e <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
 43a:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
 43e:	ff 91       	pop	r31
 440:	ef 91       	pop	r30
 442:	9f 91       	pop	r25
 444:	8f 91       	pop	r24
 446:	4f 91       	pop	r20
 448:	3f 91       	pop	r19
 44a:	2f 91       	pop	r18
 44c:	0f 90       	pop	r0
 44e:	0f be       	out	0x3f, r0	; 63
 450:	0f 90       	pop	r0
 452:	1f 90       	pop	r1
 454:	18 95       	reti

00000456 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
 456:	e0 91 eb 04 	lds	r30, 0x04EB
 45a:	f0 91 ec 04 	lds	r31, 0x04EC
 45e:	e0 5c       	subi	r30, 0xC0	; 192
 460:	ff 4f       	sbci	r31, 0xFF	; 255
 462:	81 91       	ld	r24, Z+
 464:	91 91       	ld	r25, Z+
 466:	20 81       	ld	r18, Z
 468:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
 46a:	82 1b       	sub	r24, r18
 46c:	93 0b       	sbc	r25, r19
 46e:	8f 73       	andi	r24, 0x3F	; 63
 470:	90 70       	andi	r25, 0x00	; 0
 472:	89 2b       	or	r24, r25
 474:	11 f0       	breq	.+4      	; 0x47a <_Z14serialEventRunv+0x24>
 476:	0e 94 ef 01 	call	0x3de	; 0x3de <_Z11serialEventv>
 47a:	08 95       	ret

0000047c <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
 47c:	1f 92       	push	r1
 47e:	0f 92       	push	r0
 480:	0f b6       	in	r0, 0x3f	; 63
 482:	0f 92       	push	r0
 484:	11 24       	eor	r1, r1
 486:	2f 93       	push	r18
 488:	3f 93       	push	r19
 48a:	8f 93       	push	r24
 48c:	9f 93       	push	r25
 48e:	ef 93       	push	r30
 490:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
 492:	20 91 db 04 	lds	r18, 0x04DB
 496:	30 91 dc 04 	lds	r19, 0x04DC
 49a:	80 91 dd 04 	lds	r24, 0x04DD
 49e:	90 91 de 04 	lds	r25, 0x04DE
 4a2:	28 17       	cp	r18, r24
 4a4:	39 07       	cpc	r19, r25
 4a6:	31 f4       	brne	.+12     	; 0x4b4 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
 4a8:	80 91 c1 00 	lds	r24, 0x00C1
 4ac:	8f 7d       	andi	r24, 0xDF	; 223
 4ae:	80 93 c1 00 	sts	0x00C1, r24
 4b2:	14 c0       	rjmp	.+40     	; 0x4dc <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 4b4:	e0 91 dd 04 	lds	r30, 0x04DD
 4b8:	f0 91 de 04 	lds	r31, 0x04DE
 4bc:	e5 56       	subi	r30, 0x65	; 101
 4be:	fb 4f       	sbci	r31, 0xFB	; 251
 4c0:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
 4c2:	80 91 dd 04 	lds	r24, 0x04DD
 4c6:	90 91 de 04 	lds	r25, 0x04DE
 4ca:	01 96       	adiw	r24, 0x01	; 1
 4cc:	8f 73       	andi	r24, 0x3F	; 63
 4ce:	90 70       	andi	r25, 0x00	; 0
 4d0:	90 93 de 04 	sts	0x04DE, r25
 4d4:	80 93 dd 04 	sts	0x04DD, r24
	
  #if defined(UDR0)
    UDR0 = c;
 4d8:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
 4dc:	ff 91       	pop	r31
 4de:	ef 91       	pop	r30
 4e0:	9f 91       	pop	r25
 4e2:	8f 91       	pop	r24
 4e4:	3f 91       	pop	r19
 4e6:	2f 91       	pop	r18
 4e8:	0f 90       	pop	r0
 4ea:	0f be       	out	0x3f, r0	; 63
 4ec:	0f 90       	pop	r0
 4ee:	1f 90       	pop	r1
 4f0:	18 95       	reti

000004f2 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
 4f2:	af 92       	push	r10
 4f4:	bf 92       	push	r11
 4f6:	df 92       	push	r13
 4f8:	ef 92       	push	r14
 4fa:	ff 92       	push	r15
 4fc:	0f 93       	push	r16
 4fe:	1f 93       	push	r17
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
 504:	ec 01       	movw	r28, r24
 506:	7a 01       	movw	r14, r20
 508:	8b 01       	movw	r16, r22
 50a:	dd 24       	eor	r13, r13
 50c:	40 30       	cpi	r20, 0x00	; 0
 50e:	81 ee       	ldi	r24, 0xE1	; 225
 510:	58 07       	cpc	r21, r24
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	68 07       	cpc	r22, r24
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	78 07       	cpc	r23, r24
 51a:	11 f0       	breq	.+4      	; 0x520 <_ZN14HardwareSerial5beginEm+0x2e>
 51c:	dd 24       	eor	r13, r13
 51e:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
 520:	91 e0       	ldi	r25, 0x01	; 1
 522:	a9 2e       	mov	r10, r25
 524:	b1 2c       	mov	r11, r1
 526:	ec 89       	ldd	r30, Y+20	; 0x14
 528:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
 52a:	dd 20       	and	r13, r13
 52c:	69 f0       	breq	.+26     	; 0x548 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
 52e:	c5 01       	movw	r24, r10
 530:	08 a0       	ldd	r0, Y+32	; 0x20
 532:	02 c0       	rjmp	.+4      	; 0x538 <_ZN14HardwareSerial5beginEm+0x46>
 534:	88 0f       	add	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	0a 94       	dec	r0
 53a:	e2 f7       	brpl	.-8      	; 0x534 <_ZN14HardwareSerial5beginEm+0x42>
 53c:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
 53e:	60 e0       	ldi	r22, 0x00	; 0
 540:	79 e0       	ldi	r23, 0x09	; 9
 542:	8d e3       	ldi	r24, 0x3D	; 61
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	05 c0       	rjmp	.+10     	; 0x552 <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
 548:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 54a:	60 e8       	ldi	r22, 0x80	; 128
 54c:	74 e8       	ldi	r23, 0x84	; 132
 54e:	8e e1       	ldi	r24, 0x1E	; 30
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	a8 01       	movw	r20, r16
 554:	97 01       	movw	r18, r14
 556:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__udivmodsi4>
 55a:	21 50       	subi	r18, 0x01	; 1
 55c:	30 40       	sbci	r19, 0x00	; 0
 55e:	40 40       	sbci	r20, 0x00	; 0
 560:	50 40       	sbci	r21, 0x00	; 0
 562:	56 95       	lsr	r21
 564:	47 95       	ror	r20
 566:	37 95       	ror	r19
 568:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
 56a:	80 e1       	ldi	r24, 0x10	; 16
 56c:	20 30       	cpi	r18, 0x00	; 0
 56e:	38 07       	cpc	r19, r24
 570:	20 f0       	brcs	.+8      	; 0x57a <_ZN14HardwareSerial5beginEm+0x88>
 572:	dd 20       	and	r13, r13
 574:	11 f0       	breq	.+4      	; 0x57a <_ZN14HardwareSerial5beginEm+0x88>
 576:	dd 24       	eor	r13, r13
 578:	d6 cf       	rjmp	.-84     	; 0x526 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 57a:	e8 89       	ldd	r30, Y+16	; 0x10
 57c:	f9 89       	ldd	r31, Y+17	; 0x11
 57e:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 580:	ea 89       	ldd	r30, Y+18	; 0x12
 582:	fb 89       	ldd	r31, Y+19	; 0x13
 584:	20 83       	st	Z, r18

  transmitting = false;
 586:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
 588:	ee 89       	ldd	r30, Y+22	; 0x16
 58a:	ff 89       	ldd	r31, Y+23	; 0x17
 58c:	40 81       	ld	r20, Z
 58e:	21 e0       	ldi	r18, 0x01	; 1
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	c9 01       	movw	r24, r18
 594:	0c 8c       	ldd	r0, Y+28	; 0x1c
 596:	02 c0       	rjmp	.+4      	; 0x59c <_ZN14HardwareSerial5beginEm+0xaa>
 598:	88 0f       	add	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	0a 94       	dec	r0
 59e:	e2 f7       	brpl	.-8      	; 0x598 <_ZN14HardwareSerial5beginEm+0xa6>
 5a0:	48 2b       	or	r20, r24
 5a2:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
 5a4:	ee 89       	ldd	r30, Y+22	; 0x16
 5a6:	ff 89       	ldd	r31, Y+23	; 0x17
 5a8:	40 81       	ld	r20, Z
 5aa:	c9 01       	movw	r24, r18
 5ac:	0d 8c       	ldd	r0, Y+29	; 0x1d
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <_ZN14HardwareSerial5beginEm+0xc2>
 5b0:	88 0f       	add	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	0a 94       	dec	r0
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <_ZN14HardwareSerial5beginEm+0xbe>
 5b8:	48 2b       	or	r20, r24
 5ba:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
 5bc:	ee 89       	ldd	r30, Y+22	; 0x16
 5be:	ff 89       	ldd	r31, Y+23	; 0x17
 5c0:	40 81       	ld	r20, Z
 5c2:	c9 01       	movw	r24, r18
 5c4:	0e 8c       	ldd	r0, Y+30	; 0x1e
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <_ZN14HardwareSerial5beginEm+0xda>
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	0a 94       	dec	r0
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <_ZN14HardwareSerial5beginEm+0xd6>
 5d0:	48 2b       	or	r20, r24
 5d2:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
 5d4:	ee 89       	ldd	r30, Y+22	; 0x16
 5d6:	ff 89       	ldd	r31, Y+23	; 0x17
 5d8:	80 81       	ld	r24, Z
 5da:	0f 8c       	ldd	r0, Y+31	; 0x1f
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <_ZN14HardwareSerial5beginEm+0xf0>
 5de:	22 0f       	add	r18, r18
 5e0:	33 1f       	adc	r19, r19
 5e2:	0a 94       	dec	r0
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <_ZN14HardwareSerial5beginEm+0xec>
 5e6:	20 95       	com	r18
 5e8:	28 23       	and	r18, r24
 5ea:	20 83       	st	Z, r18
}
 5ec:	df 91       	pop	r29
 5ee:	cf 91       	pop	r28
 5f0:	1f 91       	pop	r17
 5f2:	0f 91       	pop	r16
 5f4:	ff 90       	pop	r15
 5f6:	ef 90       	pop	r14
 5f8:	df 90       	pop	r13
 5fa:	bf 90       	pop	r11
 5fc:	af 90       	pop	r10
 5fe:	08 95       	ret

00000600 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
 600:	dc 01       	movw	r26, r24
 602:	1c 96       	adiw	r26, 0x0c	; 12
 604:	ed 91       	ld	r30, X+
 606:	fc 91       	ld	r31, X
 608:	1d 97       	sbiw	r26, 0x0d	; 13
 60a:	e0 5c       	subi	r30, 0xC0	; 192
 60c:	ff 4f       	sbci	r31, 0xFF	; 255
 60e:	21 91       	ld	r18, Z+
 610:	31 91       	ld	r19, Z+
 612:	80 81       	ld	r24, Z
 614:	91 81       	ldd	r25, Z+1	; 0x01
 616:	28 1b       	sub	r18, r24
 618:	39 0b       	sbc	r19, r25
 61a:	2f 73       	andi	r18, 0x3F	; 63
 61c:	30 70       	andi	r19, 0x00	; 0
}
 61e:	c9 01       	movw	r24, r18
 620:	08 95       	ret

00000622 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
 622:	dc 01       	movw	r26, r24
 624:	1c 96       	adiw	r26, 0x0c	; 12
 626:	ed 91       	ld	r30, X+
 628:	fc 91       	ld	r31, X
 62a:	1d 97       	sbiw	r26, 0x0d	; 13
 62c:	e0 5c       	subi	r30, 0xC0	; 192
 62e:	ff 4f       	sbci	r31, 0xFF	; 255
 630:	20 81       	ld	r18, Z
 632:	31 81       	ldd	r19, Z+1	; 0x01
 634:	e0 54       	subi	r30, 0x40	; 64
 636:	f0 40       	sbci	r31, 0x00	; 0
 638:	df 01       	movw	r26, r30
 63a:	ae 5b       	subi	r26, 0xBE	; 190
 63c:	bf 4f       	sbci	r27, 0xFF	; 255
 63e:	8d 91       	ld	r24, X+
 640:	9c 91       	ld	r25, X
 642:	11 97       	sbiw	r26, 0x01	; 1
 644:	28 17       	cp	r18, r24
 646:	39 07       	cpc	r19, r25
 648:	19 f4       	brne	.+6      	; 0x650 <_ZN14HardwareSerial4peekEv+0x2e>
 64a:	2f ef       	ldi	r18, 0xFF	; 255
 64c:	3f ef       	ldi	r19, 0xFF	; 255
 64e:	07 c0       	rjmp	.+14     	; 0x65e <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
 650:	8d 91       	ld	r24, X+
 652:	9c 91       	ld	r25, X
 654:	e8 0f       	add	r30, r24
 656:	f9 1f       	adc	r31, r25
 658:	80 81       	ld	r24, Z
 65a:	28 2f       	mov	r18, r24
 65c:	30 e0       	ldi	r19, 0x00	; 0
  }
}
 65e:	c9 01       	movw	r24, r18
 660:	08 95       	ret

00000662 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
 662:	dc 01       	movw	r26, r24
 664:	1c 96       	adiw	r26, 0x0c	; 12
 666:	ed 91       	ld	r30, X+
 668:	fc 91       	ld	r31, X
 66a:	1d 97       	sbiw	r26, 0x0d	; 13
 66c:	e0 5c       	subi	r30, 0xC0	; 192
 66e:	ff 4f       	sbci	r31, 0xFF	; 255
 670:	20 81       	ld	r18, Z
 672:	31 81       	ldd	r19, Z+1	; 0x01
 674:	e0 54       	subi	r30, 0x40	; 64
 676:	f0 40       	sbci	r31, 0x00	; 0
 678:	df 01       	movw	r26, r30
 67a:	ae 5b       	subi	r26, 0xBE	; 190
 67c:	bf 4f       	sbci	r27, 0xFF	; 255
 67e:	8d 91       	ld	r24, X+
 680:	9c 91       	ld	r25, X
 682:	11 97       	sbiw	r26, 0x01	; 1
 684:	28 17       	cp	r18, r24
 686:	39 07       	cpc	r19, r25
 688:	19 f4       	brne	.+6      	; 0x690 <_ZN14HardwareSerial4readEv+0x2e>
 68a:	2f ef       	ldi	r18, 0xFF	; 255
 68c:	3f ef       	ldi	r19, 0xFF	; 255
 68e:	10 c0       	rjmp	.+32     	; 0x6b0 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 690:	8d 91       	ld	r24, X+
 692:	9c 91       	ld	r25, X
 694:	11 97       	sbiw	r26, 0x01	; 1
 696:	e8 0f       	add	r30, r24
 698:	f9 1f       	adc	r31, r25
 69a:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
 69c:	8d 91       	ld	r24, X+
 69e:	9c 91       	ld	r25, X
 6a0:	11 97       	sbiw	r26, 0x01	; 1
 6a2:	01 96       	adiw	r24, 0x01	; 1
 6a4:	8f 73       	andi	r24, 0x3F	; 63
 6a6:	90 70       	andi	r25, 0x00	; 0
 6a8:	11 96       	adiw	r26, 0x01	; 1
 6aa:	9c 93       	st	X, r25
 6ac:	8e 93       	st	-X, r24
    return c;
 6ae:	30 e0       	ldi	r19, 0x00	; 0
  }
}
 6b0:	c9 01       	movw	r24, r18
 6b2:	08 95       	ret

000006b4 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
 6b4:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
 6b6:	91 96       	adiw	r26, 0x21	; 33
 6b8:	8c 91       	ld	r24, X
 6ba:	91 97       	sbiw	r26, 0x21	; 33
 6bc:	88 23       	and	r24, r24
 6be:	39 f0       	breq	.+14     	; 0x6ce <_ZN14HardwareSerial5flushEv+0x1a>
 6c0:	54 96       	adiw	r26, 0x14	; 20
 6c2:	ed 91       	ld	r30, X+
 6c4:	fc 91       	ld	r31, X
 6c6:	55 97       	sbiw	r26, 0x15	; 21
 6c8:	80 81       	ld	r24, Z
 6ca:	86 ff       	sbrs	r24, 6
 6cc:	f9 cf       	rjmp	.-14     	; 0x6c0 <_ZN14HardwareSerial5flushEv+0xc>
  transmitting = false;
 6ce:	91 96       	adiw	r26, 0x21	; 33
 6d0:	1c 92       	st	X, r1
}
 6d2:	08 95       	ret

000006d4 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
 6d4:	cf 93       	push	r28
 6d6:	df 93       	push	r29
 6d8:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
 6da:	ee 85       	ldd	r30, Y+14	; 0x0e
 6dc:	ff 85       	ldd	r31, Y+15	; 0x0f
 6de:	e0 5c       	subi	r30, 0xC0	; 192
 6e0:	ff 4f       	sbci	r31, 0xFF	; 255
 6e2:	20 81       	ld	r18, Z
 6e4:	31 81       	ldd	r19, Z+1	; 0x01
 6e6:	e0 54       	subi	r30, 0x40	; 64
 6e8:	f0 40       	sbci	r31, 0x00	; 0
 6ea:	2f 5f       	subi	r18, 0xFF	; 255
 6ec:	3f 4f       	sbci	r19, 0xFF	; 255
 6ee:	2f 73       	andi	r18, 0x3F	; 63
 6f0:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
 6f2:	df 01       	movw	r26, r30
 6f4:	ae 5b       	subi	r26, 0xBE	; 190
 6f6:	bf 4f       	sbci	r27, 0xFF	; 255
 6f8:	8d 91       	ld	r24, X+
 6fa:	9c 91       	ld	r25, X
 6fc:	11 97       	sbiw	r26, 0x01	; 1
 6fe:	28 17       	cp	r18, r24
 700:	39 07       	cpc	r19, r25
 702:	d1 f3       	breq	.-12     	; 0x6f8 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
 704:	e0 5c       	subi	r30, 0xC0	; 192
 706:	ff 4f       	sbci	r31, 0xFF	; 255
 708:	80 81       	ld	r24, Z
 70a:	91 81       	ldd	r25, Z+1	; 0x01
 70c:	e0 54       	subi	r30, 0x40	; 64
 70e:	f0 40       	sbci	r31, 0x00	; 0
 710:	e8 0f       	add	r30, r24
 712:	f9 1f       	adc	r31, r25
 714:	60 83       	st	Z, r22
  _tx_buffer->head = i;
 716:	ee 85       	ldd	r30, Y+14	; 0x0e
 718:	ff 85       	ldd	r31, Y+15	; 0x0f
 71a:	e0 5c       	subi	r30, 0xC0	; 192
 71c:	ff 4f       	sbci	r31, 0xFF	; 255
 71e:	31 83       	std	Z+1, r19	; 0x01
 720:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
 722:	ee 89       	ldd	r30, Y+22	; 0x16
 724:	ff 89       	ldd	r31, Y+23	; 0x17
 726:	20 81       	ld	r18, Z
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	0f 8c       	ldd	r0, Y+31	; 0x1f
 72e:	02 c0       	rjmp	.+4      	; 0x734 <_ZN14HardwareSerial5writeEh+0x60>
 730:	88 0f       	add	r24, r24
 732:	99 1f       	adc	r25, r25
 734:	0a 94       	dec	r0
 736:	e2 f7       	brpl	.-8      	; 0x730 <_ZN14HardwareSerial5writeEh+0x5c>
 738:	28 2b       	or	r18, r24
 73a:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
 740:	ec 89       	ldd	r30, Y+20	; 0x14
 742:	fd 89       	ldd	r31, Y+21	; 0x15
 744:	80 81       	ld	r24, Z
 746:	80 64       	ori	r24, 0x40	; 64
 748:	80 83       	st	Z, r24
  
  return 1;
}
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	df 91       	pop	r29
 750:	cf 91       	pop	r28
 752:	08 95       	ret

00000754 <_ZN14HardwareSerialcvbEv>:

HardwareSerial::operator bool() {
	return true;
}
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	08 95       	ret

00000758 <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 758:	10 92 e2 04 	sts	0x04E2, r1
 75c:	10 92 e1 04 	sts	0x04E1, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 760:	88 ee       	ldi	r24, 0xE8	; 232
 762:	93 e0       	ldi	r25, 0x03	; 3
 764:	a0 e0       	ldi	r26, 0x00	; 0
 766:	b0 e0       	ldi	r27, 0x00	; 0
 768:	80 93 e3 04 	sts	0x04E3, r24
 76c:	90 93 e4 04 	sts	0x04E4, r25
 770:	a0 93 e5 04 	sts	0x04E5, r26
 774:	b0 93 e6 04 	sts	0x04E6, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
 778:	87 e4       	ldi	r24, 0x47	; 71
 77a:	94 e0       	ldi	r25, 0x04	; 4
 77c:	90 93 e0 04 	sts	0x04E0, r25
 780:	80 93 df 04 	sts	0x04DF, r24
{
  _rx_buffer = rx_buffer;
 784:	87 e5       	ldi	r24, 0x57	; 87
 786:	94 e0       	ldi	r25, 0x04	; 4
 788:	90 93 ec 04 	sts	0x04EC, r25
 78c:	80 93 eb 04 	sts	0x04EB, r24
  _tx_buffer = tx_buffer;
 790:	8b e9       	ldi	r24, 0x9B	; 155
 792:	94 e0       	ldi	r25, 0x04	; 4
 794:	90 93 ee 04 	sts	0x04EE, r25
 798:	80 93 ed 04 	sts	0x04ED, r24
  _ubrrh = ubrrh;
 79c:	85 ec       	ldi	r24, 0xC5	; 197
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	90 93 f0 04 	sts	0x04F0, r25
 7a4:	80 93 ef 04 	sts	0x04EF, r24
  _ubrrl = ubrrl;
 7a8:	84 ec       	ldi	r24, 0xC4	; 196
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	90 93 f2 04 	sts	0x04F2, r25
 7b0:	80 93 f1 04 	sts	0x04F1, r24
  _ucsra = ucsra;
 7b4:	80 ec       	ldi	r24, 0xC0	; 192
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	90 93 f4 04 	sts	0x04F4, r25
 7bc:	80 93 f3 04 	sts	0x04F3, r24
  _ucsrb = ucsrb;
 7c0:	81 ec       	ldi	r24, 0xC1	; 193
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	90 93 f6 04 	sts	0x04F6, r25
 7c8:	80 93 f5 04 	sts	0x04F5, r24
  _ucsrc = ucsrc;
 7cc:	82 ec       	ldi	r24, 0xC2	; 194
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	90 93 f8 04 	sts	0x04F8, r25
 7d4:	80 93 f7 04 	sts	0x04F7, r24
  _udr = udr;
 7d8:	86 ec       	ldi	r24, 0xC6	; 198
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	90 93 fa 04 	sts	0x04FA, r25
 7e0:	80 93 f9 04 	sts	0x04F9, r24
  _rxen = rxen;
 7e4:	84 e0       	ldi	r24, 0x04	; 4
 7e6:	80 93 fb 04 	sts	0x04FB, r24
  _txen = txen;
 7ea:	83 e0       	ldi	r24, 0x03	; 3
 7ec:	80 93 fc 04 	sts	0x04FC, r24
  _rxcie = rxcie;
 7f0:	87 e0       	ldi	r24, 0x07	; 7
 7f2:	80 93 fd 04 	sts	0x04FD, r24
  _udrie = udrie;
 7f6:	85 e0       	ldi	r24, 0x05	; 5
 7f8:	80 93 fe 04 	sts	0x04FE, r24
  _u2x = u2x;
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	80 93 ff 04 	sts	0x04FF, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
 802:	08 95       	ret

00000804 <main>:
#include <Arduino.h>

int main(void)
 804:	cf 93       	push	r28
 806:	df 93       	push	r29
{
	init();
 808:	0e 94 90 05 	call	0xb20	; 0xb20 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 80c:	0e 94 2a 01 	call	0x254	; 0x254 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 810:	cb e2       	ldi	r28, 0x2B	; 43
 812:	d2 e0       	ldi	r29, 0x02	; 2
#endif
	
	setup();
    
	for (;;) {
		loop();
 814:	0e 94 d6 00 	call	0x1ac	; 0x1ac <loop>
		if (serialEventRun) serialEventRun();
 818:	20 97       	sbiw	r28, 0x00	; 0
 81a:	e1 f3       	breq	.-8      	; 0x814 <main+0x10>
 81c:	0e 94 2b 02 	call	0x456	; 0x456 <_Z14serialEventRunv>
 820:	f9 cf       	rjmp	.-14     	; 0x814 <main+0x10>

00000822 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
 822:	cf 92       	push	r12
 824:	df 92       	push	r13
 826:	ef 92       	push	r14
 828:	ff 92       	push	r15
 82a:	0f 93       	push	r16
 82c:	1f 93       	push	r17
 82e:	cf 93       	push	r28
 830:	df 93       	push	r29
 832:	7c 01       	movw	r14, r24
 834:	6b 01       	movw	r12, r22
 836:	8a 01       	movw	r16, r20
 838:	c0 e0       	ldi	r28, 0x00	; 0
 83a:	d0 e0       	ldi	r29, 0x00	; 0
 83c:	0f c0       	rjmp	.+30     	; 0x85c <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
 83e:	d6 01       	movw	r26, r12
 840:	6d 91       	ld	r22, X+
 842:	6d 01       	movw	r12, r26
 844:	d7 01       	movw	r26, r14
 846:	ed 91       	ld	r30, X+
 848:	fc 91       	ld	r31, X
 84a:	01 90       	ld	r0, Z+
 84c:	f0 81       	ld	r31, Z
 84e:	e0 2d       	mov	r30, r0
 850:	c7 01       	movw	r24, r14
 852:	09 95       	icall
 854:	c8 0f       	add	r28, r24
 856:	d9 1f       	adc	r29, r25
 858:	01 50       	subi	r16, 0x01	; 1
 85a:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 85c:	01 15       	cp	r16, r1
 85e:	11 05       	cpc	r17, r1
 860:	71 f7       	brne	.-36     	; 0x83e <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
 862:	ce 01       	movw	r24, r28
 864:	df 91       	pop	r29
 866:	cf 91       	pop	r28
 868:	1f 91       	pop	r17
 86a:	0f 91       	pop	r16
 86c:	ff 90       	pop	r15
 86e:	ef 90       	pop	r14
 870:	df 90       	pop	r13
 872:	cf 90       	pop	r12
 874:	08 95       	ret

00000876 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
 876:	ef 92       	push	r14
 878:	ff 92       	push	r15
 87a:	0f 93       	push	r16
 87c:	1f 93       	push	r17
 87e:	cf 93       	push	r28
 880:	df 93       	push	r29
 882:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
 884:	8b 01       	movw	r16, r22
 886:	c0 e0       	ldi	r28, 0x00	; 0
 888:	d0 e0       	ldi	r29, 0x00	; 0
 88a:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
 88c:	0f 5f       	subi	r16, 0xFF	; 255
 88e:	1f 4f       	sbci	r17, 0xFF	; 255
 890:	64 91       	lpm	r22, Z+
    if (c == 0) break;
 892:	66 23       	and	r22, r22
 894:	59 f0       	breq	.+22     	; 0x8ac <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    n += write(c);
 896:	d7 01       	movw	r26, r14
 898:	ed 91       	ld	r30, X+
 89a:	fc 91       	ld	r31, X
 89c:	01 90       	ld	r0, Z+
 89e:	f0 81       	ld	r31, Z
 8a0:	e0 2d       	mov	r30, r0
 8a2:	c7 01       	movw	r24, r14
 8a4:	09 95       	icall
 8a6:	c8 0f       	add	r28, r24
 8a8:	d9 1f       	adc	r29, r25
 8aa:	ef cf       	rjmp	.-34     	; 0x88a <_ZN5Print5printEPK19__FlashStringHelper+0x14>
  }
  return n;
}
 8ac:	ce 01       	movw	r24, r28
 8ae:	df 91       	pop	r29
 8b0:	cf 91       	pop	r28
 8b2:	1f 91       	pop	r17
 8b4:	0f 91       	pop	r16
 8b6:	ff 90       	pop	r15
 8b8:	ef 90       	pop	r14
 8ba:	08 95       	ret

000008bc <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
 8bc:	ef 92       	push	r14
 8be:	ff 92       	push	r15
 8c0:	0f 93       	push	r16
 8c2:	1f 93       	push	r17
 8c4:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8c6:	dc 01       	movw	r26, r24
 8c8:	ed 91       	ld	r30, X+
 8ca:	fc 91       	ld	r31, X
 8cc:	01 90       	ld	r0, Z+
 8ce:	f0 81       	ld	r31, Z
 8d0:	e0 2d       	mov	r30, r0
 8d2:	6d e0       	ldi	r22, 0x0D	; 13
 8d4:	09 95       	icall
 8d6:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
 8d8:	d8 01       	movw	r26, r16
 8da:	ed 91       	ld	r30, X+
 8dc:	fc 91       	ld	r31, X
 8de:	01 90       	ld	r0, Z+
 8e0:	f0 81       	ld	r31, Z
 8e2:	e0 2d       	mov	r30, r0
 8e4:	c8 01       	movw	r24, r16
 8e6:	6a e0       	ldi	r22, 0x0A	; 10
 8e8:	09 95       	icall
 8ea:	9c 01       	movw	r18, r24
 8ec:	2e 0d       	add	r18, r14
 8ee:	3f 1d       	adc	r19, r15
 8f0:	c9 01       	movw	r24, r18
 8f2:	1f 91       	pop	r17
 8f4:	0f 91       	pop	r16
 8f6:	ff 90       	pop	r15
 8f8:	ef 90       	pop	r14
 8fa:	08 95       	ret

000008fc <_ZN5Print7printlnEPK19__FlashStringHelper>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
 8fc:	ef 92       	push	r14
 8fe:	ff 92       	push	r15
 900:	0f 93       	push	r16
 902:	1f 93       	push	r17
 904:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
 906:	0e 94 3b 04 	call	0x876	; 0x876 <_ZN5Print5printEPK19__FlashStringHelper>
 90a:	8c 01       	movw	r16, r24
  n += println();
 90c:	c7 01       	movw	r24, r14
 90e:	0e 94 5e 04 	call	0x8bc	; 0x8bc <_ZN5Print7printlnEv>
 912:	9c 01       	movw	r18, r24
 914:	20 0f       	add	r18, r16
 916:	31 1f       	adc	r19, r17
  return n;
}
 918:	c9 01       	movw	r24, r18
 91a:	1f 91       	pop	r17
 91c:	0f 91       	pop	r16
 91e:	ff 90       	pop	r15
 920:	ef 90       	pop	r14
 922:	08 95       	ret

00000924 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 924:	cf 93       	push	r28
 926:	df 93       	push	r29
 928:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
 92a:	61 15       	cp	r22, r1
 92c:	71 05       	cpc	r23, r1
 92e:	19 f4       	brne	.+6      	; 0x936 <_ZN5Print5writeEPKc+0x12>
 930:	20 e0       	ldi	r18, 0x00	; 0
 932:	30 e0       	ldi	r19, 0x00	; 0
 934:	0f c0       	rjmp	.+30     	; 0x954 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 936:	db 01       	movw	r26, r22
 938:	0d 90       	ld	r0, X+
 93a:	00 20       	and	r0, r0
 93c:	e9 f7       	brne	.-6      	; 0x938 <_ZN5Print5writeEPKc+0x14>
 93e:	11 97       	sbiw	r26, 0x01	; 1
 940:	a6 1b       	sub	r26, r22
 942:	b7 0b       	sbc	r27, r23
 944:	e8 81       	ld	r30, Y
 946:	f9 81       	ldd	r31, Y+1	; 0x01
 948:	02 80       	ldd	r0, Z+2	; 0x02
 94a:	f3 81       	ldd	r31, Z+3	; 0x03
 94c:	e0 2d       	mov	r30, r0
 94e:	ad 01       	movw	r20, r26
 950:	09 95       	icall
 952:	9c 01       	movw	r18, r24
    }
 954:	c9 01       	movw	r24, r18
 956:	df 91       	pop	r29
 958:	cf 91       	pop	r28
 95a:	08 95       	ret

0000095c <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 95c:	4f 92       	push	r4
 95e:	5f 92       	push	r5
 960:	7f 92       	push	r7
 962:	8f 92       	push	r8
 964:	9f 92       	push	r9
 966:	af 92       	push	r10
 968:	bf 92       	push	r11
 96a:	cf 92       	push	r12
 96c:	df 92       	push	r13
 96e:	ef 92       	push	r14
 970:	ff 92       	push	r15
 972:	0f 93       	push	r16
 974:	1f 93       	push	r17
 976:	df 93       	push	r29
 978:	cf 93       	push	r28
 97a:	cd b7       	in	r28, 0x3d	; 61
 97c:	de b7       	in	r29, 0x3e	; 62
 97e:	a1 97       	sbiw	r28, 0x21	; 33
 980:	0f b6       	in	r0, 0x3f	; 63
 982:	f8 94       	cli
 984:	de bf       	out	0x3e, r29	; 62
 986:	0f be       	out	0x3f, r0	; 63
 988:	cd bf       	out	0x3d, r28	; 61
 98a:	2c 01       	movw	r4, r24
 98c:	74 2e       	mov	r7, r20
 98e:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 990:	22 30       	cpi	r18, 0x02	; 2
 992:	08 f4       	brcc	.+2      	; 0x996 <_ZN5Print11printNumberEmh+0x3a>
 994:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 996:	19 a2       	std	Y+33, r1	; 0x21
 998:	31 e2       	ldi	r19, 0x21	; 33
 99a:	c3 2e       	mov	r12, r19
 99c:	d1 2c       	mov	r13, r1
 99e:	cc 0e       	add	r12, r28
 9a0:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 9a2:	82 2e       	mov	r8, r18
 9a4:	99 24       	eor	r9, r9
 9a6:	aa 24       	eor	r10, r10
 9a8:	bb 24       	eor	r11, r11
 9aa:	67 2d       	mov	r22, r7
 9ac:	75 2f       	mov	r23, r21
 9ae:	a5 01       	movw	r20, r10
 9b0:	94 01       	movw	r18, r8
 9b2:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__udivmodsi4>
 9b6:	79 01       	movw	r14, r18
 9b8:	8a 01       	movw	r16, r20
    char c = m - base * n;
 9ba:	c8 01       	movw	r24, r16
 9bc:	b7 01       	movw	r22, r14
 9be:	a5 01       	movw	r20, r10
 9c0:	94 01       	movw	r18, r8
 9c2:	0e 94 cb 05 	call	0xb96	; 0xb96 <__mulsi3>
 9c6:	47 2d       	mov	r20, r7
 9c8:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 9ca:	08 94       	sec
 9cc:	c1 08       	sbc	r12, r1
 9ce:	d1 08       	sbc	r13, r1
 9d0:	4a 30       	cpi	r20, 0x0A	; 10
 9d2:	14 f4       	brge	.+4      	; 0x9d8 <_ZN5Print11printNumberEmh+0x7c>
 9d4:	40 5d       	subi	r20, 0xD0	; 208
 9d6:	01 c0       	rjmp	.+2      	; 0x9da <_ZN5Print11printNumberEmh+0x7e>
 9d8:	49 5c       	subi	r20, 0xC9	; 201
 9da:	f6 01       	movw	r30, r12
 9dc:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 9de:	e1 14       	cp	r14, r1
 9e0:	f1 04       	cpc	r15, r1
 9e2:	01 05       	cpc	r16, r1
 9e4:	11 05       	cpc	r17, r1
 9e6:	21 f0       	breq	.+8      	; 0x9f0 <_ZN5Print11printNumberEmh+0x94>
 9e8:	7e 2c       	mov	r7, r14
 9ea:	5f 2d       	mov	r21, r15
 9ec:	c8 01       	movw	r24, r16
 9ee:	dd cf       	rjmp	.-70     	; 0x9aa <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 9f0:	c2 01       	movw	r24, r4
 9f2:	b6 01       	movw	r22, r12
 9f4:	0e 94 92 04 	call	0x924	; 0x924 <_ZN5Print5writeEPKc>
}
 9f8:	a1 96       	adiw	r28, 0x21	; 33
 9fa:	0f b6       	in	r0, 0x3f	; 63
 9fc:	f8 94       	cli
 9fe:	de bf       	out	0x3e, r29	; 62
 a00:	0f be       	out	0x3f, r0	; 63
 a02:	cd bf       	out	0x3d, r28	; 61
 a04:	cf 91       	pop	r28
 a06:	df 91       	pop	r29
 a08:	1f 91       	pop	r17
 a0a:	0f 91       	pop	r16
 a0c:	ff 90       	pop	r15
 a0e:	ef 90       	pop	r14
 a10:	df 90       	pop	r13
 a12:	cf 90       	pop	r12
 a14:	bf 90       	pop	r11
 a16:	af 90       	pop	r10
 a18:	9f 90       	pop	r9
 a1a:	8f 90       	pop	r8
 a1c:	7f 90       	pop	r7
 a1e:	5f 90       	pop	r5
 a20:	4f 90       	pop	r4
 a22:	08 95       	ret

00000a24 <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
 a24:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
 a26:	21 15       	cp	r18, r1
 a28:	31 05       	cpc	r19, r1
 a2a:	41 f4       	brne	.+16     	; 0xa3c <_ZN5Print5printEmi+0x18>
 a2c:	ed 91       	ld	r30, X+
 a2e:	fc 91       	ld	r31, X
 a30:	01 90       	ld	r0, Z+
 a32:	f0 81       	ld	r31, Z
 a34:	e0 2d       	mov	r30, r0
 a36:	64 2f       	mov	r22, r20
 a38:	09 95       	icall
 a3a:	08 95       	ret
  else return printNumber(n, base);
 a3c:	0e 94 ae 04 	call	0x95c	; 0x95c <_ZN5Print11printNumberEmh>
}
 a40:	08 95       	ret

00000a42 <_ZN5Print5printEji>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
 a42:	ef 92       	push	r14
 a44:	ff 92       	push	r15
 a46:	0f 93       	push	r16
 a48:	1f 93       	push	r17
 a4a:	9a 01       	movw	r18, r20
{
  return print((unsigned long) n, base);
 a4c:	7b 01       	movw	r14, r22
 a4e:	00 e0       	ldi	r16, 0x00	; 0
 a50:	10 e0       	ldi	r17, 0x00	; 0
 a52:	b8 01       	movw	r22, r16
 a54:	a7 01       	movw	r20, r14
 a56:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN5Print5printEmi>
}
 a5a:	1f 91       	pop	r17
 a5c:	0f 91       	pop	r16
 a5e:	ff 90       	pop	r15
 a60:	ef 90       	pop	r14
 a62:	08 95       	ret

00000a64 <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 a64:	0e 94 92 04 	call	0x924	; 0x924 <_ZN5Print5writeEPKc>
}
 a68:	08 95       	ret

00000a6a <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
 a6a:	ef 92       	push	r14
 a6c:	ff 92       	push	r15
 a6e:	0f 93       	push	r16
 a70:	1f 93       	push	r17
 a72:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 a74:	0e 94 92 04 	call	0x924	; 0x924 <_ZN5Print5writeEPKc>
 a78:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 a7a:	c7 01       	movw	r24, r14
 a7c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <_ZN5Print7printlnEv>
 a80:	08 0f       	add	r16, r24
 a82:	19 1f       	adc	r17, r25
  return n;
}
 a84:	c8 01       	movw	r24, r16
 a86:	1f 91       	pop	r17
 a88:	0f 91       	pop	r16
 a8a:	ff 90       	pop	r15
 a8c:	ef 90       	pop	r14
 a8e:	08 95       	ret

00000a90 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 a90:	1f 92       	push	r1
 a92:	0f 92       	push	r0
 a94:	0f b6       	in	r0, 0x3f	; 63
 a96:	0f 92       	push	r0
 a98:	11 24       	eor	r1, r1
 a9a:	2f 93       	push	r18
 a9c:	3f 93       	push	r19
 a9e:	8f 93       	push	r24
 aa0:	9f 93       	push	r25
 aa2:	af 93       	push	r26
 aa4:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 aa6:	80 91 05 05 	lds	r24, 0x0505
 aaa:	90 91 06 05 	lds	r25, 0x0506
 aae:	a0 91 07 05 	lds	r26, 0x0507
 ab2:	b0 91 08 05 	lds	r27, 0x0508
	unsigned char f = timer0_fract;
 ab6:	30 91 09 05 	lds	r19, 0x0509

	m += MILLIS_INC;
 aba:	01 96       	adiw	r24, 0x01	; 1
 abc:	a1 1d       	adc	r26, r1
 abe:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
 ac0:	23 2f       	mov	r18, r19
 ac2:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
 ac4:	2d 37       	cpi	r18, 0x7D	; 125
 ac6:	20 f0       	brcs	.+8      	; 0xad0 <__vector_16+0x40>
		f -= FRACT_MAX;
 ac8:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
 aca:	01 96       	adiw	r24, 0x01	; 1
 acc:	a1 1d       	adc	r26, r1
 ace:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 ad0:	20 93 09 05 	sts	0x0509, r18
	timer0_millis = m;
 ad4:	80 93 05 05 	sts	0x0505, r24
 ad8:	90 93 06 05 	sts	0x0506, r25
 adc:	a0 93 07 05 	sts	0x0507, r26
 ae0:	b0 93 08 05 	sts	0x0508, r27
	timer0_overflow_count++;
 ae4:	80 91 01 05 	lds	r24, 0x0501
 ae8:	90 91 02 05 	lds	r25, 0x0502
 aec:	a0 91 03 05 	lds	r26, 0x0503
 af0:	b0 91 04 05 	lds	r27, 0x0504
 af4:	01 96       	adiw	r24, 0x01	; 1
 af6:	a1 1d       	adc	r26, r1
 af8:	b1 1d       	adc	r27, r1
 afa:	80 93 01 05 	sts	0x0501, r24
 afe:	90 93 02 05 	sts	0x0502, r25
 b02:	a0 93 03 05 	sts	0x0503, r26
 b06:	b0 93 04 05 	sts	0x0504, r27
}
 b0a:	bf 91       	pop	r27
 b0c:	af 91       	pop	r26
 b0e:	9f 91       	pop	r25
 b10:	8f 91       	pop	r24
 b12:	3f 91       	pop	r19
 b14:	2f 91       	pop	r18
 b16:	0f 90       	pop	r0
 b18:	0f be       	out	0x3f, r0	; 63
 b1a:	0f 90       	pop	r0
 b1c:	1f 90       	pop	r1
 b1e:	18 95       	reti

00000b20 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 b20:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 b22:	84 b5       	in	r24, 0x24	; 36
 b24:	82 60       	ori	r24, 0x02	; 2
 b26:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 b28:	84 b5       	in	r24, 0x24	; 36
 b2a:	81 60       	ori	r24, 0x01	; 1
 b2c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 b2e:	85 b5       	in	r24, 0x25	; 37
 b30:	82 60       	ori	r24, 0x02	; 2
 b32:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 b34:	85 b5       	in	r24, 0x25	; 37
 b36:	81 60       	ori	r24, 0x01	; 1
 b38:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 b3a:	ee e6       	ldi	r30, 0x6E	; 110
 b3c:	f0 e0       	ldi	r31, 0x00	; 0
 b3e:	80 81       	ld	r24, Z
 b40:	81 60       	ori	r24, 0x01	; 1
 b42:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 b44:	e1 e8       	ldi	r30, 0x81	; 129
 b46:	f0 e0       	ldi	r31, 0x00	; 0
 b48:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 b4a:	80 81       	ld	r24, Z
 b4c:	82 60       	ori	r24, 0x02	; 2
 b4e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 b50:	80 81       	ld	r24, Z
 b52:	81 60       	ori	r24, 0x01	; 1
 b54:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 b56:	e0 e8       	ldi	r30, 0x80	; 128
 b58:	f0 e0       	ldi	r31, 0x00	; 0
 b5a:	80 81       	ld	r24, Z
 b5c:	81 60       	ori	r24, 0x01	; 1
 b5e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 b60:	e1 eb       	ldi	r30, 0xB1	; 177
 b62:	f0 e0       	ldi	r31, 0x00	; 0
 b64:	80 81       	ld	r24, Z
 b66:	84 60       	ori	r24, 0x04	; 4
 b68:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 b6a:	e0 eb       	ldi	r30, 0xB0	; 176
 b6c:	f0 e0       	ldi	r31, 0x00	; 0
 b6e:	80 81       	ld	r24, Z
 b70:	81 60       	ori	r24, 0x01	; 1
 b72:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 b74:	ea e7       	ldi	r30, 0x7A	; 122
 b76:	f0 e0       	ldi	r31, 0x00	; 0
 b78:	80 81       	ld	r24, Z
 b7a:	84 60       	ori	r24, 0x04	; 4
 b7c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 b7e:	80 81       	ld	r24, Z
 b80:	82 60       	ori	r24, 0x02	; 2
 b82:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 b84:	80 81       	ld	r24, Z
 b86:	81 60       	ori	r24, 0x01	; 1
 b88:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 b8a:	80 81       	ld	r24, Z
 b8c:	80 68       	ori	r24, 0x80	; 128
 b8e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 b90:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
 b94:	08 95       	ret

00000b96 <__mulsi3>:
 b96:	62 9f       	mul	r22, r18
 b98:	d0 01       	movw	r26, r0
 b9a:	73 9f       	mul	r23, r19
 b9c:	f0 01       	movw	r30, r0
 b9e:	82 9f       	mul	r24, r18
 ba0:	e0 0d       	add	r30, r0
 ba2:	f1 1d       	adc	r31, r1
 ba4:	64 9f       	mul	r22, r20
 ba6:	e0 0d       	add	r30, r0
 ba8:	f1 1d       	adc	r31, r1
 baa:	92 9f       	mul	r25, r18
 bac:	f0 0d       	add	r31, r0
 bae:	83 9f       	mul	r24, r19
 bb0:	f0 0d       	add	r31, r0
 bb2:	74 9f       	mul	r23, r20
 bb4:	f0 0d       	add	r31, r0
 bb6:	65 9f       	mul	r22, r21
 bb8:	f0 0d       	add	r31, r0
 bba:	99 27       	eor	r25, r25
 bbc:	72 9f       	mul	r23, r18
 bbe:	b0 0d       	add	r27, r0
 bc0:	e1 1d       	adc	r30, r1
 bc2:	f9 1f       	adc	r31, r25
 bc4:	63 9f       	mul	r22, r19
 bc6:	b0 0d       	add	r27, r0
 bc8:	e1 1d       	adc	r30, r1
 bca:	f9 1f       	adc	r31, r25
 bcc:	bd 01       	movw	r22, r26
 bce:	cf 01       	movw	r24, r30
 bd0:	11 24       	eor	r1, r1
 bd2:	08 95       	ret

00000bd4 <__udivmodsi4>:
 bd4:	a1 e2       	ldi	r26, 0x21	; 33
 bd6:	1a 2e       	mov	r1, r26
 bd8:	aa 1b       	sub	r26, r26
 bda:	bb 1b       	sub	r27, r27
 bdc:	fd 01       	movw	r30, r26
 bde:	0d c0       	rjmp	.+26     	; 0xbfa <__udivmodsi4_ep>

00000be0 <__udivmodsi4_loop>:
 be0:	aa 1f       	adc	r26, r26
 be2:	bb 1f       	adc	r27, r27
 be4:	ee 1f       	adc	r30, r30
 be6:	ff 1f       	adc	r31, r31
 be8:	a2 17       	cp	r26, r18
 bea:	b3 07       	cpc	r27, r19
 bec:	e4 07       	cpc	r30, r20
 bee:	f5 07       	cpc	r31, r21
 bf0:	20 f0       	brcs	.+8      	; 0xbfa <__udivmodsi4_ep>
 bf2:	a2 1b       	sub	r26, r18
 bf4:	b3 0b       	sbc	r27, r19
 bf6:	e4 0b       	sbc	r30, r20
 bf8:	f5 0b       	sbc	r31, r21

00000bfa <__udivmodsi4_ep>:
 bfa:	66 1f       	adc	r22, r22
 bfc:	77 1f       	adc	r23, r23
 bfe:	88 1f       	adc	r24, r24
 c00:	99 1f       	adc	r25, r25
 c02:	1a 94       	dec	r1
 c04:	69 f7       	brne	.-38     	; 0xbe0 <__udivmodsi4_loop>
 c06:	60 95       	com	r22
 c08:	70 95       	com	r23
 c0a:	80 95       	com	r24
 c0c:	90 95       	com	r25
 c0e:	9b 01       	movw	r18, r22
 c10:	ac 01       	movw	r20, r24
 c12:	bd 01       	movw	r22, r26
 c14:	cf 01       	movw	r24, r30
 c16:	08 95       	ret

00000c18 <__tablejump2__>:
 c18:	ee 0f       	add	r30, r30
 c1a:	ff 1f       	adc	r31, r31

00000c1c <__tablejump__>:
 c1c:	05 90       	lpm	r0, Z+
 c1e:	f4 91       	lpm	r31, Z+
 c20:	e0 2d       	mov	r30, r0
 c22:	09 94       	ijmp

00000c24 <_exit>:
 c24:	f8 94       	cli

00000c26 <__stop_program>:
 c26:	ff cf       	rjmp	.-2      	; 0xc26 <__stop_program>
